diff --git a/deps/patches/vscode/jetbrains.patch b/deps/patches/vscode/jetbrains.patch
new file mode 100644
index 000000000..f800804a3
--- /dev/null
+++ b/deps/patches/vscode/jetbrains.patch
@@ -0,0 +1,1832 @@
+From 84ef3dc1d9bf973d8bcaae8b91653bbfe74c2dcf Mon Sep 17 00:00:00 2001
+From: hongyu9 <hongyu9@staff.weibo.com>
+Date: Tue, 29 Jul 2025 21:50:18 +0800
+Subject: [PATCH] fix: update callback type and add default export for start
+
+- Change callback in extHostConsoleForwarder.ts to accept (err?: Error | null) => void for better TypeScript compatibility
+- Add a default export for the start function in extensionHostProcess.ts to allow easier importing and usage
+---
+ src/main.ts                                   | 719 ------------------
+ src/vs/base/common/uri.ts                     |   1 +
+ src/vs/base/parts/ipc/common/ipc.net.ts       |  16 +-
+ .../workbench/api/common/extHost.api.impl.ts  |  11 +-
+ .../api/common/extHostConfiguration.ts        |   1 +
+ .../api/common/extHostExtensionActivator.ts   |   4 +
+ .../api/common/extHostExtensionService.ts     |  17 +-
+ src/vs/workbench/api/common/extHostWebview.ts |   1 +
+ .../api/common/extHostWebviewView.ts          |   5 +
+ .../workbench/api/common/extHostWorkspace.ts  |   1 +
+ .../workbench/api/common/extensionHostMain.ts | 248 +++---
+ .../api/node/extHostConsoleForwarder.ts       |   2 +-
+ .../api/node/extensionHostProcess.ts          |  13 +-
+ .../contrib/webview/common/webview.ts         |  11 +-
+ .../common/abstractExtensionService.ts        |   1 +
+ .../common/fileRPCProtocolLogger.ts           | 246 ++++++
+ .../services/extensions/common/rpcProtocol.ts |   4 +-
+ 17 files changed, 453 insertions(+), 848 deletions(-)
+ delete mode 100644 src/main.ts
+ create mode 100644 src/vs/workbench/services/extensions/common/fileRPCProtocolLogger.ts
+
+diff --git a/src/main.ts b/src/main.ts
+deleted file mode 100644
+index 1af3c941e00..00000000000
+--- a/src/main.ts
++++ /dev/null
+@@ -1,719 +0,0 @@
+-/*---------------------------------------------------------------------------------------------
+- *  Copyright (c) Microsoft Corporation. All rights reserved.
+- *  Licensed under the MIT License. See License.txt in the project root for license information.
+- *--------------------------------------------------------------------------------------------*/
+-
+-import * as path from 'path';
+-import * as fs from 'original-fs';
+-import * as os from 'os';
+-import { performance } from 'perf_hooks';
+-import { configurePortable } from './bootstrap-node.js';
+-import { bootstrapESM } from './bootstrap-esm.js';
+-import { fileURLToPath } from 'url';
+-import { app, protocol, crashReporter, Menu, contentTracing } from 'electron';
+-import minimist from 'minimist';
+-import { product } from './bootstrap-meta.js';
+-import { parse } from './vs/base/common/jsonc.js';
+-import { getUserDataPath } from './vs/platform/environment/node/userDataPath.js';
+-import * as perf from './vs/base/common/performance.js';
+-import { resolveNLSConfiguration } from './vs/base/node/nls.js';
+-import { getUNCHost, addUNCHostToAllowlist } from './vs/base/node/unc.js';
+-import { INLSConfiguration } from './vs/nls.js';
+-import { NativeParsedArgs } from './vs/platform/environment/common/argv.js';
+-
+-const __dirname = path.dirname(fileURLToPath(import.meta.url));
+-
+-perf.mark('code/didStartMain');
+-
+-perf.mark('code/willLoadMainBundle', {
+-	// When built, the main bundle is a single JS file with all
+-	// dependencies inlined. As such, we mark `willLoadMainBundle`
+-	// as the start of the main bundle loading process.
+-	startTime: Math.floor(performance.timeOrigin)
+-});
+-perf.mark('code/didLoadMainBundle');
+-
+-// Enable portable support
+-const portable = configurePortable(product);
+-
+-const args = parseCLIArgs();
+-// Configure static command line arguments
+-const argvConfig = configureCommandlineSwitchesSync(args);
+-// Enable sandbox globally unless
+-// 1) disabled via command line using either
+-//    `--no-sandbox` or `--disable-chromium-sandbox` argument.
+-// 2) argv.json contains `disable-chromium-sandbox: true`.
+-if (args['sandbox'] &&
+-	!args['disable-chromium-sandbox'] &&
+-	!argvConfig['disable-chromium-sandbox']) {
+-	app.enableSandbox();
+-} else if (app.commandLine.hasSwitch('no-sandbox') &&
+-	!app.commandLine.hasSwitch('disable-gpu-sandbox')) {
+-	// Disable GPU sandbox whenever --no-sandbox is used.
+-	app.commandLine.appendSwitch('disable-gpu-sandbox');
+-} else {
+-	app.commandLine.appendSwitch('no-sandbox');
+-	app.commandLine.appendSwitch('disable-gpu-sandbox');
+-}
+-
+-// Set userData path before app 'ready' event
+-const userDataPath = getUserDataPath(args, product.nameShort ?? 'code-oss-dev');
+-if (process.platform === 'win32') {
+-	const userDataUNCHost = getUNCHost(userDataPath);
+-	if (userDataUNCHost) {
+-		addUNCHostToAllowlist(userDataUNCHost); // enables to use UNC paths in userDataPath
+-	}
+-}
+-app.setPath('userData', userDataPath);
+-
+-// Resolve code cache path
+-const codeCachePath = getCodeCachePath();
+-
+-// Disable default menu (https://github.com/electron/electron/issues/35512)
+-Menu.setApplicationMenu(null);
+-
+-// Configure crash reporter
+-perf.mark('code/willStartCrashReporter');
+-// If a crash-reporter-directory is specified we store the crash reports
+-// in the specified directory and don't upload them to the crash server.
+-//
+-// Appcenter crash reporting is enabled if
+-// * enable-crash-reporter runtime argument is set to 'true'
+-// * --disable-crash-reporter command line parameter is not set
+-//
+-// Disable crash reporting in all other cases.
+-if (args['crash-reporter-directory'] || (argvConfig['enable-crash-reporter'] && !args['disable-crash-reporter'])) {
+-	configureCrashReporter();
+-}
+-perf.mark('code/didStartCrashReporter');
+-
+-// Set logs path before app 'ready' event if running portable
+-// to ensure that no 'logs' folder is created on disk at a
+-// location outside of the portable directory
+-// (https://github.com/microsoft/vscode/issues/56651)
+-if (portable && portable.isPortable) {
+-	app.setAppLogsPath(path.join(userDataPath, 'logs'));
+-}
+-
+-// Register custom schemes with privileges
+-protocol.registerSchemesAsPrivileged([
+-	{
+-		scheme: 'vscode-webview',
+-		privileges: { standard: true, secure: true, supportFetchAPI: true, corsEnabled: true, allowServiceWorkers: true, codeCache: true }
+-	},
+-	{
+-		scheme: 'vscode-file',
+-		privileges: { secure: true, standard: true, supportFetchAPI: true, corsEnabled: true, codeCache: true }
+-	}
+-]);
+-
+-// Global app listeners
+-registerListeners();
+-
+-/**
+- * We can resolve the NLS configuration early if it is defined
+- * in argv.json before `app.ready` event. Otherwise we can only
+- * resolve NLS after `app.ready` event to resolve the OS locale.
+- */
+-let nlsConfigurationPromise: Promise<INLSConfiguration> | undefined = undefined;
+-
+-// Use the most preferred OS language for language recommendation.
+-// The API might return an empty array on Linux, such as when
+-// the 'C' locale is the user's only configured locale.
+-// No matter the OS, if the array is empty, default back to 'en'.
+-const osLocale = processZhLocale((app.getPreferredSystemLanguages()?.[0] ?? 'en').toLowerCase());
+-const userLocale = getUserDefinedLocale(argvConfig);
+-if (userLocale) {
+-	nlsConfigurationPromise = resolveNLSConfiguration({
+-		userLocale,
+-		osLocale,
+-		commit: product.commit,
+-		userDataPath,
+-		nlsMetadataPath: __dirname
+-	});
+-}
+-
+-// Pass in the locale to Electron so that the
+-// Windows Control Overlay is rendered correctly on Windows.
+-// For now, don't pass in the locale on macOS due to
+-// https://github.com/microsoft/vscode/issues/167543.
+-// If the locale is `qps-ploc`, the Microsoft
+-// Pseudo Language Language Pack is being used.
+-// In that case, use `en` as the Electron locale.
+-
+-if (process.platform === 'win32' || process.platform === 'linux') {
+-	const electronLocale = (!userLocale || userLocale === 'qps-ploc') ? 'en' : userLocale;
+-	app.commandLine.appendSwitch('lang', electronLocale);
+-}
+-
+-// Load our code once ready
+-app.once('ready', function () {
+-	if (args['trace']) {
+-		let traceOptions: Electron.TraceConfig | Electron.TraceCategoriesAndOptions;
+-		if (args['trace-memory-infra']) {
+-			const customCategories = args['trace-category-filter']?.split(',') || [];
+-			customCategories.push('disabled-by-default-memory-infra', 'disabled-by-default-memory-infra.v8.code_stats');
+-			traceOptions = {
+-				included_categories: customCategories,
+-				excluded_categories: ['*'],
+-				memory_dump_config: {
+-					allowed_dump_modes: ['light', 'detailed'],
+-					triggers: [
+-						{
+-							type: 'periodic_interval',
+-							mode: 'detailed',
+-							min_time_between_dumps_ms: 10000
+-						},
+-						{
+-							type: 'periodic_interval',
+-							mode: 'light',
+-							min_time_between_dumps_ms: 1000
+-						}
+-					]
+-				}
+-			};
+-		} else {
+-			traceOptions = {
+-				categoryFilter: args['trace-category-filter'] || '*',
+-				traceOptions: args['trace-options'] || 'record-until-full,enable-sampling'
+-			};
+-		}
+-
+-		contentTracing.startRecording(traceOptions).finally(() => onReady());
+-	} else {
+-		onReady();
+-	}
+-});
+-
+-async function onReady() {
+-	perf.mark('code/mainAppReady');
+-
+-	try {
+-		const [, nlsConfig] = await Promise.all([
+-			mkdirpIgnoreError(codeCachePath),
+-			resolveNlsConfiguration()
+-		]);
+-
+-		await startup(codeCachePath, nlsConfig);
+-	} catch (error) {
+-		console.error(error);
+-	}
+-}
+-
+-/**
+- * Main startup routine
+- */
+-async function startup(codeCachePath: string | undefined, nlsConfig: INLSConfiguration): Promise<void> {
+-	process.env['VSCODE_NLS_CONFIG'] = JSON.stringify(nlsConfig);
+-	process.env['VSCODE_CODE_CACHE_PATH'] = codeCachePath || '';
+-
+-	// Bootstrap ESM
+-	await bootstrapESM();
+-
+-	// Load Main
+-	await import('./vs/code/electron-main/main.js');
+-	perf.mark('code/didRunMainBundle');
+-}
+-
+-function configureCommandlineSwitchesSync(cliArgs: NativeParsedArgs) {
+-	const SUPPORTED_ELECTRON_SWITCHES = [
+-
+-		// alias from us for --disable-gpu
+-		'disable-hardware-acceleration',
+-
+-		// override for the color profile to use
+-		'force-color-profile',
+-
+-		// disable LCD font rendering, a Chromium flag
+-		'disable-lcd-text',
+-
+-		// bypass any specified proxy for the given semi-colon-separated list of hosts
+-		'proxy-bypass-list'
+-	];
+-
+-	if (process.platform === 'linux') {
+-
+-		// Force enable screen readers on Linux via this flag
+-		SUPPORTED_ELECTRON_SWITCHES.push('force-renderer-accessibility');
+-
+-		// override which password-store is used on Linux
+-		SUPPORTED_ELECTRON_SWITCHES.push('password-store');
+-	}
+-
+-	const SUPPORTED_MAIN_PROCESS_SWITCHES = [
+-
+-		// Persistently enable proposed api via argv.json: https://github.com/microsoft/vscode/issues/99775
+-		'enable-proposed-api',
+-
+-		// Log level to use. Default is 'info'. Allowed values are 'error', 'warn', 'info', 'debug', 'trace', 'off'.
+-		'log-level',
+-
+-		// Use an in-memory storage for secrets
+-		'use-inmemory-secretstorage'
+-	];
+-
+-	// Read argv config
+-	const argvConfig = readArgvConfigSync();
+-
+-	Object.keys(argvConfig).forEach(argvKey => {
+-		const argvValue = argvConfig[argvKey];
+-
+-		// Append Electron flags to Electron
+-		if (SUPPORTED_ELECTRON_SWITCHES.indexOf(argvKey) !== -1) {
+-			if (argvValue === true || argvValue === 'true') {
+-				if (argvKey === 'disable-hardware-acceleration') {
+-					app.disableHardwareAcceleration(); // needs to be called explicitly
+-				} else {
+-					app.commandLine.appendSwitch(argvKey);
+-				}
+-			} else if (typeof argvValue === 'string' && argvValue) {
+-				if (argvKey === 'password-store') {
+-					// Password store
+-					// TODO@TylerLeonhardt: Remove this migration in 3 months
+-					let migratedArgvValue = argvValue;
+-					if (argvValue === 'gnome' || argvValue === 'gnome-keyring') {
+-						migratedArgvValue = 'gnome-libsecret';
+-					}
+-					app.commandLine.appendSwitch(argvKey, migratedArgvValue);
+-				} else {
+-					app.commandLine.appendSwitch(argvKey, argvValue);
+-				}
+-			}
+-		}
+-
+-		// Append main process flags to process.argv
+-		else if (SUPPORTED_MAIN_PROCESS_SWITCHES.indexOf(argvKey) !== -1) {
+-			switch (argvKey) {
+-				case 'enable-proposed-api':
+-					if (Array.isArray(argvValue)) {
+-						argvValue.forEach(id => id && typeof id === 'string' && process.argv.push('--enable-proposed-api', id));
+-					} else {
+-						console.error(`Unexpected value for \`enable-proposed-api\` in argv.json. Expected array of extension ids.`);
+-					}
+-					break;
+-
+-				case 'log-level':
+-					if (typeof argvValue === 'string') {
+-						process.argv.push('--log', argvValue);
+-					} else if (Array.isArray(argvValue)) {
+-						for (const value of argvValue) {
+-							process.argv.push('--log', value);
+-						}
+-					}
+-					break;
+-
+-				case 'use-inmemory-secretstorage':
+-					if (argvValue) {
+-						process.argv.push('--use-inmemory-secretstorage');
+-					}
+-					break;
+-			}
+-		}
+-	});
+-
+-	// Following features are enabled from the runtime:
+-	// `DocumentPolicyIncludeJSCallStacksInCrashReports` - https://www.electronjs.org/docs/latest/api/web-frame-main#framecollectjavascriptcallstack-experimental
+-	// `EarlyEstablishGpuChannel` - Refs https://issues.chromium.org/issues/40208065
+-	// `EstablishGpuChannelAsync` - Refs https://issues.chromium.org/issues/40208065
+-	const featuresToEnable =
+-		`DocumentPolicyIncludeJSCallStacksInCrashReports,EarlyEstablishGpuChannel,EstablishGpuChannelAsync,${app.commandLine.getSwitchValue('enable-features')}`;
+-	app.commandLine.appendSwitch('enable-features', featuresToEnable);
+-
+-	// Following features are disabled from the runtime:
+-	// `CalculateNativeWinOcclusion` - Disable native window occlusion tracker (https://groups.google.com/a/chromium.org/g/embedder-dev/c/ZF3uHHyWLKw/m/VDN2hDXMAAAJ)
+-	const featuresToDisable =
+-		`CalculateNativeWinOcclusion,${app.commandLine.getSwitchValue('disable-features')}`;
+-	app.commandLine.appendSwitch('disable-features', featuresToDisable);
+-
+-	// Blink features to configure.
+-	// `FontMatchingCTMigration` - Siwtch font matching on macOS to Appkit (Refs https://github.com/microsoft/vscode/issues/224496#issuecomment-2270418470).
+-	// `StandardizedBrowserZoom` - Disable zoom adjustment for bounding box (https://github.com/microsoft/vscode/issues/232750#issuecomment-2459495394)
+-	const blinkFeaturesToDisable =
+-		`FontMatchingCTMigration,StandardizedBrowserZoom,${app.commandLine.getSwitchValue('disable-blink-features')}`;
+-	app.commandLine.appendSwitch('disable-blink-features', blinkFeaturesToDisable);
+-
+-	// Support JS Flags
+-	const jsFlags = getJSFlags(cliArgs);
+-	if (jsFlags) {
+-		app.commandLine.appendSwitch('js-flags', jsFlags);
+-	}
+-
+-	// Use portal version 4 that supports current_folder option
+-	// to address https://github.com/microsoft/vscode/issues/213780
+-	// Runtime sets the default version to 3, refs https://github.com/electron/electron/pull/44426
+-	app.commandLine.appendSwitch('xdg-portal-required-version', '4');
+-
+-	return argvConfig;
+-}
+-
+-interface IArgvConfig {
+-	[key: string]: string | string[] | boolean | undefined;
+-	readonly locale?: string;
+-	readonly 'disable-lcd-text'?: boolean;
+-	readonly 'proxy-bypass-list'?: string;
+-	readonly 'disable-hardware-acceleration'?: boolean;
+-	readonly 'force-color-profile'?: string;
+-	readonly 'enable-crash-reporter'?: boolean;
+-	readonly 'crash-reporter-id'?: string;
+-	readonly 'enable-proposed-api'?: string[];
+-	readonly 'log-level'?: string | string[];
+-	readonly 'disable-chromium-sandbox'?: boolean;
+-	readonly 'use-inmemory-secretstorage'?: boolean;
+-}
+-
+-function readArgvConfigSync(): IArgvConfig {
+-
+-	// Read or create the argv.json config file sync before app('ready')
+-	const argvConfigPath = getArgvConfigPath();
+-	let argvConfig: IArgvConfig | undefined = undefined;
+-	try {
+-		argvConfig = parse(fs.readFileSync(argvConfigPath).toString());
+-	} catch (error) {
+-		if (error && error.code === 'ENOENT') {
+-			createDefaultArgvConfigSync(argvConfigPath);
+-		} else {
+-			console.warn(`Unable to read argv.json configuration file in ${argvConfigPath}, falling back to defaults (${error})`);
+-		}
+-	}
+-
+-	// Fallback to default
+-	if (!argvConfig) {
+-		argvConfig = {};
+-	}
+-
+-	return argvConfig;
+-}
+-
+-function createDefaultArgvConfigSync(argvConfigPath: string): void {
+-	try {
+-
+-		// Ensure argv config parent exists
+-		const argvConfigPathDirname = path.dirname(argvConfigPath);
+-		if (!fs.existsSync(argvConfigPathDirname)) {
+-			fs.mkdirSync(argvConfigPathDirname);
+-		}
+-
+-		// Default argv content
+-		const defaultArgvConfigContent = [
+-			'// This configuration file allows you to pass permanent command line arguments to VS Code.',
+-			'// Only a subset of arguments is currently supported to reduce the likelihood of breaking',
+-			'// the installation.',
+-			'//',
+-			'// PLEASE DO NOT CHANGE WITHOUT UNDERSTANDING THE IMPACT',
+-			'//',
+-			'// NOTE: Changing this file requires a restart of VS Code.',
+-			'{',
+-			'	// Use software rendering instead of hardware accelerated rendering.',
+-			'	// This can help in cases where you see rendering issues in VS Code.',
+-			'	// "disable-hardware-acceleration": true',
+-			'}'
+-		];
+-
+-		// Create initial argv.json with default content
+-		fs.writeFileSync(argvConfigPath, defaultArgvConfigContent.join('\n'));
+-	} catch (error) {
+-		console.error(`Unable to create argv.json configuration file in ${argvConfigPath}, falling back to defaults (${error})`);
+-	}
+-}
+-
+-function getArgvConfigPath(): string {
+-	const vscodePortable = process.env['VSCODE_PORTABLE'];
+-	if (vscodePortable) {
+-		return path.join(vscodePortable, 'argv.json');
+-	}
+-
+-	let dataFolderName = product.dataFolderName;
+-	if (process.env['VSCODE_DEV']) {
+-		dataFolderName = `${dataFolderName}-dev`;
+-	}
+-
+-	return path.join(os.homedir(), dataFolderName!, 'argv.json');
+-}
+-
+-function configureCrashReporter(): void {
+-	let crashReporterDirectory = args['crash-reporter-directory'];
+-	let submitURL = '';
+-	if (crashReporterDirectory) {
+-		crashReporterDirectory = path.normalize(crashReporterDirectory);
+-
+-		if (!path.isAbsolute(crashReporterDirectory)) {
+-			console.error(`The path '${crashReporterDirectory}' specified for --crash-reporter-directory must be absolute.`);
+-			app.exit(1);
+-		}
+-
+-		if (!fs.existsSync(crashReporterDirectory)) {
+-			try {
+-				fs.mkdirSync(crashReporterDirectory, { recursive: true });
+-			} catch (error) {
+-				console.error(`The path '${crashReporterDirectory}' specified for --crash-reporter-directory does not seem to exist or cannot be created.`);
+-				app.exit(1);
+-			}
+-		}
+-
+-		// Crashes are stored in the crashDumps directory by default, so we
+-		// need to change that directory to the provided one
+-		console.log(`Found --crash-reporter-directory argument. Setting crashDumps directory to be '${crashReporterDirectory}'`);
+-		app.setPath('crashDumps', crashReporterDirectory);
+-	}
+-
+-	// Otherwise we configure the crash reporter from product.json
+-	else {
+-		const appCenter = product.appCenter;
+-		if (appCenter) {
+-			const isWindows = (process.platform === 'win32');
+-			const isLinux = (process.platform === 'linux');
+-			const isDarwin = (process.platform === 'darwin');
+-			const crashReporterId = argvConfig['crash-reporter-id'];
+-			const uuidPattern = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
+-			if (crashReporterId && uuidPattern.test(crashReporterId)) {
+-				if (isWindows) {
+-					switch (process.arch) {
+-						case 'x64':
+-							submitURL = appCenter['win32-x64'];
+-							break;
+-						case 'arm64':
+-							submitURL = appCenter['win32-arm64'];
+-							break;
+-					}
+-				} else if (isDarwin) {
+-					if (product.darwinUniversalAssetId) {
+-						submitURL = appCenter['darwin-universal'];
+-					} else {
+-						switch (process.arch) {
+-							case 'x64':
+-								submitURL = appCenter['darwin'];
+-								break;
+-							case 'arm64':
+-								submitURL = appCenter['darwin-arm64'];
+-								break;
+-						}
+-					}
+-				} else if (isLinux) {
+-					submitURL = appCenter['linux-x64'];
+-				}
+-				submitURL = submitURL.concat('&uid=', crashReporterId, '&iid=', crashReporterId, '&sid=', crashReporterId);
+-				// Send the id for child node process that are explicitly starting crash reporter.
+-				// For vscode this is ExtensionHost process currently.
+-				const argv = process.argv;
+-				const endOfArgsMarkerIndex = argv.indexOf('--');
+-				if (endOfArgsMarkerIndex === -1) {
+-					argv.push('--crash-reporter-id', crashReporterId);
+-				} else {
+-					// if the we have an argument "--" (end of argument marker)
+-					// we cannot add arguments at the end. rather, we add
+-					// arguments before the "--" marker.
+-					argv.splice(endOfArgsMarkerIndex, 0, '--crash-reporter-id', crashReporterId);
+-				}
+-			}
+-		}
+-	}
+-
+-	// Start crash reporter for all processes
+-	const productName = (product.crashReporter ? product.crashReporter.productName : undefined) || product.nameShort;
+-	const companyName = (product.crashReporter ? product.crashReporter.companyName : undefined) || 'Microsoft';
+-	const uploadToServer = Boolean(!process.env['VSCODE_DEV'] && submitURL && !crashReporterDirectory);
+-	crashReporter.start({
+-		companyName,
+-		productName: process.env['VSCODE_DEV'] ? `${productName} Dev` : productName,
+-		submitURL,
+-		uploadToServer,
+-		compress: true
+-	});
+-}
+-
+-function getJSFlags(cliArgs: NativeParsedArgs): string | null {
+-	const jsFlags: string[] = [];
+-
+-	// Add any existing JS flags we already got from the command line
+-	if (cliArgs['js-flags']) {
+-		jsFlags.push(cliArgs['js-flags']);
+-	}
+-
+-	if (process.platform === 'linux') {
+-		// Fix cppgc crash on Linux with 16KB page size.
+-		// Refs https://issues.chromium.org/issues/378017037
+-		// The fix from https://github.com/electron/electron/commit/6c5b2ef55e08dc0bede02384747549c1eadac0eb
+-		// only affects non-renderer process.
+-		// The following will ensure that the flag will be
+-		// applied to the renderer process as well.
+-		// TODO(deepak1556): Remove this once we update to
+-		// Chromium >= 134.
+-		jsFlags.push('--nodecommit_pooled_pages');
+-	}
+-
+-	return jsFlags.length > 0 ? jsFlags.join(' ') : null;
+-}
+-
+-function parseCLIArgs(): NativeParsedArgs {
+-	return minimist(process.argv, {
+-		string: [
+-			'user-data-dir',
+-			'locale',
+-			'js-flags',
+-			'crash-reporter-directory'
+-		],
+-		boolean: [
+-			'disable-chromium-sandbox',
+-		],
+-		default: {
+-			'sandbox': true
+-		},
+-		alias: {
+-			'no-sandbox': 'sandbox'
+-		}
+-	});
+-}
+-
+-function registerListeners(): void {
+-
+-	/**
+-	 * macOS: when someone drops a file to the not-yet running VSCode, the open-file event fires even before
+-	 * the app-ready event. We listen very early for open-file and remember this upon startup as path to open.
+-	 */
+-	const macOpenFiles: string[] = [];
+-	(globalThis as any)['macOpenFiles'] = macOpenFiles;
+-	app.on('open-file', function (event, path) {
+-		macOpenFiles.push(path);
+-	});
+-
+-	/**
+-	 * macOS: react to open-url requests.
+-	 */
+-	const openUrls: string[] = [];
+-	const onOpenUrl =
+-		function (event: { preventDefault: () => void }, url: string) {
+-			event.preventDefault();
+-
+-			openUrls.push(url);
+-		};
+-
+-	app.on('will-finish-launching', function () {
+-		app.on('open-url', onOpenUrl);
+-	});
+-
+-	(globalThis as any)['getOpenUrls'] = function () {
+-		app.removeListener('open-url', onOpenUrl);
+-
+-		return openUrls;
+-	};
+-}
+-
+-function getCodeCachePath(): string | undefined {
+-
+-	// explicitly disabled via CLI args
+-	if (process.argv.indexOf('--no-cached-data') > 0) {
+-		return undefined;
+-	}
+-
+-	// running out of sources
+-	if (process.env['VSCODE_DEV']) {
+-		return undefined;
+-	}
+-
+-	// require commit id
+-	const commit = product.commit;
+-	if (!commit) {
+-		return undefined;
+-	}
+-
+-	return path.join(userDataPath, 'CachedData', commit);
+-}
+-
+-async function mkdirpIgnoreError(dir: string | undefined): Promise<string | undefined> {
+-	if (typeof dir === 'string') {
+-		try {
+-			await fs.promises.mkdir(dir, { recursive: true });
+-
+-			return dir;
+-		} catch (error) {
+-			// ignore
+-		}
+-	}
+-
+-	return undefined;
+-}
+-
+-//#region NLS Support
+-
+-function processZhLocale(appLocale: string): string {
+-	if (appLocale.startsWith('zh')) {
+-		const region = appLocale.split('-')[1];
+-
+-		// On Windows and macOS, Chinese languages returned by
+-		// app.getPreferredSystemLanguages() start with zh-hans
+-		// for Simplified Chinese or zh-hant for Traditional Chinese,
+-		// so we can easily determine whether to use Simplified or Traditional.
+-		// However, on Linux, Chinese languages returned by that same API
+-		// are of the form zh-XY, where XY is a country code.
+-		// For China (CN), Singapore (SG), and Malaysia (MY)
+-		// country codes, assume they use Simplified Chinese.
+-		// For other cases, assume they use Traditional.
+-		if (['hans', 'cn', 'sg', 'my'].includes(region)) {
+-			return 'zh-cn';
+-		}
+-
+-		return 'zh-tw';
+-	}
+-
+-	return appLocale;
+-}
+-
+-/**
+- * Resolve the NLS configuration
+- */
+-async function resolveNlsConfiguration(): Promise<INLSConfiguration> {
+-
+-	// First, we need to test a user defined locale.
+-	// If it fails we try the app locale.
+-	// If that fails we fall back to English.
+-
+-	const nlsConfiguration = nlsConfigurationPromise ? await nlsConfigurationPromise : undefined;
+-	if (nlsConfiguration) {
+-		return nlsConfiguration;
+-	}
+-
+-	// Try to use the app locale which is only valid
+-	// after the app ready event has been fired.
+-
+-	let userLocale = app.getLocale();
+-	if (!userLocale) {
+-		return {
+-			userLocale: 'en',
+-			osLocale,
+-			resolvedLanguage: 'en',
+-			defaultMessagesFile: path.join(__dirname, 'nls.messages.json'),
+-
+-			// NLS: below 2 are a relic from old times only used by vscode-nls and deprecated
+-			locale: 'en',
+-			availableLanguages: {}
+-		};
+-	}
+-
+-	// See above the comment about the loader and case sensitiveness
+-	userLocale = processZhLocale(userLocale.toLowerCase());
+-
+-	return resolveNLSConfiguration({
+-		userLocale,
+-		osLocale,
+-		commit: product.commit,
+-		userDataPath,
+-		nlsMetadataPath: __dirname
+-	});
+-}
+-
+-/**
+- * Language tags are case insensitive however an ESM loader is case sensitive
+- * To make this work on case preserving & insensitive FS we do the following:
+- * the language bundles have lower case language tags and we always lower case
+- * the locale we receive from the user or OS.
+- */
+-function getUserDefinedLocale(argvConfig: IArgvConfig): string | undefined {
+-	const locale = args['locale'];
+-	if (locale) {
+-		return locale.toLowerCase(); // a directly provided --locale always wins
+-	}
+-
+-	return typeof argvConfig?.locale === 'string' ? argvConfig.locale.toLowerCase() : undefined;
+-}
+-
+-//#endregion
+diff --git a/src/vs/base/common/uri.ts b/src/vs/base/common/uri.ts
+index 73a3aa6cd49..404070f038f 100644
+--- a/src/vs/base/common/uri.ts
++++ b/src/vs/base/common/uri.ts
+@@ -21,6 +21,7 @@ function _validateUri(ret: URI, _strict?: boolean): void {
+ 
+ 	// scheme, https://tools.ietf.org/html/rfc3986#section-3.1
+ 	// ALPHA *( ALPHA / DIGIT / "+" / "-" / "." )
++	// console.log('validate uri', ret.scheme);
+ 	if (ret.scheme && !_schemePattern.test(ret.scheme)) {
+ 		throw new Error('[UriError]: Scheme contains illegal characters.');
+ 	}
+diff --git a/src/vs/base/parts/ipc/common/ipc.net.ts b/src/vs/base/parts/ipc/common/ipc.net.ts
+index 1bc63ba6878..d14cd29de5d 100644
+--- a/src/vs/base/parts/ipc/common/ipc.net.ts
++++ b/src/vs/base/parts/ipc/common/ipc.net.ts
+@@ -3,6 +3,9 @@
+  *  Licensed under the MIT License. See License.txt in the project root for license information.
+  *--------------------------------------------------------------------------------------------*/
+ 
++import { fileLoggerGlobal } from '../../../../../../../src/extension.js';
++import { FileRPCProtocolLogger } from '../../../../workbench/services/extensions/common/fileRPCProtocolLogger.js';
++import { RequestInitiator } from '../../../../workbench/services/extensions/common/rpcProtocol.js';
+ import { VSBuffer } from '../../../common/buffer.js';
+ import { Emitter, Event } from '../../../common/event.js';
+ import { Disposable, DisposableStore, IDisposable } from '../../../common/lifecycle.js';
+@@ -281,7 +284,7 @@ function protocolMessageTypeToString(messageType: ProtocolMessageType) {
+ }
+ 
+ export const enum ProtocolConstants {
+-	HeaderLength = 13,
++HeaderLength = 13,
+ 	/**
+ 	 * Send an Acknowledge message at most 2 seconds later...
+ 	 */
+@@ -353,13 +356,14 @@ class ProtocolReader extends Disposable {
+ 
+ 	public acceptChunk(data: VSBuffer | null): void {
+ 		if (!data || data.byteLength === 0) {
++			fileLoggerGlobal.logIncoming(0, 0, RequestInitiator.LocalSide, 'Accept chunk: empty buffer');
+ 			return;
+ 		}
++		fileLoggerGlobal.logIncoming(0, 0, RequestInitiator.LocalSide, 'Accept chunk: ' + data.byteLength + ', read head: ' + this._state.readHead + ', read len: ' + this._state.readLen);
+ 
+ 		this.lastReadTime = Date.now();
+ 
+ 		this._incomingData.acceptChunk(data);
+-
+ 		while (this._incomingData.byteLength >= this._state.readLen) {
+ 
+ 			const buff = this._incomingData.read(this._state.readLen);
+@@ -373,6 +377,7 @@ class ProtocolReader extends Disposable {
+ 				this._state.messageType = buff.readUInt8(0);
+ 				this._state.id = buff.readUInt32BE(1);
+ 				this._state.ack = buff.readUInt32BE(5);
++				fileLoggerGlobal.logIncoming(0, 0, RequestInitiator.LocalSide, 'Protocol header read: ' + this._state.id);
+ 
+ 				this._socket.traceSocketEvent(SocketDiagnosticsEventType.ProtocolHeaderRead, { messageType: protocolMessageTypeToString(this._state.messageType), id: this._state.id, ack: this._state.ack, messageSize: this._state.readLen });
+ 
+@@ -388,6 +393,7 @@ class ProtocolReader extends Disposable {
+ 				this._state.messageType = ProtocolMessageType.None;
+ 				this._state.id = 0;
+ 				this._state.ack = 0;
++				fileLoggerGlobal.logIncoming(0, 0, RequestInitiator.LocalSide, 'Protocol message read: ' + id + ', type: ' + messageType + ', ack: ' + ack);
+ 
+ 				this._socket.traceSocketEvent(SocketDiagnosticsEventType.ProtocolMessageRead, buff);
+ 
+@@ -832,6 +838,7 @@ export class PersistentProtocol implements IMessagePassingProtocol {
+ 	private _socketReader: ProtocolReader;
+ 	// eslint-disable-next-line local/code-no-potentially-unsafe-disposables
+ 	private _socketDisposables: DisposableStore;
++	private _fileLogger: FileRPCProtocolLogger;
+ 
+ 	private readonly _loadEstimator: ILoadEstimator;
+ 	private readonly _shouldSendKeepAlive: boolean;
+@@ -878,7 +885,7 @@ export class PersistentProtocol implements IMessagePassingProtocol {
+ 		this._socketReader = this._socketDisposables.add(new ProtocolReader(this._socket));
+ 		this._socketDisposables.add(this._socketReader.onMessage(msg => this._receiveMessage(msg)));
+ 		this._socketDisposables.add(this._socket.onClose(e => this._onSocketClose.fire(e)));
+-
++		this._fileLogger = new FileRPCProtocolLogger('PersistentProtocol');
+ 		if (opts.initialChunk) {
+ 			this._socketReader.acceptChunk(opts.initialChunk);
+ 		}
+@@ -944,6 +951,7 @@ export class PersistentProtocol implements IMessagePassingProtocol {
+ 	}
+ 
+ 	public beginAcceptReconnection(socket: ISocket, initialDataChunk: VSBuffer | null): void {
++		this._fileLogger.logIncoming(0, 0, RequestInitiator.LocalSide, 'Begin accept reconnection');
+ 		this._isReconnecting = true;
+ 
+ 		this._socketDisposables.dispose();
+@@ -966,6 +974,7 @@ export class PersistentProtocol implements IMessagePassingProtocol {
+ 	}
+ 
+ 	public endAcceptReconnection(): void {
++		this._fileLogger.logIncoming(0, 0, RequestInitiator.LocalSide, 'End accept reconnection');
+ 		this._isReconnecting = false;
+ 
+ 		// After a reconnection, let the other party know (again) which messages have been received.
+@@ -987,6 +996,7 @@ export class PersistentProtocol implements IMessagePassingProtocol {
+ 	}
+ 
+ 	private _receiveMessage(msg: ProtocolMessage): void {
++		this._fileLogger.logIncoming(0, 0, RequestInitiator.LocalSide, 'Receive message: ' + msg.type + ', id: ' + msg.id + ', ack: ' + msg.ack + ', data: ' + msg.data.byteLength + ', _incomingMsgId: ' + this._incomingMsgId);
+ 		if (msg.ack > this._outgoingAckId) {
+ 			this._outgoingAckId = msg.ack;
+ 			do {
+diff --git a/src/vs/workbench/api/common/extHost.api.impl.ts b/src/vs/workbench/api/common/extHost.api.impl.ts
+index 79a1112b410..cb4f3bce86d 100644
+--- a/src/vs/workbench/api/common/extHost.api.impl.ts
++++ b/src/vs/workbench/api/common/extHost.api.impl.ts
+@@ -1241,14 +1241,14 @@ export function createApiFactoryAndRegisterActors(accessor: ServicesAccessor): I
+ 				checkProposedApiEnabled(extension, 'canonicalUriProvider');
+ 				return extHostWorkspace.provideCanonicalUri(uri, options, token);
+ 			},
+-			decode(content: Uint8Array, uri: vscode.Uri | undefined, options?: { encoding: string }) {
++			decode: function(content: Uint8Array): Thenable<string> {
+ 				checkProposedApiEnabled(extension, 'textDocumentEncoding');
+-				return extHostWorkspace.decode(content, uri, options);
++				return extHostWorkspace.decode(content, undefined, undefined);
+ 			},
+-			encode(content: string, uri: vscode.Uri | undefined, options?: { encoding: string }) {
++			encode: function(content: string): Thenable<Uint8Array> {
+ 				checkProposedApiEnabled(extension, 'textDocumentEncoding');
+-				return extHostWorkspace.encode(content, uri, options);
+-			}
++				return extHostWorkspace.encode(content, undefined, undefined);
++			},
+ 		};
+ 
+ 		// namespace: scm
+@@ -1837,3 +1837,4 @@ export function createApiFactoryAndRegisterActors(accessor: ServicesAccessor): I
+ 		};
+ 	};
+ }
++
+diff --git a/src/vs/workbench/api/common/extHostConfiguration.ts b/src/vs/workbench/api/common/extHostConfiguration.ts
+index f0d9124a0da..943bda43fe3 100644
+--- a/src/vs/workbench/api/common/extHostConfiguration.ts
++++ b/src/vs/workbench/api/common/extHostConfiguration.ts
+@@ -159,6 +159,7 @@ export class ExtHostConfigProvider {
+ 	}
+ 
+ 	getConfiguration(section?: string, scope?: vscode.ConfigurationScope | null, extensionDescription?: IExtensionDescription): vscode.WorkspaceConfiguration {
++		console.log('getConfiguration', section, scope, extensionDescription);
+ 		const overrides = scopeToOverrides(scope) || {};
+ 		const config = this._toReadonlyValue(this._configuration.getValue(section, overrides, this._extHostWorkspace.workspace));
+ 
+diff --git a/src/vs/workbench/api/common/extHostExtensionActivator.ts b/src/vs/workbench/api/common/extHostExtensionActivator.ts
+index 20f8efbfdbd..72d45f6b758 100644
+--- a/src/vs/workbench/api/common/extHostExtensionActivator.ts
++++ b/src/vs/workbench/api/common/extHostExtensionActivator.ts
+@@ -11,6 +11,8 @@ import { ExtensionIdentifier, ExtensionIdentifierMap } from '../../../platform/e
+ import { ExtensionActivationReason, MissingExtensionDependency } from '../../services/extensions/common/extensions.js';
+ import { ILogService } from '../../../platform/log/common/log.js';
+ import { Barrier } from '../../../base/common/async.js';
++import { fileLoggerGlobal } from '../../../../../../src/extension.js';
++import { RequestInitiator } from '../../services/extensions/common/rpcProtocol.js';
+ 
+ /**
+  * Represents the source code (module) of an extension.
+@@ -229,7 +231,9 @@ export class ExtensionsActivator implements IDisposable {
+ 	}
+ 
+ 	public activateById(extensionId: ExtensionIdentifier, reason: ExtensionActivationReason): Promise<void> {
++		fileLoggerGlobal.logIncoming(0, 0, RequestInitiator.LocalSide, 'activateById start: ' + extensionId.value);
+ 		const desc = this._registry.getExtensionDescription(extensionId);
++		fileLoggerGlobal.logIncoming(0, 0, RequestInitiator.LocalSide, 'activateById desc: ' + desc);
+ 		if (!desc) {
+ 			throw new Error(`Extension '${extensionId.value}' is not known`);
+ 		}
+diff --git a/src/vs/workbench/api/common/extHostExtensionService.ts b/src/vs/workbench/api/common/extHostExtensionService.ts
+index 03aabb46045..32a8fd18af6 100644
+--- a/src/vs/workbench/api/common/extHostExtensionService.ts
++++ b/src/vs/workbench/api/common/extHostExtensionService.ts
+@@ -48,6 +48,8 @@ import { StopWatch } from '../../../base/common/stopwatch.js';
+ import { isCI, setTimeout0 } from '../../../base/common/platform.js';
+ import { IExtHostManagedSockets } from './extHostManagedSockets.js';
+ import { Dto } from '../../services/extensions/common/proxyIdentifier.js';
++import { fileLoggerGlobal } from '../../../../../../src/extension.js';
++import { RequestInitiator } from '../../services/extensions/common/rpcProtocol.js';
+ 
+ interface ITestRunner {
+ 	/** Old test runner API, as exported from `vscode/lib/testrunner` */
+@@ -298,6 +300,7 @@ export abstract class AbstractExtHostExtensionService extends Disposable impleme
+ 	}
+ 
+ 	private _activateByEvent(activationEvent: string, startup: boolean): Promise<void> {
++		fileLoggerGlobal.logIncoming(0, 0, RequestInitiator.LocalSide, '_activateByEvent: ' + activationEvent);
+ 		return this._activator.activateByEvent(activationEvent, startup);
+ 	}
+ 
+@@ -647,15 +650,19 @@ export abstract class AbstractExtHostExtensionService extends Disposable impleme
+ 	}
+ 
+ 	private _activateAllStartupFinished(): void {
++		fileLoggerGlobal.logIncoming(0, 0, RequestInitiator.LocalSide, 'activateAllStartupFinished start');
+ 		// startup is considered finished
+ 		this._mainThreadExtensionsProxy.$setPerformanceMarks(performance.getMarks());
+ 
+ 		this._extHostConfiguration.getConfigProvider().then((configProvider) => {
++			fileLoggerGlobal.logIncoming(0, 0, RequestInitiator.LocalSide, 'activateAllStartupFinished getConfigProvider');
+ 			const shouldDeferActivation = configProvider.getConfiguration('extensions.experimental').get<boolean>('deferredStartupFinishedActivation');
+ 			const allExtensionDescriptions = this._myRegistry.getAllExtensionDescriptions();
+ 			if (shouldDeferActivation) {
++				fileLoggerGlobal.logIncoming(0, 0, RequestInitiator.LocalSide, 'activateAllStartupFinished shouldDeferActivation');
+ 				this._activateAllStartupFinishedDeferred(allExtensionDescriptions);
+ 			} else {
++				fileLoggerGlobal.logIncoming(0, 0, RequestInitiator.LocalSide, 'activateAllStartupFinished !shouldDeferActivation');
+ 				for (const desc of allExtensionDescriptions) {
+ 					if (desc.activationEvents) {
+ 						for (const activationEvent of desc.activationEvents) {
+@@ -671,6 +678,7 @@ export abstract class AbstractExtHostExtensionService extends Disposable impleme
+ 
+ 	// Handle "eager" activation extensions
+ 	private _handleEagerExtensions(): Promise<void> {
++		fileLoggerGlobal.logIncoming(0, 0, RequestInitiator.LocalSide, 'handleEagerExtensions start');
+ 		const starActivation = this._activateByEvent('*', true).then(undefined, (err) => {
+ 			this._logService.error(err);
+ 		});
+@@ -689,6 +697,7 @@ export abstract class AbstractExtHostExtensionService extends Disposable impleme
+ 	}
+ 
+ 	private _handleWorkspaceContainsEagerExtensions(folders: ReadonlyArray<vscode.WorkspaceFolder>): Promise<void> {
++		fileLoggerGlobal.logIncoming(0, 0, RequestInitiator.LocalSide, 'handleWorkspaceContainsEagerExtensions start: ' + folders.length);
+ 		if (folders.length === 0) {
+ 			return Promise.resolve(undefined);
+ 		}
+@@ -697,7 +706,9 @@ export abstract class AbstractExtHostExtensionService extends Disposable impleme
+ 			this._myRegistry.getAllExtensionDescriptions().map((desc) => {
+ 				return this._handleWorkspaceContainsEagerExtension(folders, desc);
+ 			})
+-		).then(() => { });
++		).then(() => {
++			fileLoggerGlobal.logIncoming(0, 0, RequestInitiator.LocalSide, 'handleWorkspaceContainsEagerExtensions end');
++		});
+ 	}
+ 
+ 	private async _handleWorkspaceContainsEagerExtension(folders: ReadonlyArray<vscode.WorkspaceFolder>, desc: IExtensionDescription): Promise<void> {
+@@ -726,6 +737,7 @@ export abstract class AbstractExtHostExtensionService extends Disposable impleme
+ 	}
+ 
+ 	private async _handleRemoteResolverEagerExtensions(): Promise<void> {
++		fileLoggerGlobal.logIncoming(0, 0, RequestInitiator.LocalSide, 'handleRemoteResolverEagerExtensions start');
+ 		if (this._initData.remote.authority) {
+ 			return this._activateByEvent(`onResolveRemoteAuthority:${this._initData.remote.authority}`, false);
+ 		}
+@@ -803,7 +815,9 @@ export abstract class AbstractExtHostExtensionService extends Disposable impleme
+ 	}
+ 
+ 	private _startExtensionHost(): Promise<void> {
++		fileLoggerGlobal.logIncoming(0, 0, RequestInitiator.LocalSide, 'startExtensionHost start');
+ 		if (this._started) {
++			fileLoggerGlobal.logIncoming(0, 0, RequestInitiator.LocalSide, 'Extension host is already started!');
+ 			throw new Error(`Extension host is already started!`);
+ 		}
+ 		this._started = true;
+@@ -1036,6 +1050,7 @@ export abstract class AbstractExtHostExtensionService extends Disposable impleme
+ 	}
+ 
+ 	public async $activate(extensionId: ExtensionIdentifier, reason: ExtensionActivationReason): Promise<boolean> {
++		console.log('activate', extensionId, reason);
+ 		await this._readyToRunExtensions.wait();
+ 		if (!this._myRegistry.getExtensionDescription(extensionId)) {
+ 			// unknown extension => ignore
+diff --git a/src/vs/workbench/api/common/extHostWebview.ts b/src/vs/workbench/api/common/extHostWebview.ts
+index 435df4b03fc..1b85d76d832 100644
+--- a/src/vs/workbench/api/common/extHostWebview.ts
++++ b/src/vs/workbench/api/common/extHostWebview.ts
+@@ -222,6 +222,7 @@ export class ExtHostWebviews extends Disposable implements extHostProtocol.ExtHo
+ 		jsonMessage: string,
+ 		buffers: SerializableObjectWithBuffers<VSBuffer[]>
+ 	): void {
++		console.log('onMessage', handle, jsonMessage, buffers);
+ 		const webview = this.getWebview(handle);
+ 		if (webview) {
+ 			const { message } = deserializeWebviewMessage(jsonMessage, buffers.value);
+diff --git a/src/vs/workbench/api/common/extHostWebviewView.ts b/src/vs/workbench/api/common/extHostWebviewView.ts
+index 4696f33c5fa..87d6300330c 100644
+--- a/src/vs/workbench/api/common/extHostWebviewView.ts
++++ b/src/vs/workbench/api/common/extHostWebviewView.ts
+@@ -12,6 +12,8 @@ import { ViewBadge } from './extHostTypeConverters.js';
+ import type * as vscode from 'vscode';
+ import * as extHostProtocol from './extHost.protocol.js';
+ import * as extHostTypes from './extHostTypes.js';
++import { fileLoggerGlobal } from '../../../../../../src/extension.js';
++import { RequestInitiator } from '../../services/extensions/common/rpcProtocol.js';
+ 
+ /* eslint-disable local/code-no-native-private */
+ 
+@@ -162,6 +164,7 @@ export class ExtHostWebviewViews implements extHostProtocol.ExtHostWebviewViewsS
+ 			retainContextWhenHidden?: boolean;
+ 		},
+ 	): vscode.Disposable {
++		fileLoggerGlobal.logIncoming(0, 0, RequestInitiator.LocalSide, 'registerWebviewViewProvider start: ' + viewType);
+ 		if (this._viewProviders.has(viewType)) {
+ 			throw new Error(`View provider for '${viewType}' already registered`);
+ 		}
+@@ -185,6 +188,8 @@ export class ExtHostWebviewViews implements extHostProtocol.ExtHostWebviewViewsS
+ 		state: any,
+ 		cancellation: CancellationToken,
+ 	): Promise<void> {
++		console.log('resolveWebviewView', webviewHandle, viewType, title, state);
++		fileLoggerGlobal.logIncoming(0, 0, RequestInitiator.LocalSide, 'resolveWebviewView start: ' + viewType);
+ 		const entry = this._viewProviders.get(viewType);
+ 		if (!entry) {
+ 			throw new Error(`No view provider found for '${viewType}'`);
+diff --git a/src/vs/workbench/api/common/extHostWorkspace.ts b/src/vs/workbench/api/common/extHostWorkspace.ts
+index 12af1c17f95..2e2b55b1fa4 100644
+--- a/src/vs/workbench/api/common/extHostWorkspace.ts
++++ b/src/vs/workbench/api/common/extHostWorkspace.ts
+@@ -227,6 +227,7 @@ export class ExtHostWorkspace implements ExtHostWorkspaceShape, IExtHostWorkspac
+ 	}
+ 
+ 	$initializeWorkspace(data: IWorkspaceData | null, trusted: boolean): void {
++		console.log('initializeWorkspace', data, trusted);
+ 		this._trusted = trusted;
+ 		this.$acceptWorkspaceData(data);
+ 		this._barrier.open();
+diff --git a/src/vs/workbench/api/common/extensionHostMain.ts b/src/vs/workbench/api/common/extensionHostMain.ts
+index 11980f9aafe..24d9a7aeca4 100644
+--- a/src/vs/workbench/api/common/extensionHostMain.ts
++++ b/src/vs/workbench/api/common/extensionHostMain.ts
+@@ -3,220 +3,236 @@
+  *  Licensed under the MIT License. See License.txt in the project root for license information.
+  *--------------------------------------------------------------------------------------------*/
+ 
+-import * as errors from '../../../base/common/errors.js';
+-import * as performance from '../../../base/common/performance.js';
+-import { URI } from '../../../base/common/uri.js';
+-import { IURITransformer } from '../../../base/common/uriIpc.js';
+-import { IMessagePassingProtocol } from '../../../base/parts/ipc/common/ipc.js';
+-import { MainContext, MainThreadConsoleShape } from './extHost.protocol.js';
+-import { IExtensionHostInitData } from '../../services/extensions/common/extensionHostProtocol.js';
+-import { RPCProtocol } from '../../services/extensions/common/rpcProtocol.js';
+-import { ExtensionError, ExtensionIdentifier, IExtensionDescription } from '../../../platform/extensions/common/extensions.js';
+-import { ILogService } from '../../../platform/log/common/log.js';
+-import { getSingletonServiceDescriptors } from '../../../platform/instantiation/common/extensions.js';
+-import { ServiceCollection } from '../../../platform/instantiation/common/serviceCollection.js';
+-import { IExtHostInitDataService } from './extHostInitDataService.js';
+-import { InstantiationService } from '../../../platform/instantiation/common/instantiationService.js';
+-import { IInstantiationService, ServicesAccessor } from '../../../platform/instantiation/common/instantiation.js';
+-import { IExtHostRpcService, ExtHostRpcService } from './extHostRpcService.js';
+-import { IURITransformerService, URITransformerService } from './extHostUriTransformerService.js';
+-import { IExtHostExtensionService, IHostUtils } from './extHostExtensionService.js';
+-import { IExtHostTelemetry } from './extHostTelemetry.js';
+-import { Mutable } from '../../../base/common/types.js';
++import * as errors from "../../../base/common/errors.js"
++import * as performance from "../../../base/common/performance.js"
++import { URI } from "../../../base/common/uri.js"
++import { IURITransformer } from "../../../base/common/uriIpc.js"
++import { IMessagePassingProtocol } from "../../../base/parts/ipc/common/ipc.js"
++import { MainContext, MainThreadConsoleShape } from "./extHost.protocol.js"
++import { IExtensionHostInitData } from "../../services/extensions/common/extensionHostProtocol.js"
++import { RPCProtocol } from "../../services/extensions/common/rpcProtocol.js"
++import {
++	ExtensionError,
++	ExtensionIdentifier,
++	IExtensionDescription,
++} from "../../../platform/extensions/common/extensions.js"
++import { ILogService } from "../../../platform/log/common/log.js"
++import { getSingletonServiceDescriptors } from "../../../platform/instantiation/common/extensions.js"
++import { ServiceCollection } from "../../../platform/instantiation/common/serviceCollection.js"
++import { IExtHostInitDataService } from "./extHostInitDataService.js"
++import { InstantiationService } from "../../../platform/instantiation/common/instantiationService.js"
++import { IInstantiationService, ServicesAccessor } from "../../../platform/instantiation/common/instantiation.js"
++import { IExtHostRpcService, ExtHostRpcService } from "./extHostRpcService.js"
++import { IURITransformerService, URITransformerService } from "./extHostUriTransformerService.js"
++import { IExtHostExtensionService, IHostUtils } from "./extHostExtensionService.js"
++import { IExtHostTelemetry } from "./extHostTelemetry.js"
++import { Mutable } from "../../../base/common/types.js"
++import { FileRPCProtocolLogger } from "../../services/extensions/common/fileRPCProtocolLogger.js"
+ 
+ export interface IExitFn {
+-	(code?: number): any;
++	(code?: number): any
+ }
+ 
+ export interface IConsolePatchFn {
+-	(mainThreadConsole: MainThreadConsoleShape): any;
++	(mainThreadConsole: MainThreadConsoleShape): any
+ }
+ 
+ export abstract class ErrorHandler {
+-
+ 	static async installEarlyHandler(accessor: ServicesAccessor): Promise<void> {
+-
+ 		// increase number of stack frames (from 10, https://github.com/v8/v8/wiki/Stack-Trace-API)
+-		Error.stackTraceLimit = 100;
++		Error.stackTraceLimit = 100
+ 
+ 		// does NOT dependent of extension information, can be installed immediately, and simply forwards
+ 		// to the log service and main thread errors
+-		const logService = accessor.get(ILogService);
+-		const rpcService = accessor.get(IExtHostRpcService);
+-		const mainThreadErrors = rpcService.getProxy(MainContext.MainThreadErrors);
+-
+-		errors.setUnexpectedErrorHandler(err => {
+-			logService.error(err);
+-			const data = errors.transformErrorForSerialization(err);
+-			mainThreadErrors.$onUnexpectedError(data);
+-		});
++		const logService = accessor.get(ILogService)
++		const rpcService = accessor.get(IExtHostRpcService)
++		const mainThreadErrors = rpcService.getProxy(MainContext.MainThreadErrors)
++
++		errors.setUnexpectedErrorHandler((err) => {
++			logService.error(err)
++			const data = errors.transformErrorForSerialization(err)
++			mainThreadErrors.$onUnexpectedError(data)
++		})
+ 	}
+ 
+ 	static async installFullHandler(accessor: ServicesAccessor): Promise<void> {
+ 		// uses extension knowledges to correlate errors with extensions
+ 
+-		const logService = accessor.get(ILogService);
+-		const rpcService = accessor.get(IExtHostRpcService);
+-		const extensionService = accessor.get(IExtHostExtensionService);
+-		const extensionTelemetry = accessor.get(IExtHostTelemetry);
++		const logService = accessor.get(ILogService)
++		const rpcService = accessor.get(IExtHostRpcService)
++		const extensionService = accessor.get(IExtHostExtensionService)
++		const extensionTelemetry = accessor.get(IExtHostTelemetry)
+ 
+-		const mainThreadExtensions = rpcService.getProxy(MainContext.MainThreadExtensionService);
+-		const mainThreadErrors = rpcService.getProxy(MainContext.MainThreadErrors);
++		const mainThreadExtensions = rpcService.getProxy(MainContext.MainThreadExtensionService)
++		const mainThreadErrors = rpcService.getProxy(MainContext.MainThreadErrors)
+ 
+-		const map = await extensionService.getExtensionPathIndex();
+-		const extensionErrors = new WeakMap<Error, { extensionIdentifier: ExtensionIdentifier | undefined; stack: string }>();
++		const map = await extensionService.getExtensionPathIndex()
++		const extensionErrors = new WeakMap<
++			Error,
++			{ extensionIdentifier: ExtensionIdentifier | undefined; stack: string }
++		>()
+ 
+ 		// PART 1
+ 		// set the prepareStackTrace-handle and use it as a side-effect to associate errors
+ 		// with extensions - this works by looking up callsites in the extension path index
+ 		function prepareStackTraceAndFindExtension(error: Error, stackTrace: errors.V8CallSite[]) {
+ 			if (extensionErrors.has(error)) {
+-				return extensionErrors.get(error)!.stack;
++				return extensionErrors.get(error)!.stack
+ 			}
+-			let stackTraceMessage = '';
+-			let extension: IExtensionDescription | undefined;
+-			let fileName: string | null;
++			let stackTraceMessage = ""
++			let extension: IExtensionDescription | undefined
++			let fileName: string | null
+ 			for (const call of stackTrace) {
+-				stackTraceMessage += `\n\tat ${call.toString()}`;
+-				fileName = call.getFileName();
++				stackTraceMessage += `\n\tat ${call.toString()}`
++				fileName = call.getFileName()
+ 				if (!extension && fileName) {
+-					extension = map.findSubstr(URI.file(fileName));
++					extension = map.findSubstr(URI.file(fileName))
+ 				}
+ 			}
+-			const result = `${error.name || 'Error'}: ${error.message || ''}${stackTraceMessage}`;
+-			extensionErrors.set(error, { extensionIdentifier: extension?.identifier, stack: result });
+-			return result;
++			const result = `${error.name || "Error"}: ${error.message || ""}${stackTraceMessage}`
++			extensionErrors.set(error, { extensionIdentifier: extension?.identifier, stack: result })
++			return result
+ 		}
+ 
+-		const _wasWrapped = Symbol('prepareStackTrace wrapped');
+-		let _prepareStackTrace = prepareStackTraceAndFindExtension;
++		const _wasWrapped = Symbol("prepareStackTrace wrapped")
++		let _prepareStackTrace = prepareStackTraceAndFindExtension
+ 
+-		Object.defineProperty(Error, 'prepareStackTrace', {
++		Object.defineProperty(Error, "prepareStackTrace", {
+ 			configurable: false,
+ 			get() {
+-				return _prepareStackTrace;
++				return _prepareStackTrace
+ 			},
+ 			set(v) {
+ 				if (v === prepareStackTraceAndFindExtension || !v || v[_wasWrapped]) {
+-					_prepareStackTrace = v || prepareStackTraceAndFindExtension;
+-					return;
++					_prepareStackTrace = v || prepareStackTraceAndFindExtension
++					return
+ 				}
+ 
+ 				_prepareStackTrace = function (error, stackTrace) {
+-					prepareStackTraceAndFindExtension(error, stackTrace);
+-					return v.call(Error, error, stackTrace);
+-				};
++					prepareStackTraceAndFindExtension(error, stackTrace)
++					return v.call(Error, error, stackTrace)
++				}
+ 
+-				Object.assign(_prepareStackTrace, { [_wasWrapped]: true });
++				Object.assign(_prepareStackTrace, { [_wasWrapped]: true })
+ 			},
+-		});
++		})
+ 
+ 		// PART 2
+ 		// set the unexpectedErrorHandler and check for extensions that have been identified as
+ 		// having caused the error. Note that the runtime order is actually reversed, the code
+ 		// below accesses the stack-property which triggers the code above
+-		errors.setUnexpectedErrorHandler(err => {
+-			logService.error(err);
++		errors.setUnexpectedErrorHandler((err) => {
++			logService.error(err)
+ 
+-			const errorData = errors.transformErrorForSerialization(err);
++			const errorData = errors.transformErrorForSerialization(err)
+ 
+-			let extension: ExtensionIdentifier | undefined;
++			let extension: ExtensionIdentifier | undefined
+ 			if (err instanceof ExtensionError) {
+-				extension = err.extension;
++				extension = err.extension
+ 			} else {
+-				const stackData = extensionErrors.get(err);
+-				extension = stackData?.extensionIdentifier;
++				const stackData = extensionErrors.get(err)
++				extension = stackData?.extensionIdentifier
+ 			}
+ 
+ 			if (extension) {
+-				mainThreadExtensions.$onExtensionRuntimeError(extension, errorData);
+-				const reported = extensionTelemetry.onExtensionError(extension, err);
+-				logService.trace('forwarded error to extension?', reported, extension);
++				mainThreadExtensions.$onExtensionRuntimeError(extension, errorData)
++				const reported = extensionTelemetry.onExtensionError(extension, err)
++				logService.trace("forwarded error to extension?", reported, extension)
+ 			}
+-		});
++		})
+ 
+-		errors.errorHandler.addListener(err => {
+-			mainThreadErrors.$onUnexpectedError(err);
+-		});
++		errors.errorHandler.addListener((err) => {
++			const data = errors.transformErrorForSerialization(err)
++			mainThreadErrors.$onUnexpectedError(data)
++		})
+ 	}
+ }
+ 
+ export class ExtensionHostMain {
+-
+-	private readonly _hostUtils: IHostUtils;
+-	private readonly _rpcProtocol: RPCProtocol;
+-	private readonly _extensionService: IExtHostExtensionService;
+-	private readonly _logService: ILogService;
++	private readonly _hostUtils: IHostUtils
++	private readonly _rpcProtocol: RPCProtocol
++	private readonly _extensionService: IExtHostExtensionService
++	private readonly _logService: ILogService
+ 
+ 	constructor(
+ 		protocol: IMessagePassingProtocol,
+ 		initData: IExtensionHostInitData,
+ 		hostUtils: IHostUtils,
+ 		uriTransformer: IURITransformer | null,
+-		messagePorts?: ReadonlyMap<string, MessagePort>
++		messagePorts?: ReadonlyMap<string, MessagePort>,
+ 	) {
+-		this._hostUtils = hostUtils;
+-		this._rpcProtocol = new RPCProtocol(protocol, null, uriTransformer);
++		this._hostUtils = hostUtils
++		this._rpcProtocol = new RPCProtocol(protocol, new FileRPCProtocolLogger("extension_protocol"), uriTransformer)
+ 
+ 		// ensure URIs are transformed and revived
+-		initData = ExtensionHostMain._transform(initData, this._rpcProtocol);
++		initData = ExtensionHostMain._transform(initData, this._rpcProtocol)
+ 
+ 		// bootstrap services
+-		const services = new ServiceCollection(...getSingletonServiceDescriptors());
+-		services.set(IExtHostInitDataService, { _serviceBrand: undefined, ...initData, messagePorts });
+-		services.set(IExtHostRpcService, new ExtHostRpcService(this._rpcProtocol));
+-		services.set(IURITransformerService, new URITransformerService(uriTransformer));
+-		services.set(IHostUtils, hostUtils);
++		const services = new ServiceCollection(...getSingletonServiceDescriptors())
++		services.set(IExtHostInitDataService, { _serviceBrand: undefined, ...initData, messagePorts })
++		services.set(IExtHostRpcService, new ExtHostRpcService(this._rpcProtocol))
++		services.set(IURITransformerService, new URITransformerService(uriTransformer))
++		services.set(IHostUtils, hostUtils)
+ 
+-		const instaService: IInstantiationService = new InstantiationService(services, true);
++		const instaService: IInstantiationService = new InstantiationService(services, true)
+ 
+-		instaService.invokeFunction(ErrorHandler.installEarlyHandler);
++		instaService.invokeFunction(ErrorHandler.installEarlyHandler)
+ 
+ 		// ugly self - inject
+-		this._logService = instaService.invokeFunction(accessor => accessor.get(ILogService));
++		this._logService = instaService.invokeFunction((accessor) => accessor.get(ILogService))
+ 
+-		performance.mark(`code/extHost/didCreateServices`);
++		performance.mark(`code/extHost/didCreateServices`)
+ 		if (this._hostUtils.pid) {
+-			this._logService.info(`Extension host with pid ${this._hostUtils.pid} started`);
++			this._logService.info(`Extension host with pid ${this._hostUtils.pid} started`)
+ 		} else {
+-			this._logService.info(`Extension host started`);
++			this._logService.info(`Extension host started`)
+ 		}
+-		this._logService.trace('initData', initData);
++		this._logService.trace("initData", initData)
+ 
+ 		// ugly self - inject
+ 		// must call initialize *after* creating the extension service
+ 		// because `initialize` itself creates instances that depend on it
+-		this._extensionService = instaService.invokeFunction(accessor => accessor.get(IExtHostExtensionService));
+-		this._extensionService.initialize();
++		this._extensionService = instaService.invokeFunction((accessor) => accessor.get(IExtHostExtensionService))
++		this._extensionService.initialize()
+ 
+ 		// install error handler that is extension-aware
+-		instaService.invokeFunction(ErrorHandler.installFullHandler);
++		instaService.invokeFunction(ErrorHandler.installFullHandler)
+ 	}
+ 
+ 	async asBrowserUri(uri: URI): Promise<URI> {
+-		const mainThreadExtensionsProxy = this._rpcProtocol.getProxy(MainContext.MainThreadExtensionService);
+-		return URI.revive(await mainThreadExtensionsProxy.$asBrowserUri(uri));
++		const mainThreadExtensionsProxy = this._rpcProtocol.getProxy(MainContext.MainThreadExtensionService)
++		return URI.revive(await mainThreadExtensionsProxy.$asBrowserUri(uri))
+ 	}
+ 
+ 	terminate(reason: string): void {
+-		this._extensionService.terminate(reason);
++		this._extensionService.terminate(reason)
+ 	}
+ 
+ 	private static _transform(initData: IExtensionHostInitData, rpcProtocol: RPCProtocol): IExtensionHostInitData {
+ 		initData.extensions.allExtensions.forEach((ext) => {
+-			(<Mutable<IExtensionDescription>>ext).extensionLocation = URI.revive(rpcProtocol.transformIncomingURIs(ext.extensionLocation));
+-		});
+-		initData.environment.appRoot = URI.revive(rpcProtocol.transformIncomingURIs(initData.environment.appRoot));
+-		const extDevLocs = initData.environment.extensionDevelopmentLocationURI;
++			;(<Mutable<IExtensionDescription>>ext).extensionLocation = URI.revive(
++				rpcProtocol.transformIncomingURIs(ext.extensionLocation),
++			)
++		})
++		initData.environment.appRoot = URI.revive(rpcProtocol.transformIncomingURIs(initData.environment.appRoot))
++		const extDevLocs = initData.environment.extensionDevelopmentLocationURI
+ 		if (extDevLocs) {
+-			initData.environment.extensionDevelopmentLocationURI = extDevLocs.map(url => URI.revive(rpcProtocol.transformIncomingURIs(url)));
++			initData.environment.extensionDevelopmentLocationURI = extDevLocs.map((url) =>
++				URI.revive(rpcProtocol.transformIncomingURIs(url)),
++			)
+ 		}
+-		initData.environment.extensionTestsLocationURI = URI.revive(rpcProtocol.transformIncomingURIs(initData.environment.extensionTestsLocationURI));
+-		initData.environment.globalStorageHome = URI.revive(rpcProtocol.transformIncomingURIs(initData.environment.globalStorageHome));
+-		initData.environment.workspaceStorageHome = URI.revive(rpcProtocol.transformIncomingURIs(initData.environment.workspaceStorageHome));
+-		initData.nlsBaseUrl = URI.revive(rpcProtocol.transformIncomingURIs(initData.nlsBaseUrl));
+-		initData.logsLocation = URI.revive(rpcProtocol.transformIncomingURIs(initData.logsLocation));
+-		initData.workspace = rpcProtocol.transformIncomingURIs(initData.workspace);
+-		return initData;
++		initData.environment.extensionTestsLocationURI = URI.revive(
++			rpcProtocol.transformIncomingURIs(initData.environment.extensionTestsLocationURI),
++		)
++		initData.environment.globalStorageHome = URI.revive(
++			rpcProtocol.transformIncomingURIs(initData.environment.globalStorageHome),
++		)
++		initData.environment.workspaceStorageHome = URI.revive(
++			rpcProtocol.transformIncomingURIs(initData.environment.workspaceStorageHome),
++		)
++		initData.nlsBaseUrl = URI.revive(rpcProtocol.transformIncomingURIs(initData.nlsBaseUrl))
++		initData.logsLocation = URI.revive(rpcProtocol.transformIncomingURIs(initData.logsLocation))
++		initData.workspace = rpcProtocol.transformIncomingURIs(initData.workspace)
++		return initData
+ 	}
+ }
+diff --git a/src/vs/workbench/api/node/extHostConsoleForwarder.ts b/src/vs/workbench/api/node/extHostConsoleForwarder.ts
+index aa2dbca286c..d9eb33a7043 100644
+--- a/src/vs/workbench/api/node/extHostConsoleForwarder.ts
++++ b/src/vs/workbench/api/node/extHostConsoleForwarder.ts
+@@ -47,7 +47,7 @@ export class ExtHostConsoleForwarder extends AbstractExtHostConsoleForwarder {
+ 
+ 		Object.defineProperty(stream, 'write', {
+ 			set: () => { },
+-			get: () => (chunk: Uint8Array | string, encoding?: BufferEncoding, callback?: (err?: Error) => void) => {
++			get: () => (chunk: Uint8Array | string, encoding?: BufferEncoding, callback?: (err?: Error | null) => void) => {
+ 				if (!this._isMakingConsoleCall) {
+ 					buf += (chunk as any).toString(encoding);
+ 					const eol = buf.length > MAX_STREAM_BUFFER_LENGTH ? buf.length : buf.lastIndexOf('\n');
+diff --git a/src/vs/workbench/api/node/extensionHostProcess.ts b/src/vs/workbench/api/node/extensionHostProcess.ts
+index 704a0dbb5bd..fa9a93ab32a 100644
+--- a/src/vs/workbench/api/node/extensionHostProcess.ts
++++ b/src/vs/workbench/api/node/extensionHostProcess.ts
+@@ -29,6 +29,8 @@ import { IDisposable } from '../../../base/common/lifecycle.js';
+ import '../common/extHost.common.services.js';
+ import './extHost.node.services.js';
+ import { createRequire } from 'node:module';
++import { fileLoggerGlobal } from '../../../../../../src/extension.js';
++import { RequestInitiator } from '../../services/extensions/common/rpcProtocol.js';
+ const require = createRequire(import.meta.url);
+ 
+ interface ParsedExtHostArgs {
+@@ -186,6 +188,7 @@ function _createExtHostProtocol(): Promise<IMessagePassingProtocol> {
+ 						socket = new WebSocketNodeSocket(new NodeSocket(handle, 'extHost-socket'), msg.permessageDeflate, inflateBytes, false);
+ 					}
+ 					if (protocol) {
++						fileLoggerGlobal.logOutgoing(0, 0, RequestInitiator.LocalSide, 'Reconnection case');
+ 						// reconnection case
+ 						disconnectRunner1.cancel();
+ 						disconnectRunner2.cancel();
+@@ -193,6 +196,7 @@ function _createExtHostProtocol(): Promise<IMessagePassingProtocol> {
+ 						protocol.endAcceptReconnection();
+ 						protocol.sendResume();
+ 					} else {
++						fileLoggerGlobal.logOutgoing(0, 0, RequestInitiator.LocalSide, 'New connection case');
+ 						clearTimeout(timer);
+ 						protocol = new PersistentProtocol({ socket, initialChunk: initialDataChunk });
+ 						protocol.sendResume();
+@@ -207,6 +211,7 @@ function _createExtHostProtocol(): Promise<IMessagePassingProtocol> {
+ 					}
+ 				}
+ 				if (msg && msg.type === 'VSCODE_EXTHOST_IPC_REDUCE_GRACE_TIME') {
++					fileLoggerGlobal.logOutgoing(0, 0, RequestInitiator.LocalSide, 'Reduce grace time case');
+ 					if (disconnectRunner2.isScheduled()) {
+ 						// we are disconnected and already running the short reconnection timer
+ 						return;
+@@ -338,12 +343,14 @@ function connectToRenderer(protocol: IMessagePassingProtocol): Promise<IRenderer
+ 			}
+ 
+ 			// Tell the outside that we are initialized
++			console.log('send initialized message');
+ 			protocol.send(createMessageOfType(MessageType.Initialized));
+ 
+ 			c({ protocol, initData });
+ 		});
+ 
+ 		// Tell the outside that we are ready to receive messages
++		console.log('send ready message');
+ 		protocol.send(createMessageOfType(MessageType.Ready));
+ 	});
+ }
+@@ -426,4 +433,8 @@ async function startExtensionHostProcess(): Promise<void> {
+ 	onTerminate = (reason: string) => extensionHostMain.terminate(reason);
+ }
+ 
+-startExtensionHostProcess().catch((err) => console.log(err));
++function start() {
++	startExtensionHostProcess().catch((err) => console.log(err));
++}
++
++export default start;
+\ No newline at end of file
+diff --git a/src/vs/workbench/contrib/webview/common/webview.ts b/src/vs/workbench/contrib/webview/common/webview.ts
+index 95c65048fcd..31aaea4a722 100644
+--- a/src/vs/workbench/contrib/webview/common/webview.ts
++++ b/src/vs/workbench/contrib/webview/common/webview.ts
+@@ -22,7 +22,7 @@ export const webviewResourceBaseHost = 'vscode-cdn.net';
+ 
+ export const webviewRootResourceAuthority = `vscode-resource.${webviewResourceBaseHost}`;
+ 
+-export const webviewGenericCspSource = `'self' https://*.${webviewResourceBaseHost}`;
++export const webviewGenericCspSource = `'self' https://*.${webviewResourceBaseHost} vscode-file://*`;
+ 
+ /**
+  * Construct a uri that can load resources inside a webview
+@@ -42,6 +42,15 @@ export function asWebviewUri(resource: URI, remoteInfo?: WebviewRemoteInfo): URI
+ 		return resource;
+ 	}
+ 
++	if (resource.scheme === Schemas.file) {
++		return URI.from({
++			scheme: "vscode-file",
++			path: resource.path,
++			fragment: resource.fragment,
++			query: resource.query,
++		});
++	}
++
+ 	if (remoteInfo && remoteInfo.authority && remoteInfo.isRemote && resource.scheme === Schemas.file) {
+ 		resource = URI.from({
+ 			scheme: Schemas.vscodeRemote,
+diff --git a/src/vs/workbench/services/extensions/common/abstractExtensionService.ts b/src/vs/workbench/services/extensions/common/abstractExtensionService.ts
+index 382683f3cf7..4478914fdc6 100644
+--- a/src/vs/workbench/services/extensions/common/abstractExtensionService.ts
++++ b/src/vs/workbench/services/extensions/common/abstractExtensionService.ts
+@@ -813,6 +813,7 @@ export abstract class AbstractExtensionService extends Disposable implements IEx
+ 		const disposableStore = new DisposableStore();
+ 		disposableStore.add(processManager.onDidExit(([code, signal]) => this._onExtensionHostCrashOrExit(processManager, code, signal)));
+ 		disposableStore.add(processManager.onDidChangeResponsiveState((responsiveState) => {
++			console.log(`Extension host (${processManager.friendyName}) is ${responsiveState === ResponsiveState.Responsive ? 'responsive' : 'unresponsive'}.`);
+ 			this._logService.info(`Extension host (${processManager.friendyName}) is ${responsiveState === ResponsiveState.Responsive ? 'responsive' : 'unresponsive'}.`);
+ 			this._onDidChangeResponsiveChange.fire({
+ 				extensionHostKind: processManager.kind,
+diff --git a/src/vs/workbench/services/extensions/common/fileRPCProtocolLogger.ts b/src/vs/workbench/services/extensions/common/fileRPCProtocolLogger.ts
+new file mode 100644
+index 00000000000..1b4fc52e001
+--- /dev/null
++++ b/src/vs/workbench/services/extensions/common/fileRPCProtocolLogger.ts
+@@ -0,0 +1,246 @@
++/*---------------------------------------------------------------------------------------------
++ *  Copyright (c) Microsoft Corporation. All rights reserved.
++ *  Licensed under the MIT License. See License.txt in the project root for license information.
++ *--------------------------------------------------------------------------------------------*/
++
++import * as fs from "fs"
++import * as path from "path"
++import * as os from "os"
++import { IRPCProtocolLogger, RequestInitiator } from "./rpcProtocol.js"
++
++/**
++ * 文件RPC协议日志记录器，将RPC通信日志保存到文件中
++ */
++export class FileRPCProtocolLogger implements IRPCProtocolLogger {
++	private _totalIncoming = 0
++	private _totalOutgoing = 0
++	private _logDir: string | undefined
++	private _logFile: string | undefined
++	private _writeStream: fs.WriteStream | null = null
++	private _logQueue: string[] = []
++	private _isInitialized = false
++	private _isDisposed = false
++	private _processInterval: NodeJS.Timeout | null = null
++	private _isEnabled = false
++
++	constructor(suffix?: string) {
++		if(!this._isEnabled) {
++			return
++		}
++		this._logDir = path.join(os.homedir(), ".ext_host", "log")
++		this._ensureLogDirectoryExists()
++		
++		// 创建日志文件名，使用时间戳确保唯一性
++		const timestamp = new Date().toISOString().replace(/[:.]/g, "-").replace("T", "_").slice(0, 19)
++		
++		// 如果提供了后缀，在文件名中添加
++		const suffixPart = suffix ? `_${suffix}` : '';
++		this._logFile = path.join(this._logDir, `rpc${suffixPart}_${timestamp}.log`)
++		
++		try {
++			// 创建日志文件写入流
++			this._writeStream = fs.createWriteStream(this._logFile, { flags: "a" })
++			
++			// 生成精确到毫秒的时间戳
++			const now = new Date()
++			const startTime = this._formatTimestampWithMilliseconds(now)
++			
++			// 写入日志头
++			const header = [
++				"-------------------------------------------------------------",
++				"Extension Host RPC Protocol Logger",
++				`Started at: ${startTime}`,
++				`Log file: ${this._logFile}`,
++				"-------------------------------------------------------------",
++				""
++			].join("\n")
++			
++			this._logQueue.push(header)
++			
++			// 启动日志处理定时器
++			this._startProcessingQueue()
++			
++			this._isInitialized = true
++			console.log(`FileRPCProtocolLogger initialized, log file: ${this._logFile}`)
++		} catch (e) {
++			console.error("Failed to initialize FileRPCProtocolLogger", e)
++		}
++	}
++
++	/**
++	 * 确保日志目录存在
++	 */
++	private _ensureLogDirectoryExists(): void {
++		if(!this._logDir) {
++			return
++		}
++		try {
++			if (!fs.existsSync(this._logDir)) {
++				fs.mkdirSync(this._logDir, { recursive: true })
++			}
++		} catch (e) {
++			console.error("Failed to create log directory", e)
++		}
++	}
++
++	/**
++	 * 启动队列处理定时器
++	 */
++	private _startProcessingQueue(): void {
++		this._processInterval = setInterval(() => {
++			this._processQueue()
++		}, 100) // 100毫秒处理一次队列
++	}
++
++	/**
++	 * 处理日志队列
++	 */
++	private _processQueue(): void {
++		if (this._isDisposed || !this._writeStream || this._logQueue.length === 0) {
++			return
++		}
++
++		try {
++			// 批量写入日志条目
++			const entries = this._logQueue.splice(0, Math.min(50, this._logQueue.length))
++			for (const entry of entries) {
++				this._writeStream.write(entry + "\n")
++			}
++		} catch (e) {
++			console.error("Failed to write log entries", e)
++		}
++	}
++
++	/**
++	 * 记录传入消息日志
++	 */
++	logIncoming(msgLength: number, req: number, initiator: RequestInitiator, str: string, data?: any): void {
++		if (!this._isInitialized) {
++			return
++		}
++
++		this._totalIncoming += msgLength
++		this._logMessage("IDEA → Ext", this._totalIncoming, msgLength, req, initiator, str, data)
++	}
++
++	/**
++	 * 记录传出消息日志
++	 */
++	logOutgoing(msgLength: number, req: number, initiator: RequestInitiator, str: string, data?: any): void {
++		if (!this._isInitialized) {
++			return
++		}
++
++		this._totalOutgoing += msgLength
++		this._logMessage("Ext → IDEA", this._totalOutgoing, msgLength, req, initiator, str, data)
++	}
++
++	/**
++	 * 记录消息
++	 */
++	private _logMessage(
++		direction: string,
++		totalLength: number,
++		msgLength: number,
++		req: number,
++		initiator: RequestInitiator,
++		str: string,
++		data: any
++	): void {
++		try {
++			const now = new Date()
++			const timestamp = this._formatTimestampWithMilliseconds(now)
++			
++			const initiatorStr = initiator === RequestInitiator.LocalSide ? "Local" : "Other"
++			
++			let logEntry = `[${timestamp}] `
++			logEntry += `[${direction}] `
++			logEntry += `[Total: ${String(totalLength).padStart(7)}] `
++			logEntry += `[Len: ${String(msgLength).padStart(5)}] `
++			logEntry += `[${String(req).padStart(5)}] `
++			logEntry += `[${initiatorStr}] `
++			logEntry += str
++			
++			if (data !== undefined) {
++				const dataStr = /\($/.test(str) ? `${this._stringify(data)})` : this._stringify(data)
++				logEntry += ` ${dataStr}`
++			}
++			
++			this._logQueue.push(logEntry)
++		} catch (e) {
++			console.error("Failed to format log message", e)
++		}
++	}
++
++	/**
++	 * 安全地将数据转换为字符串
++	 */
++	private _stringify(data: any): string {
++		try {
++			return JSON.stringify(data, null, 0)
++		} catch (e) {
++			return String(data)
++		}
++	}
++
++	/**
++	 * 释放资源
++	 */
++	dispose(): void {
++		if (this._isDisposed) {
++			return
++		}
++		
++		this._isDisposed = true
++		
++		try {
++			// 清除定时器
++			if (this._processInterval) {
++				clearInterval(this._processInterval)
++				this._processInterval = null
++			}
++			
++			// 处理剩余的队列条目
++			this._processQueue()
++			
++			// 生成精确到毫秒的时间戳
++			const now = new Date()
++			const endTime = this._formatTimestampWithMilliseconds(now)
++			
++			// 写入日志尾
++			const footer = [
++				"-------------------------------------------------------------",
++				"Extension Host RPC Protocol Logger",
++				`Ended at: ${endTime}`,
++				`Total incoming: ${this._totalIncoming} bytes`,
++				`Total outgoing: ${this._totalOutgoing} bytes`,
++				"-------------------------------------------------------------"
++			].join("\n")
++			
++			// 直接写入，不经过队列
++			if (this._writeStream) {
++				this._writeStream.write(footer + "\n")
++				this._writeStream.end()
++				this._writeStream = null
++			}
++			
++			console.log("FileRPCProtocolLogger disposed")
++		} catch (e) {
++			console.error("Failed to dispose FileRPCProtocolLogger", e)
++		}
++	}
++
++	/**
++	 * 格式化时间戳为毫秒级别
++	 */
++	private _formatTimestampWithMilliseconds(date: Date): string {
++		const year = date.getFullYear()
++		const month = String(date.getMonth() + 1).padStart(2, '0')
++		const day = String(date.getDate()).padStart(2, '0')
++		const hours = String(date.getHours()).padStart(2, '0')
++		const minutes = String(date.getMinutes()).padStart(2, '0')
++		const seconds = String(date.getSeconds()).padStart(2, '0')
++		const milliseconds = String(date.getMilliseconds()).padStart(3, '0')
++		return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}.${milliseconds}`
++	}
++} 
+\ No newline at end of file
+diff --git a/src/vs/workbench/services/extensions/common/rpcProtocol.ts b/src/vs/workbench/services/extensions/common/rpcProtocol.ts
+index 6467e585843..eeb99f77f4a 100644
+--- a/src/vs/workbench/services/extensions/common/rpcProtocol.ts
++++ b/src/vs/workbench/services/extensions/common/rpcProtocol.ts
+@@ -288,6 +288,7 @@ export class RPCProtocol extends Disposable implements IRPCProtocol {
+ 		const buff = MessageBuffer.read(rawmsg, 0);
+ 		const messageType = <MessageType>buff.readUInt8();
+ 		const req = buff.readUInt32();
++		this._logger?.logIncoming(msgLength, req, RequestInitiator.OtherSide, `receiveMessage: ${messageType}, req: ${req}, msgType: ${messageType}`);
+ 
+ 		switch (messageType) {
+ 			case MessageType.RequestJSONArgs:
+@@ -309,7 +310,7 @@ export class RPCProtocol extends Disposable implements IRPCProtocol {
+ 				break;
+ 			}
+ 			case MessageType.Acknowledged: {
+-				this._logger?.logIncoming(msgLength, req, RequestInitiator.LocalSide, `ack`);
++				// this._logger?.logIncoming(msgLength, req, RequestInitiator.LocalSide, `ack`);
+ 				this._onDidReceiveAcknowledge(req);
+ 				break;
+ 			}
+@@ -442,6 +443,7 @@ export class RPCProtocol extends Disposable implements IRPCProtocol {
+ 		try {
+ 			return Promise.resolve(this._doInvokeHandler(rpcId, methodName, args));
+ 		} catch (err) {
++			console.error('invokeHandler error:', err);
+ 			return Promise.reject(err);
+ 		}
+ 	}
+-- 
+2.49.0
diff --git a/jetbrains/.gitignore b/jetbrains/.gitignore
new file mode 100644
index 000000000..381d328f8
--- /dev/null
+++ b/jetbrains/.gitignore
@@ -0,0 +1,2 @@
+### Debug resources
+resources/*
\ No newline at end of file
diff --git a/jetbrains/README.md b/jetbrains/README.md
new file mode 100644
index 000000000..e87fdd466
--- /dev/null
+++ b/jetbrains/README.md
@@ -0,0 +1,379 @@
+# JetBrains Plugin Development Setup
+
+This directory contains the JetBrains plugin implementation for Kilo Code, including both the IntelliJ plugin (Kotlin) and the Extension Host (Node.js/TypeScript).
+
+## Prerequisites
+
+Before building the JetBrains plugin, ensure all dependencies are properly configured. Use the provided dependency check script to verify your setup.
+
+### Required Dependencies
+
+#### 1. Java Development Kit (JDK) 17
+
+- **Required Version**: Java 17 (LTS)
+- **Why**: The plugin build system requires Java 17 for compilation and runtime compatibility
+- **Recommended Installation** (SDKMAN - works on macOS/Linux):
+
+    ```bash
+    # Install SDKMAN
+    curl -s "https://get.sdkman.io" | bash
+    source ~/.sdkman/bin/sdkman-init.sh
+
+    # Install and use Java 17
+    sdk install java 17.0.12-tem
+    sdk use java 17.0.12-tem
+    ```
+
+- **Alternative Installation**:
+    - macOS: `brew install openjdk@17`
+    - Linux: `sudo apt install openjdk-17-jdk` or equivalent
+    - Windows: Download from [Oracle](https://www.oracle.com/java/technologies/javase/jdk17-archive-downloads.html) or [OpenJDK](https://openjdk.org/projects/jdk/17/)
+
+#### 2. VSCode Submodule
+
+- **Location**: `deps/vscode/`
+- **Purpose**: Provides VSCode runtime dependencies and APIs for the Extension Host
+- **Initialization**: Must be initialized before building
+
+#### 3. Node.js and pnpm
+
+- **Node.js**: Version 20.x (as specified in package.json)
+- **pnpm**: For workspace management and dependency installation
+
+## Quick Setup
+
+The dependency check runs automatically as part of the build process, but you can also run it manually:
+
+```bash
+# Run dependency check manually
+./jetbrains/scripts/check-dependencies.sh
+
+# Or as part of JetBrains host build process
+cd jetbrains/host && pnpm run deps:check
+```
+
+**Note**: The dependency check is automatically integrated into the Turbo build system and runs before JetBrains builds to ensure all dependencies are properly configured.
+
+### Quick Fixes for Common Issues
+
+- **"Unsupported class file major version 68"**: [Install Java 17](#java-version-issues)
+- **"slice is not valid mach-o file"**: [Rebuild native modules](#native-module-architecture-mismatch)
+- **"platform.zip file does not exist"**: [Generate platform files](#missing-platformzip)
+
+## Manual Setup
+
+If you prefer to set up dependencies manually:
+
+### 1. Initialize VSCode Submodule
+
+```bash
+# From project root
+git submodule update --init --recursive
+```
+
+### 2. Verify Java Version
+
+```bash
+java -version
+# Should show Java 17.x.x
+
+javac -version
+# Should show javac 17.x.x
+```
+
+### 3. Install Node Dependencies
+
+```bash
+# From project root
+pnpm install
+```
+
+## Project Structure
+
+```
+jetbrains/
+├── host/                    # Extension Host (Node.js/TypeScript)
+│   ├── src/                # TypeScript source code
+│   ├── package.json        # Node.js dependencies
+│   ├── tsconfig.json       # TypeScript configuration
+│   └── turbo.json          # Turbo build configuration
+├── plugin/                 # IntelliJ Plugin (Kotlin/Java)
+│   ├── src/main/kotlin/    # Kotlin source code
+│   ├── src/main/resources/ # Plugin resources and themes
+│   ├── build.gradle.kts    # Gradle build configuration
+│   ├── gradle.properties   # Plugin version and platform settings
+│   ├── genPlatform.gradle  # VSCode platform generation
+│   └── scripts/            # Build and utility scripts
+├── resources/              # Runtime resources (generated)
+└── README.md              # This file
+```
+
+## Build Modes
+
+The plugin supports three build modes controlled by the `debugMode` property:
+
+### 1. Development Mode (`debugMode=idea`)
+
+```bash
+./gradlew prepareSandbox -PdebugMode=idea
+```
+
+- Used for local development and debugging
+- Creates `.env` file for Extension Host
+- Copies theme resources to debug location
+- Enables hot-reloading for VSCode plugin integration
+
+### 2. Release Mode (`debugMode=release`)
+
+```bash
+./gradlew prepareSandbox -PdebugMode=release
+```
+
+- Used for production builds
+- Requires `platform.zip` file (generated via `genPlatform` task)
+- Creates fully self-contained deployment package
+- Includes all runtime dependencies and node_modules
+
+### 3. Lightweight Mode (`debugMode=none`, default)
+
+```bash
+./gradlew prepareSandbox
+```
+
+- Used for testing and CI
+- Minimal resource preparation
+- No VSCode runtime dependencies
+- Suitable for static analysis and unit tests
+
+## Building the Plugin
+
+### Development Build
+
+```bash
+# From project root
+pnpm jetbrains:run
+
+# Or manually:
+cd jetbrains/plugin
+./gradlew runIde -PdebugMode=idea
+```
+
+### Production Build
+
+```bash
+# Generate platform files first (if needed)
+cd jetbrains/plugin
+./gradlew genPlatform
+
+# Build plugin
+./gradlew buildPlugin -PdebugMode=release
+```
+
+### Extension Host Only
+
+```bash
+# From jetbrains/host directory
+pnpm build
+
+# Or with Turbo from project root
+pnpm --filter @kilo-code/jetbrains-host build
+```
+
+## Turbo Integration
+
+The project uses Turborepo for efficient builds and caching:
+
+- **`jetbrains:bundle`**: Builds the complete plugin bundle
+- **`jetbrains:run-bundle`**: Runs the plugin with bundle mode
+- **`jetbrains:run`**: Runs the plugin in development mode
+
+Turbo automatically handles:
+
+- VSCode submodule initialization (`deps:check`)
+- Dependency patching (`deps:patch`)
+- Build caching and parallelization
+
+## Common Issues and Troubleshooting
+
+### Java Version Issues
+
+**Problem**: Build fails with "Unsupported class file major version 68" or similar Java version errors
+**Root Cause**: Running Java 24+ instead of required Java 17
+
+**Solution**:
+
+#### Option 1: Using SDKMAN (Recommended for macOS/Linux)
+
+```bash
+# Install SDKMAN if not already installed
+curl -s "https://get.sdkman.io" | bash
+source ~/.sdkman/bin/sdkman-init.sh
+
+# Install and use Java 17
+sdk install java 17.0.12-tem
+sdk use java 17.0.12-tem
+
+# Make Java 17 default (optional)
+sdk default java 17.0.12-tem
+
+# Verify version
+java -version  # Should show OpenJDK 17.x.x
+```
+
+#### Option 2: Using Homebrew (macOS Alternative)
+
+```bash
+# Install Java 17
+brew install openjdk@17
+
+# Set JAVA_HOME for current session
+export JAVA_HOME=/opt/homebrew/opt/openjdk@17/libexec/openjdk.jdk/Contents/Home
+
+# Add to shell profile for persistence
+echo 'export JAVA_HOME=/opt/homebrew/opt/openjdk@17/libexec/openjdk.jdk/Contents/Home' >> ~/.zshrc
+
+# Verify version
+java -version
+```
+
+#### Option 3: Manual JAVA_HOME Setup
+
+```bash
+# Find Java 17 installation
+/usr/libexec/java_home -V
+
+# Set JAVA_HOME to Java 17 path
+export JAVA_HOME=$(/usr/libexec/java_home -v 17)
+```
+
+### VSCode Submodule Not Initialized
+
+**Problem**: Build fails with missing VSCode dependencies
+**Solution**:
+
+```bash
+# Initialize submodule
+git submodule update --init --recursive
+
+# Verify submodule is populated
+ls deps/vscode/src  # Should contain VSCode source files
+```
+
+### Missing platform.zip
+
+**Problem**: Release build fails with "platform.zip file does not exist"
+**Solution**:
+
+```bash
+cd jetbrains/plugin
+./gradlew genPlatform  # This will download and generate platform.zip
+```
+
+### Node.js Version Mismatch
+
+**Problem**: Extension Host build fails with Node.js compatibility errors
+**Solution**:
+
+```bash
+# Use Node.js 20.x
+nvm use 20  # if using nvm
+# or
+node --version  # should show v20.x.x
+```
+
+### Native Module Architecture Mismatch
+
+**Problem**: Plugin fails to load with "slice is not valid mach-o file" errors for native modules like `@vscode/spdlog` or `native-watchdog`
+**Root Cause**: Native Node.js modules were compiled for wrong CPU architecture (e.g., x86_64 vs ARM64)
+
+**Solution**:
+
+```bash
+# Navigate to resources directory and rebuild native modules
+cd jetbrains/resources
+
+# Clean existing modules
+rm -rf node_modules package-lock.json
+
+# Copy package.json from host
+cp ../host/package.json .
+
+# Install dependencies with npm (not pnpm to avoid workspace conflicts)
+npm install
+
+# Verify native modules are built for correct architecture
+file node_modules/@vscode/spdlog/build/Release/spdlog.node
+file node_modules/native-watchdog/build/Release/watchdog.node
+# Should show "Mach-O 64-bit bundle arm64" on Apple Silicon or appropriate arch
+
+# Update production dependency list
+cd ../plugin
+npm ls --omit=dev --all --parseable --prefix ../resources > ./prodDep.txt
+
+# Rebuild plugin
+./gradlew buildPlugin -PdebugMode=none
+```
+
+**Prevention**: When updating dependencies or switching architectures, always rebuild native modules in the `jetbrains/resources/` directory.
+
+### Gradle Build Issues
+
+**Problem**: Gradle tasks fail or hang
+**Solution**:
+
+```bash
+# Clean and rebuild
+./gradlew clean
+./gradlew build --refresh-dependencies
+
+# Check Gradle daemon
+./gradlew --stop
+./gradlew build
+```
+
+## Development Workflow
+
+1. **Initial Setup**: Dependencies are automatically checked when you run any JetBrains build command
+2. **Development**: Use `pnpm jetbrains:run` for live development (includes automatic dependency check)
+3. **Testing**: Build with `debugMode=none` for CI/testing
+4. **Release**: Generate platform files and build with `debugMode=release`
+
+**Automatic Dependency Management**: The build system now automatically verifies and sets up all required dependencies (Java 17, VSCode submodule, Node.js, etc.) before each build, ensuring a smooth development experience.
+
+## Environment Variables
+
+The plugin respects these environment variables:
+
+- `JAVA_HOME`: Java installation directory
+- `debugMode`: Build mode (idea/release/none)
+- `vscodePlugin`: Plugin name (default: kilocode)
+- `vscodeVersion`: VSCode version for platform generation (default: 1.100.0)
+
+## Platform Support
+
+The plugin supports multiple platforms through the platform generation system:
+
+- **Windows**: x64
+- **macOS**: x64 and ARM64 (Apple Silicon)
+- **Linux**: x64
+
+Platform-specific dependencies are automatically handled during the build process.
+
+**Multi-Architecture Support**: The platform generation system now includes enhanced architecture-aware native module handling, automatically creating runtime loaders that detect the current platform and load the correct native modules for each architecture.
+
+## Contributing
+
+When making changes to the JetBrains plugin:
+
+1. Ensure all dependencies are properly set up
+2. Test in development mode first (`debugMode=idea`)
+3. Verify builds work in all three modes
+4. Update this README if adding new dependencies or requirements
+5. Run the dependency check script to validate setup
+
+## Scripts
+
+- `jetbrains/scripts/check-dependencies.sh`: Comprehensive dependency verification and setup
+- `jetbrains/plugin/scripts/sync_version.js`: Version synchronization utility
+
+For more detailed build information, see the individual `package.json` and `build.gradle.kts` files in the respective directories.
diff --git a/jetbrains/host/.gitignore b/jetbrains/host/.gitignore
new file mode 100644
index 000000000..f1cb5f4bb
--- /dev/null
+++ b/jetbrains/host/.gitignore
@@ -0,0 +1,5 @@
+### Dependencies
+deps/*
+
+### Build
+dist
\ No newline at end of file
diff --git a/jetbrains/host/bootstrap-cli.ts b/jetbrains/host/bootstrap-cli.ts
new file mode 100644
index 000000000..224cc5f87
--- /dev/null
+++ b/jetbrains/host/bootstrap-cli.ts
@@ -0,0 +1,11 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+// Delete `VSCODE_CWD` very early. We have seen
+// reports where `code .` would use the wrong
+// current working directory due to our variable
+// somehow escaping to the parent shell
+// (https://github.com/microsoft/vscode/issues/126399)
+delete process.env["VSCODE_CWD"]
diff --git a/jetbrains/host/bootstrap-esm.ts b/jetbrains/host/bootstrap-esm.ts
new file mode 100644
index 000000000..28b266858
--- /dev/null
+++ b/jetbrains/host/bootstrap-esm.ts
@@ -0,0 +1,126 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+import * as path from "path"
+import * as fs from "fs"
+import { fileURLToPath } from "url"
+import { createRequire, register } from "node:module"
+import { product, pkg } from "./bootstrap-meta.js"
+import "./bootstrap-node.js"
+import * as performance from "./deps/vscode/vs/base/common/performance.js"
+import { INLSConfiguration } from "./deps/vscode/vs/nls.js"
+
+const require = createRequire(import.meta.url)
+const __dirname = path.dirname(fileURLToPath(import.meta.url))
+
+// Install a hook to module resolution to map 'fs' to 'original-fs'
+if (process.env["ELECTRON_RUN_AS_NODE"] || process.versions["electron"]) {
+	const jsCode = `
+	export async function resolve(specifier, context, nextResolve) {
+		if (specifier === 'fs') {
+			return {
+				format: 'builtin',
+				shortCircuit: true,
+				url: 'node:original-fs'
+			};
+		}
+
+		// Defer to the next hook in the chain, which would be the
+		// Node.js default resolve if this is the last user-specified loader.
+		return nextResolve(specifier, context);
+	}`
+	register(`data:text/javascript;base64,${Buffer.from(jsCode).toString("base64")}`, import.meta.url)
+}
+
+// Prepare globals that are needed for running
+globalThis._VSCODE_PRODUCT_JSON = { ...product }
+if (process.env["VSCODE_DEV"]) {
+	try {
+		const overrides: unknown = require("../product.overrides.json")
+		globalThis._VSCODE_PRODUCT_JSON = Object.assign(globalThis._VSCODE_PRODUCT_JSON, overrides)
+	} catch (error) {
+		/* ignore */
+	}
+}
+globalThis._VSCODE_PACKAGE_JSON = { ...pkg }
+globalThis._VSCODE_FILE_ROOT = __dirname
+
+//#region NLS helpers
+
+let setupNLSResult: Promise<INLSConfiguration | undefined> | undefined = undefined
+
+function setupNLS(): Promise<INLSConfiguration | undefined> {
+	if (!setupNLSResult) {
+		setupNLSResult = doSetupNLS()
+	}
+
+	return setupNLSResult
+}
+
+async function doSetupNLS(): Promise<INLSConfiguration | undefined> {
+	performance.mark("code/willLoadNls")
+
+	let nlsConfig: INLSConfiguration | undefined = undefined
+
+	let messagesFile: string | undefined
+	if (process.env["VSCODE_NLS_CONFIG"]) {
+		try {
+			nlsConfig = JSON.parse(process.env["VSCODE_NLS_CONFIG"])
+			if (nlsConfig?.languagePack?.messagesFile) {
+				messagesFile = nlsConfig.languagePack.messagesFile
+			} else if (nlsConfig?.defaultMessagesFile) {
+				messagesFile = nlsConfig.defaultMessagesFile
+			}
+
+			globalThis._VSCODE_NLS_LANGUAGE = nlsConfig?.resolvedLanguage
+		} catch (e) {
+			console.error(`Error reading VSCODE_NLS_CONFIG from environment: ${e}`)
+		}
+	}
+
+	if (
+		process.env["VSCODE_DEV"] || // no NLS support in dev mode
+		!messagesFile // no NLS messages file
+	) {
+		return undefined
+	}
+
+	try {
+		globalThis._VSCODE_NLS_MESSAGES = JSON.parse((await fs.promises.readFile(messagesFile)).toString())
+	} catch (error) {
+		console.error(`Error reading NLS messages file ${messagesFile}: ${error}`)
+
+		// Mark as corrupt: this will re-create the language pack cache next startup
+		if (nlsConfig?.languagePack?.corruptMarkerFile) {
+			try {
+				await fs.promises.writeFile(nlsConfig.languagePack.corruptMarkerFile, "corrupted")
+			} catch (error) {
+				console.error(`Error writing corrupted NLS marker file: ${error}`)
+			}
+		}
+
+		// Fallback to the default message file to ensure english translation at least
+		if (nlsConfig?.defaultMessagesFile && nlsConfig.defaultMessagesFile !== messagesFile) {
+			try {
+				globalThis._VSCODE_NLS_MESSAGES = JSON.parse(
+					(await fs.promises.readFile(nlsConfig.defaultMessagesFile)).toString(),
+				)
+			} catch (error) {
+				console.error(`Error reading default NLS messages file ${nlsConfig.defaultMessagesFile}: ${error}`)
+			}
+		}
+	}
+
+	performance.mark("code/didLoadNls")
+
+	return nlsConfig
+}
+
+//#endregion
+
+export async function bootstrapESM(): Promise<void> {
+	// NLS
+	await setupNLS()
+}
diff --git a/jetbrains/host/bootstrap-fork.ts b/jetbrains/host/bootstrap-fork.ts
new file mode 100644
index 000000000..56c5a2bae
--- /dev/null
+++ b/jetbrains/host/bootstrap-fork.ts
@@ -0,0 +1,251 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+import * as performance from "./deps/vscode/vs/base/common/performance.js"
+import { removeGlobalNodeJsModuleLookupPaths, devInjectNodeModuleLookupPath } from "./bootstrap-node.js"
+import { bootstrapESM } from "./bootstrap-esm.js"
+
+performance.mark("code/fork/start")
+
+//#region Helpers
+
+function pipeLoggingToParent(): void {
+	const MAX_STREAM_BUFFER_LENGTH = 1024 * 1024
+	const MAX_LENGTH = 100000
+
+	/**
+	 * Prevent circular stringify and convert arguments to real array
+	 */
+	function safeToString(args: ArrayLike<unknown>): string {
+		const seen: unknown[] = []
+		const argsArray: unknown[] = []
+
+		// Massage some arguments with special treatment
+		if (args.length) {
+			for (let i = 0; i < args.length; i++) {
+				let arg = args[i]
+
+				// Any argument of type 'undefined' needs to be specially treated because
+				// JSON.stringify will simply ignore those. We replace them with the string
+				// 'undefined' which is not 100% right, but good enough to be logged to console
+				if (typeof arg === "undefined") {
+					arg = "undefined"
+				}
+
+				// Any argument that is an Error will be changed to be just the error stack/message
+				// itself because currently cannot serialize the error over entirely.
+				else if (arg instanceof Error) {
+					const errorObj = arg
+					if (errorObj.stack) {
+						arg = errorObj.stack
+					} else {
+						arg = errorObj.toString()
+					}
+				}
+
+				argsArray.push(arg)
+			}
+		}
+
+		try {
+			const res = JSON.stringify(argsArray, function (key, value: unknown) {
+				// Objects get special treatment to prevent circles
+				if (isObject(value) || Array.isArray(value)) {
+					if (seen.indexOf(value) !== -1) {
+						return "[Circular]"
+					}
+
+					seen.push(value)
+				}
+
+				return value
+			})
+
+			if (res.length > MAX_LENGTH) {
+				return "Output omitted for a large object that exceeds the limits"
+			}
+
+			return res
+		} catch (error) {
+			return `Output omitted for an object that cannot be inspected ('${error.toString()}')`
+		}
+	}
+
+	function safeSend(arg: { type: string; severity: string; arguments: string }): void {
+		try {
+			if (process.send) {
+				process.send(arg)
+			}
+		} catch (error) {
+			// Can happen if the parent channel is closed meanwhile
+		}
+	}
+
+	function isObject(obj: unknown): boolean {
+		return (
+			typeof obj === "object" &&
+			obj !== null &&
+			!Array.isArray(obj) &&
+			!(obj instanceof RegExp) &&
+			!(obj instanceof Date)
+		)
+	}
+
+	function safeSendConsoleMessage(severity: "log" | "warn" | "error", args: string): void {
+		safeSend({ type: "__$console", severity, arguments: args })
+	}
+
+	/**
+	 * Wraps a console message so that it is transmitted to the renderer.
+	 *
+	 * The wrapped property is not defined with `writable: false` to avoid
+	 * throwing errors, but rather a no-op setting. See https://github.com/microsoft/vscode-extension-telemetry/issues/88
+	 */
+	function wrapConsoleMethod(method: "log" | "info" | "warn" | "error", severity: "log" | "warn" | "error"): void {
+		Object.defineProperty(console, method, {
+			set: () => {},
+			get: () =>
+				function () {
+					safeSendConsoleMessage(severity, safeToString(arguments))
+				},
+		})
+	}
+
+	/**
+	 * Wraps process.stderr/stdout.write() so that it is transmitted to the
+	 * renderer or CLI. It both calls through to the original method as well
+	 * as to console.log with complete lines so that they're made available
+	 * to the debugger/CLI.
+	 */
+	function wrapStream(streamName: "stdout" | "stderr", severity: "log" | "warn" | "error"): void {
+		const stream = process[streamName]
+		const original = stream.write
+
+		let buf = ""
+
+		Object.defineProperty(stream, "write", {
+			set: () => {},
+			get:
+				() =>
+				(
+					chunk: string | Buffer | Uint8Array,
+					encoding: BufferEncoding | undefined,
+					callback: ((err?: Error | undefined) => void) | undefined,
+				) => {
+					buf += chunk.toString(encoding)
+					const eol = buf.length > MAX_STREAM_BUFFER_LENGTH ? buf.length : buf.lastIndexOf("\n")
+					if (eol !== -1) {
+						console[severity](buf.slice(0, eol))
+						buf = buf.slice(eol + 1)
+					}
+
+					original.call(stream, chunk, encoding, callback)
+				},
+		})
+	}
+
+	// Pass console logging to the outside so that we have it in the main side if told so
+	if (process.env["VSCODE_VERBOSE_LOGGING"] === "true") {
+		wrapConsoleMethod("info", "log")
+		wrapConsoleMethod("log", "log")
+		wrapConsoleMethod("warn", "warn")
+		wrapConsoleMethod("error", "error")
+	} else {
+		console.log = function () {
+			/* ignore */
+		}
+		console.warn = function () {
+			/* ignore */
+		}
+		console.info = function () {
+			/* ignore */
+		}
+		wrapConsoleMethod("error", "error")
+	}
+
+	wrapStream("stderr", "error")
+	wrapStream("stdout", "log")
+}
+
+function handleExceptions(): void {
+	// Handle uncaught exceptions
+	process.on("uncaughtException", function (err) {
+		console.error("Uncaught Exception: ", err)
+	})
+
+	// Handle unhandled promise rejections
+	process.on("unhandledRejection", function (reason) {
+		console.error("Unhandled Promise Rejection: ", reason)
+	})
+}
+
+function terminateWhenParentTerminates(): void {
+	const parentPid = Number(process.env["VSCODE_PARENT_PID"])
+
+	if (typeof parentPid === "number" && !isNaN(parentPid)) {
+		setInterval(function () {
+			try {
+				process.kill(parentPid, 0) // throws an exception if the main process doesn't exist anymore.
+			} catch (e) {
+				process.exit()
+			}
+		}, 5000)
+	}
+}
+
+function configureCrashReporter(): void {
+	const crashReporterProcessType = process.env["VSCODE_CRASH_REPORTER_PROCESS_TYPE"]
+	if (crashReporterProcessType) {
+		try {
+			//@ts-ignore
+			if (
+				process["crashReporter"] &&
+				typeof process["crashReporter"].addExtraParameter === "function" /* Electron only */
+			) {
+				//@ts-ignore
+				process["crashReporter"].addExtraParameter("processType", crashReporterProcessType)
+			}
+		} catch (error) {
+			console.error(error)
+		}
+	}
+}
+
+//#endregion
+
+// Crash reporter
+configureCrashReporter()
+
+// Remove global paths from the node module lookup (node.js only)
+removeGlobalNodeJsModuleLookupPaths()
+
+if (process.env["VSCODE_DEV_INJECT_NODE_MODULE_LOOKUP_PATH"]) {
+	devInjectNodeModuleLookupPath(process.env["VSCODE_DEV_INJECT_NODE_MODULE_LOOKUP_PATH"])
+}
+
+// Configure: pipe logging to parent process
+if (!!process.send && process.env["VSCODE_PIPE_LOGGING"] === "true") {
+	pipeLoggingToParent()
+}
+
+// Handle Exceptions
+if (!process.env["VSCODE_HANDLES_UNCAUGHT_ERRORS"]) {
+	handleExceptions()
+}
+
+// Terminate when parent terminates
+if (process.env["VSCODE_PARENT_PID"]) {
+	terminateWhenParentTerminates()
+}
+
+// Bootstrap ESM
+await bootstrapESM()
+
+// Load ESM entry point
+await import(
+	[`./${process.env["VSCODE_ESM_ENTRYPOINT"]}.js`].join(
+		"/",
+	) /* workaround: esbuild prints some strange warnings when trying to inline? */
+)
diff --git a/jetbrains/host/bootstrap-import.ts b/jetbrains/host/bootstrap-import.ts
new file mode 100644
index 000000000..c7e56906d
--- /dev/null
+++ b/jetbrains/host/bootstrap-import.ts
@@ -0,0 +1,62 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+// *********************************************************************
+// *                                                                   *
+// *  We need this to redirect to node_modules from the remote-folder. *
+// *  This ONLY applies  when running out of source.                   *
+// *                                                                   *
+// *********************************************************************
+
+import { fileURLToPath, pathToFileURL } from "node:url"
+import { promises } from "node:fs"
+import { join } from "node:path"
+
+// SEE https://nodejs.org/docs/latest/api/module.html#initialize
+
+const _specifierToUrl: Record<string, string> = {}
+
+export async function initialize(injectPath: string): Promise<void> {
+	// populate mappings
+
+	const injectPackageJSONPath = fileURLToPath(new URL("../package.json", pathToFileURL(injectPath)))
+	const packageJSON = JSON.parse(String(await promises.readFile(injectPackageJSONPath)))
+
+	for (const [name] of Object.entries(packageJSON.dependencies)) {
+		try {
+			const path = join(injectPackageJSONPath, `../node_modules/${name}/package.json`)
+			let { main } = JSON.parse(String(await promises.readFile(path)))
+
+			if (!main) {
+				main = "index.js"
+			}
+			if (!main.endsWith(".js")) {
+				main += ".js"
+			}
+			const mainPath = join(injectPackageJSONPath, `../node_modules/${name}/${main}`)
+			_specifierToUrl[name] = pathToFileURL(mainPath).href
+		} catch (err) {
+			console.error(name)
+			console.error(err)
+		}
+	}
+
+	console.log(`[bootstrap-import] Initialized node_modules redirector for: ${injectPath}`)
+}
+
+export async function resolve(specifier: string | number, context: any, nextResolve: (arg0: any, arg1: any) => any) {
+	const newSpecifier = _specifierToUrl[specifier]
+	if (newSpecifier !== undefined) {
+		return {
+			format: "commonjs",
+			shortCircuit: true,
+			url: newSpecifier,
+		}
+	}
+
+	// Defer to the next hook in the chain, which would be the
+	// Node.js default resolve if this is the last user-specified loader.
+	return nextResolve(specifier, context)
+}
diff --git a/jetbrains/host/bootstrap-meta.ts b/jetbrains/host/bootstrap-meta.ts
new file mode 100644
index 000000000..152e24d75
--- /dev/null
+++ b/jetbrains/host/bootstrap-meta.ts
@@ -0,0 +1,24 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+import { createRequire } from "node:module"
+import type { IProductConfiguration } from "./deps/vscode/vs/base/common/product.js"
+
+const require = createRequire(import.meta.url)
+
+let productObj: Partial<IProductConfiguration> & { BUILD_INSERT_PRODUCT_CONFIGURATION?: string } = {
+	BUILD_INSERT_PRODUCT_CONFIGURATION: "BUILD_INSERT_PRODUCT_CONFIGURATION",
+} // DO NOT MODIFY, PATCHED DURING BUILD
+if (productObj["BUILD_INSERT_PRODUCT_CONFIGURATION"]) {
+	productObj = require("../product.json") // Running out of sources
+}
+
+let pkgObj = { BUILD_INSERT_PACKAGE_CONFIGURATION: "BUILD_INSERT_PACKAGE_CONFIGURATION" } // DO NOT MODIFY, PATCHED DURING BUILD
+if (pkgObj["BUILD_INSERT_PACKAGE_CONFIGURATION"]) {
+	pkgObj = require("../package.json") // Running out of sources
+}
+
+export const product = productObj
+export const pkg = pkgObj
diff --git a/jetbrains/host/bootstrap-node.ts b/jetbrains/host/bootstrap-node.ts
new file mode 100644
index 000000000..1500ca2db
--- /dev/null
+++ b/jetbrains/host/bootstrap-node.ts
@@ -0,0 +1,193 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+import * as path from "path"
+import * as fs from "fs"
+import { fileURLToPath } from "url"
+import { createRequire } from "node:module"
+import type { IProductConfiguration } from "./deps/vscode/vs/base/common/product.js"
+
+const require = createRequire(import.meta.url)
+const __dirname = path.dirname(fileURLToPath(import.meta.url))
+const isWindows = process.platform === "win32"
+
+// increase number of stack frames(from 10, https://github.com/v8/v8/wiki/Stack-Trace-API)
+Error.stackTraceLimit = 100
+
+if (!process.env["VSCODE_HANDLES_SIGPIPE"]) {
+	// Workaround for Electron not installing a handler to ignore SIGPIPE
+	// (https://github.com/electron/electron/issues/13254)
+	let didLogAboutSIGPIPE = false
+	process.on("SIGPIPE", () => {
+		// See https://github.com/microsoft/vscode-remote-release/issues/6543
+		// In certain situations, the console itself can be in a broken pipe state
+		// so logging SIGPIPE to the console will cause an infinite async loop
+		if (!didLogAboutSIGPIPE) {
+			didLogAboutSIGPIPE = true
+			console.error(new Error(`Unexpected SIGPIPE`))
+		}
+	})
+}
+
+// Setup current working directory in all our node & electron processes
+// - Windows: call `process.chdir()` to always set application folder as cwd
+// -  all OS: store the `process.cwd()` inside `VSCODE_CWD` for consistent lookups
+function setupCurrentWorkingDirectory(): void {
+	try {
+		// Store the `process.cwd()` inside `VSCODE_CWD`
+		// for consistent lookups, but make sure to only
+		// do this once unless defined already from e.g.
+		// a parent process.
+		if (typeof process.env["VSCODE_CWD"] !== "string") {
+			process.env["VSCODE_CWD"] = process.cwd()
+		}
+
+		// Windows: always set application folder as current working dir
+		if (process.platform === "win32") {
+			process.chdir(path.dirname(process.execPath))
+		}
+	} catch (err) {
+		console.error(err)
+	}
+}
+
+setupCurrentWorkingDirectory()
+
+/**
+ * Add support for redirecting the loading of node modules
+ *
+ * Note: only applies when running out of sources.
+ */
+export function devInjectNodeModuleLookupPath(injectPath: string): void {
+	if (!process.env["VSCODE_DEV"]) {
+		return // only applies running out of sources
+	}
+
+	if (!injectPath) {
+		throw new Error("Missing injectPath")
+	}
+
+	// register a loader hook
+	const Module = require("node:module")
+	Module.register("./bootstrap-import.js", { parentURL: import.meta.url, data: injectPath })
+}
+
+export function removeGlobalNodeJsModuleLookupPaths(): void {
+	if (typeof process?.versions?.electron === "string") {
+		return // Electron disables global search paths in https://github.com/electron/electron/blob/3186c2f0efa92d275dc3d57b5a14a60ed3846b0e/shell/common/node_bindings.cc#L653
+	}
+
+	const Module = require("module")
+	const globalPaths = Module.globalPaths
+
+	const originalResolveLookupPaths = Module._resolveLookupPaths
+
+	Module._resolveLookupPaths = function (moduleName: string, parent: any): string[] {
+		const paths = originalResolveLookupPaths(moduleName, parent)
+		if (Array.isArray(paths)) {
+			let commonSuffixLength = 0
+			while (
+				commonSuffixLength < paths.length &&
+				paths[paths.length - 1 - commonSuffixLength] ===
+					globalPaths[globalPaths.length - 1 - commonSuffixLength]
+			) {
+				commonSuffixLength++
+			}
+
+			return paths.slice(0, paths.length - commonSuffixLength)
+		}
+
+		return paths
+	}
+
+	const originalNodeModulePaths = Module._nodeModulePaths
+	Module._nodeModulePaths = function (from: string): string[] {
+		let paths: string[] = originalNodeModulePaths(from)
+		if (!isWindows) {
+			return paths
+		}
+
+		// On Windows, remove drive(s) and users' home directory from search paths,
+		// UNLESS 'from' is explicitly set to one of those.
+		const isDrive = (p: string) => p.length >= 3 && p.endsWith(":\\")
+
+		if (!isDrive(from)) {
+			paths = paths.filter((p) => !isDrive(path.dirname(p)))
+		}
+
+		if (process.env.HOMEDRIVE && process.env.HOMEPATH) {
+			const userDir = path.dirname(path.join(process.env.HOMEDRIVE, process.env.HOMEPATH))
+
+			const isUsersDir = (p: string) => path.relative(p, userDir).length === 0
+
+			// Check if 'from' is the same as 'userDir'
+			if (!isUsersDir(from)) {
+				paths = paths.filter((p) => !isUsersDir(path.dirname(p)))
+			}
+		}
+
+		return paths
+	}
+}
+
+/**
+ * Helper to enable portable mode.
+ */
+export function configurePortable(product: Partial<IProductConfiguration>): {
+	portableDataPath: string
+	isPortable: boolean
+} {
+	const appRoot = path.dirname(__dirname)
+
+	function getApplicationPath(): string {
+		if (process.env["VSCODE_DEV"]) {
+			return appRoot
+		}
+
+		if (process.platform === "darwin") {
+			return path.dirname(path.dirname(path.dirname(appRoot)))
+		}
+
+		return path.dirname(path.dirname(appRoot))
+	}
+
+	function getPortableDataPath(): string {
+		if (process.env["VSCODE_PORTABLE"]) {
+			return process.env["VSCODE_PORTABLE"]
+		}
+
+		if (process.platform === "win32" || process.platform === "linux") {
+			return path.join(getApplicationPath(), "data")
+		}
+
+		const portableDataName = product.portable || `${product.applicationName}-portable-data`
+		return path.join(path.dirname(getApplicationPath()), portableDataName)
+	}
+
+	const portableDataPath = getPortableDataPath()
+	const isPortable = !("target" in product) && fs.existsSync(portableDataPath)
+	const portableTempPath = path.join(portableDataPath, "tmp")
+	const isTempPortable = isPortable && fs.existsSync(portableTempPath)
+
+	if (isPortable) {
+		process.env["VSCODE_PORTABLE"] = portableDataPath
+	} else {
+		delete process.env["VSCODE_PORTABLE"]
+	}
+
+	if (isTempPortable) {
+		if (process.platform === "win32") {
+			process.env["TMP"] = portableTempPath
+			process.env["TEMP"] = portableTempPath
+		} else {
+			process.env["TMPDIR"] = portableTempPath
+		}
+	}
+
+	return {
+		portableDataPath,
+		isPortable,
+	}
+}
diff --git a/jetbrains/host/bootstrap-server.ts b/jetbrains/host/bootstrap-server.ts
new file mode 100644
index 000000000..2b973985b
--- /dev/null
+++ b/jetbrains/host/bootstrap-server.ts
@@ -0,0 +1,7 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+// Keep bootstrap-esm.js from redefining 'fs'.
+delete process.env["ELECTRON_RUN_AS_NODE"]
diff --git a/jetbrains/host/bootstrap-window.ts b/jetbrains/host/bootstrap-window.ts
new file mode 100644
index 000000000..9d24dded9
--- /dev/null
+++ b/jetbrains/host/bootstrap-window.ts
@@ -0,0 +1,252 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+;(function () {
+	type ISandboxConfiguration =
+		import("./deps/vscode/vs/base/parts/sandbox/common/sandboxTypes.js").ISandboxConfiguration
+	type ILoadResult<
+		M,
+		T extends ISandboxConfiguration,
+	> = import("./deps/vscode/vs/platform/window/electron-sandbox/window.js").ILoadResult<M, T>
+	type ILoadOptions<T extends ISandboxConfiguration> =
+		import("./deps/vscode/vs/platform/window/electron-sandbox/window.js").ILoadOptions<T>
+	type IMainWindowSandboxGlobals =
+		import("./deps/vscode/vs/base/parts/sandbox/electron-sandbox/globals.js").IMainWindowSandboxGlobals
+
+	const preloadGlobals: IMainWindowSandboxGlobals = (window as any).vscode // defined by preload.ts
+	const safeProcess = preloadGlobals.process
+
+	async function load<M, T extends ISandboxConfiguration>(
+		esModule: string,
+		options: ILoadOptions<T>,
+	): Promise<ILoadResult<M, T>> {
+		// Window Configuration from Preload Script
+		const configuration = await resolveWindowConfiguration<T>()
+
+		// Signal before import()
+		options?.beforeImport?.(configuration)
+
+		// Developer settings
+		const {
+			enableDeveloperKeybindings,
+			removeDeveloperKeybindingsAfterLoad,
+			developerDeveloperKeybindingsDisposable,
+			forceDisableShowDevtoolsOnError,
+		} = setupDeveloperKeybindings(configuration, options)
+
+		// NLS
+		setupNLS<T>(configuration)
+
+		// Compute base URL and set as global
+		const baseUrl = new URL(
+			`${fileUriFromPath(configuration.appRoot, { isWindows: safeProcess.platform === "win32", scheme: "vscode-file", fallbackAuthority: "vscode-app" })}/out/`,
+		)
+		globalThis._VSCODE_FILE_ROOT = baseUrl.toString()
+
+		// Dev only: CSS import map tricks
+		setupCSSImportMaps<T>(configuration, baseUrl)
+
+		// ESM Import
+		try {
+			const result = await import(new URL(`${esModule}.js`, baseUrl).href)
+
+			if (developerDeveloperKeybindingsDisposable && removeDeveloperKeybindingsAfterLoad) {
+				developerDeveloperKeybindingsDisposable()
+			}
+
+			return { result, configuration }
+		} catch (error) {
+			onUnexpectedError(error, enableDeveloperKeybindings && !forceDisableShowDevtoolsOnError)
+
+			throw error
+		}
+	}
+
+	async function resolveWindowConfiguration<T extends ISandboxConfiguration>() {
+		const timeout = setTimeout(() => {
+			console.error(
+				`[resolve window config] Could not resolve window configuration within 10 seconds, but will continue to wait...`,
+			)
+		}, 10000)
+		performance.mark("code/willWaitForWindowConfig")
+
+		const configuration = (await preloadGlobals.context.resolveConfiguration()) as T
+		performance.mark("code/didWaitForWindowConfig")
+
+		clearTimeout(timeout)
+
+		return configuration
+	}
+
+	function setupDeveloperKeybindings<T extends ISandboxConfiguration>(configuration: T, options: ILoadOptions<T>) {
+		const {
+			forceEnableDeveloperKeybindings,
+			disallowReloadKeybinding,
+			removeDeveloperKeybindingsAfterLoad,
+			forceDisableShowDevtoolsOnError,
+		} =
+			typeof options?.configureDeveloperSettings === "function"
+				? options.configureDeveloperSettings(configuration)
+				: {
+						forceEnableDeveloperKeybindings: false,
+						disallowReloadKeybinding: false,
+						removeDeveloperKeybindingsAfterLoad: false,
+						forceDisableShowDevtoolsOnError: false,
+					}
+
+		const isDev = !!safeProcess.env["VSCODE_DEV"]
+		const enableDeveloperKeybindings = Boolean(isDev || forceEnableDeveloperKeybindings)
+		let developerDeveloperKeybindingsDisposable: Function | undefined = undefined
+		if (enableDeveloperKeybindings) {
+			developerDeveloperKeybindingsDisposable = registerDeveloperKeybindings(disallowReloadKeybinding)
+		}
+
+		return {
+			enableDeveloperKeybindings,
+			removeDeveloperKeybindingsAfterLoad,
+			developerDeveloperKeybindingsDisposable,
+			forceDisableShowDevtoolsOnError,
+		}
+	}
+
+	function registerDeveloperKeybindings(disallowReloadKeybinding: boolean | undefined): Function {
+		const ipcRenderer = preloadGlobals.ipcRenderer
+
+		const extractKey = function (e: KeyboardEvent) {
+			return [
+				e.ctrlKey ? "ctrl-" : "",
+				e.metaKey ? "meta-" : "",
+				e.altKey ? "alt-" : "",
+				e.shiftKey ? "shift-" : "",
+				e.keyCode,
+			].join("")
+		}
+
+		// Devtools & reload support
+		const TOGGLE_DEV_TOOLS_KB = safeProcess.platform === "darwin" ? "meta-alt-73" : "ctrl-shift-73" // mac: Cmd-Alt-I, rest: Ctrl-Shift-I
+		const TOGGLE_DEV_TOOLS_KB_ALT = "123" // F12
+		const RELOAD_KB = safeProcess.platform === "darwin" ? "meta-82" : "ctrl-82" // mac: Cmd-R, rest: Ctrl-R
+
+		let listener: ((e: KeyboardEvent) => void) | undefined = function (e) {
+			const key = extractKey(e)
+			if (key === TOGGLE_DEV_TOOLS_KB || key === TOGGLE_DEV_TOOLS_KB_ALT) {
+				ipcRenderer.send("vscode:toggleDevTools")
+			} else if (key === RELOAD_KB && !disallowReloadKeybinding) {
+				ipcRenderer.send("vscode:reloadWindow")
+			}
+		}
+
+		window.addEventListener("keydown", listener)
+
+		return function () {
+			if (listener) {
+				window.removeEventListener("keydown", listener)
+				listener = undefined
+			}
+		}
+	}
+
+	function setupNLS<T extends ISandboxConfiguration>(configuration: T): void {
+		globalThis._VSCODE_NLS_MESSAGES = configuration.nls.messages
+		globalThis._VSCODE_NLS_LANGUAGE = configuration.nls.language
+
+		let language = configuration.nls.language || "en"
+		if (language === "zh-tw") {
+			language = "zh-Hant"
+		} else if (language === "zh-cn") {
+			language = "zh-Hans"
+		}
+
+		window.document.documentElement.setAttribute("lang", language)
+	}
+
+	function onUnexpectedError(error: string | Error, showDevtoolsOnError: boolean): void {
+		if (showDevtoolsOnError) {
+			const ipcRenderer = preloadGlobals.ipcRenderer
+			ipcRenderer.send("vscode:openDevTools")
+		}
+
+		console.error(`[uncaught exception]: ${error}`)
+
+		if (error && typeof error !== "string" && error.stack) {
+			console.error(error.stack)
+		}
+	}
+
+	function fileUriFromPath(
+		path: string,
+		config: { isWindows?: boolean; scheme?: string; fallbackAuthority?: string },
+	): string {
+		// Since we are building a URI, we normalize any backslash
+		// to slashes and we ensure that the path begins with a '/'.
+		let pathName = path.replace(/\\/g, "/")
+		if (pathName.length > 0 && pathName.charAt(0) !== "/") {
+			pathName = `/${pathName}`
+		}
+
+		let uri: string
+
+		// Windows: in order to support UNC paths (which start with '//')
+		// that have their own authority, we do not use the provided authority
+		// but rather preserve it.
+		if (config.isWindows && pathName.startsWith("//")) {
+			uri = encodeURI(`${config.scheme || "file"}:${pathName}`)
+		}
+
+		// Otherwise we optionally add the provided authority if specified
+		else {
+			uri = encodeURI(`${config.scheme || "file"}://${config.fallbackAuthority || ""}${pathName}`)
+		}
+
+		return uri.replace(/#/g, "%23")
+	}
+
+	function setupCSSImportMaps<T extends ISandboxConfiguration>(configuration: T, baseUrl: URL) {
+		// DEV ---------------------------------------------------------------------------------------
+		// DEV: This is for development and enables loading CSS via import-statements via import-maps.
+		// DEV: For each CSS modules that we have we defined an entry in the import map that maps to
+		// DEV: a blob URL that loads the CSS via a dynamic @import-rule.
+		// DEV ---------------------------------------------------------------------------------------
+
+		if (Array.isArray(configuration.cssModules) && configuration.cssModules.length > 0) {
+			performance.mark("code/willAddCssLoader")
+
+			const style = document.createElement("style")
+			style.type = "text/css"
+			style.media = "screen"
+			style.id = "vscode-css-loading"
+			document.head.appendChild(style)
+
+			globalThis._VSCODE_CSS_LOAD = function (url) {
+				style.textContent += `@import url(${url});\n`
+			}
+
+			const importMap: { imports: Record<string, string> } = { imports: {} }
+			for (const cssModule of configuration.cssModules) {
+				const cssUrl = new URL(cssModule, baseUrl).href
+				const jsSrc = `globalThis._VSCODE_CSS_LOAD('${cssUrl}');\n`
+				const blob = new Blob([jsSrc], { type: "application/javascript" })
+				importMap.imports[cssUrl] = URL.createObjectURL(blob)
+			}
+
+			const ttp = window.trustedTypes?.createPolicy("vscode-bootstrapImportMap", {
+				createScript(value) {
+					return value
+				},
+			})
+			const importMapSrc = JSON.stringify(importMap, undefined, 2)
+			const importMapScript = document.createElement("script")
+			importMapScript.type = "importmap"
+			importMapScript.setAttribute("nonce", "0c6a828f1297")
+			// @ts-ignore
+			importMapScript.textContent = ttp?.createScript(importMapSrc) ?? importMapSrc
+			document.head.appendChild(importMapScript)
+
+			performance.mark("code/didAddCssLoader")
+		}
+	}
+
+	;(globalThis as any).MonacoBootstrapWindow = { load }
+})()
diff --git a/jetbrains/host/cli.ts b/jetbrains/host/cli.ts
new file mode 100644
index 000000000..e2b491fa9
--- /dev/null
+++ b/jetbrains/host/cli.ts
@@ -0,0 +1,36 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+import "./bootstrap-cli.js" // this MUST come before other imports as it changes global state
+import { dirname } from "path"
+import { fileURLToPath } from "url"
+import { configurePortable } from "./bootstrap-node.js"
+import { bootstrapESM } from "./bootstrap-esm.js"
+import { resolveNLSConfiguration } from "./deps/vscode/vs/base/node/nls.js"
+import { product } from "./bootstrap-meta.js"
+
+const __dirname = dirname(fileURLToPath(import.meta.url))
+
+// NLS
+const nlsConfiguration = await resolveNLSConfiguration({
+	userLocale: "en",
+	osLocale: "en",
+	commit: product.commit,
+	userDataPath: "",
+	nlsMetadataPath: __dirname,
+})
+process.env["VSCODE_NLS_CONFIG"] = JSON.stringify(nlsConfiguration) // required for `bootstrap-esm` to pick up NLS messages
+
+// Enable portable support
+configurePortable(product)
+
+// Signal processes that we got launched as CLI
+process.env["VSCODE_CLI"] = "1"
+
+// Bootstrap ESM
+await bootstrapESM()
+
+// Load Server
+await import("./deps/vscode/vs/code/node/cli.js")
diff --git a/jetbrains/host/electron.d.ts b/jetbrains/host/electron.d.ts
new file mode 100644
index 000000000..722568577
--- /dev/null
+++ b/jetbrains/host/electron.d.ts
@@ -0,0 +1,38 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+import { MessageEvent } from "electron"
+
+declare global {
+	interface Process {
+		/**
+		 * Electron's process.crash() method
+		 * This method is used to crash the process
+		 */
+		crash(): void
+
+		/**
+		 * Electron's IPC (Inter-Process Communication) port
+		 * Used for communication between renderer and main processes
+		 */
+		parentPort: {
+			/**
+			 * Register a listener for a specific channel
+			 */
+			on(channel: string, listener: (event: MessageEvent) => void): void
+
+			/**
+			 * Register a one-time listener for a specific channel
+			 */
+			once(channel: string, listener: (event: MessageEvent) => void): void
+
+			/**
+			 * Send a message to the parent process
+			 */
+			postMessage(message: any): void
+		}
+	}
+}
+
+export {}
diff --git a/jetbrains/host/eslint.config.mjs b/jetbrains/host/eslint.config.mjs
new file mode 100644
index 000000000..d9ae2c0ed
--- /dev/null
+++ b/jetbrains/host/eslint.config.mjs
@@ -0,0 +1,42 @@
+import { config } from "@roo-code/config-eslint/base"
+
+/** @type {import("eslint").Linter.Config} */
+export default [
+	...config,
+	{
+		rules: {
+			// TODO: These should be fixed and the rules re-enabled.
+			"no-regex-spaces": "off",
+			"no-useless-escape": "off",
+			"no-empty": "off",
+			"prefer-const": "off",
+			"prefer-rest-params": "off",
+			"no-var": "off",
+
+			"@typescript-eslint/no-unused-vars": "off",
+			"@typescript-eslint/no-explicit-any": "off",
+			"@typescript-eslint/no-require-imports": "off",
+			"@typescript-eslint/ban-ts-comment": "off",
+			"@typescript-eslint/no-unsafe-function-type": "off",
+			"@typescript-eslint/no-unnecessary-type-constraint": "off",
+			"@typescript-eslint/no-misused-new": "off",
+			"@typescript-eslint/no-empty-object-type": "off",
+		},
+	},
+	{
+		files: ["__mocks__/**/*.js"],
+		rules: {
+			"no-undef": "off",
+		},
+	},
+	{
+		files: ["**/__test_cases__/**/*"],
+		rules: {
+			"no-undef": "off",
+			"no-const-assign": "off",
+		},
+	},
+	{
+		ignores: ["dist", "deps"],
+	},
+]
\ No newline at end of file
diff --git a/jetbrains/host/extension.ts b/jetbrains/host/extension.ts
new file mode 100644
index 000000000..7180e575d
--- /dev/null
+++ b/jetbrains/host/extension.ts
@@ -0,0 +1,142 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+import net from "net"
+
+// Save original process methods
+const originalProcessOn = process.on
+const originalProcessSend = process.send || (() => false)
+
+// Store message event handlers
+const messageHandlers: ((message: any, socket?: net.Socket) => void)[] = []
+
+// Reconnection related variables
+let isReconnecting = false
+let reconnectAttempts = 0
+const MAX_RECONNECT_ATTEMPTS = 5
+const RECONNECT_DELAY = 1000 // 1 second
+
+// Override process.on
+process.on = function (event: string, listener: (...args: any[]) => void): any {
+	if (event === "message") {
+		messageHandlers.push((message: any, socket?: net.Socket) => {
+			// Check the number of parameters for listener
+			const paramCount = listener.length
+			if (paramCount === 1) {
+				// If only one parameter, pass only message
+				listener(message)
+			} else {
+				// If multiple parameters, pass message and socket
+				listener(message, socket)
+			}
+		})
+	}
+	return originalProcessOn.call(process, event, listener)
+}
+
+// Override process.send
+process.send = function (message: any): boolean {
+	if (message?.type === "VSCODE_EXTHOST_IPC_READY") {
+		console.log("Extension host process is ready to receive socket")
+		connect()
+	}
+
+	// Call original process.send
+	return originalProcessSend.call(process, message)
+}
+
+// Establish socket connection
+function connect() {
+	if (isReconnecting) {
+		console.log("Already in reconnection process, skipping")
+		return
+	}
+
+	try {
+		// Get socket server information from environment variables
+		const host = process.env.VSCODE_EXTHOST_SOCKET_HOST || "127.0.0.1"
+		const port = parseInt(process.env.VSCODE_EXTHOST_SOCKET_PORT || "0", 10)
+
+		if (!port) {
+			throw new Error("Invalid socket port")
+		}
+
+		console.log(`Attempting to connect to ${host}:${port}`)
+
+		// Establish socket connection
+		const socket = net.createConnection(port, host)
+		// Set socket noDelay option
+		socket.setNoDelay(true)
+
+		socket.on("connect", () => {
+			console.log("Connected to main server")
+			isReconnecting = false
+			reconnectAttempts = 0
+
+			// Prepare message to send to VSCode module
+			const socketMessage = {
+				type: "VSCODE_EXTHOST_IPC_SOCKET",
+				initialDataChunk: "",
+				skipWebSocketFrames: true,
+				permessageDeflate: false,
+				inflateBytes: "",
+			}
+
+			// Call all saved message handlers
+			messageHandlers.forEach((handler) => {
+				try {
+					handler(socketMessage, socket)
+				} catch (error) {
+					console.error("Error in message handler:", error)
+				}
+			})
+		})
+
+		socket.on("error", (error: Error) => {
+			console.error("Socket connection error:", error)
+			handleDisconnect()
+		})
+
+		socket.on("close", () => {
+			console.log("Socket connection closed")
+			handleDisconnect()
+		})
+	} catch (error) {
+		console.error("Connection error:", error)
+		handleDisconnect()
+	}
+}
+
+// Handle disconnection
+async function handleDisconnect() {
+	if (isReconnecting) {
+		console.log("Already in reconnection process, skipping")
+		return
+	}
+
+	isReconnecting = true
+	reconnectAttempts++
+
+	if (reconnectAttempts > MAX_RECONNECT_ATTEMPTS) {
+		console.error("Max reconnection attempts reached. Giving up.")
+		isReconnecting = false
+		return
+	}
+
+	console.log(`Attempting to reconnect (attempt ${reconnectAttempts}/${MAX_RECONNECT_ATTEMPTS})...`)
+
+	// Wait for a while before retrying
+	console.log(`Waiting ${RECONNECT_DELAY}ms before reconnecting...`)
+	await new Promise((resolve) => setTimeout(resolve, RECONNECT_DELAY))
+	console.log("Reconnection delay finished, attempting to connect...")
+	connect()
+}
+
+console.log("Starting extension host process...")
+
+import start from "./deps/vscode/vs/workbench/api/node/extensionHostProcess.js"
+
+// This line will trigger extension host related logic startup, actual logic is in extensionHostProcess,
+// Do not handle specific plugin business logic in subsequent content of this file
+start()
diff --git a/jetbrains/host/package.json b/jetbrains/host/package.json
new file mode 100644
index 000000000..7790c58a5
--- /dev/null
+++ b/jetbrains/host/package.json
@@ -0,0 +1,178 @@
+{
+	"name": "@kilo-code/jetbrains-host",
+	"license": "Apache-2.0",
+	"type": "module",
+	"scripts": {
+		"deps:check": "node ../../jetbrains/scripts/check-dependencies.js",
+		"deps:patch": "npm run deps:check && cd ../../deps/vscode && git reset --hard HEAD && git clean -fd && git apply ../patches/vscode/jetbrains.patch",
+		"deps:clean": "rm -rf ./deps/vscode/* || true",
+		"deps:copy": "npm run deps:check && npx cpy '../../deps/vscode/src/**' './deps/vscode' --parents",
+		"clean": "del-cli ./dist",
+		"build": "tsc",
+		"build:clean": "npm run clean && npm run build",
+		"start": "node ./dist/src/main.js",
+		"dev": "tsc && node ./dist/src/main.js",
+		"watch:tsc": "tsc --watch",
+		"watch": "tsc --watch",
+		"bundle:package": "cp ./package.json ./dist/package.json",
+		"bundle:build": "tsc --noEmit && tsup",
+		"lint": "eslint . --ext=ts --max-warnings=0"
+	},
+	"dependencies": {
+		"@c4312/eventsource-umd": "^3.0.5",
+		"@microsoft/1ds-core-js": "^3.2.13",
+		"@microsoft/1ds-post-js": "^3.2.13",
+		"@parcel/watcher": "2.5.1",
+		"@types/semver": "^7.5.8",
+		"@vscode/deviceid": "^0.1.1",
+		"@vscode/iconv-lite-umd": "0.7.0",
+		"@vscode/policy-watcher": "^1.3.2",
+		"@vscode/proxy-agent": "^0.32.0",
+		"@vscode/ripgrep": "^1.15.11",
+		"@vscode/spdlog": "^0.15.0",
+		"@vscode/sqlite3": "5.1.8-vscode",
+		"@vscode/sudo-prompt": "9.3.1",
+		"@vscode/tree-sitter-wasm": "^0.1.4",
+		"@vscode/vscode-languagedetection": "1.0.21",
+		"@vscode/windows-mutex": "^0.5.0",
+		"@vscode/windows-process-tree": "^0.6.0",
+		"@vscode/windows-registry": "^1.1.0",
+		"@xterm/addon-clipboard": "^0.2.0-beta.82",
+		"@xterm/addon-image": "^0.9.0-beta.99",
+		"@xterm/addon-ligatures": "^0.10.0-beta.99",
+		"@xterm/addon-progress": "^0.2.0-beta.5",
+		"@xterm/addon-search": "^0.16.0-beta.99",
+		"@xterm/addon-serialize": "^0.14.0-beta.99",
+		"@xterm/addon-unicode11": "^0.9.0-beta.99",
+		"@xterm/addon-webgl": "^0.19.0-beta.99",
+		"@xterm/headless": "^5.6.0-beta.99",
+		"@xterm/xterm": "^5.6.0-beta.99",
+		"all": "^0.0.0",
+		"debug": "^4.4.1",
+		"http-proxy-agent": "^7.0.0",
+		"https-proxy-agent": "^7.0.2",
+		"jschardet": "3.1.4",
+		"kerberos": "2.1.1",
+		"minimist": "^1.2.6",
+		"native-is-elevated": "0.7.0",
+		"native-keymap": "^3.3.5",
+		"native-watchdog": "^1.4.1",
+		"node-pty": "^1.1.0-beta33",
+		"open": "^8.4.2",
+		"tas-client-umd": "0.2.0",
+		"undici": "^7.13.0",
+		"undici-types": "^7.15.0",
+		"v8-inspect-profiler": "^0.1.1",
+		"vscode-oniguruma": "1.7.0",
+		"vscode-regexpp": "^3.1.0",
+		"vscode-textmate": "9.2.0",
+		"yauzl": "^3.0.0",
+		"yazl": "^2.4.3"
+	},
+	"devDependencies": {
+		"@roo-code/config-eslint": "file:../../packages/config-eslint",
+		"@playwright/test": "^1.50.0",
+		"@types/cookie": "^0.3.3",
+		"@types/debug": "^4.1.5",
+		"@types/gulp-svgmin": "^1.2.1",
+		"@types/http-proxy-agent": "^2.0.1",
+		"@types/kerberos": "^1.1.2",
+		"@types/minimist": "^1.2.1",
+		"@types/mocha": "^9.1.1",
+		"@types/node": "20.x",
+		"@types/sinon": "^10.0.2",
+		"@types/sinon-test": "^2.4.2",
+		"@types/trusted-types": "^1.0.6",
+		"@types/vscode-notebook-renderer": "^1.72.0",
+		"@types/webpack": "^5.28.5",
+		"@types/wicg-file-system-access": "^2020.9.6",
+		"@types/windows-foreground-love": "^0.3.0",
+		"@types/winreg": "^1.2.30",
+		"@types/yauzl": "^2.10.0",
+		"@types/yazl": "^2.4.2",
+		"@vscode/gulp-electron": "^1.36.0",
+		"@vscode/l10n-dev": "0.0.35",
+		"@vscode/telemetry-extractor": "^1.10.2",
+		"@vscode/test-cli": "^0.0.6",
+		"@vscode/test-electron": "^2.4.0",
+		"@vscode/test-web": "^0.0.62",
+		"@vscode/v8-heap-parser": "^0.1.0",
+		"@vscode/vscode-perf": "^0.0.19",
+		"@webgpu/types": "^0.1.44",
+		"ansi-colors": "^3.2.3",
+		"asar": "^3.0.3",
+		"chromium-pickle-js": "^0.2.0",
+		"cookie": "^0.7.2",
+		"copy-webpack-plugin": "^11.0.0",
+		"css-loader": "^6.9.1",
+		"cssnano": "^6.0.3",
+		"debounce": "^1.0.0",
+		"deemon": "^1.11.0",
+		"electron": "34.4.1",
+		"event-stream": "3.3.4",
+		"fancy-log": "^1.3.3",
+		"file-loader": "^6.2.0",
+		"cpy-cli": "^5.0.0",
+		"glob": "^7.2.3",
+		"gulp": "^4.0.0",
+		"gulp-azure-storage": "^0.12.1",
+		"gulp-bom": "^3.0.0",
+		"gulp-buffer": "0.0.2",
+		"gulp-filter": "^5.1.0",
+		"gulp-flatmap": "^1.0.2",
+		"gulp-gunzip": "^1.0.0",
+		"gulp-gzip": "^1.4.2",
+		"gulp-json-editor": "^2.5.0",
+		"gulp-plumber": "^1.2.0",
+		"gulp-rename": "^1.2.0",
+		"gulp-replace": "^0.5.4",
+		"gulp-sourcemaps": "^3.0.0",
+		"gulp-svgmin": "^4.1.0",
+		"gulp-untar": "^0.0.7",
+		"husky": "^0.13.1",
+		"innosetup": "^6.4.1",
+		"istanbul-lib-coverage": "^3.2.0",
+		"istanbul-lib-instrument": "^6.0.1",
+		"istanbul-lib-report": "^3.0.0",
+		"istanbul-lib-source-maps": "^4.0.1",
+		"istanbul-reports": "^3.1.5",
+		"lazy.js": "^0.4.2",
+		"merge-options": "^1.0.1",
+		"mime": "^1.4.1",
+		"minimatch": "^3.0.4",
+		"minimist": "^1.2.6",
+		"mocha": "^10.8.2",
+		"mocha-junit-reporter": "^2.2.1",
+		"mocha-multi-reporters": "^1.5.1",
+		"npm-run-all": "^4.1.5",
+		"os-browserify": "^0.3.0",
+		"p-all": "^1.0.0",
+		"path-browserify": "^1.0.1",
+		"postcss": "^8.4.33",
+		"postcss-nesting": "^12.0.2",
+		"pump": "^1.0.1",
+		"rcedit": "^1.1.0",
+		"del-cli": "^5.1.0",
+		"sinon": "^12.0.1",
+		"sinon-test": "^3.1.3",
+		"source-map": "0.6.1",
+		"source-map-support": "^0.3.2",
+		"style-loader": "^3.3.2",
+		"ts-loader": "^9.5.1",
+		"ts-node": "^10.9.1",
+		"tslib": "^2.6.3",
+		"tsup": "^8.5.0",
+		"util": "^0.12.4",
+		"webpack": "^5.94.0",
+		"webpack-cli": "^5.1.4",
+		"webpack-stream": "^7.0.0",
+		"xml2js": "^0.5.0",
+		"yaserver": "^0.4.0"
+	},
+	"overrides": {
+		"node-gyp-build": "4.8.1",
+		"kerberos@2.1.1": {
+			"node-addon-api": "7.1.0"
+		}
+	}
+}
diff --git a/jetbrains/host/pnpm-lock.yaml b/jetbrains/host/pnpm-lock.yaml
new file mode 100644
index 000000000..2506d03fa
--- /dev/null
+++ b/jetbrains/host/pnpm-lock.yaml
@@ -0,0 +1,12318 @@
+lockfileVersion: '9.0'
+
+settings:
+  autoInstallPeers: true
+  excludeLinksFromLockfile: false
+
+importers:
+
+  .:
+    dependencies:
+      '@c4312/eventsource-umd':
+        specifier: ^3.0.5
+        version: 3.0.5
+      '@microsoft/1ds-core-js':
+        specifier: ^3.2.13
+        version: 3.2.18(tslib@2.8.1)
+      '@microsoft/1ds-post-js':
+        specifier: ^3.2.13
+        version: 3.2.18(tslib@2.8.1)
+      '@parcel/watcher':
+        specifier: 2.5.1
+        version: 2.5.1
+      '@types/semver':
+        specifier: ^7.5.8
+        version: 7.7.0
+      '@vscode/deviceid':
+        specifier: ^0.1.1
+        version: 0.1.2
+      '@vscode/iconv-lite-umd':
+        specifier: 0.7.0
+        version: 0.7.0
+      '@vscode/policy-watcher':
+        specifier: ^1.3.2
+        version: 1.3.2
+      '@vscode/proxy-agent':
+        specifier: ^0.32.0
+        version: 0.32.0
+      '@vscode/ripgrep':
+        specifier: ^1.15.11
+        version: 1.15.14
+      '@vscode/spdlog':
+        specifier: ^0.15.0
+        version: 0.15.2
+      '@vscode/sqlite3':
+        specifier: 5.1.8-vscode
+        version: 5.1.8-vscode
+      '@vscode/sudo-prompt':
+        specifier: 9.3.1
+        version: 9.3.1
+      '@vscode/tree-sitter-wasm':
+        specifier: ^0.1.4
+        version: 0.1.4
+      '@vscode/vscode-languagedetection':
+        specifier: 1.0.21
+        version: 1.0.21
+      '@vscode/windows-mutex':
+        specifier: ^0.5.0
+        version: 0.5.0
+      '@vscode/windows-process-tree':
+        specifier: ^0.6.0
+        version: 0.6.0
+      '@vscode/windows-registry':
+        specifier: ^1.1.0
+        version: 1.1.0
+      '@xterm/addon-clipboard':
+        specifier: ^0.2.0-beta.82
+        version: 0.2.0-beta.97(@xterm/xterm@5.6.0-beta.114)
+      '@xterm/addon-image':
+        specifier: ^0.9.0-beta.99
+        version: 0.9.0-beta.114(@xterm/xterm@5.6.0-beta.114)
+      '@xterm/addon-ligatures':
+        specifier: ^0.10.0-beta.99
+        version: 0.10.0-beta.114(@xterm/xterm@5.6.0-beta.114)
+      '@xterm/addon-progress':
+        specifier: ^0.2.0-beta.5
+        version: 0.2.0-beta.20(@xterm/xterm@5.6.0-beta.114)
+      '@xterm/addon-search':
+        specifier: ^0.16.0-beta.99
+        version: 0.16.0-beta.114(@xterm/xterm@5.6.0-beta.114)
+      '@xterm/addon-serialize':
+        specifier: ^0.14.0-beta.99
+        version: 0.14.0-beta.114(@xterm/xterm@5.6.0-beta.114)
+      '@xterm/addon-unicode11':
+        specifier: ^0.9.0-beta.99
+        version: 0.9.0-beta.114(@xterm/xterm@5.6.0-beta.114)
+      '@xterm/addon-webgl':
+        specifier: ^0.19.0-beta.99
+        version: 0.19.0-beta.114(@xterm/xterm@5.6.0-beta.114)
+      '@xterm/headless':
+        specifier: ^5.6.0-beta.99
+        version: 5.6.0-beta.114
+      '@xterm/xterm':
+        specifier: ^5.6.0-beta.99
+        version: 5.6.0-beta.114
+      all:
+        specifier: ^0.0.0
+        version: 0.0.0
+      http-proxy-agent:
+        specifier: ^7.0.0
+        version: 7.0.2
+      https-proxy-agent:
+        specifier: ^7.0.2
+        version: 7.0.6
+      jschardet:
+        specifier: 3.1.4
+        version: 3.1.4
+      kerberos:
+        specifier: 2.1.1
+        version: 2.1.1
+      minimist:
+        specifier: ^1.2.6
+        version: 1.2.8
+      native-is-elevated:
+        specifier: 0.7.0
+        version: 0.7.0
+      native-keymap:
+        specifier: ^3.3.5
+        version: 3.3.5
+      native-watchdog:
+        specifier: ^1.4.1
+        version: 1.4.2
+      node-pty:
+        specifier: ^1.1.0-beta33
+        version: 1.1.0-beta9
+      open:
+        specifier: ^8.4.2
+        version: 8.4.2
+      tas-client-umd:
+        specifier: 0.2.0
+        version: 0.2.0
+      v8-inspect-profiler:
+        specifier: ^0.1.1
+        version: 0.1.1
+      vscode-oniguruma:
+        specifier: 1.7.0
+        version: 1.7.0
+      vscode-regexpp:
+        specifier: ^3.1.0
+        version: 3.1.0
+      vscode-textmate:
+        specifier: 9.2.0
+        version: 9.2.0
+      yauzl:
+        specifier: ^3.0.0
+        version: 3.2.0
+      yazl:
+        specifier: ^2.4.3
+        version: 2.5.1
+    devDependencies:
+      '@playwright/test':
+        specifier: ^1.50.0
+        version: 1.54.1
+      '@types/cookie':
+        specifier: ^0.3.3
+        version: 0.3.3
+      '@types/debug':
+        specifier: ^4.1.5
+        version: 4.1.12
+      '@types/gulp-svgmin':
+        specifier: ^1.2.1
+        version: 1.2.4
+      '@types/http-proxy-agent':
+        specifier: ^2.0.1
+        version: 2.0.2
+      '@types/kerberos':
+        specifier: ^1.1.2
+        version: 1.1.5
+      '@types/minimist':
+        specifier: ^1.2.1
+        version: 1.2.5
+      '@types/mocha':
+        specifier: ^9.1.1
+        version: 9.1.1
+      '@types/node':
+        specifier: 20.x
+        version: 20.19.9
+      '@types/sinon':
+        specifier: ^10.0.2
+        version: 10.0.20
+      '@types/sinon-test':
+        specifier: ^2.4.2
+        version: 2.4.6
+      '@types/trusted-types':
+        specifier: ^1.0.6
+        version: 1.0.6
+      '@types/vscode-notebook-renderer':
+        specifier: ^1.72.0
+        version: 1.72.3
+      '@types/webpack':
+        specifier: ^5.28.5
+        version: 5.28.5(esbuild@0.25.8)(webpack-cli@5.1.4)
+      '@types/wicg-file-system-access':
+        specifier: ^2020.9.6
+        version: 2020.9.8
+      '@types/windows-foreground-love':
+        specifier: ^0.3.0
+        version: 0.3.1
+      '@types/winreg':
+        specifier: ^1.2.30
+        version: 1.2.36
+      '@types/yauzl':
+        specifier: ^2.10.0
+        version: 2.10.3
+      '@types/yazl':
+        specifier: ^2.4.2
+        version: 2.4.6
+      '@vscode/gulp-electron':
+        specifier: ^1.36.0
+        version: 1.38.1
+      '@vscode/l10n-dev':
+        specifier: 0.0.35
+        version: 0.0.35
+      '@vscode/telemetry-extractor':
+        specifier: ^1.10.2
+        version: 1.17.0
+      '@vscode/test-cli':
+        specifier: ^0.0.6
+        version: 0.0.6
+      '@vscode/test-electron':
+        specifier: ^2.4.0
+        version: 2.5.2
+      '@vscode/test-web':
+        specifier: ^0.0.62
+        version: 0.0.62
+      '@vscode/v8-heap-parser':
+        specifier: ^0.1.0
+        version: 0.1.0
+      '@vscode/vscode-perf':
+        specifier: ^0.0.19
+        version: 0.0.19
+      '@webgpu/types':
+        specifier: ^0.1.44
+        version: 0.1.64
+      ansi-colors:
+        specifier: ^3.2.3
+        version: 3.2.4
+      asar:
+        specifier: ^3.0.3
+        version: 3.2.0
+      chromium-pickle-js:
+        specifier: ^0.2.0
+        version: 0.2.0
+      cookie:
+        specifier: ^0.7.2
+        version: 0.7.2
+      copy-webpack-plugin:
+        specifier: ^11.0.0
+        version: 11.0.0(webpack@5.100.2)
+      css-loader:
+        specifier: ^6.9.1
+        version: 6.11.0(webpack@5.100.2)
+      cssnano:
+        specifier: ^6.0.3
+        version: 6.1.2(postcss@8.5.6)
+      debounce:
+        specifier: ^1.0.0
+        version: 1.2.1
+      deemon:
+        specifier: ^1.11.0
+        version: 1.13.5
+      electron:
+        specifier: 34.4.1
+        version: 34.4.1
+      event-stream:
+        specifier: 3.3.4
+        version: 3.3.4
+      fancy-log:
+        specifier: ^1.3.3
+        version: 1.3.3
+      file-loader:
+        specifier: ^6.2.0
+        version: 6.2.0(webpack@5.100.2)
+      glob:
+        specifier: ^5.0.13
+        version: 5.0.15
+      gulp:
+        specifier: ^4.0.0
+        version: 4.0.2
+      gulp-azure-storage:
+        specifier: ^0.12.1
+        version: 0.12.1
+      gulp-bom:
+        specifier: ^3.0.0
+        version: 3.0.0(gulp@4.0.2)
+      gulp-buffer:
+        specifier: 0.0.2
+        version: 0.0.2
+      gulp-filter:
+        specifier: ^5.1.0
+        version: 5.1.0
+      gulp-flatmap:
+        specifier: ^1.0.2
+        version: 1.0.2
+      gulp-gunzip:
+        specifier: ^1.0.0
+        version: 1.1.0
+      gulp-gzip:
+        specifier: ^1.4.2
+        version: 1.4.2
+      gulp-json-editor:
+        specifier: ^2.5.0
+        version: 2.6.0
+      gulp-plumber:
+        specifier: ^1.2.0
+        version: 1.2.1
+      gulp-rename:
+        specifier: ^1.2.0
+        version: 1.4.0
+      gulp-replace:
+        specifier: ^0.5.4
+        version: 0.5.4
+      gulp-sourcemaps:
+        specifier: ^3.0.0
+        version: 3.0.0
+      gulp-svgmin:
+        specifier: ^4.1.0
+        version: 4.1.0
+      gulp-untar:
+        specifier: ^0.0.7
+        version: 0.0.7
+      husky:
+        specifier: ^0.13.1
+        version: 0.13.4
+      innosetup:
+        specifier: ^6.4.1
+        version: 6.4.1
+      istanbul-lib-coverage:
+        specifier: ^3.2.0
+        version: 3.2.2
+      istanbul-lib-instrument:
+        specifier: ^6.0.1
+        version: 6.0.3
+      istanbul-lib-report:
+        specifier: ^3.0.0
+        version: 3.0.1
+      istanbul-lib-source-maps:
+        specifier: ^4.0.1
+        version: 4.0.1
+      istanbul-reports:
+        specifier: ^3.1.5
+        version: 3.1.7
+      lazy.js:
+        specifier: ^0.4.2
+        version: 0.4.3
+      merge-options:
+        specifier: ^1.0.1
+        version: 1.0.1
+      mime:
+        specifier: ^1.4.1
+        version: 1.6.0
+      minimatch:
+        specifier: ^3.0.4
+        version: 3.1.2
+      mocha:
+        specifier: ^10.8.2
+        version: 10.8.2
+      mocha-junit-reporter:
+        specifier: ^2.2.1
+        version: 2.2.1(mocha@10.8.2)
+      mocha-multi-reporters:
+        specifier: ^1.5.1
+        version: 1.5.1(mocha@10.8.2)
+      npm-run-all:
+        specifier: ^4.1.5
+        version: 4.1.5
+      os-browserify:
+        specifier: ^0.3.0
+        version: 0.3.0
+      p-all:
+        specifier: ^1.0.0
+        version: 1.0.0
+      path-browserify:
+        specifier: ^1.0.1
+        version: 1.0.1
+      postcss:
+        specifier: ^8.4.33
+        version: 8.5.6
+      postcss-nesting:
+        specifier: ^12.0.2
+        version: 12.1.5(postcss@8.5.6)
+      pump:
+        specifier: ^1.0.1
+        version: 1.0.3
+      rcedit:
+        specifier: ^1.1.0
+        version: 1.1.2
+      rimraf:
+        specifier: ^2.2.8
+        version: 2.7.1
+      sinon:
+        specifier: ^12.0.1
+        version: 12.0.1
+      sinon-test:
+        specifier: ^3.1.3
+        version: 3.1.6(sinon@12.0.1)
+      source-map:
+        specifier: 0.6.1
+        version: 0.6.1
+      source-map-support:
+        specifier: ^0.3.2
+        version: 0.3.3
+      style-loader:
+        specifier: ^3.3.2
+        version: 3.3.4(webpack@5.100.2)
+      ts-loader:
+        specifier: ^9.5.1
+        version: 9.5.2(typescript@4.9.5)(webpack@5.100.2)
+      ts-node:
+        specifier: ^10.9.1
+        version: 10.9.2(@types/node@20.19.9)(typescript@4.9.5)
+      tslib:
+        specifier: ^2.6.3
+        version: 2.8.1
+      tsup:
+        specifier: ^8.5.0
+        version: 8.5.0(postcss@8.5.6)(typescript@4.9.5)
+      util:
+        specifier: ^0.12.4
+        version: 0.12.5
+      webpack:
+        specifier: ^5.94.0
+        version: 5.100.2(esbuild@0.25.8)(webpack-cli@5.1.4)
+      webpack-cli:
+        specifier: ^5.1.4
+        version: 5.1.4(webpack@5.100.2)
+      webpack-stream:
+        specifier: ^7.0.0
+        version: 7.0.0(webpack@5.100.2)
+      xml2js:
+        specifier: ^0.5.0
+        version: 0.5.0
+      yaserver:
+        specifier: ^0.4.0
+        version: 0.4.0
+
+packages:
+
+  '@ampproject/remapping@2.3.0':
+    resolution: {integrity: sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==}
+    engines: {node: '>=6.0.0'}
+
+  '@azure-rest/ai-translation-text@1.0.1':
+    resolution: {integrity: sha512-lUs1FfBXjik6EReUEYP1ogkhaSPHZdUV+EB215y7uejuyHgG1RXD2aLsqXQrluZwXcLMdN+bTzxylKBc5xDhgQ==}
+    engines: {node: '>=18.0.0'}
+
+  '@azure-rest/core-client@2.5.0':
+    resolution: {integrity: sha512-KMVIPxG6ygcQ1M2hKHahF7eddKejYsWTjoLIfTWiqnaj42dBkYzj4+S8rK9xxmlOaEHKZHcMrRbm0NfN4kgwHw==}
+    engines: {node: '>=20.0.0'}
+
+  '@azure/abort-controller@2.1.2':
+    resolution: {integrity: sha512-nBrLsEWm4J2u5LpAPjxADTlq3trDgVZZXHNKabeXZtpq3d3AbN/KGO82R87rdDz5/lYB024rtEf10/q0urNgsA==}
+    engines: {node: '>=18.0.0'}
+
+  '@azure/core-auth@1.10.0':
+    resolution: {integrity: sha512-88Djs5vBvGbHQHf5ZZcaoNHo6Y8BKZkt3cw2iuJIQzLEgH4Ox6Tm4hjFhbqOxyYsgIG/eJbFEHpxRIfEEWv5Ow==}
+    engines: {node: '>=20.0.0'}
+
+  '@azure/core-client@1.10.0':
+    resolution: {integrity: sha512-O4aP3CLFNodg8eTHXECaH3B3CjicfzkxVtnrfLkOq0XNP7TIECGfHpK/C6vADZkWP75wzmdBnsIA8ksuJMk18g==}
+    engines: {node: '>=20.0.0'}
+
+  '@azure/core-http-compat@2.3.0':
+    resolution: {integrity: sha512-qLQujmUypBBG0gxHd0j6/Jdmul6ttl24c8WGiLXIk7IHXdBlfoBqW27hyz3Xn6xbfdyVSarl1Ttbk0AwnZBYCw==}
+    engines: {node: '>=18.0.0'}
+
+  '@azure/core-lro@2.7.2':
+    resolution: {integrity: sha512-0YIpccoX8m/k00O7mDDMdJpbr6mf1yWo2dfmxt5A8XVZVVMz2SSKaEbMCeJRvgQ0IaSlqhjT47p4hVIRRy90xw==}
+    engines: {node: '>=18.0.0'}
+
+  '@azure/core-paging@1.6.2':
+    resolution: {integrity: sha512-YKWi9YuCU04B55h25cnOYZHxXYtEvQEbKST5vqRga7hWY9ydd3FZHdeQF8pyh+acWZvppw13M/LMGx0LABUVMA==}
+    engines: {node: '>=18.0.0'}
+
+  '@azure/core-rest-pipeline@1.22.0':
+    resolution: {integrity: sha512-OKHmb3/Kpm06HypvB3g6Q3zJuvyXcpxDpCS1PnU8OV6AJgSFaee/covXBcPbWc6XDDxtEPlbi3EMQ6nUiPaQtw==}
+    engines: {node: '>=20.0.0'}
+
+  '@azure/core-tracing@1.3.0':
+    resolution: {integrity: sha512-+XvmZLLWPe67WXNZo9Oc9CrPj/Tm8QnHR92fFAFdnbzwNdCH1h+7UdpaQgRSBsMY+oW1kHXNUZQLdZ1gHX3ROw==}
+    engines: {node: '>=20.0.0'}
+
+  '@azure/core-util@1.13.0':
+    resolution: {integrity: sha512-o0psW8QWQ58fq3i24Q1K2XfS/jYTxr7O1HRcyUE9bV9NttLU+kYOH82Ixj8DGlMTOWgxm1Sss2QAfKK5UkSPxw==}
+    engines: {node: '>=20.0.0'}
+
+  '@azure/core-xml@1.5.0':
+    resolution: {integrity: sha512-D/sdlJBMJfx7gqoj66PKVmhDDaU6TKA49ptcolxdas29X7AfvLTmfAGLjAcIMBK7UZ2o4lygHIqVckOlQU3xWw==}
+    engines: {node: '>=20.0.0'}
+
+  '@azure/logger@1.3.0':
+    resolution: {integrity: sha512-fCqPIfOcLE+CGqGPd66c8bZpwAji98tZ4JI9i/mlTNTlsIWslCfpg48s/ypyLxZTump5sypjrKn2/kY7q8oAbA==}
+    engines: {node: '>=20.0.0'}
+
+  '@azure/storage-blob@12.28.0':
+    resolution: {integrity: sha512-VhQHITXXO03SURhDiGuHhvc/k/sD2WvJUS7hqhiVNbErVCuQoLtWql7r97fleBlIRKHJaa9R7DpBjfE0pfLYcA==}
+    engines: {node: '>=20.0.0'}
+
+  '@azure/storage-common@12.0.0':
+    resolution: {integrity: sha512-QyEWXgi4kdRo0wc1rHum9/KnaWZKCdQGZK1BjU4fFL6Jtedp7KLbQihgTTVxldFy1z1ZPtuDPx8mQ5l3huPPbA==}
+    engines: {node: '>=20.0.0'}
+
+  '@babel/code-frame@7.27.1':
+    resolution: {integrity: sha512-cjQ7ZlQ0Mv3b47hABuTevyTuYN4i+loJKGeV9flcCgIK37cCXRh+L1bd3iBHlynerhQ7BhCkn2BPbQUL+rGqFg==}
+    engines: {node: '>=6.9.0'}
+
+  '@babel/compat-data@7.28.0':
+    resolution: {integrity: sha512-60X7qkglvrap8mn1lh2ebxXdZYtUcpd7gsmy9kLaBJ4i/WdY8PqTSdxyA8qraikqKQK5C1KRBKXqznrVapyNaw==}
+    engines: {node: '>=6.9.0'}
+
+  '@babel/core@7.28.0':
+    resolution: {integrity: sha512-UlLAnTPrFdNGoFtbSXwcGFQBtQZJCNjaN6hQNP3UPvuNXT1i82N26KL3dZeIpNalWywr9IuQuncaAfUaS1g6sQ==}
+    engines: {node: '>=6.9.0'}
+
+  '@babel/generator@7.28.0':
+    resolution: {integrity: sha512-lJjzvrbEeWrhB4P3QBsH7tey117PjLZnDbLiQEKjQ/fNJTjuq4HSqgFA+UNSwZT8D7dxxbnuSBMsa1lrWzKlQg==}
+    engines: {node: '>=6.9.0'}
+
+  '@babel/helper-compilation-targets@7.27.2':
+    resolution: {integrity: sha512-2+1thGUUWWjLTYTHZWK1n8Yga0ijBz1XAhUXcKy81rd5g6yh7hGqMp45v7cadSbEHc9G3OTv45SyneRN3ps4DQ==}
+    engines: {node: '>=6.9.0'}
+
+  '@babel/helper-globals@7.28.0':
+    resolution: {integrity: sha512-+W6cISkXFa1jXsDEdYA8HeevQT/FULhxzR99pxphltZcVaugps53THCeiWA8SguxxpSp3gKPiuYfSWopkLQ4hw==}
+    engines: {node: '>=6.9.0'}
+
+  '@babel/helper-module-imports@7.27.1':
+    resolution: {integrity: sha512-0gSFWUPNXNopqtIPQvlD5WgXYI5GY2kP2cCvoT8kczjbfcfuIljTbcWrulD1CIPIX2gt1wghbDy08yE1p+/r3w==}
+    engines: {node: '>=6.9.0'}
+
+  '@babel/helper-module-transforms@7.27.3':
+    resolution: {integrity: sha512-dSOvYwvyLsWBeIRyOeHXp5vPj5l1I011r52FM1+r1jCERv+aFXYk4whgQccYEGYxK2H3ZAIA8nuPkQ0HaUo3qg==}
+    engines: {node: '>=6.9.0'}
+    peerDependencies:
+      '@babel/core': ^7.0.0
+
+  '@babel/helper-string-parser@7.27.1':
+    resolution: {integrity: sha512-qMlSxKbpRlAridDExk92nSobyDdpPijUq2DW6oDnUqd0iOGxmQjyqhMIihI9+zv4LPyZdRje2cavWPbCbWm3eA==}
+    engines: {node: '>=6.9.0'}
+
+  '@babel/helper-validator-identifier@7.27.1':
+    resolution: {integrity: sha512-D2hP9eA+Sqx1kBZgzxZh0y1trbuU+JoDkiEwqhQ36nodYqJwyEIhPSdMNd7lOm/4io72luTPWH20Yda0xOuUow==}
+    engines: {node: '>=6.9.0'}
+
+  '@babel/helper-validator-option@7.27.1':
+    resolution: {integrity: sha512-YvjJow9FxbhFFKDSuFnVCe2WxXk1zWc22fFePVNEaWJEu8IrZVlda6N0uHwzZrUM1il7NC9Mlp4MaJYbYd9JSg==}
+    engines: {node: '>=6.9.0'}
+
+  '@babel/helpers@7.28.2':
+    resolution: {integrity: sha512-/V9771t+EgXz62aCcyofnQhGM8DQACbRhvzKFsXKC9QM+5MadF8ZmIm0crDMaz3+o0h0zXfJnd4EhbYbxsrcFw==}
+    engines: {node: '>=6.9.0'}
+
+  '@babel/parser@7.28.0':
+    resolution: {integrity: sha512-jVZGvOxOuNSsuQuLRTh13nU0AogFlw32w/MT+LV6D3sP5WdbW61E77RnkbaO2dUvmPAYrBDJXGn5gGS6tH4j8g==}
+    engines: {node: '>=6.0.0'}
+    hasBin: true
+
+  '@babel/template@7.27.2':
+    resolution: {integrity: sha512-LPDZ85aEJyYSd18/DkjNh4/y1ntkE5KwUHWTiqgRxruuZL2F1yuHligVHLvcHY2vMHXttKFpJn6LwfI7cw7ODw==}
+    engines: {node: '>=6.9.0'}
+
+  '@babel/traverse@7.28.0':
+    resolution: {integrity: sha512-mGe7UK5wWyh0bKRfupsUchrQGqvDbZDbKJw+kcRGSmdHVYrv+ltd0pnpDTVpiTqnaBru9iEvA8pz8W46v0Amwg==}
+    engines: {node: '>=6.9.0'}
+
+  '@babel/types@7.28.2':
+    resolution: {integrity: sha512-ruv7Ae4J5dUYULmeXw1gmb7rYRz57OWCPM57pHojnLq/3Z1CK2lNSLTCVjxVk1F/TZHwOZZrOWi0ur95BbLxNQ==}
+    engines: {node: '>=6.9.0'}
+
+  '@bcoe/v8-coverage@0.2.3':
+    resolution: {integrity: sha512-0hYQ8SB4Db5zvZB4axdMHGwEaQjkZzFjQiN9LVYvIFB2nSUHW9tYpxWriPrWDASIxiaXax83REcLxuSdnGPZtw==}
+
+  '@c4312/eventsource-umd@3.0.5':
+    resolution: {integrity: sha512-0QhLg51eFB+SS/a4Pv5tHaRSnjJBpdFsjT3WN/Vfh6qzeFXqvaE+evVIIToYvr2lRBLg1NIB635ip8ML+/84Sg==}
+    engines: {node: '>=18.0.0'}
+
+  '@cspotcode/source-map-support@0.8.1':
+    resolution: {integrity: sha512-IchNf6dN4tHoMFIn/7OE8LWZ19Y6q/67Bmf6vnGREv8RSbBVb9LPJxEcnwrcwX6ixSvaiGoomAUvu4YSxXrVgw==}
+    engines: {node: '>=12'}
+
+  '@csstools/selector-resolve-nested@1.1.0':
+    resolution: {integrity: sha512-uWvSaeRcHyeNenKg8tp17EVDRkpflmdyvbE0DHo6D/GdBb6PDnCYYU6gRpXhtICMGMcahQmj2zGxwFM/WC8hCg==}
+    engines: {node: ^14 || ^16 || >=18}
+    peerDependencies:
+      postcss-selector-parser: ^6.0.13
+
+  '@csstools/selector-specificity@3.1.1':
+    resolution: {integrity: sha512-a7cxGcJ2wIlMFLlh8z2ONm+715QkPHiyJcxwQlKOz/03GPw1COpfhcmC9wm4xlZfp//jWHNNMwzjtqHXVWU9KA==}
+    engines: {node: ^14 || ^16 || >=18}
+    peerDependencies:
+      postcss-selector-parser: ^6.0.13
+
+  '@discoveryjs/json-ext@0.5.7':
+    resolution: {integrity: sha512-dBVuXR082gk3jsFp7Rd/JI4kytwGHecnCoTtXFb7DB6CNHp4rg5k1bhg0nWdLGLnOV71lmDzGQaLMy8iPLY0pw==}
+    engines: {node: '>=10.0.0'}
+
+  '@electron/get@2.0.3':
+    resolution: {integrity: sha512-Qkzpg2s9GnVV2I2BjRksUi43U5e6+zaQMcjoJy0C+C5oxaKl+fmckGDQFtRpZpZV0NQekuZZ+tGz7EA9TVnQtQ==}
+    engines: {node: '>=12'}
+
+  '@electron/get@4.0.2':
+    resolution: {integrity: sha512-n9fRt/nzzOOZdDtTP3kT6GVdo0ro9FgMKCoS520kQMIiKBhpGmPny6yK/lER3tOCKr+wLYW1O25D9oI6ZinwCA==}
+    engines: {node: '>=22.12.0'}
+
+  '@esbuild/aix-ppc64@0.25.8':
+    resolution: {integrity: sha512-urAvrUedIqEiFR3FYSLTWQgLu5tb+m0qZw0NBEasUeo6wuqatkMDaRT+1uABiGXEu5vqgPd7FGE1BhsAIy9QVA==}
+    engines: {node: '>=18'}
+    cpu: [ppc64]
+    os: [aix]
+
+  '@esbuild/android-arm64@0.25.8':
+    resolution: {integrity: sha512-OD3p7LYzWpLhZEyATcTSJ67qB5D+20vbtr6vHlHWSQYhKtzUYrETuWThmzFpZtFsBIxRvhO07+UgVA9m0i/O1w==}
+    engines: {node: '>=18'}
+    cpu: [arm64]
+    os: [android]
+
+  '@esbuild/android-arm@0.25.8':
+    resolution: {integrity: sha512-RONsAvGCz5oWyePVnLdZY/HHwA++nxYWIX1atInlaW6SEkwq6XkP3+cb825EUcRs5Vss/lGh/2YxAb5xqc07Uw==}
+    engines: {node: '>=18'}
+    cpu: [arm]
+    os: [android]
+
+  '@esbuild/android-x64@0.25.8':
+    resolution: {integrity: sha512-yJAVPklM5+4+9dTeKwHOaA+LQkmrKFX96BM0A/2zQrbS6ENCmxc4OVoBs5dPkCCak2roAD+jKCdnmOqKszPkjA==}
+    engines: {node: '>=18'}
+    cpu: [x64]
+    os: [android]
+
+  '@esbuild/darwin-arm64@0.25.8':
+    resolution: {integrity: sha512-Jw0mxgIaYX6R8ODrdkLLPwBqHTtYHJSmzzd+QeytSugzQ0Vg4c5rDky5VgkoowbZQahCbsv1rT1KW72MPIkevw==}
+    engines: {node: '>=18'}
+    cpu: [arm64]
+    os: [darwin]
+
+  '@esbuild/darwin-x64@0.25.8':
+    resolution: {integrity: sha512-Vh2gLxxHnuoQ+GjPNvDSDRpoBCUzY4Pu0kBqMBDlK4fuWbKgGtmDIeEC081xi26PPjn+1tct+Bh8FjyLlw1Zlg==}
+    engines: {node: '>=18'}
+    cpu: [x64]
+    os: [darwin]
+
+  '@esbuild/freebsd-arm64@0.25.8':
+    resolution: {integrity: sha512-YPJ7hDQ9DnNe5vxOm6jaie9QsTwcKedPvizTVlqWG9GBSq+BuyWEDazlGaDTC5NGU4QJd666V0yqCBL2oWKPfA==}
+    engines: {node: '>=18'}
+    cpu: [arm64]
+    os: [freebsd]
+
+  '@esbuild/freebsd-x64@0.25.8':
+    resolution: {integrity: sha512-MmaEXxQRdXNFsRN/KcIimLnSJrk2r5H8v+WVafRWz5xdSVmWLoITZQXcgehI2ZE6gioE6HirAEToM/RvFBeuhw==}
+    engines: {node: '>=18'}
+    cpu: [x64]
+    os: [freebsd]
+
+  '@esbuild/linux-arm64@0.25.8':
+    resolution: {integrity: sha512-WIgg00ARWv/uYLU7lsuDK00d/hHSfES5BzdWAdAig1ioV5kaFNrtK8EqGcUBJhYqotlUByUKz5Qo6u8tt7iD/w==}
+    engines: {node: '>=18'}
+    cpu: [arm64]
+    os: [linux]
+
+  '@esbuild/linux-arm@0.25.8':
+    resolution: {integrity: sha512-FuzEP9BixzZohl1kLf76KEVOsxtIBFwCaLupVuk4eFVnOZfU+Wsn+x5Ryam7nILV2pkq2TqQM9EZPsOBuMC+kg==}
+    engines: {node: '>=18'}
+    cpu: [arm]
+    os: [linux]
+
+  '@esbuild/linux-ia32@0.25.8':
+    resolution: {integrity: sha512-A1D9YzRX1i+1AJZuFFUMP1E9fMaYY+GnSQil9Tlw05utlE86EKTUA7RjwHDkEitmLYiFsRd9HwKBPEftNdBfjg==}
+    engines: {node: '>=18'}
+    cpu: [ia32]
+    os: [linux]
+
+  '@esbuild/linux-loong64@0.25.8':
+    resolution: {integrity: sha512-O7k1J/dwHkY1RMVvglFHl1HzutGEFFZ3kNiDMSOyUrB7WcoHGf96Sh+64nTRT26l3GMbCW01Ekh/ThKM5iI7hQ==}
+    engines: {node: '>=18'}
+    cpu: [loong64]
+    os: [linux]
+
+  '@esbuild/linux-mips64el@0.25.8':
+    resolution: {integrity: sha512-uv+dqfRazte3BzfMp8PAQXmdGHQt2oC/y2ovwpTteqrMx2lwaksiFZ/bdkXJC19ttTvNXBuWH53zy/aTj1FgGw==}
+    engines: {node: '>=18'}
+    cpu: [mips64el]
+    os: [linux]
+
+  '@esbuild/linux-ppc64@0.25.8':
+    resolution: {integrity: sha512-GyG0KcMi1GBavP5JgAkkstMGyMholMDybAf8wF5A70CALlDM2p/f7YFE7H92eDeH/VBtFJA5MT4nRPDGg4JuzQ==}
+    engines: {node: '>=18'}
+    cpu: [ppc64]
+    os: [linux]
+
+  '@esbuild/linux-riscv64@0.25.8':
+    resolution: {integrity: sha512-rAqDYFv3yzMrq7GIcen3XP7TUEG/4LK86LUPMIz6RT8A6pRIDn0sDcvjudVZBiiTcZCY9y2SgYX2lgK3AF+1eg==}
+    engines: {node: '>=18'}
+    cpu: [riscv64]
+    os: [linux]
+
+  '@esbuild/linux-s390x@0.25.8':
+    resolution: {integrity: sha512-Xutvh6VjlbcHpsIIbwY8GVRbwoviWT19tFhgdA7DlenLGC/mbc3lBoVb7jxj9Z+eyGqvcnSyIltYUrkKzWqSvg==}
+    engines: {node: '>=18'}
+    cpu: [s390x]
+    os: [linux]
+
+  '@esbuild/linux-x64@0.25.8':
+    resolution: {integrity: sha512-ASFQhgY4ElXh3nDcOMTkQero4b1lgubskNlhIfJrsH5OKZXDpUAKBlNS0Kx81jwOBp+HCeZqmoJuihTv57/jvQ==}
+    engines: {node: '>=18'}
+    cpu: [x64]
+    os: [linux]
+
+  '@esbuild/netbsd-arm64@0.25.8':
+    resolution: {integrity: sha512-d1KfruIeohqAi6SA+gENMuObDbEjn22olAR7egqnkCD9DGBG0wsEARotkLgXDu6c4ncgWTZJtN5vcgxzWRMzcw==}
+    engines: {node: '>=18'}
+    cpu: [arm64]
+    os: [netbsd]
+
+  '@esbuild/netbsd-x64@0.25.8':
+    resolution: {integrity: sha512-nVDCkrvx2ua+XQNyfrujIG38+YGyuy2Ru9kKVNyh5jAys6n+l44tTtToqHjino2My8VAY6Lw9H7RI73XFi66Cg==}
+    engines: {node: '>=18'}
+    cpu: [x64]
+    os: [netbsd]
+
+  '@esbuild/openbsd-arm64@0.25.8':
+    resolution: {integrity: sha512-j8HgrDuSJFAujkivSMSfPQSAa5Fxbvk4rgNAS5i3K+r8s1X0p1uOO2Hl2xNsGFppOeHOLAVgYwDVlmxhq5h+SQ==}
+    engines: {node: '>=18'}
+    cpu: [arm64]
+    os: [openbsd]
+
+  '@esbuild/openbsd-x64@0.25.8':
+    resolution: {integrity: sha512-1h8MUAwa0VhNCDp6Af0HToI2TJFAn1uqT9Al6DJVzdIBAd21m/G0Yfc77KDM3uF3T/YaOgQq3qTJHPbTOInaIQ==}
+    engines: {node: '>=18'}
+    cpu: [x64]
+    os: [openbsd]
+
+  '@esbuild/openharmony-arm64@0.25.8':
+    resolution: {integrity: sha512-r2nVa5SIK9tSWd0kJd9HCffnDHKchTGikb//9c7HX+r+wHYCpQrSgxhlY6KWV1nFo1l4KFbsMlHk+L6fekLsUg==}
+    engines: {node: '>=18'}
+    cpu: [arm64]
+    os: [openharmony]
+
+  '@esbuild/sunos-x64@0.25.8':
+    resolution: {integrity: sha512-zUlaP2S12YhQ2UzUfcCuMDHQFJyKABkAjvO5YSndMiIkMimPmxA+BYSBikWgsRpvyxuRnow4nS5NPnf9fpv41w==}
+    engines: {node: '>=18'}
+    cpu: [x64]
+    os: [sunos]
+
+  '@esbuild/win32-arm64@0.25.8':
+    resolution: {integrity: sha512-YEGFFWESlPva8hGL+zvj2z/SaK+pH0SwOM0Nc/d+rVnW7GSTFlLBGzZkuSU9kFIGIo8q9X3ucpZhu8PDN5A2sQ==}
+    engines: {node: '>=18'}
+    cpu: [arm64]
+    os: [win32]
+
+  '@esbuild/win32-ia32@0.25.8':
+    resolution: {integrity: sha512-hiGgGC6KZ5LZz58OL/+qVVoZiuZlUYlYHNAmczOm7bs2oE1XriPFi5ZHHrS8ACpV5EjySrnoCKmcbQMN+ojnHg==}
+    engines: {node: '>=18'}
+    cpu: [ia32]
+    os: [win32]
+
+  '@esbuild/win32-x64@0.25.8':
+    resolution: {integrity: sha512-cn3Yr7+OaaZq1c+2pe+8yxC8E144SReCQjN6/2ynubzYjvyqZjTXfQJpAcQpsdJq3My7XADANiYGHoFC69pLQw==}
+    engines: {node: '>=18'}
+    cpu: [x64]
+    os: [win32]
+
+  '@gulp-sourcemaps/identity-map@2.0.1':
+    resolution: {integrity: sha512-Tb+nSISZku+eQ4X1lAkevcQa+jknn/OVUgZ3XCxEKIsLsqYuPoJwJOPQeaOk75X3WPftb29GWY1eqE7GLsXb1Q==}
+    engines: {node: '>= 0.10'}
+
+  '@gulp-sourcemaps/map-sources@1.0.0':
+    resolution: {integrity: sha512-o/EatdaGt8+x2qpb0vFLC/2Gug/xYPRXb6a+ET1wGYKozKN3krDWC/zZFZAtrzxJHuDL12mwdfEFKcKMNvc55A==}
+    engines: {node: '>= 0.10'}
+
+  '@isaacs/balanced-match@4.0.1':
+    resolution: {integrity: sha512-yzMTt9lEb8Gv7zRioUilSglI0c0smZ9k5D65677DLWLtWJaXIS3CqcGyUFByYKlnUj6TkjLVs54fBl6+TiGQDQ==}
+    engines: {node: 20 || >=22}
+
+  '@isaacs/brace-expansion@5.0.0':
+    resolution: {integrity: sha512-ZT55BDLV0yv0RBm2czMiZ+SqCGO7AvmOM3G/w2xhVPH+te0aKgFjmBvGlL1dH+ql2tgGO3MVrbb3jCKyvpgnxA==}
+    engines: {node: 20 || >=22}
+
+  '@isaacs/cliui@8.0.2':
+    resolution: {integrity: sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==}
+    engines: {node: '>=12'}
+
+  '@istanbuljs/schema@0.1.3':
+    resolution: {integrity: sha512-ZXRY4jNvVgSVQ8DL3LTcakaAtXwTVUxE81hslsyD2AtoXW/wVob10HkOJ1X/pAlcI7D+2YoZKg5do8G/w6RYgA==}
+    engines: {node: '>=8'}
+
+  '@jridgewell/gen-mapping@0.3.12':
+    resolution: {integrity: sha512-OuLGC46TjB5BbN1dH8JULVVZY4WTdkF7tV9Ys6wLL1rubZnCMstOhNHueU5bLCrnRuDhKPDM4g6sw4Bel5Gzqg==}
+
+  '@jridgewell/resolve-uri@3.1.2':
+    resolution: {integrity: sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==}
+    engines: {node: '>=6.0.0'}
+
+  '@jridgewell/source-map@0.3.10':
+    resolution: {integrity: sha512-0pPkgz9dY+bijgistcTTJ5mR+ocqRXLuhXHYdzoMmmoJ2C9S46RCm2GMUbatPEUK9Yjy26IrAy8D/M00lLkv+Q==}
+
+  '@jridgewell/sourcemap-codec@1.5.4':
+    resolution: {integrity: sha512-VT2+G1VQs/9oz078bLrYbecdZKs912zQlkelYpuf+SXF+QvZDYJlbx/LSx+meSAwdDFnF8FVXW92AVjjkVmgFw==}
+
+  '@jridgewell/trace-mapping@0.3.29':
+    resolution: {integrity: sha512-uw6guiW/gcAGPDhLmd77/6lW8QLeiV5RUTsAX46Db6oLhGaVj4lhnPwb184s1bkc8kdVg/+h988dro8GRDpmYQ==}
+
+  '@jridgewell/trace-mapping@0.3.9':
+    resolution: {integrity: sha512-3Belt6tdc8bPgAtbcmdtNJlirVoTmEb5e2gC94PnkwEW9jI6CAHUeoG85tjWP5WquqfavoMtMwiG4P926ZKKuQ==}
+
+  '@koa/cors@5.0.0':
+    resolution: {integrity: sha512-x/iUDjcS90W69PryLDIMgFyV21YLTnG9zOpPXS7Bkt2b8AsY3zZsIpOLBkYr9fBcF3HbkKaER5hOBZLfpLgYNw==}
+    engines: {node: '>= 14.0.0'}
+
+  '@koa/router@13.1.1':
+    resolution: {integrity: sha512-JQEuMANYRVHs7lm7KY9PCIjkgJk73h4m4J+g2mkw2Vo1ugPZ17UJVqEH8F+HeAdjKz5do1OaLe7ArDz+z308gw==}
+    engines: {node: '>= 18'}
+
+  '@malept/cross-spawn-promise@1.1.1':
+    resolution: {integrity: sha512-RTBGWL5FWQcg9orDOCcp4LvItNzUPcyEU9bwaeJX0rJ1IQxzucC48Y0/sQLp/g6t99IQgAlGIaesJS+gTn7tVQ==}
+    engines: {node: '>= 10'}
+
+  '@microsoft/1ds-core-js@3.2.18':
+    resolution: {integrity: sha512-ytlFv3dfb8OGqvbZP8tSIlNvn3QNYxdsF0k6ikRMWSr6CmBxBi1sliaxc2Q5KuYOuaeWkd8WRm25Rx/UtHcyMg==}
+
+  '@microsoft/1ds-post-js@3.2.18':
+    resolution: {integrity: sha512-Tzjcja4SMyws3UP58kD2edFPNb7BJtx5uCgwf/PWXwDyfbUY1/crsTQdEyR98wy/vorvLDZdQlcL++VMChfYnQ==}
+
+  '@microsoft/applicationinsights-core-js@2.8.18':
+    resolution: {integrity: sha512-yPHRZFLpnEO0uSgFPM1BLMRRwjoten9YBbn4pJRbCT4PigLnj748knmWsMwXIdcehtkRTYz78kPYa/LWP7nvmA==}
+    peerDependencies:
+      tslib: '*'
+
+  '@microsoft/applicationinsights-shims@2.0.2':
+    resolution: {integrity: sha512-PoHEgsnmcqruLNHZ/amACqdJ6YYQpED0KSRe6J7gIJTtpZC1FfFU9b1fmDKDKtFoUSrPzEh1qzO3kmRZP0betg==}
+
+  '@microsoft/dynamicproto-js@1.1.11':
+    resolution: {integrity: sha512-gNw9z9LbqLV+WadZ6/MMrWwO3e0LuoUH1wve/1iPsBNbgqeVCiB0EZFNNj2lysxS2gkqoF9hmyVaG3MoM1BkxA==}
+
+  '@nodelib/fs.scandir@2.1.5':
+    resolution: {integrity: sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==}
+    engines: {node: '>= 8'}
+
+  '@nodelib/fs.stat@2.0.5':
+    resolution: {integrity: sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==}
+    engines: {node: '>= 8'}
+
+  '@nodelib/fs.walk@1.2.8':
+    resolution: {integrity: sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==}
+    engines: {node: '>= 8'}
+
+  '@octokit/auth-token@6.0.0':
+    resolution: {integrity: sha512-P4YJBPdPSpWTQ1NU4XYdvHvXJJDxM6YwpS0FZHRgP7YFkdVxsWcpWGy/NVqlAA7PcPCnMacXlRm1y2PFZRWL/w==}
+    engines: {node: '>= 20'}
+
+  '@octokit/core@7.0.3':
+    resolution: {integrity: sha512-oNXsh2ywth5aowwIa7RKtawnkdH6LgU1ztfP9AIUCQCvzysB+WeU8o2kyyosDPwBZutPpjZDKPQGIzzrfTWweQ==}
+    engines: {node: '>= 20'}
+
+  '@octokit/endpoint@11.0.0':
+    resolution: {integrity: sha512-hoYicJZaqISMAI3JfaDr1qMNi48OctWuOih1m80bkYow/ayPw6Jj52tqWJ6GEoFTk1gBqfanSoI1iY99Z5+ekQ==}
+    engines: {node: '>= 20'}
+
+  '@octokit/graphql@9.0.1':
+    resolution: {integrity: sha512-j1nQNU1ZxNFx2ZtKmL4sMrs4egy5h65OMDmSbVyuCzjOcwsHq6EaYjOTGXPQxgfiN8dJ4CriYHk6zF050WEULg==}
+    engines: {node: '>= 20'}
+
+  '@octokit/openapi-types@25.1.0':
+    resolution: {integrity: sha512-idsIggNXUKkk0+BExUn1dQ92sfysJrje03Q0bv0e+KPLrvyqZF8MnBpFz8UNfYDwB3Ie7Z0TByjWfzxt7vseaA==}
+
+  '@octokit/plugin-paginate-rest@13.1.1':
+    resolution: {integrity: sha512-q9iQGlZlxAVNRN2jDNskJW/Cafy7/XE52wjZ5TTvyhyOD904Cvx//DNyoO3J/MXJ0ve3rPoNWKEg5iZrisQSuw==}
+    engines: {node: '>= 20'}
+    peerDependencies:
+      '@octokit/core': '>=6'
+
+  '@octokit/plugin-request-log@6.0.0':
+    resolution: {integrity: sha512-UkOzeEN3W91/eBq9sPZNQ7sUBvYCqYbrrD8gTbBuGtHEuycE4/awMXcYvx6sVYo7LypPhmQwwpUe4Yyu4QZN5Q==}
+    engines: {node: '>= 20'}
+    peerDependencies:
+      '@octokit/core': '>=6'
+
+  '@octokit/plugin-rest-endpoint-methods@16.0.0':
+    resolution: {integrity: sha512-kJVUQk6/dx/gRNLWUnAWKFs1kVPn5O5CYZyssyEoNYaFedqZxsfYs7DwI3d67hGz4qOwaJ1dpm07hOAD1BXx6g==}
+    engines: {node: '>= 20'}
+    peerDependencies:
+      '@octokit/core': '>=6'
+
+  '@octokit/request-error@7.0.0':
+    resolution: {integrity: sha512-KRA7VTGdVyJlh0cP5Tf94hTiYVVqmt2f3I6mnimmaVz4UG3gQV/k4mDJlJv3X67iX6rmN7gSHCF8ssqeMnmhZg==}
+    engines: {node: '>= 20'}
+
+  '@octokit/request@10.0.3':
+    resolution: {integrity: sha512-V6jhKokg35vk098iBqp2FBKunk3kMTXlmq+PtbV9Gl3TfskWlebSofU9uunVKhUN7xl+0+i5vt0TGTG8/p/7HA==}
+    engines: {node: '>= 20'}
+
+  '@octokit/rest@22.0.0':
+    resolution: {integrity: sha512-z6tmTu9BTnw51jYGulxrlernpsQYXpui1RK21vmXn8yF5bp6iX16yfTtJYGK5Mh1qDkvDOmp2n8sRMcQmR8jiA==}
+    engines: {node: '>= 20'}
+
+  '@octokit/types@14.1.0':
+    resolution: {integrity: sha512-1y6DgTy8Jomcpu33N+p5w58l6xyt55Ar2I91RPiIA0xCJBXyUAhXCcmZaDWSANiha7R9a6qJJ2CRomGPZ6f46g==}
+
+  '@one-ini/wasm@0.1.1':
+    resolution: {integrity: sha512-XuySG1E38YScSJoMlqovLru4KTUNSjgVTIjyh7qMX6aNN5HY5Ct5LhRJdxO79JtTzKfzV/bnWpz+zquYrISsvw==}
+
+  '@parcel/watcher-android-arm64@2.5.1':
+    resolution: {integrity: sha512-KF8+j9nNbUN8vzOFDpRMsaKBHZ/mcjEjMToVMJOhTozkDonQFFrRcfdLWn6yWKCmJKmdVxSgHiYvTCef4/qcBA==}
+    engines: {node: '>= 10.0.0'}
+    cpu: [arm64]
+    os: [android]
+
+  '@parcel/watcher-darwin-arm64@2.5.1':
+    resolution: {integrity: sha512-eAzPv5osDmZyBhou8PoF4i6RQXAfeKL9tjb3QzYuccXFMQU0ruIc/POh30ePnaOyD1UXdlKguHBmsTs53tVoPw==}
+    engines: {node: '>= 10.0.0'}
+    cpu: [arm64]
+    os: [darwin]
+
+  '@parcel/watcher-darwin-x64@2.5.1':
+    resolution: {integrity: sha512-1ZXDthrnNmwv10A0/3AJNZ9JGlzrF82i3gNQcWOzd7nJ8aj+ILyW1MTxVk35Db0u91oD5Nlk9MBiujMlwmeXZg==}
+    engines: {node: '>= 10.0.0'}
+    cpu: [x64]
+    os: [darwin]
+
+  '@parcel/watcher-freebsd-x64@2.5.1':
+    resolution: {integrity: sha512-SI4eljM7Flp9yPuKi8W0ird8TI/JK6CSxju3NojVI6BjHsTyK7zxA9urjVjEKJ5MBYC+bLmMcbAWlZ+rFkLpJQ==}
+    engines: {node: '>= 10.0.0'}
+    cpu: [x64]
+    os: [freebsd]
+
+  '@parcel/watcher-linux-arm-glibc@2.5.1':
+    resolution: {integrity: sha512-RCdZlEyTs8geyBkkcnPWvtXLY44BCeZKmGYRtSgtwwnHR4dxfHRG3gR99XdMEdQ7KeiDdasJwwvNSF5jKtDwdA==}
+    engines: {node: '>= 10.0.0'}
+    cpu: [arm]
+    os: [linux]
+
+  '@parcel/watcher-linux-arm-musl@2.5.1':
+    resolution: {integrity: sha512-6E+m/Mm1t1yhB8X412stiKFG3XykmgdIOqhjWj+VL8oHkKABfu/gjFj8DvLrYVHSBNC+/u5PeNrujiSQ1zwd1Q==}
+    engines: {node: '>= 10.0.0'}
+    cpu: [arm]
+    os: [linux]
+
+  '@parcel/watcher-linux-arm64-glibc@2.5.1':
+    resolution: {integrity: sha512-LrGp+f02yU3BN9A+DGuY3v3bmnFUggAITBGriZHUREfNEzZh/GO06FF5u2kx8x+GBEUYfyTGamol4j3m9ANe8w==}
+    engines: {node: '>= 10.0.0'}
+    cpu: [arm64]
+    os: [linux]
+
+  '@parcel/watcher-linux-arm64-musl@2.5.1':
+    resolution: {integrity: sha512-cFOjABi92pMYRXS7AcQv9/M1YuKRw8SZniCDw0ssQb/noPkRzA+HBDkwmyOJYp5wXcsTrhxO0zq1U11cK9jsFg==}
+    engines: {node: '>= 10.0.0'}
+    cpu: [arm64]
+    os: [linux]
+
+  '@parcel/watcher-linux-x64-glibc@2.5.1':
+    resolution: {integrity: sha512-GcESn8NZySmfwlTsIur+49yDqSny2IhPeZfXunQi48DMugKeZ7uy1FX83pO0X22sHntJ4Ub+9k34XQCX+oHt2A==}
+    engines: {node: '>= 10.0.0'}
+    cpu: [x64]
+    os: [linux]
+
+  '@parcel/watcher-linux-x64-musl@2.5.1':
+    resolution: {integrity: sha512-n0E2EQbatQ3bXhcH2D1XIAANAcTZkQICBPVaxMeaCVBtOpBZpWJuf7LwyWPSBDITb7In8mqQgJ7gH8CILCURXg==}
+    engines: {node: '>= 10.0.0'}
+    cpu: [x64]
+    os: [linux]
+
+  '@parcel/watcher-win32-arm64@2.5.1':
+    resolution: {integrity: sha512-RFzklRvmc3PkjKjry3hLF9wD7ppR4AKcWNzH7kXR7GUe0Igb3Nz8fyPwtZCSquGrhU5HhUNDr/mKBqj7tqA2Vw==}
+    engines: {node: '>= 10.0.0'}
+    cpu: [arm64]
+    os: [win32]
+
+  '@parcel/watcher-win32-ia32@2.5.1':
+    resolution: {integrity: sha512-c2KkcVN+NJmuA7CGlaGD1qJh1cLfDnQsHjE89E60vUEMlqduHGCdCLJCID5geFVM0dOtA3ZiIO8BoEQmzQVfpQ==}
+    engines: {node: '>= 10.0.0'}
+    cpu: [ia32]
+    os: [win32]
+
+  '@parcel/watcher-win32-x64@2.5.1':
+    resolution: {integrity: sha512-9lHBdJITeNR++EvSQVUcaZoWupyHfXe1jZvGZ06O/5MflPcuPLtEphScIBL+AiCWBO46tDSHzWyD0uDmmZqsgA==}
+    engines: {node: '>= 10.0.0'}
+    cpu: [x64]
+    os: [win32]
+
+  '@parcel/watcher@2.5.1':
+    resolution: {integrity: sha512-dfUnCxiN9H4ap84DvD2ubjw+3vUNpstxa0TneY/Paat8a3R4uQZDLSvWjmznAY/DoahqTHl9V46HF/Zs3F29pg==}
+    engines: {node: '>= 10.0.0'}
+
+  '@pkgjs/parseargs@0.11.0':
+    resolution: {integrity: sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==}
+    engines: {node: '>=14'}
+
+  '@playwright/browser-chromium@1.54.1':
+    resolution: {integrity: sha512-GFiRk7OvwlPrUXM3JGm5QgmzA0w2nyke0sYwigDL+rriQ+Ok7Vub0F3lIsxjHPEp5pfq+KQvzSWCMDXs0efMKQ==}
+    engines: {node: '>=18'}
+
+  '@playwright/test@1.54.1':
+    resolution: {integrity: sha512-FS8hQ12acieG2dYSksmLOF7BNxnVf2afRJdCuM1eMSxj6QTSE6G4InGF7oApGgDb65MX7AwMVlIkpru0yZA4Xw==}
+    engines: {node: '>=18'}
+    hasBin: true
+
+  '@rollup/rollup-android-arm-eabi@4.46.1':
+    resolution: {integrity: sha512-oENme6QxtLCqjChRUUo3S6X8hjCXnWmJWnedD7VbGML5GUtaOtAyx+fEEXnBXVf0CBZApMQU0Idwi0FmyxzQhw==}
+    cpu: [arm]
+    os: [android]
+
+  '@rollup/rollup-android-arm64@4.46.1':
+    resolution: {integrity: sha512-OikvNT3qYTl9+4qQ9Bpn6+XHM+ogtFadRLuT2EXiFQMiNkXFLQfNVppi5o28wvYdHL2s3fM0D/MZJ8UkNFZWsw==}
+    cpu: [arm64]
+    os: [android]
+
+  '@rollup/rollup-darwin-arm64@4.46.1':
+    resolution: {integrity: sha512-EFYNNGij2WllnzljQDQnlFTXzSJw87cpAs4TVBAWLdkvic5Uh5tISrIL6NRcxoh/b2EFBG/TK8hgRrGx94zD4A==}
+    cpu: [arm64]
+    os: [darwin]
+
+  '@rollup/rollup-darwin-x64@4.46.1':
+    resolution: {integrity: sha512-ZaNH06O1KeTug9WI2+GRBE5Ujt9kZw4a1+OIwnBHal92I8PxSsl5KpsrPvthRynkhMck4XPdvY0z26Cym/b7oA==}
+    cpu: [x64]
+    os: [darwin]
+
+  '@rollup/rollup-freebsd-arm64@4.46.1':
+    resolution: {integrity: sha512-n4SLVebZP8uUlJ2r04+g2U/xFeiQlw09Me5UFqny8HGbARl503LNH5CqFTb5U5jNxTouhRjai6qPT0CR5c/Iig==}
+    cpu: [arm64]
+    os: [freebsd]
+
+  '@rollup/rollup-freebsd-x64@4.46.1':
+    resolution: {integrity: sha512-8vu9c02F16heTqpvo3yeiu7Vi1REDEC/yES/dIfq3tSXe6mLndiwvYr3AAvd1tMNUqE9yeGYa5w7PRbI5QUV+w==}
+    cpu: [x64]
+    os: [freebsd]
+
+  '@rollup/rollup-linux-arm-gnueabihf@4.46.1':
+    resolution: {integrity: sha512-K4ncpWl7sQuyp6rWiGUvb6Q18ba8mzM0rjWJ5JgYKlIXAau1db7hZnR0ldJvqKWWJDxqzSLwGUhA4jp+KqgDtQ==}
+    cpu: [arm]
+    os: [linux]
+
+  '@rollup/rollup-linux-arm-musleabihf@4.46.1':
+    resolution: {integrity: sha512-YykPnXsjUjmXE6j6k2QBBGAn1YsJUix7pYaPLK3RVE0bQL2jfdbfykPxfF8AgBlqtYbfEnYHmLXNa6QETjdOjQ==}
+    cpu: [arm]
+    os: [linux]
+
+  '@rollup/rollup-linux-arm64-gnu@4.46.1':
+    resolution: {integrity: sha512-kKvqBGbZ8i9pCGW3a1FH3HNIVg49dXXTsChGFsHGXQaVJPLA4f/O+XmTxfklhccxdF5FefUn2hvkoGJH0ScWOA==}
+    cpu: [arm64]
+    os: [linux]
+
+  '@rollup/rollup-linux-arm64-musl@4.46.1':
+    resolution: {integrity: sha512-zzX5nTw1N1plmqC9RGC9vZHFuiM7ZP7oSWQGqpbmfjK7p947D518cVK1/MQudsBdcD84t6k70WNczJOct6+hdg==}
+    cpu: [arm64]
+    os: [linux]
+
+  '@rollup/rollup-linux-loongarch64-gnu@4.46.1':
+    resolution: {integrity: sha512-O8CwgSBo6ewPpktFfSDgB6SJN9XDcPSvuwxfejiddbIC/hn9Tg6Ai0f0eYDf3XvB/+PIWzOQL+7+TZoB8p9Yuw==}
+    cpu: [loong64]
+    os: [linux]
+
+  '@rollup/rollup-linux-ppc64-gnu@4.46.1':
+    resolution: {integrity: sha512-JnCfFVEKeq6G3h3z8e60kAp8Rd7QVnWCtPm7cxx+5OtP80g/3nmPtfdCXbVl063e3KsRnGSKDHUQMydmzc/wBA==}
+    cpu: [ppc64]
+    os: [linux]
+
+  '@rollup/rollup-linux-riscv64-gnu@4.46.1':
+    resolution: {integrity: sha512-dVxuDqS237eQXkbYzQQfdf/njgeNw6LZuVyEdUaWwRpKHhsLI+y4H/NJV8xJGU19vnOJCVwaBFgr936FHOnJsQ==}
+    cpu: [riscv64]
+    os: [linux]
+
+  '@rollup/rollup-linux-riscv64-musl@4.46.1':
+    resolution: {integrity: sha512-CvvgNl2hrZrTR9jXK1ye0Go0HQRT6ohQdDfWR47/KFKiLd5oN5T14jRdUVGF4tnsN8y9oSfMOqH6RuHh+ck8+w==}
+    cpu: [riscv64]
+    os: [linux]
+
+  '@rollup/rollup-linux-s390x-gnu@4.46.1':
+    resolution: {integrity: sha512-x7ANt2VOg2565oGHJ6rIuuAon+A8sfe1IeUx25IKqi49OjSr/K3awoNqr9gCwGEJo9OuXlOn+H2p1VJKx1psxA==}
+    cpu: [s390x]
+    os: [linux]
+
+  '@rollup/rollup-linux-x64-gnu@4.46.1':
+    resolution: {integrity: sha512-9OADZYryz/7E8/qt0vnaHQgmia2Y0wrjSSn1V/uL+zw/i7NUhxbX4cHXdEQ7dnJgzYDS81d8+tf6nbIdRFZQoQ==}
+    cpu: [x64]
+    os: [linux]
+
+  '@rollup/rollup-linux-x64-musl@4.46.1':
+    resolution: {integrity: sha512-NuvSCbXEKY+NGWHyivzbjSVJi68Xfq1VnIvGmsuXs6TCtveeoDRKutI5vf2ntmNnVq64Q4zInet0UDQ+yMB6tA==}
+    cpu: [x64]
+    os: [linux]
+
+  '@rollup/rollup-win32-arm64-msvc@4.46.1':
+    resolution: {integrity: sha512-mWz+6FSRb82xuUMMV1X3NGiaPFqbLN9aIueHleTZCc46cJvwTlvIh7reQLk4p97dv0nddyewBhwzryBHH7wtPw==}
+    cpu: [arm64]
+    os: [win32]
+
+  '@rollup/rollup-win32-ia32-msvc@4.46.1':
+    resolution: {integrity: sha512-7Thzy9TMXDw9AU4f4vsLNBxh7/VOKuXi73VH3d/kHGr0tZ3x/ewgL9uC7ojUKmH1/zvmZe2tLapYcZllk3SO8Q==}
+    cpu: [ia32]
+    os: [win32]
+
+  '@rollup/rollup-win32-x64-msvc@4.46.1':
+    resolution: {integrity: sha512-7GVB4luhFmGUNXXJhH2jJwZCFB3pIOixv2E3s17GQHBFUOQaISlt7aGcQgqvCaDSxTZJUzlK/QJ1FN8S94MrzQ==}
+    cpu: [x64]
+    os: [win32]
+
+  '@sec-ant/readable-stream@0.4.1':
+    resolution: {integrity: sha512-831qok9r2t8AlxLko40y2ebgSDhenenCatLVeW/uBtnHPyhHOvG0C7TvfgecV+wHzIm5KUICgzmVpWS+IMEAeg==}
+
+  '@sindresorhus/is@4.6.0':
+    resolution: {integrity: sha512-t09vSN3MdfsyCHoFcTRCH/iUtG7OJ0CsjzB8cjAmKc/va/kIgeDI/TxsigdncE/4be734m0cvIYwNaV4i2XqAw==}
+    engines: {node: '>=10'}
+
+  '@sindresorhus/is@7.0.2':
+    resolution: {integrity: sha512-d9xRovfKNz1SKieM0qJdO+PQonjnnIfSNWfHYnBSJ9hkjm0ZPw6HlxscDXYstp3z+7V2GOFHc+J0CYrYTjqCJw==}
+    engines: {node: '>=18'}
+
+  '@sinonjs/commons@1.8.6':
+    resolution: {integrity: sha512-Ky+XkAkqPZSm3NLBeUng77EBQl3cmeJhITaGHdYH8kjVB+aun3S4XBRti2zt17mtt0mIUDiNxYeoJm6drVvBJQ==}
+
+  '@sinonjs/commons@3.0.1':
+    resolution: {integrity: sha512-K3mCHKQ9sVh8o1C9cxkwxaOmXoAMlDxC1mYyHrjqOWEcBjYr76t96zL2zlj5dUGZ3HSw240X1qgH3Mjf1yJWpQ==}
+
+  '@sinonjs/fake-timers@11.3.1':
+    resolution: {integrity: sha512-EVJO7nW5M/F5Tur0Rf2z/QoMo+1Ia963RiMtapiQrEWvY0iBUvADo8Beegwjpnle5BHkyHuoxSTW3jF43H1XRA==}
+
+  '@sinonjs/fake-timers@8.1.0':
+    resolution: {integrity: sha512-OAPJUAtgeINhh/TAlUID4QTs53Njm7xzddaVlEs/SXwgtiD1tW22zAB/W1wdqfrpmikgaWQ9Fw6Ws+hsiRm5Vg==}
+
+  '@sinonjs/samsam@6.1.3':
+    resolution: {integrity: sha512-nhOb2dWPeb1sd3IQXL/dVPnKHDOAFfvichtBf4xV00/rU1QbPCQqKMbvIheIjqwVjh7qIgf2AHTHi391yMOMpQ==}
+
+  '@sinonjs/text-encoding@0.7.3':
+    resolution: {integrity: sha512-DE427ROAphMQzU4ENbliGYrBSYPXF+TtLg9S8vzeA+OF4ZKzoDdzfL8sxuMUGS/lgRhM6j1URSk9ghf7Xo1tyA==}
+
+  '@szmarczak/http-timer@4.0.6':
+    resolution: {integrity: sha512-4BAffykYOgO+5nzBWYwE3W90sBgLJoUPRWWcL8wlyiM8IB8ipJz3UMJ9KXQd1RKQXpKp8Tutn80HZtWsu2u76w==}
+    engines: {node: '>=10'}
+
+  '@szmarczak/http-timer@5.0.1':
+    resolution: {integrity: sha512-+PmQX0PiAYPMeVYe237LJAYvOMYW1j2rH5YROyS3b4CTVJum34HfRvKvAzozHAQG0TnHNdUfY9nCeUyRAs//cw==}
+    engines: {node: '>=14.16'}
+
+  '@tootallnate/once@3.0.0':
+    resolution: {integrity: sha512-OAdBVB7rlwvLD+DiecSAyVKzKVmSfXbouCyM5I6wHGi4MGXIyFqErg1IvyJ7PI1e+GYZuZh7cCHV/c4LA8SKMw==}
+    engines: {node: '>= 10'}
+
+  '@trysound/sax@0.2.0':
+    resolution: {integrity: sha512-L7z9BgrNEcYyUYtF+HaEfiS5ebkh9jXqbszz7pC0hRBPaatV0XjSD3+eHrpqFemQfgwiFF0QPIarnIihIDn7OA==}
+    engines: {node: '>=10.13.0'}
+
+  '@ts-morph/common@0.26.1':
+    resolution: {integrity: sha512-Sn28TGl/4cFpcM+jwsH1wLncYq3FtN/BIpem+HOygfBWPT5pAeS5dB4VFVzV8FbnOKHpDLZmvAl4AjPEev5idA==}
+
+  '@tsconfig/node10@1.0.11':
+    resolution: {integrity: sha512-DcRjDCujK/kCk/cUe8Xz8ZSpm8mS3mNNpta+jGCA6USEDfktlNvm1+IuZ9eTcDbNk41BHwpHHeW+N1lKCz4zOw==}
+
+  '@tsconfig/node12@1.0.11':
+    resolution: {integrity: sha512-cqefuRsh12pWyGsIoBKJA9luFu3mRxCA+ORZvA4ktLSzIuCUtWVxGIuXigEwO5/ywWFMZ2QEGKWvkZG1zDMTag==}
+
+  '@tsconfig/node14@1.0.3':
+    resolution: {integrity: sha512-ysT8mhdixWK6Hw3i1V2AeRqZ5WfXg1G43mqoYlM2nc6388Fq5jcXyr5mRsqViLx/GJYdoL0bfXD8nmF+Zn/Iow==}
+
+  '@tsconfig/node16@1.0.4':
+    resolution: {integrity: sha512-vxhUy4J8lyeyinH7Azl1pdd43GJhZH/tP2weN8TntQblOY+A0XbT8DJk1/oCPuOOyg/Ja757rG0CgHcWC8OfMA==}
+
+  '@types/cacheable-request@6.0.3':
+    resolution: {integrity: sha512-IQ3EbTzGxIigb1I3qPZc1rWJnH0BmSKv5QYTalEwweFvyBDLSAe24zP0le/hyi7ecGfZVlIVAg4BZqb8WBwKqw==}
+
+  '@types/cookie@0.3.3':
+    resolution: {integrity: sha512-LKVP3cgXBT9RYj+t+9FDKwS5tdI+rPBXaNSkma7hvqy35lc7mAokC2zsqWJH0LaqIt3B962nuYI77hsJoT1gow==}
+
+  '@types/debug@4.1.12':
+    resolution: {integrity: sha512-vIChWdVG3LG1SMxEvI/AK+FWJthlrqlTu7fbrlywTkkaONwk/UAGaULXRlf8vkzFBLVm0zkMdCquhL5aOjhXPQ==}
+
+  '@types/eslint-scope@3.7.7':
+    resolution: {integrity: sha512-MzMFlSLBqNF2gcHWO0G1vP/YQyfvrxZ0bF+u7mzUdZ1/xK4A4sru+nraZz5i3iEIk1l1uyicaDVTB4QbbEkAYg==}
+
+  '@types/eslint@9.6.1':
+    resolution: {integrity: sha512-FXx2pKgId/WyYo2jXw63kk7/+TY7u7AziEJxJAnSFzHlqTAS3Ync6SvgYAN/k4/PQpnnVuzoMuVnByKK2qp0ag==}
+
+  '@types/estree@1.0.8':
+    resolution: {integrity: sha512-dWHzHa2WqEXI/O1E9OjrocMTKJl2mSrEolh1Iomrv6U+JuNwaHXsXx9bLu5gG7BUWFIN0skIQJQ/L1rIex4X6w==}
+
+  '@types/expect@1.20.4':
+    resolution: {integrity: sha512-Q5Vn3yjTDyCMV50TB6VRIbQNxSE4OmZR86VSbGaNpfUolm0iePBB4KdEEHmxoY5sT2+2DIvXW0rvMDP2nHZ4Mg==}
+
+  '@types/glob@7.2.0':
+    resolution: {integrity: sha512-ZUxbzKl0IfJILTS6t7ip5fQQM/J3TJYubDm3nMbgubNNYS62eXeUpoLUC8/7fJNiFYHTrGPQn7hspDUzIHX3UA==}
+
+  '@types/gulp-svgmin@1.2.4':
+    resolution: {integrity: sha512-xoKhseGy8g1Kf1zQEX20Pkcc+qaLHpbLOktkPH0WlGHRUPLU8BRVoCQkabGUUKwjC02CAkeAKpE5Sn4Y31oIGw==}
+
+  '@types/http-cache-semantics@4.0.4':
+    resolution: {integrity: sha512-1m0bIFVc7eJWyve9S0RnuRgcQqF/Xd5QsUZAZeQFr1Q3/p9JWoQQEqmVy+DPTNpGXwhgIetAoYF8JSc33q29QA==}
+
+  '@types/http-proxy-agent@2.0.2':
+    resolution: {integrity: sha512-2S6IuBRhqUnH1/AUx9k8KWtY3Esg4eqri946MnxTG5HwehF1S5mqLln8fcyMiuQkY72p2gH3W+rIPqp5li0LyQ==}
+
+  '@types/istanbul-lib-coverage@2.0.6':
+    resolution: {integrity: sha512-2QF/t/auWm0lsy8XtKVPG19v3sSOQlJe/YHZgfjb/KBBHOGSV+J2q/S671rcq9uTBrLAXmZpqJiaQbMT+zNU1w==}
+
+  '@types/json-schema@7.0.15':
+    resolution: {integrity: sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==}
+
+  '@types/kerberos@1.1.5':
+    resolution: {integrity: sha512-eljovuC0f1+6a4R8CSGwlP8P7OGygDoYJ4Yo0PtKYN4NOQEOkLH7tCQ3humCMz3lsGd0hOTyyjxHP+S3N/KtFg==}
+
+  '@types/keyv@3.1.4':
+    resolution: {integrity: sha512-BQ5aZNSCpj7D6K2ksrRCTmKRLEpnPvWDiLPfoGyhZ++8YtiK9d/3DBKPJgry359X/P1PfruyYwvnvwFjuEiEIg==}
+
+  '@types/minimatch@6.0.0':
+    resolution: {integrity: sha512-zmPitbQ8+6zNutpwgcQuLcsEpn/Cj54Kbn7L5pX0Os5kdWplB7xPgEh/g+SWOB/qmows2gpuCaPyduq8ZZRnxA==}
+    deprecated: This is a stub types definition. minimatch provides its own type definitions, so you do not need this installed.
+
+  '@types/minimist@1.2.5':
+    resolution: {integrity: sha512-hov8bUuiLiyFPGyFPE1lwWhmzYbirOXQNNo40+y3zow8aFVTeyn3VWL0VFFfdNddA8S4Vf0Tc062rzyNr7Paag==}
+
+  '@types/mocha@10.0.10':
+    resolution: {integrity: sha512-xPyYSz1cMPnJQhl0CLMH68j3gprKZaTjG3s5Vi+fDgx+uhG9NOXwbVt52eFS8ECyXhyKcjDLCBEqBExKuiZb7Q==}
+
+  '@types/mocha@9.1.1':
+    resolution: {integrity: sha512-Z61JK7DKDtdKTWwLeElSEBcWGRLY8g95ic5FoQqI9CMx0ns/Ghep3B4DfcEimiKMvtamNVULVNKEsiwV3aQmXw==}
+
+  '@types/ms@2.1.0':
+    resolution: {integrity: sha512-GsCCIZDE/p3i96vtEqx+7dBUGXrc7zeSK3wwPHIaRThS+9OhWIXRqzs4d6k1SVU8g91DrNRWxWUGhp5KXQb2VA==}
+
+  '@types/node@20.19.9':
+    resolution: {integrity: sha512-cuVNgarYWZqxRJDQHEB58GEONhOK79QVR/qYx4S7kcUObQvUwvFnYxJuuHUKm2aieN9X3yZB4LZsuYNU1Qphsw==}
+
+  '@types/responselike@1.0.3':
+    resolution: {integrity: sha512-H/+L+UkTV33uf49PH5pCAUBVPNj2nDBXTN+qS1dOwyyg24l3CcicicCA7ca+HMvJBZcFgl5r8e+RR6elsb4Lyw==}
+
+  '@types/semver@7.7.0':
+    resolution: {integrity: sha512-k107IF4+Xr7UHjwDc7Cfd6PRQfbdkiRabXGRjo07b4WyPahFBZCZ1sE+BNxYIJPPg73UkfOsVOLwqVc/6ETrIA==}
+
+  '@types/sinon-test@2.4.6':
+    resolution: {integrity: sha512-ggz+mnObtOEM64FL6PjJvfw4ratfcXv7O0yp1e1aRDLPTeWn5K19pmtEXrnZeCyxY+J31361HHsccyL0sbup8Q==}
+
+  '@types/sinon@10.0.20':
+    resolution: {integrity: sha512-2APKKruFNCAZgx3daAyACGzWuJ028VVCUDk6o2rw/Z4PXT0ogwdV4KUegW0MwVs0Zu59auPXbbuBJHF12Sx1Eg==}
+
+  '@types/sinonjs__fake-timers@8.1.5':
+    resolution: {integrity: sha512-mQkU2jY8jJEF7YHjHvsQO8+3ughTL1mcnn96igfhONmR+fUPSKIkefQYpSe8bsly2Ep7oQbn/6VG5/9/0qcArQ==}
+
+  '@types/svgo@1.3.6':
+    resolution: {integrity: sha512-AZU7vQcy/4WFEuwnwsNsJnFwupIpbllH1++LXScN6uxT1Z4zPzdrWG97w4/I7eFKFTvfy/bHFStWjdBAg2Vjug==}
+
+  '@types/trusted-types@1.0.6':
+    resolution: {integrity: sha512-230RC8sFeHoT6sSUlRO6a8cAnclO06eeiq1QDfiv2FGCLWFvvERWgwIQD4FWqD9A69BN7Lzee4OXwoMVnnsWDw==}
+
+  '@types/vinyl@2.0.12':
+    resolution: {integrity: sha512-Sr2fYMBUVGYq8kj3UthXFAu5UN6ZW+rYr4NACjZQJvHvj+c8lYv0CahmZ2P/r7iUkN44gGUBwqxZkrKXYPb7cw==}
+
+  '@types/vscode-notebook-renderer@1.72.3':
+    resolution: {integrity: sha512-MfmEI3A2McbUV2WaijoTgLOAs9chwHN4WmqOedl3jdtlbzJBWIQ9ZFmQdzPa3lYr5j8DJhRg3KB5AIM/BBfg9Q==}
+
+  '@types/webpack@5.28.5':
+    resolution: {integrity: sha512-wR87cgvxj3p6D0Crt1r5avwqffqPXUkNlnQ1mjU93G7gCuFjufZR4I6j8cz5g1F1tTYpfOOFvly+cmIQwL9wvw==}
+
+  '@types/wicg-file-system-access@2020.9.8':
+    resolution: {integrity: sha512-ggMz8nOygG7d/stpH40WVaNvBwuyYLnrg5Mbyf6bmsj/8+gb6Ei4ZZ9/4PNpcPNTT8th9Q8sM8wYmWGjMWLX/A==}
+
+  '@types/windows-foreground-love@0.3.1':
+    resolution: {integrity: sha512-aN6wdcro6KOUinabIbY8EeWnk4BzXLbUTcS3YGUDIh5lmHYif0z3gsaqi3Dg2Nk7GpRIjqVutwPMeAdn/YfChA==}
+    deprecated: This is a stub types definition. windows-foreground-love provides its own type definitions, so you do not need this installed.
+
+  '@types/winreg@1.2.36':
+    resolution: {integrity: sha512-DtafHy5A8hbaosXrbr7YdjQZaqVewXmiasRS5J4tYMzt3s1gkh40ixpxgVFfKiQ0JIYetTJABat47v9cpr/sQg==}
+
+  '@types/yauzl@2.10.3':
+    resolution: {integrity: sha512-oJoftv0LSuaDZE3Le4DbKX+KS9G36NzOeSap90UIK0yMA/NhKJhqlSGtNDORNRaIbQfzjXDrQa0ytJ6mNRGz/Q==}
+
+  '@types/yazl@2.4.6':
+    resolution: {integrity: sha512-/ifFjQtcKaoZOjl5NNCQRR0fAKafB3Foxd7J/WvFPTMea46zekapcR30uzkwIkKAAuq5T6d0dkwz754RFH27hg==}
+
+  '@typespec/ts-http-runtime@0.3.0':
+    resolution: {integrity: sha512-sOx1PKSuFwnIl7z4RN0Ls7N9AQawmR9r66eI5rFCzLDIs8HTIYrIpH9QjYWoX0lkgGrkLxXhi4QnK7MizPRrIg==}
+    engines: {node: '>=20.0.0'}
+
+  '@vscode/deviceid@0.1.2':
+    resolution: {integrity: sha512-QZsbcKGd5JMBVoKIVT+HD9o8YWWqcmKRNWvR3qWj3iXuDo8fKaZXY3k3ZGMdOAK36fCgL0zGTDkt9vWmeBwNvQ==}
+
+  '@vscode/gulp-electron@1.38.1':
+    resolution: {integrity: sha512-GKkK/Mx2Zpe6zSsraumwDmAUNkVgUfkSsRla7nIA+BpgxxXXJijY1c8QOrbrv+piD7SL66t8ewDQZu8KvJKz1w==}
+    engines: {node: '>=22'}
+
+  '@vscode/iconv-lite-umd@0.7.0':
+    resolution: {integrity: sha512-bRRFxLfg5dtAyl5XyiVWz/ZBPahpOpPrNYnnHpOpUZvam4tKH35wdhP4Kj6PbM0+KdliOsPzbGWpkxcdpNB/sg==}
+
+  '@vscode/l10n-dev@0.0.35':
+    resolution: {integrity: sha512-s6uzBXsVDSL69Z85HSqpc5dfKswQkeucY8L00t1TWzGalw7wkLQUKMRwuzqTq+AMwQKrRd7Po14cMoTcd11iDw==}
+    hasBin: true
+
+  '@vscode/policy-watcher@1.3.2':
+    resolution: {integrity: sha512-fmNPYysU2ioH99uCaBPiRblEZSnir5cTmc7w91hAxAoYoGpHt2PZPxT5eIOn7FGmPOsjLdQcd6fduFJGYVD4Mw==}
+
+  '@vscode/proxy-agent@0.32.0':
+    resolution: {integrity: sha512-n6h2+WVMJ3ByfGUakDbBNpR25J2JpLQabofiTKHIcLpXfxhT5TQSEH4OcjesZZfqw1zDpd7oBgcgqToWIiaBrQ==}
+
+  '@vscode/ripgrep@1.15.14':
+    resolution: {integrity: sha512-/G1UJPYlm+trBWQ6cMO3sv6b8D1+G16WaJH1/DSqw32JOVlzgZbLkDxRyzIpTpv30AcYGMkCf5tUqGlW6HbDWw==}
+
+  '@vscode/spdlog@0.15.2':
+    resolution: {integrity: sha512-8RQ7JEs81x5IFONYGtFhYtaF2a3IPtNtgMdp+MFLxTDokJQBAVittx0//EN38BYhlzeVqEPgusRsOA8Yulaysg==}
+
+  '@vscode/sqlite3@5.1.8-vscode':
+    resolution: {integrity: sha512-9Ku18yZej1kxS7mh6dhCWxkCof043HljcLIdq+RRJr65QdOeAqPOUJ2i6qXRL63l1Kd72uXV/zLA2SBwhfgiOw==}
+
+  '@vscode/sudo-prompt@9.3.1':
+    resolution: {integrity: sha512-9ORTwwS74VaTn38tNbQhsA5U44zkJfcb0BdTSyyG6frP4e8KMtHuTXYmwefe5dpL8XB1aGSIVTaLjD3BbWb5iA==}
+
+  '@vscode/telemetry-extractor@1.17.0':
+    resolution: {integrity: sha512-HnSLeeHqR3vyXjhLaIn7oPbPOKZxjhR5CLGkgwbVGSAZAB8Vl9xH0mF3MZRL7tn9BujujlIuXuHznxffOOTtZw==}
+    hasBin: true
+
+  '@vscode/test-cli@0.0.6':
+    resolution: {integrity: sha512-4i61OUv5PQr3GxhHOuUgHdgBDfIO/kXTPCsEyFiMaY4SOqQTgkTmyZLagHehjOgCfsXdcrJa3zgQ7zoc+Dh6hQ==}
+    hasBin: true
+
+  '@vscode/test-electron@2.5.2':
+    resolution: {integrity: sha512-8ukpxv4wYe0iWMRQU18jhzJOHkeGKbnw7xWRX3Zw1WJA4cEKbHcmmLPdPrPtL6rhDcrlCZN+xKRpv09n4gRHYg==}
+    engines: {node: '>=16'}
+
+  '@vscode/test-web@0.0.62':
+    resolution: {integrity: sha512-Ypug5PvhPOPFbuHVilai7t23tm3Wm5geIpC2DB09Gy9o0jZCduramiSdPf+YN7yhkFy1usFYtN3Eaks1XoBrOQ==}
+    engines: {node: '>=16'}
+    hasBin: true
+
+  '@vscode/tree-sitter-wasm@0.1.4':
+    resolution: {integrity: sha512-kQVVg/CamCYDM+/XYCZuNTQyixjZd8ts/Gf84UzjEY0eRnbg6kiy5I9z2/2i3XdqwhI87iG07rkMR2KwhqcSbA==}
+
+  '@vscode/v8-heap-parser@0.1.0':
+    resolution: {integrity: sha512-3EvQak7EIOLyIGz+IP9qSwRmP08ZRWgTeoRgAXPVkkDXZ8riqJ7LDtkgx++uHBiJ3MUaSdlUYPZcLFFw7E6zGg==}
+
+  '@vscode/vscode-languagedetection@1.0.21':
+    resolution: {integrity: sha512-zSUH9HYCw5qsCtd7b31yqkpaCU6jhtkKLkvOOA8yTrIRfBSOFb8PPhgmMicD7B/m+t4PwOJXzU1XDtrM9Fd3/g==}
+    hasBin: true
+
+  '@vscode/vscode-perf@0.0.19':
+    resolution: {integrity: sha512-E/I0S+71K3Jo4kiMYbeKM8mUG3K8cHlj5MFVfPYVAvlp7KuIZTM914E7osp+jx8XgMLN6fChxnFmntm1GtVrKA==}
+    engines: {node: '>= 16'}
+    hasBin: true
+
+  '@vscode/windows-ca-certs@0.3.3':
+    resolution: {integrity: sha512-C0Iq5RcH+H31GUZ8bsMORsX3LySVkGAqe4kQfUSVcCqJ0QOhXkhgwUMU7oCiqYLXaQWyXFp6Fj6eMdt05uK7VA==}
+    os: [win32]
+
+  '@vscode/windows-mutex@0.5.0':
+    resolution: {integrity: sha512-iD29L9AUscpn07aAvhP2QuhrXzuKc1iQpPF6u7ybtvRbR+o+RotfbuKqqF1RDlDDrJZkL+3AZTy4D01U4nEe5A==}
+
+  '@vscode/windows-process-tree@0.6.0':
+    resolution: {integrity: sha512-7/DjBKKUtlmKNiAet2GRbdvfjgMKmfBeWVClIgONv8aqxGnaKca5N85eIDxh6rLMy2hKvFqIIsqgxs1Q26TWwg==}
+
+  '@vscode/windows-registry@1.1.0':
+    resolution: {integrity: sha512-5AZzuWJpGscyiMOed0IuyEwt6iKmV5Us7zuwCDCFYMIq7tsvooO9BUiciywsvuthGz6UG4LSpeDeCxvgMVhnIw==}
+
+  '@webassemblyjs/ast@1.14.1':
+    resolution: {integrity: sha512-nuBEDgQfm1ccRp/8bCQrx1frohyufl4JlbMMZ4P1wpeOfDhF6FQkxZJ1b/e+PLwr6X1Nhw6OLme5usuBWYBvuQ==}
+
+  '@webassemblyjs/floating-point-hex-parser@1.13.2':
+    resolution: {integrity: sha512-6oXyTOzbKxGH4steLbLNOu71Oj+C8Lg34n6CqRvqfS2O71BxY6ByfMDRhBytzknj9yGUPVJ1qIKhRlAwO1AovA==}
+
+  '@webassemblyjs/helper-api-error@1.13.2':
+    resolution: {integrity: sha512-U56GMYxy4ZQCbDZd6JuvvNV/WFildOjsaWD3Tzzvmw/mas3cXzRJPMjP83JqEsgSbyrmaGjBfDtV7KDXV9UzFQ==}
+
+  '@webassemblyjs/helper-buffer@1.14.1':
+    resolution: {integrity: sha512-jyH7wtcHiKssDtFPRB+iQdxlDf96m0E39yb0k5uJVhFGleZFoNw1c4aeIcVUPPbXUVJ94wwnMOAqUHyzoEPVMA==}
+
+  '@webassemblyjs/helper-numbers@1.13.2':
+    resolution: {integrity: sha512-FE8aCmS5Q6eQYcV3gI35O4J789wlQA+7JrqTTpJqn5emA4U2hvwJmvFRC0HODS+3Ye6WioDklgd6scJ3+PLnEA==}
+
+  '@webassemblyjs/helper-wasm-bytecode@1.13.2':
+    resolution: {integrity: sha512-3QbLKy93F0EAIXLh0ogEVR6rOubA9AoZ+WRYhNbFyuB70j3dRdwH9g+qXhLAO0kiYGlg3TxDV+I4rQTr/YNXkA==}
+
+  '@webassemblyjs/helper-wasm-section@1.14.1':
+    resolution: {integrity: sha512-ds5mXEqTJ6oxRoqjhWDU83OgzAYjwsCV8Lo/N+oRsNDmx/ZDpqalmrtgOMkHwxsG0iI//3BwWAErYRHtgn0dZw==}
+
+  '@webassemblyjs/ieee754@1.13.2':
+    resolution: {integrity: sha512-4LtOzh58S/5lX4ITKxnAK2USuNEvpdVV9AlgGQb8rJDHaLeHciwG4zlGr0j/SNWlr7x3vO1lDEsuePvtcDNCkw==}
+
+  '@webassemblyjs/leb128@1.13.2':
+    resolution: {integrity: sha512-Lde1oNoIdzVzdkNEAWZ1dZ5orIbff80YPdHx20mrHwHrVNNTjNr8E3xz9BdpcGqRQbAEa+fkrCb+fRFTl/6sQw==}
+
+  '@webassemblyjs/utf8@1.13.2':
+    resolution: {integrity: sha512-3NQWGjKTASY1xV5m7Hr0iPeXD9+RDobLll3T9d2AO+g3my8xy5peVyjSag4I50mR1bBSN/Ct12lo+R9tJk0NZQ==}
+
+  '@webassemblyjs/wasm-edit@1.14.1':
+    resolution: {integrity: sha512-RNJUIQH/J8iA/1NzlE4N7KtyZNHi3w7at7hDjvRNm5rcUXa00z1vRz3glZoULfJ5mpvYhLybmVcwcjGrC1pRrQ==}
+
+  '@webassemblyjs/wasm-gen@1.14.1':
+    resolution: {integrity: sha512-AmomSIjP8ZbfGQhumkNvgC33AY7qtMCXnN6bL2u2Js4gVCg8fp735aEiMSBbDR7UQIj90n4wKAFUSEd0QN2Ukg==}
+
+  '@webassemblyjs/wasm-opt@1.14.1':
+    resolution: {integrity: sha512-PTcKLUNvBqnY2U6E5bdOQcSM+oVP/PmrDY9NzowJjislEjwP/C4an2303MCVS2Mg9d3AJpIGdUFIQQWbPds0Sw==}
+
+  '@webassemblyjs/wasm-parser@1.14.1':
+    resolution: {integrity: sha512-JLBl+KZ0R5qB7mCnud/yyX08jWFw5MsoalJ1pQ4EdFlgj9VdXKGuENGsiCIjegI1W7p91rUlcB/LB5yRJKNTcQ==}
+
+  '@webassemblyjs/wast-printer@1.14.1':
+    resolution: {integrity: sha512-kPSSXE6De1XOR820C90RIo2ogvZG+c3KiHzqUoO/F34Y2shGzesfqv7o57xrxovZJH/MetF5UjroJ/R/3isoiw==}
+
+  '@webgpu/types@0.1.64':
+    resolution: {integrity: sha512-84kRIAGV46LJTlJZWxShiOrNL30A+9KokD7RB3dRCIqODFjodS5tCD5yyiZ8kIReGVZSDfA3XkkwyyOIF6K62A==}
+
+  '@webpack-cli/configtest@2.1.1':
+    resolution: {integrity: sha512-wy0mglZpDSiSS0XHrVR+BAdId2+yxPSoJW8fsna3ZpYSlufjvxnP4YbKTCBZnNIcGN4r6ZPXV55X4mYExOfLmw==}
+    engines: {node: '>=14.15.0'}
+    peerDependencies:
+      webpack: 5.x.x
+      webpack-cli: 5.x.x
+
+  '@webpack-cli/info@2.0.2':
+    resolution: {integrity: sha512-zLHQdI/Qs1UyT5UBdWNqsARasIA+AaF8t+4u2aS2nEpBQh2mWIVb8qAklq0eUENnC5mOItrIB4LiS9xMtph18A==}
+    engines: {node: '>=14.15.0'}
+    peerDependencies:
+      webpack: 5.x.x
+      webpack-cli: 5.x.x
+
+  '@webpack-cli/serve@2.0.5':
+    resolution: {integrity: sha512-lqaoKnRYBdo1UgDX8uF24AfGMifWK19TxPmM5FHc2vAGxrJ/qtyUyFBWoY1tISZdelsQ5fBcOusifo5o5wSJxQ==}
+    engines: {node: '>=14.15.0'}
+    peerDependencies:
+      webpack: 5.x.x
+      webpack-cli: 5.x.x
+      webpack-dev-server: '*'
+    peerDependenciesMeta:
+      webpack-dev-server:
+        optional: true
+
+  '@xmldom/xmldom@0.8.10':
+    resolution: {integrity: sha512-2WALfTl4xo2SkGCYRt6rDTFfk9R1czmBvUQy12gK2KuRKIpWEhcbbzy8EZXtz/jkRqHX8bFEc6FC1HjX4TUWYw==}
+    engines: {node: '>=10.0.0'}
+
+  '@xterm/addon-clipboard@0.2.0-beta.97':
+    resolution: {integrity: sha512-k/CCkQQvpGNTNvTFQVPDV7wd49Oxgh2pd8REKmoHcSgGZW/6jMRKElWAYv3hXujKml+fsS48XD3cbrkG52nFjw==}
+    peerDependencies:
+      '@xterm/xterm': ^5.6.0-beta.114
+
+  '@xterm/addon-image@0.9.0-beta.114':
+    resolution: {integrity: sha512-qY7yclSaZ+1fc/ZejNxRpa4GdvLq2cA+iaq0YBSL9OFHXejJCKwck4ZvqRwqb/WvoZSUNlqLff+2So4tFKQ51A==}
+    peerDependencies:
+      '@xterm/xterm': ^5.6.0-beta.114
+
+  '@xterm/addon-ligatures@0.10.0-beta.114':
+    resolution: {integrity: sha512-LTRV+EIqTMyZyko9IAlSyRdZY36aNHwLxj9uNkKDN0jIjrT67uFWL+YT4WN48XCn5Naz8nSCLam5xKldBe+o5g==}
+    engines: {node: '>8.0.0'}
+    peerDependencies:
+      '@xterm/xterm': ^5.6.0-beta.114
+
+  '@xterm/addon-progress@0.2.0-beta.20':
+    resolution: {integrity: sha512-1RHok9oVZp1lx157GM5ebVxvF32ErEQ4ukst4GScDQBrt/qN08LdsBLbue2wDn5Z8RX/CofQ235NDThdAUCyRA==}
+    peerDependencies:
+      '@xterm/xterm': ^5.6.0-beta.114
+
+  '@xterm/addon-search@0.16.0-beta.114':
+    resolution: {integrity: sha512-SspxCxerty6qVd6H27zQueecLzTbx8mQ7TGjBa3a51yjZG7ee97iG+OgFxyOVOwR0xUag5vWLanWt9Pd6FtiBQ==}
+    peerDependencies:
+      '@xterm/xterm': ^5.6.0-beta.114
+
+  '@xterm/addon-serialize@0.14.0-beta.114':
+    resolution: {integrity: sha512-wv+QHAuAS7Be0Nr/HNQ+WrPQJN6lazpJykrFcSK1LRWYEQ1j7/OaR3UKuj0BE62sWkIazhLMx5GAJ+FY32G+4w==}
+    peerDependencies:
+      '@xterm/xterm': ^5.6.0-beta.114
+
+  '@xterm/addon-unicode11@0.9.0-beta.114':
+    resolution: {integrity: sha512-urjLk1DCxQ+LG1ARVl88OvD77vWmx0ySEFjeZDiVm+RO4vcwdclGyKIxWGe1wRg1y5p36zJPUnE1fbPwLr1Etg==}
+    peerDependencies:
+      '@xterm/xterm': ^5.6.0-beta.114
+
+  '@xterm/addon-webgl@0.19.0-beta.114':
+    resolution: {integrity: sha512-6n2naFuMe65WXuet2kx7ndNNwRVW27AJfeDe7BwTX6y/t+HGO3X5G0Lji1W2fqX1vw0KRx7LTv+7qrtEvTjtQg==}
+    peerDependencies:
+      '@xterm/xterm': ^5.6.0-beta.114
+
+  '@xterm/headless@5.6.0-beta.114':
+    resolution: {integrity: sha512-RViy4ZMTgKK8bo92N3KZb2+g4nUlkJ8fiAtlDhnrczjy0lxk/0Zgoh3s2srjA3iNoGybTYqpGH4hbZrH0Ljo1g==}
+
+  '@xterm/xterm@5.6.0-beta.114':
+    resolution: {integrity: sha512-OW0Pz64qQU03xCv+56mscuxBeZH5cV7u4KrRrYxfFYn6VdbuY9pkWgR0yr5IfJ0lRfazVhZyzIo9/lm2uPPk4g==}
+
+  '@xtuc/ieee754@1.2.0':
+    resolution: {integrity: sha512-DX8nKgqcGwsc0eJSqYt5lwP4DH5FlHnmuWWBRy7X0NcaGR0ZtuyeESgMwTYVEtxmsNGY+qit4QYT/MIYTOTPeA==}
+
+  '@xtuc/long@4.2.2':
+    resolution: {integrity: sha512-NuHqBY1PB/D8xU6s/thBgOAiAP7HOYDQ32+BFZILJ8ivkUkAHQnWfn6WhL79Owj1qmUnoN/YPhktdIoucipkAQ==}
+
+  abbrev@2.0.0:
+    resolution: {integrity: sha512-6/mh1E2u2YgEsCHdY0Yx5oW+61gZU+1vXaoiHHrpKeuRNNgFvS+/jrwHiQhB5apAf5oB7UB7E19ol2R2LKH8hQ==}
+    engines: {node: ^14.17.0 || ^16.13.0 || >=18.0.0}
+
+  accepts@1.3.8:
+    resolution: {integrity: sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==}
+    engines: {node: '>= 0.6'}
+
+  acorn-import-phases@1.0.4:
+    resolution: {integrity: sha512-wKmbr/DDiIXzEOiWrTTUcDm24kQ2vGfZQvM2fwg2vXqR5uW6aapr7ObPtj1th32b9u90/Pf4AItvdTh42fBmVQ==}
+    engines: {node: '>=10.13.0'}
+    peerDependencies:
+      acorn: ^8.14.0
+
+  acorn-walk@8.3.4:
+    resolution: {integrity: sha512-ueEepnujpqee2o5aIYnvHU6C0A42MNdsIDeqy5BydrkuC5R1ZuUFnm27EeFJGoEHJQgn3uleRvmTXaJgfXbt4g==}
+    engines: {node: '>=0.4.0'}
+
+  acorn@6.4.2:
+    resolution: {integrity: sha512-XtGIhXwF8YM8bJhGxG5kXgjkEuNGLTkoYqVE+KMR+aspr4KGYmKYg7yUe3KghyQ9yheNwLnjmzh/7+gfDBmHCQ==}
+    engines: {node: '>=0.4.0'}
+    hasBin: true
+
+  acorn@8.15.0:
+    resolution: {integrity: sha512-NZyJarBfL7nWwIq+FDL6Zp/yHEhePMNnnJ0y3qfieCrmNvYct8uvtiV41UvlSe6apAfk0fY1FbWx+NwfmpvtTg==}
+    engines: {node: '>=0.4.0'}
+    hasBin: true
+
+  agent-base@7.1.4:
+    resolution: {integrity: sha512-MnA+YT8fwfJPgBx3m60MNqakm30XOkyIoH1y6huTQvC0PwZG7ki8NacLBcrPbNoo8vEZy7Jpuk7+jMO+CUovTQ==}
+    engines: {node: '>= 14'}
+
+  ajv-formats@2.1.1:
+    resolution: {integrity: sha512-Wx0Kx52hxE7C18hkMEggYlEifqWZtYaRgouJor+WMdPnQyEK13vgEWyVNup7SoeeoLMsr4kf5h6dOW11I15MUA==}
+    peerDependencies:
+      ajv: ^8.0.0
+    peerDependenciesMeta:
+      ajv:
+        optional: true
+
+  ajv-keywords@3.5.2:
+    resolution: {integrity: sha512-5p6WTN0DdTGVQk6VjcEju19IgaHudalcfabD7yhDGeA6bcQnmL+CpveLJq/3hvfwd1aof6L386Ougkx6RfyMIQ==}
+    peerDependencies:
+      ajv: ^6.9.1
+
+  ajv-keywords@5.1.0:
+    resolution: {integrity: sha512-YCS/JNFAUyr5vAuhk1DWm1CBxRHW9LbJ2ozWeemrIqpbsqKjHVxYPyi5GC0rjZIT5JxJ3virVTS8wk4i/Z+krw==}
+    peerDependencies:
+      ajv: ^8.8.2
+
+  ajv@6.12.6:
+    resolution: {integrity: sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==}
+
+  ajv@8.17.1:
+    resolution: {integrity: sha512-B/gBuNg5SiMTrPkC+A2+cW0RszwxYmn6VYxB/inlBStS5nx6xHIt/ehKRhIMhqusl7a8LjQoZnjCs5vhwxOQ1g==}
+
+  all@0.0.0:
+    resolution: {integrity: sha512-0oKlfNVv2d+d7c1gwjGspzgbwot47PGQ4b3v1ccx4mR8l9P/Y6E6Dr/yE8lNT63EcAKEbHo6UG3odDpC/NQcKw==}
+
+  amdefine@1.0.1:
+    resolution: {integrity: sha512-S2Hw0TtNkMJhIabBwIojKL9YHO5T0n5eNqWJ7Lrlel/zDbftQpxpapi8tZs3X1HWa+u+QeydGmzzNU0m09+Rcg==}
+    engines: {node: '>=0.4.2'}
+
+  ansi-colors@1.1.0:
+    resolution: {integrity: sha512-SFKX67auSNoVR38N3L+nvsPjOE0bybKTYbkf5tRvushrAPQ9V75huw0ZxBkKVeRU9kqH3d6HA4xTckbwZ4ixmA==}
+    engines: {node: '>=0.10.0'}
+
+  ansi-colors@3.2.4:
+    resolution: {integrity: sha512-hHUXGagefjN2iRrID63xckIvotOXOojhQKWIPUZ4mNUZ9nLZW+7FMNoE1lOkEhNWYsx/7ysGIuJYCiMAA9FnrA==}
+    engines: {node: '>=6'}
+
+  ansi-colors@4.1.3:
+    resolution: {integrity: sha512-/6w/C21Pm1A7aZitlI5Ni/2J6FFQN8i1Cvz3kHABAAbw93v/NlvKdVOqz7CCWz/3iv/JplRSEEZ83XION15ovw==}
+    engines: {node: '>=6'}
+
+  ansi-cyan@0.1.1:
+    resolution: {integrity: sha512-eCjan3AVo/SxZ0/MyIYRtkpxIu/H3xZN7URr1vXVrISxeyz8fUFz0FJziamK4sS8I+t35y4rHg1b2PklyBe/7A==}
+    engines: {node: '>=0.10.0'}
+
+  ansi-gray@0.1.1:
+    resolution: {integrity: sha512-HrgGIZUl8h2EHuZaU9hTR/cU5nhKxpVE1V6kdGsQ8e4zirElJ5fvtfc8N7Q1oq1aatO275i8pUFUCpNWCAnVWw==}
+    engines: {node: '>=0.10.0'}
+
+  ansi-red@0.1.1:
+    resolution: {integrity: sha512-ewaIr5y+9CUTGFwZfpECUbFlGcC0GCw1oqR9RI6h1gQCd9Aj2GxSckCnPsVJnmfMZbwFYE+leZGASgkWl06Jow==}
+    engines: {node: '>=0.10.0'}
+
+  ansi-regex@2.1.1:
+    resolution: {integrity: sha512-TIGnTpdo+E3+pCyAluZvtED5p5wCqLdezCyhPZzKPcxvFplEt4i+W7OONCKgeZFT3+y5NZZfOOS/Bdcanm1MYA==}
+    engines: {node: '>=0.10.0'}
+
+  ansi-regex@5.0.1:
+    resolution: {integrity: sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==}
+    engines: {node: '>=8'}
+
+  ansi-regex@6.1.0:
+    resolution: {integrity: sha512-7HSX4QQb4CspciLpVFwyRe79O3xsIZDDLER21kERQ71oaPodF8jL725AgJMFAYbooIqolJoRLuM81SpeUkpkvA==}
+    engines: {node: '>=12'}
+
+  ansi-styles@2.2.1:
+    resolution: {integrity: sha512-kmCevFghRiWM7HB5zTPULl4r9bVFSWjz62MhqizDGUrq2NWuNMQyuv4tHHoKJHs69M/MF64lEcHdYIocrdWQYA==}
+    engines: {node: '>=0.10.0'}
+
+  ansi-styles@3.2.1:
+    resolution: {integrity: sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==}
+    engines: {node: '>=4'}
+
+  ansi-styles@4.3.0:
+    resolution: {integrity: sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==}
+    engines: {node: '>=8'}
+
+  ansi-styles@6.2.1:
+    resolution: {integrity: sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==}
+    engines: {node: '>=12'}
+
+  ansi-wrap@0.1.0:
+    resolution: {integrity: sha512-ZyznvL8k/FZeQHr2T6LzcJ/+vBApDnMNZvfVFy3At0knswWd6rJ3/0Hhmpu8oqa6C92npmozs890sX9Dl6q+Qw==}
+    engines: {node: '>=0.10.0'}
+
+  any-promise@1.3.0:
+    resolution: {integrity: sha512-7UvmKalWRt1wgjL1RrGxoSJW/0QZFIegpeGvZG9kjp8vrRu55XTHbwnqq2GpXm9uLbcuhxm3IqX9OB4MZR1b2A==}
+
+  anymatch@2.0.0:
+    resolution: {integrity: sha512-5teOsQWABXHHBFP9y3skS5P3d/WfWXpv3FUpy+LorMrNYaT9pI4oLMQX7jzQ2KklNpGpWHzdCXTDT2Y3XGlZBw==}
+
+  anymatch@3.1.3:
+    resolution: {integrity: sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==}
+    engines: {node: '>= 8'}
+
+  append-buffer@1.0.2:
+    resolution: {integrity: sha512-WLbYiXzD3y/ATLZFufV/rZvWdZOs+Z/+5v1rBZ463Jn398pa6kcde27cvozYnBoxXblGZTFfoPpsaEw0orU5BA==}
+    engines: {node: '>=0.10.0'}
+
+  archy@1.0.0:
+    resolution: {integrity: sha512-Xg+9RwCg/0p32teKdGMPTPnVXKD0w3DfHnFTficozsAgsvq2XenPJq/MYpzzQ/v8zrOyJn6Ds39VA4JIDwFfqw==}
+
+  arg@4.1.3:
+    resolution: {integrity: sha512-58S9QDqG0Xx27YwPSt9fJxivjYl432YCwfDMfZ+71RAqUrZef7LrKQZ3LHLOwCS4FLNBplP533Zx895SeOCHvA==}
+
+  argparse@2.0.1:
+    resolution: {integrity: sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==}
+
+  arr-diff@1.1.0:
+    resolution: {integrity: sha512-OQwDZUqYaQwyyhDJHThmzId8daf4/RFNLaeh3AevmSeZ5Y7ug4Ga/yKc6l6kTZOBW781rCj103ZuTh8GAsB3+Q==}
+    engines: {node: '>=0.10.0'}
+
+  arr-diff@4.0.0:
+    resolution: {integrity: sha512-YVIQ82gZPGBebQV/a8dar4AitzCQs0jjXwMPZllpXMaGjXPYVUawSxQrRsjhjupyVxEvbHgUmIhKVlND+j02kA==}
+    engines: {node: '>=0.10.0'}
+
+  arr-filter@1.1.2:
+    resolution: {integrity: sha512-A2BETWCqhsecSvCkWAeVBFLH6sXEUGASuzkpjL3GR1SlL/PWL6M3J8EAAld2Uubmh39tvkJTqC9LeLHCUKmFXA==}
+    engines: {node: '>=0.10.0'}
+
+  arr-flatten@1.1.0:
+    resolution: {integrity: sha512-L3hKV5R/p5o81R7O02IGnwpDmkp6E982XhtbuwSe3O4qOtMMMtodicASA1Cny2U+aCXcNpml+m4dPsvsJ3jatg==}
+    engines: {node: '>=0.10.0'}
+
+  arr-map@2.0.2:
+    resolution: {integrity: sha512-tVqVTHt+Q5Xb09qRkbu+DidW1yYzz5izWS2Xm2yFm7qJnmUfz4HPzNxbHkdRJbz2lrqI7S+z17xNYdFcBBO8Hw==}
+    engines: {node: '>=0.10.0'}
+
+  arr-union@2.1.0:
+    resolution: {integrity: sha512-t5db90jq+qdgk8aFnxEkjqta0B/GHrM1pxzuuZz2zWsOXc5nKu3t+76s/PQBA8FTcM/ipspIH9jWG4OxCBc2eA==}
+    engines: {node: '>=0.10.0'}
+
+  arr-union@3.1.0:
+    resolution: {integrity: sha512-sKpyeERZ02v1FeCZT8lrfJq5u6goHCtpTAzPwJYe7c8SPFOboNjNg1vz2L4VTn9T4PQxEx13TbXLmYUcS6Ug7Q==}
+    engines: {node: '>=0.10.0'}
+
+  array-back@6.2.2:
+    resolution: {integrity: sha512-gUAZ7HPyb4SJczXAMUXMGAvI976JoK3qEx9v1FTmeYuJj0IBiaKttG1ydtGKdkfqWkIkouke7nG8ufGy77+Cvw==}
+    engines: {node: '>=12.17'}
+
+  array-buffer-byte-length@1.0.2:
+    resolution: {integrity: sha512-LHE+8BuR7RYGDKvnrmcuSq3tDcKv9OFEXQt/HpbZhY7V6h0zlUXutnAD82GiFx9rdieCMjkvtcsPqBwgUl1Iiw==}
+    engines: {node: '>= 0.4'}
+
+  array-differ@1.0.0:
+    resolution: {integrity: sha512-LeZY+DZDRnvP7eMuQ6LHfCzUGxAAIViUBliK24P3hWXL6y4SortgR6Nim6xrkfSLlmH0+k+9NYNwVC2s53ZrYQ==}
+    engines: {node: '>=0.10.0'}
+
+  array-each@1.0.1:
+    resolution: {integrity: sha512-zHjL5SZa68hkKHBFBK6DJCTtr9sfTCPCaph/L7tMSLcTFgy+zX7E+6q5UArbtOtMBCtxdICpfTCspRse+ywyXA==}
+    engines: {node: '>=0.10.0'}
+
+  array-initial@1.1.0:
+    resolution: {integrity: sha512-BC4Yl89vneCYfpLrs5JU2aAu9/a+xWbeKhvISg9PT7eWFB9UlRvI+rKEtk6mgxWr3dSkk9gQ8hCrdqt06NXPdw==}
+    engines: {node: '>=0.10.0'}
+
+  array-last@1.3.0:
+    resolution: {integrity: sha512-eOCut5rXlI6aCOS7Z7kCplKRKyiFQ6dHFBem4PwlwKeNFk2/XxTrhRh5T9PyaEWGy/NHTZWbY+nsZlNFJu9rYg==}
+    engines: {node: '>=0.10.0'}
+
+  array-slice@0.2.3:
+    resolution: {integrity: sha512-rlVfZW/1Ph2SNySXwR9QYkChp8EkOEiTMO5Vwx60usw04i4nWemkm9RXmQqgkQFaLHsqLuADvjp6IfgL9l2M8Q==}
+    engines: {node: '>=0.10.0'}
+
+  array-slice@1.1.0:
+    resolution: {integrity: sha512-B1qMD3RBP7O8o0H2KbrXDyB0IccejMF15+87Lvlor12ONPRHP6gTjXMNkt/d3ZuOGbAe66hFmaCfECI24Ufp6w==}
+    engines: {node: '>=0.10.0'}
+
+  array-sort@1.0.0:
+    resolution: {integrity: sha512-ihLeJkonmdiAsD7vpgN3CRcx2J2S0TiYW+IS/5zHBI7mKUq3ySvBdzzBfD236ubDBQFiiyG3SWCPc+msQ9KoYg==}
+    engines: {node: '>=0.10.0'}
+
+  array-union@1.0.2:
+    resolution: {integrity: sha512-Dxr6QJj/RdU/hCaBjOfxW+q6lyuVE6JFWIrAUpuOOhoJJoQ99cUn3igRaHVB5P9WrgFVN0FfArM3x0cueOU8ng==}
+    engines: {node: '>=0.10.0'}
+
+  array-uniq@1.0.3:
+    resolution: {integrity: sha512-MNha4BWQ6JbwhFhj03YK552f7cb3AzoE8SzeljgChvL1dl3IcvggXVz1DilzySZkCja+CXuZbdW7yATchWn8/Q==}
+    engines: {node: '>=0.10.0'}
+
+  array-unique@0.3.2:
+    resolution: {integrity: sha512-SleRWjh9JUud2wH1hPs9rZBZ33H6T9HOiL0uwGnGx9FpE6wKGyfWugmbkEOIs6qWrZhg0LWeLziLrEwQJhs5mQ==}
+    engines: {node: '>=0.10.0'}
+
+  arraybuffer.prototype.slice@1.0.4:
+    resolution: {integrity: sha512-BNoCY6SXXPQ7gF2opIP4GBE+Xw7U+pHMYKuzjgCN3GwiaIR09UUeKfheyIry77QtrCBlC0KK0q5/TER/tYh3PQ==}
+    engines: {node: '>= 0.4'}
+
+  arrify@1.0.1:
+    resolution: {integrity: sha512-3CYzex9M9FGQjCGMGyi6/31c8GJbgb0qGyrx5HWxPd0aCwh4cB2YjMb2Xf9UuoogrMrlO9cTqnB5rI5GHZTcUA==}
+    engines: {node: '>=0.10.0'}
+
+  asar@3.2.0:
+    resolution: {integrity: sha512-COdw2ZQvKdFGFxXwX3oYh2/sOsJWJegrdJCGxnN4MZ7IULgRBp9P6665aqj9z1v9VwP4oP1hRBojRDQ//IGgAg==}
+    engines: {node: '>=10.12.0'}
+    deprecated: Please use @electron/asar moving forward.  There is no API change, just a package name change
+    hasBin: true
+
+  assign-symbols@1.0.0:
+    resolution: {integrity: sha512-Q+JC7Whu8HhmTdBph/Tq59IoRtoy6KAm5zzPv00WdujX82lbAL8K7WVjne7vdCsAmbF4AYaDOPyO3k0kl8qIrw==}
+    engines: {node: '>=0.10.0'}
+
+  async-done@1.3.2:
+    resolution: {integrity: sha512-uYkTP8dw2og1tu1nmza1n1CMW0qb8gWWlwqMmLb7MhBVs4BXrFziT6HXUd+/RlRA/i4H9AkofYloUbs1fwMqlw==}
+    engines: {node: '>= 0.10'}
+
+  async-each@1.0.6:
+    resolution: {integrity: sha512-c646jH1avxr+aVpndVMeAfYw7wAa6idufrlN3LPA4PmKS0QEGp6PIC9nwz0WQkkvBGAMEki3pFdtxaF39J9vvg==}
+
+  async-function@1.0.0:
+    resolution: {integrity: sha512-hsU18Ae8CDTR6Kgu9DYf0EbCr/a5iGL0rytQDobUcdpYOKokk8LEjVphnXkDkgpi0wYVsqrXuP0bZxJaTqdgoA==}
+    engines: {node: '>= 0.4'}
+
+  async-settle@1.0.0:
+    resolution: {integrity: sha512-VPXfB4Vk49z1LHHodrEQ6Xf7W4gg1w0dAPROHngx7qgDjqmIQ+fXmwgGXTW/ITLai0YLSvWepJOP9EVpMnEAcw==}
+    engines: {node: '>= 0.10'}
+
+  atob@2.1.2:
+    resolution: {integrity: sha512-Wm6ukoaOGJi/73p/cl2GvLjTI5JM1k/O14isD73YML8StrH/7/lRFgmg8nICZgD3bZZvjwCGxtMOD3wWNAu8cg==}
+    engines: {node: '>= 4.5.0'}
+    hasBin: true
+
+  available-typed-arrays@1.0.7:
+    resolution: {integrity: sha512-wvUjBtSGN7+7SjNpq/9M2Tg350UZD3q62IFZLbRAR1bSMlCo1ZaeW+BJ+D090e4hIIZLBcTDWe4Mh4jvUDajzQ==}
+    engines: {node: '>= 0.4'}
+
+  b4a@1.6.7:
+    resolution: {integrity: sha512-OnAYlL5b7LEkALw87fUVafQw5rVR9RjwGd4KUwNQ6DrrNmaVaUCgLipfVlzrPQ4tWOR9P0IXGNOx50jYCCdSJg==}
+
+  bach@1.2.0:
+    resolution: {integrity: sha512-bZOOfCb3gXBXbTFXq3OZtGR88LwGeJvzu6szttaIzymOTS4ZttBNOWSv7aLZja2EMycKtRYV0Oa8SNKH/zkxvg==}
+    engines: {node: '>= 0.10'}
+
+  balanced-match@1.0.2:
+    resolution: {integrity: sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==}
+
+  bare-events@2.6.0:
+    resolution: {integrity: sha512-EKZ5BTXYExaNqi3I3f9RtEsaI/xBSGjE0XZCZilPzFAV/goswFHuPd9jEZlPIZ/iNZJwDSao9qRiScySz7MbQg==}
+
+  bare-fs@4.1.6:
+    resolution: {integrity: sha512-25RsLF33BqooOEFNdMcEhMpJy8EoR88zSMrnOQOaM3USnOK2VmaJ1uaQEwPA6AQjrv1lXChScosN6CzbwbO9OQ==}
+    engines: {bare: '>=1.16.0'}
+    peerDependencies:
+      bare-buffer: '*'
+    peerDependenciesMeta:
+      bare-buffer:
+        optional: true
+
+  bare-os@3.6.1:
+    resolution: {integrity: sha512-uaIjxokhFidJP+bmmvKSgiMzj2sV5GPHaZVAIktcxcpCyBFFWO+YlikVAdhmUo2vYFvFhOXIAlldqV29L8126g==}
+    engines: {bare: '>=1.14.0'}
+
+  bare-path@3.0.0:
+    resolution: {integrity: sha512-tyfW2cQcB5NN8Saijrhqn0Zh7AnFNsnczRcuWODH0eYAXBsJ5gVxAUuNr7tsHSC6IZ77cA0SitzT+s47kot8Mw==}
+
+  bare-stream@2.6.5:
+    resolution: {integrity: sha512-jSmxKJNJmHySi6hC42zlZnq00rga4jjxcgNZjY9N5WlOe/iOoGRtdwGsHzQv2RlH2KOYMwGUXhf2zXd32BA9RA==}
+    peerDependencies:
+      bare-buffer: '*'
+      bare-events: '*'
+    peerDependenciesMeta:
+      bare-buffer:
+        optional: true
+      bare-events:
+        optional: true
+
+  base64-js@1.5.1:
+    resolution: {integrity: sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==}
+
+  base@0.11.2:
+    resolution: {integrity: sha512-5T6P4xPgpp0YDFvSWwEZ4NoE3aM4QBQXDzmVbraCkFj8zHM+mba8SyqB5DbZWyR7mYHo6Y7BdQo3MoA4m0TeQg==}
+    engines: {node: '>=0.10.0'}
+
+  basic-auth@2.0.1:
+    resolution: {integrity: sha512-NF+epuEdnUYVlGuhaxbbq+dvJttwLnGY+YixlXlME5KpQ5W3CnXA5cVTneY3SPbPDRkcjMbifrwmFYcClgOZeg==}
+    engines: {node: '>= 0.8'}
+
+  before-after-hook@4.0.0:
+    resolution: {integrity: sha512-q6tR3RPqIB1pMiTRMFcZwuG5T8vwp+vUvEG0vuI6B+Rikh5BfPp2fQ82c925FOs+b0lcFQ8CFrL+KbilfZFhOQ==}
+
+  big.js@5.2.2:
+    resolution: {integrity: sha512-vyL2OymJxmarO8gxMr0mhChsO9QGwhynfuu4+MHTAW6czfq9humCB7rKpUjDd9YUiDPU4mzpyupFSvOClAwbmQ==}
+
+  binary-extensions@1.13.1:
+    resolution: {integrity: sha512-Un7MIEDdUC5gNpcGDV97op1Ywk748MpHcFTHoYs6qnj1Z3j7I53VG3nwZhKzoBZmbdRNnb6WRdFlwl7tSDuZGw==}
+    engines: {node: '>=0.10.0'}
+
+  binary-extensions@2.3.0:
+    resolution: {integrity: sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==}
+    engines: {node: '>=8'}
+
+  binaryextensions@1.0.1:
+    resolution: {integrity: sha512-xnG0l4K3ghM62rFzDi2jcNEuICl6uQ4NgvGpqQsY7HgW8gPDeAWGOxHI/k+qZfXfMANytzrArGNPXidaCwtbmA==}
+
+  bindings@1.5.0:
+    resolution: {integrity: sha512-p2q/t/mhvuOj/UeLlV6566GD/guowlr0hHxClI0W9m7MWYkL1F0hLo+0Aexs9HSPCtR1SXQ0TD3MMKrXZajbiQ==}
+
+  bl@4.1.0:
+    resolution: {integrity: sha512-1W07cM9gS6DcLperZfFSj+bWLtaPGSOHWhPiGzXmvVJbRLdG82sH/Kn8EtW1VqWVA54AKf2h5k5BbnIbwF3h6w==}
+
+  block-stream@0.0.9:
+    resolution: {integrity: sha512-OorbnJVPII4DuUKbjARAe8u8EfqOmkEEaSFIyoQ7OjTHn6kafxWl0wLgoZ2rXaYd7MyLcDaU4TmhfxtwgcccMQ==}
+    engines: {node: 0.4 || >=0.5.8}
+
+  boolbase@1.0.0:
+    resolution: {integrity: sha512-JZOSA7Mo9sNGB8+UjSgzdLtokWAky1zbztM3WRLCbZ70/3cTANmQmOdR7y2g+J0e2WXywy1yS468tY+IruqEww==}
+
+  boolean@3.2.0:
+    resolution: {integrity: sha512-d0II/GO9uf9lfUHH2BQsjxzRJZBdsjgsBiW4BvhWk/3qoKwQFjIDVN19PfX8F2D/r9PCMTtLWjYVCFrpeYUzsw==}
+    deprecated: Package no longer supported. Contact Support at https://www.npmjs.com/support for more info.
+
+  brace-expansion@1.1.12:
+    resolution: {integrity: sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==}
+
+  brace-expansion@2.0.2:
+    resolution: {integrity: sha512-Jt0vHyM+jmUBqojB7E1NIYadt0vI0Qxjxd2TErW94wDz+E2LAm5vKMXXwg6ZZBTHPuUlDgQHKXvjGBdfcF1ZDQ==}
+
+  braces@2.3.2:
+    resolution: {integrity: sha512-aNdbnj9P8PjdXU4ybaWLK2IF3jc/EoDYbC7AazW6to3TRsfXxscC9UXOB5iDiEQrkyIbWp2SLQda4+QAa7nc3w==}
+    engines: {node: '>=0.10.0'}
+
+  braces@3.0.3:
+    resolution: {integrity: sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==}
+    engines: {node: '>=8'}
+
+  browser-stdout@1.3.1:
+    resolution: {integrity: sha512-qhAVI1+Av2X7qelOfAIYwXONood6XlZE/fXaBSmW/T5SzLAmCgzi+eiWE7fUvbHaeNBQH13UftjpXxsfLkMpgw==}
+
+  browserify-zlib@0.1.4:
+    resolution: {integrity: sha512-19OEpq7vWgsH6WkvkBJQDFvJS1uPcbFOQ4v9CU839dO+ZZXUZO6XpE6hNCqvlIIj+4fZvRiJ6DsAQ382GwiyTQ==}
+
+  browserslist@4.25.1:
+    resolution: {integrity: sha512-KGj0KoOMXLpSNkkEI6Z6mShmQy0bc1I+T7K9N81k4WWMrfz+6fQ6es80B/YLAeRoKvjYE1YSHHOW1qe9xIVzHw==}
+    engines: {node: ^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7}
+    hasBin: true
+
+  buffer-crc32@0.2.13:
+    resolution: {integrity: sha512-VO9Ht/+p3SN7SKWqcrgEzjGbRSJYTx+Q1pTQC0wrWqHx0vpJraQ6GtHx8tvcg1rlK1byhU5gccxgOgj7B0TDkQ==}
+
+  buffer-equal@1.0.1:
+    resolution: {integrity: sha512-QoV3ptgEaQpvVwbXdSO39iqPQTCxSF7A5U99AxbHYqUdCizL/lH2Z0A2y6nbZucxMEOtNyZfG2s6gsVugGpKkg==}
+    engines: {node: '>=0.4'}
+
+  buffer-from@1.1.2:
+    resolution: {integrity: sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==}
+
+  buffer@5.7.1:
+    resolution: {integrity: sha512-EHcyIPBQ4BSGlvjB16k5KgAJ27CIsHY/2JBmCRReo48y9rQ3MaUzWX3KVlBa4U7MyX02HdVj0K7C3WaB3ju7FQ==}
+
+  bundle-require@5.1.0:
+    resolution: {integrity: sha512-3WrrOuZiyaaZPWiEt4G3+IffISVC9HYlWueJEBWED4ZH4aIAC2PnkdnuRrR94M+w6yGWn4AglWtJtBI8YqvgoA==}
+    engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}
+    peerDependencies:
+      esbuild: '>=0.18'
+
+  bytes@3.1.2:
+    resolution: {integrity: sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==}
+    engines: {node: '>= 0.8'}
+
+  c8@9.1.0:
+    resolution: {integrity: sha512-mBWcT5iqNir1zIkzSPyI3NCR9EZCVI3WUD+AVO17MVWTSFNyUueXE82qTeampNtTr+ilN/5Ua3j24LgbCKjDVg==}
+    engines: {node: '>=14.14.0'}
+    hasBin: true
+
+  cac@6.7.14:
+    resolution: {integrity: sha512-b6Ilus+c3RrdDk+JhLKUAQfzzgLEPy6wcXqS7f/xe1EETvsDP6GORG7SFuOs6cID5YkqchW/LXZbX5bc8j7ZcQ==}
+    engines: {node: '>=8'}
+
+  cache-base@1.0.1:
+    resolution: {integrity: sha512-AKcdTnFSWATd5/GCPRxr2ChwIJ85CeyrEyjRHlKxQ56d4XJMGym0uAiKn0xbLOGOl3+yRpOTi484dVCEc5AUzQ==}
+    engines: {node: '>=0.10.0'}
+
+  cache-content-type@1.0.1:
+    resolution: {integrity: sha512-IKufZ1o4Ut42YUrZSo8+qnMTrFuKkvyoLXUywKz9GJ5BrhOFGhLdkx9sG4KAnVvbY6kEcSFjLQul+DVmBm2bgA==}
+    engines: {node: '>= 6.0.0'}
+
+  cacheable-lookup@5.0.4:
+    resolution: {integrity: sha512-2/kNscPhpcxrOigMZzbiWF7dz8ilhb/nIHU3EyZiXWXpeq/au8qJ8VhdftMkty3n7Gj6HIGalQG8oiBNB3AJgA==}
+    engines: {node: '>=10.6.0'}
+
+  cacheable-lookup@7.0.0:
+    resolution: {integrity: sha512-+qJyx4xiKra8mZrcwhjMRMUhD5NR1R8esPkzIYxX96JiecFoxAXFuz/GpR3+ev4PE1WamHip78wV0vcmPQtp8w==}
+    engines: {node: '>=14.16'}
+
+  cacheable-request@12.0.1:
+    resolution: {integrity: sha512-Yo9wGIQUaAfIbk+qY0X4cDQgCosecfBe3V9NSyeY4qPC2SAkbCS4Xj79VP8WOzitpJUZKc/wsRCYF5ariDIwkg==}
+    engines: {node: '>=18'}
+
+  cacheable-request@7.0.4:
+    resolution: {integrity: sha512-v+p6ongsrp0yTGbJXjgxPow2+DL93DASP4kXCDKb8/bwRtt9OEF3whggkkDkGNzgcWy2XaF4a8nZglC7uElscg==}
+    engines: {node: '>=8'}
+
+  call-bind-apply-helpers@1.0.2:
+    resolution: {integrity: sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==}
+    engines: {node: '>= 0.4'}
+
+  call-bind@1.0.8:
+    resolution: {integrity: sha512-oKlSFMcMwpUg2ednkhQ454wfWiU/ul3CkJe/PEHcTKuiX6RpbehUiFMXu13HalGZxfUwCQzZG747YXBn1im9ww==}
+    engines: {node: '>= 0.4'}
+
+  call-bound@1.0.4:
+    resolution: {integrity: sha512-+ys997U96po4Kx/ABpBCqhA9EuxJaQWDQg7295H4hBphv3IZg0boBKuwYpt4YXp6MZ5AmZQnU/tyMTlRpaSejg==}
+    engines: {node: '>= 0.4'}
+
+  camelcase@3.0.0:
+    resolution: {integrity: sha512-4nhGqUkc4BqbBBB4Q6zLuD7lzzrHYrjKGeYaEji/3tFR5VdJu9v+LilhGIVe8wxEJPPOeWo7eg8dwY13TZ1BNg==}
+    engines: {node: '>=0.10.0'}
+
+  camelcase@5.3.1:
+    resolution: {integrity: sha512-L28STB170nwWS63UjtlEOE3dldQApaJXZkOI1uMFfzf3rRuPegHaHesyee+YxQ+W6SvRDQV6UrdOdRiR153wJg==}
+    engines: {node: '>=6'}
+
+  camelcase@6.3.0:
+    resolution: {integrity: sha512-Gmy6FhYlCY7uOElZUSbxo2UCDH8owEk996gkbrpsgGtrJLM3J7jGxl9Ic7Qwwj4ivOE5AWZWRMecDdF7hqGjFA==}
+    engines: {node: '>=10'}
+
+  caniuse-api@3.0.0:
+    resolution: {integrity: sha512-bsTwuIg/BZZK/vreVTYYbSWoe2F+71P7K5QGEX+pT250DZbfU1MQ5prOKpPR+LL6uWKK3KMwMCAS74QB3Um1uw==}
+
+  caniuse-lite@1.0.30001727:
+    resolution: {integrity: sha512-pB68nIHmbN6L/4C6MH1DokyR3bYqFwjaSs/sWDHGj4CTcFtQUQMuJftVwWkXq7mNWOybD3KhUv3oWHoGxgP14Q==}
+
+  chalk@1.1.3:
+    resolution: {integrity: sha512-U3lRVLMSlsCfjqYPbLyVv11M9CPW4I728d6TCKMAOJueEeB9/8o+eSsMnxPJD+Q+K909sdESg7C+tIkoH6on1A==}
+    engines: {node: '>=0.10.0'}
+
+  chalk@2.4.2:
+    resolution: {integrity: sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==}
+    engines: {node: '>=4'}
+
+  chalk@4.1.2:
+    resolution: {integrity: sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==}
+    engines: {node: '>=10'}
+
+  chalk@5.4.1:
+    resolution: {integrity: sha512-zgVZuo2WcZgfUEmsn6eO3kINexW8RAE4maiQ8QNs8CtpPCSyMiYsULR3HQYkm3w8FIA3SberyMJMSldGsW+U3w==}
+    engines: {node: ^12.17.0 || ^14.13 || >=16.0.0}
+
+  charenc@0.0.2:
+    resolution: {integrity: sha512-yrLQ/yVUFXkzg7EDQsPieE/53+0RlaWTs+wBrvW36cyilJ2SaDWfl4Yj7MtLTXleV9uEKefbAGUPv2/iWSooRA==}
+
+  chokidar@2.1.8:
+    resolution: {integrity: sha512-ZmZUazfOzf0Nve7duiCKD23PFSCs4JPoYyccjUFF3aQkQadqBhfzhjkwBH2mNOG9cTBwhamM37EIsIkZw3nRgg==}
+
+  chokidar@3.6.0:
+    resolution: {integrity: sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==}
+    engines: {node: '>= 8.10.0'}
+
+  chokidar@4.0.3:
+    resolution: {integrity: sha512-Qgzu8kfBvo+cA4962jnP1KkS6Dop5NS6g7R5LFYJr4b8Ub94PPQXUksCw9PvXoeXPRRddRNC5C1JQUR2SMGtnA==}
+    engines: {node: '>= 14.16.0'}
+
+  chownr@1.1.4:
+    resolution: {integrity: sha512-jJ0bqzaylmJtVnNgzTeSOs8DPavpbYgEr/b0YL8/2GO3xJEhInFmhKMUnEJQjZumK7KXGFhUy89PrsJWlakBVg==}
+
+  chownr@2.0.0:
+    resolution: {integrity: sha512-bIomtDF5KGpdogkLd9VspvFzk9KfpyyGlS8YFVZl7TGPBHL5snIOnxeshwVgPteQ9b4Eydl+pVbIyE1DcvCWgQ==}
+    engines: {node: '>=10'}
+
+  chrome-remote-interface@0.33.3:
+    resolution: {integrity: sha512-zNnn0prUL86Teru6UCAZ1yU1XeXljHl3gj7OrfPcarEfU62OUU4IujDPdTDW3dAWwRqN3ZMG/Chhkh2gPL/wiw==}
+    hasBin: true
+
+  chrome-trace-event@1.0.4:
+    resolution: {integrity: sha512-rNjApaLzuwaOTjCiT8lSDdGN1APCiqkChLMJxJPWLunPAt5fy8xgU9/jNOchV84wfIxrA0lRQB7oCT8jrn/wrQ==}
+    engines: {node: '>=6.0'}
+
+  chromium-pickle-js@0.2.0:
+    resolution: {integrity: sha512-1R5Fho+jBq0DDydt+/vHWj5KJNJCKdARKOCwZUen84I5BreWoLqRLANH1U87eJy1tiASPtMnGqJJq0ZsLoRPOw==}
+
+  ci-info@1.6.0:
+    resolution: {integrity: sha512-vsGdkwSCDpWmP80ncATX7iea5DWQemg1UgCW5J8tqjU3lYw4FBYuj89J0CTVomA7BEfvSZd84GmHko+MxFQU2A==}
+
+  class-utils@0.3.6:
+    resolution: {integrity: sha512-qOhPa/Fj7s6TY8H8esGu5QNpMMQxz79h+urzrNYN6mn+9BnxlDGf5QZ+XeCDsxSjPqsSR56XOZOJmpeurnLMeg==}
+    engines: {node: '>=0.10.0'}
+
+  cli-cursor@5.0.0:
+    resolution: {integrity: sha512-aCj4O5wKyszjMmDT4tZj93kxyydN/K5zPWSCe6/0AV/AA1pqe5ZBIw0a2ZfPQV7lL5/yb5HsUreJ6UFAF1tEQw==}
+    engines: {node: '>=18'}
+
+  cli-spinners@2.9.2:
+    resolution: {integrity: sha512-ywqV+5MmyL4E7ybXgKys4DugZbX0FC6LnwrhjuykIjnK9k8OQacQ7axGKnjDXWNhns0xot3bZI5h55H8yo9cJg==}
+    engines: {node: '>=6'}
+
+  cliui@3.2.0:
+    resolution: {integrity: sha512-0yayqDxWQbqk3ojkYqUKqaAQ6AfNKeKWRNA8kR0WXzAsdHpP4BIaOmMAG87JGuO6qcobyW4GjxHd9PmhEd+T9w==}
+
+  cliui@6.0.0:
+    resolution: {integrity: sha512-t6wbgtoCXvAzst7QgXxJYqPt0usEfbgQdftEPbLL/cvv6HPE5VgvqCuAIDR0NgU52ds6rFwqrgakNLrHEjCbrQ==}
+
+  cliui@7.0.4:
+    resolution: {integrity: sha512-OcRE68cOsVMXp1Yvonl/fzkQOyjLSu/8bhPDfQt0e0/Eb283TKP20Fs2MqoPsr9SwA595rRCA+QMzYc9nBP+JQ==}
+
+  cliui@8.0.1:
+    resolution: {integrity: sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==}
+    engines: {node: '>=12'}
+
+  clone-buffer@1.0.0:
+    resolution: {integrity: sha512-KLLTJWrvwIP+OPfMn0x2PheDEP20RPUcGXj/ERegTgdmPEZylALQldygiqrPPu8P45uNuPs7ckmReLY6v/iA5g==}
+    engines: {node: '>= 0.10'}
+
+  clone-deep@4.0.1:
+    resolution: {integrity: sha512-neHB9xuzh/wk0dIHweyAXv2aPGZIVk3pLMe+/RNzINf17fe0OG96QroktYAUm7SM1PBnzTabaLboqqxDyMU+SQ==}
+    engines: {node: '>=6'}
+
+  clone-response@1.0.3:
+    resolution: {integrity: sha512-ROoL94jJH2dUVML2Y/5PEDNaSHgeOdSDicUyS7izcF63G6sTc/FTjLub4b8Il9S8S0beOfYt0TaA5qvFK+w0wA==}
+
+  clone-stats@0.0.1:
+    resolution: {integrity: sha512-dhUqc57gSMCo6TX85FLfe51eC/s+Im2MLkAgJwfaRRexR2tA4dd3eLEW4L6efzHc2iNorrRRXITifnDLlRrhaA==}
+
+  clone-stats@1.0.0:
+    resolution: {integrity: sha512-au6ydSpg6nsrigcZ4m8Bc9hxjeW+GJ8xh5G3BJCMt4WXe1H10UNaVOamqQTmrx1kjVuxAHIQSNU6hY4Nsn9/ag==}
+
+  clone@1.0.4:
+    resolution: {integrity: sha512-JQHZ2QMW6l3aH/j6xCqQThY/9OH4D/9ls34cgkUBiEeocRTU04tHfKPBsUK1PqZCUQM7GiA0IIXJSuXHI64Kbg==}
+    engines: {node: '>=0.8'}
+
+  clone@2.1.2:
+    resolution: {integrity: sha512-3Pe/CF1Nn94hyhIYpjtiLhdCoEoz0DqQ+988E9gmeEdQZlojxnOb74wctFyuwWQHzqyf9X7C7MG8juUpqBJT8w==}
+    engines: {node: '>=0.8'}
+
+  cloneable-readable@1.1.3:
+    resolution: {integrity: sha512-2EF8zTQOxYq70Y4XKtorQupqF0m49MBz2/yf5Bj+MHjvpG3Hy7sImifnqD6UA+TKYxeSV+u6qqQPawN5UvnpKQ==}
+
+  co@4.6.0:
+    resolution: {integrity: sha512-QVb0dM5HvG+uaxitm8wONl7jltx8dqhfU33DcqtOZcLSVIKSDDLDi7+0LbAKiyI8hD9u42m2YxXSkMGWThaecQ==}
+    engines: {iojs: '>= 1.0.0', node: '>= 0.12.0'}
+
+  code-block-writer@13.0.3:
+    resolution: {integrity: sha512-Oofo0pq3IKnsFtuHqSF7TqBfr71aeyZDVJ0HpmqB7FBM2qEigL0iPONSCZSO9pE9dZTAxANe5XHG9Uy0YMv8cg==}
+
+  code-point-at@1.1.0:
+    resolution: {integrity: sha512-RpAVKQA5T63xEj6/giIbUEtZwJ4UFIc3ZtvEkiaUERylqe8xb5IvqcgOurZLahv93CLKfxcw5YI+DZcUBRyLXA==}
+    engines: {node: '>=0.10.0'}
+
+  collection-map@1.0.0:
+    resolution: {integrity: sha512-5D2XXSpkOnleOI21TG7p3T0bGAsZ/XknZpKBmGYyluO8pw4zA3K8ZlrBIbC4FXg3m6z/RNFiUFfT2sQK01+UHA==}
+    engines: {node: '>=0.10.0'}
+
+  collection-visit@1.0.0:
+    resolution: {integrity: sha512-lNkKvzEeMBBjUGHZ+q6z9pSJla0KWAQPvtzhEV9+iGyQYG+pBpl7xKDhxoNSOZH2hhv0v5k0y2yAM4o4SjoSkw==}
+    engines: {node: '>=0.10.0'}
+
+  color-convert@1.9.3:
+    resolution: {integrity: sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==}
+
+  color-convert@2.0.1:
+    resolution: {integrity: sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==}
+    engines: {node: '>=7.0.0'}
+
+  color-name@1.1.3:
+    resolution: {integrity: sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw==}
+
+  color-name@1.1.4:
+    resolution: {integrity: sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==}
+
+  color-support@1.1.3:
+    resolution: {integrity: sha512-qiBjkpbMLO/HL68y+lh4q0/O1MZFj2RX6X/KmMa3+gJD3z+WwI1ZzDHysvqHGS3mP6mznPckpXmw1nI9cJjyRg==}
+    hasBin: true
+
+  colord@2.9.3:
+    resolution: {integrity: sha512-jeC1axXpnb0/2nn/Y1LPuLdgXBLH7aDcHu4KEKfqw3CUhX7ZpfBSlPKyqXE6btIgEzfWtrX3/tyBCaCvXvMkOw==}
+
+  colorette@2.0.20:
+    resolution: {integrity: sha512-IfEDxwoWIjkeXL1eXcDiow4UbKjhLdq6/EuSVR9GMN7KVH3r9gQ83e73hsz1Nd1T3ijd5xv1wcWRYO+D6kCI2w==}
+
+  command-line-args@6.0.1:
+    resolution: {integrity: sha512-Jr3eByUjqyK0qd8W0SGFW1nZwqCaNCtbXjRo2cRJC1OYxWl3MZ5t1US3jq+cO4sPavqgw4l9BMGX0CBe+trepg==}
+    engines: {node: '>=12.20'}
+    peerDependencies:
+      '@75lb/nature': latest
+    peerDependenciesMeta:
+      '@75lb/nature':
+        optional: true
+
+  commander@10.0.1:
+    resolution: {integrity: sha512-y4Mg2tXshplEbSGzx7amzPwKKOCGuoSRP/CjEdwwk0FOGlUbq6lKuoyDZTNZkmxHdJtp54hdfY/JUrdL7Xfdug==}
+    engines: {node: '>=14'}
+
+  commander@2.11.0:
+    resolution: {integrity: sha512-b0553uYA5YAEGgyYIGYROzKQ7X5RAqedkfjiZxwi0kL1g3bOaBNNZfYkzt/CL0umgD5wc9Jec2FbB98CjkMRvQ==}
+
+  commander@2.20.3:
+    resolution: {integrity: sha512-GpVkmM8vF2vQUkj2LvZmD35JxeJOLCwJ9cUkugyk2nuhbv3+mJvpLYYt+0+USMxE+oj+ey/lJEnhZw75x/OMcQ==}
+
+  commander@4.1.1:
+    resolution: {integrity: sha512-NOKm8xhkzAjzFx8B2v5OAHT+u5pRQc2UCa2Vq9jYL/31o2wi9mxBA7LIFs3sV5VSC49z6pEhfbMULvShKj26WA==}
+    engines: {node: '>= 6'}
+
+  commander@5.1.0:
+    resolution: {integrity: sha512-P0CysNDQ7rtVw4QIQtm+MRxV66vKFSvlsQvGYXZWR3qFU0jlMKHZZZgw8e+8DSah4UDKMqnknRDQz+xuQXQ/Zg==}
+    engines: {node: '>= 6'}
+
+  commander@7.2.0:
+    resolution: {integrity: sha512-QrWXB+ZQSVPmIWIhtEO9H+gwHaMGYiF5ChvoJ+K9ZGHG/sVsa6yiesAD1GC/x46sET00Xlwo1u49RVVVzvcSkw==}
+    engines: {node: '>= 10'}
+
+  commander@9.5.0:
+    resolution: {integrity: sha512-KRs7WVDKg86PWiuAqhDrAQnTXZKraVcCc6vFdL14qrZ/DcWwuRo7VoiYXalXO7S5GKpqYiVEwCbgFDfxNHKJBQ==}
+    engines: {node: ^12.20.0 || >=14}
+
+  component-emitter@1.3.1:
+    resolution: {integrity: sha512-T0+barUSQRTUQASh8bx02dl+DhF54GtIDY13Y3m9oWTklKbb3Wv974meRpeZ3lp1JpLVECWWNHC4vaG2XHXouQ==}
+
+  concat-map@0.0.1:
+    resolution: {integrity: sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==}
+
+  concat-stream@1.6.2:
+    resolution: {integrity: sha512-27HBghJxjiZtIk3Ycvn/4kbJk/1uZuJFfuPEns6LaEvpvG1f0hTea8lilrouyo9mVc2GWdcEZ8OLoGmSADlrCw==}
+    engines: {'0': node >= 0.8}
+
+  confbox@0.1.8:
+    resolution: {integrity: sha512-RMtmw0iFkeR4YV+fUOSucriAQNb9g8zFR52MWCtl+cCZOFRNL6zeB395vPzFhEjjn4fMxXudmELnl/KF/WrK6w==}
+
+  config-chain@1.1.13:
+    resolution: {integrity: sha512-qj+f8APARXHrM0hraqXYb2/bOVSV4PvJQlNZ/DVj0QrmNM2q2euizkeuVckQ57J+W0mRH6Hvi+k50M4Jul2VRQ==}
+
+  consola@3.4.2:
+    resolution: {integrity: sha512-5IKcdX0nnYavi6G7TtOhwkYzyjfJlatbjMjuLSfE2kYT5pMDOilZ4OvMhi637CcDICTmz3wARPoyhqyX1Y+XvA==}
+    engines: {node: ^14.18.0 || >=16.10.0}
+
+  content-disposition@0.5.4:
+    resolution: {integrity: sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==}
+    engines: {node: '>= 0.6'}
+
+  content-type@1.0.5:
+    resolution: {integrity: sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==}
+    engines: {node: '>= 0.6'}
+
+  convert-source-map@1.9.0:
+    resolution: {integrity: sha512-ASFBup0Mz1uyiIjANan1jzLQami9z1PoYSZCiiYW2FczPbenXc45FZdBZLzOT+r6+iciuEModtmCti+hjaAk0A==}
+
+  convert-source-map@2.0.0:
+    resolution: {integrity: sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==}
+
+  cookie@0.7.2:
+    resolution: {integrity: sha512-yki5XnKuf750l50uGTllt6kKILY4nQ1eNIQatoXEByZ5dWgnKqbnqmTrBE5B4N7lrMJKQ2ytWMiTO2o0v6Ew/w==}
+    engines: {node: '>= 0.6'}
+
+  cookies@0.9.1:
+    resolution: {integrity: sha512-TG2hpqe4ELx54QER/S3HQ9SRVnQnGBtKUz5bLQWtYAQ+o6GpgMs6sYUvaiJjVxb+UXwhRhAEP3m7LbsIZ77Hmw==}
+    engines: {node: '>= 0.8'}
+
+  copy-descriptor@0.1.1:
+    resolution: {integrity: sha512-XgZ0pFcakEUlbwQEVNg3+QAis1FyTL3Qel9FYy8pSkQqoG3PNoT0bOCQtOXcOkur21r2Eq2kI+IE+gsmAEVlYw==}
+    engines: {node: '>=0.10.0'}
+
+  copy-props@2.0.5:
+    resolution: {integrity: sha512-XBlx8HSqrT0ObQwmSzM7WE5k8FxTV75h1DX1Z3n6NhQ/UYYAvInWYmG06vFt7hQZArE2fuO62aihiWIVQwh1sw==}
+
+  copy-webpack-plugin@11.0.0:
+    resolution: {integrity: sha512-fX2MWpamkW0hZxMEg0+mYnA40LTosOSa5TqZ9GYIBzyJa9C3QUaMPSE2xAi/buNr8u89SfD9wHSQVBzrRa/SOQ==}
+    engines: {node: '>= 14.15.0'}
+    peerDependencies:
+      webpack: ^5.1.0
+
+  core-util-is@1.0.3:
+    resolution: {integrity: sha512-ZQBvi1DcpJ4GDqanjucZ2Hj3wEO5pZDS89BWbkcrvdxksJorwUDDZamX9ldFkp9aw2lmBDLgkObEA4DWNJ9FYQ==}
+
+  create-require@1.1.1:
+    resolution: {integrity: sha512-dcKFX3jn0MpIaXjisoRvexIJVEKzaq7z2rZKxf+MSr9TkdmHmsU4m2lcLojrj/FHl8mk5VxMmYA+ftRkP/3oKQ==}
+
+  cross-spawn-windows-exe@1.2.0:
+    resolution: {integrity: sha512-mkLtJJcYbDCxEG7Js6eUnUNndWjyUZwJ3H7bErmmtOYU/Zb99DyUkpamuIZE0b3bhmJyZ7D90uS6f+CGxRRjOw==}
+    engines: {node: '>= 10'}
+
+  cross-spawn@6.0.6:
+    resolution: {integrity: sha512-VqCUuhcd1iB+dsv8gxPttb5iZh/D0iubSP21g36KXdEuf6I5JiioesUVjpCdHV9MZRUfVFlvwtIUyPfxo5trtw==}
+    engines: {node: '>=4.8'}
+
+  cross-spawn@7.0.6:
+    resolution: {integrity: sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==}
+    engines: {node: '>= 8'}
+
+  crypt@0.0.2:
+    resolution: {integrity: sha512-mCxBlsHFYh9C+HVpiEacem8FEBnMXgU9gy4zmNC+SXAZNB/1idgp/aulFJ4FgCi7GPEVbfyng092GqL2k2rmow==}
+
+  css-declaration-sorter@7.2.0:
+    resolution: {integrity: sha512-h70rUM+3PNFuaBDTLe8wF/cdWu+dOZmb7pJt8Z2sedYbAcQVQV/tEchueg3GWxwqS0cxtbxmaHEdkNACqcvsow==}
+    engines: {node: ^14 || ^16 || >=18}
+    peerDependencies:
+      postcss: ^8.0.9
+
+  css-loader@6.11.0:
+    resolution: {integrity: sha512-CTJ+AEQJjq5NzLga5pE39qdiSV56F8ywCIsqNIRF0r7BDgWsN25aazToqAFg7ZrtA/U016xudB3ffgweORxX7g==}
+    engines: {node: '>= 12.13.0'}
+    peerDependencies:
+      '@rspack/core': 0.x || 1.x
+      webpack: ^5.0.0
+    peerDependenciesMeta:
+      '@rspack/core':
+        optional: true
+      webpack:
+        optional: true
+
+  css-select@4.3.0:
+    resolution: {integrity: sha512-wPpOYtnsVontu2mODhA19JrqWxNsfdatRKd64kmpRbQgh1KtItko5sTnEpPdpSaJszTOhEMlF/RPz28qj4HqhQ==}
+
+  css-select@5.2.2:
+    resolution: {integrity: sha512-TizTzUddG/xYLA3NXodFM0fSbNizXjOKhqiQQwvhlspadZokn1KDy0NZFS0wuEubIYAV5/c1/lAr0TaaFXEXzw==}
+
+  css-tree@1.1.3:
+    resolution: {integrity: sha512-tRpdppF7TRazZrjJ6v3stzv93qxRcSsFmW6cX0Zm2NVKpxE1WV1HblnghVv9TreireHkqI/VDEsfolRF1p6y7Q==}
+    engines: {node: '>=8.0.0'}
+
+  css-tree@2.2.1:
+    resolution: {integrity: sha512-OA0mILzGc1kCOCSJerOeqDxDQ4HOh+G8NbOJFOTgOCzpw7fCBubk0fEyxp8AgOL/jvLgYA/uV0cMbe43ElF1JA==}
+    engines: {node: ^10 || ^12.20.0 || ^14.13.0 || >=15.0.0, npm: '>=7.0.0'}
+
+  css-tree@2.3.1:
+    resolution: {integrity: sha512-6Fv1DV/TYw//QF5IzQdqsNDjx/wc8TrMBZsqjL9eW01tWb7R7k/mq+/VXfJCl7SoD5emsJop9cOByJZfs8hYIw==}
+    engines: {node: ^10 || ^12.20.0 || ^14.13.0 || >=15.0.0}
+
+  css-what@6.2.2:
+    resolution: {integrity: sha512-u/O3vwbptzhMs3L1fQE82ZSLHQQfto5gyZzwteVIEyeaY5Fc7R4dapF/BvRoSYFeqfBk4m0V1Vafq5Pjv25wvA==}
+    engines: {node: '>= 6'}
+
+  css@3.0.0:
+    resolution: {integrity: sha512-DG9pFfwOrzc+hawpmqX/dHYHJG+Bsdb0klhyi1sDneOgGOXy9wQIC8hzyVp1e4NRYDBdxcylvywPkkXCHAzTyQ==}
+
+  cssesc@3.0.0:
+    resolution: {integrity: sha512-/Tb/JcjK111nNScGob5MNtsntNM1aCNUDipB/TkwZFhyDrrE47SOx/18wF2bbjgc3ZzCSKW1T5nt5EbFoAz/Vg==}
+    engines: {node: '>=4'}
+    hasBin: true
+
+  cssnano-preset-default@6.1.2:
+    resolution: {integrity: sha512-1C0C+eNaeN8OcHQa193aRgYexyJtU8XwbdieEjClw+J9d94E41LwT6ivKH0WT+fYwYWB0Zp3I3IZ7tI/BbUbrg==}
+    engines: {node: ^14 || ^16 || >=18.0}
+    peerDependencies:
+      postcss: ^8.4.31
+
+  cssnano-utils@4.0.2:
+    resolution: {integrity: sha512-ZR1jHg+wZ8o4c3zqf1SIUSTIvm/9mU343FMR6Obe/unskbvpGhZOo1J6d/r8D1pzkRQYuwbcH3hToOuoA2G7oQ==}
+    engines: {node: ^14 || ^16 || >=18.0}
+    peerDependencies:
+      postcss: ^8.4.31
+
+  cssnano@6.1.2:
+    resolution: {integrity: sha512-rYk5UeX7VAM/u0lNqewCdasdtPK81CgX8wJFLEIXHbV2oldWRgJAsZrdhRXkV1NJzA2g850KiFm9mMU2HxNxMA==}
+    engines: {node: ^14 || ^16 || >=18.0}
+    peerDependencies:
+      postcss: ^8.4.31
+
+  csso@4.2.0:
+    resolution: {integrity: sha512-wvlcdIbf6pwKEk7vHj8/Bkc0B4ylXZruLvOgs9doS5eOsOpuodOV2zJChSpkp+pRpYQLQMeF04nr3Z68Sta9jA==}
+    engines: {node: '>=8.0.0'}
+
+  csso@5.0.5:
+    resolution: {integrity: sha512-0LrrStPOdJj+SPCCrGhzryycLjwcgUSHBtxNA8aIDxf0GLsRh1cKYhB00Gd1lDOS4yGH69+SNn13+TWbVHETFQ==}
+    engines: {node: ^10 || ^12.20.0 || ^14.13.0 || >=15.0.0, npm: '>=7.0.0'}
+
+  d@1.0.2:
+    resolution: {integrity: sha512-MOqHvMWF9/9MX6nza0KgvFH4HpMU0EF5uUDXqX/BtxtU8NfB0QzRtJ8Oe/6SuS4kbhyzVJwjd97EA4PKrzJ8bw==}
+    engines: {node: '>=0.12'}
+
+  data-view-buffer@1.0.2:
+    resolution: {integrity: sha512-EmKO5V3OLXh1rtK2wgXRansaK1/mtVdTUEiEI0W8RkvgT05kfxaH29PliLnpLP73yYO6142Q72QNa8Wx/A5CqQ==}
+    engines: {node: '>= 0.4'}
+
+  data-view-byte-length@1.0.2:
+    resolution: {integrity: sha512-tuhGbE6CfTM9+5ANGf+oQb72Ky/0+s3xKUpHvShfiz2RxMFgFPjsXuRLBVMtvMs15awe45SRb83D6wH4ew6wlQ==}
+    engines: {node: '>= 0.4'}
+
+  data-view-byte-offset@1.0.1:
+    resolution: {integrity: sha512-BS8PfmtDGnrgYdOonGZQdLZslWIeCGFP9tpan0hi1Co2Zr2NKADsvGYA8XxuG/4UWgJ6Cjtv+YJnB6MM69QGlQ==}
+    engines: {node: '>= 0.4'}
+
+  debounce@1.2.1:
+    resolution: {integrity: sha512-XRRe6Glud4rd/ZGQfiV1ruXSfbvfJedlV9Y6zOlP+2K04vBYiJEte6stfFkCP03aMnY5tsipamumUjL14fofug==}
+
+  debug-fabulous@1.1.0:
+    resolution: {integrity: sha512-GZqvGIgKNlUnHUPQhepnUZFIMoi3dgZKQBzKDeL2g7oJF9SNAji/AAu36dusFUas0O+pae74lNeoIPHqXWDkLg==}
+
+  debug@2.6.9:
+    resolution: {integrity: sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==}
+    peerDependencies:
+      supports-color: '*'
+    peerDependenciesMeta:
+      supports-color:
+        optional: true
+
+  debug@3.2.7:
+    resolution: {integrity: sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==}
+    peerDependencies:
+      supports-color: '*'
+    peerDependenciesMeta:
+      supports-color:
+        optional: true
+
+  debug@4.4.1:
+    resolution: {integrity: sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==}
+    engines: {node: '>=6.0'}
+    peerDependencies:
+      supports-color: '*'
+    peerDependenciesMeta:
+      supports-color:
+        optional: true
+
+  decamelize@1.2.0:
+    resolution: {integrity: sha512-z2S+W9X73hAUUki+N+9Za2lBlun89zigOyGrsax+KUQ6wKW4ZoWpEYBkGhQjwAjjDCkWxhY0VKEhk8wzY7F5cA==}
+    engines: {node: '>=0.10.0'}
+
+  decamelize@4.0.0:
+    resolution: {integrity: sha512-9iE1PgSik9HeIIw2JO94IidnE3eBoQrFJ3w7sFuzSX4DpmZ3v5sZpUiV5Swcf6mQEF+Y0ru8Neo+p+nyh2J+hQ==}
+    engines: {node: '>=10'}
+
+  decode-uri-component@0.2.2:
+    resolution: {integrity: sha512-FqUYQ+8o158GyGTrMFJms9qh3CqTKvAqgqsTnkLI8sKu0028orqBhxNMFkFen0zGyg6epACD32pjVk58ngIErQ==}
+    engines: {node: '>=0.10'}
+
+  decompress-response@6.0.0:
+    resolution: {integrity: sha512-aW35yZM6Bb/4oJlZncMH2LCoZtJXTRxES17vE3hoRiowU2kWHaJKFkSBDnDR+cm9J+9QhXmREyIfv0pji9ejCQ==}
+    engines: {node: '>=10'}
+
+  deemon@1.13.5:
+    resolution: {integrity: sha512-mmQi4Rz7ehx/xmUoDKzYAfzoEIv0HIGuDL88aj7iIxxYq0OwxRc/edFqso+aUdgame1ZBGLoV4Ucd/5/WCmu4w==}
+    engines: {node: '>=10'}
+    hasBin: true
+
+  deep-equal@1.0.1:
+    resolution: {integrity: sha512-bHtC0iYvWhyaTzvV3CZgPeZQqCOBGyGsVV7v4eevpdkLHfiSrXUdBG+qAuSz4RI70sszvjQ1QSZ98An1yNwpSw==}
+
+  deep-extend@0.6.0:
+    resolution: {integrity: sha512-LOHxIOaPYdHlJRtCQfDIVZtfw/ufM8+rVj649RIHzcm/vGwQRXFt6OPqIFWsm2XEMrNIEtWR64sY1LEKD2vAOA==}
+    engines: {node: '>=4.0.0'}
+
+  deepmerge-json@1.5.0:
+    resolution: {integrity: sha512-jZRrDmBKjmGcqMFEUJ14FjMJwm05Qaked+1vxaALRtF0UAl7lPU8OLWXFxvoeg3jbQM249VPFVn8g2znaQkEtA==}
+    engines: {node: '>=4.0.0'}
+
+  deepmerge@4.3.1:
+    resolution: {integrity: sha512-3sUqbMEc77XqpdNO7FRyRog+eW3ph+GYCbj+rK+uYyRMuwsVy0rMiVtPn+QJlKFvWP/1PYpapqYn0Me2knFn+A==}
+    engines: {node: '>=0.10.0'}
+
+  default-compare@1.0.0:
+    resolution: {integrity: sha512-QWfXlM0EkAbqOCbD/6HjdwT19j7WCkMyiRhWilc4H9/5h/RzTF9gv5LYh1+CmDV5d1rki6KAWLtQale0xt20eQ==}
+    engines: {node: '>=0.10.0'}
+
+  default-resolution@2.0.0:
+    resolution: {integrity: sha512-2xaP6GiwVwOEbXCGoJ4ufgC76m8cj805jrghScewJC2ZDsb9U0b4BIrba+xt/Uytyd0HvQ6+WymSRTfnYj59GQ==}
+    engines: {node: '>= 0.10'}
+
+  defer-to-connect@2.0.1:
+    resolution: {integrity: sha512-4tvttepXG1VaYGrRibk5EwJd1t4udunSOVMdLSAL6mId1ix438oPwPZMALY41FCijukO1L0twNcGsdzS7dHgDg==}
+    engines: {node: '>=10'}
+
+  define-data-property@1.1.4:
+    resolution: {integrity: sha512-rBMvIzlpA8v6E+SJZoo++HAYqsLrkg7MSfIinMPFhmkorw7X+dOXVJQs+QT69zGkzMyfDnIMN2Wid1+NbL3T+A==}
+    engines: {node: '>= 0.4'}
+
+  define-lazy-prop@2.0.0:
+    resolution: {integrity: sha512-Ds09qNh8yw3khSjiJjiUInaGX9xlqZDY7JVryGxdxV7NPeuqQfplOpQ66yJFZut3jLa5zOwkXw1g9EI2uKh4Og==}
+    engines: {node: '>=8'}
+
+  define-properties@1.2.1:
+    resolution: {integrity: sha512-8QmQKqEASLd5nx0U1B1okLElbUuuttJ/AnYmRXbbbGDWh6uS208EjD4Xqq/I9wK7u0v6O08XhTWnt5XtEbR6Dg==}
+    engines: {node: '>= 0.4'}
+
+  define-property@0.2.5:
+    resolution: {integrity: sha512-Rr7ADjQZenceVOAKop6ALkkRAmH1A4Gx9hV/7ZujPUN2rkATqFO0JZLZInbAjpZYoJ1gUx8MRMQVkYemcbMSTA==}
+    engines: {node: '>=0.10.0'}
+
+  define-property@1.0.0:
+    resolution: {integrity: sha512-cZTYKFWspt9jZsMscWo8sc/5lbPC9Q0N5nBLgb+Yd915iL3udB1uFgS3B8YCx66UVHq018DAVFoee7x+gxggeA==}
+    engines: {node: '>=0.10.0'}
+
+  define-property@2.0.2:
+    resolution: {integrity: sha512-jwK2UV4cnPpbcG7+VRARKTZPUWowwXA8bzH5NP6ud0oeAxyYPuGZUAC7hMugpCdz4BeSZl2Dl9k66CHJ/46ZYQ==}
+    engines: {node: '>=0.10.0'}
+
+  delayed-stream@0.0.6:
+    resolution: {integrity: sha512-Si7mB08fdumvLNFddq3HQOoYf8BUxfITyZi+0RBn1sbojFm8c4gD1+3se7qVEji1uiVVLYE0Np0laaS9E+j6ag==}
+    engines: {node: '>=0.4.0'}
+
+  delegates@1.0.0:
+    resolution: {integrity: sha512-bd2L678uiWATM6m5Z1VzNCErI3jiGzt6HGY8OVICs40JQq/HALfbyNJmp0UDakEY4pMMaN0Ly5om/B1VI/+xfQ==}
+
+  depd@1.1.2:
+    resolution: {integrity: sha512-7emPTl6Dpo6JRXOXjLRxck+FlLRX5847cLKEn00PLAgc3g2hTZZgr+e4c2v6QpSmLeFP3n5yUo7ft6avBK/5jQ==}
+    engines: {node: '>= 0.6'}
+
+  depd@2.0.0:
+    resolution: {integrity: sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==}
+    engines: {node: '>= 0.8'}
+
+  destroy@1.2.0:
+    resolution: {integrity: sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==}
+    engines: {node: '>= 0.8', npm: 1.2.8000 || >= 1.4.16}
+
+  detect-file@1.0.0:
+    resolution: {integrity: sha512-DtCOLG98P007x7wiiOmfI0fi3eIKyWiLTGJ2MDnVi/E04lWGbf+JzrRHMm0rgIIZJGtHpKpbVgLWHrv8xXpc3Q==}
+    engines: {node: '>=0.10.0'}
+
+  detect-indent@6.1.0:
+    resolution: {integrity: sha512-reYkTUJAZb9gUuZ2RvVCNhVHdg62RHnJ7WJl8ftMi4diZ6NWlciOzQN88pUhSELEwflJht4oQDv0F0BMlwaYtA==}
+    engines: {node: '>=8'}
+
+  detect-libc@1.0.3:
+    resolution: {integrity: sha512-pGjwhsmsp4kL2RTz08wcOlGN83otlqHeD/Z5T8GXZB+/YcpQ/dgo+lbU8ZsGxV0HIvqqxo9l7mqYwyYMD9bKDg==}
+    engines: {node: '>=0.10'}
+    hasBin: true
+
+  detect-libc@2.0.4:
+    resolution: {integrity: sha512-3UDv+G9CsCKO1WKMGw9fwq/SWJYbI0c5Y7LU1AXYoDdbhE2AHQ6N6Nb34sG8Fj7T5APy8qXDCKuuIHd1BR0tVA==}
+    engines: {node: '>=8'}
+
+  detect-newline@2.1.0:
+    resolution: {integrity: sha512-CwffZFvlJffUg9zZA0uqrjQayUTC8ob94pnr5sFwaVv3IOmkfUHcWH+jXaQK3askE51Cqe8/9Ql/0uXNwqZ8Zg==}
+    engines: {node: '>=0.10.0'}
+
+  detect-node@2.1.0:
+    resolution: {integrity: sha512-T0NIuQpnTvFDATNuHN5roPwSBG83rFsuO+MXXH9/3N1eFbn4wcPjttvjMLEPWJ0RGUYgQE7cGgS3tNxbqCGM7g==}
+
+  diff@4.0.2:
+    resolution: {integrity: sha512-58lmxKSA4BNyLz+HHMUzlOEpg09FV+ev6ZMe3vJihgdxzgcwZ8VoEEPmALCZG9LmqfVoNMMKpttIYTVG6uDY7A==}
+    engines: {node: '>=0.3.1'}
+
+  diff@5.2.0:
+    resolution: {integrity: sha512-uIFDxqpRZGZ6ThOk84hEfqWoHx2devRFvpTZcTHur85vImfaxUbTW9Ryh4CpCuDnToOP1CEtXKIgytHBPVff5A==}
+    engines: {node: '>=0.3.1'}
+
+  dir-glob@3.0.1:
+    resolution: {integrity: sha512-WkrWp9GR4KXfKGYzOLmTuGVi1UWFfws377n9cc55/tb6DuqyF6pcQ5AbiHEshaDpY9v6oaSr2XCDidGmMwdzIA==}
+    engines: {node: '>=8'}
+
+  dom-serializer@1.4.1:
+    resolution: {integrity: sha512-VHwB3KfrcOOkelEG2ZOfxqLZdfkil8PtJi4P8N2MMXucZq2yLp75ClViUlOVwyoHEDjYU433Aq+5zWP61+RGag==}
+
+  dom-serializer@2.0.0:
+    resolution: {integrity: sha512-wIkAryiqt/nV5EQKqQpo3SToSOV9J0DnbJqwK7Wv/Trc92zIAYZ4FlMu+JPFW1DfGFt81ZTCGgDEabffXeLyJg==}
+
+  domelementtype@2.3.0:
+    resolution: {integrity: sha512-OLETBj6w0OsagBwdXnPdN0cnMfF9opN69co+7ZrbfPGrdpPVNBUj02spi6B1N7wChLQiPn4CSH/zJvXw56gmHw==}
+
+  domhandler@4.3.1:
+    resolution: {integrity: sha512-GrwoxYN+uWlzO8uhUXRl0P+kHE4GtVPfYzVLcUxPL7KNdHKj66vvlhiweIHqYYXWlw+T8iLMp42Lm67ghw4WMQ==}
+    engines: {node: '>= 4'}
+
+  domhandler@5.0.3:
+    resolution: {integrity: sha512-cgwlv/1iFQiFnU96XXgROh8xTeetsnJiDsTc7TYCLFd9+/WNkIqPTxiM/8pSd8VIrhXGTf1Ny1q1hquVqDJB5w==}
+    engines: {node: '>= 4'}
+
+  domutils@2.8.0:
+    resolution: {integrity: sha512-w96Cjofp72M5IIhpjgobBimYEfoPjx1Vx0BSX9P30WBdZW2WIKU0T1Bd0kz2eNZ9ikjKgHbEyKx8BB6H1L3h3A==}
+
+  domutils@3.2.2:
+    resolution: {integrity: sha512-6kZKyUajlDuqlHKVX1w7gyslj9MPIXzIFiz/rGu35uC1wMi+kMhQwGhl4lt9unC9Vb9INnY9Z3/ZA3+FhASLaw==}
+
+  dunder-proto@1.0.1:
+    resolution: {integrity: sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==}
+    engines: {node: '>= 0.4'}
+
+  duplexer@0.1.2:
+    resolution: {integrity: sha512-jtD6YG370ZCIi/9GTaJKQxWTZD045+4R4hTk/x1UyoqadyJ9x9CgSi1RlVDQF8U2sxLLSnFkCaMihqljHIWgMg==}
+
+  duplexify@3.7.1:
+    resolution: {integrity: sha512-07z8uv2wMyS51kKhD1KsdXJg5WQ6t93RneqRxUHnskXVtlYYkLqM0gqStQZ3pj073g687jPCHrqNfCzawLYh5g==}
+
+  each-props@1.3.2:
+    resolution: {integrity: sha512-vV0Hem3zAGkJAyU7JSjixeU66rwdynTAa1vofCrSA5fEln+m67Az9CcnkVD776/fsN/UjIWmBDoNRS6t6G9RfA==}
+
+  eastasianwidth@0.2.0:
+    resolution: {integrity: sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==}
+
+  editorconfig@1.0.4:
+    resolution: {integrity: sha512-L9Qe08KWTlqYMVvMcTIvMAdl1cDUubzRNYL+WfA4bLDMHe4nemKkpmYzkznE1FwLKu0EEmy6obgQKzMJrg4x9Q==}
+    engines: {node: '>=14'}
+    hasBin: true
+
+  ee-first@1.1.1:
+    resolution: {integrity: sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow==}
+
+  electron-to-chromium@1.5.191:
+    resolution: {integrity: sha512-xcwe9ELcuxYLUFqZZxL19Z6HVKcvNkIwhbHUz7L3us6u12yR+7uY89dSl570f/IqNthx8dAw3tojG7i4Ni4tDA==}
+
+  electron@34.4.1:
+    resolution: {integrity: sha512-iYzeLBdCrAR3i0RVSLa+mzuFZwH6HGxTGKsI+SS41sg2anZj4R5mHjOiHsxcZ50/ih47NJbuVRJgPIVlTF+USg==}
+    engines: {node: '>= 12.20.55'}
+    hasBin: true
+
+  emoji-regex@10.4.0:
+    resolution: {integrity: sha512-EC+0oUMY1Rqm4O6LLrgjtYDvcVYTy7chDnM4Q7030tP4Kwj3u/pR6gP9ygnp2CJMK5Gq+9Q2oqmrFJAz01DXjw==}
+
+  emoji-regex@8.0.0:
+    resolution: {integrity: sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==}
+
+  emoji-regex@9.2.2:
+    resolution: {integrity: sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==}
+
+  emojis-list@3.0.0:
+    resolution: {integrity: sha512-/kyM18EfinwXZbno9FyUGeFh87KC8HRQBQGildHZbEuRyWFOmv1U10o9BBp8XVZDVNNuQKyIGIu5ZYAAXJ0V2Q==}
+    engines: {node: '>= 4'}
+
+  encodeurl@1.0.2:
+    resolution: {integrity: sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==}
+    engines: {node: '>= 0.8'}
+
+  end-of-stream@1.4.5:
+    resolution: {integrity: sha512-ooEGc6HP26xXq/N+GCGOT0JKCLDGrq2bQUZrQ7gyrJiZANJ/8YDTxTpQBXGMn+WbIQXNVpyWymm7KYVICQnyOg==}
+
+  enhanced-resolve@5.18.2:
+    resolution: {integrity: sha512-6Jw4sE1maoRJo3q8MsSIn2onJFbLTOjY9hlx4DZXmOKvLRd1Ok2kXmAGXaafL2+ijsJZ1ClYbl/pmqr9+k4iUQ==}
+    engines: {node: '>=10.13.0'}
+
+  entities@2.2.0:
+    resolution: {integrity: sha512-p92if5Nz619I0w+akJrLZH0MX0Pb5DX39XOwQTtXSdQQOaYH03S1uIQp4mhOZtAXrxq4ViO67YTiLBo2638o9A==}
+
+  entities@4.5.0:
+    resolution: {integrity: sha512-V0hjH4dGPh9Ao5p0MoRY6BVqtwCjhz6vI5LT8AJ55H+4g9/4vbHx1I54fS0XuclLhDHArPQCiMjDxjaL8fPxhw==}
+    engines: {node: '>=0.12'}
+
+  env-paths@2.2.1:
+    resolution: {integrity: sha512-+h1lkLKhZMTYjog1VEpJNG7NZJWcuc2DDk/qsqSTRRCOXiLjeQ1d1/udrUGhqMxUgAlwKNZ0cf2uqan5GLuS2A==}
+    engines: {node: '>=6'}
+
+  env-paths@3.0.0:
+    resolution: {integrity: sha512-dtJUTepzMW3Lm/NPxRf3wP4642UWhjL2sQxc+ym2YMj1m/H2zDNQOlezafzkHwn6sMstjHTwG6iQQsctDW/b1A==}
+    engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}
+
+  envinfo@7.14.0:
+    resolution: {integrity: sha512-CO40UI41xDQzhLB1hWyqUKgFhs250pNcGbyGKe1l/e4FSaI/+YE4IMG76GDt0In67WLPACIITC+sOi08x4wIvg==}
+    engines: {node: '>=4'}
+    hasBin: true
+
+  errno@0.1.8:
+    resolution: {integrity: sha512-dJ6oBr5SQ1VSd9qkk7ByRgb/1SH4JZjCHSW/mr63/QcXO9zLVxvJ6Oy13nio03rxpSnVDDjFor75SjVeZWPW/A==}
+    hasBin: true
+
+  error-ex@1.3.2:
+    resolution: {integrity: sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==}
+
+  es-abstract@1.24.0:
+    resolution: {integrity: sha512-WSzPgsdLtTcQwm4CROfS5ju2Wa1QQcVeT37jFjYzdFz1r9ahadC8B8/a4qxJxM+09F18iumCdRmlr96ZYkQvEg==}
+    engines: {node: '>= 0.4'}
+
+  es-define-property@1.0.1:
+    resolution: {integrity: sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==}
+    engines: {node: '>= 0.4'}
+
+  es-errors@1.3.0:
+    resolution: {integrity: sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==}
+    engines: {node: '>= 0.4'}
+
+  es-module-lexer@1.7.0:
+    resolution: {integrity: sha512-jEQoCwk8hyb2AZziIOLhDqpm5+2ww5uIE6lkO/6jcOCusfk6LhMHpXXfBLXTZ7Ydyt0j4VoUQv6uGNYbdW+kBA==}
+
+  es-object-atoms@1.1.1:
+    resolution: {integrity: sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==}
+    engines: {node: '>= 0.4'}
+
+  es-set-tostringtag@2.1.0:
+    resolution: {integrity: sha512-j6vWzfrGVfyXxge+O0x5sh6cvxAog0a/4Rdd2K36zCMV5eJ+/+tOAngRO8cODMNWbVRdVlmGZQL2YS3yR8bIUA==}
+    engines: {node: '>= 0.4'}
+
+  es-to-primitive@1.3.0:
+    resolution: {integrity: sha512-w+5mJ3GuFL+NjVtJlvydShqE1eN3h3PbI7/5LAsYJP/2qtuMXjfL2LpHSRqo4b4eSF5K/DH1JXKUAHSB2UW50g==}
+    engines: {node: '>= 0.4'}
+
+  es5-ext@0.10.64:
+    resolution: {integrity: sha512-p2snDhiLaXe6dahss1LddxqEm+SkuDvV8dnIQG0MWjyHpcMNfXKPE+/Cc0y+PhxJX3A4xGNeFCj5oc0BUh6deg==}
+    engines: {node: '>=0.10'}
+
+  es6-error@4.1.1:
+    resolution: {integrity: sha512-Um/+FxMr9CISWh0bi5Zv0iOD+4cFh5qLeks1qhAopKVAJw3drgKbKySikp7wGhDL0HPeaja0P5ULZrxLkniUVg==}
+
+  es6-iterator@2.0.3:
+    resolution: {integrity: sha512-zw4SRzoUkd+cl+ZoE15A9o1oQd920Bb0iOJMQkQhl3jNc03YqVjAhG7scf9C5KWRU/R13Orf588uCC6525o02g==}
+
+  es6-symbol@3.1.4:
+    resolution: {integrity: sha512-U9bFFjX8tFiATgtkJ1zg25+KviIXpgRvRHS8sau3GfhVzThRQrOeksPeT0BWW2MNZs1OEWJ1DPXOQMn0KKRkvg==}
+    engines: {node: '>=0.12'}
+
+  es6-weak-map@2.0.3:
+    resolution: {integrity: sha512-p5um32HOTO1kP+w7PRnB+5lQ43Z6muuMuIMffvDN8ZB4GcnjLBV6zGStpbASIMk4DCAvEaamhe2zhyCb/QXXsA==}
+
+  esbuild@0.25.8:
+    resolution: {integrity: sha512-vVC0USHGtMi8+R4Kz8rt6JhEWLxsv9Rnu/lGYbPR8u47B+DCBksq9JarW0zOO7bs37hyOK1l2/oqtbciutL5+Q==}
+    engines: {node: '>=18'}
+    hasBin: true
+
+  escalade@3.2.0:
+    resolution: {integrity: sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==}
+    engines: {node: '>=6'}
+
+  escape-html@1.0.3:
+    resolution: {integrity: sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow==}
+
+  escape-string-regexp@1.0.5:
+    resolution: {integrity: sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg==}
+    engines: {node: '>=0.8.0'}
+
+  escape-string-regexp@4.0.0:
+    resolution: {integrity: sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==}
+    engines: {node: '>=10'}
+
+  eslint-scope@5.1.1:
+    resolution: {integrity: sha512-2NxwbF/hZ0KpepYN0cNbo+FN6XoK7GaHlQhgx/hIZl6Va0bF45RQOOwhLIy8lQDbuCiadSLCBnH2CFYquit5bw==}
+    engines: {node: '>=8.0.0'}
+
+  esniff@2.0.1:
+    resolution: {integrity: sha512-kTUIGKQ/mDPFoJ0oVfcmyJn4iBDRptjNVIzwIFR7tqWXdVI9xfA2RMwY/gbSpJG3lkdWNEjLap/NqVHZiJsdfg==}
+    engines: {node: '>=0.10'}
+
+  esrecurse@4.3.0:
+    resolution: {integrity: sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==}
+    engines: {node: '>=4.0'}
+
+  estraverse@4.3.0:
+    resolution: {integrity: sha512-39nnKffWz8xN1BU/2c79n9nB9HDzo0niYUqx6xyqUnyoAnQyyWpOTdZEeiCch8BBu515t4wp9ZmgVfVhn9EBpw==}
+    engines: {node: '>=4.0'}
+
+  estraverse@5.3.0:
+    resolution: {integrity: sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==}
+    engines: {node: '>=4.0'}
+
+  event-emitter@0.3.5:
+    resolution: {integrity: sha512-D9rRn9y7kLPnJ+hMq7S/nhvoKwwvVJahBi2BPmx3bvbsEdK3W9ii8cBSGjP+72/LnM4n6fo3+dkCX5FeTQruXA==}
+
+  event-stream@3.3.4:
+    resolution: {integrity: sha512-QHpkERcGsR0T7Qm3HNJSyXKEEj8AHNxkY3PK8TS2KJvQ7NiSHe3DDpwVKKtoYprL/AreyzFBeIkBIWChAqn60g==}
+
+  events@3.3.0:
+    resolution: {integrity: sha512-mQw+2fkQbALzQ7V0MY0IqdnXNOeTtP4r0lN9z7AAawCXgqea7bDii20AYrIBrFd/Hx0M2Ocz6S111CaFkUcb0Q==}
+    engines: {node: '>=0.8.x'}
+
+  eventsource-parser@3.0.3:
+    resolution: {integrity: sha512-nVpZkTMM9rF6AQ9gPJpFsNAMt48wIzB5TQgiTLdHiuO8XEDhUgZEhqKlZWXbIzo9VmJ/HvysHqEaVeD5v9TPvA==}
+    engines: {node: '>=20.0.0'}
+
+  expand-brackets@2.1.4:
+    resolution: {integrity: sha512-w/ozOKR9Obk3qoWeY/WDi6MFta9AoMR+zud60mdnbniMcBxRuFJyDt2LdX/14A1UABeqk+Uk+LDfUpvoGKppZA==}
+    engines: {node: '>=0.10.0'}
+
+  expand-template@2.0.3:
+    resolution: {integrity: sha512-XYfuKMvj4O35f/pOXLObndIRvyQ+/+6AhODh+OKWj9S9498pHHn/IMszH+gt0fBCRWMNfk1ZSp5x3AifmnI2vg==}
+    engines: {node: '>=6'}
+
+  expand-tilde@2.0.2:
+    resolution: {integrity: sha512-A5EmesHW6rfnZ9ysHQjPdJRni0SRar0tjtG5MNtm9n5TUvsYU8oozprtRD4AqHxcZWWlVuAmQo2nWKfN9oyjTw==}
+    engines: {node: '>=0.10.0'}
+
+  ext@1.7.0:
+    resolution: {integrity: sha512-6hxeJYaL110a9b5TEJSj0gojyHQAmA2ch5Os+ySCiA1QGdS697XWY1pzsrSjqA9LDEEgdB/KypIlR59RcLuHYw==}
+
+  extend-shallow@1.1.4:
+    resolution: {integrity: sha512-L7AGmkO6jhDkEBBGWlLtftA80Xq8DipnrRPr0pyi7GQLXkaq9JYA4xF4z6qnadIC6euiTDKco0cGSU9muw+WTw==}
+    engines: {node: '>=0.10.0'}
+
+  extend-shallow@2.0.1:
+    resolution: {integrity: sha512-zCnTtlxNoAiDc3gqY2aYAWFx7XWWiasuF2K8Me5WbN8otHKTUKBwjPtNpRs/rbUZm7KxWAaNj7P1a/p52GbVug==}
+    engines: {node: '>=0.10.0'}
+
+  extend-shallow@3.0.2:
+    resolution: {integrity: sha512-BwY5b5Ql4+qZoefgMj2NUmx+tehVTH/Kf4k1ZEtOHNFcm2wSxMRo992l6X3TIgni2eZVTZ85xMOjF31fwZAj6Q==}
+    engines: {node: '>=0.10.0'}
+
+  extend@3.0.2:
+    resolution: {integrity: sha512-fjquC59cD7CyW6urNXK0FBufkZcoiGG80wTuPujX590cB5Ttln20E2UB4S/WARVqhXffZl2LNgS+gQdPIIim/g==}
+
+  extglob@2.0.4:
+    resolution: {integrity: sha512-Nmb6QXkELsuBr24CJSkilo6UHHgbekK5UiZgfE6UHD3Eb27YC6oD+bhcT+tJ6cl8dmsgdQxnWlcry8ksBIBLpw==}
+    engines: {node: '>=0.10.0'}
+
+  extract-zip@2.0.1:
+    resolution: {integrity: sha512-GDhU9ntwuKyGXdZBUgTIe+vXnWj0fppUEtMDL0+idd5Sta8TGpHssn/eusA9mrPr9qNDym6SxAYZjNvCn/9RBg==}
+    engines: {node: '>= 10.17.0'}
+    hasBin: true
+
+  fancy-log@1.3.3:
+    resolution: {integrity: sha512-k9oEhlyc0FrVh25qYuSELjr8oxsCoc4/LEZfg2iJJrfEk/tZL9bCoJE47gqAvI2m/AUjluCS4+3I0eTx8n3AEw==}
+    engines: {node: '>= 0.10'}
+
+  fast-content-type-parse@3.0.0:
+    resolution: {integrity: sha512-ZvLdcY8P+N8mGQJahJV5G4U88CSvT1rP8ApL6uETe88MBXrBHAkZlSEySdUlyztF7ccb+Znos3TFqaepHxdhBg==}
+
+  fast-deep-equal@3.1.3:
+    resolution: {integrity: sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==}
+
+  fast-fifo@1.3.2:
+    resolution: {integrity: sha512-/d9sfos4yxzpwkDkuN7k2SqFKtYNmCTzgfEpz82x34IM9/zc8KGxQoXg1liNC/izpRM/MBdt44Nmx41ZWqk+FQ==}
+
+  fast-glob@3.3.3:
+    resolution: {integrity: sha512-7MptL8U0cqcFdzIzwOTHoilX9x5BrNqye7Z/LuC7kCMRio1EMSyqRK3BEAUD7sXRq4iT4AzTVuZdhgQ2TCvYLg==}
+    engines: {node: '>=8.6.0'}
+
+  fast-json-stable-stringify@2.1.0:
+    resolution: {integrity: sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==}
+
+  fast-levenshtein@1.1.4:
+    resolution: {integrity: sha512-Ia0sQNrMPXXkqVFt6w6M1n1oKo3NfKs+mvaV811Jwir7vAk9a6PVV9VPYf6X3BU97QiLEmuW3uXH9u87zDFfdw==}
+
+  fast-uri@3.0.6:
+    resolution: {integrity: sha512-Atfo14OibSv5wAp4VWNsFYE1AchQRTv9cBGWET4pZWHzYshFSS9NQI6I57rdKn9croWVMbYFbLhJ+yJvmZIIHw==}
+
+  fast-xml-parser@5.2.5:
+    resolution: {integrity: sha512-pfX9uG9Ki0yekDHx2SiuRIyFdyAr1kMIMitPvb0YBo8SUfKvia7w7FIyd/l6av85pFYRhZscS75MwMnbvY+hcQ==}
+    hasBin: true
+
+  fastest-levenshtein@1.0.16:
+    resolution: {integrity: sha512-eRnCtTTtGZFpQCwhJiUOuxPQWRXVKYDn0b2PeHfXL6/Zi53SLAzAHfVhVWK2AryC/WH05kGfxhFIPvTF0SXQzg==}
+    engines: {node: '>= 4.9.1'}
+
+  fastq@1.19.1:
+    resolution: {integrity: sha512-GwLTyxkCXjXbxqIhTsMI2Nui8huMPtnxg7krajPJAjnEG/iiOS7i+zCtWGZR9G0NBKbXKh6X9m9UIsYX/N6vvQ==}
+
+  fd-slicer@1.1.0:
+    resolution: {integrity: sha512-cE1qsB/VwyQozZ+q1dGxR8LBYNZeofhEdUNGSMbQD3Gw2lAzX9Zb3uIU6Ebc/Fmyjo9AWWfnn0AUCHqtevs/8g==}
+
+  fdir@6.4.6:
+    resolution: {integrity: sha512-hiFoqpyZcfNm1yc4u8oWCf9A2c4D3QjCrks3zmoVKVxpQRzmPNar1hUJcBG2RQHvEVGDN+Jm81ZheVLAQMK6+w==}
+    peerDependencies:
+      picomatch: ^3 || ^4
+    peerDependenciesMeta:
+      picomatch:
+        optional: true
+
+  file-loader@6.2.0:
+    resolution: {integrity: sha512-qo3glqyTa61Ytg4u73GultjHGjdRyig3tG6lPtyX/jOEJvHif9uB0/OCI2Kif6ctF3caQTW2G5gym21oAsI4pw==}
+    engines: {node: '>= 10.13.0'}
+    peerDependencies:
+      webpack: ^4.0.0 || ^5.0.0
+
+  file-uri-to-path@1.0.0:
+    resolution: {integrity: sha512-0Zt+s3L7Vf1biwWZ29aARiVYLx7iMGnEUl9x33fbB/j3jR81u/O2LbqK+Bm1CDSNDKVtJ/YjwY7TUd5SkeLQLw==}
+
+  fill-range@4.0.0:
+    resolution: {integrity: sha512-VcpLTWqWDiTerugjj8e3+esbg+skS3M9e54UuR3iCeIDMXCLTsAH8hTSzDQU/X6/6t3eYkOKoZSef2PlU6U1XQ==}
+    engines: {node: '>=0.10.0'}
+
+  fill-range@7.1.1:
+    resolution: {integrity: sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==}
+    engines: {node: '>=8'}
+
+  find-parent-dir@0.3.1:
+    resolution: {integrity: sha512-o4UcykWV/XN9wm+jMEtWLPlV8RXCZnMhQI6F6OdHeSez7iiJWePw8ijOlskJZMsaQoGR/b7dH6lO02HhaTN7+A==}
+
+  find-replace@5.0.2:
+    resolution: {integrity: sha512-Y45BAiE3mz2QsrN2fb5QEtO4qb44NcS7en/0y9PEVsg351HsLeVclP8QPMH79Le9sH3rs5RSwJu99W0WPZO43Q==}
+    engines: {node: '>=14'}
+    peerDependencies:
+      '@75lb/nature': latest
+    peerDependenciesMeta:
+      '@75lb/nature':
+        optional: true
+
+  find-up@1.1.2:
+    resolution: {integrity: sha512-jvElSjyuo4EMQGoTwo1uJU5pQMwTW5lS1x05zzfJuTIyLR3zwO27LYrxNg+dlvKpGOuGy/MzBdXh80g0ve5+HA==}
+    engines: {node: '>=0.10.0'}
+
+  find-up@4.1.0:
+    resolution: {integrity: sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==}
+    engines: {node: '>=8'}
+
+  find-up@5.0.0:
+    resolution: {integrity: sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==}
+    engines: {node: '>=10'}
+
+  findup-sync@2.0.0:
+    resolution: {integrity: sha512-vs+3unmJT45eczmcAZ6zMJtxN3l/QXeccaXQx5cu/MeJMhewVfoWZqibRkOxPnmoR59+Zy5hjabfQc6JLSah4g==}
+    engines: {node: '>= 0.10'}
+
+  findup-sync@3.0.0:
+    resolution: {integrity: sha512-YbffarhcicEhOrm4CtrwdKBdCuz576RLdhJDsIfvNtxUuhdRet1qZcsMjqbePtAseKdAnDyM/IyXbu7PRPRLYg==}
+    engines: {node: '>= 0.10'}
+
+  fined@1.2.0:
+    resolution: {integrity: sha512-ZYDqPLGxDkDhDZBjZBb+oD1+j0rA4E0pXY50eplAAOPg2N/gUBSSk5IM1/QhPfyVo19lJ+CvXpqfvk+b2p/8Ng==}
+    engines: {node: '>= 0.10'}
+
+  fix-dts-default-cjs-exports@1.0.1:
+    resolution: {integrity: sha512-pVIECanWFC61Hzl2+oOCtoJ3F17kglZC/6N94eRWycFgBH35hHx0Li604ZIzhseh97mf2p0cv7vVrOZGoqhlEg==}
+
+  flagged-respawn@1.0.1:
+    resolution: {integrity: sha512-lNaHNVymajmk0OJMBn8fVUAU1BtDeKIqKoVhk4xAALB57aALg6b4W0MfJ/cUE0g9YBXy5XhSlPIpYIJ7HaY/3Q==}
+    engines: {node: '>= 0.10'}
+
+  flat@5.0.2:
+    resolution: {integrity: sha512-b6suED+5/3rTpUBdG1gupIl8MPFCAMA0QXwmljLhvCUKcUvdE4gWky9zpuGCcXHOsz4J9wPGNWq6OKpmIzz3hQ==}
+    hasBin: true
+
+  flush-write-stream@1.1.1:
+    resolution: {integrity: sha512-3Z4XhFZ3992uIq0XOqb9AreonueSYphE6oYbpt5+3u06JWklbsPkNv3ZKkP9Bz/r+1MWCaMoSQ28P85+1Yc77w==}
+
+  font-finder@1.1.0:
+    resolution: {integrity: sha512-wpCL2uIbi6GurJbU7ZlQ3nGd61Ho+dSU6U83/xJT5UPFfN35EeCW/rOtS+5k+IuEZu2SYmHzDIPL9eA5tSYRAw==}
+    engines: {node: '>8.0.0'}
+
+  font-ligatures@1.4.1:
+    resolution: {integrity: sha512-7W6zlfyhvCqShZ5ReUWqmSd9vBaUudW0Hxis+tqUjtHhsPU+L3Grf8mcZAtCiXHTzorhwdRTId2WeH/88gdFkw==}
+    engines: {node: '>8.0.0'}
+
+  for-each@0.3.5:
+    resolution: {integrity: sha512-dKx12eRCVIzqCxFGplyFKJMPvLEWgmNtUrpTiJIR5u97zEhRG8ySrtboPHZXx7daLxQVrl643cTzbab2tkQjxg==}
+    engines: {node: '>= 0.4'}
+
+  for-in@1.0.2:
+    resolution: {integrity: sha512-7EwmXrOjyL+ChxMhmG5lnW9MPt1aIeZEwKhQzoBUdTV0N3zuwWDZYVJatDvZ2OyzPUvdIAZDsCetk3coyMfcnQ==}
+    engines: {node: '>=0.10.0'}
+
+  for-own@1.0.0:
+    resolution: {integrity: sha512-0OABksIGrxKK8K4kynWkQ7y1zounQxP+CWnyclVwj81KW3vlLlGUx57DKGcP/LH216GzqnstnPocF16Nxs0Ycg==}
+    engines: {node: '>=0.10.0'}
+
+  foreground-child@3.3.1:
+    resolution: {integrity: sha512-gIXjKqtFuWEgzFRJA9WCQeSJLZDjgJUOMCMzxtvFq/37KojM1BFGufqsCy0r4qSQmYLsZYMeyRqzIWOMup03sw==}
+    engines: {node: '>=14'}
+
+  form-data-encoder@4.1.0:
+    resolution: {integrity: sha512-G6NsmEW15s0Uw9XnCg+33H3ViYRyiM0hMrMhhqQOR8NFc5GhYrI+6I3u7OTw7b91J2g8rtvMBZJDbcGb2YUniw==}
+    engines: {node: '>= 18'}
+
+  fragment-cache@0.2.1:
+    resolution: {integrity: sha512-GMBAbW9antB8iZRHLoGw0b3HANt57diZYFO/HL1JGIC1MjKrdmhxvrJbupnVvpys0zsz7yBApXdQyfepKly2kA==}
+    engines: {node: '>=0.10.0'}
+
+  fresh@0.5.2:
+    resolution: {integrity: sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==}
+    engines: {node: '>= 0.6'}
+
+  from@0.1.7:
+    resolution: {integrity: sha512-twe20eF1OxVxp/ML/kq2p1uc6KvFK/+vs8WjEbeKmV2He22MKm7YF2ANIt+EOqhJ5L3K/SuuPhk0hWQDjOM23g==}
+
+  fs-constants@1.0.0:
+    resolution: {integrity: sha512-y6OAwoSIf7FyjMIv94u+b5rdheZEjzR63GTyZJm5qh4Bi+2YgwLCcI/fPFZkL5PSixOt6ZNKm+w+Hfp/Bciwow==}
+
+  fs-extra@11.3.0:
+    resolution: {integrity: sha512-Z4XaCL6dUDHfP/jT25jJKMmtxvuwbkrD1vNSMFlo9lNLY2c5FHYSQgHPRZUjAB26TpDEoW9HCOgplrdbaPV/ew==}
+    engines: {node: '>=14.14'}
+
+  fs-extra@8.1.0:
+    resolution: {integrity: sha512-yhlQgA6mnOJUKOsRUFsgJdQCvkKhcz8tlZG5HBQfReYZy46OwLcY+Zia0mtdHsOo9y/hP+CxMN0TU9QxoOtG4g==}
+    engines: {node: '>=6 <7 || >=8'}
+
+  fs-minipass@2.1.0:
+    resolution: {integrity: sha512-V/JgOLFCS+R6Vcq0slCuaeWEdNC3ouDlJMNIsacH2VtALiu9mV4LPrHc5cDl8k5aw6J8jwgWWpiTo5RYhmIzvg==}
+    engines: {node: '>= 8'}
+
+  fs-mkdirp-stream@1.0.0:
+    resolution: {integrity: sha512-+vSd9frUnapVC2RZYfL3FCB2p3g4TBhaUmrsWlSudsGdnxIuUvBB2QM1VZeBtc49QFwrp+wQLrDs3+xxDgI5gQ==}
+    engines: {node: '>= 0.10'}
+
+  fs.realpath@1.0.0:
+    resolution: {integrity: sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==}
+
+  fsevents@1.2.13:
+    resolution: {integrity: sha512-oWb1Z6mkHIskLzEJ/XWX0srkpkTQ7vaopMQkyaEIoq0fmtFVxOthb8cCxeT+p3ynTdkk/RZwbgG4brR5BeWECw==}
+    engines: {node: '>= 4.0'}
+    os: [darwin]
+    deprecated: Upgrade to fsevents v2 to mitigate potential security issues
+
+  fsevents@2.3.2:
+    resolution: {integrity: sha512-xiqMQR4xAeHTuB9uWm+fFRcIOgKBMiOBP+eXiyT7jsgVCq1bkVygt00oASowB7EdtpOHaaPgKt812P9ab+DDKA==}
+    engines: {node: ^8.16.0 || ^10.6.0 || >=11.0.0}
+    os: [darwin]
+
+  fsevents@2.3.3:
+    resolution: {integrity: sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==}
+    engines: {node: ^8.16.0 || ^10.6.0 || >=11.0.0}
+    os: [darwin]
+
+  fstream@1.0.12:
+    resolution: {integrity: sha512-WvJ193OHa0GHPEL+AycEJgxvBEwyfRkN1vhjca23OaPVMCaLCXTd5qAu82AjTcgP1UJmytkOKb63Ypde7raDIg==}
+    engines: {node: '>=0.6'}
+    deprecated: This package is no longer supported.
+
+  function-bind@1.1.2:
+    resolution: {integrity: sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==}
+
+  function.prototype.name@1.1.8:
+    resolution: {integrity: sha512-e5iwyodOHhbMr/yNrc7fDYG4qlbIvI5gajyzPnb5TCwyhjApznQh1BMFou9b30SevY43gCJKXycoCBjMbsuW0Q==}
+    engines: {node: '>= 0.4'}
+
+  functions-have-names@1.2.3:
+    resolution: {integrity: sha512-xckBUXyTIqT97tq2x2AMb+g163b5JFysYk0x4qxNFwbfQkmNZoiRHb6sPzI9/QV33WeuvVYBUIiD4NzNIyqaRQ==}
+
+  gensync@1.0.0-beta.2:
+    resolution: {integrity: sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==}
+    engines: {node: '>=6.9.0'}
+
+  get-caller-file@1.0.3:
+    resolution: {integrity: sha512-3t6rVToeoZfYSGd8YoLFR2DJkiQrIiUrGcjvFX2mDw3bn6k2OtwHN0TNCLbBO+w8qTvimhDkv+LSscbJY1vE6w==}
+
+  get-caller-file@2.0.5:
+    resolution: {integrity: sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==}
+    engines: {node: 6.* || 8.* || >= 10.*}
+
+  get-east-asian-width@1.3.0:
+    resolution: {integrity: sha512-vpeMIQKxczTD/0s2CdEWHcb0eeJe6TFjxb+J5xgX7hScxqrGuyjmv4c1D4A/gelKfyox0gJJwIHF+fLjeaM8kQ==}
+    engines: {node: '>=18'}
+
+  get-intrinsic@1.3.0:
+    resolution: {integrity: sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==}
+    engines: {node: '>= 0.4'}
+
+  get-proto@1.0.1:
+    resolution: {integrity: sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==}
+    engines: {node: '>= 0.4'}
+
+  get-stdin@7.0.0:
+    resolution: {integrity: sha512-zRKcywvrXlXsA0v0i9Io4KDRaAw7+a1ZpjRwl9Wox8PFlVCCHra7E9c4kqXCoCM9nR5tBkaTTZRBoCm60bFqTQ==}
+    engines: {node: '>=8'}
+
+  get-stream@5.2.0:
+    resolution: {integrity: sha512-nBF+F1rAZVCu/p7rjzgA+Yb4lfYXrpl7a6VmJrU8wF9I1CKvP/QwPNZHnOlwbTkY6dvtFIzFMSyQXbLoTQPRpA==}
+    engines: {node: '>=8'}
+
+  get-stream@9.0.1:
+    resolution: {integrity: sha512-kVCxPF3vQM/N0B1PmoqVUqgHP+EeVjmZSQn+1oCRPxd2P21P2F19lIgbR3HBosbB1PUhOAoctJnfEn2GbN2eZA==}
+    engines: {node: '>=18'}
+
+  get-symbol-description@1.1.0:
+    resolution: {integrity: sha512-w9UMqWwJxHNOvoNzSJ2oPF5wvYcvP7jUvYzhp67yEhTi17ZDBBC1z9pTdGuzjD+EFIqLSYRweZjqfiPzQ06Ebg==}
+    engines: {node: '>= 0.4'}
+
+  get-system-fonts@2.0.2:
+    resolution: {integrity: sha512-zzlgaYnHMIEgHRrfC7x0Qp0Ylhw/sHpM6MHXeVBTYIsvGf5GpbnClB+Q6rAPdn+0gd2oZZIo6Tj3EaWrt4VhDQ==}
+    engines: {node: '>8.0.0'}
+
+  get-value@2.0.6:
+    resolution: {integrity: sha512-Ln0UQDlxH1BapMu3GPtf7CuYNwRZf2gwCuPqbyG6pB8WfmFpzqcy4xtAaAMUhnNqjMKTiCPZG2oMT3YSx8U2NA==}
+    engines: {node: '>=0.10.0'}
+
+  github-from-package@0.0.0:
+    resolution: {integrity: sha512-SyHy3T1v2NUXn29OsWdxmK6RwHD+vkj3v8en8AOBZ1wBQ/hCAQ5bAQTD02kW4W9tUp/3Qh6J8r9EvntiyCmOOw==}
+
+  glob-parent@3.1.0:
+    resolution: {integrity: sha512-E8Ak/2+dZY6fnzlR7+ueWvhsH1SjHr4jjss4YS/h4py44jY9MhK/VFdaZJAWDz6BbL21KeteKxFSFpq8OS5gVA==}
+
+  glob-parent@5.1.2:
+    resolution: {integrity: sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==}
+    engines: {node: '>= 6'}
+
+  glob-parent@6.0.2:
+    resolution: {integrity: sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==}
+    engines: {node: '>=10.13.0'}
+
+  glob-stream@6.1.0:
+    resolution: {integrity: sha512-uMbLGAP3S2aDOHUDfdoYcdIePUCfysbAd0IAoWVZbeGU/oNQ8asHVSshLDJUPWxfzj8zsCG7/XeHPHTtow0nsw==}
+    engines: {node: '>= 0.10'}
+
+  glob-to-regexp@0.4.1:
+    resolution: {integrity: sha512-lkX1HJXwyMcprw/5YUZc2s7DrpAiHB21/V+E1rHUrVNokkvB6bqMzT0VfV6/86ZNabt1k14YOIaT7nDvOX3Iiw==}
+
+  glob-watcher@5.0.5:
+    resolution: {integrity: sha512-zOZgGGEHPklZNjZQaZ9f41i7F2YwE+tS5ZHrDhbBCk3stwahn5vQxnFmBJZHoYdusR6R1bLSXeGUy/BhctwKzw==}
+    engines: {node: '>= 0.10'}
+
+  glob@10.4.5:
+    resolution: {integrity: sha512-7Bv8RF0k6xjo7d4A/PxYLbUCfb6c+Vpd2/mB2yRDlew7Jb5hEXiCD9ibfO7wpk8i4sevK6DFny9h7EYbM3/sHg==}
+    hasBin: true
+
+  glob@11.0.3:
+    resolution: {integrity: sha512-2Nim7dha1KVkaiF4q6Dj+ngPPMdfvLJEOpZk/jKiUAkqKebpGAWQXAq9z1xu9HKu5lWfqw/FASuccEjyznjPaA==}
+    engines: {node: 20 || >=22}
+    hasBin: true
+
+  glob@5.0.15:
+    resolution: {integrity: sha512-c9IPMazfRITpmAAKi22dK1VKxGDX9ehhqfABDriL/lzO92xcUKEJPQHrVA/2YHSNFB4iFlykVmWvwo48nr3OxA==}
+    deprecated: Glob versions prior to v9 are no longer supported
+
+  glob@7.2.3:
+    resolution: {integrity: sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==}
+    deprecated: Glob versions prior to v9 are no longer supported
+
+  glob@8.1.0:
+    resolution: {integrity: sha512-r8hpEjiQEYlF2QU0df3dS+nxxSIreXQS1qRhMJM0Q5NDdR386C7jb7Hwwod8Fgiuex+k0GFjgft18yvxm5XoCQ==}
+    engines: {node: '>=12'}
+    deprecated: Glob versions prior to v9 are no longer supported
+
+  global-agent@3.0.0:
+    resolution: {integrity: sha512-PT6XReJ+D07JvGoxQMkT6qji/jVNfX/h364XHZOWeRzy64sSFr+xJ5OX7LI3b4MPQzdL4H8Y8M0xzPpsVMwA8Q==}
+    engines: {node: '>=10.0'}
+
+  global-modules@1.0.0:
+    resolution: {integrity: sha512-sKzpEkf11GpOFuw0Zzjzmt4B4UZwjOcG757PPvrfhxcLFbq0wpsgpOqxpxtxFiCG4DtG93M6XRVbF2oGdev7bg==}
+    engines: {node: '>=0.10.0'}
+
+  global-prefix@1.0.2:
+    resolution: {integrity: sha512-5lsx1NUDHtSjfg0eHlmYvZKv8/nVqX4ckFbM+FrGcQ+04KWcWFo9P5MxPZYSzUvyzmdTbI7Eix8Q4IbELDqzKg==}
+    engines: {node: '>=0.10.0'}
+
+  globalthis@1.0.4:
+    resolution: {integrity: sha512-DpLKbNU4WylpxJykQujfCcwYWiV/Jhm50Goo0wrVILAv5jOr9d+H+UR3PhSCD2rCCEIg0uc+G+muBTwD54JhDQ==}
+    engines: {node: '>= 0.4'}
+
+  globby@13.2.2:
+    resolution: {integrity: sha512-Y1zNGV+pzQdh7H39l9zgB4PJqjRNqydvdYCDG4HFXM4XuvSaQQlEc91IU1yALL8gUTDomgBAfz3XJdmUS+oo0w==}
+    engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}
+
+  glogg@1.0.2:
+    resolution: {integrity: sha512-5mwUoSuBk44Y4EshyiqcH95ZntbDdTQqA3QYSrxmzj28Ai0vXBGMH1ApSANH14j2sIRtqCEyg6PfsuP7ElOEDA==}
+    engines: {node: '>= 0.10'}
+
+  gopd@1.2.0:
+    resolution: {integrity: sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==}
+    engines: {node: '>= 0.4'}
+
+  got@11.8.6:
+    resolution: {integrity: sha512-6tfZ91bOr7bOXnK7PRDCGBLa1H4U080YHNaAQ2KsMGlLEzRbk44nsZF2E1IeRc3vtJHPVbKCYgdFbaGO2ljd8g==}
+    engines: {node: '>=10.19.0'}
+
+  got@14.4.7:
+    resolution: {integrity: sha512-DI8zV1231tqiGzOiOzQWDhsBmncFW7oQDH6Zgy6pDPrqJuVZMtoSgPLLsBZQj8Jg4JFfwoOsDA8NGtLQLnIx2g==}
+    engines: {node: '>=20'}
+
+  graceful-fs@4.2.11:
+    resolution: {integrity: sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==}
+
+  gulp-azure-storage@0.12.1:
+    resolution: {integrity: sha512-n/hx8bbGsqrcizruqDTX6zy2FUdkTDGAz04IdopNxNTZivZmizf8u9WLYJreUE6/qCnSJnyjS1HP82+mLk7rjg==}
+    hasBin: true
+
+  gulp-bom@3.0.0:
+    resolution: {integrity: sha512-iw/J94F+MVlxG64Q17BSkHsyjpY17qHl3N3A/jDdrL77zQBkhKtTiKLqM4di9CUX/qFToyyeDsOWwH+rESBgmA==}
+    engines: {node: '>=8'}
+    peerDependencies:
+      gulp: '>=4'
+    peerDependenciesMeta:
+      gulp:
+        optional: true
+
+  gulp-buffer@0.0.2:
+    resolution: {integrity: sha512-EBkbjjTH2gRr2B8KBAcomdTemfZHqiKs8CxSYdaW0Hq3zxltQFrCg9BBmKVHC9cfxX/3l2BZK5oiGHYNJ/gcVw==}
+
+  gulp-cli@2.3.0:
+    resolution: {integrity: sha512-zzGBl5fHo0EKSXsHzjspp3y5CONegCm8ErO5Qh0UzFzk2y4tMvzLWhoDokADbarfZRL2pGpRp7yt6gfJX4ph7A==}
+    engines: {node: '>= 0.10'}
+    hasBin: true
+
+  gulp-filter@5.1.0:
+    resolution: {integrity: sha512-ZERu1ipbPmjrNQ2dQD6lL4BjrJQG66P/c5XiyMMBqV+tUAJ+fLOyYIL/qnXd2pHmw/G/r7CLQb9ttANvQWbpfQ==}
+    engines: {node: '>=4'}
+
+  gulp-flatmap@1.0.2:
+    resolution: {integrity: sha512-xm+Ax2vPL/xiMBqLFI++wUyPtncm3b55ztGHewmRcoG/sYb0OUTatjSacOud3fee77rnk+jOgnDEHhwBtMHgFA==}
+    engines: {node: '>=0.10.0'}
+
+  gulp-gunzip@1.1.0:
+    resolution: {integrity: sha512-3INeprGyz5fUtAs75k6wVslGuRZIjKAoQp39xA7Bz350ReqkrfYaLYqjZ67XyIfLytRXdzeX04f+DnBduYhQWw==}
+
+  gulp-gzip@1.4.2:
+    resolution: {integrity: sha512-ZIxfkUwk2XmZPTT9pPHrHUQlZMyp9nPhg2sfoeN27mBGpi7OaHnOD+WCN41NXjfJQ69lV1nQ9LLm1hYxx4h3UQ==}
+    engines: {node: '>= 0.10.0'}
+
+  gulp-json-editor@2.6.0:
+    resolution: {integrity: sha512-Ni0ZUpNrhesHiTlHQth/Nv1rXCn0LUicEvzA5XuGy186C4PVeNoRjfuAIQrbmt3scKv8dgGbCs0hd77ScTw7hA==}
+
+  gulp-plumber@1.2.1:
+    resolution: {integrity: sha512-mctAi9msEAG7XzW5ytDVZ9PxWMzzi1pS2rBH7lA095DhMa6KEXjm+St0GOCc567pJKJ/oCvosVAZEpAey0q2eQ==}
+    engines: {node: '>=0.10', npm: '>=1.2.10'}
+
+  gulp-rename@1.2.2:
+    resolution: {integrity: sha512-qhfUlYwq5zIP4cpRjx+np2vZVnr0xCRQrF3RsGel8uqL47Gu3yjmllSfnvJyl/39zYuxS68e1nnxImbm7388vw==}
+    engines: {node: '>=0.10.0', npm: '>=1.2.10'}
+
+  gulp-rename@1.4.0:
+    resolution: {integrity: sha512-swzbIGb/arEoFK89tPY58vg3Ok1bw+d35PfUNwWqdo7KM4jkmuGA78JiDNqR+JeZFaeeHnRg9N7aihX3YPmsyg==}
+    engines: {node: '>=4'}
+
+  gulp-replace@0.5.4:
+    resolution: {integrity: sha512-lHL+zKJN8uV95UkONnfRkoj2yJxPPupt2SahxA4vo5c+Ee3+WaIiMdWbOyUhg8BhAROQrWKnnxKOWPdVrnBwGw==}
+    engines: {node: '>=0.10'}
+
+  gulp-sourcemaps@3.0.0:
+    resolution: {integrity: sha512-RqvUckJkuYqy4VaIH60RMal4ZtG0IbQ6PXMNkNsshEGJ9cldUPRb/YCgboYae+CLAs1HQNb4ADTKCx65HInquQ==}
+    engines: {node: '>= 6'}
+
+  gulp-svgmin@4.1.0:
+    resolution: {integrity: sha512-WKpif+yu3+oIlp1e11CQi5F64YddP699l2mFmxpz8swv8/P8dhxVcMKdCPFWouArlVyn7Ma1eWCJHw5gx4NMtw==}
+
+  gulp-symdest@1.3.0:
+    resolution: {integrity: sha512-n1VaNYMpyOq4GfyQyIwRZhXOOsQVdEy56BCFxL4hu+stKwYeSQcZxLX5FOZL6jZUlBYXCWlXL+E5JU13ZMldIw==}
+
+  gulp-untar@0.0.7:
+    resolution: {integrity: sha512-0QfbCH2a1k2qkTLWPqTX+QO4qNsHn3kC546YhAP3/n0h+nvtyGITDuDrYBMDZeW4WnFijmkOvBWa5HshTic1tw==}
+
+  gulp-vinyl-zip@2.5.0:
+    resolution: {integrity: sha512-KPi5/2SUmkXXDvKU4L2U1dkPOP03SbhONTOgNZlL23l9Yopt+euJ1bBXwWrSMbsyh3JLW/TYuC8CI4c4Kq4qrw==}
+    engines: {node: '>= 10'}
+    deprecated: Package no longer supported. Contact Support at https://www.npmjs.com/support for more info.
+
+  gulp@4.0.2:
+    resolution: {integrity: sha512-dvEs27SCZt2ibF29xYgmnwwCYZxdxhQ/+LFWlbAW8y7jt68L/65402Lz3+CKy0Ov4rOs+NERmDq7YlZaDqUIfA==}
+    engines: {node: '>= 0.10'}
+    hasBin: true
+
+  gulplog@1.0.0:
+    resolution: {integrity: sha512-hm6N8nrm3Y08jXie48jsC55eCZz9mnb4OirAStEk2deqeyhXU3C1otDVh+ccttMuc1sBi6RX6ZJ720hs9RCvgw==}
+    engines: {node: '>= 0.10'}
+
+  gunzip-maybe@1.4.2:
+    resolution: {integrity: sha512-4haO1M4mLO91PW57BMsDFf75UmwoRX0GkdD+Faw+Lr+r/OZrOCS0pIBwOL1xCKQqnQzbNFGgK2V2CpBUPeFNTw==}
+    hasBin: true
+
+  has-ansi@2.0.0:
+    resolution: {integrity: sha512-C8vBJ8DwUCx19vhm7urhTuUsr4/IyP6l4VzNQDv+ryHQObW3TTTp9yB68WpYgRe2bbaGuZ/se74IqFeVnMnLZg==}
+    engines: {node: '>=0.10.0'}
+
+  has-bigints@1.1.0:
+    resolution: {integrity: sha512-R3pbpkcIqv2Pm3dUwgjclDRVmWpTJW2DcMzcIhEXEx1oh/CEMObMm3KLmRJOdvhM7o4uQBnwr8pzRK2sJWIqfg==}
+    engines: {node: '>= 0.4'}
+
+  has-flag@3.0.0:
+    resolution: {integrity: sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==}
+    engines: {node: '>=4'}
+
+  has-flag@4.0.0:
+    resolution: {integrity: sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==}
+    engines: {node: '>=8'}
+
+  has-property-descriptors@1.0.2:
+    resolution: {integrity: sha512-55JNKuIW+vq4Ke1BjOTjM2YctQIvCT7GFzHwmfZPGo5wnrgkid0YQtnAleFSqumZm4az3n2BS+erby5ipJdgrg==}
+
+  has-proto@1.2.0:
+    resolution: {integrity: sha512-KIL7eQPfHQRC8+XluaIw7BHUwwqL19bQn4hzNgdr+1wXoU0KKj6rufu47lhY7KbJR2C6T6+PfyN0Ea7wkSS+qQ==}
+    engines: {node: '>= 0.4'}
+
+  has-symbols@1.1.0:
+    resolution: {integrity: sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==}
+    engines: {node: '>= 0.4'}
+
+  has-tostringtag@1.0.2:
+    resolution: {integrity: sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==}
+    engines: {node: '>= 0.4'}
+
+  has-value@0.3.1:
+    resolution: {integrity: sha512-gpG936j8/MzaeID5Yif+577c17TxaDmhuyVgSwtnL/q8UUTySg8Mecb+8Cf1otgLoD7DDH75axp86ER7LFsf3Q==}
+    engines: {node: '>=0.10.0'}
+
+  has-value@1.0.0:
+    resolution: {integrity: sha512-IBXk4GTsLYdQ7Rvt+GRBrFSVEkmuOUy4re0Xjd9kJSUQpnTrWR4/y9RpfexN9vkAPMFuQoeWKwqzPozRTlasGw==}
+    engines: {node: '>=0.10.0'}
+
+  has-values@0.1.4:
+    resolution: {integrity: sha512-J8S0cEdWuQbqD9//tlZxiMuMNmxB8PlEwvYwuxsTmR1G5RXUePEX/SJn7aD0GMLieuZYSwNH0cQuJGwnYunXRQ==}
+    engines: {node: '>=0.10.0'}
+
+  has-values@1.0.0:
+    resolution: {integrity: sha512-ODYZC64uqzmtfGMEAX/FvZiRyWLpAC3vYnNunURUnkGVTS+mI0smVsWaPydRBsE3g+ok7h960jChO8mFcWlHaQ==}
+    engines: {node: '>=0.10.0'}
+
+  hasown@2.0.2:
+    resolution: {integrity: sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==}
+    engines: {node: '>= 0.4'}
+
+  he@1.2.0:
+    resolution: {integrity: sha512-F/1DnUGPopORZi0ni+CvrCgHQ5FyEAHRLSApuYWMmrbSwoN2Mn/7k+Gl38gJnR7yyDZk6WLXwiGod1JOWNDKGw==}
+    hasBin: true
+
+  homedir-polyfill@1.0.3:
+    resolution: {integrity: sha512-eSmmWE5bZTK2Nou4g0AI3zZ9rswp7GRKoKXS1BLUkvPviOqs4YTN1djQIqrXy9k5gEtdLPy86JjRwsNM9tnDcA==}
+    engines: {node: '>=0.10.0'}
+
+  hosted-git-info@2.8.9:
+    resolution: {integrity: sha512-mxIDAb9Lsm6DoOJ7xH+5+X4y1LU/4Hi50L9C5sIswK3JzULS4bwk1FvjdBgvYR4bzT4tuUQiC15FE2f5HbLvYw==}
+
+  html-escaper@2.0.2:
+    resolution: {integrity: sha512-H2iMtd0I4Mt5eYiapRdIDjp+XzelXQ0tFE4JS7YFwFevXXMmOp9myNrUvCg0D6ws8iqkRPBfKHgbwig1SmlLfg==}
+
+  http-assert@1.5.0:
+    resolution: {integrity: sha512-uPpH7OKX4H25hBmU6G1jWNaqJGpTXxey+YOUizJUAgu0AjLUeC8D73hTrhvDS5D+GJN1DN1+hhc/eF/wpxtp0w==}
+    engines: {node: '>= 0.8'}
+
+  http-cache-semantics@4.2.0:
+    resolution: {integrity: sha512-dTxcvPXqPvXBQpq5dUr6mEMJX4oIEFv6bwom3FDwKRDsuIjjJGANqhBuoAn9c1RQJIdAKav33ED65E2ys+87QQ==}
+
+  http-errors@1.6.3:
+    resolution: {integrity: sha512-lks+lVC8dgGyh97jxvxeYTWQFvh4uw4yC12gVl63Cg30sjPX4wuGcdkICVXDAESr6OJGjqGA8Iz5mkeN6zlD7A==}
+    engines: {node: '>= 0.6'}
+
+  http-errors@1.8.1:
+    resolution: {integrity: sha512-Kpk9Sm7NmI+RHhnj6OIWDI1d6fIoFAtFt9RLaTMRlg/8w49juAStsrBgp0Dp4OdxdVbRIeKhtCUvoi/RuAhO4g==}
+    engines: {node: '>= 0.6'}
+
+  http-errors@2.0.0:
+    resolution: {integrity: sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==}
+    engines: {node: '>= 0.8'}
+
+  http-proxy-agent@7.0.2:
+    resolution: {integrity: sha512-T1gkAiYYDWYx3V5Bmyu7HcfcvL7mUrTWiM6yOfa3PIphViJ/gFPbvidQ+veqSOHci/PxBcDabeUNCzpOODJZig==}
+    engines: {node: '>= 14'}
+
+  http2-wrapper@1.0.3:
+    resolution: {integrity: sha512-V+23sDMr12Wnz7iTcDeJr3O6AIxlnvT/bmaAAAP/Xda35C90p9599p0F1eHR/N1KILWSoWVAiOMFjBBXaXSMxg==}
+    engines: {node: '>=10.19.0'}
+
+  http2-wrapper@2.2.1:
+    resolution: {integrity: sha512-V5nVw1PAOgfI3Lmeaj2Exmeg7fenjhRUgz1lPSezy1CuhPYbgQtbQj4jZfEAEMlaL+vupsvhjqCyjzob0yxsmQ==}
+    engines: {node: '>=10.19.0'}
+
+  https-proxy-agent@7.0.6:
+    resolution: {integrity: sha512-vK9P5/iUfdl95AI+JVyUuIcVtd4ofvtrOr3HNtM2yxC9bnMbEdp3x01OhQNnjb8IJYi38VlTE3mBXwcfvywuSw==}
+    engines: {node: '>= 14'}
+
+  husky@0.13.4:
+    resolution: {integrity: sha512-kafsK/82ndSVKJe1IoR/z7NKkiI2LYM6H+VNI/YlKOeoOXEJTpD65TNu05Zx7pzSZzLuAdMt4fHgpUsnd6HJ7A==}
+
+  icss-utils@5.1.0:
+    resolution: {integrity: sha512-soFhflCVWLfRNOPU3iv5Z9VUdT44xFRbzjLsEzSr5AQmgqPMTHdU3PMT1Cf1ssx8fLNJDA1juftYl+PUcv3MqA==}
+    engines: {node: ^10 || ^12 || >= 14}
+    peerDependencies:
+      postcss: ^8.1.0
+
+  ieee754@1.2.1:
+    resolution: {integrity: sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA==}
+
+  ignore@5.3.2:
+    resolution: {integrity: sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==}
+    engines: {node: '>= 4'}
+
+  immediate@3.0.6:
+    resolution: {integrity: sha512-XXOFtyqDjNDAQxVfYxuF7g9Il/IbWmmlQg2MYKOH8ExIT1qg6xc4zyS3HaEEATgs1btfzxq15ciUiY7gjSXRGQ==}
+
+  import-local@3.2.0:
+    resolution: {integrity: sha512-2SPlun1JUPWoM6t3F0dw0FkCF/jWY8kttcY4f599GLTSjh2OCuuhdTkJQsEcZzBqbXZGKMK2OqW1oZsjtf/gQA==}
+    engines: {node: '>=8'}
+    hasBin: true
+
+  inflight@1.0.6:
+    resolution: {integrity: sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==}
+    deprecated: This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.
+
+  inherits@2.0.3:
+    resolution: {integrity: sha512-x00IRNXNy63jwGkJmzPigoySHbaqpNuzKbBOmzK+g2OdZpQ9w+sxCN+VSB3ja7IAge2OP2qpfxTjeNcyjmW1uw==}
+
+  inherits@2.0.4:
+    resolution: {integrity: sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==}
+
+  ini@1.3.8:
+    resolution: {integrity: sha512-JV/yugV2uzW5iMRSiZAyDtQd+nxtUnjeLt0acNdw98kKLrvuRVyB80tsREOE7yvGVgalhZ6RNXCmEHkUKBKxew==}
+
+  innosetup@6.4.1:
+    resolution: {integrity: sha512-Bh/dNlyyFsFKBGoTf19n1msPnm4Njfb0CWVirw2CV1MSJXYy0ajRI+xjo/Yr9DtZFLLafhnwm1ZsxTu309F8lQ==}
+    engines: {node: '>= 0.8.0'}
+    hasBin: true
+
+  internal-slot@1.1.0:
+    resolution: {integrity: sha512-4gd7VpWNQNB4UKKCFFVcp1AVv+FMOgs9NKzjHKusc8jTMhd5eL1NqQqOpE0KzMds804/yHlglp3uxgluOqAPLw==}
+    engines: {node: '>= 0.4'}
+
+  interpret@1.4.0:
+    resolution: {integrity: sha512-agE4QfB2Lkp9uICn7BAqoscw4SZP9kTE2hxiFI3jBPmXJfdqiahTbUuKGsMoN2GtqL9AxhYioAcVvgsb1HvRbA==}
+    engines: {node: '>= 0.10'}
+
+  interpret@3.1.1:
+    resolution: {integrity: sha512-6xwYfHbajpoF0xLW+iwLkhwgvLoZDfjYfoFNu8ftMoXINzwuymNLd9u/KmwtdT2GbR+/Cz66otEGEVVUHX9QLQ==}
+    engines: {node: '>=10.13.0'}
+
+  invert-kv@1.0.0:
+    resolution: {integrity: sha512-xgs2NH9AE66ucSq4cNG1nhSFghr5l6tdL15Pk+jl46bmmBapgoaY/AacXyaDznAqmGL99TiLSQgO/XazFSKYeQ==}
+    engines: {node: '>=0.10.0'}
+
+  ip-address@9.0.5:
+    resolution: {integrity: sha512-zHtQzGojZXTwZTHQqra+ETKd4Sn3vgi7uBmlPoXVWZqYvuKmtI0l/VZTjqGmJY9x88GGOaZ9+G9ES8hC4T4X8g==}
+    engines: {node: '>= 12'}
+
+  is-absolute@1.0.0:
+    resolution: {integrity: sha512-dOWoqflvcydARa360Gvv18DZ/gRuHKi2NU/wU5X1ZFzdYfH29nkiNZsF3mp4OJ3H4yo9Mx8A/uAGNzpzPN3yBA==}
+    engines: {node: '>=0.10.0'}
+
+  is-accessor-descriptor@1.0.1:
+    resolution: {integrity: sha512-YBUanLI8Yoihw923YeFUS5fs0fF2f5TSFTNiYAAzhhDscDa3lEqYuz1pDOEP5KvX94I9ey3vsqjJcLVFVU+3QA==}
+    engines: {node: '>= 0.10'}
+
+  is-arguments@1.2.0:
+    resolution: {integrity: sha512-7bVbi0huj/wrIAOzb8U1aszg9kdi3KN/CyU19CTI7tAoZYEZoL9yCDXpbXN+uPsuWnP02cyug1gleqq+TU+YCA==}
+    engines: {node: '>= 0.4'}
+
+  is-array-buffer@3.0.5:
+    resolution: {integrity: sha512-DDfANUiiG2wC1qawP66qlTugJeL5HyzMpfr8lLK+jMQirGzNod0B12cFB/9q838Ru27sBwfw78/rdoU7RERz6A==}
+    engines: {node: '>= 0.4'}
+
+  is-arrayish@0.2.1:
+    resolution: {integrity: sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==}
+
+  is-async-function@2.1.1:
+    resolution: {integrity: sha512-9dgM/cZBnNvjzaMYHVoxxfPj2QXt22Ev7SuuPrs+xav0ukGB0S6d4ydZdEiM48kLx5kDV+QBPrpVnFyefL8kkQ==}
+    engines: {node: '>= 0.4'}
+
+  is-bigint@1.1.0:
+    resolution: {integrity: sha512-n4ZT37wG78iz03xPRKJrHTdZbe3IicyucEtdRsV5yglwc3GyUfbAfpSeD0FJ41NbUNSt5wbhqfp1fS+BgnvDFQ==}
+    engines: {node: '>= 0.4'}
+
+  is-binary-path@1.0.1:
+    resolution: {integrity: sha512-9fRVlXc0uCxEDj1nQzaWONSpbTfx0FmJfzHF7pwlI8DkWGoHBBea4Pg5Ky0ojwwxQmnSifgbKkI06Qv0Ljgj+Q==}
+    engines: {node: '>=0.10.0'}
+
+  is-binary-path@2.1.0:
+    resolution: {integrity: sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==}
+    engines: {node: '>=8'}
+
+  is-boolean-object@1.2.2:
+    resolution: {integrity: sha512-wa56o2/ElJMYqjCjGkXri7it5FbebW5usLw/nPmCMs5DeZ7eziSYZhSmPRn0txqeW4LnAmQQU7FgqLpsEFKM4A==}
+    engines: {node: '>= 0.4'}
+
+  is-buffer@1.1.6:
+    resolution: {integrity: sha512-NcdALwpXkTm5Zvvbk7owOUSvVvBKDgKP5/ewfXEznmQFfs4ZRmanOeKBTjRVjka3QFoN6XJ+9F3USqfHqTaU5w==}
+
+  is-callable@1.2.7:
+    resolution: {integrity: sha512-1BC0BVFhS/p0qtw6enp8e+8OD0UrK0oFLztSjNzhcKA3WDuJxxAPXzPuPtKkjEY9UUoEWlX/8fgKeu2S8i9JTA==}
+    engines: {node: '>= 0.4'}
+
+  is-ci@1.2.1:
+    resolution: {integrity: sha512-s6tfsaQaQi3JNciBH6shVqEDvhGut0SUXr31ag8Pd8BBbVVlcGfWhpPmEOoM6RJ5TFhbypvf5yyRw/VXW1IiWg==}
+    hasBin: true
+
+  is-core-module@2.16.1:
+    resolution: {integrity: sha512-UfoeMA6fIJ8wTYFEUjelnaGI67v6+N7qXJEvQuIGa99l4xsCruSYOVSQ0uPANn4dAzm8lkYPaKLrrijLq7x23w==}
+    engines: {node: '>= 0.4'}
+
+  is-data-descriptor@1.0.1:
+    resolution: {integrity: sha512-bc4NlCDiCr28U4aEsQ3Qs2491gVq4V8G7MQyws968ImqjKuYtTJXrl7Vq7jsN7Ly/C3xj5KWFrY7sHNeDkAzXw==}
+    engines: {node: '>= 0.4'}
+
+  is-data-view@1.0.2:
+    resolution: {integrity: sha512-RKtWF8pGmS87i2D6gqQu/l7EYRlVdfzemCJN/P3UOs//x1QE7mfhvzHIApBTRf7axvT6DMGwSwBXYCT0nfB9xw==}
+    engines: {node: '>= 0.4'}
+
+  is-date-object@1.1.0:
+    resolution: {integrity: sha512-PwwhEakHVKTdRNVOw+/Gyh0+MzlCl4R6qKvkhuvLtPMggI1WAHt9sOwZxQLSGpUaDnrdyDsomoRgNnCfKNSXXg==}
+    engines: {node: '>= 0.4'}
+
+  is-deflate@1.0.0:
+    resolution: {integrity: sha512-YDoFpuZWu1VRXlsnlYMzKyVRITXj7Ej/V9gXQ2/pAe7X1J7M/RNOqaIYi6qUn+B7nGyB9pDXrv02dsB58d2ZAQ==}
+
+  is-descriptor@0.1.7:
+    resolution: {integrity: sha512-C3grZTvObeN1xud4cRWl366OMXZTj0+HGyk4hvfpx4ZHt1Pb60ANSXqCK7pdOTeUQpRzECBSTphqvD7U+l22Eg==}
+    engines: {node: '>= 0.4'}
+
+  is-descriptor@1.0.3:
+    resolution: {integrity: sha512-JCNNGbwWZEVaSPtS45mdtrneRWJFp07LLmykxeFV5F6oBvNF8vHSfJuJgoT472pSfk+Mf8VnlrspaFBHWM8JAw==}
+    engines: {node: '>= 0.4'}
+
+  is-docker@2.2.1:
+    resolution: {integrity: sha512-F+i2BKsFrH66iaUFc0woD8sLy8getkwTwtOBjvs56Cx4CgJDeKQeqfz8wAYiSb8JOprWhHH5p77PbmYCvvUuXQ==}
+    engines: {node: '>=8'}
+    hasBin: true
+
+  is-extendable@0.1.1:
+    resolution: {integrity: sha512-5BMULNob1vgFX6EjQw5izWDxrecWK9AM72rugNr0TFldMOi0fj6Jk+zeKIt0xGj4cEfQIJth4w3OKWOJ4f+AFw==}
+    engines: {node: '>=0.10.0'}
+
+  is-extendable@1.0.1:
+    resolution: {integrity: sha512-arnXMxT1hhoKo9k1LZdmlNyJdDDfy2v0fXjFlmok4+i8ul/6WlbVge9bhM74OpNPQPMGUToDtz+KXa1PneJxOA==}
+    engines: {node: '>=0.10.0'}
+
+  is-extglob@2.1.1:
+    resolution: {integrity: sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==}
+    engines: {node: '>=0.10.0'}
+
+  is-finalizationregistry@1.1.1:
+    resolution: {integrity: sha512-1pC6N8qWJbWoPtEjgcL2xyhQOP491EQjeUo3qTKcmV8YSDDJrOepfG8pcC7h/QgnQHYSv0mJ3Z/ZWxmatVrysg==}
+    engines: {node: '>= 0.4'}
+
+  is-fullwidth-code-point@1.0.0:
+    resolution: {integrity: sha512-1pqUqRjkhPJ9miNq9SwMfdvi6lBJcd6eFxvfaivQhaH3SgisfiuudvFntdKOmxuee/77l+FPjKrQjWvmPjWrRw==}
+    engines: {node: '>=0.10.0'}
+
+  is-fullwidth-code-point@3.0.0:
+    resolution: {integrity: sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==}
+    engines: {node: '>=8'}
+
+  is-generator-function@1.1.0:
+    resolution: {integrity: sha512-nPUB5km40q9e8UfN/Zc24eLlzdSf9OfKByBw9CIdw4H1giPMeA0OIJvbchsCu4npfI2QcMVBsGEBHKZ7wLTWmQ==}
+    engines: {node: '>= 0.4'}
+
+  is-glob@3.1.0:
+    resolution: {integrity: sha512-UFpDDrPgM6qpnFNI+rh/p3bUaq9hKLZN8bMUWzxmcnZVS3omf4IPK+BrewlnWjO1WmUsMYuSjKh4UJuV4+Lqmw==}
+    engines: {node: '>=0.10.0'}
+
+  is-glob@4.0.3:
+    resolution: {integrity: sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==}
+    engines: {node: '>=0.10.0'}
+
+  is-gzip@1.0.0:
+    resolution: {integrity: sha512-rcfALRIb1YewtnksfRIHGcIY93QnK8BIQ/2c9yDYcG/Y6+vRoJuTWBmmSEbyLLYtXm7q35pHOHbZFQBaLrhlWQ==}
+    engines: {node: '>=0.10.0'}
+
+  is-interactive@2.0.0:
+    resolution: {integrity: sha512-qP1vozQRI+BMOPcjFzrjXuQvdak2pHNUMZoeG2eRbiSqyvbEf/wQtEOTOX1guk6E3t36RkaqiSt8A/6YElNxLQ==}
+    engines: {node: '>=12'}
+
+  is-map@2.0.3:
+    resolution: {integrity: sha512-1Qed0/Hr2m+YqxnM09CjA2d/i6YZNfF6R2oRAOj36eUdS6qIV/huPJNSEpKbupewFs+ZsJlxsjjPbc0/afW6Lw==}
+    engines: {node: '>= 0.4'}
+
+  is-negated-glob@1.0.0:
+    resolution: {integrity: sha512-czXVVn/QEmgvej1f50BZ648vUI+em0xqMq2Sn+QncCLN4zj1UAxlT+kw/6ggQTOaZPd1HqKQGEqbpQVtJucWug==}
+    engines: {node: '>=0.10.0'}
+
+  is-negative-zero@2.0.3:
+    resolution: {integrity: sha512-5KoIu2Ngpyek75jXodFvnafB6DJgr3u8uuK0LEZJjrU19DrMD3EVERaR8sjz8CCGgpZvxPl9SuE1GMVPFHx1mw==}
+    engines: {node: '>= 0.4'}
+
+  is-number-object@1.1.1:
+    resolution: {integrity: sha512-lZhclumE1G6VYD8VHe35wFaIif+CTy5SJIi5+3y4psDgWu4wPDoBhF8NxUOinEc7pHgiTsT6MaBb92rKhhD+Xw==}
+    engines: {node: '>= 0.4'}
+
+  is-number@3.0.0:
+    resolution: {integrity: sha512-4cboCqIpliH+mAvFNegjZQ4kgKc3ZUhQVr3HvWbSh5q3WH2v82ct+T2Y1hdU5Gdtorx/cLifQjqCbL7bpznLTg==}
+    engines: {node: '>=0.10.0'}
+
+  is-number@4.0.0:
+    resolution: {integrity: sha512-rSklcAIlf1OmFdyAqbnWTLVelsQ58uvZ66S/ZyawjWqIviTWCjg2PzVGw8WUA+nNuPTqb4wgA+NszrJ+08LlgQ==}
+    engines: {node: '>=0.10.0'}
+
+  is-number@7.0.0:
+    resolution: {integrity: sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==}
+    engines: {node: '>=0.12.0'}
+
+  is-plain-obj@1.1.0:
+    resolution: {integrity: sha512-yvkRyxmFKEOQ4pNXCmJG5AEQNlXJS5LaONXo5/cLdTZdWvsZ1ioJEonLGAosKlMWE8lwUy/bJzMjcw8az73+Fg==}
+    engines: {node: '>=0.10.0'}
+
+  is-plain-obj@2.1.0:
+    resolution: {integrity: sha512-YWnfyRwxL/+SsrWYfOpUtz5b3YD+nyfkHvjbcanzk8zgyO4ASD67uVMRt8k5bM4lLMDnXfriRhOpemw+NfT1eA==}
+    engines: {node: '>=8'}
+
+  is-plain-object@2.0.4:
+    resolution: {integrity: sha512-h5PpgXkWitc38BBMYawTYMWJHFZJVnBquFE57xFpjB8pJFiF6gZ+bU+WyI/yqXiFR5mdLsgYNaPe8uao6Uv9Og==}
+    engines: {node: '>=0.10.0'}
+
+  is-plain-object@5.0.0:
+    resolution: {integrity: sha512-VRSzKkbMm5jMDoKLbltAkFQ5Qr7VDiTFGXxYFXXowVj387GeGNOCsOH6Msy00SGZ3Fp84b1Naa1psqgcCIEP5Q==}
+    engines: {node: '>=0.10.0'}
+
+  is-promise@2.2.2:
+    resolution: {integrity: sha512-+lP4/6lKUBfQjZ2pdxThZvLUAafmZb8OAxFb8XXtiQmS35INgr85hdOGoEs124ez1FCnZJt6jau/T+alh58QFQ==}
+
+  is-regex@1.2.1:
+    resolution: {integrity: sha512-MjYsKHO5O7mCsmRGxWcLWheFqN9DJ/2TmngvjKXihe6efViPqc274+Fx/4fYj/r03+ESvBdTXK0V6tA3rgez1g==}
+    engines: {node: '>= 0.4'}
+
+  is-relative@1.0.0:
+    resolution: {integrity: sha512-Kw/ReK0iqwKeu0MITLFuj0jbPAmEiOsIwyIXvvbfa6QfmN9pkD1M+8pdk7Rl/dTKbH34/XBFMbgD4iMJhLQbGA==}
+    engines: {node: '>=0.10.0'}
+
+  is-set@2.0.3:
+    resolution: {integrity: sha512-iPAjerrse27/ygGLxw+EBR9agv9Y6uLeYVJMu+QNCoouJ1/1ri0mGrcWpfCqFZuzzx3WjtwxG098X+n4OuRkPg==}
+    engines: {node: '>= 0.4'}
+
+  is-shared-array-buffer@1.0.4:
+    resolution: {integrity: sha512-ISWac8drv4ZGfwKl5slpHG9OwPNty4jOWPRIhBpxOoD+hqITiwuipOQ2bNthAzwA3B4fIjO4Nln74N0S9byq8A==}
+    engines: {node: '>= 0.4'}
+
+  is-stream@1.1.0:
+    resolution: {integrity: sha512-uQPm8kcs47jx38atAcWTVxyltQYoPT68y9aWYdV6yWXSyW8mzSat0TL6CiWdZeCdF3KrAvpVtnHbTv4RN+rqdQ==}
+    engines: {node: '>=0.10.0'}
+
+  is-stream@4.0.1:
+    resolution: {integrity: sha512-Dnz92NInDqYckGEUJv689RbRiTSEHCQ7wOVeALbkOz999YpqT46yMRIGtSNl2iCL1waAZSx40+h59NV/EwzV/A==}
+    engines: {node: '>=18'}
+
+  is-string@1.1.1:
+    resolution: {integrity: sha512-BtEeSsoaQjlSPBemMQIrY1MY0uM6vnS1g5fmufYOtnxLGUZM2178PKbhsk7Ffv58IX+ZtcvoGwccYsh0PglkAA==}
+    engines: {node: '>= 0.4'}
+
+  is-symbol@1.1.1:
+    resolution: {integrity: sha512-9gGx6GTtCQM73BgmHQXfDmLtfjjTUDSyoxTCbp5WtoixAhfgsDirWIcVQ/IHpvI5Vgd5i/J5F7B9cN/WlVbC/w==}
+    engines: {node: '>= 0.4'}
+
+  is-typed-array@1.1.15:
+    resolution: {integrity: sha512-p3EcsicXjit7SaskXHs1hA91QxgTw46Fv6EFKKGS5DRFLD8yKnohjF3hxoju94b/OcMZoQukzpPpBE9uLVKzgQ==}
+    engines: {node: '>= 0.4'}
+
+  is-unc-path@1.0.0:
+    resolution: {integrity: sha512-mrGpVd0fs7WWLfVsStvgF6iEJnbjDFZh9/emhRDcGWTduTfNHd9CHeUwH3gYIjdbwo4On6hunkztwOaAw0yllQ==}
+    engines: {node: '>=0.10.0'}
+
+  is-unicode-supported@0.1.0:
+    resolution: {integrity: sha512-knxG2q4UC3u8stRGyAVJCOdxFmv5DZiRcdlIaAQXAbSfJya+OhopNotLQrstBhququ4ZpuKbDc/8S6mgXgPFPw==}
+    engines: {node: '>=10'}
+
+  is-unicode-supported@1.3.0:
+    resolution: {integrity: sha512-43r2mRvz+8JRIKnWJ+3j8JtjRKZ6GmjzfaE/qiBJnikNnYv/6bagRJ1kUhNk8R5EX/GkobD+r+sfxCPJsiKBLQ==}
+    engines: {node: '>=12'}
+
+  is-unicode-supported@2.1.0:
+    resolution: {integrity: sha512-mE00Gnza5EEB3Ds0HfMyllZzbBrmLOX3vfWoj9A9PEnTfratQ/BcaJOuMhnkhjXvb2+FkY3VuHqtAGpTPmglFQ==}
+    engines: {node: '>=18'}
+
+  is-utf8@0.2.1:
+    resolution: {integrity: sha512-rMYPYvCzsXywIsldgLaSoPlw5PfoB/ssr7hY4pLfcodrA5M/eArza1a9VmTiNIBNMjOGr1Ow9mTyU2o69U6U9Q==}
+
+  is-valid-glob@1.0.0:
+    resolution: {integrity: sha512-AhiROmoEFDSsjx8hW+5sGwgKVIORcXnrlAx/R0ZSeaPw70Vw0CqkGBBhHGL58Uox2eXnU1AnvXJl1XlyedO5bA==}
+    engines: {node: '>=0.10.0'}
+
+  is-weakmap@2.0.2:
+    resolution: {integrity: sha512-K5pXYOm9wqY1RgjpL3YTkF39tni1XajUIkawTLUo9EZEVUFga5gSQJF8nNS7ZwJQ02y+1YCNYcMh+HIf1ZqE+w==}
+    engines: {node: '>= 0.4'}
+
+  is-weakref@1.1.1:
+    resolution: {integrity: sha512-6i9mGWSlqzNMEqpCp93KwRS1uUOodk2OJ6b+sq7ZPDSy2WuI5NFIxp/254TytR8ftefexkWn5xNiHUNpPOfSew==}
+    engines: {node: '>= 0.4'}
+
+  is-weakset@2.0.4:
+    resolution: {integrity: sha512-mfcwb6IzQyOKTs84CQMrOwW4gQcaTOAWJ0zzJCl2WSPDrWk/OzDaImWFH3djXhb24g4eudZfLRozAvPGw4d9hQ==}
+    engines: {node: '>= 0.4'}
+
+  is-windows@1.0.2:
+    resolution: {integrity: sha512-eXK1UInq2bPmjyX6e3VHIzMLobc4J94i4AWn+Hpq3OU5KkrRC96OAcR3PRJ/pGu6m8TRnBHP9dkXQVsT/COVIA==}
+    engines: {node: '>=0.10.0'}
+
+  is-wsl@2.2.0:
+    resolution: {integrity: sha512-fKzAra0rGJUUBwGBgNkHZuToZcn+TtXHpeCgmkMJMMYx1sQDYaCSyjJBSCa2nH1DGm7s3n1oBnohoVTBaN7Lww==}
+    engines: {node: '>=8'}
+
+  isarray@0.0.1:
+    resolution: {integrity: sha512-D2S+3GLxWH+uhrNEcoh/fnmYeP8E8/zHl644d/jdA0g2uyXvy3sb0qxotE+ne0LtccHknQzWwZEzhak7oJ0COQ==}
+
+  isarray@1.0.0:
+    resolution: {integrity: sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ==}
+
+  isarray@2.0.5:
+    resolution: {integrity: sha512-xHjhDr3cNBK0BzdUJSPXZntQUx/mwMS5Rw4A7lPJ90XGAO6ISP/ePDNuo0vhqOZU+UD5JoodwCAAoZQd3FeAKw==}
+
+  isexe@2.0.0:
+    resolution: {integrity: sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==}
+
+  isobject@2.1.0:
+    resolution: {integrity: sha512-+OUdGJlgjOBZDfxnDjYYG6zp487z0JGNQq3cYQYg5f5hKR+syHMsaztzGeml/4kGG55CSpKSpWTY+jYGgsHLgA==}
+    engines: {node: '>=0.10.0'}
+
+  isobject@3.0.1:
+    resolution: {integrity: sha512-WhB9zCku7EGTj/HQQRz5aUQEUeoQZH2bWcltRErOpymJ4boYE6wL9Tbr23krRPSZ+C5zqNSrSw+Cc7sZZ4b7vg==}
+    engines: {node: '>=0.10.0'}
+
+  istanbul-lib-coverage@3.2.2:
+    resolution: {integrity: sha512-O8dpsF+r0WV/8MNRKfnmrtCWhuKjxrq2w+jpzBL5UZKTi2LeVWnWOmWRxFlesJONmc+wLAGvKQZEOanko0LFTg==}
+    engines: {node: '>=8'}
+
+  istanbul-lib-instrument@6.0.3:
+    resolution: {integrity: sha512-Vtgk7L/R2JHyyGW07spoFlB8/lpjiOLTjMdms6AFMraYt3BaJauod/NGrfnVG/y4Ix1JEuMRPDPEj2ua+zz1/Q==}
+    engines: {node: '>=10'}
+
+  istanbul-lib-report@3.0.1:
+    resolution: {integrity: sha512-GCfE1mtsHGOELCU8e/Z7YWzpmybrx/+dSTfLrvY8qRmaY6zXTKWn6WQIjaAFw069icm6GVMNkgu0NzI4iPZUNw==}
+    engines: {node: '>=10'}
+
+  istanbul-lib-source-maps@4.0.1:
+    resolution: {integrity: sha512-n3s8EwkdFIJCG3BPKBYvskgXGoy88ARzvegkitk60NxRdwltLOTaH7CUiMRXvwYorl0Q712iEjcWB+fK/MrWVw==}
+    engines: {node: '>=10'}
+
+  istanbul-reports@3.1.7:
+    resolution: {integrity: sha512-BewmUXImeuRk2YY0PVbxgKAysvhRPUQE0h5QRM++nVWyubKGV0l8qQ5op8+B2DOmwSe63Jivj0BjkPQVf8fP5g==}
+    engines: {node: '>=8'}
+
+  istextorbinary@1.0.2:
+    resolution: {integrity: sha512-qZ5ptUDuni2pdCngFTraYa5kalQ0mX47Mhn08tT0DZZv/7yhX1eMb9lFtXVbWhFtgRtpLG/UdqVAjh9teO5x+w==}
+    engines: {node: '>=0.4'}
+
+  jackspeak@3.4.3:
+    resolution: {integrity: sha512-OGlZQpz2yfahA/Rd1Y8Cd9SIEsqvXkLVoSw/cgwhnhFMDbsQFeZYoJJ7bIZBS9BcamUW96asq/npPWugM+RQBw==}
+
+  jackspeak@4.1.1:
+    resolution: {integrity: sha512-zptv57P3GpL+O0I7VdMJNBZCu+BPHVQUk55Ft8/QCJjTVxrnJHuVuX/0Bl2A6/+2oyR/ZMEuFKwmzqqZ/U5nPQ==}
+    engines: {node: 20 || >=22}
+
+  jest-worker@27.5.1:
+    resolution: {integrity: sha512-7vuh85V5cdDofPyxn58nrPjBktZo0u9x1g8WtjQol+jZDaE+fhN+cIvTj11GndBnMnyfrUOG1sZQxCdjKh+DKg==}
+    engines: {node: '>= 10.13.0'}
+
+  joycon@3.1.1:
+    resolution: {integrity: sha512-34wB/Y7MW7bzjKRjUKTa46I2Z7eV62Rkhva+KkopW7Qvv/OSWBqvkSY7vusOPrNuZcUG3tApvdVgNB8POj3SPw==}
+    engines: {node: '>=10'}
+
+  js-base64@3.7.7:
+    resolution: {integrity: sha512-7rCnleh0z2CkXhH67J8K1Ytz0b2Y+yxTPL+/KOJoa20hfnVQ/3/T6W/KflYI4bRHRagNeXeU2bkNGI3v1oS/lw==}
+
+  js-beautify@1.15.4:
+    resolution: {integrity: sha512-9/KXeZUKKJwqCXUdBxFJ3vPh467OCckSBmYDwSK/EtV090K+iMJ7zx2S3HLVDIWFQdqMIsZWbnaGiba18aWhaA==}
+    engines: {node: '>=14'}
+    hasBin: true
+
+  js-cookie@3.0.5:
+    resolution: {integrity: sha512-cEiJEAEoIbWfCZYKWhVwFuvPX1gETRYPw6LlaTKoxD3s2AkXzkCjnp6h0V77ozyqj0jakteJ4YqDJT830+lVGw==}
+    engines: {node: '>=14'}
+
+  js-tokens@4.0.0:
+    resolution: {integrity: sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==}
+
+  js-yaml@4.1.0:
+    resolution: {integrity: sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==}
+    hasBin: true
+
+  jsbn@1.1.0:
+    resolution: {integrity: sha512-4bYVV3aAMtDTTu4+xsDYa6sy9GyJ69/amsu9sYF2zqjiEoZA5xJi3BrfX3uY+/IekIu7MwdObdbDWpoZdBv3/A==}
+
+  jschardet@3.1.4:
+    resolution: {integrity: sha512-/kmVISmrwVwtyYU40iQUOp3SUPk2dhNCMsZBQX0R1/jZ8maaXJ/oZIzUOiyOqcgtLnETFKYChbJ5iDC/eWmFHg==}
+    engines: {node: '>=0.1.90'}
+
+  jsesc@3.1.0:
+    resolution: {integrity: sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==}
+    engines: {node: '>=6'}
+    hasBin: true
+
+  json-buffer@3.0.1:
+    resolution: {integrity: sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==}
+
+  json-parse-better-errors@1.0.2:
+    resolution: {integrity: sha512-mrqyZKfX5EhL7hvqcV6WG1yYjnjeuYDzDhhcAAUrq8Po85NBQBJP+ZDUT75qZQ98IkUoBqdkExkukOU7Ts2wrw==}
+
+  json-parse-even-better-errors@2.3.1:
+    resolution: {integrity: sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==}
+
+  json-schema-traverse@0.4.1:
+    resolution: {integrity: sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==}
+
+  json-schema-traverse@1.0.0:
+    resolution: {integrity: sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug==}
+
+  json-stable-stringify-without-jsonify@1.0.1:
+    resolution: {integrity: sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==}
+
+  json-stringify-safe@5.0.1:
+    resolution: {integrity: sha512-ZClg6AaYvamvYEE82d3Iyd3vSSIjQ+odgjaTzRuO3s7toCdFKczob2i0zCh7JE8kWn17yvAWhUVxvqGwUalsRA==}
+
+  json5@2.2.3:
+    resolution: {integrity: sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==}
+    engines: {node: '>=6'}
+    hasBin: true
+
+  jsonfile@4.0.0:
+    resolution: {integrity: sha512-m6F1R3z8jjlf2imQHS2Qez5sjKWQzbuuhuJ/FKYFRZvPE3PuHcSMVZzfsLhGVOkfd20obL5SWEBew5ShlquNxg==}
+
+  jsonfile@6.1.0:
+    resolution: {integrity: sha512-5dgndWOriYSm5cnYaJNhalLNDKOqFwyDB/rr1E9ZsGciGvKPs8R2xYGCacuf3z6K1YKDz182fd+fY3cn3pMqXQ==}
+
+  jszip@3.10.1:
+    resolution: {integrity: sha512-xXDvecyTpGLrqFrvkrUSoxxfJI5AH7U8zxxtVclpsUtMCq4JQ290LY8AW5c7Ggnr/Y/oK+bQMbqK2qmtk3pN4g==}
+
+  just-debounce@1.1.0:
+    resolution: {integrity: sha512-qpcRocdkUmf+UTNBYx5w6dexX5J31AKK1OmPwH630a83DdVVUIngk55RSAiIGpQyoH0dlr872VHfPjnQnK1qDQ==}
+
+  just-extend@6.2.0:
+    resolution: {integrity: sha512-cYofQu2Xpom82S6qD778jBDpwvvy39s1l/hrYij2u9AMdQcGRpaBu6kY4mVhuno5kJVi1DAz4aiphA2WI1/OAw==}
+
+  kerberos@2.1.1:
+    resolution: {integrity: sha512-414s1G/qgK2T60cXnZsHbtRj8Ynjg0DBlQWeY99tkyqQ2e8vGgFHvxRdvjTlLHg/SxBA0zLQcGE6Pk6Dfq/BCA==}
+    engines: {node: '>=12.9.0'}
+
+  keygrip@1.1.0:
+    resolution: {integrity: sha512-iYSchDJ+liQ8iwbSI2QqsQOvqv58eJCEanyJPJi+Khyu8smkcKSFUCbPwzFcL7YVtZ6eONjqRX/38caJ7QjRAQ==}
+    engines: {node: '>= 0.6'}
+
+  keyv@4.5.4:
+    resolution: {integrity: sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==}
+
+  kind-of@1.1.0:
+    resolution: {integrity: sha512-aUH6ElPnMGon2/YkxRIigV32MOpTVcoXQ1Oo8aYn40s+sJ3j+0gFZsT8HKDcxNy7Fi9zuquWtGaGAahOdv5p/g==}
+    engines: {node: '>=0.10.0'}
+
+  kind-of@3.2.2:
+    resolution: {integrity: sha512-NOW9QQXMoZGg/oqnVNoNTTIFEIid1627WCffUBJEdMxYApq7mNE7CpzucIPc+ZQg25Phej7IJSmX3hO+oblOtQ==}
+    engines: {node: '>=0.10.0'}
+
+  kind-of@4.0.0:
+    resolution: {integrity: sha512-24XsCxmEbRwEDbz/qz3stgin8TTzZ1ESR56OMCN0ujYg+vRutNSiOj9bHH9u85DKgXguraugV5sFuvbD4FW/hw==}
+    engines: {node: '>=0.10.0'}
+
+  kind-of@5.1.0:
+    resolution: {integrity: sha512-NGEErnH6F2vUuXDh+OlbcKW7/wOcfdRHaZ7VWtqCztfHri/++YKmP51OdWeGPuqCOba6kk2OTe5d02VmTB80Pw==}
+    engines: {node: '>=0.10.0'}
+
+  kind-of@6.0.3:
+    resolution: {integrity: sha512-dcS1ul+9tmeD95T+x28/ehLgd9mENa3LsvDTtzm3vyBEO7RPptvAD+t44WVXaUjTBRcrpFeFlC8WCruUR456hw==}
+    engines: {node: '>=0.10.0'}
+
+  koa-compose@4.1.0:
+    resolution: {integrity: sha512-8ODW8TrDuMYvXRwra/Kh7/rJo9BtOfPc6qO8eAfC80CnCvSjSl0bkRM24X6/XBBEyj0v1nRUQ1LyOy3dbqOWXw==}
+
+  koa-convert@2.0.0:
+    resolution: {integrity: sha512-asOvN6bFlSnxewce2e/DK3p4tltyfC4VM7ZwuTuepI7dEQVcvpyFuBcEARu1+Hxg8DIwytce2n7jrZtRlPrARA==}
+    engines: {node: '>= 10'}
+
+  koa-morgan@1.0.1:
+    resolution: {integrity: sha512-JOUdCNlc21G50afBXfErUrr1RKymbgzlrO5KURY+wmDG1Uvd2jmxUJcHgylb/mYXy2SjiNZyYim/ptUBGsIi3A==}
+
+  koa-mount@4.2.0:
+    resolution: {integrity: sha512-2iHQc7vbA9qLeVq5gKAYh3m5DOMMlMfIKjW/REPAS18Mf63daCJHHVXY9nbu7ivrnYn5PiPC4CE523Tf5qvjeQ==}
+    engines: {node: '>= 7.6.0'}
+
+  koa-send@5.0.1:
+    resolution: {integrity: sha512-tmcyQ/wXXuxpDxyNXv5yNNkdAMdFRqwtegBXUaowiQzUKqJehttS0x2j0eOZDQAyloAth5w6wwBImnFzkUz3pQ==}
+    engines: {node: '>= 8'}
+
+  koa-static@5.0.0:
+    resolution: {integrity: sha512-UqyYyH5YEXaJrf9S8E23GoJFQZXkBVJ9zYYMPGz919MSX1KuvAcycIuS0ci150HCoPf4XQVhQ84Qf8xRPWxFaQ==}
+    engines: {node: '>= 7.6.0'}
+
+  koa@2.16.1:
+    resolution: {integrity: sha512-umfX9d3iuSxTQP4pnzLOz0HKnPg0FaUUIKcye2lOiz3KPu1Y3M3xlz76dISdFPQs37P9eJz1wUpcTS6KDPn9fA==}
+    engines: {node: ^4.8.4 || ^6.10.1 || ^7.10.1 || >= 8.1.4}
+
+  last-run@1.1.1:
+    resolution: {integrity: sha512-U/VxvpX4N/rFvPzr3qG5EtLKEnNI0emvIQB3/ecEwv+8GHaUKbIB8vxv1Oai5FAF0d0r7LXHhLLe5K/yChm5GQ==}
+    engines: {node: '>= 0.10'}
+
+  lazy.js@0.4.3:
+    resolution: {integrity: sha512-kHcnVaCZzhv6P+YgC4iRZFw62+biYIcBYU8qqKzJysC7cdKwPgb3WRtcBPyINTSLZwsjyFdBtd97sHbkseTZKw==}
+
+  lazystream@1.0.1:
+    resolution: {integrity: sha512-b94GiNHQNy6JNTrt5w6zNyffMrNkXZb3KTkCZJb2V1xaEGCk093vkZ2jk3tpaeP33/OiXC+WvK9AxUebnf5nbw==}
+    engines: {node: '>= 0.6.3'}
+
+  lcid@1.0.0:
+    resolution: {integrity: sha512-YiGkH6EnGrDGqLMITnGjXtGmNtjoXw9SVUzcaos8RBi7Ps0VBylkq+vOcY9QE5poLasPCR849ucFUkl0UzUyOw==}
+    engines: {node: '>=0.10.0'}
+
+  lead@1.0.0:
+    resolution: {integrity: sha512-IpSVCk9AYvLHo5ctcIXxOBpMWUe+4TKN3VPWAKUbJikkmsGp0VrSM8IttVc32D6J4WUsiPE6aEFRNmIoF/gdow==}
+    engines: {node: '>= 0.10'}
+
+  lie@3.3.0:
+    resolution: {integrity: sha512-UaiMJzeWRlEujzAuw5LokY1L5ecNQYZKfmyZ9L7wDHb/p5etKaxXhohBcrw0EYby+G/NA52vRSN4N39dxHAIwQ==}
+
+  liftoff@3.1.0:
+    resolution: {integrity: sha512-DlIPlJUkCV0Ips2zf2pJP0unEoT1kwYhiiPUGF3s/jtxTCjziNLoiVVh+jqWOWeFi6mmwQ5fNxvAUyPad4Dfog==}
+    engines: {node: '>= 0.8'}
+
+  lilconfig@3.1.3:
+    resolution: {integrity: sha512-/vlFKAoH5Cgt3Ie+JLhRbwOsCQePABiU3tJ1egGvyQ+33R/vcwM2Zl2QR/LzjsBeItPt3oSVXapn+m4nQDvpzw==}
+    engines: {node: '>=14'}
+
+  lines-and-columns@1.2.4:
+    resolution: {integrity: sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==}
+
+  linkify-it@5.0.0:
+    resolution: {integrity: sha512-5aHCbzQRADcdP+ATqnDuhhJ/MRIqDkZX5pyjFHRRysS8vZ5AbqGEoFIb6pYHPZ+L/OC2Lc+xT8uHVVR5CAK/wQ==}
+
+  load-json-file@1.1.0:
+    resolution: {integrity: sha512-cy7ZdNRXdablkXYNI049pthVeXFurRyb9+hA/dZzerZ0pGTx42z+y+ssxBaVV2l70t1muq5IdKhn4UtcoGUY9A==}
+    engines: {node: '>=0.10.0'}
+
+  load-json-file@4.0.0:
+    resolution: {integrity: sha512-Kx8hMakjX03tiGTLAIdJ+lL0htKnXjEZN6hk/tozf/WOuYGdZBJrZ+rCJRbVCugsjB3jMLn9746NsQIf5VjBMw==}
+    engines: {node: '>=4'}
+
+  load-tsconfig@0.2.5:
+    resolution: {integrity: sha512-IXO6OCs9yg8tMKzfPZ1YmheJbZCiEsnBdcB03l0OcfK9prKnJb96siuHCr5Fl37/yo9DnKU+TLpxzTUspw9shg==}
+    engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}
+
+  loader-runner@4.3.0:
+    resolution: {integrity: sha512-3R/1M+yS3j5ou80Me59j7F9IMs4PXs3VqRrm0TU3AbKPxlmpoY1TNscJV/oGJXo8qCatFGTfDbY6W6ipGOYXfg==}
+    engines: {node: '>=6.11.5'}
+
+  loader-utils@2.0.4:
+    resolution: {integrity: sha512-xXqpXoINfFhgua9xiqD8fPFHgkoq1mmmpE92WlDbm9rNRd/EbRb+Gqf908T2DMfuHjjJlksiK2RbHVOdD/MqSw==}
+    engines: {node: '>=8.9.0'}
+
+  locate-path@5.0.0:
+    resolution: {integrity: sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==}
+    engines: {node: '>=8'}
+
+  locate-path@6.0.0:
+    resolution: {integrity: sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==}
+    engines: {node: '>=10'}
+
+  lodash.camelcase@4.3.0:
+    resolution: {integrity: sha512-TwuEnCnxbc3rAvhf/LbG7tJUDzhqXyFnv3dtzLOPgCG/hODL7WFnsbwktkD7yUV0RrreP/l1PALq/YSg6VvjlA==}
+
+  lodash.clone@4.5.0:
+    resolution: {integrity: sha512-GhrVeweiTD6uTmmn5hV/lzgCQhccwReIVRLHp7LT4SopOjqEZ5BbX8b5WWEtAKasjmy8hR7ZPwsYlxRCku5odg==}
+    deprecated: This package is deprecated. Use structuredClone instead.
+
+  lodash.clonedeep@4.5.0:
+    resolution: {integrity: sha512-H5ZhCF25riFd9uB5UCkVKo61m3S/xZk1x4wA6yp/L3RFP6Z/eHH1ymQcGLo7J3GMPfm0V/7m1tryHuGVxpqEBQ==}
+
+  lodash.get@4.4.2:
+    resolution: {integrity: sha512-z+Uw/vLuy6gQe8cfaFWD7p0wVv8fJl3mbzXh33RS+0oW2wvUqiRXiQ69gLWSLpgB5/6sU+r6BlQR0MBILadqTQ==}
+    deprecated: This package is deprecated. Use the optional chaining (?.) operator instead.
+
+  lodash.memoize@4.1.2:
+    resolution: {integrity: sha512-t7j+NzmgnQzTAYXcsHYLgimltOV1MXHtlOWf6GjL9Kj8GK5FInw5JotxvbOs+IvV1/Dzo04/fCGfLVs7aXb4Ag==}
+
+  lodash.some@4.6.0:
+    resolution: {integrity: sha512-j7MJE+TuT51q9ggt4fSgVqro163BEFjAt3u97IqU+JA2DkWl80nFTrowzLpZ/BnpN7rrl0JA/593NAdd8p/scQ==}
+
+  lodash.sortby@4.7.0:
+    resolution: {integrity: sha512-HDWXG8isMntAyRF5vZ7xKuEvOhT4AhlRt/3czTSjvGUxjYCBVRQY48ViDHyfYz9VIoBkW4TMGQNapx+l3RUwdA==}
+
+  lodash.uniq@4.5.0:
+    resolution: {integrity: sha512-xfBaXQd9ryd9dlSDvnvI0lvxfLJlYAZzXomUYzLKtUeOQvOP5piqAWuGtrhWeqaXK9hhoM/iyJc5AV+XfsX3HQ==}
+
+  lodash@4.17.21:
+    resolution: {integrity: sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==}
+
+  log-symbols@4.1.0:
+    resolution: {integrity: sha512-8XPvpAA8uyhfteu8pIvQxpJZ7SYYdpUivZpGy6sFsBuKRY/7rQGavedeB8aK+Zkyq6upMFVL/9AW6vOYzfRyLg==}
+    engines: {node: '>=10'}
+
+  log-symbols@6.0.0:
+    resolution: {integrity: sha512-i24m8rpwhmPIS4zscNzK6MSEhk0DUWa/8iYQWxhffV8jkI4Phvs3F+quL5xvS0gdQR0FyTCMMH33Y78dDTzzIw==}
+    engines: {node: '>=18'}
+
+  lowercase-keys@2.0.0:
+    resolution: {integrity: sha512-tqNXrS78oMOE73NMxK4EMLQsQowWf8jKooH9g7xPavRT706R6bkQJ6DY2Te7QukaZsulxa30wQ7bk0pm4XiHmA==}
+    engines: {node: '>=8'}
+
+  lowercase-keys@3.0.0:
+    resolution: {integrity: sha512-ozCC6gdQ+glXOQsveKD0YsDy8DSQFjDTz4zyzEHNV5+JP5D62LmfDZ6o1cycFx9ouG940M5dE8C8CTewdj2YWQ==}
+    engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}
+
+  lru-cache@10.4.3:
+    resolution: {integrity: sha512-JNAzZcXrCt42VGLuYz0zfAzDfAvJWW6AfYlDBQyDV5DClI2m5sAmK+OIO7s59XfsRsWHp02jAJrRadPRGTt6SQ==}
+
+  lru-cache@11.1.0:
+    resolution: {integrity: sha512-QIXZUBJUx+2zHUdQujWejBkcD9+cs94tLn0+YL8UrCh+D5sCXZ4c7LaEH48pNwRY3MLDgqUFyhlCyjJPf1WP0A==}
+    engines: {node: 20 || >=22}
+
+  lru-cache@5.1.1:
+    resolution: {integrity: sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==}
+
+  lru-cache@6.0.0:
+    resolution: {integrity: sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==}
+    engines: {node: '>=10'}
+
+  lru-queue@0.1.0:
+    resolution: {integrity: sha512-BpdYkt9EvGl8OfWHDQPISVpcl5xZthb+XPsbELj5AQXxIC8IriDZIQYjBJPEm5rS420sjZ0TLEzRcq5KdBhYrQ==}
+
+  magic-string@0.30.17:
+    resolution: {integrity: sha512-sNPKHvyjVf7gyjwS4xGTaW/mCnF8wnjtifKBEhxfZ7E/S8tQ0rssrwGNn6q8JH/ohItJfSQp9mBtQYuTlH5QnA==}
+
+  make-dir@4.0.0:
+    resolution: {integrity: sha512-hXdUTZYIVOt1Ex//jAQi+wTZZpUpwBj/0QsOzqegb3rGMMeJiSEu5xLHnYfBrRV4RH2+OCSOO95Is/7x1WJ4bw==}
+    engines: {node: '>=10'}
+
+  make-error@1.3.6:
+    resolution: {integrity: sha512-s8UhlNe7vPKomQhC1qFelMokr/Sc3AgNbso3n74mVPA5LTZwkB9NlXf4XPamLxJE8h0gh73rM94xvwRT2CVInw==}
+
+  make-iterator@1.0.1:
+    resolution: {integrity: sha512-pxiuXh0iVEq7VM7KMIhs5gxsfxCux2URptUQaXo4iZZJxBAzTPOLE2BumO5dbfVYq/hBJFBR/a1mFDmOx5AGmw==}
+    engines: {node: '>=0.10.0'}
+
+  map-cache@0.2.2:
+    resolution: {integrity: sha512-8y/eV9QQZCiyn1SprXSrCmqJN0yNRATe+PO8ztwqrvrbdRLA3eYJF0yaR0YayLWkMbsQSKWS9N2gPcGEc4UsZg==}
+    engines: {node: '>=0.10.0'}
+
+  map-stream@0.1.0:
+    resolution: {integrity: sha512-CkYQrPYZfWnu/DAmVCpTSX/xHpKZ80eKh2lAkyA6AJTef6bW+6JpbQZN5rofum7da+SyN1bi5ctTm+lTfcCW3g==}
+
+  map-visit@1.0.0:
+    resolution: {integrity: sha512-4y7uGv8bd2WdM9vpQsiQNo41Ln1NvhvDRuVt0k2JZQ+ezN2uaQes7lZeZ+QQUHOLQAtDaBJ+7wCbi+ab/KFs+w==}
+    engines: {node: '>=0.10.0'}
+
+  markdown-it@14.1.0:
+    resolution: {integrity: sha512-a54IwgWPaeBCAAsv13YgmALOF1elABB08FxO9i+r4VFk5Vl4pKokRPeX8u5TCgSsPi6ec1otfLjdOpVcgbpshg==}
+    hasBin: true
+
+  matchdep@2.0.0:
+    resolution: {integrity: sha512-LFgVbaHIHMqCRuCZyfCtUOq9/Lnzhi7Z0KFUE2fhD54+JN2jLh3hC02RLkqauJ3U4soU6H1J3tfj/Byk7GoEjA==}
+    engines: {node: '>= 0.10.0'}
+
+  matcher@3.0.0:
+    resolution: {integrity: sha512-OkeDaAZ/bQCxeFAozM55PKcKU0yJMPGifLwV4Qgjitu+5MoAfSQN4lsLJeXZ1b8w0x+/Emda6MZgXS1jvsapng==}
+    engines: {node: '>=10'}
+
+  math-intrinsics@1.1.0:
+    resolution: {integrity: sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==}
+    engines: {node: '>= 0.4'}
+
+  md5@2.3.0:
+    resolution: {integrity: sha512-T1GITYmFaKuO91vxyoQMFETst+O71VUPEU3ze5GNzDm0OWdP8v1ziTaAEPUr/3kLsY3Sftgz242A1SetQiDL7g==}
+
+  mdn-data@2.0.14:
+    resolution: {integrity: sha512-dn6wd0uw5GsdswPFfsgMp5NSB0/aDe6fK94YJV/AJDYXL6HVLWBsxeq7js7Ad+mU2K9LAlwpk6kN2D5mwCPVow==}
+
+  mdn-data@2.0.28:
+    resolution: {integrity: sha512-aylIc7Z9y4yzHYAJNuESG3hfhC+0Ibp/MAMiaOZgNv4pmEdFyfZhhhny4MNiAfWdBQ1RQ2mfDWmM1x8SvGyp8g==}
+
+  mdn-data@2.0.30:
+    resolution: {integrity: sha512-GaqWWShW4kv/G9IEucWScBx9G1/vsFZZJUO+tD26M8J8z3Kw5RDQjaoZe03YAClgeS/SWPOcb4nkFBTEi5DUEA==}
+
+  mdurl@2.0.0:
+    resolution: {integrity: sha512-Lf+9+2r+Tdp5wXDXC4PcIBjTDtq4UKjCPMQhKIuzpJNW0b96kVqSwW0bT7FhRSfmAiFYgP+SCRvdrDozfh0U5w==}
+
+  media-typer@0.3.0:
+    resolution: {integrity: sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==}
+    engines: {node: '>= 0.6'}
+
+  memoizee@0.4.17:
+    resolution: {integrity: sha512-DGqD7Hjpi/1or4F/aYAspXKNm5Yili0QDAFAY4QYvpqpgiY6+1jOfqpmByzjxbWd/T9mChbCArXAbDAsTm5oXA==}
+    engines: {node: '>=0.12'}
+
+  memory-fs@0.5.0:
+    resolution: {integrity: sha512-jA0rdU5KoQMC0e6ppoNRtpp6vjFq6+NY7r8hywnC7V+1Xj/MtHwGIbB1QaK/dunyjWteJzmkpd7ooeWg10T7GA==}
+    engines: {node: '>=4.3.0 <5.0.0 || >=5.10'}
+
+  memorystream@0.3.1:
+    resolution: {integrity: sha512-S3UwM3yj5mtUSEfP41UZmt/0SCoVYUcU1rkXv+BQ5Ig8ndL4sPoJNBUJERafdPb5jjHJGuMgytgKvKIf58XNBw==}
+    engines: {node: '>= 0.10.0'}
+
+  merge-options@1.0.1:
+    resolution: {integrity: sha512-iuPV41VWKWBIOpBsjoxjDZw8/GbSfZ2mk7N1453bwMrfzdrIk7EzBd+8UVR6rkw67th7xnk9Dytl3J+lHPdxvg==}
+    engines: {node: '>=4'}
+
+  merge-stream@2.0.0:
+    resolution: {integrity: sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==}
+
+  merge2@1.4.1:
+    resolution: {integrity: sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==}
+    engines: {node: '>= 8'}
+
+  micromatch@3.1.10:
+    resolution: {integrity: sha512-MWikgl9n9M3w+bpsY3He8L+w9eF9338xRl8IAO5viDizwSzziFEyUzo2xrrloB64ADbTf8uA8vRqqttDTOmccg==}
+    engines: {node: '>=0.10.0'}
+
+  micromatch@4.0.8:
+    resolution: {integrity: sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==}
+    engines: {node: '>=8.6'}
+
+  mime-db@1.52.0:
+    resolution: {integrity: sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==}
+    engines: {node: '>= 0.6'}
+
+  mime-types@2.1.35:
+    resolution: {integrity: sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==}
+    engines: {node: '>= 0.6'}
+
+  mime@1.6.0:
+    resolution: {integrity: sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==}
+    engines: {node: '>=4'}
+    hasBin: true
+
+  mimic-function@5.0.1:
+    resolution: {integrity: sha512-VP79XUPxV2CigYP3jWwAUFSku2aKqBH7uTAapFWCBqutsbmDo96KY5o8uh6U+/YSIn5OxJnXp73beVkpqMIGhA==}
+    engines: {node: '>=18'}
+
+  mimic-response@1.0.1:
+    resolution: {integrity: sha512-j5EctnkH7amfV/q5Hgmoal1g2QHFJRraOtmx0JpIqkxhBhI/lJSl1nMpQ45hVarwNETOoWEimndZ4QK0RHxuxQ==}
+    engines: {node: '>=4'}
+
+  mimic-response@3.1.0:
+    resolution: {integrity: sha512-z0yWI+4FDrrweS8Zmt4Ej5HdJmky15+L2e6Wgn3+iK5fWzb6T3fhNFq2+MeTRb064c6Wr4N/wv0DzQTjNzHNGQ==}
+    engines: {node: '>=10'}
+
+  mimic-response@4.0.0:
+    resolution: {integrity: sha512-e5ISH9xMYU0DzrT+jl8q2ze9D6eWBto+I8CNpe+VI+K2J/F/k3PdkdTdz4wvGVH4NTpo+NRYTVIuMQEMMcsLqg==}
+    engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}
+
+  minimatch@10.0.3:
+    resolution: {integrity: sha512-IPZ167aShDZZUMdRk66cyQAW3qr0WzbHkPdMYa8bzZhlHhO3jALbKdxcaak7W9FfT2rZNpQuUu4Od7ILEpXSaw==}
+    engines: {node: 20 || >=22}
+
+  minimatch@3.1.2:
+    resolution: {integrity: sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==}
+
+  minimatch@5.1.6:
+    resolution: {integrity: sha512-lKwV/1brpG6mBUFHtb7NUmtABCb2WZZmm2wNiOA5hAb8VdCS4B3dtMWyvcoViccwAW/COERjXLt0zP1zXUN26g==}
+    engines: {node: '>=10'}
+
+  minimatch@9.0.1:
+    resolution: {integrity: sha512-0jWhJpD/MdhPXwPuiRkCbfYfSKp2qnn2eOc279qI7f+osl/l+prKSrvhg157zSYvx/1nmgn2NqdT6k2Z7zSH9w==}
+    engines: {node: '>=16 || 14 >=14.17'}
+
+  minimatch@9.0.5:
+    resolution: {integrity: sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==}
+    engines: {node: '>=16 || 14 >=14.17'}
+
+  minimist@1.2.8:
+    resolution: {integrity: sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==}
+
+  minipass@3.3.6:
+    resolution: {integrity: sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==}
+    engines: {node: '>=8'}
+
+  minipass@5.0.0:
+    resolution: {integrity: sha512-3FnjYuehv9k6ovOEbyOswadCDPX1piCfhV8ncmYtHOjuPwylVWsghTLo7rabjC3Rx5xD4HDx8Wm1xnMF7S5qFQ==}
+    engines: {node: '>=8'}
+
+  minipass@7.1.2:
+    resolution: {integrity: sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==}
+    engines: {node: '>=16 || 14 >=14.17'}
+
+  minizlib@2.1.2:
+    resolution: {integrity: sha512-bAxsR8BVfj60DWXHE3u30oHzfl4G7khkSuPW+qvpd7jFRHm7dLxOjUk1EHACJ/hxLY8phGJ0YhYHZo7jil7Qdg==}
+    engines: {node: '>= 8'}
+
+  mixin-deep@1.3.2:
+    resolution: {integrity: sha512-WRoDn//mXBiJ1H40rqa3vH0toePwSsGb45iInWlTySa+Uu4k3tYUSxa2v1KqAiLtvlrSzaExqS1gtk96A9zvEA==}
+    engines: {node: '>=0.10.0'}
+
+  mkdirp-classic@0.5.3:
+    resolution: {integrity: sha512-gKLcREMhtuZRwRAfqP3RFW+TK4JqApVBtOIftVgjuABpAtpxhPGaDcfvbhNvD0B8iD1oUr/txX35NjcaY6Ns/A==}
+
+  mkdirp@0.5.6:
+    resolution: {integrity: sha512-FP+p8RB8OWpF3YZBCrP5gtADmtXApB5AMLn+vdyA+PyxCjrCs00mjyUozssO33cwDeT3wNGdLxJ5M//YqtHAJw==}
+    hasBin: true
+
+  mkdirp@1.0.4:
+    resolution: {integrity: sha512-vVqVZQyf3WLx2Shd0qJ9xuvqgAyKPLAiqITEtqW0oIUjzo3PePDd6fW9iFz30ef7Ysp/oiWqbhszeGWW2T6Gzw==}
+    engines: {node: '>=10'}
+    hasBin: true
+
+  mkdirp@3.0.1:
+    resolution: {integrity: sha512-+NsyUUAZDmo6YVHzL/stxSu3t9YS1iljliy3BSDrXJ/dkn1KYdmtZODGGjLcc9XLgVVpH4KshHB8XmZgMhaBXg==}
+    engines: {node: '>=10'}
+    hasBin: true
+
+  mlly@1.7.4:
+    resolution: {integrity: sha512-qmdSIPC4bDJXgZTCR7XosJiNKySV7O215tsPtDN9iEO/7q/76b/ijtgRu/+epFXSJhijtTCCGp3DWS549P3xKw==}
+
+  mocha-junit-reporter@2.2.1:
+    resolution: {integrity: sha512-iDn2tlKHn8Vh8o4nCzcUVW4q7iXp7cC4EB78N0cDHIobLymyHNwe0XG8HEHHjc3hJlXm0Vy6zcrxaIhnI2fWmw==}
+    peerDependencies:
+      mocha: '>=2.2.5'
+
+  mocha-multi-reporters@1.5.1:
+    resolution: {integrity: sha512-Yb4QJOaGLIcmB0VY7Wif5AjvLMUFAdV57D2TWEva1Y0kU/3LjKpeRVmlMIfuO1SVbauve459kgtIizADqxMWPg==}
+    engines: {node: '>=6.0.0'}
+    peerDependencies:
+      mocha: '>=3.1.2'
+
+  mocha@10.8.2:
+    resolution: {integrity: sha512-VZlYo/WE8t1tstuRmqgeyBgCbJc/lEdopaa+axcKzTBJ+UIdlAB9XnmvTCAH4pwR4ElNInaedhEBmZD8iCSVEg==}
+    engines: {node: '>= 14.0.0'}
+    hasBin: true
+
+  morgan@1.10.1:
+    resolution: {integrity: sha512-223dMRJtI/l25dJKWpgij2cMtywuG/WiUKXdvwfbhGKBhy1puASqXwFzmWZ7+K73vUPoR7SS2Qz2cI/g9MKw0A==}
+    engines: {node: '>= 0.8.0'}
+
+  ms@2.0.0:
+    resolution: {integrity: sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==}
+
+  ms@2.1.3:
+    resolution: {integrity: sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==}
+
+  multimatch@2.1.0:
+    resolution: {integrity: sha512-0mzK8ymiWdehTBiJh0vClAzGyQbdtyWqzSVx//EK4N/D+599RFlGfTAsKw2zMSABtDG9C6Ul2+t8f2Lbdjf5mA==}
+    engines: {node: '>=0.10.0'}
+
+  mute-stdout@1.0.1:
+    resolution: {integrity: sha512-kDcwXR4PS7caBpuRYYBUz9iVixUk3anO3f5OYFiIPwK/20vCzKCHyKoulbiDY1S53zD2bxUpxN/IJ+TnXjfvxg==}
+    engines: {node: '>= 0.10'}
+
+  mz@2.7.0:
+    resolution: {integrity: sha512-z81GNO7nnYMEhrGh9LeymoE4+Yr0Wn5McHIZMK5cfQCl+NDX08sCZgUc9/6MHni9IWuFLm1Z3HTCXu2z9fN62Q==}
+
+  nan@2.23.0:
+    resolution: {integrity: sha512-1UxuyYGdoQHcGg87Lkqm3FzefucTa0NAiOcuRsDmysep3c1LVCRK2krrUDafMWtjSG04htvAmvg96+SDknOmgQ==}
+
+  nanoid@3.3.11:
+    resolution: {integrity: sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==}
+    engines: {node: ^10 || ^12 || ^13.7 || ^14 || >=15.0.1}
+    hasBin: true
+
+  nanomatch@1.2.13:
+    resolution: {integrity: sha512-fpoe2T0RbHwBTBUOftAfBPaDEi06ufaUai0mE6Yn1kacc3SnTErfb/h+X94VXzI64rKFHYImXSvdwGGCmwOqCA==}
+    engines: {node: '>=0.10.0'}
+
+  napi-build-utils@2.0.0:
+    resolution: {integrity: sha512-GEbrYkbfF7MoNaoh2iGG84Mnf/WZfB0GdGEsM8wz7Expx/LlWf5U8t9nvJKXSp3qr5IsEbK04cBGhol/KwOsWA==}
+
+  native-is-elevated@0.7.0:
+    resolution: {integrity: sha512-tp8hUqK7vexBiyIWKMvmRxdG6kqUtO+3eay9iB0i16NYgvCqE5wMe1Y0guHilpkmRgvVXEWNW4et1+qqcwpLBA==}
+
+  native-keymap@3.3.5:
+    resolution: {integrity: sha512-7XDOLPNX1FnUFC/cX3cioBz2M+dO212ai9DuwpfKFzkPu3xTmEzOm5xewOMLXE4V9YoRhNPxvq1H2YpPWDgSsg==}
+
+  native-watchdog@1.4.2:
+    resolution: {integrity: sha512-iT3Uj6FFdrW5vHbQ/ybiznLus9oiUoMJ8A8nyugXv9rV3EBhIodmGs+mztrwQyyBc+PB5/CrskAH/WxaUVRRSQ==}
+
+  negotiator@0.6.3:
+    resolution: {integrity: sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==}
+    engines: {node: '>= 0.6'}
+
+  neo-async@2.6.2:
+    resolution: {integrity: sha512-Yd3UES5mWCSqR+qNT93S3UoYUkqAZ9lLg8a7g9rimsWmYGK8cVToA4/sF3RrshdyV3sAGMXVUmpMYOw+dLpOuw==}
+
+  next-tick@1.1.0:
+    resolution: {integrity: sha512-CXdUiJembsNjuToQvxayPZF9Vqht7hewsvy2sOWafLvi2awflj9mOC6bHIg50orX8IJvWKY9wYQ/zB2kogPslQ==}
+
+  nice-try@1.0.5:
+    resolution: {integrity: sha512-1nh45deeb5olNY7eX82BkPO7SSxR5SSYJiPTrTdFUVYwAl8CKMA5N9PjTYkHiRjisVcxcQ1HXdLhx2qxxJzLNQ==}
+
+  nise@5.1.9:
+    resolution: {integrity: sha512-qOnoujW4SV6e40dYxJOb3uvuoPHtmLzIk4TFo+j0jPJoC+5Z9xja5qH5JZobEPsa8+YYphMrOSwnrshEhG2qww==}
+
+  node-abi@3.75.0:
+    resolution: {integrity: sha512-OhYaY5sDsIka7H7AtijtI9jwGYLyl29eQn/W623DiN/MIv5sUqc4g7BIDThX+gb7di9f6xK02nkp8sdfFWZLTg==}
+    engines: {node: '>=10'}
+
+  node-addon-api@6.1.0:
+    resolution: {integrity: sha512-+eawOlIgy680F0kBzPUNFhMZGtJ1YmqM6l4+Crf4IkImjYrO/mqPwRMh352g23uIaQKFItcQ64I7KMaJxHgAVA==}
+
+  node-addon-api@7.1.0:
+    resolution: {integrity: sha512-mNcltoe1R8o7STTegSOHdnJNN7s5EUvhoS7ShnTHDyOSd+8H+UdWODq6qSv67PjC8Zc5JRT8+oLAMCr0SIXw7g==}
+    engines: {node: ^16 || ^18 || >= 20}
+
+  node-addon-api@7.1.1:
+    resolution: {integrity: sha512-5m3bsyrjFWE1xf7nz7YXdN4udnVtXK6/Yfgn5qnahL6bCkf2yKt4k3nuTKAtT4r3IG8JNR2ncsIMdZuAzJjHQQ==}
+
+  node-addon-api@8.5.0:
+    resolution: {integrity: sha512-/bRZty2mXUIFY/xU5HLvveNHlswNJej+RnxBjOMkidWfwZzgTbPG1E3K5TOxRLOR+5hX7bSofy8yf1hZevMS8A==}
+    engines: {node: ^18 || ^20 || >= 21}
+
+  node-fetch@2.6.8:
+    resolution: {integrity: sha512-RZ6dBYuj8dRSfxpUSu+NsdF1dpPpluJxwOp+6IoDp/sH2QNDSvurYsAa+F1WxY2RjA1iP93xhcsUoYbF2XBqVg==}
+    engines: {node: 4.x || >=6.0.0}
+    peerDependencies:
+      encoding: ^0.1.0
+    peerDependenciesMeta:
+      encoding:
+        optional: true
+
+  node-html-markdown@1.3.0:
+    resolution: {integrity: sha512-OeFi3QwC/cPjvVKZ114tzzu+YoR+v9UXW5RwSXGUqGb0qCl0DvP406tzdL7SFn8pZrMyzXoisfG2zcuF9+zw4g==}
+    engines: {node: '>=10.0.0'}
+
+  node-html-parser@6.1.13:
+    resolution: {integrity: sha512-qIsTMOY4C/dAa5Q5vsobRpOOvPfC4pB61UVW2uSwZNUp0QU/jCekTal1vMmbO0DgdHeLUJpv/ARmDqErVxA3Sg==}
+
+  node-pty@1.1.0-beta9:
+    resolution: {integrity: sha512-/Ue38pvXJdgRZ3+me1FgfglLd301GhJN0NStiotdt61tm43N5htUyR/IXOUzOKuNaFmCwIhy6nwb77Ky41LMbw==}
+
+  node-releases@2.0.19:
+    resolution: {integrity: sha512-xxOWJsBKtzAq7DY0J+DTzuz58K8e7sJbdgwkbMWQe8UYB6ekmsQ45q0M/tJDsGaZmbC+l7n57UV8Hl5tHxO9uw==}
+
+  nopt@7.2.1:
+    resolution: {integrity: sha512-taM24ViiimT/XntxbPyJQzCG+p4EKOpgD3mxFwW38mGjVUrfERQOeY4EDHjdnptttfHuHQXFx+lTP08Q+mLa/w==}
+    engines: {node: ^14.17.0 || ^16.13.0 || >=18.0.0}
+    hasBin: true
+
+  normalize-package-data@2.5.0:
+    resolution: {integrity: sha512-/5CMN3T0R4XTj4DcGaexo+roZSdSFW/0AOOTROrjxzCG1wrWXEsGbRKevjlIL+ZDE4sZlJr5ED4YW0yqmkK+eA==}
+
+  normalize-path@1.0.0:
+    resolution: {integrity: sha512-7WyT0w8jhpDStXRq5836AMmihQwq2nrUVQrgjvUo/p/NZf9uy/MeJ246lBJVmWuYXMlJuG9BNZHF0hWjfTbQUA==}
+    engines: {node: '>=0.10.0'}
+
+  normalize-path@2.1.1:
+    resolution: {integrity: sha512-3pKJwH184Xo/lnH6oyP1q2pMd7HcypqqmRs91/6/i2CGtWwIKGCkOOMTm/zXbgTEWHw1uNpNi/igc3ePOYHb6w==}
+    engines: {node: '>=0.10.0'}
+
+  normalize-path@3.0.0:
+    resolution: {integrity: sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==}
+    engines: {node: '>=0.10.0'}
+
+  normalize-url@6.1.0:
+    resolution: {integrity: sha512-DlL+XwOy3NxAQ8xuC0okPgK46iuVNAK01YN7RueYBqqFeGsBjV9XmCAzAdgt+667bCl5kPh9EqKKDwnaPG1I7A==}
+    engines: {node: '>=10'}
+
+  normalize-url@8.0.2:
+    resolution: {integrity: sha512-Ee/R3SyN4BuynXcnTaekmaVdbDAEiNrHqjQIA37mHU8G9pf7aaAD4ZX3XjBLo6rsdcxA/gtkcNYZLt30ACgynw==}
+    engines: {node: '>=14.16'}
+
+  now-and-later@2.0.1:
+    resolution: {integrity: sha512-KGvQ0cB70AQfg107Xvs/Fbu+dGmZoTRJp2TaPwcwQm3/7PteUyN2BCgk8KBMPGBUXZdVwyWS8fDCGFygBm19UQ==}
+    engines: {node: '>= 0.10'}
+
+  npm-run-all@4.1.5:
+    resolution: {integrity: sha512-Oo82gJDAVcaMdi3nuoKFavkIHBRVqQ1qvMb+9LHk/cF4P6B2m8aP04hGf7oL6wZ9BuGwX1onlLhpuoofSyoQDQ==}
+    engines: {node: '>= 4'}
+    hasBin: true
+
+  nth-check@2.1.1:
+    resolution: {integrity: sha512-lqjrjmaOoAnWfMmBPL+XNnynZh2+swxiX3WUE0s4yEHI6m+AwrK2UZOimIRl3X/4QctVqS8AiZjFqyOGrMXb/w==}
+
+  number-is-nan@1.0.1:
+    resolution: {integrity: sha512-4jbtZXNAsfZbAHiiqjLPBiCl16dES1zI4Hpzzxw61Tk+loF+sBDBKx1ICKKKwIqQ7M0mFn1TmkN7euSncWgHiQ==}
+    engines: {node: '>=0.10.0'}
+
+  object-assign@4.1.1:
+    resolution: {integrity: sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==}
+    engines: {node: '>=0.10.0'}
+
+  object-copy@0.1.0:
+    resolution: {integrity: sha512-79LYn6VAb63zgtmAteVOWo9Vdj71ZVBy3Pbse+VqxDpEP83XuujMrGqHIwAXJ5I/aM0zU7dIyIAhifVTPrNItQ==}
+    engines: {node: '>=0.10.0'}
+
+  object-inspect@1.13.4:
+    resolution: {integrity: sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==}
+    engines: {node: '>= 0.4'}
+
+  object-keys@0.4.0:
+    resolution: {integrity: sha512-ncrLw+X55z7bkl5PnUvHwFK9FcGuFYo9gtjws2XtSzL+aZ8tm830P60WJ0dSmFVaSalWieW5MD7kEdnXda9yJw==}
+
+  object-keys@1.1.1:
+    resolution: {integrity: sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA==}
+    engines: {node: '>= 0.4'}
+
+  object-visit@1.0.1:
+    resolution: {integrity: sha512-GBaMwwAVK9qbQN3Scdo0OyvgPW7l3lnaVMj84uTOZlswkX0KpF6fyDBJhtTthf7pymztoN36/KEr1DyhF96zEA==}
+    engines: {node: '>=0.10.0'}
+
+  object.assign@4.1.7:
+    resolution: {integrity: sha512-nK28WOo+QIjBkDduTINE4JkF/UJJKyf2EJxvJKfblDpyg0Q+pkOHNTL0Qwy6NP6FhE/EnzV73BxxqcJaXY9anw==}
+    engines: {node: '>= 0.4'}
+
+  object.defaults@1.1.0:
+    resolution: {integrity: sha512-c/K0mw/F11k4dEUBMW8naXUuBuhxRCfG7W+yFy8EcijU/rSmazOUd1XAEEe6bC0OuXY4HUKjTJv7xbxIMqdxrA==}
+    engines: {node: '>=0.10.0'}
+
+  object.map@1.0.1:
+    resolution: {integrity: sha512-3+mAJu2PLfnSVGHwIWubpOFLscJANBKuB/6A4CxBstc4aqwQY0FWcsppuy4jU5GSB95yES5JHSI+33AWuS4k6w==}
+    engines: {node: '>=0.10.0'}
+
+  object.pick@1.3.0:
+    resolution: {integrity: sha512-tqa/UMy/CCoYmj+H5qc07qvSL9dqcs/WZENZ1JbtWBlATP+iVOe778gE6MSijnyCnORzDuX6hU+LA4SZ09YjFQ==}
+    engines: {node: '>=0.10.0'}
+
+  object.reduce@1.0.1:
+    resolution: {integrity: sha512-naLhxxpUESbNkRqc35oQ2scZSJueHGQNUfMW/0U37IgN6tE2dgDWg3whf+NEliy3F/QysrO48XKUz/nGPe+AQw==}
+    engines: {node: '>=0.10.0'}
+
+  on-finished@2.3.0:
+    resolution: {integrity: sha512-ikqdkGAAyf/X/gPhXGvfgAytDZtDbr+bkNUJ0N9h5MI/dmdgCs3l6hoHrcUv41sRKew3jIwrp4qQDXiK99Utww==}
+    engines: {node: '>= 0.8'}
+
+  on-finished@2.4.1:
+    resolution: {integrity: sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==}
+    engines: {node: '>= 0.8'}
+
+  on-headers@1.1.0:
+    resolution: {integrity: sha512-737ZY3yNnXy37FHkQxPzt4UZ2UWPWiCZWLvFZ4fu5cueciegX0zGPnrlY6bwRg4FdQOe9YU8MkmJwGhoMybl8A==}
+    engines: {node: '>= 0.8'}
+
+  once@1.4.0:
+    resolution: {integrity: sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==}
+
+  onetime@7.0.0:
+    resolution: {integrity: sha512-VXJjc87FScF88uafS3JllDgvAm+c/Slfz06lorj2uAY34rlUu0Nt+v8wreiImcrgAjjIHp1rXpTDlLOGw29WwQ==}
+    engines: {node: '>=18'}
+
+  only@0.0.2:
+    resolution: {integrity: sha512-Fvw+Jemq5fjjyWz6CpKx6w9s7xxqo3+JCyM0WXWeCSOboZ8ABkyvP8ID4CZuChA/wxSx+XSJmdOm8rGVyJ1hdQ==}
+
+  open@8.4.2:
+    resolution: {integrity: sha512-7x81NCL719oNbsq/3mh+hVrAWmFuEYUqrq/Iw3kUzH8ReypT9QQ0BLoJS7/G9k6N81XjW4qHWtjWwe/9eLy1EQ==}
+    engines: {node: '>=12'}
+
+  opentype.js@0.8.0:
+    resolution: {integrity: sha512-FQHR4oGP+a0m/f6yHoRpBOIbn/5ZWxKd4D/djHVJu8+KpBTYrJda0b7mLcgDEMWXE9xBCJm+qb0yv6FcvPjukg==}
+    hasBin: true
+
+  ora@8.2.0:
+    resolution: {integrity: sha512-weP+BZ8MVNnlCm8c0Qdc1WSWq4Qn7I+9CJGm7Qali6g44e/PUzbjNqJX5NJ9ljlNMosfJvg1fKEGILklK9cwnw==}
+    engines: {node: '>=18'}
+
+  ordered-read-streams@1.0.1:
+    resolution: {integrity: sha512-Z87aSjx3r5c0ZB7bcJqIgIRX5bxR7A4aSzvIbaxd0oTkWBCOoKfuGHiKj60CHVUgg1Phm5yMZzBdt8XqRs73Mw==}
+
+  os-browserify@0.3.0:
+    resolution: {integrity: sha512-gjcpUc3clBf9+210TRaDWbf+rZZZEshZ+DlXMRCeAjp0xhTrnQsKHypIy1J3d5hKdUzj69t708EHtU8P6bUn0A==}
+
+  os-locale@1.4.0:
+    resolution: {integrity: sha512-PRT7ZORmwu2MEFt4/fv3Q+mEfN4zetKxufQrkShY2oGvUms9r8otu5HfdyIFHkYXjO7laNsoVGmM2MANfuTA8g==}
+    engines: {node: '>=0.10.0'}
+
+  own-keys@1.0.1:
+    resolution: {integrity: sha512-qFOyK5PjiWZd+QQIh+1jhdb9LpxTF0qs7Pm8o5QHYZ0M3vKqSqzsZaEB6oWlxZ+q2sJBMI/Ktgd2N5ZwQoRHfg==}
+    engines: {node: '>= 0.4'}
+
+  p-all@1.0.0:
+    resolution: {integrity: sha512-OtbznqfGjQT+i89LK9C9YPh1G8d6n8xgsJ8yRVXrx6PRXrlOthNJhP+dHxrPopty8fugYb1DodpwrzP7z0Mtvw==}
+    engines: {node: '>=4'}
+
+  p-cancelable@2.1.1:
+    resolution: {integrity: sha512-BZOr3nRQHOntUjTrH8+Lh54smKHoHyur8We1V8DSMVrl5A2malOOwuJRnKRDjSnkoeBh4at6BwEnb5I7Jl31wg==}
+    engines: {node: '>=8'}
+
+  p-cancelable@4.0.1:
+    resolution: {integrity: sha512-wBowNApzd45EIKdO1LaU+LrMBwAcjfPaYtVzV3lmfM3gf8Z4CHZsiIqlM8TZZ8okYvh5A1cP6gTfCRQtwUpaUg==}
+    engines: {node: '>=14.16'}
+
+  p-limit@2.3.0:
+    resolution: {integrity: sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==}
+    engines: {node: '>=6'}
+
+  p-limit@3.1.0:
+    resolution: {integrity: sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==}
+    engines: {node: '>=10'}
+
+  p-locate@4.1.0:
+    resolution: {integrity: sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==}
+    engines: {node: '>=8'}
+
+  p-locate@5.0.0:
+    resolution: {integrity: sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==}
+    engines: {node: '>=10'}
+
+  p-map@1.2.0:
+    resolution: {integrity: sha512-r6zKACMNhjPJMTl8KcFH4li//gkrXWfbD6feV8l6doRHlzljFWGJ2AP6iKaCJXyZmAUMOPtvbW7EXkbWO/pLEA==}
+    engines: {node: '>=4'}
+
+  p-try@2.2.0:
+    resolution: {integrity: sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==}
+    engines: {node: '>=6'}
+
+  package-json-from-dist@1.0.1:
+    resolution: {integrity: sha512-UEZIS3/by4OC8vL3P2dTXRETpebLI2NiI5vIrjaD/5UtrkFX/tNbwjTSRAGC/+7CAo2pIcBaRgWmcBBHcsaCIw==}
+
+  pako@0.2.9:
+    resolution: {integrity: sha512-NUcwaKxUxWrZLpDG+z/xZaCgQITkA/Dv4V/T6bw7VON6l1Xz/VnrBqrYjZQ12TamKHzITTfOEIYUj48y2KXImA==}
+
+  pako@1.0.11:
+    resolution: {integrity: sha512-4hLB8Py4zZce5s4yd9XzopqwVv/yGNhV1Bl8NTmCq1763HeK2+EwVTv+leGeL13Dnh2wfbqowVPXCIO0z4taYw==}
+
+  parse-filepath@1.0.2:
+    resolution: {integrity: sha512-FwdRXKCohSVeXqwtYonZTXtbGJKrn+HNyWDYVcp5yuJlesTwNH4rsmRZ+GrKAPJ5bLpRxESMeS+Rl0VCHRvB2Q==}
+    engines: {node: '>=0.8'}
+
+  parse-json@2.2.0:
+    resolution: {integrity: sha512-QR/GGaKCkhwk1ePQNYDRKYZ3mwU9ypsKhB0XyFnLQdomyEqk3e8wpW3V5Jp88zbxK4n5ST1nqo+g9juTpownhQ==}
+    engines: {node: '>=0.10.0'}
+
+  parse-json@4.0.0:
+    resolution: {integrity: sha512-aOIos8bujGN93/8Ox/jPLh7RwVnPEysynVFE+fQZyg6jKELEHwzgKdLRFHUgXJL6kylijVSBC4BvN9OmsB48Rw==}
+    engines: {node: '>=4'}
+
+  parse-node-version@1.0.1:
+    resolution: {integrity: sha512-3YHlOa/JgH6Mnpr05jP9eDG254US9ek25LyIxZlDItp2iJtwyaXQb57lBYLdT3MowkUFYEV2XXNAYIPlESvJlA==}
+    engines: {node: '>= 0.10'}
+
+  parse-passwd@1.0.0:
+    resolution: {integrity: sha512-1Y1A//QUXEZK7YKz+rD9WydcE1+EuPr6ZBgKecAB8tmoW6UFv0NREVJe1p+jRxtThkcbbKkfwIbWJe/IeE6m2Q==}
+    engines: {node: '>=0.10.0'}
+
+  parseurl@1.3.3:
+    resolution: {integrity: sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==}
+    engines: {node: '>= 0.8'}
+
+  pascalcase@0.1.1:
+    resolution: {integrity: sha512-XHXfu/yOQRy9vYOtUDVMN60OEJjW013GoObG1o+xwQTpB9eYJX/BjXMsdW13ZDPruFhYYn0AG22w0xgQMwl3Nw==}
+    engines: {node: '>=0.10.0'}
+
+  path-browserify@1.0.1:
+    resolution: {integrity: sha512-b7uo2UCUOYZcnF/3ID0lulOJi/bafxa1xPe7ZPsammBSpjSWQkjNxlt635YGS2MiR9GjvuXCtz2emr3jbsz98g==}
+
+  path-dirname@1.0.2:
+    resolution: {integrity: sha512-ALzNPpyNq9AqXMBjeymIjFDAkAFH06mHJH/cSBHAgU0s4vfpBn6b2nf8tiRLvagKD8RbTpq2FKTBg7cl9l3c7Q==}
+
+  path-exists@2.1.0:
+    resolution: {integrity: sha512-yTltuKuhtNeFJKa1PiRzfLAU5182q1y4Eb4XCJ3PBqyzEDkAZRzBrKKBct682ls9reBVHf9udYLN5Nd+K1B9BQ==}
+    engines: {node: '>=0.10.0'}
+
+  path-exists@4.0.0:
+    resolution: {integrity: sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==}
+    engines: {node: '>=8'}
+
+  path-is-absolute@1.0.1:
+    resolution: {integrity: sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==}
+    engines: {node: '>=0.10.0'}
+
+  path-key@2.0.1:
+    resolution: {integrity: sha512-fEHGKCSmUSDPv4uoj8AlD+joPlq3peND+HRYyxFz4KPw4z926S/b8rIuFs2FYJg3BwsxJf6A9/3eIdLaYC+9Dw==}
+    engines: {node: '>=4'}
+
+  path-key@3.1.1:
+    resolution: {integrity: sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==}
+    engines: {node: '>=8'}
+
+  path-parse@1.0.7:
+    resolution: {integrity: sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==}
+
+  path-root-regex@0.1.2:
+    resolution: {integrity: sha512-4GlJ6rZDhQZFE0DPVKh0e9jmZ5egZfxTkp7bcRDuPlJXbAwhxcl2dINPUAsjLdejqaLsCeg8axcLjIbvBjN4pQ==}
+    engines: {node: '>=0.10.0'}
+
+  path-root@0.1.1:
+    resolution: {integrity: sha512-QLcPegTHF11axjfojBIoDygmS2E3Lf+8+jI6wOVmNVenrKSo3mFdSGiIgdSHenczw3wPtlVMQaFVwGmM7BJdtg==}
+    engines: {node: '>=0.10.0'}
+
+  path-scurry@1.11.1:
+    resolution: {integrity: sha512-Xa4Nw17FS9ApQFJ9umLiJS4orGjm7ZzwUrwamcGQuHSzDyth9boKDaycYdDcZDuqYATXw4HFXgaqWTctW/v1HA==}
+    engines: {node: '>=16 || 14 >=14.18'}
+
+  path-scurry@2.0.0:
+    resolution: {integrity: sha512-ypGJsmGtdXUOeM5u93TyeIEfEhM6s+ljAhrk5vAvSx8uyY/02OvrZnA0YNGUrPXfpJMgI1ODd3nwz8Npx4O4cg==}
+    engines: {node: 20 || >=22}
+
+  path-to-regexp@6.3.0:
+    resolution: {integrity: sha512-Yhpw4T9C6hPpgPeA28us07OJeqZ5EzQTkbfwuhsUg0c237RomFoETJgmp2sa3F/41gfLE6G5cqcYwznmeEeOlQ==}
+
+  path-type@1.1.0:
+    resolution: {integrity: sha512-S4eENJz1pkiQn9Znv33Q+deTOKmbl+jj1Fl+qiP/vYezj+S8x+J3Uo0ISrx/QoEvIlOaDWJhPaRd1flJ9HXZqg==}
+    engines: {node: '>=0.10.0'}
+
+  path-type@3.0.0:
+    resolution: {integrity: sha512-T2ZUsdZFHgA3u4e5PfPbjd7HDDpxPnQb5jN0SrDsjNSuVXHJqtwTnWqG0B1jZrgmJ/7lj1EmVIByWt1gxGkWvg==}
+    engines: {node: '>=4'}
+
+  path-type@4.0.0:
+    resolution: {integrity: sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==}
+    engines: {node: '>=8'}
+
+  pathe@2.0.3:
+    resolution: {integrity: sha512-WUjGcAqP1gQacoQe+OBJsFA7Ld4DyXuUIjZ5cc75cLHvJ7dtNsTugphxIADwspS+AraAUePCKrSVtPLFj/F88w==}
+
+  pause-stream@0.0.11:
+    resolution: {integrity: sha512-e3FBlXLmN/D1S+zHzanP4E/4Z60oFAa3O051qt1pxa7DEJWKAyil6upYVXCWadEnuoqa4Pkc9oUx9zsxYeRv8A==}
+
+  peek-stream@1.1.3:
+    resolution: {integrity: sha512-FhJ+YbOSBb9/rIl2ZeE/QHEsWn7PqNYt8ARAY3kIgNGOk13g9FGyIY6JIl/xB/3TFRVoTv5as0l11weORrTekA==}
+
+  pend@1.2.0:
+    resolution: {integrity: sha512-F3asv42UuXchdzt+xXqfW1OGlVBe+mxa2mqI0pg5yAHZPvFmY3Y6drSf/GQ1A86WgWEN9Kzh/WrgKa6iGcHXLg==}
+
+  picocolors@0.2.1:
+    resolution: {integrity: sha512-cMlDqaLEqfSaW8Z7N5Jw+lyIW869EzT73/F5lhtY9cLGoVxSXznfgfXMO0Z5K0o0Q2TkTXq+0KFsdnSe3jDViA==}
+
+  picocolors@1.1.1:
+    resolution: {integrity: sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==}
+
+  picomatch@2.3.1:
+    resolution: {integrity: sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==}
+    engines: {node: '>=8.6'}
+
+  picomatch@4.0.3:
+    resolution: {integrity: sha512-5gTmgEY/sqK6gFXLIsQNH19lWb4ebPDLA4SdLP7dsWkIXHWlG66oPuVvXSGFPppYZz8ZDZq0dYYrbHfBCVUb1Q==}
+    engines: {node: '>=12'}
+
+  pidtree@0.3.1:
+    resolution: {integrity: sha512-qQbW94hLHEqCg7nhby4yRC7G2+jYHY4Rguc2bjw7Uug4GIJuu1tvf2uHaZv5Q8zdt+WKJ6qK1FOI6amaWUo5FA==}
+    engines: {node: '>=0.10'}
+    hasBin: true
+
+  pify@2.3.0:
+    resolution: {integrity: sha512-udgsAY+fTnvv7kI7aaxbqwWNb0AHiB0qBO89PZKPkoTmGOgdbrHDKD+0B2X4uTfJ/FT1R09r9gTsjUjNJotuog==}
+    engines: {node: '>=0.10.0'}
+
+  pify@3.0.0:
+    resolution: {integrity: sha512-C3FsVNH1udSEX48gGX1xfvwTWfsYWj5U+8/uK15BGzIGrKoUpghX8hWZwa/OFnakBiiVNmBvemTJR5mcy7iPcg==}
+    engines: {node: '>=4'}
+
+  pinkie-promise@2.0.1:
+    resolution: {integrity: sha512-0Gni6D4UcLTbv9c57DfxDGdr41XfgUjqWZu492f0cIGr16zDU06BWP/RAEvOuo7CQ0CNjHaLlM59YJJFm3NWlw==}
+    engines: {node: '>=0.10.0'}
+
+  pinkie@2.0.4:
+    resolution: {integrity: sha512-MnUuEycAemtSaeFSjXKW/aroV7akBbY+Sv+RkyqFjgAe73F+MR0TBWKBRDkmfWq/HiFmdavfZ1G7h4SPZXaCSg==}
+    engines: {node: '>=0.10.0'}
+
+  pirates@4.0.7:
+    resolution: {integrity: sha512-TfySrs/5nm8fQJDcBDuUng3VOUKsd7S+zqvbOTiGXHfxX4wK31ard+hoNuvkicM/2YFzlpDgABOevKSsB4G/FA==}
+    engines: {node: '>= 6'}
+
+  pkg-dir@4.2.0:
+    resolution: {integrity: sha512-HRDzbaKjC+AOWVXxAU/x54COGeIv9eb+6CkDSQoNTt4XyWoIJvuPsXizxu/Fr23EiekbtZwmh1IcIG/l/a10GQ==}
+    engines: {node: '>=8'}
+
+  pkg-types@1.3.1:
+    resolution: {integrity: sha512-/Jm5M4RvtBFVkKWRu2BLUTNP8/M2a+UwuAX+ae4770q1qVGtfjG+WTCupoZixokjmHiry8uI+dlY8KXYV5HVVQ==}
+
+  playwright-core@1.54.1:
+    resolution: {integrity: sha512-Nbjs2zjj0htNhzgiy5wu+3w09YetDx5pkrpI/kZotDlDUaYk0HVA5xrBVPdow4SAUIlhgKcJeJg4GRKW6xHusA==}
+    engines: {node: '>=18'}
+    hasBin: true
+
+  playwright@1.54.1:
+    resolution: {integrity: sha512-peWpSwIBmSLi6aW2auvrUtf2DqY16YYcCMO8rTVx486jKmDTJg7UAhyrraP98GB8BoPURZP8+nxO7TSd4cPr5g==}
+    engines: {node: '>=18'}
+    hasBin: true
+
+  plist@3.1.0:
+    resolution: {integrity: sha512-uysumyrvkUX0rX/dEVqt8gC3sTBzd4zoWfLeS29nb53imdaXVvLINYXTI2GNqzaMuvacNx4uJQ8+b3zXR0pkgQ==}
+    engines: {node: '>=10.4.0'}
+
+  plugin-error@0.1.2:
+    resolution: {integrity: sha512-WzZHcm4+GO34sjFMxQMqZbsz3xiNEgonCskQ9v+IroMmYgk/tas8dG+Hr2D6IbRPybZ12oWpzE/w3cGJ6FJzOw==}
+    engines: {node: '>=0.10.0'}
+
+  plugin-error@1.0.1:
+    resolution: {integrity: sha512-L1zP0dk7vGweZME2i+EeakvUNqSrdiI3F91TwEoYiGrAfUXmVv6fJIq4g82PAXxNsWOp0J7ZqQy/3Szz0ajTxA==}
+    engines: {node: '>= 0.10'}
+
+  plugin-error@2.0.1:
+    resolution: {integrity: sha512-zMakqvIDyY40xHOvzXka0kUvf40nYIuwRE8dWhti2WtjQZ31xAgBZBhxsK7vK3QbRXS1Xms/LO7B5cuAsfB2Gg==}
+    engines: {node: '>=10.13.0'}
+
+  posix-character-classes@0.1.1:
+    resolution: {integrity: sha512-xTgYBc3fuo7Yt7JbiuFxSYGToMoz8fLoE6TC9Wx1P/u+LfeThMOAqmuyECnlBaaJb+u1m9hHiXUEtwW4OzfUJg==}
+    engines: {node: '>=0.10.0'}
+
+  possible-typed-array-names@1.1.0:
+    resolution: {integrity: sha512-/+5VFTchJDoVj3bhoqi6UeymcD00DAwb1nJwamzPvHEszJ4FpF6SNNbUbOS8yI56qHzdV8eK0qEfOSiodkTdxg==}
+    engines: {node: '>= 0.4'}
+
+  postcss-calc@9.0.1:
+    resolution: {integrity: sha512-TipgjGyzP5QzEhsOZUaIkeO5mKeMFpebWzRogWG/ysonUlnHcq5aJe0jOjpfzUU8PeSaBQnrE8ehR0QA5vs8PQ==}
+    engines: {node: ^14 || ^16 || >=18.0}
+    peerDependencies:
+      postcss: ^8.2.2
+
+  postcss-colormin@6.1.0:
+    resolution: {integrity: sha512-x9yX7DOxeMAR+BgGVnNSAxmAj98NX/YxEMNFP+SDCEeNLb2r3i6Hh1ksMsnW8Ub5SLCpbescQqn9YEbE9554Sw==}
+    engines: {node: ^14 || ^16 || >=18.0}
+    peerDependencies:
+      postcss: ^8.4.31
+
+  postcss-convert-values@6.1.0:
+    resolution: {integrity: sha512-zx8IwP/ts9WvUM6NkVSkiU902QZL1bwPhaVaLynPtCsOTqp+ZKbNi+s6XJg3rfqpKGA/oc7Oxk5t8pOQJcwl/w==}
+    engines: {node: ^14 || ^16 || >=18.0}
+    peerDependencies:
+      postcss: ^8.4.31
+
+  postcss-discard-comments@6.0.2:
+    resolution: {integrity: sha512-65w/uIqhSBBfQmYnG92FO1mWZjJ4GL5b8atm5Yw2UgrwD7HiNiSSNwJor1eCFGzUgYnN/iIknhNRVqjrrpuglw==}
+    engines: {node: ^14 || ^16 || >=18.0}
+    peerDependencies:
+      postcss: ^8.4.31
+
+  postcss-discard-duplicates@6.0.3:
+    resolution: {integrity: sha512-+JA0DCvc5XvFAxwx6f/e68gQu/7Z9ud584VLmcgto28eB8FqSFZwtrLwB5Kcp70eIoWP/HXqz4wpo8rD8gpsTw==}
+    engines: {node: ^14 || ^16 || >=18.0}
+    peerDependencies:
+      postcss: ^8.4.31
+
+  postcss-discard-empty@6.0.3:
+    resolution: {integrity: sha512-znyno9cHKQsK6PtxL5D19Fj9uwSzC2mB74cpT66fhgOadEUPyXFkbgwm5tvc3bt3NAy8ltE5MrghxovZRVnOjQ==}
+    engines: {node: ^14 || ^16 || >=18.0}
+    peerDependencies:
+      postcss: ^8.4.31
+
+  postcss-discard-overridden@6.0.2:
+    resolution: {integrity: sha512-j87xzI4LUggC5zND7KdjsI25APtyMuynXZSujByMaav2roV6OZX+8AaCUcZSWqckZpjAjRyFDdpqybgjFO0HJQ==}
+    engines: {node: ^14 || ^16 || >=18.0}
+    peerDependencies:
+      postcss: ^8.4.31
+
+  postcss-load-config@6.0.1:
+    resolution: {integrity: sha512-oPtTM4oerL+UXmx+93ytZVN82RrlY/wPUV8IeDxFrzIjXOLF1pN+EmKPLbubvKHT2HC20xXsCAH2Z+CKV6Oz/g==}
+    engines: {node: '>= 18'}
+    peerDependencies:
+      jiti: '>=1.21.0'
+      postcss: '>=8.0.9'
+      tsx: ^4.8.1
+      yaml: ^2.4.2
+    peerDependenciesMeta:
+      jiti:
+        optional: true
+      postcss:
+        optional: true
+      tsx:
+        optional: true
+      yaml:
+        optional: true
+
+  postcss-merge-longhand@6.0.5:
+    resolution: {integrity: sha512-5LOiordeTfi64QhICp07nzzuTDjNSO8g5Ksdibt44d+uvIIAE1oZdRn8y/W5ZtYgRH/lnLDlvi9F8btZcVzu3w==}
+    engines: {node: ^14 || ^16 || >=18.0}
+    peerDependencies:
+      postcss: ^8.4.31
+
+  postcss-merge-rules@6.1.1:
+    resolution: {integrity: sha512-KOdWF0gju31AQPZiD+2Ar9Qjowz1LTChSjFFbS+e2sFgc4uHOp3ZvVX4sNeTlk0w2O31ecFGgrFzhO0RSWbWwQ==}
+    engines: {node: ^14 || ^16 || >=18.0}
+    peerDependencies:
+      postcss: ^8.4.31
+
+  postcss-minify-font-values@6.1.0:
+    resolution: {integrity: sha512-gklfI/n+9rTh8nYaSJXlCo3nOKqMNkxuGpTn/Qm0gstL3ywTr9/WRKznE+oy6fvfolH6dF+QM4nCo8yPLdvGJg==}
+    engines: {node: ^14 || ^16 || >=18.0}
+    peerDependencies:
+      postcss: ^8.4.31
+
+  postcss-minify-gradients@6.0.3:
+    resolution: {integrity: sha512-4KXAHrYlzF0Rr7uc4VrfwDJ2ajrtNEpNEuLxFgwkhFZ56/7gaE4Nr49nLsQDZyUe+ds+kEhf+YAUolJiYXF8+Q==}
+    engines: {node: ^14 || ^16 || >=18.0}
+    peerDependencies:
+      postcss: ^8.4.31
+
+  postcss-minify-params@6.1.0:
+    resolution: {integrity: sha512-bmSKnDtyyE8ujHQK0RQJDIKhQ20Jq1LYiez54WiaOoBtcSuflfK3Nm596LvbtlFcpipMjgClQGyGr7GAs+H1uA==}
+    engines: {node: ^14 || ^16 || >=18.0}
+    peerDependencies:
+      postcss: ^8.4.31
+
+  postcss-minify-selectors@6.0.4:
+    resolution: {integrity: sha512-L8dZSwNLgK7pjTto9PzWRoMbnLq5vsZSTu8+j1P/2GB8qdtGQfn+K1uSvFgYvgh83cbyxT5m43ZZhUMTJDSClQ==}
+    engines: {node: ^14 || ^16 || >=18.0}
+    peerDependencies:
+      postcss: ^8.4.31
+
+  postcss-modules-extract-imports@3.1.0:
+    resolution: {integrity: sha512-k3kNe0aNFQDAZGbin48pL2VNidTF0w4/eASDsxlyspobzU3wZQLOGj7L9gfRe0Jo9/4uud09DsjFNH7winGv8Q==}
+    engines: {node: ^10 || ^12 || >= 14}
+    peerDependencies:
+      postcss: ^8.1.0
+
+  postcss-modules-local-by-default@4.2.0:
+    resolution: {integrity: sha512-5kcJm/zk+GJDSfw+V/42fJ5fhjL5YbFDl8nVdXkJPLLW+Vf9mTD5Xe0wqIaDnLuL2U6cDNpTr+UQ+v2HWIBhzw==}
+    engines: {node: ^10 || ^12 || >= 14}
+    peerDependencies:
+      postcss: ^8.1.0
+
+  postcss-modules-scope@3.2.1:
+    resolution: {integrity: sha512-m9jZstCVaqGjTAuny8MdgE88scJnCiQSlSrOWcTQgM2t32UBe+MUmFSO5t7VMSfAf/FJKImAxBav8ooCHJXCJA==}
+    engines: {node: ^10 || ^12 || >= 14}
+    peerDependencies:
+      postcss: ^8.1.0
+
+  postcss-modules-values@4.0.0:
+    resolution: {integrity: sha512-RDxHkAiEGI78gS2ofyvCsu7iycRv7oqw5xMWn9iMoR0N/7mf9D50ecQqUo5BZ9Zh2vH4bCUR/ktCqbB9m8vJjQ==}
+    engines: {node: ^10 || ^12 || >= 14}
+    peerDependencies:
+      postcss: ^8.1.0
+
+  postcss-nesting@12.1.5:
+    resolution: {integrity: sha512-N1NgI1PDCiAGWPTYrwqm8wpjv0bgDmkYHH72pNsqTCv9CObxjxftdYu6AKtGN+pnJa7FQjMm3v4sp8QJbFsYdQ==}
+    engines: {node: ^14 || ^16 || >=18}
+    peerDependencies:
+      postcss: ^8.4
+
+  postcss-normalize-charset@6.0.2:
+    resolution: {integrity: sha512-a8N9czmdnrjPHa3DeFlwqst5eaL5W8jYu3EBbTTkI5FHkfMhFZh1EGbku6jhHhIzTA6tquI2P42NtZ59M/H/kQ==}
+    engines: {node: ^14 || ^16 || >=18.0}
+    peerDependencies:
+      postcss: ^8.4.31
+
+  postcss-normalize-display-values@6.0.2:
+    resolution: {integrity: sha512-8H04Mxsb82ON/aAkPeq8kcBbAtI5Q2a64X/mnRRfPXBq7XeogoQvReqxEfc0B4WPq1KimjezNC8flUtC3Qz6jg==}
+    engines: {node: ^14 || ^16 || >=18.0}
+    peerDependencies:
+      postcss: ^8.4.31
+
+  postcss-normalize-positions@6.0.2:
+    resolution: {integrity: sha512-/JFzI441OAB9O7VnLA+RtSNZvQ0NCFZDOtp6QPFo1iIyawyXg0YI3CYM9HBy1WvwCRHnPep/BvI1+dGPKoXx/Q==}
+    engines: {node: ^14 || ^16 || >=18.0}
+    peerDependencies:
+      postcss: ^8.4.31
+
+  postcss-normalize-repeat-style@6.0.2:
+    resolution: {integrity: sha512-YdCgsfHkJ2jEXwR4RR3Tm/iOxSfdRt7jplS6XRh9Js9PyCR/aka/FCb6TuHT2U8gQubbm/mPmF6L7FY9d79VwQ==}
+    engines: {node: ^14 || ^16 || >=18.0}
+    peerDependencies:
+      postcss: ^8.4.31
+
+  postcss-normalize-string@6.0.2:
+    resolution: {integrity: sha512-vQZIivlxlfqqMp4L9PZsFE4YUkWniziKjQWUtsxUiVsSSPelQydwS8Wwcuw0+83ZjPWNTl02oxlIvXsmmG+CiQ==}
+    engines: {node: ^14 || ^16 || >=18.0}
+    peerDependencies:
+      postcss: ^8.4.31
+
+  postcss-normalize-timing-functions@6.0.2:
+    resolution: {integrity: sha512-a+YrtMox4TBtId/AEwbA03VcJgtyW4dGBizPl7e88cTFULYsprgHWTbfyjSLyHeBcK/Q9JhXkt2ZXiwaVHoMzA==}
+    engines: {node: ^14 || ^16 || >=18.0}
+    peerDependencies:
+      postcss: ^8.4.31
+
+  postcss-normalize-unicode@6.1.0:
+    resolution: {integrity: sha512-QVC5TQHsVj33otj8/JD869Ndr5Xcc/+fwRh4HAsFsAeygQQXm+0PySrKbr/8tkDKzW+EVT3QkqZMfFrGiossDg==}
+    engines: {node: ^14 || ^16 || >=18.0}
+    peerDependencies:
+      postcss: ^8.4.31
+
+  postcss-normalize-url@6.0.2:
+    resolution: {integrity: sha512-kVNcWhCeKAzZ8B4pv/DnrU1wNh458zBNp8dh4y5hhxih5RZQ12QWMuQrDgPRw3LRl8mN9vOVfHl7uhvHYMoXsQ==}
+    engines: {node: ^14 || ^16 || >=18.0}
+    peerDependencies:
+      postcss: ^8.4.31
+
+  postcss-normalize-whitespace@6.0.2:
+    resolution: {integrity: sha512-sXZ2Nj1icbJOKmdjXVT9pnyHQKiSAyuNQHSgRCUgThn2388Y9cGVDR+E9J9iAYbSbLHI+UUwLVl1Wzco/zgv0Q==}
+    engines: {node: ^14 || ^16 || >=18.0}
+    peerDependencies:
+      postcss: ^8.4.31
+
+  postcss-ordered-values@6.0.2:
+    resolution: {integrity: sha512-VRZSOB+JU32RsEAQrO94QPkClGPKJEL/Z9PCBImXMhIeK5KAYo6slP/hBYlLgrCjFxyqvn5VC81tycFEDBLG1Q==}
+    engines: {node: ^14 || ^16 || >=18.0}
+    peerDependencies:
+      postcss: ^8.4.31
+
+  postcss-reduce-initial@6.1.0:
+    resolution: {integrity: sha512-RarLgBK/CrL1qZags04oKbVbrrVK2wcxhvta3GCxrZO4zveibqbRPmm2VI8sSgCXwoUHEliRSbOfpR0b/VIoiw==}
+    engines: {node: ^14 || ^16 || >=18.0}
+    peerDependencies:
+      postcss: ^8.4.31
+
+  postcss-reduce-transforms@6.0.2:
+    resolution: {integrity: sha512-sB+Ya++3Xj1WaT9+5LOOdirAxP7dJZms3GRcYheSPi1PiTMigsxHAdkrbItHxwYHr4kt1zL7mmcHstgMYT+aiA==}
+    engines: {node: ^14 || ^16 || >=18.0}
+    peerDependencies:
+      postcss: ^8.4.31
+
+  postcss-selector-parser@6.1.2:
+    resolution: {integrity: sha512-Q8qQfPiZ+THO/3ZrOrO0cJJKfpYCagtMUkXbnEfmgUjwXg6z/WBeOyS9APBBPCTSiDV+s4SwQGu8yFsiMRIudg==}
+    engines: {node: '>=4'}
+
+  postcss-selector-parser@7.1.0:
+    resolution: {integrity: sha512-8sLjZwK0R+JlxlYcTuVnyT2v+htpdrjDOKuMcOVdYjt52Lh8hWRYpxBPoKx/Zg+bcjc3wx6fmQevMmUztS/ccA==}
+    engines: {node: '>=4'}
+
+  postcss-svgo@6.0.3:
+    resolution: {integrity: sha512-dlrahRmxP22bX6iKEjOM+c8/1p+81asjKT+V5lrgOH944ryx/OHpclnIbGsKVd3uWOXFLYJwCVf0eEkJGvO96g==}
+    engines: {node: ^14 || ^16 || >= 18}
+    peerDependencies:
+      postcss: ^8.4.31
+
+  postcss-unique-selectors@6.0.4:
+    resolution: {integrity: sha512-K38OCaIrO8+PzpArzkLKB42dSARtC2tmG6PvD4b1o1Q2E9Os8jzfWFfSy/rixsHwohtsDdFtAWGjFVFUdwYaMg==}
+    engines: {node: ^14 || ^16 || >=18.0}
+    peerDependencies:
+      postcss: ^8.4.31
+
+  postcss-value-parser@4.2.0:
+    resolution: {integrity: sha512-1NNCs6uurfkVbeXG4S8JFT9t19m45ICnif8zWLd5oPSZ50QnwMfK+H3jv408d4jw/7Bttv5axS5IiHoLaVNHeQ==}
+
+  postcss@7.0.39:
+    resolution: {integrity: sha512-yioayjNbHn6z1/Bywyb2Y4s3yvDAeXGOyxqD+LnVOinq6Mdmd++SW2wUNVzavyyHxd6+DxzWGIuosg6P1Rj8uA==}
+    engines: {node: '>=6.0.0'}
+
+  postcss@8.5.6:
+    resolution: {integrity: sha512-3Ybi1tAuwAP9s0r1UQ2J4n5Y0G05bJkpUIO0/bI9MhwmD70S5aTWbXGBwxHrelT+XM1k6dM0pk+SwNkpTRN7Pg==}
+    engines: {node: ^10 || ^12 || >=14}
+
+  prebuild-install@7.1.3:
+    resolution: {integrity: sha512-8Mf2cbV7x1cXPUILADGI3wuhfqWvtiLA1iclTDbFRZkgRQS0NqsPZphna9V+HyTEadheuPmjaJMsbzKQFOzLug==}
+    engines: {node: '>=10'}
+    hasBin: true
+
+  pretty-hrtime@1.0.3:
+    resolution: {integrity: sha512-66hKPCr+72mlfiSjlEB1+45IjXSqvVAIy6mocupoww4tBFE9R9IhwwUGoI4G++Tc9Aq+2rxOt0RFU6gPcrte0A==}
+    engines: {node: '>= 0.8'}
+
+  process-nextick-args@2.0.1:
+    resolution: {integrity: sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag==}
+
+  progress@1.1.8:
+    resolution: {integrity: sha512-UdA8mJ4weIkUBO224tIarHzuHs4HuYiJvsuGT7j/SPQiUJVjYvNDBIPa0hAorduOfjGohB/qHWRa/lrrWX/mXw==}
+    engines: {node: '>=0.4.0'}
+
+  progress@2.0.3:
+    resolution: {integrity: sha512-7PiHtLll5LdnKIMw100I+8xJXR5gW2QwWYkT6iJva0bXitZKa/XMrSbdmg3r2Xnaidz9Qumd0VPaMrZlF9V9sA==}
+    engines: {node: '>=0.4.0'}
+
+  promise-stream-reader@1.0.1:
+    resolution: {integrity: sha512-Tnxit5trUjBAqqZCGWwjyxhmgMN4hGrtpW3Oc/tRI4bpm/O2+ej72BB08l6JBnGQgVDGCLvHFGjGgQS6vzhwXg==}
+    engines: {node: '>8.0.0'}
+
+  proto-list@1.2.4:
+    resolution: {integrity: sha512-vtK/94akxsTMhe0/cbfpR+syPuszcuwhqVjJq26CuNDgFGj682oRBXOP5MJpv2r7JtE8MsiepGIqvvOTBwn2vA==}
+
+  proxy-from-env@1.1.0:
+    resolution: {integrity: sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg==}
+
+  prr@1.0.1:
+    resolution: {integrity: sha512-yPw4Sng1gWghHQWj0B3ZggWUm4qVbPwPFcRG8KyxiU7J2OHFSoEHKS+EZ3fv5l1t9CyCiop6l/ZYeWbrgoQejw==}
+
+  pseudo-localization@2.4.0:
+    resolution: {integrity: sha512-ISYMOKY8+f+PmiXMFw2y6KLY74LBrv/8ml/VjjoVEV2k+MS+OJZz7ydciK5ntJwxPrKQPTU1+oXq9Mx2b0zEzg==}
+    hasBin: true
+
+  pump@1.0.3:
+    resolution: {integrity: sha512-8k0JupWme55+9tCVE+FS5ULT3K6AbgqrGa58lTT49RpyfwwcGedHqaC5LlQNdEAumn/wFsu6aPwkuPMioy8kqw==}
+
+  pump@2.0.1:
+    resolution: {integrity: sha512-ruPMNRkN3MHP1cWJc9OWr+T/xDP0jhXYCLfJcBuX54hhfIBnaQmAUMfDcG4DM5UMWByBbJY69QSphm3jtDKIkA==}
+
+  pump@3.0.3:
+    resolution: {integrity: sha512-todwxLMY7/heScKmntwQG8CXVkWUOdYxIvY2s0VWAAMh/nd8SoYiRaKjlr7+iCs984f2P8zvrfWcDDYVb73NfA==}
+
+  pumpify@1.5.1:
+    resolution: {integrity: sha512-oClZI37HvuUJJxSKKrC17bZ9Cu0ZYhEAGPsPUy9KlMUmv9dKX2o77RUmq7f3XjIxbwyGwYzbzQ1L2Ks8sIradQ==}
+
+  punycode.js@2.3.1:
+    resolution: {integrity: sha512-uxFIHU0YlHYhDQtV4R9J6a52SLx28BCjT+4ieh7IGbgwVJWO+km431c4yRlREUAsAmt/uMjQUyQHNEPf0M39CA==}
+    engines: {node: '>=6'}
+
+  punycode@2.3.1:
+    resolution: {integrity: sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==}
+    engines: {node: '>=6'}
+
+  queue-microtask@1.2.3:
+    resolution: {integrity: sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==}
+
+  queue@3.1.0:
+    resolution: {integrity: sha512-z3XqdkYJ/YVQuAAoAKLcePEk2BZDMZR2jv2hTrpQb0K5M0dUbiwADr48N1F63M4ChD/GwPc/LeaA9VC5dJFfTA==}
+
+  queue@4.5.1:
+    resolution: {integrity: sha512-AMD7w5hRXcFSb8s9u38acBZ+309u6GsiibP4/0YacJeaurRshogB7v/ZcVPxP5gD5+zIw6ixRHdutiYUJfwKHw==}
+
+  quick-lru@5.1.1:
+    resolution: {integrity: sha512-WuyALRjWPDGtt/wzJiadO5AXY+8hZ80hVpe6MyivgraREW751X3SbhRvG3eLKOYN+8VEvqLcf3wdnt44Z4S4SA==}
+    engines: {node: '>=10'}
+
+  randombytes@2.1.0:
+    resolution: {integrity: sha512-vYl3iOX+4CKUWuxGi9Ukhie6fsqXqS9FE2Zaic4tNFD2N2QQaXOMFbuKK4QmDHC0JO6B1Zp41J0LpT0oR68amQ==}
+
+  rc@1.2.8:
+    resolution: {integrity: sha512-y3bGgqKj3QBdxLbLkomlohkvsA8gdAiUQlSBJnBhfn+BPxg4bc62d8TcBW15wavDfgexCgccckhcZvywyQYPOw==}
+    hasBin: true
+
+  rcedit@1.1.2:
+    resolution: {integrity: sha512-z2ypB4gbINhI6wVe0JJMmdpmOpmNc4g90sE6/6JSuch5kYnjfz9CxvVPqqhShgR6GIkmtW3W2UlfiXhWljA0Fw==}
+
+  rcedit@4.0.1:
+    resolution: {integrity: sha512-bZdaQi34krFWhrDn+O53ccBDw0MkAT2Vhu75SqhtvhQu4OPyFM4RoVheyYiVQYdjhUi6EJMVWQ0tR6bCIYVkUg==}
+    engines: {node: '>= 14.0.0'}
+
+  read-pkg-up@1.0.1:
+    resolution: {integrity: sha512-WD9MTlNtI55IwYUS27iHh9tK3YoIVhxis8yKhLpTqWtml739uXc9NWTpxoHkfZf3+DkCCsXox94/VWZniuZm6A==}
+    engines: {node: '>=0.10.0'}
+
+  read-pkg@1.1.0:
+    resolution: {integrity: sha512-7BGwRHqt4s/uVbuyoeejRn4YmFnYZiFl4AuaeXHlgZf3sONF0SOGlxs2Pw8g6hCKupo08RafIO5YXFNOKTfwsQ==}
+    engines: {node: '>=0.10.0'}
+
+  read-pkg@3.0.0:
+    resolution: {integrity: sha512-BLq/cCO9two+lBgiTYNqD6GdtK8s4NpaWrl6/rCO9w0TUS8oJl7cmToOZfRYllKTISY6nt1U7jQ53brmKqY6BA==}
+    engines: {node: '>=4'}
+
+  readable-stream@1.0.34:
+    resolution: {integrity: sha512-ok1qVCJuRkNmvebYikljxJA/UEsKwLl2nI1OmaqAu4/UE+h0wKCHok4XkL/gvi39OacXvw59RJUOFUkDib2rHg==}
+
+  readable-stream@2.3.8:
+    resolution: {integrity: sha512-8p0AUk4XODgIewSi0l8Epjs+EVnWiK7NoDIEGU0HhE7+ZyY8D1IMY7odu5lRrFXGg71L15KG8QrPmum45RTtdA==}
+
+  readable-stream@3.6.2:
+    resolution: {integrity: sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==}
+    engines: {node: '>= 6'}
+
+  readdirp@2.2.1:
+    resolution: {integrity: sha512-1JU/8q+VgFZyxwrJ+SVIOsh+KywWGpds3NTqikiKpDMZWScmAYyKIgqkO+ARvNWJfXeXR1zxz7aHF4u4CyH6vQ==}
+    engines: {node: '>=0.10'}
+
+  readdirp@3.6.0:
+    resolution: {integrity: sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==}
+    engines: {node: '>=8.10.0'}
+
+  readdirp@4.1.2:
+    resolution: {integrity: sha512-GDhwkLfywWL2s6vEjyhri+eXmfH6j1L7JE27WhqLeYzoh/A3DBaYGEj2H/HFZCn/kMfim73FXxEJTw06WtxQwg==}
+    engines: {node: '>= 14.18.0'}
+
+  rechoir@0.6.2:
+    resolution: {integrity: sha512-HFM8rkZ+i3zrV+4LQjwQ0W+ez98pApMGM3HUrN04j3CqzPOzl9nmP15Y8YXNm8QHGv/eacOVEjqhmWpkRV0NAw==}
+    engines: {node: '>= 0.10'}
+
+  rechoir@0.8.0:
+    resolution: {integrity: sha512-/vxpCXddiX8NGfGO/mTafwjq4aFa/71pvamip0++IQk3zG8cbCj0fifNPrjjF1XMXUne91jL9OoxmdykoEtifQ==}
+    engines: {node: '>= 10.13.0'}
+
+  reflect.getprototypeof@1.0.10:
+    resolution: {integrity: sha512-00o4I+DVrefhv+nX0ulyi3biSHCPDe+yLv5o/p6d/UVlirijB8E16FtfwSAi4g3tcqrQ4lRAqQSoFEZJehYEcw==}
+    engines: {node: '>= 0.4'}
+
+  regex-not@1.0.2:
+    resolution: {integrity: sha512-J6SDjUgDxQj5NusnOtdFxDwN/+HWykR8GELwctJ7mdqhcyy1xEc4SRFHUXvxTp661YaVKAjfRLZ9cCqS6tn32A==}
+    engines: {node: '>=0.10.0'}
+
+  regexp.prototype.flags@1.5.4:
+    resolution: {integrity: sha512-dYqgNSZbDwkaJ2ceRd9ojCGjBq+mOm9LmtXnAnEGyHhN/5R7iDW2TRw3h+o/jCFxus3P2LfWIIiwowAjANm7IA==}
+    engines: {node: '>= 0.4'}
+
+  remove-bom-buffer@3.0.0:
+    resolution: {integrity: sha512-8v2rWhaakv18qcvNeli2mZ/TMTL2nEyAKRvzo1WtnZBl15SHyEhrCu2/xKlJyUFKHiHgfXIyuY6g2dObJJycXQ==}
+    engines: {node: '>=0.10.0'}
+
+  remove-bom-stream@1.2.0:
+    resolution: {integrity: sha512-wigO8/O08XHb8YPzpDDT+QmRANfW6vLqxfaXm1YXhnFf3AkSLyjfG3GEFg4McZkmgL7KvCj5u2KczkvSP6NfHA==}
+    engines: {node: '>= 0.10'}
+
+  remove-trailing-separator@1.1.0:
+    resolution: {integrity: sha512-/hS+Y0u3aOfIETiaiirUFwDBDzmXPvO+jAfKTitUngIPzdKc6Z0LoFjM/CK5PL4C+eKwHohlHAb6H0VFfmmUsw==}
+
+  repeat-element@1.1.4:
+    resolution: {integrity: sha512-LFiNfRcSu7KK3evMyYOuCzv3L10TW7yC1G2/+StMjK8Y6Vqd2MG7r/Qjw4ghtuCOjFvlnms/iMmLqpvW/ES/WQ==}
+    engines: {node: '>=0.10.0'}
+
+  repeat-string@1.6.1:
+    resolution: {integrity: sha512-PV0dzCYDNfRi1jCDbJzpW7jNNDRuCOG/jI5ctQcGKt/clZD+YcPS3yIlWuTJMmESC8aevCFmWJy5wjAFgNqN6w==}
+    engines: {node: '>=0.10'}
+
+  replace-ext@0.0.1:
+    resolution: {integrity: sha512-AFBWBy9EVRTa/LhEcG8QDP3FvpwZqmvN2QFDuJswFeaVhWnZMp8q3E6Zd90SR04PlIwfGdyVjNyLPyen/ek5CQ==}
+    engines: {node: '>= 0.4'}
+
+  replace-ext@1.0.1:
+    resolution: {integrity: sha512-yD5BHCe7quCgBph4rMQ+0KkIRKwWCrHDOX1p1Gp6HwjPM5kVoCdKGNhN7ydqqsX6lJEnQDKZ/tFMiEdQ1dvPEw==}
+    engines: {node: '>= 0.10'}
+
+  replace-ext@2.0.0:
+    resolution: {integrity: sha512-UszKE5KVK6JvyD92nzMn9cDapSk6w/CaFZ96CnmDMUqH9oowfxF/ZjRITD25H4DnOQClLA4/j7jLGXXLVKxAug==}
+    engines: {node: '>= 10'}
+
+  replace-homedir@1.0.0:
+    resolution: {integrity: sha512-CHPV/GAglbIB1tnQgaiysb8H2yCy8WQ7lcEwQ/eT+kLj0QHV8LnJW0zpqpE7RSkrMSRoa+EBoag86clf7WAgSg==}
+    engines: {node: '>= 0.10'}
+
+  replacestream@4.0.3:
+    resolution: {integrity: sha512-AC0FiLS352pBBiZhd4VXB1Ab/lh0lEgpP+GGvZqbQh8a5cmXVoTe5EX/YeTFArnp4SRGTHh1qCHu9lGs1qG8sA==}
+
+  require-directory@2.1.1:
+    resolution: {integrity: sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==}
+    engines: {node: '>=0.10.0'}
+
+  require-from-string@2.0.2:
+    resolution: {integrity: sha512-Xf0nWe6RseziFMu+Ap9biiUbmplq6S9/p+7w7YXP/JBHhrUDDUhwa+vANyubuqfZWTveU//DYVGsDG7RKL/vEw==}
+    engines: {node: '>=0.10.0'}
+
+  require-main-filename@1.0.1:
+    resolution: {integrity: sha512-IqSUtOVP4ksd1C/ej5zeEh/BIP2ajqpn8c5x+q99gvcIG/Qf0cud5raVnE/Dwd0ua9TXYDoDc0RE5hBSdz22Ug==}
+
+  require-main-filename@2.0.0:
+    resolution: {integrity: sha512-NKN5kMDylKuldxYLSUfrbo5Tuzh4hd+2E8NPPX02mZtn1VuREQToYe/ZdlJy+J3uCpfaiGF05e7B8W0iXbQHmg==}
+
+  resolve-alpn@1.2.1:
+    resolution: {integrity: sha512-0a1F4l73/ZFZOakJnQ3FvkJ2+gSTQWz/r2KE5OdDY0TxPm5h4GkqkWWfM47T7HsbnOtcJVEF4epCVy6u7Q3K+g==}
+
+  resolve-cwd@3.0.0:
+    resolution: {integrity: sha512-OrZaX2Mb+rJCpH/6CpSqt9xFVpN++x01XnN2ie9g6P5/3xelLAkXWVADpdz1IHD/KFfEXyE6V0U01OQ3UO2rEg==}
+    engines: {node: '>=8'}
+
+  resolve-dir@1.0.1:
+    resolution: {integrity: sha512-R7uiTjECzvOsWSfdM0QKFNBVFcK27aHOUwdvK53BcW8zqnGdYp0Fbj82cy54+2A4P2tFM22J5kRfe1R+lM/1yg==}
+    engines: {node: '>=0.10.0'}
+
+  resolve-from@5.0.0:
+    resolution: {integrity: sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==}
+    engines: {node: '>=8'}
+
+  resolve-options@1.1.0:
+    resolution: {integrity: sha512-NYDgziiroVeDC29xq7bp/CacZERYsA9bXYd1ZmcJlF3BcrZv5pTb4NG7SjdyKDnXZ84aC4vo2u6sNKIA1LCu/A==}
+    engines: {node: '>= 0.10'}
+
+  resolve-path@1.4.0:
+    resolution: {integrity: sha512-i1xevIst/Qa+nA9olDxLWnLk8YZbi8R/7JPbCMcgyWaFR6bKWaexgJgEB5oc2PKMjYdrHynyz0NY+if+H98t1w==}
+    engines: {node: '>= 0.8'}
+
+  resolve-url@0.2.1:
+    resolution: {integrity: sha512-ZuF55hVUQaaczgOIwqWzkEcEidmlD/xl44x1UZnhOXcYuFN2S6+rcxpG+C1N3So0wvNI3DmJICUFfu2SxhBmvg==}
+    deprecated: https://github.com/lydell/resolve-url#deprecated
+
+  resolve@1.22.10:
+    resolution: {integrity: sha512-NPRy+/ncIMeDlTAsuqwKIiferiawhefFJtkNSW0qZJEqMEb+qBt/77B/jGeeek+F0uOeN05CDa6HXbbIgtVX4w==}
+    engines: {node: '>= 0.4'}
+    hasBin: true
+
+  responselike@2.0.1:
+    resolution: {integrity: sha512-4gl03wn3hj1HP3yzgdI7d3lCkF95F21Pz4BPGvKHinyQzALR5CapwC8yIi0Rh58DEMQ/SguC03wFj2k0M/mHhw==}
+
+  responselike@3.0.0:
+    resolution: {integrity: sha512-40yHxbNcl2+rzXvZuVkrYohathsSJlMTXKryG5y8uciHv1+xDLHQpgjG64JUO9nrEq2jGLH6IZ8BcZyw3wrweg==}
+    engines: {node: '>=14.16'}
+
+  restore-cursor@5.1.0:
+    resolution: {integrity: sha512-oMA2dcrw6u0YfxJQXm342bFKX/E4sG9rbTzO9ptUcR/e8A33cHuvStiYOwH7fszkZlZ1z/ta9AAoPk2F4qIOHA==}
+    engines: {node: '>=18'}
+
+  ret@0.1.15:
+    resolution: {integrity: sha512-TTlYpa+OL+vMMNG24xSlQGEJ3B/RzEfUlLct7b5G/ytav+wPrplCpVMFuwzXbkecJrb6IYo1iFb0S9v37754mg==}
+    engines: {node: '>=0.12'}
+
+  reusify@1.1.0:
+    resolution: {integrity: sha512-g6QUff04oZpHs0eG5p83rFLhHeV00ug/Yf9nZM6fLeUrPguBTkTQOdpAWWspMh55TZfVQDPaN3NQJfbVRAxdIw==}
+    engines: {iojs: '>=1.0.0', node: '>=0.10.0'}
+
+  rimraf@2.6.3:
+    resolution: {integrity: sha512-mwqeW5XsA2qAejG46gYdENaxXjx9onRNCfn7L0duuP4hCuTIi/QO7PDK07KJfp1d+izWPrzEJDcSqBa0OZQriA==}
+    deprecated: Rimraf versions prior to v4 are no longer supported
+    hasBin: true
+
+  rimraf@2.7.1:
+    resolution: {integrity: sha512-uWjbaKIK3T1OSVptzX7Nl6PvQ3qAGtKEtVRjRuazjfL3Bx5eI409VZSqgND+4UNnmzLVdPj9FqFJNPqBZFve4w==}
+    deprecated: Rimraf versions prior to v4 are no longer supported
+    hasBin: true
+
+  roarr@2.15.4:
+    resolution: {integrity: sha512-CHhPh+UNHD2GTXNYhPWLnU8ONHdI+5DI+4EYIAOaiD63rHeYlZvyh8P+in5999TTSFgUYuKUAjzRI4mdh/p+2A==}
+    engines: {node: '>=8.0'}
+
+  rollup@4.46.1:
+    resolution: {integrity: sha512-33xGNBsDJAkzt0PvninskHlWnTIPgDtTwhg0U38CUoNP/7H6wI2Cz6dUeoNPbjdTdsYTGuiFFASuUOWovH0SyQ==}
+    engines: {node: '>=18.0.0', npm: '>=8.0.0'}
+    hasBin: true
+
+  run-parallel@1.2.0:
+    resolution: {integrity: sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==}
+
+  safe-array-concat@1.1.3:
+    resolution: {integrity: sha512-AURm5f0jYEOydBj7VQlVvDrjeFgthDdEF5H1dP+6mNpoXOMo1quQqJ4wvJDyRZ9+pO3kGWoOdmV08cSv2aJV6Q==}
+    engines: {node: '>=0.4'}
+
+  safe-buffer@5.1.2:
+    resolution: {integrity: sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==}
+
+  safe-buffer@5.2.1:
+    resolution: {integrity: sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==}
+
+  safe-push-apply@1.0.0:
+    resolution: {integrity: sha512-iKE9w/Z7xCzUMIZqdBsp6pEQvwuEebH4vdpjcDWnyzaI6yl6O9FHvVpmGelvEHNsoY6wGblkxR6Zty/h00WiSA==}
+    engines: {node: '>= 0.4'}
+
+  safe-regex-test@1.1.0:
+    resolution: {integrity: sha512-x/+Cz4YrimQxQccJf5mKEbIa1NzeCRNI5Ecl/ekmlYaampdNLPalVyIcCZNNH3MvmqBugV5TMYZXv0ljslUlaw==}
+    engines: {node: '>= 0.4'}
+
+  safe-regex@1.1.0:
+    resolution: {integrity: sha512-aJXcif4xnaNUzvUuC5gcb46oTS7zvg4jpMTnuqtrEPlR3vFr4pxtdTwaF1Qs3Enjn9HK+ZlwQui+a7z0SywIzg==}
+
+  sax@1.4.1:
+    resolution: {integrity: sha512-+aWOz7yVScEGoKNd4PA10LZ8sk0A/z5+nXQG5giUO5rprX9jgYsTdov9qCchZiPIZezbZH+jRut8nPodFAX4Jg==}
+
+  schema-utils@3.3.0:
+    resolution: {integrity: sha512-pN/yOAvcC+5rQ5nERGuwrjLlYvLTbCibnZ1I7B1LaiAz9BRBlE9GMgE/eqV30P7aJQUf7Ddimy/RsbYO/GrVGg==}
+    engines: {node: '>= 10.13.0'}
+
+  schema-utils@4.3.2:
+    resolution: {integrity: sha512-Gn/JaSk/Mt9gYubxTtSn/QCV4em9mpAPiR1rqy/Ocu19u/G9J5WWdNoUT4SiV6mFC3y6cxyFcFwdzPM3FgxGAQ==}
+    engines: {node: '>= 10.13.0'}
+
+  semver-compare@1.0.0:
+    resolution: {integrity: sha512-YM3/ITh2MJ5MtzaM429anh+x2jiLVjqILF4m4oyQB18W7Ggea7BfqdH/wGMK7dDiMghv/6WG7znWMwUDzJiXow==}
+
+  semver-greatest-satisfied-range@1.1.0:
+    resolution: {integrity: sha512-Ny/iyOzSSa8M5ML46IAx3iXc6tfOsYU2R4AXi2UpHk60Zrgyq6eqPj/xiOfS0rRl/iiQ/rdJkVjw/5cdUyCntQ==}
+    engines: {node: '>= 0.10'}
+
+  semver@5.7.2:
+    resolution: {integrity: sha512-cBznnQ9KjJqU67B52RMC65CMarK2600WFnbkcaiwWq3xy/5haFJlshgnpjovMVJ+Hff49d8GEn0b87C5pDQ10g==}
+    hasBin: true
+
+  semver@6.3.1:
+    resolution: {integrity: sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==}
+    hasBin: true
+
+  semver@7.7.2:
+    resolution: {integrity: sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==}
+    engines: {node: '>=10'}
+    hasBin: true
+
+  serialize-error@7.0.1:
+    resolution: {integrity: sha512-8I8TjW5KMOKsZQTvoxjuSIa7foAwPWGOts+6o7sgjz41/qMD9VQHEDxi6PBvK2l0MXUmqZyNpUK+T2tQaaElvw==}
+    engines: {node: '>=10'}
+
+  serialize-javascript@6.0.2:
+    resolution: {integrity: sha512-Saa1xPByTTq2gdeFZYLLo+RFE35NHZkAbqZeWNd3BpzppeVisAqpDjcp8dyf6uIvEqJRd46jemmyA4iFIeVk8g==}
+
+  set-blocking@2.0.0:
+    resolution: {integrity: sha512-KiKBS8AnWGEyLzofFfmvKwpdPzqiy16LvQfK3yv/fVH7Bj13/wl3JSR1J+rfgRE9q7xUJK4qvgS8raSOeLUehw==}
+
+  set-function-length@1.2.2:
+    resolution: {integrity: sha512-pgRc4hJ4/sNjWCSS9AmnS40x3bNMDTknHgL5UaMBTMyJnU90EgWh1Rz+MC9eFu4BuN/UwZjKQuY/1v3rM7HMfg==}
+    engines: {node: '>= 0.4'}
+
+  set-function-name@2.0.2:
+    resolution: {integrity: sha512-7PGFlmtwsEADb0WYyvCMa1t+yke6daIG4Wirafur5kcf+MhUnPms1UeR0CKQdTZD81yESwMHbtn+TR+dMviakQ==}
+    engines: {node: '>= 0.4'}
+
+  set-proto@1.0.0:
+    resolution: {integrity: sha512-RJRdvCo6IAnPdsvP/7m6bsQqNnn1FCBX5ZNtFL98MmFF/4xAIJTIg1YbHW5DC2W5SKZanrC6i4HsJqlajw/dZw==}
+    engines: {node: '>= 0.4'}
+
+  set-value@2.0.1:
+    resolution: {integrity: sha512-JxHc1weCN68wRY0fhCoXpyK55m/XPHafOmK4UWD7m2CI14GMcFypt4w/0+NV5f/ZMby2F6S2wwA7fgynh9gWSw==}
+    engines: {node: '>=0.10.0'}
+
+  setimmediate@1.0.5:
+    resolution: {integrity: sha512-MATJdZp8sLqDl/68LfQmbP8zKPLQNV6BIZoIgrscFDQ+RsvK/BxeDQOgyxKKoh0y/8h3BqVFnCqQ/gd+reiIXA==}
+
+  setprototypeof@1.1.0:
+    resolution: {integrity: sha512-BvE/TwpZX4FXExxOxZyRGQQv651MSwmWKZGqvmPcRIjDqWub67kTKuIMx43cZZrS/cBBzwBcNDWoFxt2XEFIpQ==}
+
+  setprototypeof@1.2.0:
+    resolution: {integrity: sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==}
+
+  shallow-clone@3.0.1:
+    resolution: {integrity: sha512-/6KqX+GVUdqPuPPd2LxDDxzX6CAbjJehAAOKlNpqqUpAqPM6HeL8f+o3a+JsyGjn2lv0WY8UsTgUJjU9Ok55NA==}
+    engines: {node: '>=8'}
+
+  shebang-command@1.2.0:
+    resolution: {integrity: sha512-EV3L1+UQWGor21OmnvojK36mhg+TyIKDh3iFBKBohr5xeXIhNBcx8oWdgkTEEQ+BEFFYdLRuqMfd5L84N1V5Vg==}
+    engines: {node: '>=0.10.0'}
+
+  shebang-command@2.0.0:
+    resolution: {integrity: sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==}
+    engines: {node: '>=8'}
+
+  shebang-regex@1.0.0:
+    resolution: {integrity: sha512-wpoSFAxys6b2a2wHZ1XpDSgD7N9iVjg29Ph9uV/uaP9Ex/KXlkTZTeddxDPSYQpgvzKLGJke2UU0AzoGCjNIvQ==}
+    engines: {node: '>=0.10.0'}
+
+  shebang-regex@3.0.0:
+    resolution: {integrity: sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==}
+    engines: {node: '>=8'}
+
+  shell-quote@1.8.3:
+    resolution: {integrity: sha512-ObmnIF4hXNg1BqhnHmgbDETF8dLPCggZWBjkQfhZpbszZnYur5DUljTcCHii5LC3J5E0yeO/1LIMyH+UvHQgyw==}
+    engines: {node: '>= 0.4'}
+
+  side-channel-list@1.0.0:
+    resolution: {integrity: sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==}
+    engines: {node: '>= 0.4'}
+
+  side-channel-map@1.0.1:
+    resolution: {integrity: sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==}
+    engines: {node: '>= 0.4'}
+
+  side-channel-weakmap@1.0.2:
+    resolution: {integrity: sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==}
+    engines: {node: '>= 0.4'}
+
+  side-channel@1.1.0:
+    resolution: {integrity: sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==}
+    engines: {node: '>= 0.4'}
+
+  signal-exit@4.1.0:
+    resolution: {integrity: sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==}
+    engines: {node: '>=14'}
+
+  simple-concat@1.0.1:
+    resolution: {integrity: sha512-cSFtAPtRhljv69IK0hTVZQ+OfE9nePi/rtJmw5UjHeVyVroEqJXP1sFztKUy1qU+xvz3u/sfYJLa947b7nAN2Q==}
+
+  simple-get@4.0.1:
+    resolution: {integrity: sha512-brv7p5WgH0jmQJr1ZDDfKDOSeWWg+OVypG99A/5vYGPqJ6pxiaHLy8nxtFjBA7oMa01ebA9gfh1uMCFqOuXxvA==}
+
+  sinon-test@3.1.6:
+    resolution: {integrity: sha512-3jBJGf61sS2EN3M+YuIiIbeutKrubP6SFolceTcJrubG+4s+zq3rey/y0huSEwU2ECKOcyCs7EkzANnwqHWPjA==}
+    peerDependencies:
+      sinon: '>= 2.x'
+
+  sinon@12.0.1:
+    resolution: {integrity: sha512-iGu29Xhym33ydkAT+aNQFBINakjq69kKO6ByPvTsm3yyIACfyQttRTP03aBP/I8GfhFmLzrnKwNNkr0ORb1udg==}
+    deprecated: 16.1.1
+
+  slash@4.0.0:
+    resolution: {integrity: sha512-3dOsAHXXUkQTpOYcoAxLIorMTp4gIQr5IW3iVb7A7lFIp0VHhnynm9izx6TssdrIcVIESAlVjtnO2K8bg+Coew==}
+    engines: {node: '>=12'}
+
+  smart-buffer@4.2.0:
+    resolution: {integrity: sha512-94hK0Hh8rPqQl2xXc3HsaBoOXKV20MToPkcXvwbISWLEs+64sBq5kFgn2kJDHb1Pry9yrP0dxrCI9RRci7RXKg==}
+    engines: {node: '>= 6.0.0', npm: '>= 3.0.0'}
+
+  snapdragon-node@2.1.1:
+    resolution: {integrity: sha512-O27l4xaMYt/RSQ5TR3vpWCAB5Kb/czIcqUFOM/C4fYcLnbZUc1PkjTAMjof2pBWaSTwOUd6qUHcFGVGj7aIwnw==}
+    engines: {node: '>=0.10.0'}
+
+  snapdragon-util@3.0.1:
+    resolution: {integrity: sha512-mbKkMdQKsjX4BAL4bRYTj21edOf8cN7XHdYUJEe+Zn99hVEYcMvKPct1IqNe7+AZPirn8BCDOQBHQZknqmKlZQ==}
+    engines: {node: '>=0.10.0'}
+
+  snapdragon@0.8.2:
+    resolution: {integrity: sha512-FtyOnWN/wCHTVXOMwvSv26d+ko5vWlIDD6zoUJ7LW8vh+ZBC8QdljveRP+crNrtBwioEUWy/4dMtbBjA4ioNlg==}
+    engines: {node: '>=0.10.0'}
+
+  socks-proxy-agent@8.0.5:
+    resolution: {integrity: sha512-HehCEsotFqbPW9sJ8WVYB6UbmIMv7kUUORIF2Nncq4VQvBfNBLibW9YZR5dlYCSUhwcD628pRllm7n+E+YTzJw==}
+    engines: {node: '>= 14'}
+
+  socks@2.8.6:
+    resolution: {integrity: sha512-pe4Y2yzru68lXCb38aAqRf5gvN8YdjP1lok5o0J7BOHljkyCGKVz7H3vpVIXKD27rj2giOJ7DwVyk/GWrPHDWA==}
+    engines: {node: '>= 10.0.0', npm: '>= 3.0.0'}
+
+  source-map-js@1.2.1:
+    resolution: {integrity: sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==}
+    engines: {node: '>=0.10.0'}
+
+  source-map-resolve@0.5.3:
+    resolution: {integrity: sha512-Htz+RnsXWk5+P2slx5Jh3Q66vhQj1Cllm0zvnaY98+NFx+Dv2CF/f5O/t8x+KaNdrdIAsruNzoh/KpialbqAnw==}
+    deprecated: See https://github.com/lydell/source-map-resolve#deprecated
+
+  source-map-resolve@0.6.0:
+    resolution: {integrity: sha512-KXBr9d/fO/bWo97NXsPIAW1bFSBOuCnjbNTBMO7N59hsv5i9yzRDfcYwwt0l04+VqnKC+EwzvJZIP/qkuMgR/w==}
+    deprecated: See https://github.com/lydell/source-map-resolve#deprecated
+
+  source-map-support@0.3.3:
+    resolution: {integrity: sha512-9O4+y9n64RewmFoKUZ/5Tx9IHIcXM6Q+RTSw6ehnqybUz4a7iwR3Eaw80uLtqqQ5D0C+5H03D4KKGo9PdP33Gg==}
+
+  source-map-support@0.5.21:
+    resolution: {integrity: sha512-uBHU3L3czsIyYXKX88fdrGovxdSCoTGDRZ6SYXtSRxLZUzHg5P/66Ht6uoUlHu9EZod+inXhKo3qQgwXUT/y1w==}
+
+  source-map-url@0.4.1:
+    resolution: {integrity: sha512-cPiFOTLUKvJFIg4SKVScy4ilPPW6rFgMgfuZJPNoDuMs3nC1HbMUycBoJw77xFIp6z1UJQJOfx6C9GMH80DiTw==}
+    deprecated: See https://github.com/lydell/source-map-url#deprecated
+
+  source-map@0.1.32:
+    resolution: {integrity: sha512-htQyLrrRLkQ87Zfrir4/yN+vAUd6DNjVayEjTSHXu29AYQJw57I4/xEL/M6p6E/woPNJwvZt6rVlzc7gFEJccQ==}
+    engines: {node: '>=0.8.0'}
+
+  source-map@0.5.7:
+    resolution: {integrity: sha512-LbrmJOMUSdEVxIKvdcJzQC+nQhe8FUZQTXQy6+I75skNgn3OoQ0DZA8YnFa7gp8tqtL3KPf1kmo0R5DoApeSGQ==}
+    engines: {node: '>=0.10.0'}
+
+  source-map@0.6.1:
+    resolution: {integrity: sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==}
+    engines: {node: '>=0.10.0'}
+
+  source-map@0.7.6:
+    resolution: {integrity: sha512-i5uvt8C3ikiWeNZSVZNWcfZPItFQOsYTUAOkcUPGd8DqDy1uOUikjt5dG+uRlwyvR108Fb9DOd4GvXfT0N2/uQ==}
+    engines: {node: '>= 12'}
+
+  source-map@0.8.0-beta.0:
+    resolution: {integrity: sha512-2ymg6oRBpebeZi9UUNsgQ89bhx01TcTkmNTGnNO88imTmbSgy4nfujrgVEFKWpMTEGA11EDkTt7mqObTPdigIA==}
+    engines: {node: '>= 8'}
+
+  sparkles@1.0.1:
+    resolution: {integrity: sha512-dSO0DDYUahUt/0/pD/Is3VIm5TGJjludZ0HVymmhYF6eNA53PVLhnUk0znSYbH8IYBuJdCE+1luR22jNLMaQdw==}
+    engines: {node: '>= 0.10'}
+
+  spdx-correct@3.2.0:
+    resolution: {integrity: sha512-kN9dJbvnySHULIluDHy32WHRUu3Og7B9sbY7tsFLctQkIqnMh3hErYgdMjTYuqmcXX+lK5T1lnUt3G7zNswmZA==}
+
+  spdx-exceptions@2.5.0:
+    resolution: {integrity: sha512-PiU42r+xO4UbUS1buo3LPJkjlO7430Xn5SVAhdpzzsPHsjbYVflnnFdATgabnLude+Cqu25p6N+g2lw/PFsa4w==}
+
+  spdx-expression-parse@3.0.1:
+    resolution: {integrity: sha512-cbqHunsQWnJNE6KhVSMsMeH5H/L9EpymbzqTQ3uLwNCLZ1Q481oWaofqH7nO6V07xlXwY6PhQdQ2IedWx/ZK4Q==}
+
+  spdx-license-ids@3.0.21:
+    resolution: {integrity: sha512-Bvg/8F5XephndSK3JffaRqdT+gyhfqIPwDHpX80tJrF8QQRYMo8sNMeaZ2Dp5+jhwKnUmIOyFFQfHRkjJm5nXg==}
+
+  split-string@3.1.0:
+    resolution: {integrity: sha512-NzNVhJDYpwceVVii8/Hu6DKfD2G+NrQHlS/V/qgv763EYudVwEcMQNxd2lh+0VrUByXN/oJkl5grOhYWvQUYiw==}
+    engines: {node: '>=0.10.0'}
+
+  split@0.3.3:
+    resolution: {integrity: sha512-wD2AeVmxXRBoX44wAycgjVpMhvbwdI2aZjCkvfNcH1YqHQvJVa1duWc73OyVGJUc05fhFaTZeQ/PYsrmyH0JVA==}
+
+  sprintf-js@1.1.3:
+    resolution: {integrity: sha512-Oo+0REFV59/rz3gfJNKQiBlwfHaSESl1pcGyABQsnnIfWOFt6JNj5gCog2U6MLZ//IGYD+nA8nI+mTShREReaA==}
+
+  stable@0.1.8:
+    resolution: {integrity: sha512-ji9qxRnOVfcuLDySj9qzhGSEFVobyt1kIOSkj1qZzYLzq7Tos/oUUWvotUPQLlrsidqsK6tBH89Bc9kL5zHA6w==}
+    deprecated: 'Modern JS already guarantees Array#sort() is a stable sort, so this library is deprecated. See the compatibility table on MDN: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#browser_compatibility'
+
+  stack-trace@0.0.10:
+    resolution: {integrity: sha512-KGzahc7puUKkzyMt+IqAep+TVNbKP+k2Lmwhub39m1AsTSkaDutx56aDCo+HLDzf/D26BIHTJWNiTG1KAJiQCg==}
+
+  static-extend@0.1.2:
+    resolution: {integrity: sha512-72E9+uLc27Mt718pMHt9VMNiAL4LMsmDbBva8mxWUCkT07fSzEGMYUCk0XWY6lp0j6RBAG4cJ3mWuZv2OE3s0g==}
+    engines: {node: '>=0.10.0'}
+
+  statuses@1.5.0:
+    resolution: {integrity: sha512-OpZ3zP+jT1PI7I8nemJX4AKmAX070ZkYPVWV/AaKTJl+tXCTGyVdC1a4SL8RUQYEwk/f34ZX8UTykN68FwrqAA==}
+    engines: {node: '>= 0.6'}
+
+  statuses@2.0.1:
+    resolution: {integrity: sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==}
+    engines: {node: '>= 0.8'}
+
+  stdin-discarder@0.2.2:
+    resolution: {integrity: sha512-UhDfHmA92YAlNnCfhmq0VeNL5bDbiZGg7sZ2IvPsXubGkiNa9EC+tUTsjBRsYUAz87btI6/1wf4XoVvQ3uRnmQ==}
+    engines: {node: '>=18'}
+
+  stop-iteration-iterator@1.1.0:
+    resolution: {integrity: sha512-eLoXW/DHyl62zxY4SCaIgnRhuMr6ri4juEYARS8E6sCEqzKpOiE521Ucofdx+KnDZl5xmvGYaaKCk5FEOxJCoQ==}
+    engines: {node: '>= 0.4'}
+
+  stream-combiner@0.0.4:
+    resolution: {integrity: sha512-rT00SPnTVyRsaSz5zgSPma/aHSOic5U1prhYdRy5HS2kTZviFpmDgzilbtsJsxiroqACmayynDN/9VzIbX5DOw==}
+
+  stream-exhaust@1.0.2:
+    resolution: {integrity: sha512-b/qaq/GlBK5xaq1yrK9/zFcyRSTNxmcZwFLGSTG0mXgZl/4Z6GgiyYOXOvY7N3eEvFRAG1bkDRz5EPGSvPYQlw==}
+
+  stream-shift@1.0.3:
+    resolution: {integrity: sha512-76ORR0DO1o1hlKwTbi/DM3EXWGf3ZJYO8cXX5RJwnul2DEg2oyoZyjLNoQM8WsvZiFKCRfC1O0J7iCvie3RZmQ==}
+
+  stream-to-array@2.3.0:
+    resolution: {integrity: sha512-UsZtOYEn4tWU2RGLOXr/o/xjRBftZRlG3dEWoaHr8j4GuypJ3isitGbVyjQKAuMu+xbiop8q224TjiZWc4XTZA==}
+
+  streamfilter@1.0.7:
+    resolution: {integrity: sha512-Gk6KZM+yNA1JpW0KzlZIhjo3EaBJDkYfXtYSbOwNIQ7Zd6006E6+sCFlW1NDvFG/vnXhKmw6TJJgiEQg/8lXfQ==}
+
+  streamifier@0.1.1:
+    resolution: {integrity: sha512-zDgl+muIlWzXNsXeyUfOk9dChMjlpkq0DRsxujtYPgyJ676yQ8jEm6zzaaWHFDg5BNcLuif0eD2MTyJdZqXpdg==}
+    engines: {node: '>=0.10'}
+
+  streamx@2.22.1:
+    resolution: {integrity: sha512-znKXEBxfatz2GBNK02kRnCXjV+AA4kjZIUxeWSr3UGirZMJfTE9uiwKHobnbgxWyL/JWro8tTq+vOqAK1/qbSA==}
+
+  string-width@1.0.2:
+    resolution: {integrity: sha512-0XsVpQLnVCXHJfyEs8tC0zpTVIr5PKKsQtkT29IwupnPTjtPmQ3xT/4yCREF9hYkV/3M3kzcUTSAZT6a6h81tw==}
+    engines: {node: '>=0.10.0'}
+
+  string-width@4.2.3:
+    resolution: {integrity: sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==}
+    engines: {node: '>=8'}
+
+  string-width@5.1.2:
+    resolution: {integrity: sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==}
+    engines: {node: '>=12'}
+
+  string-width@7.2.0:
+    resolution: {integrity: sha512-tsaTIkKW9b4N+AEj+SVA+WhJzV7/zMhcSu78mLKWSk7cXMOSHsBKFWUs0fWwq8QyK3MgJBQRX6Gbi4kYbdvGkQ==}
+    engines: {node: '>=18'}
+
+  string.prototype.padend@3.1.6:
+    resolution: {integrity: sha512-XZpspuSB7vJWhvJc9DLSlrXl1mcA2BdoY5jjnS135ydXqLoqhs96JjDtCkjJEQHvfqZIp9hBuBMgI589peyx9Q==}
+    engines: {node: '>= 0.4'}
+
+  string.prototype.trim@1.2.10:
+    resolution: {integrity: sha512-Rs66F0P/1kedk5lyYyH9uBzuiI/kNRmwJAR9quK6VOtIpZ2G+hMZd+HQbbv25MgCA6gEffoMZYxlTod4WcdrKA==}
+    engines: {node: '>= 0.4'}
+
+  string.prototype.trimend@1.0.9:
+    resolution: {integrity: sha512-G7Ok5C6E/j4SGfyLCloXTrngQIQU3PWtXGst3yM7Bea9FRURf1S42ZHlZZtsNque2FN2PoUhfZXYLNWwEr4dLQ==}
+    engines: {node: '>= 0.4'}
+
+  string.prototype.trimstart@1.0.8:
+    resolution: {integrity: sha512-UXSH262CSZY1tfu3G3Secr6uGLCFVPMhIqHjlgCUtCCcgihYc/xKs9djMTMUOb2j1mVSeU8EU6NWc/iQKU6Gfg==}
+    engines: {node: '>= 0.4'}
+
+  string_decoder@0.10.31:
+    resolution: {integrity: sha512-ev2QzSzWPYmy9GuqfIVildA4OdcGLeFZQrq5ys6RtiuF+RQQiZWr8TZNyAcuVXyQRYfEO+MsoB/1BuQVhOJuoQ==}
+
+  string_decoder@1.1.1:
+    resolution: {integrity: sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==}
+
+  string_decoder@1.3.0:
+    resolution: {integrity: sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==}
+
+  strip-ansi@3.0.1:
+    resolution: {integrity: sha512-VhumSSbBqDTP8p2ZLKj40UjBCV4+v8bUSEpUb4KjRgWk9pbqGF4REFj6KEagidb2f/M6AzC0EmFyDNGaw9OCzg==}
+    engines: {node: '>=0.10.0'}
+
+  strip-ansi@6.0.1:
+    resolution: {integrity: sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==}
+    engines: {node: '>=8'}
+
+  strip-ansi@7.1.0:
+    resolution: {integrity: sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==}
+    engines: {node: '>=12'}
+
+  strip-bom-string@1.0.0:
+    resolution: {integrity: sha512-uCC2VHvQRYu+lMh4My/sFNmF2klFymLX1wHJeXnbEJERpV/ZsVuonzerjfrGpIGF7LBVa1O7i9kjiWvJiFck8g==}
+    engines: {node: '>=0.10.0'}
+
+  strip-bom@2.0.0:
+    resolution: {integrity: sha512-kwrX1y7czp1E69n2ajbG65mIo9dqvJ+8aBQXOGVxqwvNbsXdFM6Lq37dLAY3mknUwru8CfcCbfOLL/gMo+fi3g==}
+    engines: {node: '>=0.10.0'}
+
+  strip-bom@3.0.0:
+    resolution: {integrity: sha512-vavAMRXOgBVNF6nyEEmL3DBK19iRpDcoIwW+swQ+CbGiu7lju6t+JklA1MHweoWtadgt4ISVUsXLyDq34ddcwA==}
+    engines: {node: '>=4'}
+
+  strip-json-comments@2.0.1:
+    resolution: {integrity: sha512-4gB8na07fecVVkOI6Rs4e7T6NOTki5EmL7TUduTs6bu3EdnSycntVJ4re8kgZA+wx9IueI2Y11bfbgwtzuE0KQ==}
+    engines: {node: '>=0.10.0'}
+
+  strip-json-comments@3.1.1:
+    resolution: {integrity: sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==}
+    engines: {node: '>=8'}
+
+  strnum@2.1.1:
+    resolution: {integrity: sha512-7ZvoFTiCnGxBtDqJ//Cu6fWtZtc7Y3x+QOirG15wztbdngGSkht27o2pyGWrVy0b4WAy3jbKmnoK6g5VlVNUUw==}
+
+  style-loader@3.3.4:
+    resolution: {integrity: sha512-0WqXzrsMTyb8yjZJHDqwmnwRJvhALK9LfRtRc6B4UTWe8AijYLZYZ9thuJTZc2VfQWINADW/j+LiJnfy2RoC1w==}
+    engines: {node: '>= 12.13.0'}
+    peerDependencies:
+      webpack: ^5.0.0
+
+  stylehacks@6.1.1:
+    resolution: {integrity: sha512-gSTTEQ670cJNoaeIp9KX6lZmm8LJ3jPB5yJmX8Zq/wQxOsAFXV3qjWzHas3YYk1qesuVIyYWWUpZ0vSE/dTSGg==}
+    engines: {node: ^14 || ^16 || >=18.0}
+    peerDependencies:
+      postcss: ^8.4.31
+
+  sucrase@3.35.0:
+    resolution: {integrity: sha512-8EbVDiu9iN/nESwxeSxDKe0dunta1GOlHufmSSXxMD2z2/tMZpDMpvXQGsc+ajGo8y2uYUmixaSRUc/QPoQ0GA==}
+    engines: {node: '>=16 || 14 >=14.17'}
+    hasBin: true
+
+  sumchecker@3.0.1:
+    resolution: {integrity: sha512-MvjXzkz/BOfyVDkG0oFOtBxHX2u3gKbMHIF/dXblZsgD3BWOFLmHovIpZY7BykJdAjcqRCBi1WYBNdEC9yI7vg==}
+    engines: {node: '>= 8.0'}
+
+  supports-color@2.0.0:
+    resolution: {integrity: sha512-KKNVtd6pCYgPIKU4cp2733HWYCpplQhddZLBUryaAHou723x+FRzQ5Df824Fj+IyyuiQTRoub4SnIFfIcrp70g==}
+    engines: {node: '>=0.8.0'}
+
+  supports-color@5.5.0:
+    resolution: {integrity: sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==}
+    engines: {node: '>=4'}
+
+  supports-color@7.2.0:
+    resolution: {integrity: sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==}
+    engines: {node: '>=8'}
+
+  supports-color@8.1.1:
+    resolution: {integrity: sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==}
+    engines: {node: '>=10'}
+
+  supports-color@9.4.0:
+    resolution: {integrity: sha512-VL+lNrEoIXww1coLPOmiEmK/0sGigko5COxI09KzHc2VJXJsQ37UaQ+8quuxjDeA7+KnLGTWRyOXSLLR2Wb4jw==}
+    engines: {node: '>=12'}
+
+  supports-preserve-symlinks-flag@1.0.0:
+    resolution: {integrity: sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==}
+    engines: {node: '>= 0.4'}
+
+  sver-compat@1.5.0:
+    resolution: {integrity: sha512-aFTHfmjwizMNlNE6dsGmoAM4lHjL0CyiobWaFiXWSlD7cIxshW422Nb8KbXCmR6z+0ZEPY+daXJrDyh/vuwTyg==}
+
+  svgo@2.8.0:
+    resolution: {integrity: sha512-+N/Q9kV1+F+UeWYoSiULYo4xYSDQlTgb+ayMobAXPwMnLvop7oxKMo9OzIrX5x3eS4L4f2UHhc9axXwY8DpChg==}
+    engines: {node: '>=10.13.0'}
+    hasBin: true
+
+  svgo@3.3.2:
+    resolution: {integrity: sha512-OoohrmuUlBs8B8o6MB2Aevn+pRIH9zDALSR+6hhqVfa6fRwG/Qw9VUMSMW9VNg2CFc/MTIfabtdOVl9ODIJjpw==}
+    engines: {node: '>=14.0.0'}
+    hasBin: true
+
+  tapable@2.2.2:
+    resolution: {integrity: sha512-Re10+NauLTMCudc7T5WLFLAwDhQ0JWdrMK+9B2M8zR5hRExKmsRDCBA7/aV/pNJFltmBFO5BAMlQFi/vq3nKOg==}
+    engines: {node: '>=6'}
+
+  tar-fs@2.1.3:
+    resolution: {integrity: sha512-090nwYJDmlhwFwEW3QQl+vaNnxsO2yVsd45eTKRBzSzu+hlb1w2K9inVq5b0ngXuLVqQ4ApvsUHHnu/zQNkWAg==}
+
+  tar-fs@3.1.0:
+    resolution: {integrity: sha512-5Mty5y/sOF1YWj1J6GiBodjlDc05CUR8PKXrsnFAiSG0xA+GHeWLovaZPYUDXkH/1iKRf2+M5+OrRgzC7O9b7w==}
+
+  tar-stream@2.2.0:
+    resolution: {integrity: sha512-ujeqbceABgwMZxEJnk2HDY2DlnUZ+9oEcb1KzTVfYHio0UE6dG71n60d8D2I4qNvleWrrXpmjpt7vZeF1LnMZQ==}
+    engines: {node: '>=6'}
+
+  tar-stream@3.1.7:
+    resolution: {integrity: sha512-qJj60CXt7IU1Ffyc3NJMjh6EkuCFej46zUqJ4J7pqYlThyd9bO0XBTmcOIhSzZJVWfsLks0+nle/j538YAW9RQ==}
+
+  tar@2.2.2:
+    resolution: {integrity: sha512-FCEhQ/4rE1zYv9rYXJw/msRqsnmlje5jHP6huWeBZ704jUTy02c5AZyWujpMR1ax6mVw9NyJMfuK2CMDWVIfgA==}
+    deprecated: This version of tar is no longer supported, and will not receive security updates. Please upgrade asap.
+
+  tar@6.2.1:
+    resolution: {integrity: sha512-DZ4yORTwrbTj/7MZYq2w+/ZFdI6OZ/f9SFHR+71gIVUZhOQPHzVCLpvRnPgyaMpfWxxk/4ONva3GQSyNIKRv6A==}
+    engines: {node: '>=10'}
+
+  tas-client-umd@0.2.0:
+    resolution: {integrity: sha512-oezN7mJVm5qZDVEby7OzxCLKUpUN5of0rY4dvOWaDF2JZBlGpd3BXceFN8B53qlTaIkVSzP65aAMT0Vc+/N25Q==}
+
+  teex@1.0.1:
+    resolution: {integrity: sha512-eYE6iEI62Ni1H8oIa7KlDU6uQBtqr4Eajni3wX7rpfXD8ysFx8z0+dri+KWEPWpBsxXfxu58x/0jvTVT1ekOSg==}
+
+  temp@0.8.4:
+    resolution: {integrity: sha512-s0ZZzd0BzYv5tLSptZooSjK8oj6C+c19p7Vqta9+6NPOf7r+fxq0cJe6/oN4LTC79sy5NY8ucOJNgwsKCSbfqg==}
+    engines: {node: '>=6.0.0'}
+
+  terser-webpack-plugin@5.3.14:
+    resolution: {integrity: sha512-vkZjpUjb6OMS7dhV+tILUW6BhpDR7P2L/aQSAv+Uwk+m8KATX9EccViHTJR2qDtACKPIYndLGCyl3FMo+r2LMw==}
+    engines: {node: '>= 10.13.0'}
+    peerDependencies:
+      '@swc/core': '*'
+      esbuild: '*'
+      uglify-js: '*'
+      webpack: ^5.1.0
+    peerDependenciesMeta:
+      '@swc/core':
+        optional: true
+      esbuild:
+        optional: true
+      uglify-js:
+        optional: true
+
+  terser@5.43.1:
+    resolution: {integrity: sha512-+6erLbBm0+LROX2sPXlUYx/ux5PyE9K/a92Wrt6oA+WDAoFTdpHE5tCYCI5PNzq2y8df4rA+QgHLJuR4jNymsg==}
+    engines: {node: '>=10'}
+    hasBin: true
+
+  test-exclude@6.0.0:
+    resolution: {integrity: sha512-cAGWPIyOHU6zlmg88jwm7VRyXnMN7iV68OGAbYDk/Mh/xC/pzVPlQtY6ngoIH/5/tciuhGfvESU8GrHrcxD56w==}
+    engines: {node: '>=8'}
+
+  text-decoder@1.2.3:
+    resolution: {integrity: sha512-3/o9z3X0X0fTupwsYvR03pJ/DjWuqqrfwBgTQzdWDiQSm9KitAyz/9WqsT2JQW7KV2m+bC2ol/zqpW37NHxLaA==}
+
+  textextensions@1.0.2:
+    resolution: {integrity: sha512-jm9KjEWiDmtGLBrTqXEduGzlYTTlPaoDKdq5YRQhD0rYjo61ZNTYKZ/x5J4ajPSBH9wIYY5qm9GNG5otIKjtOA==}
+
+  thenify-all@1.6.0:
+    resolution: {integrity: sha512-RNxQH/qI8/t3thXJDwcstUO4zeqo64+Uy/+sNVRBx4Xn2OX+OZ9oP+iJnNFqplFra2ZUVeKCSa2oVWi3T4uVmA==}
+    engines: {node: '>=0.8'}
+
+  thenify@3.3.1:
+    resolution: {integrity: sha512-RVZSIV5IG10Hk3enotrhvz0T9em6cyHBLkH/YAZuKqd8hRkKhSfCGIcP2KUY0EPxndzANBmNllzWPwak+bheSw==}
+
+  through2-filter@3.0.0:
+    resolution: {integrity: sha512-jaRjI2WxN3W1V8/FMZ9HKIBXixtiqs3SQSX4/YGIiP3gL6djW48VoZq9tDqeCWs3MT8YY5wb/zli8VW8snY1CA==}
+
+  through2@0.4.2:
+    resolution: {integrity: sha512-45Llu+EwHKtAZYTPPVn3XZHBgakWMN3rokhEv5hu596XP+cNgplMg+Gj+1nmAvj+L0K7+N49zBKx5rah5u0QIQ==}
+
+  through2@2.0.3:
+    resolution: {integrity: sha512-tmNYYHFqXmaKSSlOU4ZbQ82cxmFQa5LRWKFtWCNkGIiZ3/VHmOffCeWfBRZZRyXAhNP9itVMR+cuvomBOPlm8g==}
+
+  through2@2.0.5:
+    resolution: {integrity: sha512-/mrRod8xqpA+IHSLyGCQ2s8SPHiCDEeQJSep1jqLYeEUClOFG2Qsh+4FU6G9VeqpZnGW/Su8LQGc4YKni5rYSQ==}
+
+  through2@3.0.2:
+    resolution: {integrity: sha512-enaDQ4MUyP2W6ZyT6EsMzqBPZaM/avg8iuo+l2d3QCs0J+6RaqkHV/2/lOwDTueBHeJ/2LG9lrLW3d5rWPucuQ==}
+
+  through2@4.0.2:
+    resolution: {integrity: sha512-iOqSav00cVxEEICeD7TjLB1sueEL+81Wpzp2bY17uZjZN0pWZPuo4suZ/61VujxmqSGFfgOcNuTZ85QJwNZQpw==}
+
+  through@2.3.8:
+    resolution: {integrity: sha512-w89qg7PI8wAdvX60bMDP+bFoD5Dvhm9oLheFp5O4a2QF0cSBGsBX4qZmadPMvVqlLJBBci+WqGGOAPvcDeNSVg==}
+
+  time-stamp@1.1.0:
+    resolution: {integrity: sha512-gLCeArryy2yNTRzTGKbZbloctj64jkZ57hj5zdraXue6aFgd6PmvVtEyiUU+hvU0v7q08oVv8r8ev0tRo6bvgw==}
+    engines: {node: '>=0.10.0'}
+
+  timers-ext@0.1.8:
+    resolution: {integrity: sha512-wFH7+SEAcKfJpfLPkrgMPvvwnEtj8W4IurvEyrKsDleXnKLCDw71w8jltvfLa8Rm4qQxxT4jmDBYbJG/z7qoww==}
+    engines: {node: '>=0.12'}
+
+  tiny-inflate@1.0.3:
+    resolution: {integrity: sha512-pkY1fj1cKHb2seWDy0B16HeWyczlJA9/WW3u3c4z/NiWDsO3DOU5D7nhTLE9CF0yXv/QZFY7sEJmj24dK+Rrqw==}
+
+  tinyexec@0.3.2:
+    resolution: {integrity: sha512-KQQR9yN7R5+OSwaK0XQoj22pwHoTlgYqmUscPYoknOoWCWfj/5/ABTMRi69FrKU5ffPVh5QcFikpWJI/P1ocHA==}
+
+  tinyglobby@0.2.14:
+    resolution: {integrity: sha512-tX5e7OM1HnYr2+a2C/4V0htOcSQcoSTH9KgJnVvNm5zm/cyEWKJ7j7YutsH9CxMdtOkkLFy2AHrMci9IM8IPZQ==}
+    engines: {node: '>=12.0.0'}
+
+  to-absolute-glob@2.0.2:
+    resolution: {integrity: sha512-rtwLUQEwT8ZeKQbyFJyomBRYXyE16U5VKuy0ftxLMK/PZb2fkOsg5r9kHdauuVDbsNdIBoC/HCthpidamQFXYA==}
+    engines: {node: '>=0.10.0'}
+
+  to-object-path@0.3.0:
+    resolution: {integrity: sha512-9mWHdnGRuh3onocaHzukyvCZhzvr6tiflAy/JRFXcJX0TjgfWA9pk9t8CMbzmBE4Jfw58pXbkngtBtqYxzNEyg==}
+    engines: {node: '>=0.10.0'}
+
+  to-regex-range@2.1.1:
+    resolution: {integrity: sha512-ZZWNfCjUokXXDGXFpZehJIkZqq91BcULFq/Pi7M5i4JnxXdhMKAK682z8bCW3o8Hj1wuuzoKcW3DfVzaP6VuNg==}
+    engines: {node: '>=0.10.0'}
+
+  to-regex-range@5.0.1:
+    resolution: {integrity: sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==}
+    engines: {node: '>=8.0'}
+
+  to-regex@3.0.2:
+    resolution: {integrity: sha512-FWtleNAtZ/Ki2qtqej2CXTOayOH9bHDQF+Q48VpWyDXjbYxA4Yz8iDB31zXOBUlOHHKidDbqGVrTUvQMPmBGBw==}
+    engines: {node: '>=0.10.0'}
+
+  to-through@2.0.0:
+    resolution: {integrity: sha512-+QIz37Ly7acM4EMdw2PRN389OneM5+d844tirkGp4dPKzI5OE72V9OsbFp+CIYJDahZ41ZV05hNtcPAQUAm9/Q==}
+    engines: {node: '>= 0.10'}
+
+  toidentifier@1.0.1:
+    resolution: {integrity: sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==}
+    engines: {node: '>=0.6'}
+
+  tr46@0.0.3:
+    resolution: {integrity: sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw==}
+
+  tr46@1.0.1:
+    resolution: {integrity: sha512-dTpowEjclQ7Kgx5SdBkqRzVhERQXov8/l9Ft9dVM9fmg0W0KQSVaXX9T4i6twCPNtYiZM53lpSSUAwJbFPOHxA==}
+
+  tree-kill@1.2.2:
+    resolution: {integrity: sha512-L0Orpi8qGpRG//Nd+H90vFB+3iHnue1zSSGmNOOCh1GLJ7rUKVwV2HvijphGQS2UmhUZewS9VgvxYIdgr+fG1A==}
+    hasBin: true
+
+  ts-interface-checker@0.1.13:
+    resolution: {integrity: sha512-Y/arvbn+rrz3JCKl9C4kVNfTfSm2/mEp5FSz5EsZSANGPSlQrpRI5M4PKF+mJnE52jOO90PnPSc3Ur3bTQw0gA==}
+
+  ts-loader@9.5.2:
+    resolution: {integrity: sha512-Qo4piXvOTWcMGIgRiuFa6nHNm+54HbYaZCKqc9eeZCLRy3XqafQgwX2F7mofrbJG3g7EEb+lkiR+z2Lic2s3Zw==}
+    engines: {node: '>=12.0.0'}
+    peerDependencies:
+      typescript: '*'
+      webpack: ^5.0.0
+
+  ts-morph@25.0.1:
+    resolution: {integrity: sha512-QJEiTdnz1YjrB3JFhd626gX4rKHDLSjSVMvGGG4v7ONc3RBwa0Eei98G9AT9uNFDMtV54JyuXsFeC+OH0n6bXQ==}
+
+  ts-node@10.9.2:
+    resolution: {integrity: sha512-f0FFpIdcHgn8zcPSbf1dRevwt047YMnaiJM3u2w2RewrB+fob/zePZcrOyQoLMMO7aBIddLcQIEK5dYjkLnGrQ==}
+    hasBin: true
+    peerDependencies:
+      '@swc/core': '>=1.2.50'
+      '@swc/wasm': '>=1.2.50'
+      '@types/node': '*'
+      typescript: '>=2.7'
+    peerDependenciesMeta:
+      '@swc/core':
+        optional: true
+      '@swc/wasm':
+        optional: true
+
+  tslib@2.8.1:
+    resolution: {integrity: sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==}
+
+  tsscmp@1.0.6:
+    resolution: {integrity: sha512-LxhtAkPDTkVCMQjt2h6eBVY28KCjikZqZfMcC15YBeNjkgUpdCfBu5HoiOTDu86v6smE8yOjyEktJ8hlbANHQA==}
+    engines: {node: '>=0.6.x'}
+
+  tsup@8.5.0:
+    resolution: {integrity: sha512-VmBp77lWNQq6PfuMqCHD3xWl22vEoWsKajkF8t+yMBawlUS8JzEI+vOVMeuNZIuMML8qXRizFKi9oD5glKQVcQ==}
+    engines: {node: '>=18'}
+    hasBin: true
+    peerDependencies:
+      '@microsoft/api-extractor': ^7.36.0
+      '@swc/core': ^1
+      postcss: ^8.4.12
+      typescript: '>=4.5.0'
+    peerDependenciesMeta:
+      '@microsoft/api-extractor':
+        optional: true
+      '@swc/core':
+        optional: true
+      postcss:
+        optional: true
+      typescript:
+        optional: true
+
+  tunnel-agent@0.6.0:
+    resolution: {integrity: sha512-McnNiV1l8RYeY8tBgEpuodCC1mLUdbSN+CYBL7kJsJNInOP8UjDDEwdk6Mw60vdLLrr5NHKZhMAOSrR2NZuQ+w==}
+
+  type-detect@4.0.8:
+    resolution: {integrity: sha512-0fr/mIH1dlO+x7TlcMy+bIDqKPsw/70tVyeHW787goQjhmqaZe10uwLujubK9q9Lg6Fiho1KUKDYz0Z7k7g5/g==}
+    engines: {node: '>=4'}
+
+  type-detect@4.1.0:
+    resolution: {integrity: sha512-Acylog8/luQ8L7il+geoSxhEkazvkslg7PSNKOX59mbB9cOveP5aq9h74Y7YU8yDpJwetzQQrfIwtf4Wp4LKcw==}
+    engines: {node: '>=4'}
+
+  type-fest@0.13.1:
+    resolution: {integrity: sha512-34R7HTnG0XIJcBSn5XhDd7nNFPRcXYRZrBB2O2jdKqYODldSzBAqzsWoZYYvduky73toYS/ESqxPvkDf/F0XMg==}
+    engines: {node: '>=10'}
+
+  type-fest@4.41.0:
+    resolution: {integrity: sha512-TeTSQ6H5YHvpqVwBRcnLDCBnDOHWYu7IvGbHT6N8AOymcr9PJGjc1GTtiWZTYg0NCgYwvnYWEkVChQAr9bjfwA==}
+    engines: {node: '>=16'}
+
+  type-is@1.6.18:
+    resolution: {integrity: sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==}
+    engines: {node: '>= 0.6'}
+
+  type@2.7.3:
+    resolution: {integrity: sha512-8j+1QmAbPvLZow5Qpi6NCaN8FB60p/6x8/vfNqOk/hC+HuvFZhL4+WfekuhQLiqFZXOgQdrs3B+XxEmCc6b3FQ==}
+
+  typed-array-buffer@1.0.3:
+    resolution: {integrity: sha512-nAYYwfY3qnzX30IkA6AQZjVbtK6duGontcQm1WSG1MD94YLqK0515GNApXkoxKOWMusVssAHWLh9SeaoefYFGw==}
+    engines: {node: '>= 0.4'}
+
+  typed-array-byte-length@1.0.3:
+    resolution: {integrity: sha512-BaXgOuIxz8n8pIq3e7Atg/7s+DpiYrxn4vdot3w9KbnBhcRQq6o3xemQdIfynqSeXeDrF32x+WvfzmOjPiY9lg==}
+    engines: {node: '>= 0.4'}
+
+  typed-array-byte-offset@1.0.4:
+    resolution: {integrity: sha512-bTlAFB/FBYMcuX81gbL4OcpH5PmlFHqlCCpAl8AlEzMz5k53oNDvN8p1PNOWLEmI2x4orp3raOFB51tv9X+MFQ==}
+    engines: {node: '>= 0.4'}
+
+  typed-array-length@1.0.7:
+    resolution: {integrity: sha512-3KS2b+kL7fsuk/eJZ7EQdnEmQoaho/r6KUef7hxvltNA5DR8NAUM+8wJMbJyZ4G9/7i3v5zPBIMN5aybAh2/Jg==}
+    engines: {node: '>= 0.4'}
+
+  typedarray@0.0.6:
+    resolution: {integrity: sha512-/aCDEGatGvZ2BIk+HmLf4ifCJFwvKFNb9/JeZPMulfgFracn9QFcAf5GO8B/mweUjSoblS5In0cWhqpfs/5PQA==}
+
+  typescript@4.9.5:
+    resolution: {integrity: sha512-1FXk9E2Hm+QzZQ7z+McJiHL4NW1F2EzMu9Nq9i3zAaGqibafqYwCVU6WyWAuyQRRzOlxou8xZSyXLEN8oKj24g==}
+    engines: {node: '>=4.2.0'}
+    hasBin: true
+
+  typical@7.3.0:
+    resolution: {integrity: sha512-ya4mg/30vm+DOWfBg4YK3j2WD6TWtRkCbasOJr40CseYENzCUby/7rIvXA99JGsQHeNxLbnXdyLLxKSv3tauFw==}
+    engines: {node: '>=12.17'}
+
+  uc.micro@2.1.0:
+    resolution: {integrity: sha512-ARDJmphmdvUk6Glw7y9DQ2bFkKBHwQHLi2lsaH6PPmz/Ka9sFOBsBluozhDltWmnv9u/cF6Rt87znRTPV+yp/A==}
+
+  ufo@1.6.1:
+    resolution: {integrity: sha512-9a4/uxlTWJ4+a5i0ooc1rU7C7YOw3wT+UGqdeNNHWnOF9qcMBgLRS+4IYUqbczewFx4mLEig6gawh7X6mFlEkA==}
+
+  unbox-primitive@1.1.0:
+    resolution: {integrity: sha512-nWJ91DjeOkej/TA8pXQ3myruKpKEYgqvpw9lz4OPHj/NWFNluYrjbz9j01CJ8yKQd2g4jFoOkINCTW2I5LEEyw==}
+    engines: {node: '>= 0.4'}
+
+  unc-path-regex@0.1.2:
+    resolution: {integrity: sha512-eXL4nmJT7oCpkZsHZUOJo8hcX3GbsiDOa0Qu9F646fi8dT3XuSVopVqAcEiVzSKKH7UoDti23wNX3qGFxcW5Qg==}
+    engines: {node: '>=0.10.0'}
+
+  undertaker-registry@1.0.1:
+    resolution: {integrity: sha512-UR1khWeAjugW3548EfQmL9Z7pGMlBgXteQpr1IZeZBtnkCJQJIJ1Scj0mb9wQaPvUZ9Q17XqW6TIaPchJkyfqw==}
+    engines: {node: '>= 0.10'}
+
+  undertaker@1.3.0:
+    resolution: {integrity: sha512-/RXwi5m/Mu3H6IHQGww3GNt1PNXlbeCuclF2QYR14L/2CHPz3DFZkvB5hZ0N/QUkiXWCACML2jXViIQEQc2MLg==}
+    engines: {node: '>= 0.10'}
+
+  undici-types@6.21.0:
+    resolution: {integrity: sha512-iwDZqg0QAGrg9Rav5H4n0M64c3mkR59cJ6wQp+7C4nI0gsmExaedaYLNO44eT4AtBBwjbTiGPMlt2Md0T9H9JQ==}
+
+  undici@7.12.0:
+    resolution: {integrity: sha512-GrKEsc3ughskmGA9jevVlIOPMiiAHJ4OFUtaAH+NhfTUSiZ1wMPIQqQvAJUrJspFXJt3EBWgpAeoHEDVT1IBug==}
+    engines: {node: '>=20.18.1'}
+
+  union-value@1.0.1:
+    resolution: {integrity: sha512-tJfXmxMeWYnczCVs7XAEvIV7ieppALdyepWMkHkwciRpZraG/xwT+s2JN8+pr1+8jCRf80FFzvr+MpQeeoF4Xg==}
+    engines: {node: '>=0.10.0'}
+
+  unique-stream@2.3.1:
+    resolution: {integrity: sha512-2nY4TnBE70yoxHkDli7DMazpWiP7xMdCYqU2nBRO0UB+ZpEkGsSija7MvmvnZFUeC+mrgiUfcHSr3LmRFIg4+A==}
+
+  universal-user-agent@7.0.3:
+    resolution: {integrity: sha512-TmnEAEAsBJVZM/AADELsK76llnwcf9vMKuPz8JflO1frO8Lchitr0fNaN9d+Ap0BjKtqWqd/J17qeDnXh8CL2A==}
+
+  universalify@0.1.2:
+    resolution: {integrity: sha512-rBJeI5CXAlmy1pV+617WB9J63U6XcazHHF2f2dbJix4XzpUF0RS3Zbj0FGIOCAva5P/d/GBOYaACQ1w+0azUkg==}
+    engines: {node: '>= 4.0.0'}
+
+  universalify@2.0.1:
+    resolution: {integrity: sha512-gptHNQghINnc/vTGIk0SOFGFNXw7JVrlRUtConJRlvaw6DuX0wO5Jeko9sWrMBhh+PsYAZ7oXAiOnf/UKogyiw==}
+    engines: {node: '>= 10.0.0'}
+
+  unset-value@1.0.0:
+    resolution: {integrity: sha512-PcA2tsuGSF9cnySLHTLSh2qrQiJ70mn+r+Glzxv2TWZblxsxCC52BDlZoPCsz7STd9pN7EZetkWZBAvk4cgZdQ==}
+    engines: {node: '>=0.10.0'}
+
+  upath@1.2.0:
+    resolution: {integrity: sha512-aZwGpamFO61g3OlfT7OQCHqhGnW43ieH9WZeP7QxN/G/jS4jfqUkZxoryvJgVPEcrl5NL/ggHsSmLMHuH64Lhg==}
+    engines: {node: '>=4'}
+
+  update-browserslist-db@1.1.3:
+    resolution: {integrity: sha512-UxhIZQ+QInVdunkDAaiazvvT/+fXL5Osr0JZlJulepYu6Jd7qJtDZjlur0emRlT71EN3ScPoE7gvsuIKKNavKw==}
+    hasBin: true
+    peerDependencies:
+      browserslist: '>= 4.21.0'
+
+  uri-js@4.4.1:
+    resolution: {integrity: sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==}
+
+  urix@0.1.0:
+    resolution: {integrity: sha512-Am1ousAhSLBeB9cG/7k7r2R0zj50uDRlZHPGbazid5s9rlF1F/QKYObEKSIunSjIOkJZqwRRLpvewjEkM7pSqg==}
+    deprecated: Please see https://github.com/lydell/urix#deprecated
+
+  use@3.1.1:
+    resolution: {integrity: sha512-cwESVXlO3url9YWlFW/TA9cshCEhtu7IKJ/p5soJ/gGpj7vbvFrAY/eIioQ6Dw23KjZhYgiIo8HOs1nQ2vr/oQ==}
+    engines: {node: '>=0.10.0'}
+
+  util-deprecate@1.0.2:
+    resolution: {integrity: sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==}
+
+  util@0.12.5:
+    resolution: {integrity: sha512-kZf/K6hEIrWHI6XqOFUiiMa+79wE/D8Q+NCNAWclkyg3b4d2k7s0QGepNjiABc+aR3N1PAyHL7p6UcLY6LmrnA==}
+
+  uuid@9.0.1:
+    resolution: {integrity: sha512-b+1eJOlsR9K8HJpow9Ok3fiWOWSIcIzXodvv0rQjVoOVNpWMpxf1wZNpt4y9h10odCNrqnYp1OBzRktckBe3sA==}
+    hasBin: true
+
+  v8-compile-cache-lib@3.0.1:
+    resolution: {integrity: sha512-wa7YjyUGfNZngI/vtK0UHAN+lgDCxBPCylVXGp0zu59Fz5aiGtNXaq3DhIov063MorB+VfufLh3JlF2KdTK3xg==}
+
+  v8-inspect-profiler@0.1.1:
+    resolution: {integrity: sha512-GB3X9w7w+y9v4gq85olmf/bM3F2hj2DjjwvVpDXIziW5JBy8cDcIQ/K7m8xJVDWiFemxRX2Dxoo1k6JDvLMTig==}
+
+  v8-to-istanbul@9.3.0:
+    resolution: {integrity: sha512-kiGUalWN+rgBJ/1OHZsBtU4rXZOfj/7rKQxULKlIzwzQSvMJUUNgPwJEEh7gU6xEVxC0ahoOBvN2YI8GH6FNgA==}
+    engines: {node: '>=10.12.0'}
+
+  v8flags@3.2.0:
+    resolution: {integrity: sha512-mH8etigqMfiGWdeXpaaqGfs6BndypxusHHcv2qSHyZkGEznCd/qAXCWWRzeowtL54147cktFOC4P5y+kl8d8Jg==}
+    engines: {node: '>= 0.10'}
+
+  validate-npm-package-license@3.0.4:
+    resolution: {integrity: sha512-DpKm2Ui/xN7/HQKCtpZxoRWBhZ9Z0kqtygG8XCgNQ8ZlDnxuQmWhj566j8fN4Cu3/JmbhsDo7fcAJq4s9h27Ew==}
+
+  value-or-function@3.0.0:
+    resolution: {integrity: sha512-jdBB2FrWvQC/pnPtIqcLsMaQgjhdb6B7tk1MMyTKapox+tQZbdRP4uLxu/JY0t7fbfDCUMnuelzEYv5GsxHhdg==}
+    engines: {node: '>= 0.10'}
+
+  vary@1.1.2:
+    resolution: {integrity: sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==}
+    engines: {node: '>= 0.8'}
+
+  vinyl-fs@3.0.3:
+    resolution: {integrity: sha512-vIu34EkyNyJxmP0jscNzWBSygh7VWhqun6RmqVfXePrOwi9lhvRs//dOaGOTRUQr4tx7/zd26Tk5WeSVZitgng==}
+    engines: {node: '>= 0.10'}
+
+  vinyl-sourcemap@1.1.0:
+    resolution: {integrity: sha512-NiibMgt6VJGJmyw7vtzhctDcfKch4e4n9TBeoWlirb7FMg9/1Ov9k+A5ZRAtywBpRPiyECvQRQllYM8dECegVA==}
+    engines: {node: '>= 0.10'}
+
+  vinyl@1.2.0:
+    resolution: {integrity: sha512-Ci3wnR2uuSAWFMSglZuB8Z2apBdtOyz8CV7dC6/U1XbltXBC+IuutUkXQISz01P+US2ouBuesSbV6zILZ6BuzQ==}
+    engines: {node: '>= 0.9'}
+
+  vinyl@2.0.2:
+    resolution: {integrity: sha512-ViPXqulxjb1yXxaf/kQZfLHkd2ppnVBWPq4XmvW377vcBTxHFtHR5NRfYsdXsiKpWndKRoCdn11DfEnoCz1Inw==}
+    engines: {node: '>= 0.10'}
+
+  vinyl@2.2.1:
+    resolution: {integrity: sha512-LII3bXRFBZLlezoG5FfZVcXflZgWP/4dCwKtxd5ky9+LOtM4CS3bIRQsmR1KMnMW07jpE8fqR2lcxPZ+8sJIcw==}
+    engines: {node: '>= 0.10'}
+
+  vinyl@3.0.1:
+    resolution: {integrity: sha512-0QwqXteBNXgnLCdWdvPQBX6FXRHtIH3VhJPTd5Lwn28tJXc34YqSCWUmkOvtJHBmB3gGoPtrOKk3Ts8/kEZ9aA==}
+    engines: {node: '>=10.13.0'}
+
+  vscode-oniguruma@1.7.0:
+    resolution: {integrity: sha512-L9WMGRfrjOhgHSdOYgCt/yRMsXzLDJSL7BPrOZt73gU0iWO4mpqzqQzOz5srxqTvMBaR0XZTSrVWo4j55Rc6cA==}
+
+  vscode-regexpp@3.1.0:
+    resolution: {integrity: sha512-pqtN65VC1jRLawfluX4Y80MMG0DHJydWhe5ZwMHewZD6sys4LbU6lHwFAHxeuaVE6Y6+xZOtAw+9hvq7/0ejkg==}
+    engines: {node: '>=8'}
+
+  vscode-textmate@9.2.0:
+    resolution: {integrity: sha512-rkvG4SraZQaPSN/5XjwKswdU0OP9MF28QjrYzUBbhb8QyG3ljB1Ky996m++jiI7KdiAP2CkBiQZd9pqEDTClqA==}
+
+  vscode-uri@3.1.0:
+    resolution: {integrity: sha512-/BpdSx+yCQGnCvecbyXdxHDkuk55/G3xwnC0GqY4gmQ3j+A+g8kzzgB4Nk/SINjqn6+waqw3EgbVF2QKExkRxQ==}
+
+  watchpack@2.4.4:
+    resolution: {integrity: sha512-c5EGNOiyxxV5qmTtAB7rbiXxi1ooX1pQKMLX/MIabJjRA0SJBQOjKF+KSVfHkr9U1cADPon0mRiVe/riyaiDUA==}
+    engines: {node: '>=10.13.0'}
+
+  web-tree-sitter@0.20.8:
+    resolution: {integrity: sha512-weOVgZ3aAARgdnb220GqYuh7+rZU0Ka9k9yfKtGAzEYMa6GgiCzW9JjQRJyCJakvibQW+dfjJdihjInKuuCAUQ==}
+
+  webidl-conversions@3.0.1:
+    resolution: {integrity: sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ==}
+
+  webidl-conversions@4.0.2:
+    resolution: {integrity: sha512-YQ+BmxuTgd6UXZW3+ICGfyqRyHXVlD5GtQr5+qjiNW7bF0cqrzX500HVXPBOvgXb5YnzDd+h0zqyv61KUD7+Sg==}
+
+  webpack-cli@5.1.4:
+    resolution: {integrity: sha512-pIDJHIEI9LR0yxHXQ+Qh95k2EvXpWzZ5l+d+jIo+RdSm9MiHfzazIxwwni/p7+x4eJZuvG1AJwgC4TNQ7NRgsg==}
+    engines: {node: '>=14.15.0'}
+    hasBin: true
+    peerDependencies:
+      '@webpack-cli/generators': '*'
+      webpack: 5.x.x
+      webpack-bundle-analyzer: '*'
+      webpack-dev-server: '*'
+    peerDependenciesMeta:
+      '@webpack-cli/generators':
+        optional: true
+      webpack-bundle-analyzer:
+        optional: true
+      webpack-dev-server:
+        optional: true
+
+  webpack-merge@5.10.0:
+    resolution: {integrity: sha512-+4zXKdx7UnO+1jaN4l2lHVD+mFvnlZQP/6ljaJVb4SZiwIKeUnrT5l0gkT8z+n4hKpC+jpOv6O9R+gLtag7pSA==}
+    engines: {node: '>=10.0.0'}
+
+  webpack-sources@3.3.3:
+    resolution: {integrity: sha512-yd1RBzSGanHkitROoPFd6qsrxt+oFhg/129YzheDGqeustzX0vTZJZsSsQjVQC4yzBQ56K55XU8gaNCtIzOnTg==}
+    engines: {node: '>=10.13.0'}
+
+  webpack-stream@7.0.0:
+    resolution: {integrity: sha512-XoAQTHyCaYMo6TS7Atv1HYhtmBgKiVLONJbzLBl2V3eibXQ2IT/MCRM841RW/r3vToKD5ivrTJFWgd/ghoxoRg==}
+    engines: {node: '>= 10.0.0'}
+    peerDependencies:
+      webpack: ^5.21.2
+
+  webpack@5.100.2:
+    resolution: {integrity: sha512-QaNKAvGCDRh3wW1dsDjeMdDXwZm2vqq3zn6Pvq4rHOEOGSaUMgOOjG2Y9ZbIGzpfkJk9ZYTHpDqgDfeBDcnLaw==}
+    engines: {node: '>=10.13.0'}
+    hasBin: true
+    peerDependencies:
+      webpack-cli: '*'
+    peerDependenciesMeta:
+      webpack-cli:
+        optional: true
+
+  whatwg-url@5.0.0:
+    resolution: {integrity: sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==}
+
+  whatwg-url@7.1.0:
+    resolution: {integrity: sha512-WUu7Rg1DroM7oQvGWfOiAK21n74Gg+T4elXEQYkOhtyLeWiJFoOGLXPKI/9gzIie9CtwVLm8wtw6YJdKyxSjeg==}
+
+  which-boxed-primitive@1.1.1:
+    resolution: {integrity: sha512-TbX3mj8n0odCBFVlY8AxkqcHASw3L60jIuF8jFP78az3C2YhmGvqbHBpAjTRH2/xqYunrJ9g1jSyjCjpoWzIAA==}
+    engines: {node: '>= 0.4'}
+
+  which-builtin-type@1.2.1:
+    resolution: {integrity: sha512-6iBczoX+kDQ7a3+YJBnh3T+KZRxM/iYNPXicqk66/Qfm1b93iu+yOImkg0zHbj5LNOcNv1TEADiZ0xa34B4q6Q==}
+    engines: {node: '>= 0.4'}
+
+  which-collection@1.0.2:
+    resolution: {integrity: sha512-K4jVyjnBdgvc86Y6BkaLZEN933SwYOuBFkdmBu9ZfkcAbdVbpITnDmjvZ/aQjRXQrv5EPkTnD1s39GiiqbngCw==}
+    engines: {node: '>= 0.4'}
+
+  which-module@1.0.0:
+    resolution: {integrity: sha512-F6+WgncZi/mJDrammbTuHe1q0R5hOXv/mBaiNA2TCNT/LTHusX0V+CJnj9XT8ki5ln2UZyyddDgHfCzyrOH7MQ==}
+
+  which-module@2.0.1:
+    resolution: {integrity: sha512-iBdZ57RDvnOR9AGBhML2vFZf7h8vmBjhoaZqODJBFWHVtKkDmKuHai3cx5PgVMrX5YDNp27AofYbAwctSS+vhQ==}
+
+  which-typed-array@1.1.19:
+    resolution: {integrity: sha512-rEvr90Bck4WZt9HHFC4DJMsjvu7x+r6bImz0/BrbWb7A2djJ8hnZMrWnHo9F8ssv0OMErasDhftrfROTyqSDrw==}
+    engines: {node: '>= 0.4'}
+
+  which@1.3.1:
+    resolution: {integrity: sha512-HxJdYWq1MTIQbJ3nw0cqssHoTNU267KlrDuGZ1WYlxDStUtKUhOaJmh112/TZmHxxUfuJqPXSOm7tDyas0OSIQ==}
+    hasBin: true
+
+  which@2.0.2:
+    resolution: {integrity: sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==}
+    engines: {node: '>= 8'}
+    hasBin: true
+
+  wildcard@2.0.1:
+    resolution: {integrity: sha512-CC1bOL87PIWSBhDcTrdeLo6eGT7mCFtrg0uIJtqJUFyK+eJnzl8A1niH56uu7KMa5XFrtiV+AQuHO3n7DsHnLQ==}
+
+  windows-foreground-love@0.5.0:
+    resolution: {integrity: sha512-yjBwmKEmQBDk3Z7yg/U9hizGWat8C6Pe4MQWl5bN6mvPU81Bt6HV2k/6mGlK3ETJLW1hCLhYx2wcGh+ykUUCyA==}
+
+  workerpool@6.5.1:
+    resolution: {integrity: sha512-Fs4dNYcsdpYSAfVxhnl1L5zTksjvOJxtC5hzMNl+1t9B8hTJTdKDyZ5ju7ztgPy+ft9tBFXoOlDNiOT9WUXZlA==}
+
+  wrap-ansi@2.1.0:
+    resolution: {integrity: sha512-vAaEaDM946gbNpH5pLVNR+vX2ht6n0Bt3GXwVB1AuAqZosOvHNF3P7wDnh8KLkSqgUh0uh77le7Owgoz+Z9XBw==}
+    engines: {node: '>=0.10.0'}
+
+  wrap-ansi@6.2.0:
+    resolution: {integrity: sha512-r6lPcBGxZXlIcymEu7InxDMhdW0KDxpLgoFLcguasxCaJ/SOIZwINatK9KY/tf+ZrlywOKU0UDj3ATXUBfxJXA==}
+    engines: {node: '>=8'}
+
+  wrap-ansi@7.0.0:
+    resolution: {integrity: sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==}
+    engines: {node: '>=10'}
+
+  wrap-ansi@8.1.0:
+    resolution: {integrity: sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==}
+    engines: {node: '>=12'}
+
+  wrappy@1.0.2:
+    resolution: {integrity: sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==}
+
+  ws@7.5.10:
+    resolution: {integrity: sha512-+dbF1tHwZpXcbOJdVOkzLDxZP1ailvSxM6ZweXTegylPny803bFhA+vqBYw4s31NSAk4S2Qz+AKXK9a4wkdjcQ==}
+    engines: {node: '>=8.3.0'}
+    peerDependencies:
+      bufferutil: ^4.0.1
+      utf-8-validate: ^5.0.2
+    peerDependenciesMeta:
+      bufferutil:
+        optional: true
+      utf-8-validate:
+        optional: true
+
+  xml2js@0.5.0:
+    resolution: {integrity: sha512-drPFnkQJik/O+uPKpqSgr22mpuFHqKdbS835iAQrUC73L2F5WkboIRd63ai/2Yg6I1jzifPFKH2NTK+cfglkIA==}
+    engines: {node: '>=4.0.0'}
+
+  xml@1.0.1:
+    resolution: {integrity: sha512-huCv9IH9Tcf95zuYCsQraZtWnJvBtLVE0QHMOs8bWyZAFZNDcYjsPq1nEx8jKA9y+Beo9v+7OBPRisQTjinQMw==}
+
+  xmlbuilder@11.0.1:
+    resolution: {integrity: sha512-fDlsI/kFEx7gLvbecc0/ohLG50fugQp8ryHzMTuW9vSa1GJ0XYWKnhsUx7oie3G98+r56aTQIUB4kht42R3JvA==}
+    engines: {node: '>=4.0'}
+
+  xmlbuilder@15.1.1:
+    resolution: {integrity: sha512-yMqGBqtXyeN1e3TGYvgNgDVZ3j84W4cwkOXQswghol6APgZWaff9lnbvN7MHYJOiXsvGPXtjTYJEiC9J2wv9Eg==}
+    engines: {node: '>=8.0'}
+
+  xtend@2.1.2:
+    resolution: {integrity: sha512-vMNKzr2rHP9Dp/e1NQFnLQlwlhp9L/LfvnsVdHxN1f+uggyVI3i08uD14GPvCToPkdsRfyPqIyYGmIk58V98ZQ==}
+    engines: {node: '>=0.4'}
+
+  xtend@4.0.2:
+    resolution: {integrity: sha512-LKYU1iAXJXUgAXn9URjiu+MWhyUXHsvfp7mcuYm9dSUKK0/CjtrUwFAxD82/mCWbtLsGjFIad0wIsod4zrTAEQ==}
+    engines: {node: '>=0.4'}
+
+  y18n@3.2.2:
+    resolution: {integrity: sha512-uGZHXkHnhF0XeeAPgnKfPv1bgKAYyVvmNL1xlKsPYZPaIHxGti2hHqvOCQv71XMsLxu1QjergkqogUnms5D3YQ==}
+
+  y18n@4.0.3:
+    resolution: {integrity: sha512-JKhqTOwSrqNA1NY5lSztJ1GrBiUodLMmIZuLiDaMRJ+itFd+ABVE8XBjOvIWL+rSqNDC74LCSFmlb/U4UZ4hJQ==}
+
+  y18n@5.0.8:
+    resolution: {integrity: sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==}
+    engines: {node: '>=10'}
+
+  yallist@3.1.1:
+    resolution: {integrity: sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==}
+
+  yallist@4.0.0:
+    resolution: {integrity: sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==}
+
+  yargs-parser@18.1.3:
+    resolution: {integrity: sha512-o50j0JeToy/4K6OZcaQmW6lyXXKhq7csREXcDwk2omFPJEwUNOVtJKvmDr9EI1fAJZUyZcRF7kxGBWmRXudrCQ==}
+    engines: {node: '>=6'}
+
+  yargs-parser@20.2.9:
+    resolution: {integrity: sha512-y11nGElTIV+CT3Zv9t7VKl+Q3hTQoT9a1Qzezhhl6Rp21gJ/IVTW7Z3y9EWXhuUBC2Shnf+DX0antecpAwSP8w==}
+    engines: {node: '>=10'}
+
+  yargs-parser@21.1.1:
+    resolution: {integrity: sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw==}
+    engines: {node: '>=12'}
+
+  yargs-parser@5.0.1:
+    resolution: {integrity: sha512-wpav5XYiddjXxirPoCTUPbqM0PXvJ9hiBMvuJgInvo4/lAOTZzUprArw17q2O1P2+GHhbBr18/iQwjL5Z9BqfA==}
+
+  yargs-unparser@2.0.0:
+    resolution: {integrity: sha512-7pRTIA9Qc1caZ0bZ6RYRGbHJthJWuakf+WmHK0rVeLkNrrGhfoabBNdue6kdINI6r4if7ocq9aD/n7xwKOdzOA==}
+    engines: {node: '>=10'}
+
+  yargs@15.4.1:
+    resolution: {integrity: sha512-aePbxDmcYW++PaqBsJ+HYUFwCdv4LVvdnhBy78E57PIor8/OVvhMrADFFEDh8DHDFRv/O9i3lPhsENjO7QX0+A==}
+    engines: {node: '>=8'}
+
+  yargs@16.2.0:
+    resolution: {integrity: sha512-D1mvvtDG0L5ft/jGWkLpG1+m0eQxOfaBvTNELraWj22wSVUMWxZUvYgJYcKh6jGGIkJFhH4IZPQhR4TKpc8mBw==}
+    engines: {node: '>=10'}
+
+  yargs@17.7.2:
+    resolution: {integrity: sha512-7dSzzRQ++CKnNI/krKnYRV7JKKPUXMEh61soaHKg9mrWEhzFWhFnxPxGl+69cD1Ou63C13NUPCnmIcrvqCuM6w==}
+    engines: {node: '>=12'}
+
+  yargs@7.1.2:
+    resolution: {integrity: sha512-ZEjj/dQYQy0Zx0lgLMLR8QuaqTihnxirir7EwUHp1Axq4e3+k8jXU5K0VLbNvedv1f4EWtBonDIZm0NUr+jCcA==}
+
+  yaserver@0.4.0:
+    resolution: {integrity: sha512-98Vj4sgqB1fLcpf2wK7h3dFCaabISHU9CXZHaAx3QLkvTTCD31MzMcNbw5V5jZFBK7ffkFqfWig6B20KQt4wtA==}
+    hasBin: true
+
+  yauzl@2.10.0:
+    resolution: {integrity: sha512-p4a9I6X6nu6IhoGmBqAcbJy1mlC4j27vEPZX9F4L4/vZT3Lyq1VkFHw/V/PUcB9Buo+DG3iHkT0x3Qya58zc3g==}
+
+  yauzl@3.2.0:
+    resolution: {integrity: sha512-Ow9nuGZE+qp1u4JIPvg+uCiUr7xGQWdff7JQSk5VGYTAZMDe2q8lxJ10ygv10qmSj031Ty/6FNJpLO4o1Sgc+w==}
+    engines: {node: '>=12'}
+
+  yazl@2.5.1:
+    resolution: {integrity: sha512-phENi2PLiHnHb6QBVot+dJnaAZ0xosj7p3fWl+znIjBDlnMI2PsZCJZ306BPTFOaHf5qdDEI8x5qFrSOBN5vrw==}
+
+  ylru@1.4.0:
+    resolution: {integrity: sha512-2OQsPNEmBCvXuFlIni/a+Rn+R2pHW9INm0BxXJ4hVDA8TirqMj+J/Rp9ItLatT/5pZqWwefVrTQcHpixsxnVlA==}
+    engines: {node: '>= 4.0.0'}
+
+  yn@3.1.1:
+    resolution: {integrity: sha512-Ux4ygGWsu2c7isFWe8Yu1YluJmqVhxqK2cLXNQA5AcC3QfbGNpM7fu0Y8b/z16pXLnFxZYvWhd3fhBY9DLmC6Q==}
+    engines: {node: '>=6'}
+
+  yocto-queue@0.1.0:
+    resolution: {integrity: sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==}
+    engines: {node: '>=10'}
+
+snapshots:
+
+  '@ampproject/remapping@2.3.0':
+    dependencies:
+      '@jridgewell/gen-mapping': 0.3.12
+      '@jridgewell/trace-mapping': 0.3.29
+
+  '@azure-rest/ai-translation-text@1.0.1':
+    dependencies:
+      '@azure-rest/core-client': 2.5.0
+      '@azure/core-auth': 1.10.0
+      '@azure/core-rest-pipeline': 1.22.0
+      '@azure/logger': 1.3.0
+      tslib: 2.8.1
+    transitivePeerDependencies:
+      - supports-color
+
+  '@azure-rest/core-client@2.5.0':
+    dependencies:
+      '@azure/abort-controller': 2.1.2
+      '@azure/core-auth': 1.10.0
+      '@azure/core-rest-pipeline': 1.22.0
+      '@azure/core-tracing': 1.3.0
+      '@typespec/ts-http-runtime': 0.3.0
+      tslib: 2.8.1
+    transitivePeerDependencies:
+      - supports-color
+
+  '@azure/abort-controller@2.1.2':
+    dependencies:
+      tslib: 2.8.1
+
+  '@azure/core-auth@1.10.0':
+    dependencies:
+      '@azure/abort-controller': 2.1.2
+      '@azure/core-util': 1.13.0
+      tslib: 2.8.1
+    transitivePeerDependencies:
+      - supports-color
+
+  '@azure/core-client@1.10.0':
+    dependencies:
+      '@azure/abort-controller': 2.1.2
+      '@azure/core-auth': 1.10.0
+      '@azure/core-rest-pipeline': 1.22.0
+      '@azure/core-tracing': 1.3.0
+      '@azure/core-util': 1.13.0
+      '@azure/logger': 1.3.0
+      tslib: 2.8.1
+    transitivePeerDependencies:
+      - supports-color
+
+  '@azure/core-http-compat@2.3.0':
+    dependencies:
+      '@azure/abort-controller': 2.1.2
+      '@azure/core-client': 1.10.0
+      '@azure/core-rest-pipeline': 1.22.0
+    transitivePeerDependencies:
+      - supports-color
+
+  '@azure/core-lro@2.7.2':
+    dependencies:
+      '@azure/abort-controller': 2.1.2
+      '@azure/core-util': 1.13.0
+      '@azure/logger': 1.3.0
+      tslib: 2.8.1
+    transitivePeerDependencies:
+      - supports-color
+
+  '@azure/core-paging@1.6.2':
+    dependencies:
+      tslib: 2.8.1
+
+  '@azure/core-rest-pipeline@1.22.0':
+    dependencies:
+      '@azure/abort-controller': 2.1.2
+      '@azure/core-auth': 1.10.0
+      '@azure/core-tracing': 1.3.0
+      '@azure/core-util': 1.13.0
+      '@azure/logger': 1.3.0
+      '@typespec/ts-http-runtime': 0.3.0
+      tslib: 2.8.1
+    transitivePeerDependencies:
+      - supports-color
+
+  '@azure/core-tracing@1.3.0':
+    dependencies:
+      tslib: 2.8.1
+
+  '@azure/core-util@1.13.0':
+    dependencies:
+      '@azure/abort-controller': 2.1.2
+      '@typespec/ts-http-runtime': 0.3.0
+      tslib: 2.8.1
+    transitivePeerDependencies:
+      - supports-color
+
+  '@azure/core-xml@1.5.0':
+    dependencies:
+      fast-xml-parser: 5.2.5
+      tslib: 2.8.1
+
+  '@azure/logger@1.3.0':
+    dependencies:
+      '@typespec/ts-http-runtime': 0.3.0
+      tslib: 2.8.1
+    transitivePeerDependencies:
+      - supports-color
+
+  '@azure/storage-blob@12.28.0':
+    dependencies:
+      '@azure/abort-controller': 2.1.2
+      '@azure/core-auth': 1.10.0
+      '@azure/core-client': 1.10.0
+      '@azure/core-http-compat': 2.3.0
+      '@azure/core-lro': 2.7.2
+      '@azure/core-paging': 1.6.2
+      '@azure/core-rest-pipeline': 1.22.0
+      '@azure/core-tracing': 1.3.0
+      '@azure/core-util': 1.13.0
+      '@azure/core-xml': 1.5.0
+      '@azure/logger': 1.3.0
+      '@azure/storage-common': 12.0.0
+      events: 3.3.0
+      tslib: 2.8.1
+    transitivePeerDependencies:
+      - supports-color
+
+  '@azure/storage-common@12.0.0':
+    dependencies:
+      '@azure/abort-controller': 2.1.2
+      '@azure/core-auth': 1.10.0
+      '@azure/core-http-compat': 2.3.0
+      '@azure/core-rest-pipeline': 1.22.0
+      '@azure/core-tracing': 1.3.0
+      '@azure/core-util': 1.13.0
+      '@azure/logger': 1.3.0
+      events: 3.3.0
+      tslib: 2.8.1
+    transitivePeerDependencies:
+      - supports-color
+
+  '@babel/code-frame@7.27.1':
+    dependencies:
+      '@babel/helper-validator-identifier': 7.27.1
+      js-tokens: 4.0.0
+      picocolors: 1.1.1
+
+  '@babel/compat-data@7.28.0': {}
+
+  '@babel/core@7.28.0':
+    dependencies:
+      '@ampproject/remapping': 2.3.0
+      '@babel/code-frame': 7.27.1
+      '@babel/generator': 7.28.0
+      '@babel/helper-compilation-targets': 7.27.2
+      '@babel/helper-module-transforms': 7.27.3(@babel/core@7.28.0)
+      '@babel/helpers': 7.28.2
+      '@babel/parser': 7.28.0
+      '@babel/template': 7.27.2
+      '@babel/traverse': 7.28.0
+      '@babel/types': 7.28.2
+      convert-source-map: 2.0.0
+      debug: 4.4.1(supports-color@8.1.1)
+      gensync: 1.0.0-beta.2
+      json5: 2.2.3
+      semver: 6.3.1
+    transitivePeerDependencies:
+      - supports-color
+
+  '@babel/generator@7.28.0':
+    dependencies:
+      '@babel/parser': 7.28.0
+      '@babel/types': 7.28.2
+      '@jridgewell/gen-mapping': 0.3.12
+      '@jridgewell/trace-mapping': 0.3.29
+      jsesc: 3.1.0
+
+  '@babel/helper-compilation-targets@7.27.2':
+    dependencies:
+      '@babel/compat-data': 7.28.0
+      '@babel/helper-validator-option': 7.27.1
+      browserslist: 4.25.1
+      lru-cache: 5.1.1
+      semver: 6.3.1
+
+  '@babel/helper-globals@7.28.0': {}
+
+  '@babel/helper-module-imports@7.27.1':
+    dependencies:
+      '@babel/traverse': 7.28.0
+      '@babel/types': 7.28.2
+    transitivePeerDependencies:
+      - supports-color
+
+  '@babel/helper-module-transforms@7.27.3(@babel/core@7.28.0)':
+    dependencies:
+      '@babel/core': 7.28.0
+      '@babel/helper-module-imports': 7.27.1
+      '@babel/helper-validator-identifier': 7.27.1
+      '@babel/traverse': 7.28.0
+    transitivePeerDependencies:
+      - supports-color
+
+  '@babel/helper-string-parser@7.27.1': {}
+
+  '@babel/helper-validator-identifier@7.27.1': {}
+
+  '@babel/helper-validator-option@7.27.1': {}
+
+  '@babel/helpers@7.28.2':
+    dependencies:
+      '@babel/template': 7.27.2
+      '@babel/types': 7.28.2
+
+  '@babel/parser@7.28.0':
+    dependencies:
+      '@babel/types': 7.28.2
+
+  '@babel/template@7.27.2':
+    dependencies:
+      '@babel/code-frame': 7.27.1
+      '@babel/parser': 7.28.0
+      '@babel/types': 7.28.2
+
+  '@babel/traverse@7.28.0':
+    dependencies:
+      '@babel/code-frame': 7.27.1
+      '@babel/generator': 7.28.0
+      '@babel/helper-globals': 7.28.0
+      '@babel/parser': 7.28.0
+      '@babel/template': 7.27.2
+      '@babel/types': 7.28.2
+      debug: 4.4.1(supports-color@8.1.1)
+    transitivePeerDependencies:
+      - supports-color
+
+  '@babel/types@7.28.2':
+    dependencies:
+      '@babel/helper-string-parser': 7.27.1
+      '@babel/helper-validator-identifier': 7.27.1
+
+  '@bcoe/v8-coverage@0.2.3': {}
+
+  '@c4312/eventsource-umd@3.0.5':
+    dependencies:
+      eventsource-parser: 3.0.3
+
+  '@cspotcode/source-map-support@0.8.1':
+    dependencies:
+      '@jridgewell/trace-mapping': 0.3.9
+
+  '@csstools/selector-resolve-nested@1.1.0(postcss-selector-parser@6.1.2)':
+    dependencies:
+      postcss-selector-parser: 6.1.2
+
+  '@csstools/selector-specificity@3.1.1(postcss-selector-parser@6.1.2)':
+    dependencies:
+      postcss-selector-parser: 6.1.2
+
+  '@discoveryjs/json-ext@0.5.7': {}
+
+  '@electron/get@2.0.3':
+    dependencies:
+      debug: 4.4.1(supports-color@8.1.1)
+      env-paths: 2.2.1
+      fs-extra: 8.1.0
+      got: 11.8.6
+      progress: 2.0.3
+      semver: 6.3.1
+      sumchecker: 3.0.1
+    optionalDependencies:
+      global-agent: 3.0.0
+    transitivePeerDependencies:
+      - supports-color
+
+  '@electron/get@4.0.2':
+    dependencies:
+      debug: 4.4.1(supports-color@8.1.1)
+      env-paths: 3.0.0
+      got: 14.4.7
+      graceful-fs: 4.2.11
+      progress: 2.0.3
+      semver: 7.7.2
+      sumchecker: 3.0.1
+    optionalDependencies:
+      global-agent: 3.0.0
+    transitivePeerDependencies:
+      - supports-color
+
+  '@esbuild/aix-ppc64@0.25.8':
+    optional: true
+
+  '@esbuild/android-arm64@0.25.8':
+    optional: true
+
+  '@esbuild/android-arm@0.25.8':
+    optional: true
+
+  '@esbuild/android-x64@0.25.8':
+    optional: true
+
+  '@esbuild/darwin-arm64@0.25.8':
+    optional: true
+
+  '@esbuild/darwin-x64@0.25.8':
+    optional: true
+
+  '@esbuild/freebsd-arm64@0.25.8':
+    optional: true
+
+  '@esbuild/freebsd-x64@0.25.8':
+    optional: true
+
+  '@esbuild/linux-arm64@0.25.8':
+    optional: true
+
+  '@esbuild/linux-arm@0.25.8':
+    optional: true
+
+  '@esbuild/linux-ia32@0.25.8':
+    optional: true
+
+  '@esbuild/linux-loong64@0.25.8':
+    optional: true
+
+  '@esbuild/linux-mips64el@0.25.8':
+    optional: true
+
+  '@esbuild/linux-ppc64@0.25.8':
+    optional: true
+
+  '@esbuild/linux-riscv64@0.25.8':
+    optional: true
+
+  '@esbuild/linux-s390x@0.25.8':
+    optional: true
+
+  '@esbuild/linux-x64@0.25.8':
+    optional: true
+
+  '@esbuild/netbsd-arm64@0.25.8':
+    optional: true
+
+  '@esbuild/netbsd-x64@0.25.8':
+    optional: true
+
+  '@esbuild/openbsd-arm64@0.25.8':
+    optional: true
+
+  '@esbuild/openbsd-x64@0.25.8':
+    optional: true
+
+  '@esbuild/openharmony-arm64@0.25.8':
+    optional: true
+
+  '@esbuild/sunos-x64@0.25.8':
+    optional: true
+
+  '@esbuild/win32-arm64@0.25.8':
+    optional: true
+
+  '@esbuild/win32-ia32@0.25.8':
+    optional: true
+
+  '@esbuild/win32-x64@0.25.8':
+    optional: true
+
+  '@gulp-sourcemaps/identity-map@2.0.1':
+    dependencies:
+      acorn: 6.4.2
+      normalize-path: 3.0.0
+      postcss: 7.0.39
+      source-map: 0.6.1
+      through2: 3.0.2
+
+  '@gulp-sourcemaps/map-sources@1.0.0':
+    dependencies:
+      normalize-path: 2.1.1
+      through2: 2.0.5
+
+  '@isaacs/balanced-match@4.0.1': {}
+
+  '@isaacs/brace-expansion@5.0.0':
+    dependencies:
+      '@isaacs/balanced-match': 4.0.1
+
+  '@isaacs/cliui@8.0.2':
+    dependencies:
+      string-width: 5.1.2
+      string-width-cjs: string-width@4.2.3
+      strip-ansi: 7.1.0
+      strip-ansi-cjs: strip-ansi@6.0.1
+      wrap-ansi: 8.1.0
+      wrap-ansi-cjs: wrap-ansi@7.0.0
+
+  '@istanbuljs/schema@0.1.3': {}
+
+  '@jridgewell/gen-mapping@0.3.12':
+    dependencies:
+      '@jridgewell/sourcemap-codec': 1.5.4
+      '@jridgewell/trace-mapping': 0.3.29
+
+  '@jridgewell/resolve-uri@3.1.2': {}
+
+  '@jridgewell/source-map@0.3.10':
+    dependencies:
+      '@jridgewell/gen-mapping': 0.3.12
+      '@jridgewell/trace-mapping': 0.3.29
+
+  '@jridgewell/sourcemap-codec@1.5.4': {}
+
+  '@jridgewell/trace-mapping@0.3.29':
+    dependencies:
+      '@jridgewell/resolve-uri': 3.1.2
+      '@jridgewell/sourcemap-codec': 1.5.4
+
+  '@jridgewell/trace-mapping@0.3.9':
+    dependencies:
+      '@jridgewell/resolve-uri': 3.1.2
+      '@jridgewell/sourcemap-codec': 1.5.4
+
+  '@koa/cors@5.0.0':
+    dependencies:
+      vary: 1.1.2
+
+  '@koa/router@13.1.1':
+    dependencies:
+      debug: 4.4.1(supports-color@8.1.1)
+      http-errors: 2.0.0
+      koa-compose: 4.1.0
+      path-to-regexp: 6.3.0
+    transitivePeerDependencies:
+      - supports-color
+
+  '@malept/cross-spawn-promise@1.1.1':
+    dependencies:
+      cross-spawn: 7.0.6
+
+  '@microsoft/1ds-core-js@3.2.18(tslib@2.8.1)':
+    dependencies:
+      '@microsoft/applicationinsights-core-js': 2.8.18(tslib@2.8.1)
+      '@microsoft/applicationinsights-shims': 2.0.2
+      '@microsoft/dynamicproto-js': 1.1.11
+    transitivePeerDependencies:
+      - tslib
+
+  '@microsoft/1ds-post-js@3.2.18(tslib@2.8.1)':
+    dependencies:
+      '@microsoft/1ds-core-js': 3.2.18(tslib@2.8.1)
+      '@microsoft/applicationinsights-shims': 2.0.2
+      '@microsoft/dynamicproto-js': 1.1.11
+    transitivePeerDependencies:
+      - tslib
+
+  '@microsoft/applicationinsights-core-js@2.8.18(tslib@2.8.1)':
+    dependencies:
+      '@microsoft/applicationinsights-shims': 2.0.2
+      '@microsoft/dynamicproto-js': 1.1.11
+      tslib: 2.8.1
+
+  '@microsoft/applicationinsights-shims@2.0.2': {}
+
+  '@microsoft/dynamicproto-js@1.1.11': {}
+
+  '@nodelib/fs.scandir@2.1.5':
+    dependencies:
+      '@nodelib/fs.stat': 2.0.5
+      run-parallel: 1.2.0
+
+  '@nodelib/fs.stat@2.0.5': {}
+
+  '@nodelib/fs.walk@1.2.8':
+    dependencies:
+      '@nodelib/fs.scandir': 2.1.5
+      fastq: 1.19.1
+
+  '@octokit/auth-token@6.0.0': {}
+
+  '@octokit/core@7.0.3':
+    dependencies:
+      '@octokit/auth-token': 6.0.0
+      '@octokit/graphql': 9.0.1
+      '@octokit/request': 10.0.3
+      '@octokit/request-error': 7.0.0
+      '@octokit/types': 14.1.0
+      before-after-hook: 4.0.0
+      universal-user-agent: 7.0.3
+
+  '@octokit/endpoint@11.0.0':
+    dependencies:
+      '@octokit/types': 14.1.0
+      universal-user-agent: 7.0.3
+
+  '@octokit/graphql@9.0.1':
+    dependencies:
+      '@octokit/request': 10.0.3
+      '@octokit/types': 14.1.0
+      universal-user-agent: 7.0.3
+
+  '@octokit/openapi-types@25.1.0': {}
+
+  '@octokit/plugin-paginate-rest@13.1.1(@octokit/core@7.0.3)':
+    dependencies:
+      '@octokit/core': 7.0.3
+      '@octokit/types': 14.1.0
+
+  '@octokit/plugin-request-log@6.0.0(@octokit/core@7.0.3)':
+    dependencies:
+      '@octokit/core': 7.0.3
+
+  '@octokit/plugin-rest-endpoint-methods@16.0.0(@octokit/core@7.0.3)':
+    dependencies:
+      '@octokit/core': 7.0.3
+      '@octokit/types': 14.1.0
+
+  '@octokit/request-error@7.0.0':
+    dependencies:
+      '@octokit/types': 14.1.0
+
+  '@octokit/request@10.0.3':
+    dependencies:
+      '@octokit/endpoint': 11.0.0
+      '@octokit/request-error': 7.0.0
+      '@octokit/types': 14.1.0
+      fast-content-type-parse: 3.0.0
+      universal-user-agent: 7.0.3
+
+  '@octokit/rest@22.0.0':
+    dependencies:
+      '@octokit/core': 7.0.3
+      '@octokit/plugin-paginate-rest': 13.1.1(@octokit/core@7.0.3)
+      '@octokit/plugin-request-log': 6.0.0(@octokit/core@7.0.3)
+      '@octokit/plugin-rest-endpoint-methods': 16.0.0(@octokit/core@7.0.3)
+
+  '@octokit/types@14.1.0':
+    dependencies:
+      '@octokit/openapi-types': 25.1.0
+
+  '@one-ini/wasm@0.1.1': {}
+
+  '@parcel/watcher-android-arm64@2.5.1':
+    optional: true
+
+  '@parcel/watcher-darwin-arm64@2.5.1':
+    optional: true
+
+  '@parcel/watcher-darwin-x64@2.5.1':
+    optional: true
+
+  '@parcel/watcher-freebsd-x64@2.5.1':
+    optional: true
+
+  '@parcel/watcher-linux-arm-glibc@2.5.1':
+    optional: true
+
+  '@parcel/watcher-linux-arm-musl@2.5.1':
+    optional: true
+
+  '@parcel/watcher-linux-arm64-glibc@2.5.1':
+    optional: true
+
+  '@parcel/watcher-linux-arm64-musl@2.5.1':
+    optional: true
+
+  '@parcel/watcher-linux-x64-glibc@2.5.1':
+    optional: true
+
+  '@parcel/watcher-linux-x64-musl@2.5.1':
+    optional: true
+
+  '@parcel/watcher-win32-arm64@2.5.1':
+    optional: true
+
+  '@parcel/watcher-win32-ia32@2.5.1':
+    optional: true
+
+  '@parcel/watcher-win32-x64@2.5.1':
+    optional: true
+
+  '@parcel/watcher@2.5.1':
+    dependencies:
+      detect-libc: 1.0.3
+      is-glob: 4.0.3
+      micromatch: 4.0.8
+      node-addon-api: 7.1.1
+    optionalDependencies:
+      '@parcel/watcher-android-arm64': 2.5.1
+      '@parcel/watcher-darwin-arm64': 2.5.1
+      '@parcel/watcher-darwin-x64': 2.5.1
+      '@parcel/watcher-freebsd-x64': 2.5.1
+      '@parcel/watcher-linux-arm-glibc': 2.5.1
+      '@parcel/watcher-linux-arm-musl': 2.5.1
+      '@parcel/watcher-linux-arm64-glibc': 2.5.1
+      '@parcel/watcher-linux-arm64-musl': 2.5.1
+      '@parcel/watcher-linux-x64-glibc': 2.5.1
+      '@parcel/watcher-linux-x64-musl': 2.5.1
+      '@parcel/watcher-win32-arm64': 2.5.1
+      '@parcel/watcher-win32-ia32': 2.5.1
+      '@parcel/watcher-win32-x64': 2.5.1
+
+  '@pkgjs/parseargs@0.11.0':
+    optional: true
+
+  '@playwright/browser-chromium@1.54.1':
+    dependencies:
+      playwright-core: 1.54.1
+
+  '@playwright/test@1.54.1':
+    dependencies:
+      playwright: 1.54.1
+
+  '@rollup/rollup-android-arm-eabi@4.46.1':
+    optional: true
+
+  '@rollup/rollup-android-arm64@4.46.1':
+    optional: true
+
+  '@rollup/rollup-darwin-arm64@4.46.1':
+    optional: true
+
+  '@rollup/rollup-darwin-x64@4.46.1':
+    optional: true
+
+  '@rollup/rollup-freebsd-arm64@4.46.1':
+    optional: true
+
+  '@rollup/rollup-freebsd-x64@4.46.1':
+    optional: true
+
+  '@rollup/rollup-linux-arm-gnueabihf@4.46.1':
+    optional: true
+
+  '@rollup/rollup-linux-arm-musleabihf@4.46.1':
+    optional: true
+
+  '@rollup/rollup-linux-arm64-gnu@4.46.1':
+    optional: true
+
+  '@rollup/rollup-linux-arm64-musl@4.46.1':
+    optional: true
+
+  '@rollup/rollup-linux-loongarch64-gnu@4.46.1':
+    optional: true
+
+  '@rollup/rollup-linux-ppc64-gnu@4.46.1':
+    optional: true
+
+  '@rollup/rollup-linux-riscv64-gnu@4.46.1':
+    optional: true
+
+  '@rollup/rollup-linux-riscv64-musl@4.46.1':
+    optional: true
+
+  '@rollup/rollup-linux-s390x-gnu@4.46.1':
+    optional: true
+
+  '@rollup/rollup-linux-x64-gnu@4.46.1':
+    optional: true
+
+  '@rollup/rollup-linux-x64-musl@4.46.1':
+    optional: true
+
+  '@rollup/rollup-win32-arm64-msvc@4.46.1':
+    optional: true
+
+  '@rollup/rollup-win32-ia32-msvc@4.46.1':
+    optional: true
+
+  '@rollup/rollup-win32-x64-msvc@4.46.1':
+    optional: true
+
+  '@sec-ant/readable-stream@0.4.1': {}
+
+  '@sindresorhus/is@4.6.0': {}
+
+  '@sindresorhus/is@7.0.2': {}
+
+  '@sinonjs/commons@1.8.6':
+    dependencies:
+      type-detect: 4.0.8
+
+  '@sinonjs/commons@3.0.1':
+    dependencies:
+      type-detect: 4.0.8
+
+  '@sinonjs/fake-timers@11.3.1':
+    dependencies:
+      '@sinonjs/commons': 3.0.1
+
+  '@sinonjs/fake-timers@8.1.0':
+    dependencies:
+      '@sinonjs/commons': 1.8.6
+
+  '@sinonjs/samsam@6.1.3':
+    dependencies:
+      '@sinonjs/commons': 1.8.6
+      lodash.get: 4.4.2
+      type-detect: 4.1.0
+
+  '@sinonjs/text-encoding@0.7.3': {}
+
+  '@szmarczak/http-timer@4.0.6':
+    dependencies:
+      defer-to-connect: 2.0.1
+
+  '@szmarczak/http-timer@5.0.1':
+    dependencies:
+      defer-to-connect: 2.0.1
+
+  '@tootallnate/once@3.0.0': {}
+
+  '@trysound/sax@0.2.0': {}
+
+  '@ts-morph/common@0.26.1':
+    dependencies:
+      fast-glob: 3.3.3
+      minimatch: 9.0.5
+      path-browserify: 1.0.1
+
+  '@tsconfig/node10@1.0.11': {}
+
+  '@tsconfig/node12@1.0.11': {}
+
+  '@tsconfig/node14@1.0.3': {}
+
+  '@tsconfig/node16@1.0.4': {}
+
+  '@types/cacheable-request@6.0.3':
+    dependencies:
+      '@types/http-cache-semantics': 4.0.4
+      '@types/keyv': 3.1.4
+      '@types/node': 20.19.9
+      '@types/responselike': 1.0.3
+
+  '@types/cookie@0.3.3': {}
+
+  '@types/debug@4.1.12':
+    dependencies:
+      '@types/ms': 2.1.0
+
+  '@types/eslint-scope@3.7.7':
+    dependencies:
+      '@types/eslint': 9.6.1
+      '@types/estree': 1.0.8
+
+  '@types/eslint@9.6.1':
+    dependencies:
+      '@types/estree': 1.0.8
+      '@types/json-schema': 7.0.15
+
+  '@types/estree@1.0.8': {}
+
+  '@types/expect@1.20.4': {}
+
+  '@types/glob@7.2.0':
+    dependencies:
+      '@types/minimatch': 6.0.0
+      '@types/node': 20.19.9
+    optional: true
+
+  '@types/gulp-svgmin@1.2.4':
+    dependencies:
+      '@types/node': 20.19.9
+      '@types/svgo': 1.3.6
+      '@types/vinyl': 2.0.12
+
+  '@types/http-cache-semantics@4.0.4': {}
+
+  '@types/http-proxy-agent@2.0.2':
+    dependencies:
+      '@types/node': 20.19.9
+
+  '@types/istanbul-lib-coverage@2.0.6': {}
+
+  '@types/json-schema@7.0.15': {}
+
+  '@types/kerberos@1.1.5': {}
+
+  '@types/keyv@3.1.4':
+    dependencies:
+      '@types/node': 20.19.9
+
+  '@types/minimatch@6.0.0':
+    dependencies:
+      minimatch: 3.1.2
+    optional: true
+
+  '@types/minimist@1.2.5': {}
+
+  '@types/mocha@10.0.10': {}
+
+  '@types/mocha@9.1.1': {}
+
+  '@types/ms@2.1.0': {}
+
+  '@types/node@20.19.9':
+    dependencies:
+      undici-types: 6.21.0
+
+  '@types/responselike@1.0.3':
+    dependencies:
+      '@types/node': 20.19.9
+
+  '@types/semver@7.7.0': {}
+
+  '@types/sinon-test@2.4.6':
+    dependencies:
+      '@types/sinon': 10.0.20
+
+  '@types/sinon@10.0.20':
+    dependencies:
+      '@types/sinonjs__fake-timers': 8.1.5
+
+  '@types/sinonjs__fake-timers@8.1.5': {}
+
+  '@types/svgo@1.3.6': {}
+
+  '@types/trusted-types@1.0.6': {}
+
+  '@types/vinyl@2.0.12':
+    dependencies:
+      '@types/expect': 1.20.4
+      '@types/node': 20.19.9
+
+  '@types/vscode-notebook-renderer@1.72.3': {}
+
+  '@types/webpack@5.28.5(esbuild@0.25.8)(webpack-cli@5.1.4)':
+    dependencies:
+      '@types/node': 20.19.9
+      tapable: 2.2.2
+      webpack: 5.100.2(esbuild@0.25.8)(webpack-cli@5.1.4)
+    transitivePeerDependencies:
+      - '@swc/core'
+      - esbuild
+      - uglify-js
+      - webpack-cli
+
+  '@types/wicg-file-system-access@2020.9.8': {}
+
+  '@types/windows-foreground-love@0.3.1':
+    dependencies:
+      windows-foreground-love: 0.5.0
+
+  '@types/winreg@1.2.36': {}
+
+  '@types/yauzl@2.10.3':
+    dependencies:
+      '@types/node': 20.19.9
+
+  '@types/yazl@2.4.6':
+    dependencies:
+      '@types/node': 20.19.9
+
+  '@typespec/ts-http-runtime@0.3.0':
+    dependencies:
+      http-proxy-agent: 7.0.2
+      https-proxy-agent: 7.0.6
+      tslib: 2.8.1
+    transitivePeerDependencies:
+      - supports-color
+
+  '@vscode/deviceid@0.1.2':
+    dependencies:
+      fs-extra: 11.3.0
+      uuid: 9.0.1
+
+  '@vscode/gulp-electron@1.38.1':
+    dependencies:
+      '@electron/get': 4.0.2
+      '@octokit/rest': 22.0.0
+      event-stream: 3.3.4
+      gulp-filter: 5.1.0
+      gulp-rename: 1.2.2
+      gulp-symdest: 1.3.0
+      gulp-vinyl-zip: 2.5.0
+      mkdirp: 0.5.6
+      plist: 3.1.0
+      progress: 1.1.8
+      rcedit: 4.0.1
+      rimraf: 2.7.1
+      semver: 7.7.2
+      sumchecker: 3.0.1
+      temp: 0.8.4
+      vinyl: 3.0.1
+      vinyl-fs: 3.0.3
+    transitivePeerDependencies:
+      - supports-color
+
+  '@vscode/iconv-lite-umd@0.7.0': {}
+
+  '@vscode/l10n-dev@0.0.35':
+    dependencies:
+      '@azure-rest/ai-translation-text': 1.0.1
+      debug: 4.4.1(supports-color@8.1.1)
+      deepmerge-json: 1.5.0
+      glob: 10.4.5
+      markdown-it: 14.1.0
+      node-html-markdown: 1.3.0
+      pseudo-localization: 2.4.0
+      web-tree-sitter: 0.20.8
+      xml2js: 0.5.0
+      yargs: 17.7.2
+    transitivePeerDependencies:
+      - supports-color
+
+  '@vscode/policy-watcher@1.3.2':
+    dependencies:
+      bindings: 1.5.0
+      node-addon-api: 8.5.0
+
+  '@vscode/proxy-agent@0.32.0':
+    dependencies:
+      '@tootallnate/once': 3.0.0
+      agent-base: 7.1.4
+      debug: 4.4.1(supports-color@8.1.1)
+      http-proxy-agent: 7.0.2
+      https-proxy-agent: 7.0.6
+      socks-proxy-agent: 8.0.5
+      undici: 7.12.0
+    optionalDependencies:
+      '@vscode/windows-ca-certs': 0.3.3
+    transitivePeerDependencies:
+      - supports-color
+
+  '@vscode/ripgrep@1.15.14':
+    dependencies:
+      https-proxy-agent: 7.0.6
+      proxy-from-env: 1.1.0
+      yauzl: 2.10.0
+    transitivePeerDependencies:
+      - supports-color
+
+  '@vscode/spdlog@0.15.2':
+    dependencies:
+      bindings: 1.5.0
+      mkdirp: 1.0.4
+      node-addon-api: 7.1.0
+
+  '@vscode/sqlite3@5.1.8-vscode':
+    dependencies:
+      node-addon-api: 8.5.0
+      tar: 6.2.1
+
+  '@vscode/sudo-prompt@9.3.1': {}
+
+  '@vscode/telemetry-extractor@1.17.0':
+    dependencies:
+      '@vscode/ripgrep': 1.15.14
+      command-line-args: 6.0.1
+      ts-morph: 25.0.1
+    transitivePeerDependencies:
+      - '@75lb/nature'
+      - supports-color
+
+  '@vscode/test-cli@0.0.6':
+    dependencies:
+      '@types/mocha': 10.0.10
+      c8: 9.1.0
+      chokidar: 3.6.0
+      enhanced-resolve: 5.18.2
+      glob: 10.4.5
+      minimatch: 9.0.5
+      mocha: 10.8.2
+      supports-color: 9.4.0
+      yargs: 17.7.2
+
+  '@vscode/test-electron@2.5.2':
+    dependencies:
+      http-proxy-agent: 7.0.2
+      https-proxy-agent: 7.0.6
+      jszip: 3.10.1
+      ora: 8.2.0
+      semver: 7.7.2
+    transitivePeerDependencies:
+      - supports-color
+
+  '@vscode/test-web@0.0.62':
+    dependencies:
+      '@koa/cors': 5.0.0
+      '@koa/router': 13.1.1
+      '@playwright/browser-chromium': 1.54.1
+      glob: 11.0.3
+      gunzip-maybe: 1.4.2
+      http-proxy-agent: 7.0.2
+      https-proxy-agent: 7.0.6
+      koa: 2.16.1
+      koa-morgan: 1.0.1
+      koa-mount: 4.2.0
+      koa-static: 5.0.0
+      minimist: 1.2.8
+      playwright: 1.54.1
+      tar-fs: 3.1.0
+      vscode-uri: 3.1.0
+    transitivePeerDependencies:
+      - bare-buffer
+      - supports-color
+
+  '@vscode/tree-sitter-wasm@0.1.4': {}
+
+  '@vscode/v8-heap-parser@0.1.0': {}
+
+  '@vscode/vscode-languagedetection@1.0.21': {}
+
+  '@vscode/vscode-perf@0.0.19':
+    dependencies:
+      chalk: 4.1.2
+      commander: 9.5.0
+      cookie: 0.7.2
+      js-base64: 3.7.7
+      node-fetch: 2.6.8
+      playwright: 1.54.1
+    transitivePeerDependencies:
+      - encoding
+
+  '@vscode/windows-ca-certs@0.3.3':
+    dependencies:
+      node-addon-api: 8.5.0
+    optional: true
+
+  '@vscode/windows-mutex@0.5.0':
+    dependencies:
+      bindings: 1.5.0
+      node-addon-api: 7.1.0
+
+  '@vscode/windows-process-tree@0.6.0':
+    dependencies:
+      node-addon-api: 7.1.0
+
+  '@vscode/windows-registry@1.1.0': {}
+
+  '@webassemblyjs/ast@1.14.1':
+    dependencies:
+      '@webassemblyjs/helper-numbers': 1.13.2
+      '@webassemblyjs/helper-wasm-bytecode': 1.13.2
+
+  '@webassemblyjs/floating-point-hex-parser@1.13.2': {}
+
+  '@webassemblyjs/helper-api-error@1.13.2': {}
+
+  '@webassemblyjs/helper-buffer@1.14.1': {}
+
+  '@webassemblyjs/helper-numbers@1.13.2':
+    dependencies:
+      '@webassemblyjs/floating-point-hex-parser': 1.13.2
+      '@webassemblyjs/helper-api-error': 1.13.2
+      '@xtuc/long': 4.2.2
+
+  '@webassemblyjs/helper-wasm-bytecode@1.13.2': {}
+
+  '@webassemblyjs/helper-wasm-section@1.14.1':
+    dependencies:
+      '@webassemblyjs/ast': 1.14.1
+      '@webassemblyjs/helper-buffer': 1.14.1
+      '@webassemblyjs/helper-wasm-bytecode': 1.13.2
+      '@webassemblyjs/wasm-gen': 1.14.1
+
+  '@webassemblyjs/ieee754@1.13.2':
+    dependencies:
+      '@xtuc/ieee754': 1.2.0
+
+  '@webassemblyjs/leb128@1.13.2':
+    dependencies:
+      '@xtuc/long': 4.2.2
+
+  '@webassemblyjs/utf8@1.13.2': {}
+
+  '@webassemblyjs/wasm-edit@1.14.1':
+    dependencies:
+      '@webassemblyjs/ast': 1.14.1
+      '@webassemblyjs/helper-buffer': 1.14.1
+      '@webassemblyjs/helper-wasm-bytecode': 1.13.2
+      '@webassemblyjs/helper-wasm-section': 1.14.1
+      '@webassemblyjs/wasm-gen': 1.14.1
+      '@webassemblyjs/wasm-opt': 1.14.1
+      '@webassemblyjs/wasm-parser': 1.14.1
+      '@webassemblyjs/wast-printer': 1.14.1
+
+  '@webassemblyjs/wasm-gen@1.14.1':
+    dependencies:
+      '@webassemblyjs/ast': 1.14.1
+      '@webassemblyjs/helper-wasm-bytecode': 1.13.2
+      '@webassemblyjs/ieee754': 1.13.2
+      '@webassemblyjs/leb128': 1.13.2
+      '@webassemblyjs/utf8': 1.13.2
+
+  '@webassemblyjs/wasm-opt@1.14.1':
+    dependencies:
+      '@webassemblyjs/ast': 1.14.1
+      '@webassemblyjs/helper-buffer': 1.14.1
+      '@webassemblyjs/wasm-gen': 1.14.1
+      '@webassemblyjs/wasm-parser': 1.14.1
+
+  '@webassemblyjs/wasm-parser@1.14.1':
+    dependencies:
+      '@webassemblyjs/ast': 1.14.1
+      '@webassemblyjs/helper-api-error': 1.13.2
+      '@webassemblyjs/helper-wasm-bytecode': 1.13.2
+      '@webassemblyjs/ieee754': 1.13.2
+      '@webassemblyjs/leb128': 1.13.2
+      '@webassemblyjs/utf8': 1.13.2
+
+  '@webassemblyjs/wast-printer@1.14.1':
+    dependencies:
+      '@webassemblyjs/ast': 1.14.1
+      '@xtuc/long': 4.2.2
+
+  '@webgpu/types@0.1.64': {}
+
+  '@webpack-cli/configtest@2.1.1(webpack-cli@5.1.4)(webpack@5.100.2)':
+    dependencies:
+      webpack: 5.100.2(esbuild@0.25.8)(webpack-cli@5.1.4)
+      webpack-cli: 5.1.4(webpack@5.100.2)
+
+  '@webpack-cli/info@2.0.2(webpack-cli@5.1.4)(webpack@5.100.2)':
+    dependencies:
+      webpack: 5.100.2(esbuild@0.25.8)(webpack-cli@5.1.4)
+      webpack-cli: 5.1.4(webpack@5.100.2)
+
+  '@webpack-cli/serve@2.0.5(webpack-cli@5.1.4)(webpack@5.100.2)':
+    dependencies:
+      webpack: 5.100.2(esbuild@0.25.8)(webpack-cli@5.1.4)
+      webpack-cli: 5.1.4(webpack@5.100.2)
+
+  '@xmldom/xmldom@0.8.10': {}
+
+  '@xterm/addon-clipboard@0.2.0-beta.97(@xterm/xterm@5.6.0-beta.114)':
+    dependencies:
+      '@xterm/xterm': 5.6.0-beta.114
+      js-base64: 3.7.7
+
+  '@xterm/addon-image@0.9.0-beta.114(@xterm/xterm@5.6.0-beta.114)':
+    dependencies:
+      '@xterm/xterm': 5.6.0-beta.114
+
+  '@xterm/addon-ligatures@0.10.0-beta.114(@xterm/xterm@5.6.0-beta.114)':
+    dependencies:
+      '@xterm/xterm': 5.6.0-beta.114
+      font-finder: 1.1.0
+      font-ligatures: 1.4.1
+
+  '@xterm/addon-progress@0.2.0-beta.20(@xterm/xterm@5.6.0-beta.114)':
+    dependencies:
+      '@xterm/xterm': 5.6.0-beta.114
+
+  '@xterm/addon-search@0.16.0-beta.114(@xterm/xterm@5.6.0-beta.114)':
+    dependencies:
+      '@xterm/xterm': 5.6.0-beta.114
+
+  '@xterm/addon-serialize@0.14.0-beta.114(@xterm/xterm@5.6.0-beta.114)':
+    dependencies:
+      '@xterm/xterm': 5.6.0-beta.114
+
+  '@xterm/addon-unicode11@0.9.0-beta.114(@xterm/xterm@5.6.0-beta.114)':
+    dependencies:
+      '@xterm/xterm': 5.6.0-beta.114
+
+  '@xterm/addon-webgl@0.19.0-beta.114(@xterm/xterm@5.6.0-beta.114)':
+    dependencies:
+      '@xterm/xterm': 5.6.0-beta.114
+
+  '@xterm/headless@5.6.0-beta.114': {}
+
+  '@xterm/xterm@5.6.0-beta.114': {}
+
+  '@xtuc/ieee754@1.2.0': {}
+
+  '@xtuc/long@4.2.2': {}
+
+  abbrev@2.0.0: {}
+
+  accepts@1.3.8:
+    dependencies:
+      mime-types: 2.1.35
+      negotiator: 0.6.3
+
+  acorn-import-phases@1.0.4(acorn@8.15.0):
+    dependencies:
+      acorn: 8.15.0
+
+  acorn-walk@8.3.4:
+    dependencies:
+      acorn: 8.15.0
+
+  acorn@6.4.2: {}
+
+  acorn@8.15.0: {}
+
+  agent-base@7.1.4: {}
+
+  ajv-formats@2.1.1(ajv@8.17.1):
+    optionalDependencies:
+      ajv: 8.17.1
+
+  ajv-keywords@3.5.2(ajv@6.12.6):
+    dependencies:
+      ajv: 6.12.6
+
+  ajv-keywords@5.1.0(ajv@8.17.1):
+    dependencies:
+      ajv: 8.17.1
+      fast-deep-equal: 3.1.3
+
+  ajv@6.12.6:
+    dependencies:
+      fast-deep-equal: 3.1.3
+      fast-json-stable-stringify: 2.1.0
+      json-schema-traverse: 0.4.1
+      uri-js: 4.4.1
+
+  ajv@8.17.1:
+    dependencies:
+      fast-deep-equal: 3.1.3
+      fast-uri: 3.0.6
+      json-schema-traverse: 1.0.0
+      require-from-string: 2.0.2
+
+  all@0.0.0: {}
+
+  amdefine@1.0.1: {}
+
+  ansi-colors@1.1.0:
+    dependencies:
+      ansi-wrap: 0.1.0
+
+  ansi-colors@3.2.4: {}
+
+  ansi-colors@4.1.3: {}
+
+  ansi-cyan@0.1.1:
+    dependencies:
+      ansi-wrap: 0.1.0
+
+  ansi-gray@0.1.1:
+    dependencies:
+      ansi-wrap: 0.1.0
+
+  ansi-red@0.1.1:
+    dependencies:
+      ansi-wrap: 0.1.0
+
+  ansi-regex@2.1.1: {}
+
+  ansi-regex@5.0.1: {}
+
+  ansi-regex@6.1.0: {}
+
+  ansi-styles@2.2.1: {}
+
+  ansi-styles@3.2.1:
+    dependencies:
+      color-convert: 1.9.3
+
+  ansi-styles@4.3.0:
+    dependencies:
+      color-convert: 2.0.1
+
+  ansi-styles@6.2.1: {}
+
+  ansi-wrap@0.1.0: {}
+
+  any-promise@1.3.0: {}
+
+  anymatch@2.0.0:
+    dependencies:
+      micromatch: 3.1.10
+      normalize-path: 2.1.1
+    transitivePeerDependencies:
+      - supports-color
+
+  anymatch@3.1.3:
+    dependencies:
+      normalize-path: 3.0.0
+      picomatch: 2.3.1
+
+  append-buffer@1.0.2:
+    dependencies:
+      buffer-equal: 1.0.1
+
+  archy@1.0.0: {}
+
+  arg@4.1.3: {}
+
+  argparse@2.0.1: {}
+
+  arr-diff@1.1.0:
+    dependencies:
+      arr-flatten: 1.1.0
+      array-slice: 0.2.3
+
+  arr-diff@4.0.0: {}
+
+  arr-filter@1.1.2:
+    dependencies:
+      make-iterator: 1.0.1
+
+  arr-flatten@1.1.0: {}
+
+  arr-map@2.0.2:
+    dependencies:
+      make-iterator: 1.0.1
+
+  arr-union@2.1.0: {}
+
+  arr-union@3.1.0: {}
+
+  array-back@6.2.2: {}
+
+  array-buffer-byte-length@1.0.2:
+    dependencies:
+      call-bound: 1.0.4
+      is-array-buffer: 3.0.5
+
+  array-differ@1.0.0: {}
+
+  array-each@1.0.1: {}
+
+  array-initial@1.1.0:
+    dependencies:
+      array-slice: 1.1.0
+      is-number: 4.0.0
+
+  array-last@1.3.0:
+    dependencies:
+      is-number: 4.0.0
+
+  array-slice@0.2.3: {}
+
+  array-slice@1.1.0: {}
+
+  array-sort@1.0.0:
+    dependencies:
+      default-compare: 1.0.0
+      get-value: 2.0.6
+      kind-of: 5.1.0
+
+  array-union@1.0.2:
+    dependencies:
+      array-uniq: 1.0.3
+
+  array-uniq@1.0.3: {}
+
+  array-unique@0.3.2: {}
+
+  arraybuffer.prototype.slice@1.0.4:
+    dependencies:
+      array-buffer-byte-length: 1.0.2
+      call-bind: 1.0.8
+      define-properties: 1.2.1
+      es-abstract: 1.24.0
+      es-errors: 1.3.0
+      get-intrinsic: 1.3.0
+      is-array-buffer: 3.0.5
+
+  arrify@1.0.1: {}
+
+  asar@3.2.0:
+    dependencies:
+      chromium-pickle-js: 0.2.0
+      commander: 5.1.0
+      glob: 7.2.3
+      minimatch: 3.1.2
+    optionalDependencies:
+      '@types/glob': 7.2.0
+
+  assign-symbols@1.0.0: {}
+
+  async-done@1.3.2:
+    dependencies:
+      end-of-stream: 1.4.5
+      once: 1.4.0
+      process-nextick-args: 2.0.1
+      stream-exhaust: 1.0.2
+
+  async-each@1.0.6: {}
+
+  async-function@1.0.0: {}
+
+  async-settle@1.0.0:
+    dependencies:
+      async-done: 1.3.2
+
+  atob@2.1.2: {}
+
+  available-typed-arrays@1.0.7:
+    dependencies:
+      possible-typed-array-names: 1.1.0
+
+  b4a@1.6.7: {}
+
+  bach@1.2.0:
+    dependencies:
+      arr-filter: 1.1.2
+      arr-flatten: 1.1.0
+      arr-map: 2.0.2
+      array-each: 1.0.1
+      array-initial: 1.1.0
+      array-last: 1.3.0
+      async-done: 1.3.2
+      async-settle: 1.0.0
+      now-and-later: 2.0.1
+
+  balanced-match@1.0.2: {}
+
+  bare-events@2.6.0:
+    optional: true
+
+  bare-fs@4.1.6:
+    dependencies:
+      bare-events: 2.6.0
+      bare-path: 3.0.0
+      bare-stream: 2.6.5(bare-events@2.6.0)
+    optional: true
+
+  bare-os@3.6.1:
+    optional: true
+
+  bare-path@3.0.0:
+    dependencies:
+      bare-os: 3.6.1
+    optional: true
+
+  bare-stream@2.6.5(bare-events@2.6.0):
+    dependencies:
+      streamx: 2.22.1
+    optionalDependencies:
+      bare-events: 2.6.0
+    optional: true
+
+  base64-js@1.5.1: {}
+
+  base@0.11.2:
+    dependencies:
+      cache-base: 1.0.1
+      class-utils: 0.3.6
+      component-emitter: 1.3.1
+      define-property: 1.0.0
+      isobject: 3.0.1
+      mixin-deep: 1.3.2
+      pascalcase: 0.1.1
+
+  basic-auth@2.0.1:
+    dependencies:
+      safe-buffer: 5.1.2
+
+  before-after-hook@4.0.0: {}
+
+  big.js@5.2.2: {}
+
+  binary-extensions@1.13.1: {}
+
+  binary-extensions@2.3.0: {}
+
+  binaryextensions@1.0.1: {}
+
+  bindings@1.5.0:
+    dependencies:
+      file-uri-to-path: 1.0.0
+
+  bl@4.1.0:
+    dependencies:
+      buffer: 5.7.1
+      inherits: 2.0.4
+      readable-stream: 3.6.2
+
+  block-stream@0.0.9:
+    dependencies:
+      inherits: 2.0.4
+
+  boolbase@1.0.0: {}
+
+  boolean@3.2.0:
+    optional: true
+
+  brace-expansion@1.1.12:
+    dependencies:
+      balanced-match: 1.0.2
+      concat-map: 0.0.1
+
+  brace-expansion@2.0.2:
+    dependencies:
+      balanced-match: 1.0.2
+
+  braces@2.3.2:
+    dependencies:
+      arr-flatten: 1.1.0
+      array-unique: 0.3.2
+      extend-shallow: 2.0.1
+      fill-range: 4.0.0
+      isobject: 3.0.1
+      repeat-element: 1.1.4
+      snapdragon: 0.8.2
+      snapdragon-node: 2.1.1
+      split-string: 3.1.0
+      to-regex: 3.0.2
+    transitivePeerDependencies:
+      - supports-color
+
+  braces@3.0.3:
+    dependencies:
+      fill-range: 7.1.1
+
+  browser-stdout@1.3.1: {}
+
+  browserify-zlib@0.1.4:
+    dependencies:
+      pako: 0.2.9
+
+  browserslist@4.25.1:
+    dependencies:
+      caniuse-lite: 1.0.30001727
+      electron-to-chromium: 1.5.191
+      node-releases: 2.0.19
+      update-browserslist-db: 1.1.3(browserslist@4.25.1)
+
+  buffer-crc32@0.2.13: {}
+
+  buffer-equal@1.0.1: {}
+
+  buffer-from@1.1.2: {}
+
+  buffer@5.7.1:
+    dependencies:
+      base64-js: 1.5.1
+      ieee754: 1.2.1
+
+  bundle-require@5.1.0(esbuild@0.25.8):
+    dependencies:
+      esbuild: 0.25.8
+      load-tsconfig: 0.2.5
+
+  bytes@3.1.2: {}
+
+  c8@9.1.0:
+    dependencies:
+      '@bcoe/v8-coverage': 0.2.3
+      '@istanbuljs/schema': 0.1.3
+      find-up: 5.0.0
+      foreground-child: 3.3.1
+      istanbul-lib-coverage: 3.2.2
+      istanbul-lib-report: 3.0.1
+      istanbul-reports: 3.1.7
+      test-exclude: 6.0.0
+      v8-to-istanbul: 9.3.0
+      yargs: 17.7.2
+      yargs-parser: 21.1.1
+
+  cac@6.7.14: {}
+
+  cache-base@1.0.1:
+    dependencies:
+      collection-visit: 1.0.0
+      component-emitter: 1.3.1
+      get-value: 2.0.6
+      has-value: 1.0.0
+      isobject: 3.0.1
+      set-value: 2.0.1
+      to-object-path: 0.3.0
+      union-value: 1.0.1
+      unset-value: 1.0.0
+
+  cache-content-type@1.0.1:
+    dependencies:
+      mime-types: 2.1.35
+      ylru: 1.4.0
+
+  cacheable-lookup@5.0.4: {}
+
+  cacheable-lookup@7.0.0: {}
+
+  cacheable-request@12.0.1:
+    dependencies:
+      '@types/http-cache-semantics': 4.0.4
+      get-stream: 9.0.1
+      http-cache-semantics: 4.2.0
+      keyv: 4.5.4
+      mimic-response: 4.0.0
+      normalize-url: 8.0.2
+      responselike: 3.0.0
+
+  cacheable-request@7.0.4:
+    dependencies:
+      clone-response: 1.0.3
+      get-stream: 5.2.0
+      http-cache-semantics: 4.2.0
+      keyv: 4.5.4
+      lowercase-keys: 2.0.0
+      normalize-url: 6.1.0
+      responselike: 2.0.1
+
+  call-bind-apply-helpers@1.0.2:
+    dependencies:
+      es-errors: 1.3.0
+      function-bind: 1.1.2
+
+  call-bind@1.0.8:
+    dependencies:
+      call-bind-apply-helpers: 1.0.2
+      es-define-property: 1.0.1
+      get-intrinsic: 1.3.0
+      set-function-length: 1.2.2
+
+  call-bound@1.0.4:
+    dependencies:
+      call-bind-apply-helpers: 1.0.2
+      get-intrinsic: 1.3.0
+
+  camelcase@3.0.0: {}
+
+  camelcase@5.3.1: {}
+
+  camelcase@6.3.0: {}
+
+  caniuse-api@3.0.0:
+    dependencies:
+      browserslist: 4.25.1
+      caniuse-lite: 1.0.30001727
+      lodash.memoize: 4.1.2
+      lodash.uniq: 4.5.0
+
+  caniuse-lite@1.0.30001727: {}
+
+  chalk@1.1.3:
+    dependencies:
+      ansi-styles: 2.2.1
+      escape-string-regexp: 1.0.5
+      has-ansi: 2.0.0
+      strip-ansi: 3.0.1
+      supports-color: 2.0.0
+
+  chalk@2.4.2:
+    dependencies:
+      ansi-styles: 3.2.1
+      escape-string-regexp: 1.0.5
+      supports-color: 5.5.0
+
+  chalk@4.1.2:
+    dependencies:
+      ansi-styles: 4.3.0
+      supports-color: 7.2.0
+
+  chalk@5.4.1: {}
+
+  charenc@0.0.2: {}
+
+  chokidar@2.1.8:
+    dependencies:
+      anymatch: 2.0.0
+      async-each: 1.0.6
+      braces: 2.3.2
+      glob-parent: 3.1.0
+      inherits: 2.0.4
+      is-binary-path: 1.0.1
+      is-glob: 4.0.3
+      normalize-path: 3.0.0
+      path-is-absolute: 1.0.1
+      readdirp: 2.2.1
+      upath: 1.2.0
+    optionalDependencies:
+      fsevents: 1.2.13
+    transitivePeerDependencies:
+      - supports-color
+
+  chokidar@3.6.0:
+    dependencies:
+      anymatch: 3.1.3
+      braces: 3.0.3
+      glob-parent: 5.1.2
+      is-binary-path: 2.1.0
+      is-glob: 4.0.3
+      normalize-path: 3.0.0
+      readdirp: 3.6.0
+    optionalDependencies:
+      fsevents: 2.3.3
+
+  chokidar@4.0.3:
+    dependencies:
+      readdirp: 4.1.2
+
+  chownr@1.1.4: {}
+
+  chownr@2.0.0: {}
+
+  chrome-remote-interface@0.33.3:
+    dependencies:
+      commander: 2.11.0
+      ws: 7.5.10
+    transitivePeerDependencies:
+      - bufferutil
+      - utf-8-validate
+
+  chrome-trace-event@1.0.4: {}
+
+  chromium-pickle-js@0.2.0: {}
+
+  ci-info@1.6.0: {}
+
+  class-utils@0.3.6:
+    dependencies:
+      arr-union: 3.1.0
+      define-property: 0.2.5
+      isobject: 3.0.1
+      static-extend: 0.1.2
+
+  cli-cursor@5.0.0:
+    dependencies:
+      restore-cursor: 5.1.0
+
+  cli-spinners@2.9.2: {}
+
+  cliui@3.2.0:
+    dependencies:
+      string-width: 1.0.2
+      strip-ansi: 3.0.1
+      wrap-ansi: 2.1.0
+
+  cliui@6.0.0:
+    dependencies:
+      string-width: 4.2.3
+      strip-ansi: 6.0.1
+      wrap-ansi: 6.2.0
+
+  cliui@7.0.4:
+    dependencies:
+      string-width: 4.2.3
+      strip-ansi: 6.0.1
+      wrap-ansi: 7.0.0
+
+  cliui@8.0.1:
+    dependencies:
+      string-width: 4.2.3
+      strip-ansi: 6.0.1
+      wrap-ansi: 7.0.0
+
+  clone-buffer@1.0.0: {}
+
+  clone-deep@4.0.1:
+    dependencies:
+      is-plain-object: 2.0.4
+      kind-of: 6.0.3
+      shallow-clone: 3.0.1
+
+  clone-response@1.0.3:
+    dependencies:
+      mimic-response: 1.0.1
+
+  clone-stats@0.0.1: {}
+
+  clone-stats@1.0.0: {}
+
+  clone@1.0.4: {}
+
+  clone@2.1.2: {}
+
+  cloneable-readable@1.1.3:
+    dependencies:
+      inherits: 2.0.4
+      process-nextick-args: 2.0.1
+      readable-stream: 2.3.8
+
+  co@4.6.0: {}
+
+  code-block-writer@13.0.3: {}
+
+  code-point-at@1.1.0: {}
+
+  collection-map@1.0.0:
+    dependencies:
+      arr-map: 2.0.2
+      for-own: 1.0.0
+      make-iterator: 1.0.1
+
+  collection-visit@1.0.0:
+    dependencies:
+      map-visit: 1.0.0
+      object-visit: 1.0.1
+
+  color-convert@1.9.3:
+    dependencies:
+      color-name: 1.1.3
+
+  color-convert@2.0.1:
+    dependencies:
+      color-name: 1.1.4
+
+  color-name@1.1.3: {}
+
+  color-name@1.1.4: {}
+
+  color-support@1.1.3: {}
+
+  colord@2.9.3: {}
+
+  colorette@2.0.20: {}
+
+  command-line-args@6.0.1:
+    dependencies:
+      array-back: 6.2.2
+      find-replace: 5.0.2
+      lodash.camelcase: 4.3.0
+      typical: 7.3.0
+
+  commander@10.0.1: {}
+
+  commander@2.11.0: {}
+
+  commander@2.20.3: {}
+
+  commander@4.1.1: {}
+
+  commander@5.1.0: {}
+
+  commander@7.2.0: {}
+
+  commander@9.5.0: {}
+
+  component-emitter@1.3.1: {}
+
+  concat-map@0.0.1: {}
+
+  concat-stream@1.6.2:
+    dependencies:
+      buffer-from: 1.1.2
+      inherits: 2.0.4
+      readable-stream: 2.3.8
+      typedarray: 0.0.6
+
+  confbox@0.1.8: {}
+
+  config-chain@1.1.13:
+    dependencies:
+      ini: 1.3.8
+      proto-list: 1.2.4
+
+  consola@3.4.2: {}
+
+  content-disposition@0.5.4:
+    dependencies:
+      safe-buffer: 5.2.1
+
+  content-type@1.0.5: {}
+
+  convert-source-map@1.9.0: {}
+
+  convert-source-map@2.0.0: {}
+
+  cookie@0.7.2: {}
+
+  cookies@0.9.1:
+    dependencies:
+      depd: 2.0.0
+      keygrip: 1.1.0
+
+  copy-descriptor@0.1.1: {}
+
+  copy-props@2.0.5:
+    dependencies:
+      each-props: 1.3.2
+      is-plain-object: 5.0.0
+
+  copy-webpack-plugin@11.0.0(webpack@5.100.2):
+    dependencies:
+      fast-glob: 3.3.3
+      glob-parent: 6.0.2
+      globby: 13.2.2
+      normalize-path: 3.0.0
+      schema-utils: 4.3.2
+      serialize-javascript: 6.0.2
+      webpack: 5.100.2(esbuild@0.25.8)(webpack-cli@5.1.4)
+
+  core-util-is@1.0.3: {}
+
+  create-require@1.1.1: {}
+
+  cross-spawn-windows-exe@1.2.0:
+    dependencies:
+      '@malept/cross-spawn-promise': 1.1.1
+      is-wsl: 2.2.0
+      which: 2.0.2
+
+  cross-spawn@6.0.6:
+    dependencies:
+      nice-try: 1.0.5
+      path-key: 2.0.1
+      semver: 5.7.2
+      shebang-command: 1.2.0
+      which: 1.3.1
+
+  cross-spawn@7.0.6:
+    dependencies:
+      path-key: 3.1.1
+      shebang-command: 2.0.0
+      which: 2.0.2
+
+  crypt@0.0.2: {}
+
+  css-declaration-sorter@7.2.0(postcss@8.5.6):
+    dependencies:
+      postcss: 8.5.6
+
+  css-loader@6.11.0(webpack@5.100.2):
+    dependencies:
+      icss-utils: 5.1.0(postcss@8.5.6)
+      postcss: 8.5.6
+      postcss-modules-extract-imports: 3.1.0(postcss@8.5.6)
+      postcss-modules-local-by-default: 4.2.0(postcss@8.5.6)
+      postcss-modules-scope: 3.2.1(postcss@8.5.6)
+      postcss-modules-values: 4.0.0(postcss@8.5.6)
+      postcss-value-parser: 4.2.0
+      semver: 7.7.2
+    optionalDependencies:
+      webpack: 5.100.2(esbuild@0.25.8)(webpack-cli@5.1.4)
+
+  css-select@4.3.0:
+    dependencies:
+      boolbase: 1.0.0
+      css-what: 6.2.2
+      domhandler: 4.3.1
+      domutils: 2.8.0
+      nth-check: 2.1.1
+
+  css-select@5.2.2:
+    dependencies:
+      boolbase: 1.0.0
+      css-what: 6.2.2
+      domhandler: 5.0.3
+      domutils: 3.2.2
+      nth-check: 2.1.1
+
+  css-tree@1.1.3:
+    dependencies:
+      mdn-data: 2.0.14
+      source-map: 0.6.1
+
+  css-tree@2.2.1:
+    dependencies:
+      mdn-data: 2.0.28
+      source-map-js: 1.2.1
+
+  css-tree@2.3.1:
+    dependencies:
+      mdn-data: 2.0.30
+      source-map-js: 1.2.1
+
+  css-what@6.2.2: {}
+
+  css@3.0.0:
+    dependencies:
+      inherits: 2.0.4
+      source-map: 0.6.1
+      source-map-resolve: 0.6.0
+
+  cssesc@3.0.0: {}
+
+  cssnano-preset-default@6.1.2(postcss@8.5.6):
+    dependencies:
+      browserslist: 4.25.1
+      css-declaration-sorter: 7.2.0(postcss@8.5.6)
+      cssnano-utils: 4.0.2(postcss@8.5.6)
+      postcss: 8.5.6
+      postcss-calc: 9.0.1(postcss@8.5.6)
+      postcss-colormin: 6.1.0(postcss@8.5.6)
+      postcss-convert-values: 6.1.0(postcss@8.5.6)
+      postcss-discard-comments: 6.0.2(postcss@8.5.6)
+      postcss-discard-duplicates: 6.0.3(postcss@8.5.6)
+      postcss-discard-empty: 6.0.3(postcss@8.5.6)
+      postcss-discard-overridden: 6.0.2(postcss@8.5.6)
+      postcss-merge-longhand: 6.0.5(postcss@8.5.6)
+      postcss-merge-rules: 6.1.1(postcss@8.5.6)
+      postcss-minify-font-values: 6.1.0(postcss@8.5.6)
+      postcss-minify-gradients: 6.0.3(postcss@8.5.6)
+      postcss-minify-params: 6.1.0(postcss@8.5.6)
+      postcss-minify-selectors: 6.0.4(postcss@8.5.6)
+      postcss-normalize-charset: 6.0.2(postcss@8.5.6)
+      postcss-normalize-display-values: 6.0.2(postcss@8.5.6)
+      postcss-normalize-positions: 6.0.2(postcss@8.5.6)
+      postcss-normalize-repeat-style: 6.0.2(postcss@8.5.6)
+      postcss-normalize-string: 6.0.2(postcss@8.5.6)
+      postcss-normalize-timing-functions: 6.0.2(postcss@8.5.6)
+      postcss-normalize-unicode: 6.1.0(postcss@8.5.6)
+      postcss-normalize-url: 6.0.2(postcss@8.5.6)
+      postcss-normalize-whitespace: 6.0.2(postcss@8.5.6)
+      postcss-ordered-values: 6.0.2(postcss@8.5.6)
+      postcss-reduce-initial: 6.1.0(postcss@8.5.6)
+      postcss-reduce-transforms: 6.0.2(postcss@8.5.6)
+      postcss-svgo: 6.0.3(postcss@8.5.6)
+      postcss-unique-selectors: 6.0.4(postcss@8.5.6)
+
+  cssnano-utils@4.0.2(postcss@8.5.6):
+    dependencies:
+      postcss: 8.5.6
+
+  cssnano@6.1.2(postcss@8.5.6):
+    dependencies:
+      cssnano-preset-default: 6.1.2(postcss@8.5.6)
+      lilconfig: 3.1.3
+      postcss: 8.5.6
+
+  csso@4.2.0:
+    dependencies:
+      css-tree: 1.1.3
+
+  csso@5.0.5:
+    dependencies:
+      css-tree: 2.2.1
+
+  d@1.0.2:
+    dependencies:
+      es5-ext: 0.10.64
+      type: 2.7.3
+
+  data-view-buffer@1.0.2:
+    dependencies:
+      call-bound: 1.0.4
+      es-errors: 1.3.0
+      is-data-view: 1.0.2
+
+  data-view-byte-length@1.0.2:
+    dependencies:
+      call-bound: 1.0.4
+      es-errors: 1.3.0
+      is-data-view: 1.0.2
+
+  data-view-byte-offset@1.0.1:
+    dependencies:
+      call-bound: 1.0.4
+      es-errors: 1.3.0
+      is-data-view: 1.0.2
+
+  debounce@1.2.1: {}
+
+  debug-fabulous@1.1.0:
+    dependencies:
+      debug: 3.2.7
+      memoizee: 0.4.17
+      object-assign: 4.1.1
+    transitivePeerDependencies:
+      - supports-color
+
+  debug@2.6.9:
+    dependencies:
+      ms: 2.0.0
+
+  debug@3.2.7:
+    dependencies:
+      ms: 2.1.3
+
+  debug@4.4.1(supports-color@8.1.1):
+    dependencies:
+      ms: 2.1.3
+    optionalDependencies:
+      supports-color: 8.1.1
+
+  decamelize@1.2.0: {}
+
+  decamelize@4.0.0: {}
+
+  decode-uri-component@0.2.2: {}
+
+  decompress-response@6.0.0:
+    dependencies:
+      mimic-response: 3.1.0
+
+  deemon@1.13.5:
+    dependencies:
+      bl: 4.1.0
+      tree-kill: 1.2.2
+
+  deep-equal@1.0.1: {}
+
+  deep-extend@0.6.0: {}
+
+  deepmerge-json@1.5.0: {}
+
+  deepmerge@4.3.1: {}
+
+  default-compare@1.0.0:
+    dependencies:
+      kind-of: 5.1.0
+
+  default-resolution@2.0.0: {}
+
+  defer-to-connect@2.0.1: {}
+
+  define-data-property@1.1.4:
+    dependencies:
+      es-define-property: 1.0.1
+      es-errors: 1.3.0
+      gopd: 1.2.0
+
+  define-lazy-prop@2.0.0: {}
+
+  define-properties@1.2.1:
+    dependencies:
+      define-data-property: 1.1.4
+      has-property-descriptors: 1.0.2
+      object-keys: 1.1.1
+
+  define-property@0.2.5:
+    dependencies:
+      is-descriptor: 0.1.7
+
+  define-property@1.0.0:
+    dependencies:
+      is-descriptor: 1.0.3
+
+  define-property@2.0.2:
+    dependencies:
+      is-descriptor: 1.0.3
+      isobject: 3.0.1
+
+  delayed-stream@0.0.6: {}
+
+  delegates@1.0.0: {}
+
+  depd@1.1.2: {}
+
+  depd@2.0.0: {}
+
+  destroy@1.2.0: {}
+
+  detect-file@1.0.0: {}
+
+  detect-indent@6.1.0: {}
+
+  detect-libc@1.0.3: {}
+
+  detect-libc@2.0.4: {}
+
+  detect-newline@2.1.0: {}
+
+  detect-node@2.1.0:
+    optional: true
+
+  diff@4.0.2: {}
+
+  diff@5.2.0: {}
+
+  dir-glob@3.0.1:
+    dependencies:
+      path-type: 4.0.0
+
+  dom-serializer@1.4.1:
+    dependencies:
+      domelementtype: 2.3.0
+      domhandler: 4.3.1
+      entities: 2.2.0
+
+  dom-serializer@2.0.0:
+    dependencies:
+      domelementtype: 2.3.0
+      domhandler: 5.0.3
+      entities: 4.5.0
+
+  domelementtype@2.3.0: {}
+
+  domhandler@4.3.1:
+    dependencies:
+      domelementtype: 2.3.0
+
+  domhandler@5.0.3:
+    dependencies:
+      domelementtype: 2.3.0
+
+  domutils@2.8.0:
+    dependencies:
+      dom-serializer: 1.4.1
+      domelementtype: 2.3.0
+      domhandler: 4.3.1
+
+  domutils@3.2.2:
+    dependencies:
+      dom-serializer: 2.0.0
+      domelementtype: 2.3.0
+      domhandler: 5.0.3
+
+  dunder-proto@1.0.1:
+    dependencies:
+      call-bind-apply-helpers: 1.0.2
+      es-errors: 1.3.0
+      gopd: 1.2.0
+
+  duplexer@0.1.2: {}
+
+  duplexify@3.7.1:
+    dependencies:
+      end-of-stream: 1.4.5
+      inherits: 2.0.4
+      readable-stream: 2.3.8
+      stream-shift: 1.0.3
+
+  each-props@1.3.2:
+    dependencies:
+      is-plain-object: 2.0.4
+      object.defaults: 1.1.0
+
+  eastasianwidth@0.2.0: {}
+
+  editorconfig@1.0.4:
+    dependencies:
+      '@one-ini/wasm': 0.1.1
+      commander: 10.0.1
+      minimatch: 9.0.1
+      semver: 7.7.2
+
+  ee-first@1.1.1: {}
+
+  electron-to-chromium@1.5.191: {}
+
+  electron@34.4.1:
+    dependencies:
+      '@electron/get': 2.0.3
+      '@types/node': 20.19.9
+      extract-zip: 2.0.1
+    transitivePeerDependencies:
+      - supports-color
+
+  emoji-regex@10.4.0: {}
+
+  emoji-regex@8.0.0: {}
+
+  emoji-regex@9.2.2: {}
+
+  emojis-list@3.0.0: {}
+
+  encodeurl@1.0.2: {}
+
+  end-of-stream@1.4.5:
+    dependencies:
+      once: 1.4.0
+
+  enhanced-resolve@5.18.2:
+    dependencies:
+      graceful-fs: 4.2.11
+      tapable: 2.2.2
+
+  entities@2.2.0: {}
+
+  entities@4.5.0: {}
+
+  env-paths@2.2.1: {}
+
+  env-paths@3.0.0: {}
+
+  envinfo@7.14.0: {}
+
+  errno@0.1.8:
+    dependencies:
+      prr: 1.0.1
+
+  error-ex@1.3.2:
+    dependencies:
+      is-arrayish: 0.2.1
+
+  es-abstract@1.24.0:
+    dependencies:
+      array-buffer-byte-length: 1.0.2
+      arraybuffer.prototype.slice: 1.0.4
+      available-typed-arrays: 1.0.7
+      call-bind: 1.0.8
+      call-bound: 1.0.4
+      data-view-buffer: 1.0.2
+      data-view-byte-length: 1.0.2
+      data-view-byte-offset: 1.0.1
+      es-define-property: 1.0.1
+      es-errors: 1.3.0
+      es-object-atoms: 1.1.1
+      es-set-tostringtag: 2.1.0
+      es-to-primitive: 1.3.0
+      function.prototype.name: 1.1.8
+      get-intrinsic: 1.3.0
+      get-proto: 1.0.1
+      get-symbol-description: 1.1.0
+      globalthis: 1.0.4
+      gopd: 1.2.0
+      has-property-descriptors: 1.0.2
+      has-proto: 1.2.0
+      has-symbols: 1.1.0
+      hasown: 2.0.2
+      internal-slot: 1.1.0
+      is-array-buffer: 3.0.5
+      is-callable: 1.2.7
+      is-data-view: 1.0.2
+      is-negative-zero: 2.0.3
+      is-regex: 1.2.1
+      is-set: 2.0.3
+      is-shared-array-buffer: 1.0.4
+      is-string: 1.1.1
+      is-typed-array: 1.1.15
+      is-weakref: 1.1.1
+      math-intrinsics: 1.1.0
+      object-inspect: 1.13.4
+      object-keys: 1.1.1
+      object.assign: 4.1.7
+      own-keys: 1.0.1
+      regexp.prototype.flags: 1.5.4
+      safe-array-concat: 1.1.3
+      safe-push-apply: 1.0.0
+      safe-regex-test: 1.1.0
+      set-proto: 1.0.0
+      stop-iteration-iterator: 1.1.0
+      string.prototype.trim: 1.2.10
+      string.prototype.trimend: 1.0.9
+      string.prototype.trimstart: 1.0.8
+      typed-array-buffer: 1.0.3
+      typed-array-byte-length: 1.0.3
+      typed-array-byte-offset: 1.0.4
+      typed-array-length: 1.0.7
+      unbox-primitive: 1.1.0
+      which-typed-array: 1.1.19
+
+  es-define-property@1.0.1: {}
+
+  es-errors@1.3.0: {}
+
+  es-module-lexer@1.7.0: {}
+
+  es-object-atoms@1.1.1:
+    dependencies:
+      es-errors: 1.3.0
+
+  es-set-tostringtag@2.1.0:
+    dependencies:
+      es-errors: 1.3.0
+      get-intrinsic: 1.3.0
+      has-tostringtag: 1.0.2
+      hasown: 2.0.2
+
+  es-to-primitive@1.3.0:
+    dependencies:
+      is-callable: 1.2.7
+      is-date-object: 1.1.0
+      is-symbol: 1.1.1
+
+  es5-ext@0.10.64:
+    dependencies:
+      es6-iterator: 2.0.3
+      es6-symbol: 3.1.4
+      esniff: 2.0.1
+      next-tick: 1.1.0
+
+  es6-error@4.1.1:
+    optional: true
+
+  es6-iterator@2.0.3:
+    dependencies:
+      d: 1.0.2
+      es5-ext: 0.10.64
+      es6-symbol: 3.1.4
+
+  es6-symbol@3.1.4:
+    dependencies:
+      d: 1.0.2
+      ext: 1.7.0
+
+  es6-weak-map@2.0.3:
+    dependencies:
+      d: 1.0.2
+      es5-ext: 0.10.64
+      es6-iterator: 2.0.3
+      es6-symbol: 3.1.4
+
+  esbuild@0.25.8:
+    optionalDependencies:
+      '@esbuild/aix-ppc64': 0.25.8
+      '@esbuild/android-arm': 0.25.8
+      '@esbuild/android-arm64': 0.25.8
+      '@esbuild/android-x64': 0.25.8
+      '@esbuild/darwin-arm64': 0.25.8
+      '@esbuild/darwin-x64': 0.25.8
+      '@esbuild/freebsd-arm64': 0.25.8
+      '@esbuild/freebsd-x64': 0.25.8
+      '@esbuild/linux-arm': 0.25.8
+      '@esbuild/linux-arm64': 0.25.8
+      '@esbuild/linux-ia32': 0.25.8
+      '@esbuild/linux-loong64': 0.25.8
+      '@esbuild/linux-mips64el': 0.25.8
+      '@esbuild/linux-ppc64': 0.25.8
+      '@esbuild/linux-riscv64': 0.25.8
+      '@esbuild/linux-s390x': 0.25.8
+      '@esbuild/linux-x64': 0.25.8
+      '@esbuild/netbsd-arm64': 0.25.8
+      '@esbuild/netbsd-x64': 0.25.8
+      '@esbuild/openbsd-arm64': 0.25.8
+      '@esbuild/openbsd-x64': 0.25.8
+      '@esbuild/openharmony-arm64': 0.25.8
+      '@esbuild/sunos-x64': 0.25.8
+      '@esbuild/win32-arm64': 0.25.8
+      '@esbuild/win32-ia32': 0.25.8
+      '@esbuild/win32-x64': 0.25.8
+
+  escalade@3.2.0: {}
+
+  escape-html@1.0.3: {}
+
+  escape-string-regexp@1.0.5: {}
+
+  escape-string-regexp@4.0.0: {}
+
+  eslint-scope@5.1.1:
+    dependencies:
+      esrecurse: 4.3.0
+      estraverse: 4.3.0
+
+  esniff@2.0.1:
+    dependencies:
+      d: 1.0.2
+      es5-ext: 0.10.64
+      event-emitter: 0.3.5
+      type: 2.7.3
+
+  esrecurse@4.3.0:
+    dependencies:
+      estraverse: 5.3.0
+
+  estraverse@4.3.0: {}
+
+  estraverse@5.3.0: {}
+
+  event-emitter@0.3.5:
+    dependencies:
+      d: 1.0.2
+      es5-ext: 0.10.64
+
+  event-stream@3.3.4:
+    dependencies:
+      duplexer: 0.1.2
+      from: 0.1.7
+      map-stream: 0.1.0
+      pause-stream: 0.0.11
+      split: 0.3.3
+      stream-combiner: 0.0.4
+      through: 2.3.8
+
+  events@3.3.0: {}
+
+  eventsource-parser@3.0.3: {}
+
+  expand-brackets@2.1.4:
+    dependencies:
+      debug: 2.6.9
+      define-property: 0.2.5
+      extend-shallow: 2.0.1
+      posix-character-classes: 0.1.1
+      regex-not: 1.0.2
+      snapdragon: 0.8.2
+      to-regex: 3.0.2
+    transitivePeerDependencies:
+      - supports-color
+
+  expand-template@2.0.3: {}
+
+  expand-tilde@2.0.2:
+    dependencies:
+      homedir-polyfill: 1.0.3
+
+  ext@1.7.0:
+    dependencies:
+      type: 2.7.3
+
+  extend-shallow@1.1.4:
+    dependencies:
+      kind-of: 1.1.0
+
+  extend-shallow@2.0.1:
+    dependencies:
+      is-extendable: 0.1.1
+
+  extend-shallow@3.0.2:
+    dependencies:
+      assign-symbols: 1.0.0
+      is-extendable: 1.0.1
+
+  extend@3.0.2: {}
+
+  extglob@2.0.4:
+    dependencies:
+      array-unique: 0.3.2
+      define-property: 1.0.0
+      expand-brackets: 2.1.4
+      extend-shallow: 2.0.1
+      fragment-cache: 0.2.1
+      regex-not: 1.0.2
+      snapdragon: 0.8.2
+      to-regex: 3.0.2
+    transitivePeerDependencies:
+      - supports-color
+
+  extract-zip@2.0.1:
+    dependencies:
+      debug: 4.4.1(supports-color@8.1.1)
+      get-stream: 5.2.0
+      yauzl: 2.10.0
+    optionalDependencies:
+      '@types/yauzl': 2.10.3
+    transitivePeerDependencies:
+      - supports-color
+
+  fancy-log@1.3.3:
+    dependencies:
+      ansi-gray: 0.1.1
+      color-support: 1.1.3
+      parse-node-version: 1.0.1
+      time-stamp: 1.1.0
+
+  fast-content-type-parse@3.0.0: {}
+
+  fast-deep-equal@3.1.3: {}
+
+  fast-fifo@1.3.2: {}
+
+  fast-glob@3.3.3:
+    dependencies:
+      '@nodelib/fs.stat': 2.0.5
+      '@nodelib/fs.walk': 1.2.8
+      glob-parent: 5.1.2
+      merge2: 1.4.1
+      micromatch: 4.0.8
+
+  fast-json-stable-stringify@2.1.0: {}
+
+  fast-levenshtein@1.1.4: {}
+
+  fast-uri@3.0.6: {}
+
+  fast-xml-parser@5.2.5:
+    dependencies:
+      strnum: 2.1.1
+
+  fastest-levenshtein@1.0.16: {}
+
+  fastq@1.19.1:
+    dependencies:
+      reusify: 1.1.0
+
+  fd-slicer@1.1.0:
+    dependencies:
+      pend: 1.2.0
+
+  fdir@6.4.6(picomatch@4.0.3):
+    optionalDependencies:
+      picomatch: 4.0.3
+
+  file-loader@6.2.0(webpack@5.100.2):
+    dependencies:
+      loader-utils: 2.0.4
+      schema-utils: 3.3.0
+      webpack: 5.100.2(esbuild@0.25.8)(webpack-cli@5.1.4)
+
+  file-uri-to-path@1.0.0: {}
+
+  fill-range@4.0.0:
+    dependencies:
+      extend-shallow: 2.0.1
+      is-number: 3.0.0
+      repeat-string: 1.6.1
+      to-regex-range: 2.1.1
+
+  fill-range@7.1.1:
+    dependencies:
+      to-regex-range: 5.0.1
+
+  find-parent-dir@0.3.1: {}
+
+  find-replace@5.0.2: {}
+
+  find-up@1.1.2:
+    dependencies:
+      path-exists: 2.1.0
+      pinkie-promise: 2.0.1
+
+  find-up@4.1.0:
+    dependencies:
+      locate-path: 5.0.0
+      path-exists: 4.0.0
+
+  find-up@5.0.0:
+    dependencies:
+      locate-path: 6.0.0
+      path-exists: 4.0.0
+
+  findup-sync@2.0.0:
+    dependencies:
+      detect-file: 1.0.0
+      is-glob: 3.1.0
+      micromatch: 3.1.10
+      resolve-dir: 1.0.1
+    transitivePeerDependencies:
+      - supports-color
+
+  findup-sync@3.0.0:
+    dependencies:
+      detect-file: 1.0.0
+      is-glob: 4.0.3
+      micromatch: 3.1.10
+      resolve-dir: 1.0.1
+    transitivePeerDependencies:
+      - supports-color
+
+  fined@1.2.0:
+    dependencies:
+      expand-tilde: 2.0.2
+      is-plain-object: 2.0.4
+      object.defaults: 1.1.0
+      object.pick: 1.3.0
+      parse-filepath: 1.0.2
+
+  fix-dts-default-cjs-exports@1.0.1:
+    dependencies:
+      magic-string: 0.30.17
+      mlly: 1.7.4
+      rollup: 4.46.1
+
+  flagged-respawn@1.0.1: {}
+
+  flat@5.0.2: {}
+
+  flush-write-stream@1.1.1:
+    dependencies:
+      inherits: 2.0.4
+      readable-stream: 2.3.8
+
+  font-finder@1.1.0:
+    dependencies:
+      get-system-fonts: 2.0.2
+      promise-stream-reader: 1.0.1
+
+  font-ligatures@1.4.1:
+    dependencies:
+      font-finder: 1.1.0
+      lru-cache: 6.0.0
+      opentype.js: 0.8.0
+
+  for-each@0.3.5:
+    dependencies:
+      is-callable: 1.2.7
+
+  for-in@1.0.2: {}
+
+  for-own@1.0.0:
+    dependencies:
+      for-in: 1.0.2
+
+  foreground-child@3.3.1:
+    dependencies:
+      cross-spawn: 7.0.6
+      signal-exit: 4.1.0
+
+  form-data-encoder@4.1.0: {}
+
+  fragment-cache@0.2.1:
+    dependencies:
+      map-cache: 0.2.2
+
+  fresh@0.5.2: {}
+
+  from@0.1.7: {}
+
+  fs-constants@1.0.0: {}
+
+  fs-extra@11.3.0:
+    dependencies:
+      graceful-fs: 4.2.11
+      jsonfile: 6.1.0
+      universalify: 2.0.1
+
+  fs-extra@8.1.0:
+    dependencies:
+      graceful-fs: 4.2.11
+      jsonfile: 4.0.0
+      universalify: 0.1.2
+
+  fs-minipass@2.1.0:
+    dependencies:
+      minipass: 3.3.6
+
+  fs-mkdirp-stream@1.0.0:
+    dependencies:
+      graceful-fs: 4.2.11
+      through2: 2.0.5
+
+  fs.realpath@1.0.0: {}
+
+  fsevents@1.2.13:
+    dependencies:
+      bindings: 1.5.0
+      nan: 2.23.0
+    optional: true
+
+  fsevents@2.3.2:
+    optional: true
+
+  fsevents@2.3.3:
+    optional: true
+
+  fstream@1.0.12:
+    dependencies:
+      graceful-fs: 4.2.11
+      inherits: 2.0.4
+      mkdirp: 0.5.6
+      rimraf: 2.7.1
+
+  function-bind@1.1.2: {}
+
+  function.prototype.name@1.1.8:
+    dependencies:
+      call-bind: 1.0.8
+      call-bound: 1.0.4
+      define-properties: 1.2.1
+      functions-have-names: 1.2.3
+      hasown: 2.0.2
+      is-callable: 1.2.7
+
+  functions-have-names@1.2.3: {}
+
+  gensync@1.0.0-beta.2: {}
+
+  get-caller-file@1.0.3: {}
+
+  get-caller-file@2.0.5: {}
+
+  get-east-asian-width@1.3.0: {}
+
+  get-intrinsic@1.3.0:
+    dependencies:
+      call-bind-apply-helpers: 1.0.2
+      es-define-property: 1.0.1
+      es-errors: 1.3.0
+      es-object-atoms: 1.1.1
+      function-bind: 1.1.2
+      get-proto: 1.0.1
+      gopd: 1.2.0
+      has-symbols: 1.1.0
+      hasown: 2.0.2
+      math-intrinsics: 1.1.0
+
+  get-proto@1.0.1:
+    dependencies:
+      dunder-proto: 1.0.1
+      es-object-atoms: 1.1.1
+
+  get-stdin@7.0.0: {}
+
+  get-stream@5.2.0:
+    dependencies:
+      pump: 3.0.3
+
+  get-stream@9.0.1:
+    dependencies:
+      '@sec-ant/readable-stream': 0.4.1
+      is-stream: 4.0.1
+
+  get-symbol-description@1.1.0:
+    dependencies:
+      call-bound: 1.0.4
+      es-errors: 1.3.0
+      get-intrinsic: 1.3.0
+
+  get-system-fonts@2.0.2: {}
+
+  get-value@2.0.6: {}
+
+  github-from-package@0.0.0: {}
+
+  glob-parent@3.1.0:
+    dependencies:
+      is-glob: 3.1.0
+      path-dirname: 1.0.2
+
+  glob-parent@5.1.2:
+    dependencies:
+      is-glob: 4.0.3
+
+  glob-parent@6.0.2:
+    dependencies:
+      is-glob: 4.0.3
+
+  glob-stream@6.1.0:
+    dependencies:
+      extend: 3.0.2
+      glob: 7.2.3
+      glob-parent: 3.1.0
+      is-negated-glob: 1.0.0
+      ordered-read-streams: 1.0.1
+      pumpify: 1.5.1
+      readable-stream: 2.3.8
+      remove-trailing-separator: 1.1.0
+      to-absolute-glob: 2.0.2
+      unique-stream: 2.3.1
+
+  glob-to-regexp@0.4.1: {}
+
+  glob-watcher@5.0.5:
+    dependencies:
+      anymatch: 2.0.0
+      async-done: 1.3.2
+      chokidar: 2.1.8
+      is-negated-glob: 1.0.0
+      just-debounce: 1.1.0
+      normalize-path: 3.0.0
+      object.defaults: 1.1.0
+    transitivePeerDependencies:
+      - supports-color
+
+  glob@10.4.5:
+    dependencies:
+      foreground-child: 3.3.1
+      jackspeak: 3.4.3
+      minimatch: 9.0.5
+      minipass: 7.1.2
+      package-json-from-dist: 1.0.1
+      path-scurry: 1.11.1
+
+  glob@11.0.3:
+    dependencies:
+      foreground-child: 3.3.1
+      jackspeak: 4.1.1
+      minimatch: 10.0.3
+      minipass: 7.1.2
+      package-json-from-dist: 1.0.1
+      path-scurry: 2.0.0
+
+  glob@5.0.15:
+    dependencies:
+      inflight: 1.0.6
+      inherits: 2.0.4
+      minimatch: 3.1.2
+      once: 1.4.0
+      path-is-absolute: 1.0.1
+
+  glob@7.2.3:
+    dependencies:
+      fs.realpath: 1.0.0
+      inflight: 1.0.6
+      inherits: 2.0.4
+      minimatch: 3.1.2
+      once: 1.4.0
+      path-is-absolute: 1.0.1
+
+  glob@8.1.0:
+    dependencies:
+      fs.realpath: 1.0.0
+      inflight: 1.0.6
+      inherits: 2.0.4
+      minimatch: 5.1.6
+      once: 1.4.0
+
+  global-agent@3.0.0:
+    dependencies:
+      boolean: 3.2.0
+      es6-error: 4.1.1
+      matcher: 3.0.0
+      roarr: 2.15.4
+      semver: 7.7.2
+      serialize-error: 7.0.1
+    optional: true
+
+  global-modules@1.0.0:
+    dependencies:
+      global-prefix: 1.0.2
+      is-windows: 1.0.2
+      resolve-dir: 1.0.1
+
+  global-prefix@1.0.2:
+    dependencies:
+      expand-tilde: 2.0.2
+      homedir-polyfill: 1.0.3
+      ini: 1.3.8
+      is-windows: 1.0.2
+      which: 1.3.1
+
+  globalthis@1.0.4:
+    dependencies:
+      define-properties: 1.2.1
+      gopd: 1.2.0
+
+  globby@13.2.2:
+    dependencies:
+      dir-glob: 3.0.1
+      fast-glob: 3.3.3
+      ignore: 5.3.2
+      merge2: 1.4.1
+      slash: 4.0.0
+
+  glogg@1.0.2:
+    dependencies:
+      sparkles: 1.0.1
+
+  gopd@1.2.0: {}
+
+  got@11.8.6:
+    dependencies:
+      '@sindresorhus/is': 4.6.0
+      '@szmarczak/http-timer': 4.0.6
+      '@types/cacheable-request': 6.0.3
+      '@types/responselike': 1.0.3
+      cacheable-lookup: 5.0.4
+      cacheable-request: 7.0.4
+      decompress-response: 6.0.0
+      http2-wrapper: 1.0.3
+      lowercase-keys: 2.0.0
+      p-cancelable: 2.1.1
+      responselike: 2.0.1
+
+  got@14.4.7:
+    dependencies:
+      '@sindresorhus/is': 7.0.2
+      '@szmarczak/http-timer': 5.0.1
+      cacheable-lookup: 7.0.0
+      cacheable-request: 12.0.1
+      decompress-response: 6.0.0
+      form-data-encoder: 4.1.0
+      http2-wrapper: 2.2.1
+      lowercase-keys: 3.0.0
+      p-cancelable: 4.0.1
+      responselike: 3.0.0
+      type-fest: 4.41.0
+
+  graceful-fs@4.2.11: {}
+
+  gulp-azure-storage@0.12.1:
+    dependencies:
+      '@azure/storage-blob': 12.28.0
+      delayed-stream: 0.0.6
+      event-stream: 3.3.4
+      mime: 1.6.0
+      progress: 1.1.8
+      queue: 3.1.0
+      streamifier: 0.1.1
+      vinyl: 2.2.1
+      vinyl-fs: 3.0.3
+      yargs: 15.4.1
+    transitivePeerDependencies:
+      - supports-color
+
+  gulp-bom@3.0.0(gulp@4.0.2):
+    dependencies:
+      plugin-error: 1.0.1
+      through2: 3.0.2
+    optionalDependencies:
+      gulp: 4.0.2
+
+  gulp-buffer@0.0.2:
+    dependencies:
+      through2: 0.4.2
+
+  gulp-cli@2.3.0:
+    dependencies:
+      ansi-colors: 1.1.0
+      archy: 1.0.0
+      array-sort: 1.0.0
+      color-support: 1.1.3
+      concat-stream: 1.6.2
+      copy-props: 2.0.5
+      fancy-log: 1.3.3
+      gulplog: 1.0.0
+      interpret: 1.4.0
+      isobject: 3.0.1
+      liftoff: 3.1.0
+      matchdep: 2.0.0
+      mute-stdout: 1.0.1
+      pretty-hrtime: 1.0.3
+      replace-homedir: 1.0.0
+      semver-greatest-satisfied-range: 1.1.0
+      v8flags: 3.2.0
+      yargs: 7.1.2
+    transitivePeerDependencies:
+      - supports-color
+
+  gulp-filter@5.1.0:
+    dependencies:
+      multimatch: 2.1.0
+      plugin-error: 0.1.2
+      streamfilter: 1.0.7
+
+  gulp-flatmap@1.0.2:
+    dependencies:
+      plugin-error: 0.1.2
+      through2: 2.0.3
+
+  gulp-gunzip@1.1.0:
+    dependencies:
+      through2: 2.0.5
+      vinyl: 2.0.2
+
+  gulp-gzip@1.4.2:
+    dependencies:
+      ansi-colors: 1.1.0
+      bytes: 3.1.2
+      fancy-log: 1.3.3
+      plugin-error: 1.0.1
+      stream-to-array: 2.3.0
+      through2: 2.0.5
+
+  gulp-json-editor@2.6.0:
+    dependencies:
+      deepmerge: 4.3.1
+      detect-indent: 6.1.0
+      js-beautify: 1.15.4
+      plugin-error: 2.0.1
+      through2: 4.0.2
+
+  gulp-plumber@1.2.1:
+    dependencies:
+      chalk: 1.1.3
+      fancy-log: 1.3.3
+      plugin-error: 0.1.2
+      through2: 2.0.5
+
+  gulp-rename@1.2.2: {}
+
+  gulp-rename@1.4.0: {}
+
+  gulp-replace@0.5.4:
+    dependencies:
+      istextorbinary: 1.0.2
+      readable-stream: 2.3.8
+      replacestream: 4.0.3
+
+  gulp-sourcemaps@3.0.0:
+    dependencies:
+      '@gulp-sourcemaps/identity-map': 2.0.1
+      '@gulp-sourcemaps/map-sources': 1.0.0
+      acorn: 6.4.2
+      convert-source-map: 1.9.0
+      css: 3.0.0
+      debug-fabulous: 1.1.0
+      detect-newline: 2.1.0
+      graceful-fs: 4.2.11
+      source-map: 0.6.1
+      strip-bom-string: 1.0.0
+      through2: 2.0.5
+    transitivePeerDependencies:
+      - supports-color
+
+  gulp-svgmin@4.1.0:
+    dependencies:
+      lodash.clonedeep: 4.5.0
+      plugin-error: 1.0.1
+      svgo: 2.8.0
+
+  gulp-symdest@1.3.0:
+    dependencies:
+      event-stream: 3.3.4
+      mkdirp: 0.5.6
+      queue: 3.1.0
+      vinyl-fs: 3.0.3
+
+  gulp-untar@0.0.7:
+    dependencies:
+      event-stream: 3.3.4
+      streamifier: 0.1.1
+      tar: 2.2.2
+      through2: 2.0.5
+      vinyl: 1.2.0
+
+  gulp-vinyl-zip@2.5.0:
+    dependencies:
+      queue: 4.5.1
+      through: 2.3.8
+      through2: 2.0.5
+      vinyl: 2.2.1
+      vinyl-fs: 3.0.3
+      yauzl: 2.10.0
+      yazl: 2.5.1
+
+  gulp@4.0.2:
+    dependencies:
+      glob-watcher: 5.0.5
+      gulp-cli: 2.3.0
+      undertaker: 1.3.0
+      vinyl-fs: 3.0.3
+    transitivePeerDependencies:
+      - supports-color
+
+  gulplog@1.0.0:
+    dependencies:
+      glogg: 1.0.2
+
+  gunzip-maybe@1.4.2:
+    dependencies:
+      browserify-zlib: 0.1.4
+      is-deflate: 1.0.0
+      is-gzip: 1.0.0
+      peek-stream: 1.1.3
+      pumpify: 1.5.1
+      through2: 2.0.5
+
+  has-ansi@2.0.0:
+    dependencies:
+      ansi-regex: 2.1.1
+
+  has-bigints@1.1.0: {}
+
+  has-flag@3.0.0: {}
+
+  has-flag@4.0.0: {}
+
+  has-property-descriptors@1.0.2:
+    dependencies:
+      es-define-property: 1.0.1
+
+  has-proto@1.2.0:
+    dependencies:
+      dunder-proto: 1.0.1
+
+  has-symbols@1.1.0: {}
+
+  has-tostringtag@1.0.2:
+    dependencies:
+      has-symbols: 1.1.0
+
+  has-value@0.3.1:
+    dependencies:
+      get-value: 2.0.6
+      has-values: 0.1.4
+      isobject: 2.1.0
+
+  has-value@1.0.0:
+    dependencies:
+      get-value: 2.0.6
+      has-values: 1.0.0
+      isobject: 3.0.1
+
+  has-values@0.1.4: {}
+
+  has-values@1.0.0:
+    dependencies:
+      is-number: 3.0.0
+      kind-of: 4.0.0
+
+  hasown@2.0.2:
+    dependencies:
+      function-bind: 1.1.2
+
+  he@1.2.0: {}
+
+  homedir-polyfill@1.0.3:
+    dependencies:
+      parse-passwd: 1.0.0
+
+  hosted-git-info@2.8.9: {}
+
+  html-escaper@2.0.2: {}
+
+  http-assert@1.5.0:
+    dependencies:
+      deep-equal: 1.0.1
+      http-errors: 1.8.1
+
+  http-cache-semantics@4.2.0: {}
+
+  http-errors@1.6.3:
+    dependencies:
+      depd: 1.1.2
+      inherits: 2.0.3
+      setprototypeof: 1.1.0
+      statuses: 1.5.0
+
+  http-errors@1.8.1:
+    dependencies:
+      depd: 1.1.2
+      inherits: 2.0.4
+      setprototypeof: 1.2.0
+      statuses: 1.5.0
+      toidentifier: 1.0.1
+
+  http-errors@2.0.0:
+    dependencies:
+      depd: 2.0.0
+      inherits: 2.0.4
+      setprototypeof: 1.2.0
+      statuses: 2.0.1
+      toidentifier: 1.0.1
+
+  http-proxy-agent@7.0.2:
+    dependencies:
+      agent-base: 7.1.4
+      debug: 4.4.1(supports-color@8.1.1)
+    transitivePeerDependencies:
+      - supports-color
+
+  http2-wrapper@1.0.3:
+    dependencies:
+      quick-lru: 5.1.1
+      resolve-alpn: 1.2.1
+
+  http2-wrapper@2.2.1:
+    dependencies:
+      quick-lru: 5.1.1
+      resolve-alpn: 1.2.1
+
+  https-proxy-agent@7.0.6:
+    dependencies:
+      agent-base: 7.1.4
+      debug: 4.4.1(supports-color@8.1.1)
+    transitivePeerDependencies:
+      - supports-color
+
+  husky@0.13.4:
+    dependencies:
+      chalk: 1.1.3
+      find-parent-dir: 0.3.1
+      is-ci: 1.2.1
+      normalize-path: 1.0.0
+
+  icss-utils@5.1.0(postcss@8.5.6):
+    dependencies:
+      postcss: 8.5.6
+
+  ieee754@1.2.1: {}
+
+  ignore@5.3.2: {}
+
+  immediate@3.0.6: {}
+
+  import-local@3.2.0:
+    dependencies:
+      pkg-dir: 4.2.0
+      resolve-cwd: 3.0.0
+
+  inflight@1.0.6:
+    dependencies:
+      once: 1.4.0
+      wrappy: 1.0.2
+
+  inherits@2.0.3: {}
+
+  inherits@2.0.4: {}
+
+  ini@1.3.8: {}
+
+  innosetup@6.4.1: {}
+
+  internal-slot@1.1.0:
+    dependencies:
+      es-errors: 1.3.0
+      hasown: 2.0.2
+      side-channel: 1.1.0
+
+  interpret@1.4.0: {}
+
+  interpret@3.1.1: {}
+
+  invert-kv@1.0.0: {}
+
+  ip-address@9.0.5:
+    dependencies:
+      jsbn: 1.1.0
+      sprintf-js: 1.1.3
+
+  is-absolute@1.0.0:
+    dependencies:
+      is-relative: 1.0.0
+      is-windows: 1.0.2
+
+  is-accessor-descriptor@1.0.1:
+    dependencies:
+      hasown: 2.0.2
+
+  is-arguments@1.2.0:
+    dependencies:
+      call-bound: 1.0.4
+      has-tostringtag: 1.0.2
+
+  is-array-buffer@3.0.5:
+    dependencies:
+      call-bind: 1.0.8
+      call-bound: 1.0.4
+      get-intrinsic: 1.3.0
+
+  is-arrayish@0.2.1: {}
+
+  is-async-function@2.1.1:
+    dependencies:
+      async-function: 1.0.0
+      call-bound: 1.0.4
+      get-proto: 1.0.1
+      has-tostringtag: 1.0.2
+      safe-regex-test: 1.1.0
+
+  is-bigint@1.1.0:
+    dependencies:
+      has-bigints: 1.1.0
+
+  is-binary-path@1.0.1:
+    dependencies:
+      binary-extensions: 1.13.1
+
+  is-binary-path@2.1.0:
+    dependencies:
+      binary-extensions: 2.3.0
+
+  is-boolean-object@1.2.2:
+    dependencies:
+      call-bound: 1.0.4
+      has-tostringtag: 1.0.2
+
+  is-buffer@1.1.6: {}
+
+  is-callable@1.2.7: {}
+
+  is-ci@1.2.1:
+    dependencies:
+      ci-info: 1.6.0
+
+  is-core-module@2.16.1:
+    dependencies:
+      hasown: 2.0.2
+
+  is-data-descriptor@1.0.1:
+    dependencies:
+      hasown: 2.0.2
+
+  is-data-view@1.0.2:
+    dependencies:
+      call-bound: 1.0.4
+      get-intrinsic: 1.3.0
+      is-typed-array: 1.1.15
+
+  is-date-object@1.1.0:
+    dependencies:
+      call-bound: 1.0.4
+      has-tostringtag: 1.0.2
+
+  is-deflate@1.0.0: {}
+
+  is-descriptor@0.1.7:
+    dependencies:
+      is-accessor-descriptor: 1.0.1
+      is-data-descriptor: 1.0.1
+
+  is-descriptor@1.0.3:
+    dependencies:
+      is-accessor-descriptor: 1.0.1
+      is-data-descriptor: 1.0.1
+
+  is-docker@2.2.1: {}
+
+  is-extendable@0.1.1: {}
+
+  is-extendable@1.0.1:
+    dependencies:
+      is-plain-object: 2.0.4
+
+  is-extglob@2.1.1: {}
+
+  is-finalizationregistry@1.1.1:
+    dependencies:
+      call-bound: 1.0.4
+
+  is-fullwidth-code-point@1.0.0:
+    dependencies:
+      number-is-nan: 1.0.1
+
+  is-fullwidth-code-point@3.0.0: {}
+
+  is-generator-function@1.1.0:
+    dependencies:
+      call-bound: 1.0.4
+      get-proto: 1.0.1
+      has-tostringtag: 1.0.2
+      safe-regex-test: 1.1.0
+
+  is-glob@3.1.0:
+    dependencies:
+      is-extglob: 2.1.1
+
+  is-glob@4.0.3:
+    dependencies:
+      is-extglob: 2.1.1
+
+  is-gzip@1.0.0: {}
+
+  is-interactive@2.0.0: {}
+
+  is-map@2.0.3: {}
+
+  is-negated-glob@1.0.0: {}
+
+  is-negative-zero@2.0.3: {}
+
+  is-number-object@1.1.1:
+    dependencies:
+      call-bound: 1.0.4
+      has-tostringtag: 1.0.2
+
+  is-number@3.0.0:
+    dependencies:
+      kind-of: 3.2.2
+
+  is-number@4.0.0: {}
+
+  is-number@7.0.0: {}
+
+  is-plain-obj@1.1.0: {}
+
+  is-plain-obj@2.1.0: {}
+
+  is-plain-object@2.0.4:
+    dependencies:
+      isobject: 3.0.1
+
+  is-plain-object@5.0.0: {}
+
+  is-promise@2.2.2: {}
+
+  is-regex@1.2.1:
+    dependencies:
+      call-bound: 1.0.4
+      gopd: 1.2.0
+      has-tostringtag: 1.0.2
+      hasown: 2.0.2
+
+  is-relative@1.0.0:
+    dependencies:
+      is-unc-path: 1.0.0
+
+  is-set@2.0.3: {}
+
+  is-shared-array-buffer@1.0.4:
+    dependencies:
+      call-bound: 1.0.4
+
+  is-stream@1.1.0: {}
+
+  is-stream@4.0.1: {}
+
+  is-string@1.1.1:
+    dependencies:
+      call-bound: 1.0.4
+      has-tostringtag: 1.0.2
+
+  is-symbol@1.1.1:
+    dependencies:
+      call-bound: 1.0.4
+      has-symbols: 1.1.0
+      safe-regex-test: 1.1.0
+
+  is-typed-array@1.1.15:
+    dependencies:
+      which-typed-array: 1.1.19
+
+  is-unc-path@1.0.0:
+    dependencies:
+      unc-path-regex: 0.1.2
+
+  is-unicode-supported@0.1.0: {}
+
+  is-unicode-supported@1.3.0: {}
+
+  is-unicode-supported@2.1.0: {}
+
+  is-utf8@0.2.1: {}
+
+  is-valid-glob@1.0.0: {}
+
+  is-weakmap@2.0.2: {}
+
+  is-weakref@1.1.1:
+    dependencies:
+      call-bound: 1.0.4
+
+  is-weakset@2.0.4:
+    dependencies:
+      call-bound: 1.0.4
+      get-intrinsic: 1.3.0
+
+  is-windows@1.0.2: {}
+
+  is-wsl@2.2.0:
+    dependencies:
+      is-docker: 2.2.1
+
+  isarray@0.0.1: {}
+
+  isarray@1.0.0: {}
+
+  isarray@2.0.5: {}
+
+  isexe@2.0.0: {}
+
+  isobject@2.1.0:
+    dependencies:
+      isarray: 1.0.0
+
+  isobject@3.0.1: {}
+
+  istanbul-lib-coverage@3.2.2: {}
+
+  istanbul-lib-instrument@6.0.3:
+    dependencies:
+      '@babel/core': 7.28.0
+      '@babel/parser': 7.28.0
+      '@istanbuljs/schema': 0.1.3
+      istanbul-lib-coverage: 3.2.2
+      semver: 7.7.2
+    transitivePeerDependencies:
+      - supports-color
+
+  istanbul-lib-report@3.0.1:
+    dependencies:
+      istanbul-lib-coverage: 3.2.2
+      make-dir: 4.0.0
+      supports-color: 7.2.0
+
+  istanbul-lib-source-maps@4.0.1:
+    dependencies:
+      debug: 4.4.1(supports-color@8.1.1)
+      istanbul-lib-coverage: 3.2.2
+      source-map: 0.6.1
+    transitivePeerDependencies:
+      - supports-color
+
+  istanbul-reports@3.1.7:
+    dependencies:
+      html-escaper: 2.0.2
+      istanbul-lib-report: 3.0.1
+
+  istextorbinary@1.0.2:
+    dependencies:
+      binaryextensions: 1.0.1
+      textextensions: 1.0.2
+
+  jackspeak@3.4.3:
+    dependencies:
+      '@isaacs/cliui': 8.0.2
+    optionalDependencies:
+      '@pkgjs/parseargs': 0.11.0
+
+  jackspeak@4.1.1:
+    dependencies:
+      '@isaacs/cliui': 8.0.2
+
+  jest-worker@27.5.1:
+    dependencies:
+      '@types/node': 20.19.9
+      merge-stream: 2.0.0
+      supports-color: 8.1.1
+
+  joycon@3.1.1: {}
+
+  js-base64@3.7.7: {}
+
+  js-beautify@1.15.4:
+    dependencies:
+      config-chain: 1.1.13
+      editorconfig: 1.0.4
+      glob: 10.4.5
+      js-cookie: 3.0.5
+      nopt: 7.2.1
+
+  js-cookie@3.0.5: {}
+
+  js-tokens@4.0.0: {}
+
+  js-yaml@4.1.0:
+    dependencies:
+      argparse: 2.0.1
+
+  jsbn@1.1.0: {}
+
+  jschardet@3.1.4: {}
+
+  jsesc@3.1.0: {}
+
+  json-buffer@3.0.1: {}
+
+  json-parse-better-errors@1.0.2: {}
+
+  json-parse-even-better-errors@2.3.1: {}
+
+  json-schema-traverse@0.4.1: {}
+
+  json-schema-traverse@1.0.0: {}
+
+  json-stable-stringify-without-jsonify@1.0.1: {}
+
+  json-stringify-safe@5.0.1:
+    optional: true
+
+  json5@2.2.3: {}
+
+  jsonfile@4.0.0:
+    optionalDependencies:
+      graceful-fs: 4.2.11
+
+  jsonfile@6.1.0:
+    dependencies:
+      universalify: 2.0.1
+    optionalDependencies:
+      graceful-fs: 4.2.11
+
+  jszip@3.10.1:
+    dependencies:
+      lie: 3.3.0
+      pako: 1.0.11
+      readable-stream: 2.3.8
+      setimmediate: 1.0.5
+
+  just-debounce@1.1.0: {}
+
+  just-extend@6.2.0: {}
+
+  kerberos@2.1.1:
+    dependencies:
+      bindings: 1.5.0
+      node-addon-api: 6.1.0
+      prebuild-install: 7.1.3
+
+  keygrip@1.1.0:
+    dependencies:
+      tsscmp: 1.0.6
+
+  keyv@4.5.4:
+    dependencies:
+      json-buffer: 3.0.1
+
+  kind-of@1.1.0: {}
+
+  kind-of@3.2.2:
+    dependencies:
+      is-buffer: 1.1.6
+
+  kind-of@4.0.0:
+    dependencies:
+      is-buffer: 1.1.6
+
+  kind-of@5.1.0: {}
+
+  kind-of@6.0.3: {}
+
+  koa-compose@4.1.0: {}
+
+  koa-convert@2.0.0:
+    dependencies:
+      co: 4.6.0
+      koa-compose: 4.1.0
+
+  koa-morgan@1.0.1:
+    dependencies:
+      morgan: 1.10.1
+    transitivePeerDependencies:
+      - supports-color
+
+  koa-mount@4.2.0:
+    dependencies:
+      debug: 4.4.1(supports-color@8.1.1)
+      koa-compose: 4.1.0
+    transitivePeerDependencies:
+      - supports-color
+
+  koa-send@5.0.1:
+    dependencies:
+      debug: 4.4.1(supports-color@8.1.1)
+      http-errors: 1.8.1
+      resolve-path: 1.4.0
+    transitivePeerDependencies:
+      - supports-color
+
+  koa-static@5.0.0:
+    dependencies:
+      debug: 3.2.7
+      koa-send: 5.0.1
+    transitivePeerDependencies:
+      - supports-color
+
+  koa@2.16.1:
+    dependencies:
+      accepts: 1.3.8
+      cache-content-type: 1.0.1
+      content-disposition: 0.5.4
+      content-type: 1.0.5
+      cookies: 0.9.1
+      debug: 4.4.1(supports-color@8.1.1)
+      delegates: 1.0.0
+      depd: 2.0.0
+      destroy: 1.2.0
+      encodeurl: 1.0.2
+      escape-html: 1.0.3
+      fresh: 0.5.2
+      http-assert: 1.5.0
+      http-errors: 1.8.1
+      is-generator-function: 1.1.0
+      koa-compose: 4.1.0
+      koa-convert: 2.0.0
+      on-finished: 2.4.1
+      only: 0.0.2
+      parseurl: 1.3.3
+      statuses: 1.5.0
+      type-is: 1.6.18
+      vary: 1.1.2
+    transitivePeerDependencies:
+      - supports-color
+
+  last-run@1.1.1:
+    dependencies:
+      default-resolution: 2.0.0
+      es6-weak-map: 2.0.3
+
+  lazy.js@0.4.3: {}
+
+  lazystream@1.0.1:
+    dependencies:
+      readable-stream: 2.3.8
+
+  lcid@1.0.0:
+    dependencies:
+      invert-kv: 1.0.0
+
+  lead@1.0.0:
+    dependencies:
+      flush-write-stream: 1.1.1
+
+  lie@3.3.0:
+    dependencies:
+      immediate: 3.0.6
+
+  liftoff@3.1.0:
+    dependencies:
+      extend: 3.0.2
+      findup-sync: 3.0.0
+      fined: 1.2.0
+      flagged-respawn: 1.0.1
+      is-plain-object: 2.0.4
+      object.map: 1.0.1
+      rechoir: 0.6.2
+      resolve: 1.22.10
+    transitivePeerDependencies:
+      - supports-color
+
+  lilconfig@3.1.3: {}
+
+  lines-and-columns@1.2.4: {}
+
+  linkify-it@5.0.0:
+    dependencies:
+      uc.micro: 2.1.0
+
+  load-json-file@1.1.0:
+    dependencies:
+      graceful-fs: 4.2.11
+      parse-json: 2.2.0
+      pify: 2.3.0
+      pinkie-promise: 2.0.1
+      strip-bom: 2.0.0
+
+  load-json-file@4.0.0:
+    dependencies:
+      graceful-fs: 4.2.11
+      parse-json: 4.0.0
+      pify: 3.0.0
+      strip-bom: 3.0.0
+
+  load-tsconfig@0.2.5: {}
+
+  loader-runner@4.3.0: {}
+
+  loader-utils@2.0.4:
+    dependencies:
+      big.js: 5.2.2
+      emojis-list: 3.0.0
+      json5: 2.2.3
+
+  locate-path@5.0.0:
+    dependencies:
+      p-locate: 4.1.0
+
+  locate-path@6.0.0:
+    dependencies:
+      p-locate: 5.0.0
+
+  lodash.camelcase@4.3.0: {}
+
+  lodash.clone@4.5.0: {}
+
+  lodash.clonedeep@4.5.0: {}
+
+  lodash.get@4.4.2: {}
+
+  lodash.memoize@4.1.2: {}
+
+  lodash.some@4.6.0: {}
+
+  lodash.sortby@4.7.0: {}
+
+  lodash.uniq@4.5.0: {}
+
+  lodash@4.17.21: {}
+
+  log-symbols@4.1.0:
+    dependencies:
+      chalk: 4.1.2
+      is-unicode-supported: 0.1.0
+
+  log-symbols@6.0.0:
+    dependencies:
+      chalk: 5.4.1
+      is-unicode-supported: 1.3.0
+
+  lowercase-keys@2.0.0: {}
+
+  lowercase-keys@3.0.0: {}
+
+  lru-cache@10.4.3: {}
+
+  lru-cache@11.1.0: {}
+
+  lru-cache@5.1.1:
+    dependencies:
+      yallist: 3.1.1
+
+  lru-cache@6.0.0:
+    dependencies:
+      yallist: 4.0.0
+
+  lru-queue@0.1.0:
+    dependencies:
+      es5-ext: 0.10.64
+
+  magic-string@0.30.17:
+    dependencies:
+      '@jridgewell/sourcemap-codec': 1.5.4
+
+  make-dir@4.0.0:
+    dependencies:
+      semver: 7.7.2
+
+  make-error@1.3.6: {}
+
+  make-iterator@1.0.1:
+    dependencies:
+      kind-of: 6.0.3
+
+  map-cache@0.2.2: {}
+
+  map-stream@0.1.0: {}
+
+  map-visit@1.0.0:
+    dependencies:
+      object-visit: 1.0.1
+
+  markdown-it@14.1.0:
+    dependencies:
+      argparse: 2.0.1
+      entities: 4.5.0
+      linkify-it: 5.0.0
+      mdurl: 2.0.0
+      punycode.js: 2.3.1
+      uc.micro: 2.1.0
+
+  matchdep@2.0.0:
+    dependencies:
+      findup-sync: 2.0.0
+      micromatch: 3.1.10
+      resolve: 1.22.10
+      stack-trace: 0.0.10
+    transitivePeerDependencies:
+      - supports-color
+
+  matcher@3.0.0:
+    dependencies:
+      escape-string-regexp: 4.0.0
+    optional: true
+
+  math-intrinsics@1.1.0: {}
+
+  md5@2.3.0:
+    dependencies:
+      charenc: 0.0.2
+      crypt: 0.0.2
+      is-buffer: 1.1.6
+
+  mdn-data@2.0.14: {}
+
+  mdn-data@2.0.28: {}
+
+  mdn-data@2.0.30: {}
+
+  mdurl@2.0.0: {}
+
+  media-typer@0.3.0: {}
+
+  memoizee@0.4.17:
+    dependencies:
+      d: 1.0.2
+      es5-ext: 0.10.64
+      es6-weak-map: 2.0.3
+      event-emitter: 0.3.5
+      is-promise: 2.2.2
+      lru-queue: 0.1.0
+      next-tick: 1.1.0
+      timers-ext: 0.1.8
+
+  memory-fs@0.5.0:
+    dependencies:
+      errno: 0.1.8
+      readable-stream: 2.3.8
+
+  memorystream@0.3.1: {}
+
+  merge-options@1.0.1:
+    dependencies:
+      is-plain-obj: 1.1.0
+
+  merge-stream@2.0.0: {}
+
+  merge2@1.4.1: {}
+
+  micromatch@3.1.10:
+    dependencies:
+      arr-diff: 4.0.0
+      array-unique: 0.3.2
+      braces: 2.3.2
+      define-property: 2.0.2
+      extend-shallow: 3.0.2
+      extglob: 2.0.4
+      fragment-cache: 0.2.1
+      kind-of: 6.0.3
+      nanomatch: 1.2.13
+      object.pick: 1.3.0
+      regex-not: 1.0.2
+      snapdragon: 0.8.2
+      to-regex: 3.0.2
+    transitivePeerDependencies:
+      - supports-color
+
+  micromatch@4.0.8:
+    dependencies:
+      braces: 3.0.3
+      picomatch: 2.3.1
+
+  mime-db@1.52.0: {}
+
+  mime-types@2.1.35:
+    dependencies:
+      mime-db: 1.52.0
+
+  mime@1.6.0: {}
+
+  mimic-function@5.0.1: {}
+
+  mimic-response@1.0.1: {}
+
+  mimic-response@3.1.0: {}
+
+  mimic-response@4.0.0: {}
+
+  minimatch@10.0.3:
+    dependencies:
+      '@isaacs/brace-expansion': 5.0.0
+
+  minimatch@3.1.2:
+    dependencies:
+      brace-expansion: 1.1.12
+
+  minimatch@5.1.6:
+    dependencies:
+      brace-expansion: 2.0.2
+
+  minimatch@9.0.1:
+    dependencies:
+      brace-expansion: 2.0.2
+
+  minimatch@9.0.5:
+    dependencies:
+      brace-expansion: 2.0.2
+
+  minimist@1.2.8: {}
+
+  minipass@3.3.6:
+    dependencies:
+      yallist: 4.0.0
+
+  minipass@5.0.0: {}
+
+  minipass@7.1.2: {}
+
+  minizlib@2.1.2:
+    dependencies:
+      minipass: 3.3.6
+      yallist: 4.0.0
+
+  mixin-deep@1.3.2:
+    dependencies:
+      for-in: 1.0.2
+      is-extendable: 1.0.1
+
+  mkdirp-classic@0.5.3: {}
+
+  mkdirp@0.5.6:
+    dependencies:
+      minimist: 1.2.8
+
+  mkdirp@1.0.4: {}
+
+  mkdirp@3.0.1: {}
+
+  mlly@1.7.4:
+    dependencies:
+      acorn: 8.15.0
+      pathe: 2.0.3
+      pkg-types: 1.3.1
+      ufo: 1.6.1
+
+  mocha-junit-reporter@2.2.1(mocha@10.8.2):
+    dependencies:
+      debug: 4.4.1(supports-color@8.1.1)
+      md5: 2.3.0
+      mkdirp: 3.0.1
+      mocha: 10.8.2
+      strip-ansi: 6.0.1
+      xml: 1.0.1
+    transitivePeerDependencies:
+      - supports-color
+
+  mocha-multi-reporters@1.5.1(mocha@10.8.2):
+    dependencies:
+      debug: 4.4.1(supports-color@8.1.1)
+      lodash: 4.17.21
+      mocha: 10.8.2
+    transitivePeerDependencies:
+      - supports-color
+
+  mocha@10.8.2:
+    dependencies:
+      ansi-colors: 4.1.3
+      browser-stdout: 1.3.1
+      chokidar: 3.6.0
+      debug: 4.4.1(supports-color@8.1.1)
+      diff: 5.2.0
+      escape-string-regexp: 4.0.0
+      find-up: 5.0.0
+      glob: 8.1.0
+      he: 1.2.0
+      js-yaml: 4.1.0
+      log-symbols: 4.1.0
+      minimatch: 5.1.6
+      ms: 2.1.3
+      serialize-javascript: 6.0.2
+      strip-json-comments: 3.1.1
+      supports-color: 8.1.1
+      workerpool: 6.5.1
+      yargs: 16.2.0
+      yargs-parser: 20.2.9
+      yargs-unparser: 2.0.0
+
+  morgan@1.10.1:
+    dependencies:
+      basic-auth: 2.0.1
+      debug: 2.6.9
+      depd: 2.0.0
+      on-finished: 2.3.0
+      on-headers: 1.1.0
+    transitivePeerDependencies:
+      - supports-color
+
+  ms@2.0.0: {}
+
+  ms@2.1.3: {}
+
+  multimatch@2.1.0:
+    dependencies:
+      array-differ: 1.0.0
+      array-union: 1.0.2
+      arrify: 1.0.1
+      minimatch: 3.1.2
+
+  mute-stdout@1.0.1: {}
+
+  mz@2.7.0:
+    dependencies:
+      any-promise: 1.3.0
+      object-assign: 4.1.1
+      thenify-all: 1.6.0
+
+  nan@2.23.0:
+    optional: true
+
+  nanoid@3.3.11: {}
+
+  nanomatch@1.2.13:
+    dependencies:
+      arr-diff: 4.0.0
+      array-unique: 0.3.2
+      define-property: 2.0.2
+      extend-shallow: 3.0.2
+      fragment-cache: 0.2.1
+      is-windows: 1.0.2
+      kind-of: 6.0.3
+      object.pick: 1.3.0
+      regex-not: 1.0.2
+      snapdragon: 0.8.2
+      to-regex: 3.0.2
+    transitivePeerDependencies:
+      - supports-color
+
+  napi-build-utils@2.0.0: {}
+
+  native-is-elevated@0.7.0: {}
+
+  native-keymap@3.3.5: {}
+
+  native-watchdog@1.4.2: {}
+
+  negotiator@0.6.3: {}
+
+  neo-async@2.6.2: {}
+
+  next-tick@1.1.0: {}
+
+  nice-try@1.0.5: {}
+
+  nise@5.1.9:
+    dependencies:
+      '@sinonjs/commons': 3.0.1
+      '@sinonjs/fake-timers': 11.3.1
+      '@sinonjs/text-encoding': 0.7.3
+      just-extend: 6.2.0
+      path-to-regexp: 6.3.0
+
+  node-abi@3.75.0:
+    dependencies:
+      semver: 7.7.2
+
+  node-addon-api@6.1.0: {}
+
+  node-addon-api@7.1.0: {}
+
+  node-addon-api@7.1.1: {}
+
+  node-addon-api@8.5.0: {}
+
+  node-fetch@2.6.8:
+    dependencies:
+      whatwg-url: 5.0.0
+
+  node-html-markdown@1.3.0:
+    dependencies:
+      node-html-parser: 6.1.13
+
+  node-html-parser@6.1.13:
+    dependencies:
+      css-select: 5.2.2
+      he: 1.2.0
+
+  node-pty@1.1.0-beta9:
+    dependencies:
+      node-addon-api: 7.1.1
+
+  node-releases@2.0.19: {}
+
+  nopt@7.2.1:
+    dependencies:
+      abbrev: 2.0.0
+
+  normalize-package-data@2.5.0:
+    dependencies:
+      hosted-git-info: 2.8.9
+      resolve: 1.22.10
+      semver: 5.7.2
+      validate-npm-package-license: 3.0.4
+
+  normalize-path@1.0.0: {}
+
+  normalize-path@2.1.1:
+    dependencies:
+      remove-trailing-separator: 1.1.0
+
+  normalize-path@3.0.0: {}
+
+  normalize-url@6.1.0: {}
+
+  normalize-url@8.0.2: {}
+
+  now-and-later@2.0.1:
+    dependencies:
+      once: 1.4.0
+
+  npm-run-all@4.1.5:
+    dependencies:
+      ansi-styles: 3.2.1
+      chalk: 2.4.2
+      cross-spawn: 6.0.6
+      memorystream: 0.3.1
+      minimatch: 3.1.2
+      pidtree: 0.3.1
+      read-pkg: 3.0.0
+      shell-quote: 1.8.3
+      string.prototype.padend: 3.1.6
+
+  nth-check@2.1.1:
+    dependencies:
+      boolbase: 1.0.0
+
+  number-is-nan@1.0.1: {}
+
+  object-assign@4.1.1: {}
+
+  object-copy@0.1.0:
+    dependencies:
+      copy-descriptor: 0.1.1
+      define-property: 0.2.5
+      kind-of: 3.2.2
+
+  object-inspect@1.13.4: {}
+
+  object-keys@0.4.0: {}
+
+  object-keys@1.1.1: {}
+
+  object-visit@1.0.1:
+    dependencies:
+      isobject: 3.0.1
+
+  object.assign@4.1.7:
+    dependencies:
+      call-bind: 1.0.8
+      call-bound: 1.0.4
+      define-properties: 1.2.1
+      es-object-atoms: 1.1.1
+      has-symbols: 1.1.0
+      object-keys: 1.1.1
+
+  object.defaults@1.1.0:
+    dependencies:
+      array-each: 1.0.1
+      array-slice: 1.1.0
+      for-own: 1.0.0
+      isobject: 3.0.1
+
+  object.map@1.0.1:
+    dependencies:
+      for-own: 1.0.0
+      make-iterator: 1.0.1
+
+  object.pick@1.3.0:
+    dependencies:
+      isobject: 3.0.1
+
+  object.reduce@1.0.1:
+    dependencies:
+      for-own: 1.0.0
+      make-iterator: 1.0.1
+
+  on-finished@2.3.0:
+    dependencies:
+      ee-first: 1.1.1
+
+  on-finished@2.4.1:
+    dependencies:
+      ee-first: 1.1.1
+
+  on-headers@1.1.0: {}
+
+  once@1.4.0:
+    dependencies:
+      wrappy: 1.0.2
+
+  onetime@7.0.0:
+    dependencies:
+      mimic-function: 5.0.1
+
+  only@0.0.2: {}
+
+  open@8.4.2:
+    dependencies:
+      define-lazy-prop: 2.0.0
+      is-docker: 2.2.1
+      is-wsl: 2.2.0
+
+  opentype.js@0.8.0:
+    dependencies:
+      tiny-inflate: 1.0.3
+
+  ora@8.2.0:
+    dependencies:
+      chalk: 5.4.1
+      cli-cursor: 5.0.0
+      cli-spinners: 2.9.2
+      is-interactive: 2.0.0
+      is-unicode-supported: 2.1.0
+      log-symbols: 6.0.0
+      stdin-discarder: 0.2.2
+      string-width: 7.2.0
+      strip-ansi: 7.1.0
+
+  ordered-read-streams@1.0.1:
+    dependencies:
+      readable-stream: 2.3.8
+
+  os-browserify@0.3.0: {}
+
+  os-locale@1.4.0:
+    dependencies:
+      lcid: 1.0.0
+
+  own-keys@1.0.1:
+    dependencies:
+      get-intrinsic: 1.3.0
+      object-keys: 1.1.1
+      safe-push-apply: 1.0.0
+
+  p-all@1.0.0:
+    dependencies:
+      p-map: 1.2.0
+
+  p-cancelable@2.1.1: {}
+
+  p-cancelable@4.0.1: {}
+
+  p-limit@2.3.0:
+    dependencies:
+      p-try: 2.2.0
+
+  p-limit@3.1.0:
+    dependencies:
+      yocto-queue: 0.1.0
+
+  p-locate@4.1.0:
+    dependencies:
+      p-limit: 2.3.0
+
+  p-locate@5.0.0:
+    dependencies:
+      p-limit: 3.1.0
+
+  p-map@1.2.0: {}
+
+  p-try@2.2.0: {}
+
+  package-json-from-dist@1.0.1: {}
+
+  pako@0.2.9: {}
+
+  pako@1.0.11: {}
+
+  parse-filepath@1.0.2:
+    dependencies:
+      is-absolute: 1.0.0
+      map-cache: 0.2.2
+      path-root: 0.1.1
+
+  parse-json@2.2.0:
+    dependencies:
+      error-ex: 1.3.2
+
+  parse-json@4.0.0:
+    dependencies:
+      error-ex: 1.3.2
+      json-parse-better-errors: 1.0.2
+
+  parse-node-version@1.0.1: {}
+
+  parse-passwd@1.0.0: {}
+
+  parseurl@1.3.3: {}
+
+  pascalcase@0.1.1: {}
+
+  path-browserify@1.0.1: {}
+
+  path-dirname@1.0.2: {}
+
+  path-exists@2.1.0:
+    dependencies:
+      pinkie-promise: 2.0.1
+
+  path-exists@4.0.0: {}
+
+  path-is-absolute@1.0.1: {}
+
+  path-key@2.0.1: {}
+
+  path-key@3.1.1: {}
+
+  path-parse@1.0.7: {}
+
+  path-root-regex@0.1.2: {}
+
+  path-root@0.1.1:
+    dependencies:
+      path-root-regex: 0.1.2
+
+  path-scurry@1.11.1:
+    dependencies:
+      lru-cache: 10.4.3
+      minipass: 7.1.2
+
+  path-scurry@2.0.0:
+    dependencies:
+      lru-cache: 11.1.0
+      minipass: 7.1.2
+
+  path-to-regexp@6.3.0: {}
+
+  path-type@1.1.0:
+    dependencies:
+      graceful-fs: 4.2.11
+      pify: 2.3.0
+      pinkie-promise: 2.0.1
+
+  path-type@3.0.0:
+    dependencies:
+      pify: 3.0.0
+
+  path-type@4.0.0: {}
+
+  pathe@2.0.3: {}
+
+  pause-stream@0.0.11:
+    dependencies:
+      through: 2.3.8
+
+  peek-stream@1.1.3:
+    dependencies:
+      buffer-from: 1.1.2
+      duplexify: 3.7.1
+      through2: 2.0.5
+
+  pend@1.2.0: {}
+
+  picocolors@0.2.1: {}
+
+  picocolors@1.1.1: {}
+
+  picomatch@2.3.1: {}
+
+  picomatch@4.0.3: {}
+
+  pidtree@0.3.1: {}
+
+  pify@2.3.0: {}
+
+  pify@3.0.0: {}
+
+  pinkie-promise@2.0.1:
+    dependencies:
+      pinkie: 2.0.4
+
+  pinkie@2.0.4: {}
+
+  pirates@4.0.7: {}
+
+  pkg-dir@4.2.0:
+    dependencies:
+      find-up: 4.1.0
+
+  pkg-types@1.3.1:
+    dependencies:
+      confbox: 0.1.8
+      mlly: 1.7.4
+      pathe: 2.0.3
+
+  playwright-core@1.54.1: {}
+
+  playwright@1.54.1:
+    dependencies:
+      playwright-core: 1.54.1
+    optionalDependencies:
+      fsevents: 2.3.2
+
+  plist@3.1.0:
+    dependencies:
+      '@xmldom/xmldom': 0.8.10
+      base64-js: 1.5.1
+      xmlbuilder: 15.1.1
+
+  plugin-error@0.1.2:
+    dependencies:
+      ansi-cyan: 0.1.1
+      ansi-red: 0.1.1
+      arr-diff: 1.1.0
+      arr-union: 2.1.0
+      extend-shallow: 1.1.4
+
+  plugin-error@1.0.1:
+    dependencies:
+      ansi-colors: 1.1.0
+      arr-diff: 4.0.0
+      arr-union: 3.1.0
+      extend-shallow: 3.0.2
+
+  plugin-error@2.0.1:
+    dependencies:
+      ansi-colors: 1.1.0
+
+  posix-character-classes@0.1.1: {}
+
+  possible-typed-array-names@1.1.0: {}
+
+  postcss-calc@9.0.1(postcss@8.5.6):
+    dependencies:
+      postcss: 8.5.6
+      postcss-selector-parser: 6.1.2
+      postcss-value-parser: 4.2.0
+
+  postcss-colormin@6.1.0(postcss@8.5.6):
+    dependencies:
+      browserslist: 4.25.1
+      caniuse-api: 3.0.0
+      colord: 2.9.3
+      postcss: 8.5.6
+      postcss-value-parser: 4.2.0
+
+  postcss-convert-values@6.1.0(postcss@8.5.6):
+    dependencies:
+      browserslist: 4.25.1
+      postcss: 8.5.6
+      postcss-value-parser: 4.2.0
+
+  postcss-discard-comments@6.0.2(postcss@8.5.6):
+    dependencies:
+      postcss: 8.5.6
+
+  postcss-discard-duplicates@6.0.3(postcss@8.5.6):
+    dependencies:
+      postcss: 8.5.6
+
+  postcss-discard-empty@6.0.3(postcss@8.5.6):
+    dependencies:
+      postcss: 8.5.6
+
+  postcss-discard-overridden@6.0.2(postcss@8.5.6):
+    dependencies:
+      postcss: 8.5.6
+
+  postcss-load-config@6.0.1(postcss@8.5.6):
+    dependencies:
+      lilconfig: 3.1.3
+    optionalDependencies:
+      postcss: 8.5.6
+
+  postcss-merge-longhand@6.0.5(postcss@8.5.6):
+    dependencies:
+      postcss: 8.5.6
+      postcss-value-parser: 4.2.0
+      stylehacks: 6.1.1(postcss@8.5.6)
+
+  postcss-merge-rules@6.1.1(postcss@8.5.6):
+    dependencies:
+      browserslist: 4.25.1
+      caniuse-api: 3.0.0
+      cssnano-utils: 4.0.2(postcss@8.5.6)
+      postcss: 8.5.6
+      postcss-selector-parser: 6.1.2
+
+  postcss-minify-font-values@6.1.0(postcss@8.5.6):
+    dependencies:
+      postcss: 8.5.6
+      postcss-value-parser: 4.2.0
+
+  postcss-minify-gradients@6.0.3(postcss@8.5.6):
+    dependencies:
+      colord: 2.9.3
+      cssnano-utils: 4.0.2(postcss@8.5.6)
+      postcss: 8.5.6
+      postcss-value-parser: 4.2.0
+
+  postcss-minify-params@6.1.0(postcss@8.5.6):
+    dependencies:
+      browserslist: 4.25.1
+      cssnano-utils: 4.0.2(postcss@8.5.6)
+      postcss: 8.5.6
+      postcss-value-parser: 4.2.0
+
+  postcss-minify-selectors@6.0.4(postcss@8.5.6):
+    dependencies:
+      postcss: 8.5.6
+      postcss-selector-parser: 6.1.2
+
+  postcss-modules-extract-imports@3.1.0(postcss@8.5.6):
+    dependencies:
+      postcss: 8.5.6
+
+  postcss-modules-local-by-default@4.2.0(postcss@8.5.6):
+    dependencies:
+      icss-utils: 5.1.0(postcss@8.5.6)
+      postcss: 8.5.6
+      postcss-selector-parser: 7.1.0
+      postcss-value-parser: 4.2.0
+
+  postcss-modules-scope@3.2.1(postcss@8.5.6):
+    dependencies:
+      postcss: 8.5.6
+      postcss-selector-parser: 7.1.0
+
+  postcss-modules-values@4.0.0(postcss@8.5.6):
+    dependencies:
+      icss-utils: 5.1.0(postcss@8.5.6)
+      postcss: 8.5.6
+
+  postcss-nesting@12.1.5(postcss@8.5.6):
+    dependencies:
+      '@csstools/selector-resolve-nested': 1.1.0(postcss-selector-parser@6.1.2)
+      '@csstools/selector-specificity': 3.1.1(postcss-selector-parser@6.1.2)
+      postcss: 8.5.6
+      postcss-selector-parser: 6.1.2
+
+  postcss-normalize-charset@6.0.2(postcss@8.5.6):
+    dependencies:
+      postcss: 8.5.6
+
+  postcss-normalize-display-values@6.0.2(postcss@8.5.6):
+    dependencies:
+      postcss: 8.5.6
+      postcss-value-parser: 4.2.0
+
+  postcss-normalize-positions@6.0.2(postcss@8.5.6):
+    dependencies:
+      postcss: 8.5.6
+      postcss-value-parser: 4.2.0
+
+  postcss-normalize-repeat-style@6.0.2(postcss@8.5.6):
+    dependencies:
+      postcss: 8.5.6
+      postcss-value-parser: 4.2.0
+
+  postcss-normalize-string@6.0.2(postcss@8.5.6):
+    dependencies:
+      postcss: 8.5.6
+      postcss-value-parser: 4.2.0
+
+  postcss-normalize-timing-functions@6.0.2(postcss@8.5.6):
+    dependencies:
+      postcss: 8.5.6
+      postcss-value-parser: 4.2.0
+
+  postcss-normalize-unicode@6.1.0(postcss@8.5.6):
+    dependencies:
+      browserslist: 4.25.1
+      postcss: 8.5.6
+      postcss-value-parser: 4.2.0
+
+  postcss-normalize-url@6.0.2(postcss@8.5.6):
+    dependencies:
+      postcss: 8.5.6
+      postcss-value-parser: 4.2.0
+
+  postcss-normalize-whitespace@6.0.2(postcss@8.5.6):
+    dependencies:
+      postcss: 8.5.6
+      postcss-value-parser: 4.2.0
+
+  postcss-ordered-values@6.0.2(postcss@8.5.6):
+    dependencies:
+      cssnano-utils: 4.0.2(postcss@8.5.6)
+      postcss: 8.5.6
+      postcss-value-parser: 4.2.0
+
+  postcss-reduce-initial@6.1.0(postcss@8.5.6):
+    dependencies:
+      browserslist: 4.25.1
+      caniuse-api: 3.0.0
+      postcss: 8.5.6
+
+  postcss-reduce-transforms@6.0.2(postcss@8.5.6):
+    dependencies:
+      postcss: 8.5.6
+      postcss-value-parser: 4.2.0
+
+  postcss-selector-parser@6.1.2:
+    dependencies:
+      cssesc: 3.0.0
+      util-deprecate: 1.0.2
+
+  postcss-selector-parser@7.1.0:
+    dependencies:
+      cssesc: 3.0.0
+      util-deprecate: 1.0.2
+
+  postcss-svgo@6.0.3(postcss@8.5.6):
+    dependencies:
+      postcss: 8.5.6
+      postcss-value-parser: 4.2.0
+      svgo: 3.3.2
+
+  postcss-unique-selectors@6.0.4(postcss@8.5.6):
+    dependencies:
+      postcss: 8.5.6
+      postcss-selector-parser: 6.1.2
+
+  postcss-value-parser@4.2.0: {}
+
+  postcss@7.0.39:
+    dependencies:
+      picocolors: 0.2.1
+      source-map: 0.6.1
+
+  postcss@8.5.6:
+    dependencies:
+      nanoid: 3.3.11
+      picocolors: 1.1.1
+      source-map-js: 1.2.1
+
+  prebuild-install@7.1.3:
+    dependencies:
+      detect-libc: 2.0.4
+      expand-template: 2.0.3
+      github-from-package: 0.0.0
+      minimist: 1.2.8
+      mkdirp-classic: 0.5.3
+      napi-build-utils: 2.0.0
+      node-abi: 3.75.0
+      pump: 3.0.3
+      rc: 1.2.8
+      simple-get: 4.0.1
+      tar-fs: 2.1.3
+      tunnel-agent: 0.6.0
+
+  pretty-hrtime@1.0.3: {}
+
+  process-nextick-args@2.0.1: {}
+
+  progress@1.1.8: {}
+
+  progress@2.0.3: {}
+
+  promise-stream-reader@1.0.1: {}
+
+  proto-list@1.2.4: {}
+
+  proxy-from-env@1.1.0: {}
+
+  prr@1.0.1: {}
+
+  pseudo-localization@2.4.0:
+    dependencies:
+      flat: 5.0.2
+      get-stdin: 7.0.0
+      typescript: 4.9.5
+      yargs: 17.7.2
+
+  pump@1.0.3:
+    dependencies:
+      end-of-stream: 1.4.5
+      once: 1.4.0
+
+  pump@2.0.1:
+    dependencies:
+      end-of-stream: 1.4.5
+      once: 1.4.0
+
+  pump@3.0.3:
+    dependencies:
+      end-of-stream: 1.4.5
+      once: 1.4.0
+
+  pumpify@1.5.1:
+    dependencies:
+      duplexify: 3.7.1
+      inherits: 2.0.4
+      pump: 2.0.1
+
+  punycode.js@2.3.1: {}
+
+  punycode@2.3.1: {}
+
+  queue-microtask@1.2.3: {}
+
+  queue@3.1.0:
+    dependencies:
+      inherits: 2.0.4
+
+  queue@4.5.1:
+    dependencies:
+      inherits: 2.0.4
+
+  quick-lru@5.1.1: {}
+
+  randombytes@2.1.0:
+    dependencies:
+      safe-buffer: 5.2.1
+
+  rc@1.2.8:
+    dependencies:
+      deep-extend: 0.6.0
+      ini: 1.3.8
+      minimist: 1.2.8
+      strip-json-comments: 2.0.1
+
+  rcedit@1.1.2: {}
+
+  rcedit@4.0.1:
+    dependencies:
+      cross-spawn-windows-exe: 1.2.0
+
+  read-pkg-up@1.0.1:
+    dependencies:
+      find-up: 1.1.2
+      read-pkg: 1.1.0
+
+  read-pkg@1.1.0:
+    dependencies:
+      load-json-file: 1.1.0
+      normalize-package-data: 2.5.0
+      path-type: 1.1.0
+
+  read-pkg@3.0.0:
+    dependencies:
+      load-json-file: 4.0.0
+      normalize-package-data: 2.5.0
+      path-type: 3.0.0
+
+  readable-stream@1.0.34:
+    dependencies:
+      core-util-is: 1.0.3
+      inherits: 2.0.4
+      isarray: 0.0.1
+      string_decoder: 0.10.31
+
+  readable-stream@2.3.8:
+    dependencies:
+      core-util-is: 1.0.3
+      inherits: 2.0.4
+      isarray: 1.0.0
+      process-nextick-args: 2.0.1
+      safe-buffer: 5.1.2
+      string_decoder: 1.1.1
+      util-deprecate: 1.0.2
+
+  readable-stream@3.6.2:
+    dependencies:
+      inherits: 2.0.4
+      string_decoder: 1.3.0
+      util-deprecate: 1.0.2
+
+  readdirp@2.2.1:
+    dependencies:
+      graceful-fs: 4.2.11
+      micromatch: 3.1.10
+      readable-stream: 2.3.8
+    transitivePeerDependencies:
+      - supports-color
+
+  readdirp@3.6.0:
+    dependencies:
+      picomatch: 2.3.1
+
+  readdirp@4.1.2: {}
+
+  rechoir@0.6.2:
+    dependencies:
+      resolve: 1.22.10
+
+  rechoir@0.8.0:
+    dependencies:
+      resolve: 1.22.10
+
+  reflect.getprototypeof@1.0.10:
+    dependencies:
+      call-bind: 1.0.8
+      define-properties: 1.2.1
+      es-abstract: 1.24.0
+      es-errors: 1.3.0
+      es-object-atoms: 1.1.1
+      get-intrinsic: 1.3.0
+      get-proto: 1.0.1
+      which-builtin-type: 1.2.1
+
+  regex-not@1.0.2:
+    dependencies:
+      extend-shallow: 3.0.2
+      safe-regex: 1.1.0
+
+  regexp.prototype.flags@1.5.4:
+    dependencies:
+      call-bind: 1.0.8
+      define-properties: 1.2.1
+      es-errors: 1.3.0
+      get-proto: 1.0.1
+      gopd: 1.2.0
+      set-function-name: 2.0.2
+
+  remove-bom-buffer@3.0.0:
+    dependencies:
+      is-buffer: 1.1.6
+      is-utf8: 0.2.1
+
+  remove-bom-stream@1.2.0:
+    dependencies:
+      remove-bom-buffer: 3.0.0
+      safe-buffer: 5.2.1
+      through2: 2.0.5
+
+  remove-trailing-separator@1.1.0: {}
+
+  repeat-element@1.1.4: {}
+
+  repeat-string@1.6.1: {}
+
+  replace-ext@0.0.1: {}
+
+  replace-ext@1.0.1: {}
+
+  replace-ext@2.0.0: {}
+
+  replace-homedir@1.0.0:
+    dependencies:
+      homedir-polyfill: 1.0.3
+      is-absolute: 1.0.0
+      remove-trailing-separator: 1.1.0
+
+  replacestream@4.0.3:
+    dependencies:
+      escape-string-regexp: 1.0.5
+      object-assign: 4.1.1
+      readable-stream: 2.3.8
+
+  require-directory@2.1.1: {}
+
+  require-from-string@2.0.2: {}
+
+  require-main-filename@1.0.1: {}
+
+  require-main-filename@2.0.0: {}
+
+  resolve-alpn@1.2.1: {}
+
+  resolve-cwd@3.0.0:
+    dependencies:
+      resolve-from: 5.0.0
+
+  resolve-dir@1.0.1:
+    dependencies:
+      expand-tilde: 2.0.2
+      global-modules: 1.0.0
+
+  resolve-from@5.0.0: {}
+
+  resolve-options@1.1.0:
+    dependencies:
+      value-or-function: 3.0.0
+
+  resolve-path@1.4.0:
+    dependencies:
+      http-errors: 1.6.3
+      path-is-absolute: 1.0.1
+
+  resolve-url@0.2.1: {}
+
+  resolve@1.22.10:
+    dependencies:
+      is-core-module: 2.16.1
+      path-parse: 1.0.7
+      supports-preserve-symlinks-flag: 1.0.0
+
+  responselike@2.0.1:
+    dependencies:
+      lowercase-keys: 2.0.0
+
+  responselike@3.0.0:
+    dependencies:
+      lowercase-keys: 3.0.0
+
+  restore-cursor@5.1.0:
+    dependencies:
+      onetime: 7.0.0
+      signal-exit: 4.1.0
+
+  ret@0.1.15: {}
+
+  reusify@1.1.0: {}
+
+  rimraf@2.6.3:
+    dependencies:
+      glob: 7.2.3
+
+  rimraf@2.7.1:
+    dependencies:
+      glob: 7.2.3
+
+  roarr@2.15.4:
+    dependencies:
+      boolean: 3.2.0
+      detect-node: 2.1.0
+      globalthis: 1.0.4
+      json-stringify-safe: 5.0.1
+      semver-compare: 1.0.0
+      sprintf-js: 1.1.3
+    optional: true
+
+  rollup@4.46.1:
+    dependencies:
+      '@types/estree': 1.0.8
+    optionalDependencies:
+      '@rollup/rollup-android-arm-eabi': 4.46.1
+      '@rollup/rollup-android-arm64': 4.46.1
+      '@rollup/rollup-darwin-arm64': 4.46.1
+      '@rollup/rollup-darwin-x64': 4.46.1
+      '@rollup/rollup-freebsd-arm64': 4.46.1
+      '@rollup/rollup-freebsd-x64': 4.46.1
+      '@rollup/rollup-linux-arm-gnueabihf': 4.46.1
+      '@rollup/rollup-linux-arm-musleabihf': 4.46.1
+      '@rollup/rollup-linux-arm64-gnu': 4.46.1
+      '@rollup/rollup-linux-arm64-musl': 4.46.1
+      '@rollup/rollup-linux-loongarch64-gnu': 4.46.1
+      '@rollup/rollup-linux-ppc64-gnu': 4.46.1
+      '@rollup/rollup-linux-riscv64-gnu': 4.46.1
+      '@rollup/rollup-linux-riscv64-musl': 4.46.1
+      '@rollup/rollup-linux-s390x-gnu': 4.46.1
+      '@rollup/rollup-linux-x64-gnu': 4.46.1
+      '@rollup/rollup-linux-x64-musl': 4.46.1
+      '@rollup/rollup-win32-arm64-msvc': 4.46.1
+      '@rollup/rollup-win32-ia32-msvc': 4.46.1
+      '@rollup/rollup-win32-x64-msvc': 4.46.1
+      fsevents: 2.3.3
+
+  run-parallel@1.2.0:
+    dependencies:
+      queue-microtask: 1.2.3
+
+  safe-array-concat@1.1.3:
+    dependencies:
+      call-bind: 1.0.8
+      call-bound: 1.0.4
+      get-intrinsic: 1.3.0
+      has-symbols: 1.1.0
+      isarray: 2.0.5
+
+  safe-buffer@5.1.2: {}
+
+  safe-buffer@5.2.1: {}
+
+  safe-push-apply@1.0.0:
+    dependencies:
+      es-errors: 1.3.0
+      isarray: 2.0.5
+
+  safe-regex-test@1.1.0:
+    dependencies:
+      call-bound: 1.0.4
+      es-errors: 1.3.0
+      is-regex: 1.2.1
+
+  safe-regex@1.1.0:
+    dependencies:
+      ret: 0.1.15
+
+  sax@1.4.1: {}
+
+  schema-utils@3.3.0:
+    dependencies:
+      '@types/json-schema': 7.0.15
+      ajv: 6.12.6
+      ajv-keywords: 3.5.2(ajv@6.12.6)
+
+  schema-utils@4.3.2:
+    dependencies:
+      '@types/json-schema': 7.0.15
+      ajv: 8.17.1
+      ajv-formats: 2.1.1(ajv@8.17.1)
+      ajv-keywords: 5.1.0(ajv@8.17.1)
+
+  semver-compare@1.0.0:
+    optional: true
+
+  semver-greatest-satisfied-range@1.1.0:
+    dependencies:
+      sver-compat: 1.5.0
+
+  semver@5.7.2: {}
+
+  semver@6.3.1: {}
+
+  semver@7.7.2: {}
+
+  serialize-error@7.0.1:
+    dependencies:
+      type-fest: 0.13.1
+    optional: true
+
+  serialize-javascript@6.0.2:
+    dependencies:
+      randombytes: 2.1.0
+
+  set-blocking@2.0.0: {}
+
+  set-function-length@1.2.2:
+    dependencies:
+      define-data-property: 1.1.4
+      es-errors: 1.3.0
+      function-bind: 1.1.2
+      get-intrinsic: 1.3.0
+      gopd: 1.2.0
+      has-property-descriptors: 1.0.2
+
+  set-function-name@2.0.2:
+    dependencies:
+      define-data-property: 1.1.4
+      es-errors: 1.3.0
+      functions-have-names: 1.2.3
+      has-property-descriptors: 1.0.2
+
+  set-proto@1.0.0:
+    dependencies:
+      dunder-proto: 1.0.1
+      es-errors: 1.3.0
+      es-object-atoms: 1.1.1
+
+  set-value@2.0.1:
+    dependencies:
+      extend-shallow: 2.0.1
+      is-extendable: 0.1.1
+      is-plain-object: 2.0.4
+      split-string: 3.1.0
+
+  setimmediate@1.0.5: {}
+
+  setprototypeof@1.1.0: {}
+
+  setprototypeof@1.2.0: {}
+
+  shallow-clone@3.0.1:
+    dependencies:
+      kind-of: 6.0.3
+
+  shebang-command@1.2.0:
+    dependencies:
+      shebang-regex: 1.0.0
+
+  shebang-command@2.0.0:
+    dependencies:
+      shebang-regex: 3.0.0
+
+  shebang-regex@1.0.0: {}
+
+  shebang-regex@3.0.0: {}
+
+  shell-quote@1.8.3: {}
+
+  side-channel-list@1.0.0:
+    dependencies:
+      es-errors: 1.3.0
+      object-inspect: 1.13.4
+
+  side-channel-map@1.0.1:
+    dependencies:
+      call-bound: 1.0.4
+      es-errors: 1.3.0
+      get-intrinsic: 1.3.0
+      object-inspect: 1.13.4
+
+  side-channel-weakmap@1.0.2:
+    dependencies:
+      call-bound: 1.0.4
+      es-errors: 1.3.0
+      get-intrinsic: 1.3.0
+      object-inspect: 1.13.4
+      side-channel-map: 1.0.1
+
+  side-channel@1.1.0:
+    dependencies:
+      es-errors: 1.3.0
+      object-inspect: 1.13.4
+      side-channel-list: 1.0.0
+      side-channel-map: 1.0.1
+      side-channel-weakmap: 1.0.2
+
+  signal-exit@4.1.0: {}
+
+  simple-concat@1.0.1: {}
+
+  simple-get@4.0.1:
+    dependencies:
+      decompress-response: 6.0.0
+      once: 1.4.0
+      simple-concat: 1.0.1
+
+  sinon-test@3.1.6(sinon@12.0.1):
+    dependencies:
+      sinon: 12.0.1
+
+  sinon@12.0.1:
+    dependencies:
+      '@sinonjs/commons': 1.8.6
+      '@sinonjs/fake-timers': 8.1.0
+      '@sinonjs/samsam': 6.1.3
+      diff: 5.2.0
+      nise: 5.1.9
+      supports-color: 7.2.0
+
+  slash@4.0.0: {}
+
+  smart-buffer@4.2.0: {}
+
+  snapdragon-node@2.1.1:
+    dependencies:
+      define-property: 1.0.0
+      isobject: 3.0.1
+      snapdragon-util: 3.0.1
+
+  snapdragon-util@3.0.1:
+    dependencies:
+      kind-of: 3.2.2
+
+  snapdragon@0.8.2:
+    dependencies:
+      base: 0.11.2
+      debug: 2.6.9
+      define-property: 0.2.5
+      extend-shallow: 2.0.1
+      map-cache: 0.2.2
+      source-map: 0.5.7
+      source-map-resolve: 0.5.3
+      use: 3.1.1
+    transitivePeerDependencies:
+      - supports-color
+
+  socks-proxy-agent@8.0.5:
+    dependencies:
+      agent-base: 7.1.4
+      debug: 4.4.1(supports-color@8.1.1)
+      socks: 2.8.6
+    transitivePeerDependencies:
+      - supports-color
+
+  socks@2.8.6:
+    dependencies:
+      ip-address: 9.0.5
+      smart-buffer: 4.2.0
+
+  source-map-js@1.2.1: {}
+
+  source-map-resolve@0.5.3:
+    dependencies:
+      atob: 2.1.2
+      decode-uri-component: 0.2.2
+      resolve-url: 0.2.1
+      source-map-url: 0.4.1
+      urix: 0.1.0
+
+  source-map-resolve@0.6.0:
+    dependencies:
+      atob: 2.1.2
+      decode-uri-component: 0.2.2
+
+  source-map-support@0.3.3:
+    dependencies:
+      source-map: 0.1.32
+
+  source-map-support@0.5.21:
+    dependencies:
+      buffer-from: 1.1.2
+      source-map: 0.6.1
+
+  source-map-url@0.4.1: {}
+
+  source-map@0.1.32:
+    dependencies:
+      amdefine: 1.0.1
+
+  source-map@0.5.7: {}
+
+  source-map@0.6.1: {}
+
+  source-map@0.7.6: {}
+
+  source-map@0.8.0-beta.0:
+    dependencies:
+      whatwg-url: 7.1.0
+
+  sparkles@1.0.1: {}
+
+  spdx-correct@3.2.0:
+    dependencies:
+      spdx-expression-parse: 3.0.1
+      spdx-license-ids: 3.0.21
+
+  spdx-exceptions@2.5.0: {}
+
+  spdx-expression-parse@3.0.1:
+    dependencies:
+      spdx-exceptions: 2.5.0
+      spdx-license-ids: 3.0.21
+
+  spdx-license-ids@3.0.21: {}
+
+  split-string@3.1.0:
+    dependencies:
+      extend-shallow: 3.0.2
+
+  split@0.3.3:
+    dependencies:
+      through: 2.3.8
+
+  sprintf-js@1.1.3: {}
+
+  stable@0.1.8: {}
+
+  stack-trace@0.0.10: {}
+
+  static-extend@0.1.2:
+    dependencies:
+      define-property: 0.2.5
+      object-copy: 0.1.0
+
+  statuses@1.5.0: {}
+
+  statuses@2.0.1: {}
+
+  stdin-discarder@0.2.2: {}
+
+  stop-iteration-iterator@1.1.0:
+    dependencies:
+      es-errors: 1.3.0
+      internal-slot: 1.1.0
+
+  stream-combiner@0.0.4:
+    dependencies:
+      duplexer: 0.1.2
+
+  stream-exhaust@1.0.2: {}
+
+  stream-shift@1.0.3: {}
+
+  stream-to-array@2.3.0:
+    dependencies:
+      any-promise: 1.3.0
+
+  streamfilter@1.0.7:
+    dependencies:
+      readable-stream: 2.3.8
+
+  streamifier@0.1.1: {}
+
+  streamx@2.22.1:
+    dependencies:
+      fast-fifo: 1.3.2
+      text-decoder: 1.2.3
+    optionalDependencies:
+      bare-events: 2.6.0
+
+  string-width@1.0.2:
+    dependencies:
+      code-point-at: 1.1.0
+      is-fullwidth-code-point: 1.0.0
+      strip-ansi: 3.0.1
+
+  string-width@4.2.3:
+    dependencies:
+      emoji-regex: 8.0.0
+      is-fullwidth-code-point: 3.0.0
+      strip-ansi: 6.0.1
+
+  string-width@5.1.2:
+    dependencies:
+      eastasianwidth: 0.2.0
+      emoji-regex: 9.2.2
+      strip-ansi: 7.1.0
+
+  string-width@7.2.0:
+    dependencies:
+      emoji-regex: 10.4.0
+      get-east-asian-width: 1.3.0
+      strip-ansi: 7.1.0
+
+  string.prototype.padend@3.1.6:
+    dependencies:
+      call-bind: 1.0.8
+      define-properties: 1.2.1
+      es-abstract: 1.24.0
+      es-object-atoms: 1.1.1
+
+  string.prototype.trim@1.2.10:
+    dependencies:
+      call-bind: 1.0.8
+      call-bound: 1.0.4
+      define-data-property: 1.1.4
+      define-properties: 1.2.1
+      es-abstract: 1.24.0
+      es-object-atoms: 1.1.1
+      has-property-descriptors: 1.0.2
+
+  string.prototype.trimend@1.0.9:
+    dependencies:
+      call-bind: 1.0.8
+      call-bound: 1.0.4
+      define-properties: 1.2.1
+      es-object-atoms: 1.1.1
+
+  string.prototype.trimstart@1.0.8:
+    dependencies:
+      call-bind: 1.0.8
+      define-properties: 1.2.1
+      es-object-atoms: 1.1.1
+
+  string_decoder@0.10.31: {}
+
+  string_decoder@1.1.1:
+    dependencies:
+      safe-buffer: 5.1.2
+
+  string_decoder@1.3.0:
+    dependencies:
+      safe-buffer: 5.2.1
+
+  strip-ansi@3.0.1:
+    dependencies:
+      ansi-regex: 2.1.1
+
+  strip-ansi@6.0.1:
+    dependencies:
+      ansi-regex: 5.0.1
+
+  strip-ansi@7.1.0:
+    dependencies:
+      ansi-regex: 6.1.0
+
+  strip-bom-string@1.0.0: {}
+
+  strip-bom@2.0.0:
+    dependencies:
+      is-utf8: 0.2.1
+
+  strip-bom@3.0.0: {}
+
+  strip-json-comments@2.0.1: {}
+
+  strip-json-comments@3.1.1: {}
+
+  strnum@2.1.1: {}
+
+  style-loader@3.3.4(webpack@5.100.2):
+    dependencies:
+      webpack: 5.100.2(esbuild@0.25.8)(webpack-cli@5.1.4)
+
+  stylehacks@6.1.1(postcss@8.5.6):
+    dependencies:
+      browserslist: 4.25.1
+      postcss: 8.5.6
+      postcss-selector-parser: 6.1.2
+
+  sucrase@3.35.0:
+    dependencies:
+      '@jridgewell/gen-mapping': 0.3.12
+      commander: 4.1.1
+      glob: 10.4.5
+      lines-and-columns: 1.2.4
+      mz: 2.7.0
+      pirates: 4.0.7
+      ts-interface-checker: 0.1.13
+
+  sumchecker@3.0.1:
+    dependencies:
+      debug: 4.4.1(supports-color@8.1.1)
+    transitivePeerDependencies:
+      - supports-color
+
+  supports-color@2.0.0: {}
+
+  supports-color@5.5.0:
+    dependencies:
+      has-flag: 3.0.0
+
+  supports-color@7.2.0:
+    dependencies:
+      has-flag: 4.0.0
+
+  supports-color@8.1.1:
+    dependencies:
+      has-flag: 4.0.0
+
+  supports-color@9.4.0: {}
+
+  supports-preserve-symlinks-flag@1.0.0: {}
+
+  sver-compat@1.5.0:
+    dependencies:
+      es6-iterator: 2.0.3
+      es6-symbol: 3.1.4
+
+  svgo@2.8.0:
+    dependencies:
+      '@trysound/sax': 0.2.0
+      commander: 7.2.0
+      css-select: 4.3.0
+      css-tree: 1.1.3
+      csso: 4.2.0
+      picocolors: 1.1.1
+      stable: 0.1.8
+
+  svgo@3.3.2:
+    dependencies:
+      '@trysound/sax': 0.2.0
+      commander: 7.2.0
+      css-select: 5.2.2
+      css-tree: 2.3.1
+      css-what: 6.2.2
+      csso: 5.0.5
+      picocolors: 1.1.1
+
+  tapable@2.2.2: {}
+
+  tar-fs@2.1.3:
+    dependencies:
+      chownr: 1.1.4
+      mkdirp-classic: 0.5.3
+      pump: 3.0.3
+      tar-stream: 2.2.0
+
+  tar-fs@3.1.0:
+    dependencies:
+      pump: 3.0.3
+      tar-stream: 3.1.7
+    optionalDependencies:
+      bare-fs: 4.1.6
+      bare-path: 3.0.0
+    transitivePeerDependencies:
+      - bare-buffer
+
+  tar-stream@2.2.0:
+    dependencies:
+      bl: 4.1.0
+      end-of-stream: 1.4.5
+      fs-constants: 1.0.0
+      inherits: 2.0.4
+      readable-stream: 3.6.2
+
+  tar-stream@3.1.7:
+    dependencies:
+      b4a: 1.6.7
+      fast-fifo: 1.3.2
+      streamx: 2.22.1
+
+  tar@2.2.2:
+    dependencies:
+      block-stream: 0.0.9
+      fstream: 1.0.12
+      inherits: 2.0.4
+
+  tar@6.2.1:
+    dependencies:
+      chownr: 2.0.0
+      fs-minipass: 2.1.0
+      minipass: 5.0.0
+      minizlib: 2.1.2
+      mkdirp: 1.0.4
+      yallist: 4.0.0
+
+  tas-client-umd@0.2.0: {}
+
+  teex@1.0.1:
+    dependencies:
+      streamx: 2.22.1
+
+  temp@0.8.4:
+    dependencies:
+      rimraf: 2.6.3
+
+  terser-webpack-plugin@5.3.14(esbuild@0.25.8)(webpack@5.100.2):
+    dependencies:
+      '@jridgewell/trace-mapping': 0.3.29
+      jest-worker: 27.5.1
+      schema-utils: 4.3.2
+      serialize-javascript: 6.0.2
+      terser: 5.43.1
+      webpack: 5.100.2(esbuild@0.25.8)(webpack-cli@5.1.4)
+    optionalDependencies:
+      esbuild: 0.25.8
+
+  terser@5.43.1:
+    dependencies:
+      '@jridgewell/source-map': 0.3.10
+      acorn: 8.15.0
+      commander: 2.20.3
+      source-map-support: 0.5.21
+
+  test-exclude@6.0.0:
+    dependencies:
+      '@istanbuljs/schema': 0.1.3
+      glob: 7.2.3
+      minimatch: 3.1.2
+
+  text-decoder@1.2.3:
+    dependencies:
+      b4a: 1.6.7
+
+  textextensions@1.0.2: {}
+
+  thenify-all@1.6.0:
+    dependencies:
+      thenify: 3.3.1
+
+  thenify@3.3.1:
+    dependencies:
+      any-promise: 1.3.0
+
+  through2-filter@3.0.0:
+    dependencies:
+      through2: 2.0.5
+      xtend: 4.0.2
+
+  through2@0.4.2:
+    dependencies:
+      readable-stream: 1.0.34
+      xtend: 2.1.2
+
+  through2@2.0.3:
+    dependencies:
+      readable-stream: 2.3.8
+      xtend: 4.0.2
+
+  through2@2.0.5:
+    dependencies:
+      readable-stream: 2.3.8
+      xtend: 4.0.2
+
+  through2@3.0.2:
+    dependencies:
+      inherits: 2.0.4
+      readable-stream: 3.6.2
+
+  through2@4.0.2:
+    dependencies:
+      readable-stream: 3.6.2
+
+  through@2.3.8: {}
+
+  time-stamp@1.1.0: {}
+
+  timers-ext@0.1.8:
+    dependencies:
+      es5-ext: 0.10.64
+      next-tick: 1.1.0
+
+  tiny-inflate@1.0.3: {}
+
+  tinyexec@0.3.2: {}
+
+  tinyglobby@0.2.14:
+    dependencies:
+      fdir: 6.4.6(picomatch@4.0.3)
+      picomatch: 4.0.3
+
+  to-absolute-glob@2.0.2:
+    dependencies:
+      is-absolute: 1.0.0
+      is-negated-glob: 1.0.0
+
+  to-object-path@0.3.0:
+    dependencies:
+      kind-of: 3.2.2
+
+  to-regex-range@2.1.1:
+    dependencies:
+      is-number: 3.0.0
+      repeat-string: 1.6.1
+
+  to-regex-range@5.0.1:
+    dependencies:
+      is-number: 7.0.0
+
+  to-regex@3.0.2:
+    dependencies:
+      define-property: 2.0.2
+      extend-shallow: 3.0.2
+      regex-not: 1.0.2
+      safe-regex: 1.1.0
+
+  to-through@2.0.0:
+    dependencies:
+      through2: 2.0.5
+
+  toidentifier@1.0.1: {}
+
+  tr46@0.0.3: {}
+
+  tr46@1.0.1:
+    dependencies:
+      punycode: 2.3.1
+
+  tree-kill@1.2.2: {}
+
+  ts-interface-checker@0.1.13: {}
+
+  ts-loader@9.5.2(typescript@4.9.5)(webpack@5.100.2):
+    dependencies:
+      chalk: 4.1.2
+      enhanced-resolve: 5.18.2
+      micromatch: 4.0.8
+      semver: 7.7.2
+      source-map: 0.7.6
+      typescript: 4.9.5
+      webpack: 5.100.2(esbuild@0.25.8)(webpack-cli@5.1.4)
+
+  ts-morph@25.0.1:
+    dependencies:
+      '@ts-morph/common': 0.26.1
+      code-block-writer: 13.0.3
+
+  ts-node@10.9.2(@types/node@20.19.9)(typescript@4.9.5):
+    dependencies:
+      '@cspotcode/source-map-support': 0.8.1
+      '@tsconfig/node10': 1.0.11
+      '@tsconfig/node12': 1.0.11
+      '@tsconfig/node14': 1.0.3
+      '@tsconfig/node16': 1.0.4
+      '@types/node': 20.19.9
+      acorn: 8.15.0
+      acorn-walk: 8.3.4
+      arg: 4.1.3
+      create-require: 1.1.1
+      diff: 4.0.2
+      make-error: 1.3.6
+      typescript: 4.9.5
+      v8-compile-cache-lib: 3.0.1
+      yn: 3.1.1
+
+  tslib@2.8.1: {}
+
+  tsscmp@1.0.6: {}
+
+  tsup@8.5.0(postcss@8.5.6)(typescript@4.9.5):
+    dependencies:
+      bundle-require: 5.1.0(esbuild@0.25.8)
+      cac: 6.7.14
+      chokidar: 4.0.3
+      consola: 3.4.2
+      debug: 4.4.1(supports-color@8.1.1)
+      esbuild: 0.25.8
+      fix-dts-default-cjs-exports: 1.0.1
+      joycon: 3.1.1
+      picocolors: 1.1.1
+      postcss-load-config: 6.0.1(postcss@8.5.6)
+      resolve-from: 5.0.0
+      rollup: 4.46.1
+      source-map: 0.8.0-beta.0
+      sucrase: 3.35.0
+      tinyexec: 0.3.2
+      tinyglobby: 0.2.14
+      tree-kill: 1.2.2
+    optionalDependencies:
+      postcss: 8.5.6
+      typescript: 4.9.5
+    transitivePeerDependencies:
+      - jiti
+      - supports-color
+      - tsx
+      - yaml
+
+  tunnel-agent@0.6.0:
+    dependencies:
+      safe-buffer: 5.2.1
+
+  type-detect@4.0.8: {}
+
+  type-detect@4.1.0: {}
+
+  type-fest@0.13.1:
+    optional: true
+
+  type-fest@4.41.0: {}
+
+  type-is@1.6.18:
+    dependencies:
+      media-typer: 0.3.0
+      mime-types: 2.1.35
+
+  type@2.7.3: {}
+
+  typed-array-buffer@1.0.3:
+    dependencies:
+      call-bound: 1.0.4
+      es-errors: 1.3.0
+      is-typed-array: 1.1.15
+
+  typed-array-byte-length@1.0.3:
+    dependencies:
+      call-bind: 1.0.8
+      for-each: 0.3.5
+      gopd: 1.2.0
+      has-proto: 1.2.0
+      is-typed-array: 1.1.15
+
+  typed-array-byte-offset@1.0.4:
+    dependencies:
+      available-typed-arrays: 1.0.7
+      call-bind: 1.0.8
+      for-each: 0.3.5
+      gopd: 1.2.0
+      has-proto: 1.2.0
+      is-typed-array: 1.1.15
+      reflect.getprototypeof: 1.0.10
+
+  typed-array-length@1.0.7:
+    dependencies:
+      call-bind: 1.0.8
+      for-each: 0.3.5
+      gopd: 1.2.0
+      is-typed-array: 1.1.15
+      possible-typed-array-names: 1.1.0
+      reflect.getprototypeof: 1.0.10
+
+  typedarray@0.0.6: {}
+
+  typescript@4.9.5: {}
+
+  typical@7.3.0: {}
+
+  uc.micro@2.1.0: {}
+
+  ufo@1.6.1: {}
+
+  unbox-primitive@1.1.0:
+    dependencies:
+      call-bound: 1.0.4
+      has-bigints: 1.1.0
+      has-symbols: 1.1.0
+      which-boxed-primitive: 1.1.1
+
+  unc-path-regex@0.1.2: {}
+
+  undertaker-registry@1.0.1: {}
+
+  undertaker@1.3.0:
+    dependencies:
+      arr-flatten: 1.1.0
+      arr-map: 2.0.2
+      bach: 1.2.0
+      collection-map: 1.0.0
+      es6-weak-map: 2.0.3
+      fast-levenshtein: 1.1.4
+      last-run: 1.1.1
+      object.defaults: 1.1.0
+      object.reduce: 1.0.1
+      undertaker-registry: 1.0.1
+
+  undici-types@6.21.0: {}
+
+  undici@7.12.0: {}
+
+  union-value@1.0.1:
+    dependencies:
+      arr-union: 3.1.0
+      get-value: 2.0.6
+      is-extendable: 0.1.1
+      set-value: 2.0.1
+
+  unique-stream@2.3.1:
+    dependencies:
+      json-stable-stringify-without-jsonify: 1.0.1
+      through2-filter: 3.0.0
+
+  universal-user-agent@7.0.3: {}
+
+  universalify@0.1.2: {}
+
+  universalify@2.0.1: {}
+
+  unset-value@1.0.0:
+    dependencies:
+      has-value: 0.3.1
+      isobject: 3.0.1
+
+  upath@1.2.0: {}
+
+  update-browserslist-db@1.1.3(browserslist@4.25.1):
+    dependencies:
+      browserslist: 4.25.1
+      escalade: 3.2.0
+      picocolors: 1.1.1
+
+  uri-js@4.4.1:
+    dependencies:
+      punycode: 2.3.1
+
+  urix@0.1.0: {}
+
+  use@3.1.1: {}
+
+  util-deprecate@1.0.2: {}
+
+  util@0.12.5:
+    dependencies:
+      inherits: 2.0.4
+      is-arguments: 1.2.0
+      is-generator-function: 1.1.0
+      is-typed-array: 1.1.15
+      which-typed-array: 1.1.19
+
+  uuid@9.0.1: {}
+
+  v8-compile-cache-lib@3.0.1: {}
+
+  v8-inspect-profiler@0.1.1:
+    dependencies:
+      chrome-remote-interface: 0.33.3
+    transitivePeerDependencies:
+      - bufferutil
+      - utf-8-validate
+
+  v8-to-istanbul@9.3.0:
+    dependencies:
+      '@jridgewell/trace-mapping': 0.3.29
+      '@types/istanbul-lib-coverage': 2.0.6
+      convert-source-map: 2.0.0
+
+  v8flags@3.2.0:
+    dependencies:
+      homedir-polyfill: 1.0.3
+
+  validate-npm-package-license@3.0.4:
+    dependencies:
+      spdx-correct: 3.2.0
+      spdx-expression-parse: 3.0.1
+
+  value-or-function@3.0.0: {}
+
+  vary@1.1.2: {}
+
+  vinyl-fs@3.0.3:
+    dependencies:
+      fs-mkdirp-stream: 1.0.0
+      glob-stream: 6.1.0
+      graceful-fs: 4.2.11
+      is-valid-glob: 1.0.0
+      lazystream: 1.0.1
+      lead: 1.0.0
+      object.assign: 4.1.7
+      pumpify: 1.5.1
+      readable-stream: 2.3.8
+      remove-bom-buffer: 3.0.0
+      remove-bom-stream: 1.2.0
+      resolve-options: 1.1.0
+      through2: 2.0.5
+      to-through: 2.0.0
+      value-or-function: 3.0.0
+      vinyl: 2.2.1
+      vinyl-sourcemap: 1.1.0
+
+  vinyl-sourcemap@1.1.0:
+    dependencies:
+      append-buffer: 1.0.2
+      convert-source-map: 1.9.0
+      graceful-fs: 4.2.11
+      normalize-path: 2.1.1
+      now-and-later: 2.0.1
+      remove-bom-buffer: 3.0.0
+      vinyl: 2.2.1
+
+  vinyl@1.2.0:
+    dependencies:
+      clone: 1.0.4
+      clone-stats: 0.0.1
+      replace-ext: 0.0.1
+
+  vinyl@2.0.2:
+    dependencies:
+      clone: 1.0.4
+      clone-buffer: 1.0.0
+      clone-stats: 1.0.0
+      cloneable-readable: 1.1.3
+      is-stream: 1.1.0
+      remove-trailing-separator: 1.1.0
+      replace-ext: 1.0.1
+
+  vinyl@2.2.1:
+    dependencies:
+      clone: 2.1.2
+      clone-buffer: 1.0.0
+      clone-stats: 1.0.0
+      cloneable-readable: 1.1.3
+      remove-trailing-separator: 1.1.0
+      replace-ext: 1.0.1
+
+  vinyl@3.0.1:
+    dependencies:
+      clone: 2.1.2
+      remove-trailing-separator: 1.1.0
+      replace-ext: 2.0.0
+      teex: 1.0.1
+
+  vscode-oniguruma@1.7.0: {}
+
+  vscode-regexpp@3.1.0: {}
+
+  vscode-textmate@9.2.0: {}
+
+  vscode-uri@3.1.0: {}
+
+  watchpack@2.4.4:
+    dependencies:
+      glob-to-regexp: 0.4.1
+      graceful-fs: 4.2.11
+
+  web-tree-sitter@0.20.8: {}
+
+  webidl-conversions@3.0.1: {}
+
+  webidl-conversions@4.0.2: {}
+
+  webpack-cli@5.1.4(webpack@5.100.2):
+    dependencies:
+      '@discoveryjs/json-ext': 0.5.7
+      '@webpack-cli/configtest': 2.1.1(webpack-cli@5.1.4)(webpack@5.100.2)
+      '@webpack-cli/info': 2.0.2(webpack-cli@5.1.4)(webpack@5.100.2)
+      '@webpack-cli/serve': 2.0.5(webpack-cli@5.1.4)(webpack@5.100.2)
+      colorette: 2.0.20
+      commander: 10.0.1
+      cross-spawn: 7.0.6
+      envinfo: 7.14.0
+      fastest-levenshtein: 1.0.16
+      import-local: 3.2.0
+      interpret: 3.1.1
+      rechoir: 0.8.0
+      webpack: 5.100.2(esbuild@0.25.8)(webpack-cli@5.1.4)
+      webpack-merge: 5.10.0
+
+  webpack-merge@5.10.0:
+    dependencies:
+      clone-deep: 4.0.1
+      flat: 5.0.2
+      wildcard: 2.0.1
+
+  webpack-sources@3.3.3: {}
+
+  webpack-stream@7.0.0(webpack@5.100.2):
+    dependencies:
+      fancy-log: 1.3.3
+      lodash.clone: 4.5.0
+      lodash.some: 4.6.0
+      memory-fs: 0.5.0
+      plugin-error: 1.0.1
+      supports-color: 8.1.1
+      through: 2.3.8
+      vinyl: 2.2.1
+      webpack: 5.100.2(esbuild@0.25.8)(webpack-cli@5.1.4)
+
+  webpack@5.100.2(esbuild@0.25.8)(webpack-cli@5.1.4):
+    dependencies:
+      '@types/eslint-scope': 3.7.7
+      '@types/estree': 1.0.8
+      '@types/json-schema': 7.0.15
+      '@webassemblyjs/ast': 1.14.1
+      '@webassemblyjs/wasm-edit': 1.14.1
+      '@webassemblyjs/wasm-parser': 1.14.1
+      acorn: 8.15.0
+      acorn-import-phases: 1.0.4(acorn@8.15.0)
+      browserslist: 4.25.1
+      chrome-trace-event: 1.0.4
+      enhanced-resolve: 5.18.2
+      es-module-lexer: 1.7.0
+      eslint-scope: 5.1.1
+      events: 3.3.0
+      glob-to-regexp: 0.4.1
+      graceful-fs: 4.2.11
+      json-parse-even-better-errors: 2.3.1
+      loader-runner: 4.3.0
+      mime-types: 2.1.35
+      neo-async: 2.6.2
+      schema-utils: 4.3.2
+      tapable: 2.2.2
+      terser-webpack-plugin: 5.3.14(esbuild@0.25.8)(webpack@5.100.2)
+      watchpack: 2.4.4
+      webpack-sources: 3.3.3
+    optionalDependencies:
+      webpack-cli: 5.1.4(webpack@5.100.2)
+    transitivePeerDependencies:
+      - '@swc/core'
+      - esbuild
+      - uglify-js
+
+  whatwg-url@5.0.0:
+    dependencies:
+      tr46: 0.0.3
+      webidl-conversions: 3.0.1
+
+  whatwg-url@7.1.0:
+    dependencies:
+      lodash.sortby: 4.7.0
+      tr46: 1.0.1
+      webidl-conversions: 4.0.2
+
+  which-boxed-primitive@1.1.1:
+    dependencies:
+      is-bigint: 1.1.0
+      is-boolean-object: 1.2.2
+      is-number-object: 1.1.1
+      is-string: 1.1.1
+      is-symbol: 1.1.1
+
+  which-builtin-type@1.2.1:
+    dependencies:
+      call-bound: 1.0.4
+      function.prototype.name: 1.1.8
+      has-tostringtag: 1.0.2
+      is-async-function: 2.1.1
+      is-date-object: 1.1.0
+      is-finalizationregistry: 1.1.1
+      is-generator-function: 1.1.0
+      is-regex: 1.2.1
+      is-weakref: 1.1.1
+      isarray: 2.0.5
+      which-boxed-primitive: 1.1.1
+      which-collection: 1.0.2
+      which-typed-array: 1.1.19
+
+  which-collection@1.0.2:
+    dependencies:
+      is-map: 2.0.3
+      is-set: 2.0.3
+      is-weakmap: 2.0.2
+      is-weakset: 2.0.4
+
+  which-module@1.0.0: {}
+
+  which-module@2.0.1: {}
+
+  which-typed-array@1.1.19:
+    dependencies:
+      available-typed-arrays: 1.0.7
+      call-bind: 1.0.8
+      call-bound: 1.0.4
+      for-each: 0.3.5
+      get-proto: 1.0.1
+      gopd: 1.2.0
+      has-tostringtag: 1.0.2
+
+  which@1.3.1:
+    dependencies:
+      isexe: 2.0.0
+
+  which@2.0.2:
+    dependencies:
+      isexe: 2.0.0
+
+  wildcard@2.0.1: {}
+
+  windows-foreground-love@0.5.0: {}
+
+  workerpool@6.5.1: {}
+
+  wrap-ansi@2.1.0:
+    dependencies:
+      string-width: 1.0.2
+      strip-ansi: 3.0.1
+
+  wrap-ansi@6.2.0:
+    dependencies:
+      ansi-styles: 4.3.0
+      string-width: 4.2.3
+      strip-ansi: 6.0.1
+
+  wrap-ansi@7.0.0:
+    dependencies:
+      ansi-styles: 4.3.0
+      string-width: 4.2.3
+      strip-ansi: 6.0.1
+
+  wrap-ansi@8.1.0:
+    dependencies:
+      ansi-styles: 6.2.1
+      string-width: 5.1.2
+      strip-ansi: 7.1.0
+
+  wrappy@1.0.2: {}
+
+  ws@7.5.10: {}
+
+  xml2js@0.5.0:
+    dependencies:
+      sax: 1.4.1
+      xmlbuilder: 11.0.1
+
+  xml@1.0.1: {}
+
+  xmlbuilder@11.0.1: {}
+
+  xmlbuilder@15.1.1: {}
+
+  xtend@2.1.2:
+    dependencies:
+      object-keys: 0.4.0
+
+  xtend@4.0.2: {}
+
+  y18n@3.2.2: {}
+
+  y18n@4.0.3: {}
+
+  y18n@5.0.8: {}
+
+  yallist@3.1.1: {}
+
+  yallist@4.0.0: {}
+
+  yargs-parser@18.1.3:
+    dependencies:
+      camelcase: 5.3.1
+      decamelize: 1.2.0
+
+  yargs-parser@20.2.9: {}
+
+  yargs-parser@21.1.1: {}
+
+  yargs-parser@5.0.1:
+    dependencies:
+      camelcase: 3.0.0
+      object.assign: 4.1.7
+
+  yargs-unparser@2.0.0:
+    dependencies:
+      camelcase: 6.3.0
+      decamelize: 4.0.0
+      flat: 5.0.2
+      is-plain-obj: 2.1.0
+
+  yargs@15.4.1:
+    dependencies:
+      cliui: 6.0.0
+      decamelize: 1.2.0
+      find-up: 4.1.0
+      get-caller-file: 2.0.5
+      require-directory: 2.1.1
+      require-main-filename: 2.0.0
+      set-blocking: 2.0.0
+      string-width: 4.2.3
+      which-module: 2.0.1
+      y18n: 4.0.3
+      yargs-parser: 18.1.3
+
+  yargs@16.2.0:
+    dependencies:
+      cliui: 7.0.4
+      escalade: 3.2.0
+      get-caller-file: 2.0.5
+      require-directory: 2.1.1
+      string-width: 4.2.3
+      y18n: 5.0.8
+      yargs-parser: 20.2.9
+
+  yargs@17.7.2:
+    dependencies:
+      cliui: 8.0.1
+      escalade: 3.2.0
+      get-caller-file: 2.0.5
+      require-directory: 2.1.1
+      string-width: 4.2.3
+      y18n: 5.0.8
+      yargs-parser: 21.1.1
+
+  yargs@7.1.2:
+    dependencies:
+      camelcase: 3.0.0
+      cliui: 3.2.0
+      decamelize: 1.2.0
+      get-caller-file: 1.0.3
+      os-locale: 1.4.0
+      read-pkg-up: 1.0.1
+      require-directory: 2.1.1
+      require-main-filename: 1.0.1
+      set-blocking: 2.0.0
+      string-width: 1.0.2
+      which-module: 1.0.0
+      y18n: 3.2.2
+      yargs-parser: 5.0.1
+
+  yaserver@0.4.0: {}
+
+  yauzl@2.10.0:
+    dependencies:
+      buffer-crc32: 0.2.13
+      fd-slicer: 1.1.0
+
+  yauzl@3.2.0:
+    dependencies:
+      buffer-crc32: 0.2.13
+      pend: 1.2.0
+
+  yazl@2.5.1:
+    dependencies:
+      buffer-crc32: 0.2.13
+
+  ylru@1.4.0: {}
+
+  yn@3.1.1: {}
+
+  yocto-queue@0.1.0: {}
diff --git a/jetbrains/host/server-cli.ts b/jetbrains/host/server-cli.ts
new file mode 100644
index 000000000..67aa42f4d
--- /dev/null
+++ b/jetbrains/host/server-cli.ts
@@ -0,0 +1,40 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+import "./bootstrap-server.js" // this MUST come before other imports as it changes global state
+import { dirname, join } from "path"
+import { fileURLToPath } from "url"
+import { devInjectNodeModuleLookupPath } from "./bootstrap-node.js"
+import { bootstrapESM } from "./bootstrap-esm.js"
+import { resolveNLSConfiguration } from "./deps/vscode/vs/base/node/nls.js"
+import { product } from "./bootstrap-meta.js"
+
+const __dirname = dirname(fileURLToPath(import.meta.url))
+
+// NLS
+const nlsConfiguration = await resolveNLSConfiguration({
+	userLocale: "en",
+	osLocale: "en",
+	commit: product.commit,
+	userDataPath: "",
+	nlsMetadataPath: __dirname,
+})
+process.env["VSCODE_NLS_CONFIG"] = JSON.stringify(nlsConfiguration) // required for `bootstrap-esm` to pick up NLS messages
+
+if (process.env["VSCODE_DEV"]) {
+	// When running out of sources, we need to load node modules from remote/node_modules,
+	// which are compiled against nodejs, not electron
+	process.env["VSCODE_DEV_INJECT_NODE_MODULE_LOOKUP_PATH"] =
+		process.env["VSCODE_DEV_INJECT_NODE_MODULE_LOOKUP_PATH"] || join(__dirname, "..", "remote", "node_modules")
+	devInjectNodeModuleLookupPath(process.env["VSCODE_DEV_INJECT_NODE_MODULE_LOOKUP_PATH"])
+} else {
+	delete process.env["VSCODE_DEV_INJECT_NODE_MODULE_LOOKUP_PATH"]
+}
+
+// Bootstrap ESM
+await bootstrapESM()
+
+// Load Server
+await import("./deps/vscode/vs/server/node/server.cli.js")
diff --git a/jetbrains/host/server-main.ts b/jetbrains/host/server-main.ts
new file mode 100644
index 000000000..98d738263
--- /dev/null
+++ b/jetbrains/host/server-main.ts
@@ -0,0 +1,328 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+import "./bootstrap-server.js" // this MUST come before other imports as it changes global state
+import * as path from "path"
+import * as http from "http"
+import { AddressInfo } from "net"
+import * as os from "os"
+import * as readline from "readline"
+import { performance } from "perf_hooks"
+import { fileURLToPath } from "url"
+import minimist from "minimist"
+import { devInjectNodeModuleLookupPath, removeGlobalNodeJsModuleLookupPaths } from "./bootstrap-node.js"
+import { bootstrapESM } from "./bootstrap-esm.js"
+import { resolveNLSConfiguration } from "./deps/vscode/vs/base/node/nls.js"
+import { product } from "./bootstrap-meta.js"
+import * as perf from "./deps/vscode/vs/base/common/performance.js"
+import { INLSConfiguration } from "./deps/vscode/vs/nls.js"
+import { IServerAPI } from "./deps/vscode/vs/server/node/remoteExtensionHostAgentServer.js"
+
+const __dirname = path.dirname(fileURLToPath(import.meta.url))
+
+perf.mark("code/server/start")
+;(globalThis as any).vscodeServerStartTime = performance.now()
+
+// Do a quick parse to determine if a server or the cli needs to be started
+const parsedArgs = minimist(process.argv.slice(2), {
+	boolean: [
+		"start-server",
+		"list-extensions",
+		"print-ip-address",
+		"help",
+		"version",
+		"accept-server-license-terms",
+		"update-extensions",
+	],
+	string: [
+		"install-extension",
+		"install-builtin-extension",
+		"uninstall-extension",
+		"locate-extension",
+		"socket-path",
+		"host",
+		"port",
+		"compatibility",
+	],
+	alias: { help: "h", version: "v" },
+})
+;["host", "port", "accept-server-license-terms"].forEach((e) => {
+	if (!parsedArgs[e]) {
+		const envValue = process.env[`VSCODE_SERVER_${e.toUpperCase().replace("-", "_")}`]
+		if (envValue) {
+			parsedArgs[e] = envValue
+		}
+	}
+})
+
+const extensionLookupArgs = ["list-extensions", "locate-extension"]
+const extensionInstallArgs = [
+	"install-extension",
+	"install-builtin-extension",
+	"uninstall-extension",
+	"update-extensions",
+]
+
+const shouldSpawnCli =
+	parsedArgs.help ||
+	parsedArgs.version ||
+	extensionLookupArgs.some((a) => !!parsedArgs[a]) ||
+	(extensionInstallArgs.some((a) => !!parsedArgs[a]) && !parsedArgs["start-server"])
+
+const nlsConfiguration = await resolveNLSConfiguration({
+	userLocale: "en",
+	osLocale: "en",
+	commit: product.commit,
+	userDataPath: "",
+	nlsMetadataPath: __dirname,
+})
+
+if (shouldSpawnCli) {
+	loadCode(nlsConfiguration).then((mod) => {
+		mod.spawnCli()
+	})
+} else {
+	let _remoteExtensionHostAgentServer: IServerAPI | null = null
+	let _remoteExtensionHostAgentServerPromise: Promise<IServerAPI> | null = null
+	const getRemoteExtensionHostAgentServer = () => {
+		if (!_remoteExtensionHostAgentServerPromise) {
+			_remoteExtensionHostAgentServerPromise = loadCode(nlsConfiguration).then(async (mod) => {
+				const server = await mod.createServer(address)
+				_remoteExtensionHostAgentServer = server
+				return server
+			})
+		}
+		return _remoteExtensionHostAgentServerPromise
+	}
+
+	if (Array.isArray(product.serverLicense) && product.serverLicense.length) {
+		console.log(product.serverLicense.join("\n"))
+		if (product.serverLicensePrompt && parsedArgs["accept-server-license-terms"] !== true) {
+			if (hasStdinWithoutTty()) {
+				console.log("To accept the license terms, start the server with --accept-server-license-terms")
+				process.exit(1)
+			}
+			try {
+				const accept = await prompt(product.serverLicensePrompt)
+				if (!accept) {
+					process.exit(1)
+				}
+			} catch (e) {
+				console.log(e)
+				process.exit(1)
+			}
+		}
+	}
+
+	let firstRequest = true
+	let firstWebSocket = true
+
+	let address: string | AddressInfo | null = null
+	const server = http.createServer(async (req, res) => {
+		if (firstRequest) {
+			firstRequest = false
+			perf.mark("code/server/firstRequest")
+		}
+		const remoteExtensionHostAgentServer = await getRemoteExtensionHostAgentServer()
+		return remoteExtensionHostAgentServer.handleRequest(req, res)
+	})
+	server.on("upgrade", async (req, socket) => {
+		if (firstWebSocket) {
+			firstWebSocket = false
+			perf.mark("code/server/firstWebSocket")
+		}
+		const remoteExtensionHostAgentServer = await getRemoteExtensionHostAgentServer()
+		// @ts-ignore
+		return remoteExtensionHostAgentServer.handleUpgrade(req, socket)
+	})
+	server.on("error", async (err) => {
+		const remoteExtensionHostAgentServer = await getRemoteExtensionHostAgentServer()
+		return remoteExtensionHostAgentServer.handleServerError(err)
+	})
+
+	const host =
+		sanitizeStringArg(parsedArgs["host"]) || (parsedArgs["compatibility"] !== "1.63" ? "localhost" : undefined)
+	const nodeListenOptions = parsedArgs["socket-path"]
+		? { path: sanitizeStringArg(parsedArgs["socket-path"]) }
+		: { host, port: await parsePort(host, sanitizeStringArg(parsedArgs["port"])) }
+	server.listen(nodeListenOptions, async () => {
+		let output =
+			Array.isArray(product.serverGreeting) && product.serverGreeting.length
+				? `\n\n${product.serverGreeting.join("\n")}\n\n`
+				: ``
+
+		if (typeof nodeListenOptions.port === "number" && parsedArgs["print-ip-address"]) {
+			const ifaces = os.networkInterfaces()
+			Object.keys(ifaces).forEach(function (ifname) {
+				ifaces[ifname]?.forEach(function (iface) {
+					if (!iface.internal && iface.family === "IPv4") {
+						output += `IP Address: ${iface.address}\n`
+					}
+				})
+			})
+		}
+
+		address = server.address()
+		if (address === null) {
+			throw new Error("Unexpected server address")
+		}
+
+		output += `Server bound to ${typeof address === "string" ? address : `${address.address}:${address.port} (${address.family})`}\n`
+		// Do not change this line. VS Code looks for this in the output.
+		output += `Extension host agent listening on ${typeof address === "string" ? address : address.port}\n`
+		console.log(output)
+
+		perf.mark("code/server/started")
+		;(globalThis as any).vscodeServerListenTime = performance.now()
+
+		await getRemoteExtensionHostAgentServer()
+	})
+
+	process.on("exit", () => {
+		server.close()
+		if (_remoteExtensionHostAgentServer) {
+			_remoteExtensionHostAgentServer.dispose()
+		}
+	})
+}
+
+function sanitizeStringArg(val: any): string | undefined {
+	if (Array.isArray(val)) {
+		// if an argument is passed multiple times, minimist creates an array
+		val = val.pop() // take the last item
+	}
+	return typeof val === "string" ? val : undefined
+}
+
+/**
+ * If `--port` is specified and describes a single port, connect to that port.
+ *
+ * If `--port`describes a port range
+ * then find a free port in that range. Throw error if no
+ * free port available in range.
+ *
+ * In absence of specified ports, connect to port 8000.
+ */
+async function parsePort(host: string | undefined, strPort: string | undefined): Promise<number> {
+	if (strPort) {
+		let range: { start: number; end: number } | undefined
+		if (strPort.match(/^\d+$/)) {
+			return parseInt(strPort, 10)
+		} else if ((range = parseRange(strPort))) {
+			const port = await findFreePort(host, range.start, range.end)
+			if (port !== undefined) {
+				return port
+			}
+			// Remote-SSH extension relies on this exact port error message, treat as an API
+			console.warn(`--port: Could not find free port in range: ${range.start} - ${range.end} (inclusive).`)
+			process.exit(1)
+		} else {
+			console.warn(
+				`--port "${strPort}" is not a valid number or range. Ranges must be in the form 'from-to' with 'from' an integer larger than 0 and not larger than 'end'.`,
+			)
+			process.exit(1)
+		}
+	}
+	return 8000
+}
+
+function parseRange(strRange: string): { start: number; end: number } | undefined {
+	const match = strRange.match(/^(\d+)-(\d+)$/)
+	if (match) {
+		const start = parseInt(match[1], 10),
+			end = parseInt(match[2], 10)
+		if (start > 0 && start <= end && end <= 65535) {
+			return { start, end }
+		}
+	}
+	return undefined
+}
+
+/**
+ * Starting at the `start` port, look for a free port incrementing
+ * by 1 until `end` inclusive. If no free port is found, undefined is returned.
+ */
+async function findFreePort(host: string | undefined, start: number, end: number): Promise<number | undefined> {
+	const testPort = (port: number) => {
+		return new Promise((resolve) => {
+			const server = http.createServer()
+			server
+				.listen(port, host, () => {
+					server.close()
+					resolve(true)
+				})
+				.on("error", () => {
+					resolve(false)
+				})
+		})
+	}
+	for (let port = start; port <= end; port++) {
+		if (await testPort(port)) {
+			return port
+		}
+	}
+	return undefined
+}
+
+async function loadCode(nlsConfiguration: INLSConfiguration) {
+	// required for `bootstrap-esm` to pick up NLS messages
+	process.env["VSCODE_NLS_CONFIG"] = JSON.stringify(nlsConfiguration)
+
+	// See https://github.com/microsoft/vscode-remote-release/issues/6543
+	// We would normally install a SIGPIPE listener in bootstrap-node.js
+	// But in certain situations, the console itself can be in a broken pipe state
+	// so logging SIGPIPE to the console will cause an infinite async loop
+	process.env["VSCODE_HANDLES_SIGPIPE"] = "true"
+
+	if (process.env["VSCODE_DEV"]) {
+		// When running out of sources, we need to load node modules from remote/node_modules,
+		// which are compiled against nodejs, not electron
+		process.env["VSCODE_DEV_INJECT_NODE_MODULE_LOOKUP_PATH"] =
+			process.env["VSCODE_DEV_INJECT_NODE_MODULE_LOOKUP_PATH"] ||
+			path.join(__dirname, "..", "remote", "node_modules")
+		devInjectNodeModuleLookupPath(process.env["VSCODE_DEV_INJECT_NODE_MODULE_LOOKUP_PATH"])
+	} else {
+		delete process.env["VSCODE_DEV_INJECT_NODE_MODULE_LOOKUP_PATH"]
+	}
+
+	// Remove global paths from the node module lookup (node.js only)
+	removeGlobalNodeJsModuleLookupPaths()
+
+	// Bootstrap ESM
+	await bootstrapESM()
+
+	// Load Server
+	return import("./deps/vscode/vs/server/node/server.main.js")
+}
+
+function hasStdinWithoutTty(): boolean {
+	try {
+		return !process.stdin.isTTY // Via https://twitter.com/MylesBorins/status/782009479382626304
+	} catch (error) {
+		// Windows workaround for https://github.com/nodejs/node/issues/11656
+	}
+	return false
+}
+
+function prompt(question: string): Promise<boolean> {
+	const rl = readline.createInterface({
+		input: process.stdin,
+		output: process.stdout,
+	})
+	return new Promise((resolve, reject) => {
+		rl.question(question + " ", async function (data) {
+			rl.close()
+			const str = data.toString().trim().toLowerCase()
+			if (str === "" || str === "y" || str === "yes") {
+				resolve(true)
+			} else if (str === "n" || str === "no") {
+				resolve(false)
+			} else {
+				process.stdout.write("\nInvalid Response. Answer either yes (y, yes) or no (n, no)\n")
+				resolve(await prompt(question))
+			}
+		})
+	})
+}
diff --git a/jetbrains/host/src/config.ts b/jetbrains/host/src/config.ts
new file mode 100644
index 000000000..475f4f88a
--- /dev/null
+++ b/jetbrains/host/src/config.ts
@@ -0,0 +1,6 @@
+// Copyright 2009-2025 Weibo, Inc.
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+export const DEBUG_PORT = 9229
diff --git a/jetbrains/host/src/extension.ts b/jetbrains/host/src/extension.ts
new file mode 100644
index 000000000..242d8e856
--- /dev/null
+++ b/jetbrains/host/src/extension.ts
@@ -0,0 +1,284 @@
+// Copyright 2009-2025 Weibo, Inc.
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+import net from "net"
+import start from "../deps/vscode/vs/workbench/api/node/extensionHostProcess.js"
+import { FileRPCProtocolLogger } from "../deps/vscode/vs/workbench/services/extensions/common/fileRPCProtocolLogger.js"
+import { RequestInitiator } from "../deps/vscode/vs/workbench/services/extensions/common/rpcProtocol.js"
+
+// Create global logger instance and export for use by other modules
+export const fileLoggerGlobal = new FileRPCProtocolLogger("extension")
+
+// Command line argument parsing
+const args = process.argv.slice(2)
+console.log("args:", args)
+const LISTEN_MODE = args.includes("--listen") || process.env.VSCODE_EXTHOST_LISTEN === "true"
+const PORT = parseInt(
+	args.find((arg) => arg.startsWith("--vscode-socket-port="))?.substring(21) ||
+		process.env.VSCODE_EXTHOST_DEBUG_PORT ||
+		"51234",
+	10,
+)
+const SOCKET_HOST =
+	args.find((arg) => arg.startsWith("--vscode-socket-host="))?.substring(21) ||
+	process.env.VSCODE_EXTHOST_SOCKET_HOST ||
+	"127.0.0.1"
+const WILL_SEND_SOCKET =
+	args.find((arg) => arg.startsWith("--vscode-will-send-socket="))?.substring(26) ||
+	process.env.VSCODE_EXTHOST_WILL_SEND_SOCKET ||
+	"0"
+const pipeName = process.env.VSCODE_EXTHOST_IPC_HOOK
+
+console.log(`Extension host starting in ${LISTEN_MODE ? "LISTEN" : "CONNECT"} mode`)
+console.log("PORT:", PORT)
+console.log("SOCKET_HOST:", SOCKET_HOST)
+console.log("WILL_SEND_SOCKET:", WILL_SEND_SOCKET)
+console.log("pipeName:", pipeName)
+
+if (pipeName) {
+	console.log("Using pipeName, connection will be handled by VSCode IPC")
+} else {
+	// Reset parameter values back to environment variables
+	process.env.VSCODE_EXTHOST_SOCKET_PORT = PORT.toString()
+	process.env.VSCODE_EXTHOST_SOCKET_HOST = SOCKET_HOST
+	process.env.VSCODE_EXTHOST_WILL_SEND_SOCKET = WILL_SEND_SOCKET
+	console.log("set send socket:", process.env.VSCODE_EXTHOST_WILL_SEND_SOCKET)
+
+	// Save original process methods
+	const originalProcessOn = process.on
+	const originalProcessSend = process.send || (() => false)
+
+	// Store message event handlers
+	const messageHandlers: ((message: any, socket?: net.Socket) => void)[] = []
+
+	// Reconnection related variables
+	let isReconnecting = false
+	let reconnectAttempts = 0
+	const MAX_RECONNECT_ATTEMPTS = 5
+	const RECONNECT_DELAY = 1000 // 1 second
+
+	// Override process.on
+	process.on = function (event: string, listener: (...args: any[]) => void): any {
+		if (event === "message") {
+			messageHandlers.push((message: any, socket?: net.Socket) => {
+				// Check listener parameter count
+				const paramCount = listener.length
+				if (paramCount === 1) {
+					// If only one parameter, pass only message
+					listener(message)
+				} else {
+					// If multiple parameters, pass message and socket
+					listener(message, socket)
+				}
+			})
+		}
+		return originalProcessOn.call(process, event, listener)
+	}
+
+	// Override process.send
+	process.send = function (message: any): boolean {
+		if (message?.type === "VSCODE_EXTHOST_IPC_READY") {
+			console.log("Extension host process is ready to receive socket")
+			if (LISTEN_MODE) {
+				startServer()
+			} else {
+				connect()
+			}
+		}
+
+		// Call original process.send
+		return originalProcessSend.call(process, message)
+	}
+
+	// Start server mode (for debugging)
+	function startServer() {
+		const server = net.createServer((socket) => {
+			console.log("Main process connected to extension host")
+			socket.setNoDelay(true)
+
+			// Prepare message to send to VSCode module
+			const socketMessage = {
+				type: "VSCODE_EXTHOST_IPC_SOCKET",
+				initialDataChunk: "",
+				skipWebSocketFrames: true,
+				permessageDeflate: false,
+				inflateBytes: "",
+			}
+
+			// Call all saved message handlers
+			messageHandlers.forEach((handler) => {
+				try {
+					handler(socketMessage, socket)
+				} catch (error) {
+					console.error("Error in message handler:", error)
+				}
+			})
+
+			socket.on("error", (error) => {
+				console.error("Socket error:", error)
+				// Don't close server, wait for reconnection
+				fileLoggerGlobal.logOutgoing(0, 0, RequestInitiator.LocalSide, "Socket error:", error)
+			})
+
+			socket.on("close", () => {
+				console.log("Client connection closed, waiting for new connections...")
+				fileLoggerGlobal.logOutgoing(
+					0,
+					0,
+					RequestInitiator.LocalSide,
+					"Client connection closed, waiting for new connections...",
+				)
+			})
+		})
+
+		// Prevent server timeout closure, keep process active
+		const keepAliveInterval = setInterval(() => {
+			if (server.listening) {
+				console.log("Server still waiting for connections...")
+			}
+		}, 60000) // Print a log every minute to keep the process alive
+
+		// Ensure timer cleanup on process exit
+		process.on("exit", () => {
+			clearInterval(keepAliveInterval)
+		})
+
+		server.listen(PORT, "127.0.0.1", () => {
+			console.log(`Extension host server listening on 127.0.0.1:${PORT}`)
+			console.log("Waiting for main process to connect...")
+		})
+
+		server.on("error", (error) => {
+			console.error("Server error:", error)
+			fileLoggerGlobal.logOutgoing(0, 0, RequestInitiator.LocalSide, "Server error:", error)
+			// No longer exit process, only log error
+			// Try to restart server
+			setTimeout(() => {
+				if (!server.listening) {
+					console.log("Attempting to restart server after error...")
+					try {
+						server.listen(PORT, "127.0.0.1")
+					} catch (e) {
+						console.error("Failed to restart server:", e)
+					}
+				}
+			}, 5000)
+		})
+	}
+
+	// Client mode (original behavior)
+	function connect() {
+		if (isReconnecting) {
+			console.log("Already in reconnection process, skipping")
+			return
+		}
+
+		try {
+			// Check connection method
+			// console.log("get send socket:", process.env.VSCODE_EXTHOST_WILL_SEND_SOCKET);
+			// const useSocket = process.env.VSCODE_EXTHOST_WILL_SEND_SOCKET === "1";
+
+			// if (!useSocket) {
+			//     throw new Error('No connection method specified. Please set either VSCODE_EXTHOST_IPC_HOOK or VSCODE_EXTHOST_WILL_SEND_SOCKET');
+			// }
+
+			// Use regular TCP Socket
+			const host = process.env.VSCODE_EXTHOST_SOCKET_HOST || "127.0.0.1"
+			const port = parseInt(process.env.VSCODE_EXTHOST_SOCKET_PORT || "0", 10)
+
+			if (!port) {
+				throw new Error("Invalid socket port")
+			}
+
+			console.log(`Attempting to connect to ${host}:${port}`)
+
+			// Establish socket connection
+			const socket = net.createConnection(port, host)
+			// Set the noDelay option for the socket
+			socket.setNoDelay(true)
+
+			socket.on("connect", () => {
+				console.log("Connected to main server")
+				isReconnecting = false
+				reconnectAttempts = 0
+
+				// Prepare the message to be sent to the VSCode module
+				const socketMessage = {
+					type: "VSCODE_EXTHOST_IPC_SOCKET",
+					initialDataChunk: "",
+					skipWebSocketFrames: true,
+					permessageDeflate: false,
+					inflateBytes: "",
+				}
+
+				// Call all saved message handler functions
+				messageHandlers.forEach((handler) => {
+					try {
+						handler(socketMessage, socket)
+					} catch (error) {
+						console.error("Error in message handler:", error)
+					}
+				})
+			})
+
+			socket.on("error", (error: Error) => {
+				console.error("Socket connection error:", error)
+				fileLoggerGlobal.logOutgoing(0, 0, RequestInitiator.LocalSide, "Socket connection error:", error)
+				handleDisconnect()
+			})
+
+			socket.on("close", () => {
+				console.log("Socket connection closed")
+				handleDisconnect()
+			})
+		} catch (error) {
+			console.error("Connection error:", error)
+			fileLoggerGlobal.logOutgoing(0, 0, RequestInitiator.LocalSide, "Connection error:", error)
+			handleDisconnect()
+		}
+	}
+
+	// Handle disconnection
+	async function handleDisconnect() {
+		if (isReconnecting) {
+			console.log("Already in reconnection process, skipping")
+			fileLoggerGlobal.logOutgoing(0, 0, RequestInitiator.LocalSide, "Already in reconnection process, skipping")
+			return
+		}
+
+		if (reconnectAttempts >= MAX_RECONNECT_ATTEMPTS) {
+			console.error("Max reconnection attempts reached. Giving up.")
+			fileLoggerGlobal.logOutgoing(
+				0,
+				0,
+				RequestInitiator.LocalSide,
+				"Max reconnection attempts reached. Giving up.",
+			)
+			return
+		}
+
+		isReconnecting = true
+		reconnectAttempts++
+
+		console.log(`Attempting to reconnect (attempt ${reconnectAttempts}/${MAX_RECONNECT_ATTEMPTS})...`)
+
+		// Retry after waiting for a period of time
+		console.log(`Waiting ${RECONNECT_DELAY}ms before reconnecting...`)
+		await new Promise((resolve) => setTimeout(resolve, RECONNECT_DELAY))
+		console.log("Reconnection delay finished, attempting to connect...")
+
+		// Reset reconnection state to allow new reconnection attempts
+		isReconnecting = false
+		connect()
+	}
+}
+
+console.log("Starting extension host process...")
+
+// Adjust logic: only start directly in non-LISTEN mode
+if (LISTEN_MODE) {
+	process.env.VSCODE_EXTHOST_WILL_SEND_SOCKET = "1"
+}
+start()
diff --git a/jetbrains/host/src/extensionManager.ts b/jetbrains/host/src/extensionManager.ts
new file mode 100644
index 000000000..4d93d1364
--- /dev/null
+++ b/jetbrains/host/src/extensionManager.ts
@@ -0,0 +1,101 @@
+// Copyright 2009-2025 Weibo, Inc.
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+import {
+	ExtensionIdentifier,
+	IExtensionDescription,
+	TargetPlatform,
+} from "../deps/vscode/vs/platform/extensions/common/extensions.js"
+import { URI } from "../deps/vscode/vs/base/common/uri.js"
+import { ExtHostContext } from "../deps/vscode/vs/workbench/api/common/extHost.protocol.js"
+import { IRPCProtocol } from "../deps/vscode/vs/workbench/services/extensions/common/proxyIdentifier.js"
+import * as fs from "fs"
+import * as path from "path"
+
+export class ExtensionManager {
+	private extensionDescriptions: Map<string, IExtensionDescription> = new Map()
+
+	/**
+	 * Parse extension description information
+	 * @param extensionPath Extension path
+	 * @returns Extension description object
+	 */
+	private parseExtensionDescription(extensionPath: string): IExtensionDescription {
+		const packageJsonPath = path.join(extensionPath, "extension.package.json")
+		const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, "utf8"))
+
+		return {
+			identifier: new ExtensionIdentifier(packageJson.name),
+			name: packageJson.name,
+			displayName: packageJson.displayName,
+			description: packageJson.description,
+			version: packageJson.version,
+			publisher: packageJson.publisher,
+			main: "./extension.cjs",
+			activationEvents: packageJson.activationEvents || ["onStartupFinished"],
+			extensionLocation: URI.file(path.resolve(extensionPath)),
+			targetPlatform: TargetPlatform.UNIVERSAL,
+			isBuiltin: false,
+			isUserBuiltin: false,
+			isUnderDevelopment: false,
+			engines: packageJson.engines || { vscode: "^1.0.0" },
+			preRelease: false,
+			capabilities: {},
+			extensionDependencies: packageJson.extensionDependencies || [],
+		}
+	}
+
+	/**
+	 * Get all parsed extension descriptions
+	 * @returns Extension description array
+	 */
+	public getAllExtensionDescriptions(): IExtensionDescription[] {
+		return Array.from(this.extensionDescriptions.values())
+	}
+
+	/**
+	 * Get description information for specified extension
+	 * @param extensionId Extension ID
+	 * @returns Extension description object, or undefined if not exists
+	 */
+	public getExtensionDescription(extensionId: string): IExtensionDescription | undefined {
+		return this.extensionDescriptions.get(extensionId)
+	}
+
+	/**
+	 * Register an extension
+	 * @param extensionPath Extension path
+	 * @returns Extension description object
+	 */
+	public registerExtension(extensionPath: string): IExtensionDescription {
+		const extensionDescription = this.parseExtensionDescription(extensionPath)
+		this.extensionDescriptions.set(extensionDescription.identifier.value, extensionDescription)
+		return extensionDescription
+	}
+
+	/**
+	 * Activate a registered extension
+	 * @param extensionId Extension ID
+	 * @param protocol RPC protocol
+	 */
+	public async activateExtension(extensionId: string, protocol: IRPCProtocol): Promise<void> {
+		const extensionDescription = this.extensionDescriptions.get(extensionId)
+		if (!extensionDescription) {
+			throw new Error(`Extension ${extensionId} is not registered`)
+		}
+
+		try {
+			const extensionService = protocol.getProxy(ExtHostContext.ExtHostExtensionService)
+			await extensionService.$activate(extensionDescription.identifier, {
+				startup: true,
+				extensionId: extensionDescription.identifier,
+				activationEvent: "api",
+			})
+		} catch (error) {
+			console.error(`Failed to activate extension ${extensionId}:`, error)
+			throw error
+		}
+	}
+}
diff --git a/jetbrains/host/src/main.ts b/jetbrains/host/src/main.ts
new file mode 100644
index 000000000..471507255
--- /dev/null
+++ b/jetbrains/host/src/main.ts
@@ -0,0 +1,202 @@
+// Copyright 2009-2025 Weibo, Inc.
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+import { fork } from "child_process"
+import * as path from "path"
+import { fileURLToPath } from "url"
+import * as net from "net"
+import { VSBuffer } from "../deps/vscode/vs/base/common/buffer.js"
+import { NodeSocket } from "../deps/vscode/vs/base/parts/ipc/node/ipc.net.js"
+import { PersistentProtocol } from "../deps/vscode/vs/base/parts/ipc/common/ipc.net.js"
+import { DEBUG_PORT } from "./config.js"
+import {
+	MessageType,
+	createMessageOfType,
+	isMessageOfType,
+	UIKind,
+	IExtensionHostInitData,
+} from "../deps/vscode/vs/workbench/services/extensions/common/extensionHostProtocol.js"
+import { SocketCloseEvent, SocketCloseEventType } from "../deps/vscode/vs/base/parts/ipc/common/ipc.net.js"
+import { IDisposable } from "../deps/vscode/vs/base/common/lifecycle.js"
+import { URI } from "../deps/vscode/vs/base/common/uri.js"
+import { RPCManager } from "./rpcManager.js"
+import { ExtensionManager } from "./extensionManager.js"
+
+// Get current file directory path
+const __filename = fileURLToPath(import.meta.url)
+const __dirname = path.dirname(__filename)
+
+// Create ExtensionManager instance and register extension
+const extensionManager = new ExtensionManager()
+const rooCodeIdentifier = extensionManager.registerExtension("kilocode").identifier
+
+// Declare extension host process variables
+let extHostProcess: ReturnType<typeof fork>
+let protocol: PersistentProtocol | null = null
+let rpcManager: RPCManager | null = null
+
+// Create socket server
+const server = net.createServer((socket) => {
+	console.log("Someone connected to main server")
+
+	// Set socket noDelay option
+	socket.setNoDelay(true)
+
+	// Wrap socket with NodeSocket
+	const nodeSocket = new NodeSocket(socket)
+
+	// Listen for NodeSocket close events
+	const closeDisposable: IDisposable = nodeSocket.onClose((event: SocketCloseEvent | undefined) => {
+		console.log("NodeSocket close event received")
+		if (event?.type === SocketCloseEventType.NodeSocketCloseEvent) {
+			if (event.hadError) {
+				console.error("Socket closed with error:", event.error)
+			} else {
+				console.log("Socket closed normally")
+			}
+		}
+		closeDisposable.dispose()
+	})
+
+	// Create PersistentProtocol instance
+	protocol = new PersistentProtocol({
+		socket: nodeSocket,
+		initialChunk: null,
+	})
+
+	// Set protocol message handler
+	protocol.onMessage((message) => {
+		if (isMessageOfType(message, MessageType.Ready)) {
+			console.log("Extension host is ready")
+			// Send initialization data
+			const initData: IExtensionHostInitData = {
+				commit: "development",
+				version: "1.0.0",
+				quality: undefined,
+				parentPid: process.pid,
+				environment: {
+					isExtensionDevelopmentDebug: false,
+					appName: "VSCodeAPIHook",
+					appHost: "node",
+					appLanguage: "en",
+					appUriScheme: "vscode",
+					appRoot: URI.file(__dirname),
+					globalStorageHome: URI.file(path.join(__dirname, "globalStorage")),
+					workspaceStorageHome: URI.file(path.join(__dirname, "workspaceStorage")),
+					extensionDevelopmentLocationURI: undefined,
+					extensionTestsLocationURI: undefined,
+					useHostProxy: false,
+					skipWorkspaceStorageLock: false,
+					isExtensionTelemetryLoggingOnly: false,
+				},
+				workspace: {
+					id: "development-workspace",
+					name: "Development Workspace",
+					transient: false,
+					configuration: null,
+					isUntitled: false,
+				},
+				remote: {
+					authority: undefined,
+					connectionData: null,
+					isRemote: false,
+				},
+				extensions: {
+					versionId: 1,
+					allExtensions: extensionManager.getAllExtensionDescriptions(),
+					myExtensions: extensionManager.getAllExtensionDescriptions().map((ext) => ext.identifier),
+					activationEvents: extensionManager.getAllExtensionDescriptions().reduce(
+						(events, ext) => {
+							if (ext.activationEvents) {
+								events[ext.identifier.value] = ext.activationEvents
+							}
+							return events
+						},
+						{} as { [extensionId: string]: string[] },
+					),
+				},
+				telemetryInfo: {
+					sessionId: "development-session",
+					machineId: "development-machine",
+					sqmId: "",
+					devDeviceId: "",
+					firstSessionDate: new Date().toISOString(),
+					msftInternal: false,
+				},
+				logLevel: 0, // Info level
+				loggers: [],
+				logsLocation: URI.file(path.join(__dirname, "logs")),
+				autoStart: true,
+				consoleForward: {
+					includeStack: false,
+					logNative: false,
+				},
+				uiKind: UIKind.Desktop,
+			}
+			protocol?.send(VSBuffer.fromString(JSON.stringify(initData)))
+		} else if (isMessageOfType(message, MessageType.Initialized)) {
+			console.log("Extension host initialized")
+			// Create RPCManager instance
+			rpcManager = new RPCManager(protocol!, extensionManager)
+
+			rpcManager.startInitialize()
+
+			// Activate rooCode plugin
+			const rpcProtocol = rpcManager.getRPCProtocol()
+			if (rpcProtocol) {
+				extensionManager.activateExtension(rooCodeIdentifier.value, rpcProtocol).catch((error: Error) => {
+					console.error("Failed to load rooCode plugin:", error)
+				})
+			} else {
+				console.error("Failed to get RPCProtocol from RPCManager")
+			}
+		}
+	})
+})
+
+function startExtensionHostProcess() {
+	process.env.VSCODE_DEBUG = "true"
+	let nodeOptions = process.env.VSCODE_DEBUG ? `--inspect-brk=9229` : `--inspect=${DEBUG_PORT}`
+	console.log("will start extension host process with options:", nodeOptions)
+
+	// Create extension host process and pass environment variables
+	extHostProcess = fork(path.join(__dirname, "extension.js"), [], {
+		env: {
+			...process.env,
+			VSCODE_EXTHOST_WILL_SEND_SOCKET: "1",
+			VSCODE_EXTHOST_SOCKET_HOST: "127.0.0.1",
+			VSCODE_EXTHOST_SOCKET_PORT: (server.address() as net.AddressInfo)?.port?.toString() || "0",
+			NODE_OPTIONS: nodeOptions,
+		},
+	})
+
+	// Handle extension host process exit
+	extHostProcess.on("exit", (code: number | null, signal: string | null) => {
+		console.log(`Extension host process exited with code ${code} and signal ${signal}`)
+		server.close()
+	})
+}
+
+// Listen on random port
+server.listen(0, "127.0.0.1", () => {
+	const address = server.address()
+	if (address && typeof address !== "string") {
+		console.log(`Server listening on port ${address.port}`)
+		startExtensionHostProcess()
+	}
+})
+
+// Handle process exit
+process.on("SIGINT", () => {
+	console.log("Cleaning up...")
+	if (protocol) {
+		protocol.send(createMessageOfType(MessageType.Terminate))
+	}
+	server.close()
+	if (extHostProcess) {
+		extHostProcess.kill()
+	}
+	process.exit(0)
+})
diff --git a/jetbrains/host/src/rpcManager.ts b/jetbrains/host/src/rpcManager.ts
new file mode 100644
index 000000000..a9f6d2811
--- /dev/null
+++ b/jetbrains/host/src/rpcManager.ts
@@ -0,0 +1,997 @@
+// Copyright 2009-2025 Weibo, Inc.
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+import { RPCProtocol } from "../deps/vscode/vs/workbench/services/extensions/common/rpcProtocol.js"
+import { IRPCProtocol } from "../deps/vscode/vs/workbench/services/extensions/common/proxyIdentifier.js"
+import { PersistentProtocol } from "../deps/vscode/vs/base/parts/ipc/common/ipc.net.js"
+import { MainContext, ExtHostContext } from "../deps/vscode/vs/workbench/api/common/extHost.protocol.js"
+import {
+	IRPCProtocolLogger,
+	RequestInitiator,
+} from "../deps/vscode/vs/workbench/services/extensions/common/rpcProtocol.js"
+import { UriComponents, UriDto } from "../deps/vscode/vs/base/common/uri.js"
+import { LogLevel } from "../deps/vscode/vs/platform/log/common/log.js"
+import { ILoggerResource } from "../deps/vscode/vs/platform/log/common/log.js"
+import { TerminalLaunchConfig } from "../deps/vscode/vs/workbench/api/common/extHost.protocol.js"
+import { IRawFileMatch2 } from "../deps/vscode/vs/workbench/services/search/common/search.js"
+import { VSBuffer } from "../deps/vscode/vs/base/common/buffer.js"
+import { SerializedError, transformErrorFromSerialization } from "../deps/vscode/vs/base/common/errors.js"
+import { IRemoteConsoleLog } from "../deps/vscode/vs/base/common/console.js"
+import { FileType, FilePermission, FileSystemProviderErrorCode } from "../deps/vscode/vs/platform/files/common/files.js"
+import * as fs from "fs"
+import { promisify } from "util"
+import { ConfigurationModel } from "../deps/vscode/vs/platform/configuration/common/configurationModels.js"
+import { NullLogService } from "../deps/vscode/vs/platform/log/common/log.js"
+import { ExtensionIdentifier } from "../deps/vscode/vs/platform/extensions/common/extensions.js"
+import { ExtensionActivationReason } from "../deps/vscode/vs/workbench/services/extensions/common/extensions.js"
+import { IExtensionDescription } from "../deps/vscode/vs/platform/extensions/common/extensions.js"
+import { Dto } from "../deps/vscode/vs/workbench/services/extensions/common/proxyIdentifier.js"
+import { ExtensionManager } from "./extensionManager.js"
+import { WebViewManager } from "./webViewManager.js"
+
+// Promisify Node.js fs functions
+const fsStat = promisify(fs.stat)
+const fsReadDir = promisify(fs.readdir)
+const fsReadFile = promisify(fs.readFile)
+const fsWriteFile = promisify(fs.writeFile)
+const fsRename = promisify(fs.rename)
+const fsCopyFile = promisify(fs.copyFile)
+const fsUnlink = promisify(fs.unlink)
+const fsLstat = promisify(fs.lstat)
+const fsMkdir = promisify(fs.mkdir)
+
+class RPCLogger implements IRPCProtocolLogger {
+	logIncoming(msgLength: number, req: number, initiator: RequestInitiator, msg: string, data?: any): void {
+		if (msg == "ack") {
+			return
+		}
+		console.log(`[RPC] ExtHost: ${msg}`)
+	}
+
+	logOutgoing(msgLength: number, req: number, initiator: RequestInitiator, msg: string, data?: any): void {
+		if (msg == "ack" || msg == "reply:") {
+			return
+		}
+		console.log(`[RPC] Main: ${msg}`)
+	}
+}
+
+export class RPCManager {
+	private rpcProtocol: IRPCProtocol
+	private logger: RPCLogger
+	private extensionManager: ExtensionManager
+
+	constructor(
+		private protocol: PersistentProtocol,
+		extensionManager: ExtensionManager,
+	) {
+		this.logger = new RPCLogger()
+		this.rpcProtocol = new RPCProtocol(this.protocol, this.logger)
+		this.extensionManager = extensionManager
+		this.setupDefaultProtocols()
+		this.setupExtensionRequiredProtocols()
+		this.setupRooCodeRequiredProtocols()
+	}
+
+	public startInitialize(): void {
+		// ExtHostConfiguration
+		const extHostConfiguration = this.rpcProtocol.getProxy(ExtHostContext.ExtHostConfiguration)
+
+		// Send initialization configuration message
+		extHostConfiguration.$initializeConfiguration({
+			defaults: ConfigurationModel.createEmptyModel(new NullLogService()),
+			policy: ConfigurationModel.createEmptyModel(new NullLogService()),
+			application: ConfigurationModel.createEmptyModel(new NullLogService()),
+			userLocal: ConfigurationModel.createEmptyModel(new NullLogService()),
+			userRemote: ConfigurationModel.createEmptyModel(new NullLogService()),
+			workspace: ConfigurationModel.createEmptyModel(new NullLogService()),
+			folders: [],
+			configurationScopes: [],
+		})
+
+		const extHostWorkspace = this.rpcProtocol.getProxy(ExtHostContext.ExtHostWorkspace)
+
+		// Initialize workspace
+		extHostWorkspace.$initializeWorkspace(null, true)
+	}
+
+	// Protocols needed for extHost process startup and initialization
+	public setupDefaultProtocols(): void {
+		if (!this.rpcProtocol) {
+			throw new Error("RPCProtocol not initialized")
+		}
+
+		// MainThreadErrors
+		this.rpcProtocol.set(MainContext.MainThreadErrors, {
+			dispose(): void {
+				// Nothing to do
+			},
+			$onUnexpectedError(err: any | SerializedError): void {
+				if (err && err.$isError) {
+					err = transformErrorFromSerialization(err)
+				}
+				console.error("Unexpected error:", err)
+				/*
+                if (err instanceof Error && err.stack) {
+                    console.error('Stack trace:', err.stack);
+                }
+                    */
+			},
+		})
+
+		// MainThreadConsole
+		this.rpcProtocol.set(MainContext.MainThreadConsole, {
+			dispose(): void {
+				// Nothing to do
+			},
+			$logExtensionHostMessage(entry: IRemoteConsoleLog): void {
+				// Parse the entry
+				const args = this.parseRemoteConsoleLog(entry)
+
+				// Log based on severity
+				switch (entry.severity) {
+					case "log":
+					case "info":
+						console.log("[Extension Host]", ...args)
+						break
+					case "warn":
+						console.warn("[Extension Host]", ...args)
+						break
+					case "error":
+						console.error("[Extension Host]", ...args)
+						break
+					case "debug":
+						console.debug("[Extension Host]", ...args)
+						break
+					default:
+						console.log("[Extension Host]", ...args)
+				}
+			},
+			parseRemoteConsoleLog(entry: IRemoteConsoleLog): any[] {
+				const args: any[] = []
+
+				try {
+					// Parse the arguments string as JSON
+					const parsedArguments = JSON.parse(entry.arguments)
+					args.push(...parsedArguments)
+				} catch (error) {
+					// If parsing fails, just log the raw arguments string
+					args.push("Unable to log remote console arguments", entry.arguments)
+				}
+
+				return args
+			},
+		})
+
+		// MainThreadLogger
+		this.rpcProtocol.set(MainContext.MainThreadLogger, {
+			$log(file: UriComponents, messages: [LogLevel, string][]): void {
+				console.log("Logger message:", { file, messages })
+			},
+			$flush(file: UriComponents): void {
+				console.log("Flush logger:", file)
+			},
+			$createLogger(file: UriComponents, options?: any): Promise<void> {
+				console.log("Create logger:", { file, options })
+				return Promise.resolve()
+			},
+			$registerLogger(logger: UriDto<ILoggerResource>): Promise<void> {
+				console.log("Register logger (id: ", logger.id, ", name: ", logger.name, ")")
+				return Promise.resolve()
+			},
+			$deregisterLogger(resource: UriComponents): Promise<void> {
+				console.log("Deregister logger:", resource)
+				return Promise.resolve()
+			},
+			$setVisibility(resource: UriComponents, visible: boolean): Promise<void> {
+				console.log("Set logger visibility:", { resource, visible })
+				return Promise.resolve()
+			},
+		})
+
+		// MainThreadCommands
+		this.rpcProtocol.set(MainContext.MainThreadCommands, {
+			$registerCommand(id: string): void {
+				console.log("Register command:", id)
+			},
+			$unregisterCommand(id: string): void {
+				console.log("Unregister command:", id)
+			},
+			$executeCommand<T>(id: string, ...args: any[]): Promise<T> {
+				console.log("Execute command:", id, args)
+				return Promise.resolve(null as T)
+			},
+			$fireCommandActivationEvent(id: string): void {
+				console.log("Fire command activation event:", id)
+			},
+			$getCommands(): Promise<string[]> {
+				return Promise.resolve([])
+			},
+			dispose(): void {
+				console.log("Dispose MainThreadCommands")
+			},
+		})
+
+		// MainThreadTerminalService
+		this.rpcProtocol.set(MainContext.MainThreadTerminalService, {
+			$registerProcessSupport(isSupported: boolean): void {
+				console.log("Register process support:", isSupported)
+			},
+			$createTerminal(extHostTerminalId: string, config: TerminalLaunchConfig): Promise<void> {
+				console.log("Create terminal:", { extHostTerminalId, config })
+				return Promise.resolve()
+			},
+			$dispose(id: string): void {
+				console.log("Dispose terminal:", id)
+			},
+			$hide(id: string): void {
+				console.log("Hide terminal:", id)
+			},
+			$sendText(id: string, text: string, shouldExecute: boolean): void {
+				console.log("Send text to terminal:", { id, text, shouldExecute })
+			},
+			$show(id: string, preserveFocus: boolean): void {
+				console.log("Show terminal:", { id, preserveFocus })
+			},
+			$registerProfileProvider(id: string, extensionIdentifier: string): void {
+				console.log("Register profile provider:", { id, extensionIdentifier })
+			},
+			$unregisterProfileProvider(id: string): void {
+				console.log("Unregister profile provider:", id)
+			},
+			$registerCompletionProvider(id: string, extensionIdentifier: string, ...triggerCharacters: string[]): void {
+				console.log("Register completion provider:", { id, extensionIdentifier, triggerCharacters })
+			},
+			$unregisterCompletionProvider(id: string): void {
+				console.log("Unregister completion provider:", id)
+			},
+			$registerQuickFixProvider(id: string, extensionIdentifier: string): void {
+				console.log("Register quick fix provider:", { id, extensionIdentifier })
+			},
+			$unregisterQuickFixProvider(id: string): void {
+				console.log("Unregister quick fix provider:", id)
+			},
+			$setEnvironmentVariableCollection(
+				extensionIdentifier: string,
+				persistent: boolean,
+				collection: any,
+				descriptionMap: any,
+			): void {
+				console.log("Set environment variable collection:", {
+					extensionIdentifier,
+					persistent,
+					collection,
+					descriptionMap,
+				})
+			},
+			$startSendingDataEvents(): void {
+				console.log("Start sending data events")
+			},
+			$stopSendingDataEvents(): void {
+				console.log("Stop sending data events")
+			},
+			$startSendingCommandEvents(): void {
+				console.log("Start sending command events")
+			},
+			$stopSendingCommandEvents(): void {
+				console.log("Stop sending command events")
+			},
+			$startLinkProvider(): void {
+				console.log("Start link provider")
+			},
+			$stopLinkProvider(): void {
+				console.log("Stop link provider")
+			},
+			$sendProcessData(terminalId: number, data: string): void {
+				console.log("Send process data:", { terminalId, data })
+			},
+			$sendProcessReady(terminalId: number, pid: number, cwd: string, windowsPty: any): void {
+				console.log("Send process ready:", { terminalId, pid, cwd, windowsPty })
+			},
+			$sendProcessProperty(terminalId: number, property: any): void {
+				console.log("Send process property:", { terminalId, property })
+			},
+			$sendProcessExit(terminalId: number, exitCode: number | undefined): void {
+				console.log("Send process exit:", { terminalId, exitCode })
+			},
+			dispose(): void {
+				console.log("Dispose MainThreadTerminalService")
+			},
+		})
+
+		// MainThreadWindow
+		this.rpcProtocol.set(MainContext.MainThreadWindow, {
+			$getInitialState(): Promise<{ isFocused: boolean; isActive: boolean }> {
+				console.log("Get initial state")
+				return Promise.resolve({ isFocused: false, isActive: false })
+			},
+			$openUri(uri: UriComponents, uriString: string | undefined, options: any): Promise<boolean> {
+				console.log("Open URI:", { uri, uriString, options })
+				return Promise.resolve(true)
+			},
+			$asExternalUri(uri: UriComponents, options: any): Promise<UriComponents> {
+				console.log("As external URI:", { uri, options })
+				return Promise.resolve(uri)
+			},
+			dispose(): void {
+				console.log("Dispose MainThreadWindow")
+			},
+		})
+
+		// MainThreadSearch
+		this.rpcProtocol.set(MainContext.MainThreadSearch, {
+			$registerFileSearchProvider(handle: number, scheme: string): void {
+				console.log("Register file search provider:", { handle, scheme })
+			},
+			$registerAITextSearchProvider(handle: number, scheme: string): void {
+				console.log("Register AI text search provider:", { handle, scheme })
+			},
+			$registerTextSearchProvider(handle: number, scheme: string): void {
+				console.log("Register text search provider:", { handle, scheme })
+			},
+			$unregisterProvider(handle: number): void {
+				console.log("Unregister provider:", handle)
+			},
+			$handleFileMatch(handle: number, session: number, data: UriComponents[]): void {
+				console.log("Handle file match:", { handle, session, data })
+			},
+			$handleTextMatch(handle: number, session: number, data: IRawFileMatch2[]): void {
+				console.log("Handle text match:", { handle, session, data })
+			},
+			$handleTelemetry(eventName: string, data: any): void {
+				console.log("Handle telemetry:", { eventName, data })
+			},
+			dispose(): void {
+				console.log("Dispose MainThreadSearch")
+			},
+		})
+
+		// MainThreadTask
+		this.rpcProtocol.set(MainContext.MainThreadTask, {
+			$createTaskId(task: any): Promise<string> {
+				console.log("Create task ID:", task)
+				return Promise.resolve("task-id")
+			},
+			$registerTaskProvider(handle: number, type: string): Promise<void> {
+				console.log("Register task provider:", { handle, type })
+				return Promise.resolve()
+			},
+			$unregisterTaskProvider(handle: number): Promise<void> {
+				console.log("Unregister task provider:", handle)
+				return Promise.resolve()
+			},
+			$fetchTasks(filter?: any): Promise<any[]> {
+				console.log("Fetch tasks:", filter)
+				return Promise.resolve([])
+			},
+			$getTaskExecution(value: any): Promise<any> {
+				console.log("Get task execution:", value)
+				return Promise.resolve(null)
+			},
+			$executeTask(task: any): Promise<any> {
+				console.log("Execute task:", task)
+				return Promise.resolve(null)
+			},
+			$terminateTask(id: string): Promise<void> {
+				console.log("Terminate task:", id)
+				return Promise.resolve()
+			},
+			$registerTaskSystem(scheme: string, info: any): void {
+				console.log("Register task system:", { scheme, info })
+			},
+			$customExecutionComplete(id: string, result?: number): Promise<void> {
+				console.log("Custom execution complete:", { id, result })
+				return Promise.resolve()
+			},
+			$registerSupportedExecutions(custom?: boolean, shell?: boolean, process?: boolean): Promise<void> {
+				console.log("Register supported executions:", { custom, shell, process })
+				return Promise.resolve()
+			},
+			dispose(): void {
+				console.log("Dispose MainThreadTask")
+			},
+		})
+
+		// MainThreadConfiguration
+		this.rpcProtocol.set(MainContext.MainThreadConfiguration, {
+			$updateConfigurationOption(
+				target: any,
+				key: string,
+				value: any,
+				overrides: any,
+				scopeToLanguage: boolean | undefined,
+			): Promise<void> {
+				console.log("Update configuration option:", { target, key, value, overrides, scopeToLanguage })
+				return Promise.resolve()
+			},
+			$removeConfigurationOption(
+				target: any,
+				key: string,
+				overrides: any,
+				scopeToLanguage: boolean | undefined,
+			): Promise<void> {
+				console.log("Remove configuration option:", { target, key, overrides, scopeToLanguage })
+				return Promise.resolve()
+			},
+			dispose(): void {
+				console.log("Dispose MainThreadConfiguration")
+			},
+		})
+
+		// MainThreadFileSystem
+		this.rpcProtocol.set(MainContext.MainThreadFileSystem, {
+			async $registerFileSystemProvider(
+				handle: number,
+				scheme: string,
+				capabilities: any,
+				readonlyMessage?: any,
+			): Promise<void> {
+				console.log("Register file system provider:", { handle, scheme, capabilities, readonlyMessage })
+			},
+			$unregisterProvider(handle: number): void {
+				console.log("Unregister provider:", handle)
+			},
+			$onFileSystemChange(handle: number, resource: any[]): void {
+				console.log("File system change:", { handle, resource })
+			},
+			async $stat(resource: UriComponents): Promise<any> {
+				console.log("Stat:", resource)
+				try {
+					const filePath = this.uriToPath(resource)
+					const stats = await fsStat(filePath)
+
+					return {
+						type: this.getFileType(stats),
+						ctime: stats.birthtimeMs,
+						mtime: stats.mtimeMs,
+						size: stats.size,
+						permissions: stats.mode & 0o444 ? FilePermission.Readonly : undefined,
+					}
+				} catch (error) {
+					console.error("Error in $stat:", error)
+					throw this.handleFileSystemError(error)
+				}
+			},
+			async $readdir(resource: UriComponents): Promise<[string, FileType][]> {
+				console.log("Read directory:", resource)
+				try {
+					const filePath = this.uriToPath(resource)
+					const entries = await fsReadDir(filePath, { withFileTypes: true })
+
+					return entries.map((entry) => {
+						let type = FileType.Unknown
+						if (entry.isFile()) {
+							type = FileType.File
+						} else if (entry.isDirectory()) {
+							type = FileType.Directory
+						}
+
+						// Check if it's a symbolic link
+						if (entry.isSymbolicLink()) {
+							type |= FileType.SymbolicLink
+						}
+
+						return [entry.name, type] as [string, FileType]
+					})
+				} catch (error) {
+					console.error("Error in $readdir:", error)
+					throw this.handleFileSystemError(error)
+				}
+			},
+			async $readFile(resource: UriComponents): Promise<any> {
+				console.log("Read file:", resource)
+				try {
+					const filePath = this.uriToPath(resource)
+					const buffer = await fsReadFile(filePath)
+					return VSBuffer.wrap(buffer)
+				} catch (error) {
+					console.error("Error in $readFile:", error)
+					throw this.handleFileSystemError(error)
+				}
+			},
+			async $writeFile(resource: UriComponents, content: any): Promise<void> {
+				console.log("Write file:", { resource, content })
+				try {
+					const filePath = this.uriToPath(resource)
+					const buffer = content instanceof VSBuffer ? content.buffer : content
+					await fsWriteFile(filePath, buffer)
+				} catch (error) {
+					console.error("Error in $writeFile:", error)
+					throw this.handleFileSystemError(error)
+				}
+			},
+			async $rename(resource: UriComponents, target: UriComponents, opts: any): Promise<void> {
+				console.log("Rename:", { resource, target, opts })
+				try {
+					const sourcePath = this.uriToPath(resource)
+					const targetPath = this.uriToPath(target)
+
+					// Check if target exists and handle overwrite option
+					if (opts.overwrite) {
+						try {
+							await fsUnlink(targetPath)
+						} catch (error) {
+							// Ignore error if file doesn't exist
+						}
+					}
+
+					await fsRename(sourcePath, targetPath)
+				} catch (error) {
+					console.error("Error in $rename:", error)
+					throw this.handleFileSystemError(error)
+				}
+			},
+			async $copy(resource: UriComponents, target: UriComponents, opts: any): Promise<void> {
+				console.log("Copy:", { resource, target, opts })
+				try {
+					const sourcePath = this.uriToPath(resource)
+					const targetPath = this.uriToPath(target)
+
+					// Check if target exists and handle overwrite option
+					if (opts.overwrite) {
+						try {
+							await fsUnlink(targetPath)
+						} catch (error) {
+							// Ignore error if file doesn't exist
+						}
+					}
+
+					await fsCopyFile(sourcePath, targetPath)
+				} catch (error) {
+					console.error("Error in $copy:", error)
+					throw this.handleFileSystemError(error)
+				}
+			},
+			async $mkdir(resource: UriComponents): Promise<void> {
+				console.log("Make directory:", resource)
+				try {
+					const dirPath = this.uriToPath(resource)
+					await fsMkdir(dirPath, { recursive: true })
+				} catch (error) {
+					console.error("Error in $mkdir:", error)
+					throw this.handleFileSystemError(error)
+				}
+			},
+			async $delete(resource: UriComponents, opts: any): Promise<void> {
+				console.log("Delete:", { resource, opts })
+				try {
+					const filePath = this.uriToPath(resource)
+
+					// Check if it's a directory
+					const stats = await fsLstat(filePath)
+					if (stats.isDirectory()) {
+						// For directories, we need to implement recursive deletion
+						// This is a simplified version
+						await fs.promises.rm(filePath, { recursive: true })
+					} else {
+						await fsUnlink(filePath)
+					}
+				} catch (error) {
+					console.error("Error in $delete:", error)
+					throw this.handleFileSystemError(error)
+				}
+			},
+			async $ensureActivation(scheme: string): Promise<void> {
+				console.log("Ensure activation:", scheme)
+				// No-op implementation
+				return Promise.resolve()
+			},
+			dispose(): void {
+				console.log("Dispose MainThreadFileSystem")
+			},
+
+			// Helper methods
+			uriToPath(uri: UriComponents): string {
+				// Convert URI to file path
+				// This is a simplified implementation
+				if (uri.scheme !== "file") {
+					throw new Error(`Unsupported URI scheme: ${uri.scheme}`)
+				}
+
+				// Handle Windows paths
+				let filePath = uri.path || ""
+				if (process.platform === "win32" && filePath.startsWith("/")) {
+					filePath = filePath.substring(1)
+				}
+
+				return filePath
+			},
+
+			getFileType(stats: fs.Stats): FileType {
+				let type = FileType.Unknown
+
+				if (stats.isFile()) {
+					type = FileType.File
+				} else if (stats.isDirectory()) {
+					type = FileType.Directory
+				}
+
+				// Check if it's a symbolic link
+				if (stats.isSymbolicLink()) {
+					type |= FileType.SymbolicLink
+				}
+
+				return type
+			},
+
+			handleFileSystemError(error: any): Error {
+				// Map Node.js errors to VSCode file system errors
+				if (error.code === "ENOENT") {
+					const err = new Error(error.message)
+					err.name = FileSystemProviderErrorCode.FileNotFound
+					return err
+				} else if (error.code === "EACCES" || error.code === "EPERM") {
+					const err = new Error(error.message)
+					err.name = FileSystemProviderErrorCode.NoPermissions
+					return err
+				} else if (error.code === "EEXIST") {
+					const err = new Error(error.message)
+					err.name = FileSystemProviderErrorCode.FileExists
+					return err
+				} else if (error.code === "EISDIR") {
+					const err = new Error(error.message)
+					err.name = FileSystemProviderErrorCode.FileIsADirectory
+					return err
+				} else if (error.code === "ENOTDIR") {
+					const err = new Error(error.message)
+					err.name = FileSystemProviderErrorCode.FileNotADirectory
+					return err
+				}
+
+				// Default error
+				return error
+			},
+		})
+
+		// MainThreadLanguageModelTools
+		this.rpcProtocol.set(MainContext.MainThreadLanguageModelTools, {
+			$getTools(): Promise<any[]> {
+				console.log("Getting language model tools")
+				return Promise.resolve([])
+			},
+			$invokeTool(dto: any, token: any): Promise<any> {
+				console.log("Invoking language model tool:", dto)
+				return Promise.resolve({})
+			},
+			$countTokensForInvocation(callId: string, input: string, token: any): Promise<number> {
+				console.log("Counting tokens for invocation:", { callId, input })
+				return Promise.resolve(0)
+			},
+			$registerTool(id: string): void {
+				console.log("Registering language model tool:", id)
+			},
+			$unregisterTool(name: string): void {
+				console.log("Unregistering language model tool:", name)
+			},
+			dispose(): void {
+				console.log("Disposing MainThreadLanguageModelTools")
+			},
+		})
+	}
+
+	// Protocols needed for general extension loading process
+	public setupExtensionRequiredProtocols(): void {
+		if (!this.rpcProtocol) {
+			return
+		}
+
+		this.rpcProtocol.set(MainContext.MainThreadExtensionService, {
+			$getExtension: async (extensionId: string): Promise<Dto<IExtensionDescription> | undefined> => {
+				console.log(`Getting extension: ${extensionId}`)
+				return this.extensionManager.getExtensionDescription(extensionId)
+			},
+			$activateExtension: async (
+				extensionId: ExtensionIdentifier,
+				reason: ExtensionActivationReason,
+			): Promise<void> => {
+				console.log(`Activating extension ${extensionId.value} with reason:`, reason)
+				await this.extensionManager.activateExtension(extensionId.value, this.rpcProtocol)
+			},
+			$onWillActivateExtension: async (extensionId: ExtensionIdentifier): Promise<void> => {
+				console.log(`Extension ${extensionId.value} will be activated`)
+			},
+			$onDidActivateExtension: (
+				extensionId: ExtensionIdentifier,
+				codeLoadingTime: number,
+				activateCallTime: number,
+				activateResolvedTime: number,
+				activationReason: ExtensionActivationReason,
+			): void => {
+				console.log(`Extension ${extensionId.value} was activated with reason:`, activationReason)
+			},
+			$onExtensionActivationError: async (
+				extensionId: ExtensionIdentifier,
+				error: any,
+				missingExtensionDependency: any | null,
+			): Promise<void> => {
+				console.error(`Extension ${extensionId.value} activation error:`, error)
+			},
+			$onExtensionRuntimeError: (extensionId: ExtensionIdentifier, error: any): void => {
+				console.error(`Extension ${extensionId.value} runtime error:`, error)
+			},
+			$setPerformanceMarks: async (marks: { name: string; startTime: number }[]): Promise<void> => {
+				console.log("Setting performance marks:", marks)
+			},
+			$asBrowserUri: async (uri: any): Promise<any> => {
+				console.log("Converting to browser URI:", uri)
+				return uri
+			},
+			dispose: () => {
+				console.log("Disposing MainThreadExtensionService")
+			},
+		})
+
+		this.rpcProtocol.set(MainContext.MainThreadTelemetry, {
+			$publicLog(eventName: string, data?: any): void {
+				console.log(`[Telemetry] ${eventName}`, data)
+			},
+			$publicLog2<E extends any = never, T extends any = never>(eventName: string, data?: any): void {
+				console.log(`[Telemetry] ${eventName}`, data)
+			},
+			dispose(): void {
+				console.log("Disposing MainThreadTelemetry")
+			},
+		})
+
+		this.rpcProtocol.set(MainContext.MainThreadDebugService, {
+			$registerDebugTypes(debugTypes: string[]): void {
+				console.log("Register debug types:", debugTypes)
+			},
+			$sessionCached(sessionID: string): void {
+				console.log("Session cached:", sessionID)
+			},
+			$acceptDAMessage(handle: number, message: any): void {
+				console.log("Accept debug adapter message:", { handle, message })
+			},
+			$acceptDAError(handle: number, name: string, message: string, stack: string | undefined): void {
+				console.error("Debug adapter error:", { handle, name, message, stack })
+			},
+			$acceptDAExit(handle: number, code: number | undefined, signal: string | undefined): void {
+				console.log("Debug adapter exit:", { handle, code, signal })
+			},
+			async $registerDebugConfigurationProvider(
+				type: string,
+				triggerKind: any,
+				hasProvideMethod: boolean,
+				hasResolveMethod: boolean,
+				hasResolve2Method: boolean,
+				handle: number,
+			): Promise<void> {
+				console.log("Register debug configuration provider:", {
+					type,
+					triggerKind,
+					hasProvideMethod,
+					hasResolveMethod,
+					hasResolve2Method,
+					handle,
+				})
+			},
+			async $registerDebugAdapterDescriptorFactory(type: string, handle: number): Promise<void> {
+				console.log("Register debug adapter descriptor factory:", { type, handle })
+			},
+			$unregisterDebugConfigurationProvider(handle: number): void {
+				console.log("Unregister debug configuration provider:", handle)
+			},
+			$unregisterDebugAdapterDescriptorFactory(handle: number): void {
+				console.log("Unregister debug adapter descriptor factory:", handle)
+			},
+			async $startDebugging(folder: any, nameOrConfig: string | any, options: any): Promise<boolean> {
+				console.log("Start debugging:", { folder, nameOrConfig, options })
+				return true
+			},
+			async $stopDebugging(sessionId: string | undefined): Promise<void> {
+				console.log("Stop debugging:", sessionId)
+			},
+			$setDebugSessionName(id: string, name: string): void {
+				console.log("Set debug session name:", { id, name })
+			},
+			async $customDebugAdapterRequest(id: string, command: string, args: any): Promise<any> {
+				console.log("Custom debug adapter request:", { id, command, args })
+				return null
+			},
+			async $getDebugProtocolBreakpoint(id: string, breakpoinId: string): Promise<any> {
+				console.log("Get debug protocol breakpoint:", { id, breakpoinId })
+				return undefined
+			},
+			$appendDebugConsole(value: string): void {
+				console.log("Debug console:", value)
+			},
+			async $registerBreakpoints(breakpoints: any[]): Promise<void> {
+				console.log("Register breakpoints:", breakpoints)
+			},
+			async $unregisterBreakpoints(
+				breakpointIds: string[],
+				functionBreakpointIds: string[],
+				dataBreakpointIds: string[],
+			): Promise<void> {
+				console.log("Unregister breakpoints:", { breakpointIds, functionBreakpointIds, dataBreakpointIds })
+			},
+			$registerDebugVisualizer(extensionId: string, id: string): void {
+				console.log("Register debug visualizer:", { extensionId, id })
+			},
+			$unregisterDebugVisualizer(extensionId: string, id: string): void {
+				console.log("Unregister debug visualizer:", { extensionId, id })
+			},
+			$registerDebugVisualizerTree(treeId: string, canEdit: boolean): void {
+				console.log("Register debug visualizer tree:", { treeId, canEdit })
+			},
+			$unregisterDebugVisualizerTree(treeId: string): void {
+				console.log("Unregister debug visualizer tree:", treeId)
+			},
+			$registerCallHierarchyProvider(handle: number, supportsResolve: boolean): void {
+				console.log("Register call hierarchy provider:", { handle, supportsResolve })
+			},
+			dispose(): void {
+				console.log("Disposing MainThreadDebugService")
+			},
+		})
+	}
+
+	public setupRooCodeRequiredProtocols(): void {
+		if (!this.rpcProtocol) {
+			return
+		}
+
+		// MainThreadTextEditors
+		this.rpcProtocol.set(MainContext.MainThreadTextEditors, {
+			$tryShowTextDocument(resource: UriComponents, options: any): Promise<string | undefined> {
+				console.log("Try show text document:", { resource, options })
+				return Promise.resolve(undefined)
+			},
+			$tryShowEditor(id: string, position?: any): Promise<void> {
+				console.log("Try show editor:", { id, position })
+				return Promise.resolve()
+			},
+			$tryHideEditor(id: string): Promise<void> {
+				console.log("Try hide editor:", id)
+				return Promise.resolve()
+			},
+			$trySetSelections(id: string, selections: any[]): Promise<void> {
+				console.log("Try set selections:", { id, selections })
+				return Promise.resolve()
+			},
+			$tryRevealRange(id: string, range: any, revealType: any): Promise<void> {
+				console.log("Try reveal range:", { id, range, revealType })
+				return Promise.resolve()
+			},
+			$trySetOptions(id: string, options: any): Promise<void> {
+				console.log("Try set options:", { id, options })
+				return Promise.resolve()
+			},
+			$tryApplyEdits(id: string, modelVersionId: number, edits: any[], opts: any): Promise<boolean> {
+				console.log("Try apply edits:", { id, modelVersionId, edits, opts })
+				return Promise.resolve(true)
+			},
+			$registerTextEditorDecorationType(extensionId: ExtensionIdentifier, key: string, options: any): void {
+				console.log("Register text editor decoration type:", { extensionId, key, options })
+			},
+			$removeTextEditorDecorationType(key: string): void {
+				console.log("Remove text editor decoration type:", key)
+			},
+			$trySetDecorations(id: string, key: string, ranges: any[]): Promise<void> {
+				console.log("Try set decorations:", { id, key, ranges })
+				return Promise.resolve()
+			},
+			$trySetDecorationsFast(id: string, key: string, ranges: any[]): Promise<void> {
+				console.log("Try set decorations fast:", { id, key, ranges })
+				return Promise.resolve()
+			},
+			$tryInsertSnippet(id: string, snippet: any, location: any, options: any): Promise<boolean> {
+				console.log("Try insert snippet:", { id, snippet, location, options })
+				return Promise.resolve(true)
+			},
+			$getDiffInformation(id: string): Promise<any> {
+				console.log("Get diff information:", id)
+				return Promise.resolve(null)
+			},
+			dispose(): void {
+				console.log("Dispose MainThreadTextEditors")
+			},
+		})
+
+		// MainThreadStorage
+		this.rpcProtocol.set(MainContext.MainThreadStorage, {
+			$initializeExtensionStorage(shared: boolean, extensionId: string): Promise<string | undefined> {
+				console.log("Initialize extension storage:", { shared, extensionId })
+				return Promise.resolve(undefined)
+			},
+			$setValue(shared: boolean, extensionId: string, value: object): Promise<void> {
+				console.log("Set value:", { shared, extensionId, value })
+				return Promise.resolve()
+			},
+			$registerExtensionStorageKeysToSync(extension: any, keys: string[]): void {
+				console.log("Register extension storage keys to sync:", { extension, keys })
+			},
+			dispose(): void {
+				console.log("Dispose MainThreadStorage")
+			},
+		})
+
+		// MainThreadOutputService
+		this.rpcProtocol.set(MainContext.MainThreadOutputService, {
+			$register(
+				label: string,
+				file: UriComponents,
+				languageId: string | undefined,
+				extensionId: string,
+			): Promise<string> {
+				console.log("Register output channel:", { label, file, languageId, extensionId })
+				return Promise.resolve(`output-${extensionId}-${label}`)
+			},
+			$update(channelId: string, mode: any, till?: number): Promise<void> {
+				console.log("Update output channel:", { channelId, mode, till })
+				return Promise.resolve()
+			},
+			$reveal(channelId: string, preserveFocus: boolean): Promise<void> {
+				console.log("Reveal output channel:", { channelId, preserveFocus })
+				return Promise.resolve()
+			},
+			$close(channelId: string): Promise<void> {
+				console.log("Close output channel:", channelId)
+				return Promise.resolve()
+			},
+			$dispose(channelId: string): Promise<void> {
+				console.log("Dispose output channel:", channelId)
+				return Promise.resolve()
+			},
+			dispose(): void {
+				console.log("Dispose MainThreadOutputService")
+			},
+		})
+
+		// Create a single WebViewManager instance
+		const webViewManager = new WebViewManager(this.rpcProtocol)
+
+		// MainThreadWebviewViews
+		this.rpcProtocol.set(MainContext.MainThreadWebviewViews, webViewManager)
+
+		// MainThreadDocumentContentProviders
+		this.rpcProtocol.set(MainContext.MainThreadDocumentContentProviders, {
+			$registerTextContentProvider(handle: number, scheme: string): void {
+				console.log("Register text content provider:", { handle, scheme })
+			},
+			$unregisterTextContentProvider(handle: number): void {
+				console.log("Unregister text content provider:", handle)
+			},
+			$onVirtualDocumentChange(uri: UriComponents, value: string): Promise<void> {
+				console.log("Virtual document change:", { uri, value })
+				return Promise.resolve()
+			},
+			dispose(): void {
+				console.log("Dispose MainThreadDocumentContentProviders")
+			},
+		})
+
+		// MainThreadUrls
+		this.rpcProtocol.set(MainContext.MainThreadUrls, {
+			$registerUriHandler(
+				handle: number,
+				extensionId: ExtensionIdentifier,
+				extensionDisplayName: string,
+			): Promise<void> {
+				console.log("Register URI handler:", { handle, extensionId, extensionDisplayName })
+				return Promise.resolve()
+			},
+			$unregisterUriHandler(handle: number): Promise<void> {
+				console.log("Unregister URI handler:", handle)
+				return Promise.resolve()
+			},
+			$createAppUri(uri: UriComponents): Promise<UriComponents> {
+				console.log("Create app URI:", uri)
+				return Promise.resolve(uri)
+			},
+			dispose(): void {
+				console.log("Dispose MainThreadUrls")
+			},
+		})
+
+		// MainThreadWebviews
+		this.rpcProtocol.set(MainContext.MainThreadWebviews, webViewManager)
+	}
+
+	public getRPCProtocol(): IRPCProtocol | null {
+		return this.rpcProtocol
+	}
+}
diff --git a/jetbrains/host/src/webViewManager.ts b/jetbrains/host/src/webViewManager.ts
new file mode 100644
index 000000000..a10d22edf
--- /dev/null
+++ b/jetbrains/host/src/webViewManager.ts
@@ -0,0 +1,159 @@
+// Copyright 2009-2025 Weibo, Inc.
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+import {
+	ExtHostContext,
+	ExtHostWebviewViewsShape,
+	MainThreadWebviewViewsShape,
+	WebviewExtensionDescription as ExtHostWebviewExtensionDescription,
+	MainThreadWebviewsShape,
+	IWebviewContentOptions,
+} from "../deps/vscode/vs/workbench/api/common/extHost.protocol.js"
+import { IRPCProtocol } from "../deps/vscode/vs/workbench/services/extensions/common/proxyIdentifier.js"
+import { WebviewContentOptions } from "../deps/vscode/vs/workbench/contrib/webview/browser/webview.js"
+import { URI } from "../deps/vscode/vs/base/common/uri.js"
+import { CancellationToken } from "../deps/vscode/vs/base/common/cancellation.js"
+import { VSBuffer } from "../deps/vscode/vs/base/common/buffer.js"
+
+/**
+ * A simplified webview implementation that only includes methods used by WebViewManager
+ */
+class SimpleWebview {
+	contentOptions: WebviewContentOptions = {}
+
+	setHtml(html: string): void {
+		console.log("[SimpleWebview] Set HTML:", html)
+	}
+
+	setTitle(title: string): void {
+		console.log("[SimpleWebview] Set title:", title)
+	}
+
+	postMessage(message: any, transfer?: readonly VSBuffer[]): Promise<boolean> {
+		console.log("[SimpleWebview] Post message:", message)
+		return Promise.resolve(true)
+	}
+
+	focus(): void {
+		console.log("[SimpleWebview] Focus")
+	}
+
+	dispose(): void {
+		console.log("[SimpleWebview] Dispose")
+	}
+}
+
+export class WebViewManager implements MainThreadWebviewViewsShape, MainThreadWebviewsShape {
+	private readonly _proxy: ExtHostWebviewViewsShape
+	private readonly _webviews = new Map<string, SimpleWebview>()
+
+	constructor(private readonly rpcProtocol: IRPCProtocol) {
+		this._proxy = this.rpcProtocol.getProxy(ExtHostContext.ExtHostWebviewViews)
+	}
+
+	// MainThreadWebviewViewsShape implementation
+	$registerWebviewViewProvider(
+		extension: ExtHostWebviewExtensionDescription,
+		viewType: string,
+		options: { retainContextWhenHidden?: boolean; serializeBuffersForPostMessage: boolean },
+	): void {
+		console.log("Register webview view provider:", { extension, viewType, options })
+
+		// Create a new webview instance
+		const webview = new SimpleWebview()
+
+		// Store the webview instance
+		this._webviews.set(viewType, webview)
+
+		// Generate a unique handle for this webview
+		const webviewHandle = `webview-${viewType}-${Date.now()}`
+
+		// Notify the extension host that the webview is ready
+		this._proxy.$resolveWebviewView(
+			webviewHandle,
+			viewType,
+			undefined, // title
+			undefined, // state
+			CancellationToken.None, // cancellation
+		)
+	}
+
+	$unregisterWebviewViewProvider(viewType: string): void {
+		console.log("Unregister webview view provider:", viewType)
+
+		// Remove the webview instance
+		const webview = this._webviews.get(viewType)
+		if (webview) {
+			webview.dispose()
+			this._webviews.delete(viewType)
+		}
+	}
+
+	$setWebviewViewTitle(handle: string, value: string | undefined): void {
+		console.log("Set webview view title:", { handle, value })
+		const webview = this._webviews.get(handle)
+		if (webview) {
+			webview.setTitle(value || "")
+		}
+	}
+
+	$setWebviewViewDescription(handle: string, value: string | undefined): void {
+		console.log("Set webview view description:", { handle, value })
+	}
+
+	$setWebviewViewBadge(handle: string, badge: any | undefined): void {
+		console.log("Set webview view badge:", { handle, badge })
+	}
+
+	$show(handle: string, preserveFocus: boolean): void {
+		console.log("Show webview view:", { handle, preserveFocus })
+		const webview = this._webviews.get(handle)
+		if (webview) {
+			webview.focus()
+		}
+	}
+
+	// MainThreadWebviewsShape implementation
+	$setHtml(handle: string, value: string): void {
+		console.log("Set webview HTML:", { handle, value })
+		const webview = this._webviews.get(handle)
+		if (webview) {
+			webview.setHtml(value)
+		}
+	}
+
+	$setOptions(handle: string, options: IWebviewContentOptions): void {
+		console.log("Set webview panel options:", { handle, options })
+		const webview = this._webviews.get(handle)
+		if (webview) {
+			// Convert IWebviewContentOptions to WebviewContentOptions
+			const contentOptions: WebviewContentOptions = {
+				allowScripts: options.enableScripts,
+				allowForms: options.enableForms,
+				localResourceRoots: options.localResourceRoots?.map((uri) => URI.revive(uri)),
+				portMapping: options.portMapping,
+			}
+			webview.contentOptions = contentOptions
+		}
+	}
+
+	$postMessage(handle: string, value: string, ...buffers: VSBuffer[]): Promise<boolean> {
+		console.log("Post message to webview:", { handle, value, buffers })
+		const webview = this._webviews.get(handle)
+		if (webview) {
+			return webview.postMessage(value, buffers)
+		}
+		return Promise.resolve(false)
+	}
+
+	dispose(): void {
+		console.log("Dispose WebViewManager")
+		// Dispose all webviews
+		for (const webview of this._webviews.values()) {
+			webview.dispose()
+		}
+		this._webviews.clear()
+	}
+}
diff --git a/jetbrains/host/tsconfig.base.json b/jetbrains/host/tsconfig.base.json
new file mode 100644
index 000000000..f5eafdb66
--- /dev/null
+++ b/jetbrains/host/tsconfig.base.json
@@ -0,0 +1,21 @@
+{
+	"compilerOptions": {
+		"module": "nodenext",
+		"moduleResolution": "nodenext",
+		"moduleDetection": "legacy",
+		"experimentalDecorators": true,
+		"noImplicitReturns": true,
+		"noImplicitOverride": true,
+		"noUnusedLocals": true,
+		"noUncheckedSideEffectImports": true,
+		"allowUnreachableCode": false,
+		"strict": true,
+		"exactOptionalPropertyTypes": false,
+		"useUnknownInCatchVariables": false,
+		"forceConsistentCasingInFileNames": true,
+		"target": "es2022",
+		"useDefineForClassFields": false,
+		"lib": ["ES2022", "DOM", "DOM.Iterable", "WebWorker.ImportScripts"],
+		"allowSyntheticDefaultImports": true
+	}
+}
diff --git a/jetbrains/host/tsconfig.json b/jetbrains/host/tsconfig.json
new file mode 100644
index 000000000..1024743d1
--- /dev/null
+++ b/jetbrains/host/tsconfig.json
@@ -0,0 +1,51 @@
+{
+	// This is the configuration for plugins/base independent project, compiled separately from the outer project
+	"extends": "./tsconfig.base.json",
+	"compilerOptions": {
+		"module": "NodeNext",
+		"esModuleInterop": true,
+		"removeComments": false,
+		"preserveConstEnums": true,
+		"sourceMap": true,
+		"inlineSources": true,
+		"allowJs": true,
+		"resolveJsonModule": true,
+		"isolatedModules": false,
+		"outDir": "./dist",
+		"skipLibCheck": true, // Skip library file checking to avoid type conflicts
+		"declaration": true,
+		"declarationMap": true,
+		"types": [
+			"@types/mocha",
+			"@types/semver",
+			"@types/sinon",
+			"@types/trusted-types",
+			"@types/winreg",
+			"@types/wicg-file-system-access"
+		]
+	},
+	"include": [
+		"src/**/*.ts", // Include all TS files under src
+		"src/**/*.js",
+		"electron.d.ts",
+		"deps/vscode/typings",
+		"deps/vscode/vs/workbench/api/node",
+		"deps/vscode/vs/workbench/contrib/debug/common/debugProtocol.d.ts",
+		"deps/vscode/vscode-dts/vscode.d.ts",
+		"deps/vscode/vscode-dts/vscode.proposed.*.d.ts",
+		"deps/vscode/vs/base/common/marked",
+		"deps/vscode/vs/base/common/semver"
+	],
+	"exclude": [
+		"node_modules",
+		".vscode-test",
+		"webview-ui",
+		"deps/vscode/**/test/**/*.ts",
+		"deps/vscode/**/test/**/*.js",
+		"deps/vscode/**/fixtures/**/*.js",
+		"deps/vscode/**/fixtures/**/*.ts",
+		"node_modules/@types/vscode",
+		"node_modules/@types/electron",
+		"dist/**/*"
+	]
+}
diff --git a/jetbrains/host/tsconfig.monaco.json b/jetbrains/host/tsconfig.monaco.json
new file mode 100644
index 000000000..fe4fdb159
--- /dev/null
+++ b/jetbrains/host/tsconfig.monaco.json
@@ -0,0 +1,37 @@
+{
+	"extends": "./tsconfig.base.json",
+	"compilerOptions": {
+		"noEmit": true,
+		"types": ["@webgpu/types", "trusted-types", "wicg-file-system-access"],
+		"paths": {},
+		"module": "amd",
+		"moduleResolution": "node",
+		"removeComments": false,
+		"preserveConstEnums": true,
+		"target": "ES2022",
+		"sourceMap": false,
+		"declaration": true
+	},
+	"include": [
+		"typings/css.d.ts",
+		"typings/thenable.d.ts",
+		"typings/vscode-globals-product.d.ts",
+		"typings/vscode-globals-nls.d.ts",
+		"typings/editContext.d.ts",
+		"vs/monaco.d.ts",
+		"vs/editor/*",
+		"vs/base/common/*",
+		"vs/base/browser/*",
+		"vs/platform/*/common/*",
+		"vs/platform/*/browser/*"
+	],
+	"exclude": [
+		"node_modules/*",
+		"vs/platform/files/browser/htmlFileSystemProvider.ts",
+		"vs/platform/files/browser/webFileSystemAccess.ts",
+		"vs/platform/telemetry/*",
+		"vs/platform/assignment/*",
+		"vs/platform/terminal/*",
+		"vs/platform/externalTerminal/*"
+	]
+}
diff --git a/jetbrains/host/tsconfig.tsec.json b/jetbrains/host/tsconfig.tsec.json
new file mode 100644
index 000000000..bce7743f7
--- /dev/null
+++ b/jetbrains/host/tsconfig.tsec.json
@@ -0,0 +1,14 @@
+{
+	"extends": "./tsconfig.json",
+	"compilerOptions": {
+		"noEmit": true,
+		"skipLibCheck": true,
+		"plugins": [
+			{
+				"name": "tsec",
+				"exemptionConfig": "./tsec.exemptions.json"
+			}
+		]
+	},
+	"exclude": ["./vs/workbench/contrib/webview/browser/pre/service-worker.js", "*/test/*", "**/*.test.ts"]
+}
diff --git a/jetbrains/host/tsconfig.vscode-dts.json b/jetbrains/host/tsconfig.vscode-dts.json
new file mode 100644
index 000000000..97f27ddf7
--- /dev/null
+++ b/jetbrains/host/tsconfig.vscode-dts.json
@@ -0,0 +1,18 @@
+{
+	"compilerOptions": {
+		"noEmit": true,
+		"module": "None",
+		"experimentalDecorators": false,
+		"noImplicitReturns": true,
+		"noImplicitOverride": true,
+		"noUnusedLocals": true,
+		"allowUnreachableCode": false,
+		"strict": true,
+		"exactOptionalPropertyTypes": false,
+		"useUnknownInCatchVariables": false,
+		"forceConsistentCasingInFileNames": true,
+		"types": [],
+		"lib": ["ES2022"]
+	},
+	"include": ["vscode-dts/vscode.d.ts"]
+}
diff --git a/jetbrains/host/tsconfig.vscode-proposed-dts.json b/jetbrains/host/tsconfig.vscode-proposed-dts.json
new file mode 100644
index 000000000..67458c8cb
--- /dev/null
+++ b/jetbrains/host/tsconfig.vscode-proposed-dts.json
@@ -0,0 +1,4 @@
+{
+	"extends": "./tsconfig.vscode-dts.json",
+	"include": ["vscode-dts/vscode.d.ts", "vscode-dts/vscode.proposed.*.d.ts"]
+}
diff --git a/jetbrains/host/tsec.exemptions.json b/jetbrains/host/tsec.exemptions.json
new file mode 100644
index 000000000..55696acf1
--- /dev/null
+++ b/jetbrains/host/tsec.exemptions.json
@@ -0,0 +1,34 @@
+{
+	"ban-document-execcommand": [
+		"vs/workbench/contrib/codeEditor/electron-sandbox/inputClipboardActions.ts",
+		"vs/editor/contrib/clipboard/browser/clipboard.ts"
+	],
+	"ban-eval-calls": ["vs/workbench/api/worker/extHostExtensionService.ts"],
+	"ban-function-calls": [
+		"vs/workbench/api/worker/extHostExtensionService.ts",
+		"vs/workbench/contrib/notebook/browser/view/renderers/webviewPreloads.ts",
+		"vs/workbench/services/keybinding/test/node/keyboardMapperTestUtils.ts"
+	],
+	"ban-trustedtypes-createpolicy": [
+		"bootstrap-window.ts",
+		"vs/amdX.ts",
+		"vs/base/browser/trustedTypes.ts",
+		"vs/workbench/contrib/notebook/browser/view/renderers/webviewPreloads.ts"
+	],
+	"ban-worker-calls": [
+		"vs/base/browser/webWorkerFactory.ts",
+		"vs/workbench/services/extensions/browser/webWorkerExtensionHost.ts"
+	],
+	"ban-worker-importscripts": [
+		"vs/amdX.ts",
+		"vs/workbench/services/extensions/worker/polyfillNestedWorker.ts",
+		"vs/workbench/api/worker/extensionHostWorker.ts"
+	],
+	"ban-domparser-parsefromstring": [
+		"vs/base/browser/markdownRenderer.ts",
+		"vs/base/test/browser/markdownRenderer.test.ts"
+	],
+	"ban-element-setattribute": ["**/*.ts"],
+	"ban-element-insertadjacenthtml": ["**/*.ts"],
+	"ban-script-content-assignments": ["bootstrap-window.ts"]
+}
diff --git a/jetbrains/host/tsup.config.ts b/jetbrains/host/tsup.config.ts
new file mode 100644
index 000000000..c580c60eb
--- /dev/null
+++ b/jetbrains/host/tsup.config.ts
@@ -0,0 +1,22 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+// tsup.config.ts
+import { defineConfig } from "tsup"
+
+import { dependencies } from "./package.json"
+
+export default defineConfig({
+	entry: ["src/extension.ts"], // Your entry file
+	format: ["esm"], // Output format, e.g., ES Module and CommonJS
+	minify: true, // Minify code
+	clean: true, // Clean output directory
+	splitting: false,
+	platform: "node", // Target platform, e.g., Node.js
+	target: "node18", // Target environment, e.g., latest ECMAScript standard
+	skipNodeModulesBundle: false, // Don't bundle dependencies in node_modules
+	// noExternal: Object.keys(dependencies),
+	// external:[/^@vscode\/.*$/], // Don't bundle vscode-related dependencies
+	dts: false, // Don't generate type declaration files, as we usually handle type declarations separately
+})
diff --git a/jetbrains/host/turbo.json b/jetbrains/host/turbo.json
new file mode 100644
index 000000000..b0d048b69
--- /dev/null
+++ b/jetbrains/host/turbo.json
@@ -0,0 +1,44 @@
+{
+	"$schema": "https://turbo.build/schema.json",
+	"extends": ["//"],
+	"tasks": {
+		"deps:check": {
+			"cache": false,
+			"env": ["DEVENV"]
+		},
+		"deps:clean": {
+			"cache": false
+		},
+		"deps:patch": {
+			"cache": false,
+			"dependsOn": ["deps:check", "deps:clean"],
+			"env": ["DEVENV"]
+		},
+		"deps:copy": {
+			"cache": false,
+			"dependsOn": ["deps:check", "deps:patch"],
+			"env": ["DEVENV"]
+		},
+		"prop:deps": {
+			"cache": false
+		},
+		"bundle:build": {
+			"outputs": ["dist/**"],
+			"inputs": ["package.json", "tsconfig.json", "src/**", "deps/vscode/**"],
+			"dependsOn": ["clean", "deps:clean", "deps:patch", "deps:copy"]
+		},
+		"bundle:package": {
+			"cache": false,
+			"dependsOn": ["bundle:build"]
+		},
+		"bundle": {
+			"cache": false,
+			"dependsOn": ["bundle:package"]
+		},
+		"build": {
+			"outputs": ["dist/**"],
+			"inputs": ["package.json", "tsconfig.json", "src/**", "deps/vscode/**"],
+			"dependsOn": ["clean", "deps:clean", "deps:patch", "deps:copy"]
+		}
+	}
+}
diff --git a/jetbrains/host/typings/base-common.d.ts b/jetbrains/host/typings/base-common.d.ts
new file mode 100644
index 000000000..7689aa0a9
--- /dev/null
+++ b/jetbrains/host/typings/base-common.d.ts
@@ -0,0 +1,18 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+// Declare types that we probe for to implement util and/or polyfill functions
+
+declare global {
+	interface IdleDeadline {
+		readonly didTimeout: boolean
+		timeRemaining(): number
+	}
+
+	function requestIdleCallback(callback: (args: IdleDeadline) => void, options?: { timeout: number }): number
+	function cancelIdleCallback(handle: number): void
+}
+
+export {}
diff --git a/jetbrains/host/typings/crypto.d.ts b/jetbrains/host/typings/crypto.d.ts
new file mode 100644
index 000000000..9521e3cec
--- /dev/null
+++ b/jetbrains/host/typings/crypto.d.ts
@@ -0,0 +1,81 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+// NOTE that this is a partial copy from lib.dom.d.ts which is NEEDED because these utils are used in the /common/
+// layer which has no dependency on the DOM/browser-context. However, `crypto` is available as global in all browsers and
+// in nodejs. Therefore it's OK to spell out its typings here
+
+declare global {
+	/**
+	 * This Web Crypto API interface provides a number of low-level cryptographic functions. It is accessed via the Crypto.subtle properties available in a window context (via Window.crypto).
+	 * Available only in secure contexts.
+	 *
+	 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto)
+	 */
+	interface SubtleCrypto {
+		// /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/decrypt) */
+		// decrypt(algorithm: AlgorithmIdentifier | RsaOaepParams | AesCtrParams | AesCbcParams | AesGcmParams, key: CryptoKey, data: BufferSource): Promise<ArrayBuffer>;
+		// /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/deriveBits) */
+		// deriveBits(algorithm: AlgorithmIdentifier | EcdhKeyDeriveParams | HkdfParams | Pbkdf2Params, baseKey: CryptoKey, length?: number | null): Promise<ArrayBuffer>;
+		// /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/deriveKey) */
+		// deriveKey(algorithm: AlgorithmIdentifier | EcdhKeyDeriveParams | HkdfParams | Pbkdf2Params, baseKey: CryptoKey, derivedKeyType: AlgorithmIdentifier | AesDerivedKeyParams | HmacImportParams | HkdfParams | Pbkdf2Params, extractable: boolean, keyUsages: KeyUsage[]): Promise<CryptoKey>;
+		/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/digest) */
+		digest(algorithm: { name: string } | string, data: ArrayBufferView | ArrayBuffer): Promise<ArrayBuffer>
+		// /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/encrypt) */
+		// encrypt(algorithm: AlgorithmIdentifier | RsaOaepParams | AesCtrParams | AesCbcParams | AesGcmParams, key: CryptoKey, data: BufferSource): Promise<ArrayBuffer>;
+		// /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/exportKey) */
+		// exportKey(format: "jwk", key: CryptoKey): Promise<JsonWebKey>;
+		// exportKey(format: Exclude<KeyFormat, "jwk">, key: CryptoKey): Promise<ArrayBuffer>;
+		// exportKey(format: KeyFormat, key: CryptoKey): Promise<ArrayBuffer | JsonWebKey>;
+		// /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/generateKey) */
+		// generateKey(algorithm: "Ed25519", extractable: boolean, keyUsages: ReadonlyArray<"sign" | "verify">): Promise<CryptoKeyPair>;
+		// generateKey(algorithm: RsaHashedKeyGenParams | EcKeyGenParams, extractable: boolean, keyUsages: ReadonlyArray<KeyUsage>): Promise<CryptoKeyPair>;
+		// generateKey(algorithm: AesKeyGenParams | HmacKeyGenParams | Pbkdf2Params, extractable: boolean, keyUsages: ReadonlyArray<KeyUsage>): Promise<CryptoKey>;
+		// generateKey(algorithm: AlgorithmIdentifier, extractable: boolean, keyUsages: KeyUsage[]): Promise<CryptoKeyPair | CryptoKey>;
+		// /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/importKey) */
+		// importKey(format: "jwk", keyData: JsonWebKey, algorithm: AlgorithmIdentifier | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | AesKeyAlgorithm, extractable: boolean, keyUsages: ReadonlyArray<KeyUsage>): Promise<CryptoKey>;
+		// importKey(format: Exclude<KeyFormat, "jwk">, keyData: BufferSource, algorithm: AlgorithmIdentifier | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | AesKeyAlgorithm, extractable: boolean, keyUsages: KeyUsage[]): Promise<CryptoKey>;
+		// /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/sign) */
+		// sign(algorithm: AlgorithmIdentifier | RsaPssParams | EcdsaParams, key: CryptoKey, data: BufferSource): Promise<ArrayBuffer>;
+		// /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/unwrapKey) */
+		// unwrapKey(format: KeyFormat, wrappedKey: BufferSource, unwrappingKey: CryptoKey, unwrapAlgorithm: AlgorithmIdentifier | RsaOaepParams | AesCtrParams | AesCbcParams | AesGcmParams, unwrappedKeyAlgorithm: AlgorithmIdentifier | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | AesKeyAlgorithm, extractable: boolean, keyUsages: KeyUsage[]): Promise<CryptoKey>;
+		// /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/verify) */
+		// verify(algorithm: AlgorithmIdentifier | RsaPssParams | EcdsaParams, key: CryptoKey, signature: BufferSource, data: BufferSource): Promise<boolean>;
+		// /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/wrapKey) */
+		// wrapKey(format: KeyFormat, key: CryptoKey, wrappingKey: CryptoKey, wrapAlgorithm: AlgorithmIdentifier | RsaOaepParams | AesCtrParams | AesCbcParams | AesGcmParams): Promise<ArrayBuffer>;
+	}
+
+	/**
+	 * Basic cryptography features available in the current context. It allows access to a cryptographically strong random number generator and to cryptographic primitives.
+	 *
+	 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Crypto)
+	 */
+	interface Crypto {
+		/**
+		 * Available only in secure contexts.
+		 *
+		 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Crypto/subtle)
+		 */
+		readonly subtle: SubtleCrypto
+		/**
+		 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Crypto/getRandomValues)
+		 */
+		getRandomValues<T extends ArrayBufferView | null>(array: T): T
+		/**
+		 * Available only in secure contexts.
+		 *
+		 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Crypto/randomUUID)
+		 */
+		randomUUID(): `${string}-${string}-${string}-${string}-${string}`
+	}
+
+	var Crypto: {
+		prototype: Crypto
+		new (): Crypto
+	}
+
+	var crypto: Crypto
+}
+export {}
diff --git a/jetbrains/host/typings/css.d.ts b/jetbrains/host/typings/css.d.ts
new file mode 100644
index 000000000..fd4822aef
--- /dev/null
+++ b/jetbrains/host/typings/css.d.ts
@@ -0,0 +1,8 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+// Recognize all CSS files as valid module imports
+declare module "vs/css!*" {}
+declare module "*.css" {}
diff --git a/jetbrains/host/typings/editContext.d.ts b/jetbrains/host/typings/editContext.d.ts
new file mode 100644
index 000000000..a99a89218
--- /dev/null
+++ b/jetbrains/host/typings/editContext.d.ts
@@ -0,0 +1,138 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+type DOMString = string
+
+interface EditContext extends EventTarget {
+	updateText(rangeStart: number, rangeEnd: number, text: DOMString): void
+	updateSelection(start: number, end: number): void
+	updateControlBounds(controlBounds: DOMRect): void
+	updateSelectionBounds(selectionBounds: DOMRect): void
+	updateCharacterBounds(rangeStart: number, characterBounds: DOMRect[]): void
+
+	attachedElements(): HTMLElement[]
+
+	get text(): DOMString
+	get selectionStart(): number
+	get selectionEnd(): number
+	get characterBoundsRangeStart(): number
+	characterBounds(): DOMRect[]
+
+	get ontextupdate(): EventHandler<TextUpdateEvent> | null
+	set ontextupdate(value: EventHandler | null)
+
+	get ontextformatupdate(): EventHandler | null
+	set ontextformatupdate(value: EventHandler | null)
+
+	get oncharacterboundsupdate(): EventHandler | null
+	set oncharacterboundsupdate(value: EventHandler | null)
+
+	get oncompositionstart(): EventHandler | null
+	set oncompositionstart(value: EventHandler | null)
+
+	get oncompositionend(): EventHandler | null
+	set oncompositionend(value: EventHandler | null)
+
+	addEventListener<K extends keyof EditContextEventHandlersEventMap>(
+		type: K,
+		listener: (this: GlobalEventHandlers, ev: EditContextEventHandlersEventMap[K]) => any,
+		options?: boolean | AddEventListenerOptions,
+	): void
+	addEventListener(
+		type: string,
+		listener: EventListenerOrEventListenerObject,
+		options?: boolean | AddEventListenerOptions,
+	): void
+	removeEventListener<K extends keyof EditContextEventHandlersEventMap>(
+		type: K,
+		listener: (this: GlobalEventHandlers, ev: EditContextEventHandlersEventMap[K]) => any,
+		options?: boolean | EventListenerOptions,
+	): void
+	removeEventListener(
+		type: string,
+		listener: EventListenerOrEventListenerObject,
+		options?: boolean | EventListenerOptions,
+	): void
+}
+
+interface EditContextInit {
+	text: DOMString
+	selectionStart: number
+	selectionEnd: number
+}
+
+interface EditContextEventHandlersEventMap {
+	textupdate: TextUpdateEvent
+	textformatupdate: TextFormatUpdateEvent
+	characterboundsupdate: CharacterBoundsUpdateEvent
+	compositionstart: Event
+	compositionend: Event
+}
+
+type EventHandler<TEvent extends Event = Event> = (event: TEvent) => void
+
+declare class TextUpdateEvent extends Event {
+	constructor(type: DOMString, options?: TextUpdateEventInit)
+
+	readonly updateRangeStart: number
+	readonly updateRangeEnd: number
+	readonly text: DOMString
+	readonly selectionStart: number
+	readonly selectionEnd: number
+}
+
+interface TextUpdateEventInit extends EventInit {
+	updateRangeStart: number
+	updateRangeEnd: number
+	text: DOMString
+	selectionStart: number
+	selectionEnd: number
+	compositionStart: number
+	compositionEnd: number
+}
+
+interface TextFormat {
+	new (options?: TextFormatInit): TextFormat
+
+	readonly rangeStart: number
+	readonly rangeEnd: number
+	readonly underlineStyle: UnderlineStyle
+	readonly underlineThickness: UnderlineThickness
+}
+
+interface TextFormatInit {
+	rangeStart: number
+	rangeEnd: number
+	underlineStyle: UnderlineStyle
+	underlineThickness: UnderlineThickness
+}
+
+type UnderlineStyle = "none" | "solid" | "dotted" | "dashed" | "wavy"
+type UnderlineThickness = "none" | "thin" | "thick"
+
+interface TextFormatUpdateEvent extends Event {
+	new (type: DOMString, options?: TextFormatUpdateEventInit): TextFormatUpdateEvent
+	getTextFormats(): TextFormat[]
+}
+
+interface TextFormatUpdateEventInit extends EventInit {
+	textFormats: TextFormat[]
+}
+
+interface CharacterBoundsUpdateEvent extends Event {
+	new (type: DOMString, options?: CharacterBoundsUpdateEventInit): CharacterBoundsUpdateEvent
+
+	readonly rangeStart: number
+	readonly rangeEnd: number
+}
+
+interface CharacterBoundsUpdateEventInit extends EventInit {
+	rangeStart: number
+	rangeEnd: number
+}
+
+interface HTMLElement {
+	editContext?: EditContext
+}
diff --git a/jetbrains/host/typings/thenable.d.ts b/jetbrains/host/typings/thenable.d.ts
new file mode 100644
index 000000000..f04381245
--- /dev/null
+++ b/jetbrains/host/typings/thenable.d.ts
@@ -0,0 +1,12 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+/**
+ * Thenable is a common denominator between ES6 promises, Q, jquery.Deferred, WinJS.Promise,
+ * and others. This API makes no assumption about what promise library is being used which
+ * enables reusing existing code without migrating to a specific promise implementation. Still,
+ * we recommend the use of native promises which are available in VS Code.
+ */
+interface Thenable<T> extends PromiseLike<T> {}
diff --git a/jetbrains/host/typings/vscode-globals-nls.d.ts b/jetbrains/host/typings/vscode-globals-nls.d.ts
new file mode 100644
index 000000000..211bf9d22
--- /dev/null
+++ b/jetbrains/host/typings/vscode-globals-nls.d.ts
@@ -0,0 +1,40 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+// AMD2ESM migration relevant
+
+/**
+ * NLS Globals: these need to be defined in all contexts that make
+ * use of our `nls.localize` and `nls.localize2` functions. This includes:
+ * - Electron main process
+ * - Electron window (renderer) process
+ * - Utility Process
+ * - Node.js
+ * - Browser
+ * - Web worker
+ *
+ * That is because during build time we strip out all english strings from
+ * the resulting JS code and replace it with a <number> that is then looked
+ * up from the `_VSCODE_NLS_MESSAGES` array.
+ */
+declare global {
+	/**
+	 * All NLS messages produced by `localize` and `localize2` calls
+	 * under `src/vs` translated to the language as indicated by
+	 * `_VSCODE_NLS_LANGUAGE`.
+	 *
+	 * Instead of accessing this global variable directly, use function getNLSMessages.
+	 */
+	var _VSCODE_NLS_MESSAGES: string[]
+	/**
+	 * The actual language of the NLS messages (e.g. 'en', de' or 'pt-br').
+	 *
+	 * Instead of accessing this global variable directly, use function getNLSLanguage.
+	 */
+	var _VSCODE_NLS_LANGUAGE: string | undefined
+}
+
+// fake export to make global work
+export {}
diff --git a/jetbrains/host/typings/vscode-globals-product.d.ts b/jetbrains/host/typings/vscode-globals-product.d.ts
new file mode 100644
index 000000000..999c9a994
--- /dev/null
+++ b/jetbrains/host/typings/vscode-globals-product.d.ts
@@ -0,0 +1,31 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+// AMD2ESM migration relevant
+
+declare global {
+	/**
+	 * Holds the file root for resources.
+	 */
+	var _VSCODE_FILE_ROOT: string
+
+	/**
+	 * CSS loader that's available during development time.
+	 * DO NOT call directly, instead just import css modules, like `import 'some.css'`
+	 */
+	var _VSCODE_CSS_LOAD: (module: string) => void
+
+	/**
+	 * @deprecated You MUST use `IProductService` whenever possible.
+	 */
+	var _VSCODE_PRODUCT_JSON: Record<string, any>
+	/**
+	 * @deprecated You MUST use `IProductService` whenever possible.
+	 */
+	var _VSCODE_PACKAGE_JSON: Record<string, any>
+}
+
+// fake export to make global work
+export {}
diff --git a/jetbrains/host/typings/vscode-globals-ttp.d.ts b/jetbrains/host/typings/vscode-globals-ttp.d.ts
new file mode 100644
index 000000000..399ff268b
--- /dev/null
+++ b/jetbrains/host/typings/vscode-globals-ttp.d.ts
@@ -0,0 +1,20 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+// AMD2ESM migration relevant
+
+declare global {
+	var _VSCODE_WEB_PACKAGE_TTP:
+		| Pick<
+				TrustedTypePolicy<{
+					createScriptURL(value: string): string
+				}>,
+				"name" | "createScriptURL"
+		  >
+		| undefined
+}
+
+// fake export to make global work
+export {}
diff --git a/jetbrains/plugin/.gitignore b/jetbrains/plugin/.gitignore
new file mode 100644
index 000000000..08536c965
--- /dev/null
+++ b/jetbrains/plugin/.gitignore
@@ -0,0 +1,50 @@
+# SPDX-FileCopyrightText: 2025 Weibo, Inc.
+#
+# SPDX-License-Identifier: Apache-2.0
+
+.gradle
+build/
+!gradle/wrapper/gradle-wrapper.jar
+!**/src/main/**/build/
+!**/src/test/**/build/
+
+### IntelliJ IDEA ###
+.idea/modules.xml
+.idea/jarRepositories.xml
+.idea/compiler.xml
+.idea/libraries/
+*.iws
+*.iml
+*.ipr
+out/
+!**/src/main/**/out/
+!**/src/test/**/out/
+
+### Eclipse ###
+.apt_generated
+.classpath
+.factorypath
+.project
+.settings
+.springBeans
+.sts4-cache
+bin/
+!**/src/main/**/bin/
+!**/src/test/**/bin/
+
+### NetBeans ###
+/nbproject/private/
+/nbbuild/
+/dist/
+/nbdist/
+/.nb-gradle/
+### VS Code ###
+.vscode/
+
+### Mac OS ###
+.DS_Store
+src/main/resources/ai/kilocode/jetbrains/plugin/config/plugin.properties
+
+### Deps ###
+prodDep.txt
+plugins
\ No newline at end of file
diff --git a/jetbrains/plugin/.run/Run Plugin.run.xml b/jetbrains/plugin/.run/Run Plugin.run.xml
new file mode 100644
index 000000000..da43cc5ef
--- /dev/null
+++ b/jetbrains/plugin/.run/Run Plugin.run.xml	
@@ -0,0 +1,31 @@
+<!--
+SPDX-FileCopyrightText: 2025 Weibo, Inc.
+
+SPDX-License-Identifier: Apache-2.0
+-->
+
+<component name="ProjectRunConfigurationManager">
+  <configuration default="false" name="Run Plugin" type="GradleRunConfiguration" factoryName="Gradle">
+    <log_file alias="idea.log" path="$PROJECT_DIR$/build/idea-sandbox/system/log/idea.log" />
+    <ExternalSystemSettings>
+      <option name="executionName" />
+      <option name="externalProjectPath" value="$PROJECT_DIR$/jetbrains/plugin" />
+      <option name="externalSystemIdString" value="GRADLE" />
+      <option name="scriptParameters" value="" />
+      <option name="taskDescriptions">
+        <list />
+      </option>
+      <option name="taskNames">
+        <list>
+          <option value="runIde" />
+        </list>
+      </option>
+      <option name="vmOptions" value="" />
+    </ExternalSystemSettings>
+    <ExternalSystemDebugServerProcess>true</ExternalSystemDebugServerProcess>
+    <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>
+    <DebugAllEnabled>false</DebugAllEnabled>
+    <RunAsTest>false</RunAsTest>
+    <method v="2" />
+  </configuration>
+</component>
\ No newline at end of file
diff --git a/jetbrains/plugin/build.gradle.kts b/jetbrains/plugin/build.gradle.kts
new file mode 100644
index 000000000..0ec87170f
--- /dev/null
+++ b/jetbrains/plugin/build.gradle.kts
@@ -0,0 +1,255 @@
+// Copyright 2009-2025 Weibo, Inc.
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: APACHE2.0
+// SPDX-License-Identifier: Apache-2.0
+
+// Convenient for reading variables from gradle.properties
+fun properties(key: String) = providers.gradleProperty(key)
+
+plugins {
+    id("java")
+    id("org.jetbrains.kotlin.jvm") version "1.8.10"
+    id("org.jetbrains.intellij") version "1.17.4"
+    id("org.jlleitschuh.gradle.ktlint") version "11.6.1"
+    id("io.gitlab.arturbosch.detekt") version "1.23.4"
+}
+
+apply("genPlatform.gradle")
+
+// ------------------------------------------------------------
+// The 'debugMode' setting controls how plugin resources are prepared during the build process.
+// It supports the following three modes:
+//
+// 1. "idea" — Local development mode (used for debugging VSCode plugin integration)
+//    - Copies theme resources from src/main/resources/themes to:
+//        ../resources/<vscodePlugin>/src/integrations/theme/default-themes/
+//    - Automatically creates a .env file, which the Extension Host (Node.js side) reads at runtime.
+//    - Enables the VSCode plugin to load resources from this directory for integration testing.
+//    - Typically used when running IntelliJ with an Extension Host for live debugging and hot-reloading.
+//
+// 2. "release" — Production build mode (used to generate deployment artifacts)
+//    - Requires platform.zip to exist, which can be retrieved via git-lfs or generated with genPlatform.gradle.
+//    - This file includes the full runtime environment for VSCode plugins (e.g., node_modules, platform.txt).
+//    - The zip is extracted to build/platform/, and its node_modules take precedence over other dependencies.
+//    - Copies compiled host outputs (dist, package.json, node_modules) and plugin resources.
+//    - The result is a fully self-contained package ready for deployment across platforms.
+//
+// 3. "none" (default) — Lightweight mode (used for testing and CI)
+//    - Does not rely on platform.zip or prepare VSCode runtime resources.
+//    - Only copies the plugin's core assets such as themes.
+//    - Useful for early-stage development, static analysis, unit tests, and continuous integration pipelines.
+//
+// How to configure:
+//   - Set via gradle argument: -PdebugMode=idea / release / none
+//     Example: ./gradlew prepareSandbox -PdebugMode=idea
+//   - Defaults to "none" if not explicitly set.
+// ------------------------------------------------------------
+ext {
+    set("debugMode", project.findProperty("debugMode") ?: "none")
+    set("debugResource", project.projectDir.resolve("../resources").absolutePath)
+    set("vscodePlugin", project.findProperty("vscodePlugin") ?: "kilocode")
+}
+
+project.afterEvaluate {
+    tasks.findByName(":prepareSandbox")?.inputs?.properties?.put("build_mode", ext.get("debugMode"))
+}
+
+fun Sync.prepareSandbox() {
+    // Set duplicate strategy to include files, with later sources taking precedence
+    duplicatesStrategy = DuplicatesStrategy.INCLUDE
+    
+    if (ext.get("debugMode") == "idea") {
+        from("${project.projectDir.absolutePath}/src/main/resources/themes/") {
+            into("${ext.get("debugResource")}/${ext.get("vscodePlugin")}/integrations/theme/default-themes/")
+        }
+        doLast {
+            val vscodePluginDir = File("${ext.get("debugResource")}/${ext.get("vscodePlugin")}")
+            vscodePluginDir.mkdirs()
+            File(vscodePluginDir, ".env").createNewFile()
+        }
+    } else {
+        val vscodePluginDir = File("./plugins/${ext.get("vscodePlugin")}")
+        if (!vscodePluginDir.exists()) {
+            throw IllegalStateException("missing plugin dir")
+        }
+        val list = mutableListOf<String>()
+        val depfile = File("prodDep.txt")
+        if (!depfile.exists()) {
+            throw IllegalStateException("missing prodDep.txt")
+        }
+        depfile.readLines().let {
+            it.forEach { line ->
+                list.add(line.substringAfterLast("node_modules/") + "/**")
+            }
+        }
+
+        from("../host/dist") { into("${intellij.pluginName.get()}/runtime/") }
+        from("../host/package.json") { into("${intellij.pluginName.get()}/runtime/") }
+        
+        // First copy host node_modules
+        from("../resources/node_modules") {
+            into("${intellij.pluginName.get()}/node_modules/")
+            list.forEach {
+                include(it)
+            }
+        }
+
+        from("${vscodePluginDir.path}/extension") { into("${intellij.pluginName.get()}/${ext.get("vscodePlugin")}") }
+        from("src/main/resources/themes/") { into("${intellij.pluginName.get()}/${ext.get("vscodePlugin")}/integrations/theme/default-themes/") }
+        
+        // The platform.zip file required for release mode is associated with the code in ../base/vscode, currently using version 1.100.0. If upgrading this code later
+        // Need to modify the vscodeVersion value in gradle.properties, then execute the task named genPlatform, which will generate a new platform.zip file for submission
+        // To support new architectures, modify according to the logic in genPlatform.gradle script
+        if (ext.get("debugMode") == "release") {
+            // Check if platform.zip file exists and is larger than 1MB, otherwise throw exception
+            val platformZip = File("platform.zip")
+            if (platformZip.exists() && platformZip.length() >= 1024 * 1024) {
+                // Extract platform.zip to the platform subdirectory under the project build directory
+                val platformDir = File("${layout.buildDirectory.get().asFile}/platform")
+                platformDir.mkdirs()
+                copy {
+                    from(zipTree(platformZip))
+                    into(platformDir)
+                }
+            } else {
+                throw IllegalStateException("platform.zip file does not exist or is smaller than 1MB. This file is supported through git lfs and needs to be obtained through git lfs")
+            }
+
+            from(File(layout.buildDirectory.get().asFile, "platform/platform.txt")) { into("${intellij.pluginName.get()}/") }
+            // Copy platform node_modules last to ensure it takes precedence over host node_modules
+            from(File(layout.buildDirectory.get().asFile, "platform/node_modules")) { into("${intellij.pluginName.get()}/node_modules") }
+        }
+
+        doLast {
+            File("${destinationDir}/${intellij.pluginName.get()}/${ext.get("vscodePlugin")}/.env").createNewFile()
+        }
+    }
+}
+
+group = properties("pluginGroup").get()
+version = properties("pluginVersion").get()
+
+repositories {
+    mavenCentral()
+}
+
+dependencies {
+    implementation("com.squareup.okhttp3:okhttp:4.10.0")
+    implementation("com.google.code.gson:gson:2.10.1")
+    testImplementation("junit:junit:4.13.2")
+    detektPlugins("io.gitlab.arturbosch.detekt:detekt-formatting:1.23.4")
+}
+
+// Configure Java toolchain to force Java 17
+java {
+    sourceCompatibility = JavaVersion.VERSION_17
+    targetCompatibility = JavaVersion.VERSION_17
+    toolchain {
+        languageVersion.set(JavaLanguageVersion.of(17))
+    }
+}
+
+// Configure Gradle IntelliJ Plugin
+// Read more: https://plugins.jetbrains.com/docs/intellij/tools-gradle-intellij-plugin.html
+intellij {
+    version = properties("platformVersion")
+    type = properties("platformType")
+
+    plugins.set(
+        listOf(
+            "com.intellij.java",
+            // Add JCEF support
+            "org.jetbrains.plugins.terminal"
+        )
+    )
+}
+
+tasks {
+
+    // Create task for generating configuration files
+    register("generateConfigProperties") {
+        description = "Generate properties file containing plugin configuration"
+        doLast {
+            val configDir = File("$projectDir/src/main/resources/ai/kilocode/jetbrains/plugin/config")
+            configDir.mkdirs()
+
+            val configFile = File(configDir, "plugin.properties")
+            configFile.writeText("debug.mode=${ext.get("debugMode")}")
+            configFile.appendText("\n")
+            configFile.appendText("debug.resource=${ext.get("debugResource")}")
+            println("Configuration file generated: ${configFile.absolutePath}")
+        }
+    }
+
+    prepareSandbox {
+        prepareSandbox()
+    }
+
+    // Generate configuration file before compilation
+    withType<JavaCompile> {
+        dependsOn("generateConfigProperties")
+    }
+
+    // Set the JVM compatibility versions
+    withType<org.jetbrains.kotlin.gradle.tasks.KotlinCompile> {
+        dependsOn("generateConfigProperties")
+        kotlinOptions {
+            jvmTarget = "17"
+        }
+    }
+
+    withType<JavaCompile> {
+        sourceCompatibility = "17"
+        targetCompatibility = "17"
+    }
+
+    patchPluginXml {
+        version.set(properties("pluginVersion"))
+        sinceBuild.set(properties("pluginSinceBuild"))
+        untilBuild.set("")
+    }
+
+    signPlugin {
+        certificateChain.set(System.getenv("CERTIFICATE_CHAIN"))
+        privateKey.set(System.getenv("PRIVATE_KEY"))
+        password.set(System.getenv("PRIVATE_KEY_PASSWORD"))
+    }
+
+    publishPlugin {
+        token.set(System.getenv("PUBLISH_TOKEN"))
+    }
+
+}
+
+// Configure ktlint
+ktlint {
+    version.set("0.50.0")
+    debug.set(false)
+    verbose.set(true)
+    android.set(false)
+    outputToConsole.set(true)
+    outputColorName.set("RED")
+    ignoreFailures.set(true)
+    enableExperimentalRules.set(false)
+    filter {
+        exclude("**/generated/**")
+        include("**/kotlin/**")
+    }
+}
+
+// Configure detekt
+detekt {
+    toolVersion = "1.23.4"
+    config.setFrom(file("detekt.yml"))
+    buildUponDefaultConfig = true
+    allRules = false
+    
+    reports {
+        html.required.set(true)
+        xml.required.set(true)
+        txt.required.set(true)
+        sarif.required.set(true)
+        md.required.set(true)
+    }
+}
diff --git a/jetbrains/plugin/detekt.yml b/jetbrains/plugin/detekt.yml
new file mode 100644
index 000000000..6ba49e6ef
--- /dev/null
+++ b/jetbrains/plugin/detekt.yml
@@ -0,0 +1,729 @@
+# SPDX-FileCopyrightText: 2025 Weibo, Inc.
+#
+# SPDX-License-Identifier: Apache-2.0
+
+# Detekt configuration file for Kilo Code JetBrains Plugin
+# https://detekt.github.io/detekt/configurations.html
+
+build:
+  maxIssues: 5000
+  excludeCorrectable: false
+  weights:
+    # complexity: 2
+    # LongParameterList: 1
+    # style: 1
+    # comments: 1
+
+config:
+  validation: true
+  warningsAsErrors: false
+  checkExhaustiveness: false
+  # when writing own rules with new properties, exclude the property path e.g.: 'my_rule_set,.*>.*>[my_property]'
+  excludes: ''
+
+processors:
+  active: true
+  exclude:
+    - 'DetektProgressListener'
+  # - 'KtFileCountProcessor'
+  # - 'PackageCountProcessor'
+  # - 'ClassCountProcessor'
+  # - 'FunctionCountProcessor'
+  # - 'PropertyCountProcessor'
+  # - 'ProjectComplexityProcessor'
+  # - 'ProjectCognitiveComplexityProcessor'
+  # - 'ProjectLLOCProcessor'
+  # - 'ProjectCLOCProcessor'
+  # - 'ProjectLOCProcessor'
+  # - 'ProjectSLOCProcessor'
+  # - 'LicenseHeaderLoaderExtension'
+
+console-reports:
+  active: true
+  exclude:
+     - 'ProjectStatisticsReport'
+     - 'ComplexityReport'
+     - 'NotificationReport'
+     - 'FindingsReport'
+     - 'FileBasedFindingsReport'
+     - 'LiteFindingsReport'
+
+output-reports:
+  active: true
+  exclude:
+  # - 'TxtOutputReport'
+  # - 'XmlOutputReport'
+  # - 'HtmlOutputReport'
+  # - 'MdOutputReport'
+  # - 'SarifOutputReport'
+
+comments:
+  active: true
+  AbsentOrWrongFileLicense:
+    active: false
+    licenseTemplateFile: 'license.template'
+    licenseTemplateIsRegex: false
+  CommentOverPrivateFunction:
+    active: false
+  CommentOverPrivateProperty:
+    active: false
+  DeprecatedBlockTag:
+    active: false
+  EndOfSentenceFormat:
+    active: false
+    endOfSentenceFormat: '([.?!][ \t\n\r\f<])|([.?!:]$)'
+  KDocReferencesNonPublicProperty:
+    active: false
+    excludes: ['**/test/**', '**/androidTest/**', '**/commonTest/**', '**/jvmTest/**', '**/jsTest/**', '**/iosTest/**']
+  OutdatedDocumentation:
+    active: false
+    matchTypeParameters: true
+    matchDeclarationsOrder: true
+    allowParamOnConstructorProperties: false
+  UndocumentedPublicClass:
+    active: false
+    excludes: ['**/test/**', '**/androidTest/**', '**/commonTest/**', '**/jvmTest/**', '**/jsTest/**', '**/iosTest/**']
+    searchInNestedClass: true
+    searchInInnerClass: true
+    searchInInnerObject: true
+    searchInInnerInterface: true
+  UndocumentedPublicFunction:
+    active: false
+    excludes: ['**/test/**', '**/androidTest/**', '**/commonTest/**', '**/jvmTest/**', '**/jsTest/**', '**/iosTest/**']
+  UndocumentedPublicProperty:
+    active: false
+    excludes: ['**/test/**', '**/androidTest/**', '**/commonTest/**', '**/jvmTest/**', '**/jsTest/**', '**/iosTest/**']
+
+complexity:
+  active: true
+  CognitiveComplexMethod:
+    active: false
+    threshold: 15
+  ComplexCondition:
+    active: true
+    threshold: 4
+  ComplexInterface:
+    active: false
+    threshold: 10
+    includeStaticDeclarations: false
+    includePrivateDeclarations: false
+  CyclomaticComplexMethod:
+    active: true
+    threshold: 15
+    ignoreSingleWhenExpression: false
+    ignoreSimpleWhenEntries: false
+    ignoreNestingFunctions: false
+    nestingFunctions:
+      - 'also'
+      - 'apply'
+      - 'forEach'
+      - 'isNotNull'
+      - 'ifNull'
+      - 'let'
+      - 'run'
+      - 'use'
+      - 'with'
+  LabeledExpression:
+    active: false
+    ignoredLabels: []
+  LargeClass:
+    active: true
+    threshold: 600
+  LongMethod:
+    active: true
+    threshold: 60
+  LongParameterList:
+    active: true
+    functionThreshold: 6
+    constructorThreshold: 7
+    ignoreDefaultParameters: false
+    ignoreDataClasses: true
+    ignoreAnnotatedParameter: []
+  MethodOverloading:
+    active: false
+    threshold: 6
+  NamedArguments:
+    active: false
+    threshold: 3
+    ignoreArgumentsMatchingNames: false
+  NestedBlockDepth:
+    active: true
+    threshold: 4
+  NestedScopeFunctions:
+    active: false
+    threshold: 1
+    functions:
+      - 'kotlin.apply'
+      - 'kotlin.run'
+      - 'kotlin.with'
+      - 'kotlin.let'
+      - 'kotlin.also'
+  ReplaceSafeCallChainWithRun:
+    active: false
+  StringLiteralDuplication:
+    active: false
+    excludes: ['**/test/**', '**/androidTest/**', '**/commonTest/**', '**/jvmTest/**', '**/jsTest/**', '**/iosTest/**']
+    threshold: 3
+    ignoreAnnotation: true
+    excludeStringsWithLessThan5Characters: true
+    ignoreStringsRegex: '$^'
+  TooManyFunctions:
+    active: true
+    excludes: ['**/test/**', '**/androidTest/**', '**/commonTest/**', '**/jvmTest/**', '**/jsTest/**', '**/iosTest/**']
+    thresholdInFiles: 11
+    thresholdInClasses: 11
+    thresholdInInterfaces: 11
+    thresholdInObjects: 11
+    thresholdInEnums: 11
+    ignoreDeprecated: false
+    ignorePrivate: false
+    ignoreOverridden: false
+
+coroutines:
+  active: true
+  GlobalCoroutineUsage:
+    active: false
+  InjectDispatcher:
+    active: true
+    dispatcherNames:
+      - 'IO'
+      - 'Default'
+      - 'Unconfined'
+  RedundantSuspendModifier:
+    active: true
+  SleepInsteadOfDelay:
+    active: true
+  SuspendFunWithCoroutineScopeReceiver:
+    active: false
+  SuspendFunWithFlowReturnType:
+    active: true
+
+empty-blocks:
+  active: true
+  EmptyCatchBlock:
+    active: true
+    allowedExceptionNameRegex: '_|(ignore|expected).*'
+  EmptyClassBlock:
+    active: true
+  EmptyDefaultConstructor:
+    active: true
+  EmptyDoWhileBlock:
+    active: true
+  EmptyElseBlock:
+    active: true
+  EmptyFinallyBlock:
+    active: true
+  EmptyForBlock:
+    active: true
+  EmptyFunctionBlock:
+    active: true
+    ignoreOverridden: false
+  EmptyIfBlock:
+    active: true
+  EmptyInitBlock:
+    active: true
+  EmptyKtFile:
+    active: true
+  EmptySecondaryConstructor:
+    active: true
+  EmptyTryBlock:
+    active: true
+  EmptyWhenBlock:
+    active: true
+  EmptyWhileBlock:
+    active: true
+
+exceptions:
+  active: true
+  ExceptionRaisedInUnexpectedLocation:
+    active: true
+    methodNames:
+      - 'equals'
+      - 'finalize'
+      - 'hashCode'
+      - 'toString'
+  InstanceOfCheckForException:
+    active: true
+    excludes: ['**/test/**', '**/androidTest/**', '**/commonTest/**', '**/jvmTest/**', '**/jsTest/**', '**/iosTest/**']
+  NotImplementedDeclaration:
+    active: false
+  ObjectExtendsThrowable:
+    active: false
+  PrintStackTrace:
+    active: true
+  RethrowCaughtException:
+    active: true
+  ReturnFromFinally:
+    active: true
+    ignoreLabeled: false
+  SwallowedException:
+    active: true
+    ignoredExceptionTypes:
+      - 'InterruptedException'
+      - 'MalformedURLException'
+      - 'NumberFormatException'
+      - 'ParseException'
+    allowedExceptionNameRegex: '_|(ignore|expected).*'
+  ThrowingExceptionFromFinally:
+    active: true
+  ThrowingExceptionInMain:
+    active: false
+  ThrowingExceptionsWithoutMessageOrCause:
+    active: true
+    excludes: ['**/test/**', '**/androidTest/**', '**/commonTest/**', '**/jvmTest/**', '**/jsTest/**', '**/iosTest/**']
+    exceptions:
+      - 'ArrayIndexOutOfBoundsException'
+      - 'Exception'
+      - 'IllegalArgumentException'
+      - 'IllegalMonitorStateException'
+      - 'IllegalStateException'
+      - 'IndexOutOfBoundsException'
+      - 'NullPointerException'
+      - 'RuntimeException'
+      - 'Throwable'
+  ThrowingNewInstanceOfSameException:
+    active: true
+  TooGenericExceptionCaught:
+    active: true
+    excludes: ['**/test/**', '**/androidTest/**', '**/commonTest/**', '**/jvmTest/**', '**/jsTest/**', '**/iosTest/**']
+    exceptionNames:
+      - 'ArrayIndexOutOfBoundsException'
+      - 'Error'
+      - 'Exception'
+      - 'IllegalMonitorStateException'
+      - 'NullPointerException'
+      - 'IndexOutOfBoundsException'
+      - 'RuntimeException'
+      - 'Throwable'
+    allowedExceptionNameRegex: '_|(ignore|expected).*'
+  TooGenericExceptionThrown:
+    active: true
+    exceptionNames:
+      - 'Error'
+      - 'Exception'
+      - 'RuntimeException'
+      - 'Throwable'
+
+naming:
+  active: true
+  BooleanPropertyNaming:
+    active: false
+    allowedPattern: '^(is|has|are)'
+  ClassNaming:
+    active: true
+    classPattern: '[A-Z][a-zA-Z0-9]*'
+  ConstructorParameterNaming:
+    active: true
+    parameterPattern: '[a-z][A-Za-z0-9]*'
+    privateParameterPattern: '[a-z][A-Za-z0-9]*'
+    excludeClassPattern: '$^'
+  EnumNaming:
+    active: true
+    enumEntryPattern: '[A-Z][_a-zA-Z0-9]*'
+  ForbiddenClassName:
+    active: false
+    forbiddenName: []
+  FunctionMaxLength:
+    active: false
+    maximumFunctionNameLength: 30
+  FunctionMinLength:
+    active: false
+    minimumFunctionNameLength: 3
+  FunctionNaming:
+    active: true
+    excludes: ['**/test/**', '**/androidTest/**', '**/commonTest/**', '**/jvmTest/**', '**/jsTest/**', '**/iosTest/**']
+    functionPattern: '[a-z][a-zA-Z0-9]*'
+    excludeClassPattern: '$^'
+    ignoreAnnotated: ['Composable']
+  FunctionParameterNaming:
+    active: true
+    parameterPattern: '[a-z][A-Za-z0-9]*'
+    excludeClassPattern: '$^'
+  InvalidPackageDeclaration:
+    active: true
+    rootPackage: ''
+    requireRootInDeclaration: false
+  LambdaParameterNaming:
+    active: false
+    parameterPattern: '[a-z][A-Za-z0-9]*|_'
+  MatchingDeclarationName:
+    active: true
+    mustBeFirst: true
+  MemberNameEqualsClassName:
+    active: true
+    ignoreOverridden: true
+  NoNameShadowing:
+    active: true
+  NonBooleanPropertyPrefixedWithIs:
+    active: false
+  ObjectPropertyNaming:
+    active: true
+    constantPattern: '[A-Za-z][_A-Za-z0-9]*'
+    propertyPattern: '[A-Za-z][_A-Za-z0-9]*'
+    privatePropertyPattern: '(_)?[A-Za-z][_A-Za-z0-9]*'
+  PackageNaming:
+    active: true
+    packagePattern: '[a-z]+(\.[a-z][A-Za-z0-9]*)*'
+  TopLevelPropertyNaming:
+    active: true
+    constantPattern: '[A-Z][_A-Z0-9]*'
+    propertyPattern: '[A-Za-z][_A-Za-z0-9]*'
+    privatePropertyPattern: '_?[A-Za-z][_A-Za-z0-9]*'
+  VariableMaxLength:
+    active: false
+    maximumVariableNameLength: 64
+  VariableMinLength:
+    active: false
+    minimumVariableNameLength: 1
+  VariableNaming:
+    active: true
+    variablePattern: '[a-z][A-Za-z0-9]*'
+    privateVariablePattern: '(_)?[a-z][A-Za-z0-9]*'
+    excludeClassPattern: '$^'
+
+performance:
+  active: true
+  ArrayPrimitive:
+    active: true
+  CouldBeSequence:
+    active: false
+    threshold: 3
+  ForEachOnRange:
+    active: true
+    excludes: ['**/test/**', '**/androidTest/**', '**/commonTest/**', '**/jvmTest/**', '**/jsTest/**', '**/iosTest/**']
+  SpreadOperator:
+    active: true
+    excludes: ['**/test/**', '**/androidTest/**', '**/commonTest/**', '**/jvmTest/**', '**/jsTest/**', '**/iosTest/**']
+  UnnecessaryTemporaryInstantiation:
+    active: true
+
+potential-bugs:
+  active: true
+  AvoidReferentialEquality:
+    active: true
+    forbiddenTypePatterns:
+      - 'kotlin.String'
+  CastToNullableType:
+    active: false
+  Deprecation:
+    active: false
+  DontDowncastCollectionTypes:
+    active: false
+  DoubleMutabilityForCollection:
+    active: true
+    mutableTypes:
+      - 'kotlin.collections.MutableList'
+      - 'kotlin.collections.MutableMap'
+      - 'kotlin.collections.MutableSet'
+      - 'java.util.ArrayList'
+      - 'java.util.LinkedHashSet'
+      - 'java.util.HashSet'
+      - 'java.util.LinkedHashMap'
+      - 'java.util.HashMap'
+  ElseCaseInsteadOfExhaustiveWhen:
+    active: false
+  EqualsAlwaysReturnsTrueOrFalse:
+    active: true
+  EqualsWithHashCodeExist:
+    active: true
+  ExitOutsideMain:
+    active: false
+  ExplicitGarbageCollectionCall:
+    active: true
+  HasPlatformType:
+    active: true
+  IgnoredReturnValue:
+    active: true
+    restrictToConfig: true
+    returnValueAnnotations:
+      - '*.CheckResult'
+      - '*.CheckReturnValue'
+    ignoreReturnValueAnnotations:
+      - '*.CanIgnoreReturnValue'
+    returnValueTypes:
+      - 'kotlin.sequences.Sequence'
+      - 'kotlinx.coroutines.flow.Flow'
+      - 'java.util.stream.Stream'
+    ignoreFunctionCall: []
+  ImplicitDefaultLocale:
+    active: true
+  ImplicitUnitReturnType:
+    active: false
+    allowExplicitReturnType: true
+  InvalidRange:
+    active: true
+  IteratorHasNextCallsNextMethod:
+    active: true
+  IteratorNotThrowingNoSuchElementException:
+    active: true
+  LateinitUsage:
+    active: false
+    excludes: ['**/test/**', '**/androidTest/**', '**/commonTest/**', '**/jvmTest/**', '**/jsTest/**', '**/iosTest/**']
+    ignoreOnClassesPattern: ''
+  MapGetWithNotNullAssertionOperator:
+    active: true
+  MissingPackageDeclaration:
+    active: false
+    excludes: ['**/*.kts']
+  NullCheckOnMutableProperty:
+    active: false
+  NullableToStringCall:
+    active: false
+  PropertyUsedBeforeDeclaration:
+    active: false
+  UnconditionalJumpStatementInLoop:
+    active: false
+  UnnecessaryNotNullOperator:
+    active: true
+  UnnecessarySafeCall:
+    active: true
+  UnreachableCatchBlock:
+    active: true
+  UnreachableCode:
+    active: true
+  UnsafeCallOnNullableType:
+    active: true
+    excludes: ['**/test/**', '**/androidTest/**', '**/commonTest/**', '**/jvmTest/**', '**/jsTest/**', '**/iosTest/**']
+  UnsafeCast:
+    active: true
+  UnusedUnaryOperator:
+    active: true
+  UselessPostfixExpression:
+    active: true
+  WrongEqualsTypeParameter:
+    active: true
+
+style:
+  active: true
+  AlsoCouldBeApply:
+    active: false
+  CanBeNonNullable:
+    active: false
+  CascadingCallWrapping:
+    active: false
+    includeElvis: true
+  ClassOrdering:
+    active: false
+  CollapsibleIfStatements:
+    active: false
+  DataClassContainsFunctions:
+    active: false
+    conversionFunctionPrefix:
+      - 'to'
+  DataClassShouldBeImmutable:
+    active: false
+  DestructuringDeclarationWithTooManyEntries:
+    active: true
+    maxDestructuringEntries: 3
+  EqualsNullCall:
+    active: true
+  EqualsOnSignatureLine:
+    active: false
+  ExplicitCollectionElementAccessMethod:
+    active: false
+  ExplicitItLambdaParameter:
+    active: true
+    excludes: ['**/test/**', '**/androidTest/**', '**/commonTest/**', '**/jvmTest/**', '**/jsTest/**', '**/iosTest/**']
+  ExpressionBodySyntax:
+    active: false
+    includeLineWrapping: false
+  ForbiddenComment:
+    active: true
+    comments:
+      - value: 'FIXME:'
+        reason: 'Forbidden FIXME todo marker'
+      - value: 'STOPSHIP:'
+        reason: 'Forbidden STOPSHIP todo marker'
+      - value: 'TODO:'
+        reason: 'Forbidden TODO todo marker'
+    allowedPatterns: ''
+  ForbiddenImport:
+    active: false
+    imports: []
+    forbiddenPatterns: ''
+  ForbiddenMethodCall:
+    active: false
+    methods:
+      - 'kotlin.io.print'
+      - 'kotlin.io.println'
+  ForbiddenPublicDataClass:
+    active: false
+    excludes: ['**']
+    ignorePackages:
+      - '*.internal'
+      - '*.internal.*'
+  ForbiddenVoid:
+    active: true
+    ignoreOverridden: false
+    ignoreUsageInGenerics: false
+  FunctionOnlyReturningConstant:
+    active: true
+    ignoreOverridableFunction: true
+    ignoreActualFunction: true
+    excludedFunctions: []
+  LibraryCodeMustSpecifyReturnType:
+    active: false
+    excludes: ['**']
+  LibraryEntitiesShouldNotBePublic:
+    active: false
+    excludes: ['**']
+  LoopWithTooManyJumpStatements:
+    active: true
+    maxJumpCount: 1
+  MagicNumber:
+    active: true
+    excludes: ['**/test/**', '**/androidTest/**', '**/commonTest/**', '**/jvmTest/**', '**/jsTest/**', '**/iosTest/**']
+    ignoreNumbers:
+      - '-1'
+      - '0'
+      - '1'
+      - '2'
+    ignoreHashCodeFunction: true
+    ignorePropertyDeclaration: false
+    ignoreLocalVariableDeclaration: false
+    ignoreConstantDeclaration: true
+    ignoreCompanionObjectPropertyDeclaration: true
+    ignoreAnnotation: false
+    ignoreNamedArgument: true
+    ignoreEnums: false
+    ignoreRanges: false
+    ignoreExtensionFunctions: true
+  BracesOnIfStatements:
+    active: false
+    singleLine: 'always'
+    multiLine: 'always'
+  MandatoryBracesLoops:
+    active: false
+  MaxChainedCallsOnSameLine:
+    active: false
+    maxChainedCalls: 5
+  MaxLineLength:
+    active: true
+    maxLineLength: 120
+    excludePackageStatements: true
+    excludeImportStatements: true
+    excludeCommentStatements: false
+  MayBeConst:
+    active: true
+  ModifierOrder:
+    active: true
+  MultilineLambdaItParameter:
+    active: false
+  NestedClassesVisibility:
+    active: true
+  NewLineAtEndOfFile:
+    active: true
+  NoTabs:
+    active: false
+  NullableBooleanCheck:
+    active: false
+  ObjectLiteralToLambda:
+    active: true
+  OptionalAbstractKeyword:
+    active: true
+  OptionalUnit:
+    active: false
+  PreferToOverPairSyntax:
+    active: false
+  ProtectedMemberInFinalClass:
+    active: true
+  RedundantExplicitType:
+    active: false
+  RedundantHigherOrderMapUsage:
+    active: true
+  RedundantVisibilityModifierRule:
+    active: false
+  ReturnCount:
+    active: true
+    max: 2
+    excludedFunctions:
+      - 'equals'
+    excludeLabeled: false
+    excludeReturnFromLambda: true
+    excludeGuardClauses: false
+  SafeCast:
+    active: true
+  SerialVersionUIDInSerializableClass:
+    active: true
+  SpacingBetweenPackageAndImports:
+    active: false
+  ThrowsCount:
+    active: true
+    max: 2
+    excludeGuardClauses: false
+  TrailingWhitespace:
+    active: false
+  TrimMultilineRawString:
+    active: false
+  UnderscoresInNumericLiterals:
+    active: false
+    acceptableLength: 4
+    allowNonStandardGrouping: false
+  UnnecessaryAbstractClass:
+    active: true
+  UnnecessaryAnnotationUseSiteTarget:
+    active: false
+  UnnecessaryApply:
+    active: true
+  UnnecessaryFilter:
+    active: true
+  UnnecessaryInheritance:
+    active: true
+  UnnecessaryInnerClass:
+    active: false
+  UnnecessaryLet:
+    active: false
+  UnnecessaryParentheses:
+    active: false
+  UntilInsteadOfRangeTo:
+    active: false
+  UnusedImports:
+    active: false
+  UnusedParameter:
+    active: true
+    allowedNames: 'ignored|expected'
+  UnusedPrivateClass:
+    active: true
+  UnusedPrivateMember:
+    active: true
+    allowedNames: ''
+  UnusedPrivateProperty:
+    active: true
+    allowedNames: '_|ignored|expected|serialVersionUID'
+  UseAnyOrNoneInsteadOfFind:
+    active: true
+  UseArrayLiteralsInAnnotations:
+    active: true
+  UseCheckNotNull:
+    active: true
+  UseCheckOrError:
+    active: true
+  UseDataClass:
+    active: false
+    allowVars: false
+  UseEmptyCounterpart:
+    active: false
+  UseIfEmptyOrIfBlank:
+    active: false
+  UseIfInsteadOfWhen:
+    active: false
+  UseIsNullOrEmpty:
+    active: true
+  UseOrEmpty:
+    active: true
+  UseRequire:
+    active: true
+  UseRequireNotNull:
+    active: true
+  UselessCallOnNotNull:
+    active: true
+  UtilityClassWithPublicConstructor:
+    active: true
+  VarCouldBeVal:
+    active: true
+    ignoreLateinitVar: false
+  WildcardImport:
+    active: true
+    excludes: ['**/test/**', '**/androidTest/**', '**/commonTest/**', '**/jvmTest/**', '**/jsTest/**', '**/iosTest/**']
+    excludeImports:
+      - 'java.util.*'
\ No newline at end of file
diff --git a/jetbrains/plugin/genPlatform.gradle b/jetbrains/plugin/genPlatform.gradle
new file mode 100644
index 000000000..32a634282
--- /dev/null
+++ b/jetbrains/plugin/genPlatform.gradle
@@ -0,0 +1,174 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+import java.nio.file.*
+import java.security.MessageDigest
+
+
+tasks.register('genPlatform', Zip) {
+    download(project)
+    from(new File(project.buildDir, "genPlatform/gen"))
+    into("")
+    destinationDirectory = project.projectDir
+    archiveFileName = "platform.zip"
+}
+def download(Project project){
+
+    def version = project.findProperty("vscodeVersion")
+    String windows_x64 = "https://update.code.visualstudio.com/${version}/win32-x64-archive/stable"
+    String mac_x64 = "https://update.code.visualstudio.com/${version}/darwin/stable"
+    String mac_arm64  = "https://update.code.visualstudio.com/${version}/darwin-arm64/stable"
+    String linux_x64 = "https://update.code.visualstudio.com/${version}/linux-x64/stable"
+    // To support other platforms, need to synchronously modify the initPlatfromFiles method in WecoderPlugin
+
+    def list = [] // node_module directories for multiple platforms
+
+    def projectBuild = new File(project.buildDir,"genPlatform")
+    projectBuild.mkdirs();
+    println "Downloading Windows platform files"
+    def windowsZipFile = new File(projectBuild,"windows-x64.zip")
+    if (!windowsZipFile.exists()) {
+        windowsZipFile << new URL(windows_x64).openStream()
+    } else {
+        println "Windows platform file already exists, skipping download"
+    }
+
+    def windowsDir = new File(projectBuild, "windows-x64")
+    copy {
+        from(zipTree(new File(projectBuild, "windows-x64.zip")))
+        into(windowsDir)
+    }
+    new File(windowsDir, "resources/app/node_modules").renameTo( new File(windowsDir, "resources/app/windows-x64"))
+    list << new File(windowsDir, "resources/app/windows-x64")
+
+    println "Downloading Mac x64 platform files"
+    def macX64ZipFile = new File(projectBuild,"darwin-x64.zip")
+    if (!macX64ZipFile.exists()) {
+        macX64ZipFile << new URL(mac_x64).openStream()
+    } else {
+        println "Mac x64 platform file already exists, skipping download"
+    }
+
+    def macX64Dir = new File(projectBuild, "darwin-x64")
+    copy {
+        from(zipTree(new File(projectBuild, "darwin-x64.zip")))
+        into(macX64Dir)
+    }
+    new File(macX64Dir, "Visual Studio Code.app/Contents/Resources/app/node_modules").renameTo(new File(macX64Dir, "Visual Studio Code.app/Contents/Resources/app/darwin-x64"))
+    list << new File(macX64Dir, "Visual Studio Code.app/Contents/Resources/app/darwin-x64")
+
+    println "Downloading Mac arm64 platform files"
+    def macArm64ZipFile = new File(projectBuild,"darwin-arm64.zip")
+    if (!macArm64ZipFile.exists()) {
+        macArm64ZipFile << new URL(mac_arm64).openStream()
+    } else {
+        println "Mac arm64 platform file already exists, skipping download"
+    }
+
+    def macArm64Dir = new File(projectBuild, "darwin-arm64")
+    copy {
+        from(zipTree(new File(projectBuild, "darwin-arm64.zip")))
+        into(macArm64Dir)
+    }
+    new File(macArm64Dir, "Visual Studio Code.app/Contents/Resources/app/node_modules").renameTo(new File(macArm64Dir, "Visual Studio Code.app/Contents/Resources/app/darwin-arm64"))
+    list << new File(macArm64Dir, "Visual Studio Code.app/Contents/Resources/app/darwin-arm64")
+
+    println "Downloading Linux x64 platform files"
+    def linuxZipFile = new File(projectBuild,"linux-x64.zip")
+    if (!linuxZipFile.exists()) {
+        linuxZipFile << new URL(linux_x64).openStream()
+    } else {
+        println "Linux x64 platform file already exists, skipping download"
+    }
+
+    def linuxDir = new File(projectBuild, "linux-x64")
+    copy {
+        from(tarTree(resources.gzip(projectBuild.toPath().resolve("linux-x64.zip"))))
+        into(linuxDir)
+    }
+    new File(linuxDir, "VSCode-linux-x64/resources/app/node_modules").renameTo(new File(linuxDir, "VSCode-linux-x64/resources/app/linux-x64"))
+    list << new File(linuxDir, "VSCode-linux-x64/resources/app/linux-x64")
+
+    def targetDir = new File(projectBuild, "gen/node_modules")
+    def txtFile = new File(projectBuild, "gen/platform.txt")
+    mergeDirectories(list, targetDir,txtFile)
+
+    def zipFile = new File(project.projectDir,"platform.zip")
+    if(zipFile.exists()) {
+        zipFile.delete()
+    }
+}
+
+
+def mergeDirectories(List<File> dirs, File targetDir, File outputFile = null) {
+    def outputContent = new StringBuilder()
+    if (!targetDir.exists()) {
+        targetDir.mkdirs()
+    }
+
+    // Collect all file paths (relative paths), ignore .DS_Store
+    def allFiles = []
+    dirs.each { dir ->
+        if (dir.exists()) {
+            dir.eachFileRecurse { file ->
+                if (file.isFile() && file.name != ".DS_Store") {  // Ignore .DS_Store
+                    def relativePath = dir.toPath().relativize(file.toPath()).toString()
+                    allFiles << [dir: dir, file: file, relativePath: relativePath]
+                }
+                
+            }
+        }
+    }
+
+    // Group by relative path
+    def groupedFiles = allFiles.groupBy { it.relativePath }
+
+    groupedFiles.each { relativePath, entries ->
+        def targetFile = new File(targetDir, relativePath)
+        targetFile.parentFile.mkdirs()
+
+        if (entries.size() == 1) {
+            // Unique file, copy directly
+            Files.copy(entries[0].file.toPath(), targetFile.toPath(), StandardCopyOption.REPLACE_EXISTING)
+        } else {
+            // Check if all file contents are the same
+            def uniqueHashes = entries.collect { entry ->
+                def file = entry.file
+                def digest = MessageDigest.getInstance("SHA-256")
+                file.withInputStream { is ->
+                    byte[] buffer = new byte[8192]
+                    int read
+                    while ((read = is.read(buffer)) != -1) {
+                        digest.update(buffer, 0, read)
+                    }
+                }
+                def hash = digest.digest().encodeHex().toString()
+                [hash: hash, file: file, dir: entry.dir]
+            }.groupBy { it.hash }
+
+            if (uniqueHashes.size() == 1) {
+                // Same content, keep one copy
+                Files.copy(entries[0].file.toPath(), targetFile.toPath(), StandardCopyOption.REPLACE_EXISTING)
+            } else {
+                // Different content, add directory name as suffix
+                if (outputFile) {
+                    outputContent.append("$relativePath\n")
+                } else {
+                    println "$relativePath"
+                }
+                uniqueHashes.each { hash, files ->
+                    def sourceFile = files[0].file
+                    def dirName = files[0].dir.name
+                    def newName = targetFile.name + dirName
+                    def conflictFile = new File(targetFile.parentFile, newName)
+                    Files.copy(sourceFile.toPath(), conflictFile.toPath(), StandardCopyOption.REPLACE_EXISTING)
+                }
+            }
+        }
+    }
+    if (outputFile && outputContent.length() > 0) {
+        outputFile.parentFile.mkdirs()
+        outputFile.text = outputContent.toString()
+    }
+}
\ No newline at end of file
diff --git a/jetbrains/plugin/gradle.properties b/jetbrains/plugin/gradle.properties
new file mode 100644
index 000000000..995010ed7
--- /dev/null
+++ b/jetbrains/plugin/gradle.properties
@@ -0,0 +1,11 @@
+# Plugin basic information
+pluginGroup=ai.kilocode.jetbrains
+pluginVersion=4.88.0
+
+# Platform basic information
+platformVersion=2024.1.4
+platformType=IC
+pluginSinceBuild=241
+
+# Other project configurations can be added here
+vscodeVersion=1.100.0
diff --git a/jetbrains/plugin/gradle/wrapper/gradle-wrapper.jar b/jetbrains/plugin/gradle/wrapper/gradle-wrapper.jar
new file mode 100644
index 0000000000000000000000000000000000000000..249e5832f090a2944b7473328c07c9755baa3196
GIT binary patch
literal 60756
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
LmiCMtn7{r93&V3<

literal 0
HcmV?d00001

diff --git a/jetbrains/plugin/gradle/wrapper/gradle-wrapper.properties b/jetbrains/plugin/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
index 000000000..2e8fde5a7
--- /dev/null
+++ b/jetbrains/plugin/gradle/wrapper/gradle-wrapper.properties
@@ -0,0 +1,6 @@
+#Wed Aug 20 11:09:31 ART 2025
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-8.3-bin.zip
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
diff --git a/jetbrains/plugin/gradlew b/jetbrains/plugin/gradlew
new file mode 100755
index 000000000..1b6c78733
--- /dev/null
+++ b/jetbrains/plugin/gradlew
@@ -0,0 +1,234 @@
+#!/bin/sh
+
+#
+# Copyright © 2015-2021 the original authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      https://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+##############################################################################
+#
+#   Gradle start up script for POSIX generated by Gradle.
+#
+#   Important for running:
+#
+#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
+#       noncompliant, but you have some other compliant shell such as ksh or
+#       bash, then to run this script, type that shell name before the whole
+#       command line, like:
+#
+#           ksh Gradle
+#
+#       Busybox and similar reduced shells will NOT work, because this script
+#       requires all of these POSIX shell features:
+#         * functions;
+#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,
+#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;
+#         * compound commands having a testable exit status, especially «case»;
+#         * various built-in commands including «command», «set», and «ulimit».
+#
+#   Important for patching:
+#
+#   (2) This script targets any POSIX shell, so it avoids extensions provided
+#       by Bash, Ksh, etc; in particular arrays are avoided.
+#
+#       The "traditional" practice of packing multiple parameters into a
+#       space-separated string is a well documented source of bugs and security
+#       problems, so this is (mostly) avoided, by progressively accumulating
+#       options in "$@", and eventually passing that to Java.
+#
+#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
+#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;
+#       see the in-line comments for details.
+#
+#       There are tweaks for specific operating systems such as AIX, CygWin,
+#       Darwin, MinGW, and NonStop.
+#
+#   (3) This script is generated from the Groovy template
+#       https://github.com/gradle/gradle/blob/master/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
+#       within the Gradle project.
+#
+#       You can find Gradle at https://github.com/gradle/gradle/.
+#
+##############################################################################
+
+# Attempt to set APP_HOME
+
+# Resolve links: $0 may be a link
+app_path=$0
+
+# Need this for daisy-chained symlinks.
+while
+    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
+    [ -h "$app_path" ]
+do
+    ls=$( ls -ld "$app_path" )
+    link=${ls#*' -> '}
+    case $link in             #(
+      /*)   app_path=$link ;; #(
+      *)    app_path=$APP_HOME$link ;;
+    esac
+done
+
+APP_HOME=$( cd "${APP_HOME:-./}" && pwd -P ) || exit
+
+APP_NAME="Gradle"
+APP_BASE_NAME=${0##*/}
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD=maximum
+
+warn () {
+    echo "$*"
+} >&2
+
+die () {
+    echo
+    echo "$*"
+    echo
+    exit 1
+} >&2
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+nonstop=false
+case "$( uname )" in                #(
+  CYGWIN* )         cygwin=true  ;; #(
+  Darwin* )         darwin=true  ;; #(
+  MSYS* | MINGW* )  msys=true    ;; #(
+  NONSTOP* )        nonstop=true ;;
+esac
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD=$JAVA_HOME/jre/sh/java
+    else
+        JAVACMD=$JAVA_HOME/bin/java
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD=java
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
+    case $MAX_FD in #(
+      max*)
+        MAX_FD=$( ulimit -H -n ) ||
+            warn "Could not query maximum file descriptor limit"
+    esac
+    case $MAX_FD in  #(
+      '' | soft) :;; #(
+      *)
+        ulimit -n "$MAX_FD" ||
+            warn "Could not set maximum file descriptor limit to $MAX_FD"
+    esac
+fi
+
+# Collect all arguments for the java command, stacking in reverse order:
+#   * args from the command line
+#   * the main class name
+#   * -classpath
+#   * -D...appname settings
+#   * --module-path (only if needed)
+#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.
+
+# For Cygwin or MSYS, switch paths to Windows format before running java
+if "$cygwin" || "$msys" ; then
+    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
+    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )
+
+    JAVACMD=$( cygpath --unix "$JAVACMD" )
+
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    for arg do
+        if
+            case $arg in                                #(
+              -*)   false ;;                            # don't mess with options #(
+              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
+                    [ -e "$t" ] ;;                      #(
+              *)    false ;;
+            esac
+        then
+            arg=$( cygpath --path --ignore --mixed "$arg" )
+        fi
+        # Roll the args list around exactly as many times as the number of
+        # args, so each arg winds up back in the position where it started, but
+        # possibly modified.
+        #
+        # NB: a `for` loop captures its iteration list before it begins, so
+        # changing the positional parameters here affects neither the number of
+        # iterations, nor the values presented in `arg`.
+        shift                   # remove old arg
+        set -- "$@" "$arg"      # push replacement arg
+    done
+fi
+
+# Collect all arguments for the java command;
+#   * $DEFAULT_JVM_OPTS, $JAVA_OPTS, and $GRADLE_OPTS can contain fragments of
+#     shell script including quotes and variable substitutions, so put them in
+#     double quotes to make sure that they get re-expanded; and
+#   * put everything else in single quotes, so that it's not re-expanded.
+
+set -- \
+        "-Dorg.gradle.appname=$APP_BASE_NAME" \
+        -classpath "$CLASSPATH" \
+        org.gradle.wrapper.GradleWrapperMain \
+        "$@"
+
+# Use "xargs" to parse quoted args.
+#
+# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
+#
+# In Bash we could simply go:
+#
+#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
+#   set -- "${ARGS[@]}" "$@"
+#
+# but POSIX shell has neither arrays nor command substitution, so instead we
+# post-process each arg (as a line of input to sed) to backslash-escape any
+# character that might be a shell metacharacter, then use eval to reverse
+# that process (while maintaining the separation between arguments), and wrap
+# the whole thing up as a single "set" statement.
+#
+# This will of course break if any of these variables contains a newline or
+# an unmatched quote.
+#
+
+eval "set -- $(
+        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" |
+        xargs -n1 |
+        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
+        tr '\n' ' '
+    )" '"$@"'
+
+exec "$JAVACMD" "$@"
diff --git a/jetbrains/plugin/gradlew.bat b/jetbrains/plugin/gradlew.bat
new file mode 100644
index 000000000..107acd32c
--- /dev/null
+++ b/jetbrains/plugin/gradlew.bat
@@ -0,0 +1,89 @@
+@rem
+@rem Copyright 2015 the original author or authors.
+@rem
+@rem Licensed under the Apache License, Version 2.0 (the "License");
+@rem you may not use this file except in compliance with the License.
+@rem You may obtain a copy of the License at
+@rem
+@rem      https://www.apache.org/licenses/LICENSE-2.0
+@rem
+@rem Unless required by applicable law or agreed to in writing, software
+@rem distributed under the License is distributed on an "AS IS" BASIS,
+@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+@rem See the License for the specific language governing permissions and
+@rem limitations under the License.
+@rem
+
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Resolve any "." and ".." in APP_HOME to make it shorter.
+for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto execute
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto execute
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
diff --git a/jetbrains/plugin/package.json b/jetbrains/plugin/package.json
new file mode 100644
index 000000000..aeaadf424
--- /dev/null
+++ b/jetbrains/plugin/package.json
@@ -0,0 +1,31 @@
+{
+	"name": "@kilo-code/jetbrains-plugin",
+	"license": "Apache-2.0",
+	"type": "module",
+	"devDependencies": {
+		"del-cli": "^5.1.0",
+		"cpy-cli": "^5.0.0",
+		"mkdirp": "^3.0.1"
+	},
+	"scripts": {
+		"clean": "./gradlew clean",
+		"build": "./gradlew buildPlugin -PdebugMode=idea",
+		"run": "./gradlew runIde -PdebugMode=idea",
+		"run:bundle": "./gradlew runIde -PdebugMode=release",
+		"bundle": "./gradlew buildPlugin -PdebugMode=release",
+		"bundle:name": "node scripts/get_bundle_name.js",
+		"clean:kilocode": "npx del-cli ./plugins/kilocode --force && npx mkdirp ./plugins/kilocode",
+		"copy:kilocode": "npx cpy '../../bin-unpacked/extension/**' './plugins/kilocode/extension' --parents",
+		"clean:resource-kilocode": "npx del-cli ../resources/kilocode --force",
+		"copy:resource-kilocode": "npx cpy '../../bin-unpacked/extension/**' '../resources/kilocode' --parents",
+		"clean:resource-host": "npx del-cli ../resources/runtime --force",
+		"copy:resource-host": "npx cpy '../host/dist/**' '../resources/runtime' --parents",
+		"clean:resource-logs": "npx del-cli ../resources/logs --force",
+		"copy:resource-logs": "npx mkdirp ../resources/logs",
+		"clean:resource-nodemodules": "npx del-cli ../resources/node_modules --force && npx del-cli ../resources/package.json --force",
+		"copy:resource-nodemodules": "cp ../host/package.json ../resources/package.json && npm install --prefix ../resources",
+		"propDep": "npx del-cli ./propDep.txt --force && npm ls --omit=dev --all --parseable --prefix ../resources > ./prodDep.txt",
+		"sync:version": "node scripts/sync_version.js",
+		"sync:changelog": "node scripts/update_change_notes.js"
+	}
+}
diff --git a/jetbrains/plugin/platform.zip b/jetbrains/plugin/platform.zip
new file mode 100644
index 000000000..a25a4daa6
--- /dev/null
+++ b/jetbrains/plugin/platform.zip
@@ -0,0 +1,3 @@
+version https://git-lfs.github.com/spec/v1
+oid sha256:011391bc873e2f3ac1d21fb5648192739c43ae440e694e15509d09dffd659704
+size 64275738
diff --git a/jetbrains/plugin/scripts/get_bundle_name.js b/jetbrains/plugin/scripts/get_bundle_name.js
new file mode 100644
index 000000000..c8119c705
--- /dev/null
+++ b/jetbrains/plugin/scripts/get_bundle_name.js
@@ -0,0 +1,44 @@
+#!/usr/bin/env node
+
+import { readFileSync } from "fs"
+import { join, dirname } from "path"
+import { fileURLToPath } from "url"
+
+const __filename = fileURLToPath(import.meta.url)
+const __dirname = dirname(__filename)
+
+/**
+ * Get the bundle zip file name based on version from gradle.properties
+ */
+function getBundleName() {
+	try {
+		// Read version from gradle.properties
+		const gradlePropertiesPath = join(__dirname, "../gradle.properties")
+		const gradlePropertiesContent = readFileSync(gradlePropertiesPath, "utf8")
+
+		const gradleVersionMatch = gradlePropertiesContent.match(/^pluginVersion=(.+)$/m)
+		if (!gradleVersionMatch) {
+			throw new Error("pluginVersion not found in gradle.properties")
+		}
+
+		const version = gradleVersionMatch[1].trim()
+
+		// Generate the bundle name following the pattern: Kilo Code-{version}.zip
+		const bundleName = `Kilo Code-${version}.zip`
+
+		// Output just the filename for CI usage
+		process.stdout.write(bundleName)
+
+		return bundleName
+	} catch (error) {
+		console.error("❌ Error getting bundle name:", error.message)
+		process.exit(1)
+	}
+}
+
+// Run the function if this script is executed directly
+if (import.meta.url === `file://${process.argv[1]}`) {
+	getBundleName()
+}
+
+export default getBundleName
diff --git a/jetbrains/plugin/scripts/sync_version.js b/jetbrains/plugin/scripts/sync_version.js
new file mode 100644
index 000000000..825dfc7e3
--- /dev/null
+++ b/jetbrains/plugin/scripts/sync_version.js
@@ -0,0 +1,54 @@
+#!/usr/bin/env node
+
+import { readFileSync, writeFileSync } from "fs"
+import { join, dirname } from "path"
+import { fileURLToPath } from "url"
+
+const __filename = fileURLToPath(import.meta.url)
+const __dirname = dirname(__filename)
+
+/**
+ * Sync version from src/package.json to jetbrains/plugin/gradle.properties
+ */
+function syncVersion() {
+	try {
+		// Read version from src/package.json
+		const srcPackageJsonPath = join(__dirname, "../../../src/package.json")
+		const srcPackageJson = JSON.parse(readFileSync(srcPackageJsonPath, "utf8"))
+		const version = srcPackageJson.version
+
+		if (!version) {
+			throw new Error("Version not found in src/package.json")
+		}
+
+		console.log(`Found version: ${version}`)
+
+		// Read gradle.properties
+		const gradlePropertiesPath = join(__dirname, "../gradle.properties")
+		const gradlePropertiesContent = readFileSync(gradlePropertiesPath, "utf8")
+
+		// Update pluginVersion in gradle.properties
+		const updatedContent = gradlePropertiesContent.replace(/^pluginVersion=.*$/m, `pluginVersion=${version}`)
+
+		// Check if the replacement was successful
+		if (updatedContent === gradlePropertiesContent) {
+			console.warn("Warning: pluginVersion property not found or already up to date")
+			return
+		}
+
+		// Write updated gradle.properties
+		writeFileSync(gradlePropertiesPath, updatedContent, "utf8")
+
+		console.log(`✅ Successfully updated pluginVersion to ${version} in gradle.properties`)
+	} catch (error) {
+		console.error("❌ Error syncing version:", error.message)
+		process.exit(1)
+	}
+}
+
+// Run the sync if this script is executed directly
+if (import.meta.url === `file://${process.argv[1]}`) {
+	syncVersion()
+}
+
+export default syncVersion
diff --git a/jetbrains/plugin/scripts/update_change_notes.js b/jetbrains/plugin/scripts/update_change_notes.js
new file mode 100644
index 000000000..c1009d988
--- /dev/null
+++ b/jetbrains/plugin/scripts/update_change_notes.js
@@ -0,0 +1,158 @@
+#!/usr/bin/env node
+
+import { readFileSync, writeFileSync } from "fs"
+import { join, dirname } from "path"
+import { fileURLToPath } from "url"
+
+const __filename = fileURLToPath(import.meta.url)
+const __dirname = dirname(__filename)
+
+/**
+ * Update change-notes in plugin.xml based on version from gradle.properties and CHANGELOG.md
+ */
+function updateChangeNotes() {
+	try {
+		// Read version from gradle.properties
+		const gradlePropertiesPath = join(__dirname, "../gradle.properties")
+		const gradlePropertiesContent = readFileSync(gradlePropertiesPath, "utf8")
+
+		const gradleVersionMatch = gradlePropertiesContent.match(/^pluginVersion=(.+)$/m)
+		if (!gradleVersionMatch) {
+			throw new Error("pluginVersion not found in gradle.properties")
+		}
+
+		const version = gradleVersionMatch[1].trim()
+		console.log(`Found plugin version: ${version}`)
+
+		// Read CHANGELOG.md
+		const changelogPath = join(__dirname, "../../../CHANGELOG.md")
+		const changelogContent = readFileSync(changelogPath, "utf8")
+
+		// Find the version section in changelog
+		const versionPattern = new RegExp(`## \\[v${version.replace(/\./g, "\\.")}\\]([\\s\\S]*?)(?=## \\[v|$)`)
+		const changelogVersionMatch = changelogContent.match(versionPattern)
+
+		if (!changelogVersionMatch) {
+			throw new Error(`Version ${version} not found in CHANGELOG.md`)
+		}
+
+		const changelogSection = changelogVersionMatch[1].trim()
+		console.log(`Found changelog section for version ${version}`)
+
+		// Convert markdown to HTML format suitable for plugin.xml
+		const changeNotesHtml = convertMarkdownToHtml(changelogSection, version)
+
+		// Read plugin.xml
+		const pluginXmlPath = join(__dirname, "../src/main/resources/META-INF/plugin.xml")
+		const pluginXmlContent = readFileSync(pluginXmlPath, "utf8")
+
+		// Replace change-notes section
+		const changeNotesPattern = /(<change-notes><!\[CDATA\[)([\s\S]*?)(\]\]><\/change-notes>)/
+		const updatedPluginXml = pluginXmlContent.replace(changeNotesPattern, `$1\n${changeNotesHtml}\n    $3`)
+
+		// Check if the replacement was successful
+		if (updatedPluginXml === pluginXmlContent) {
+			console.warn("Warning: change-notes section not found or already up to date")
+			return
+		}
+
+		// Write updated plugin.xml
+		writeFileSync(pluginXmlPath, updatedPluginXml, "utf8")
+
+		console.log(`✅ Successfully updated change-notes for version ${version} in plugin.xml`)
+	} catch (error) {
+		console.error("❌ Error updating change-notes:", error.message)
+		process.exit(1)
+	}
+}
+
+/**
+ * Convert markdown changelog to HTML format suitable for plugin.xml
+ */
+function convertMarkdownToHtml(markdown, version) {
+	let html = `        <h3>Version ${version}</h3>\n        <ul>`
+
+	// Split into lines and process
+	const lines = markdown.split("\n").filter((line) => line.trim())
+
+	for (const line of lines) {
+		const trimmedLine = line.trim()
+
+		// Skip empty lines and section headers
+		if (!trimmedLine || trimmedLine.startsWith("##") || trimmedLine.startsWith("###")) {
+			continue
+		}
+
+		// Handle main bullet points (features/changes)
+		if (trimmedLine.startsWith("- ")) {
+			const content = trimmedLine.substring(2).trim()
+			const cleanContent = cleanMarkdownContent(content)
+
+			if (cleanContent) {
+				html += `\n            <li>${escapeHtml(cleanContent)}</li>`
+			}
+		}
+
+		// Handle sub-bullet points (patch changes, etc.)
+		else if (trimmedLine.match(/^\s*-\s/)) {
+			const content = trimmedLine.replace(/^\s*-\s/, "").trim()
+			const cleanContent = cleanMarkdownContent(content)
+
+			if (cleanContent) {
+				html += `\n            <li>${escapeHtml(cleanContent)}</li>`
+			}
+		}
+	}
+
+	html += "\n        </ul>"
+	return html
+}
+
+/**
+ * Clean markdown content by removing links, PR references, and contributor mentions
+ */
+function cleanMarkdownContent(content) {
+	return (
+		content
+			// Remove PR links like [#2012](https://github.com/...)
+			.replace(/\[#\d+\]\([^)]+\)\s*/g, "")
+			// Remove commit hash links like [`1fd698a`](https://github.com/...)
+			.replace(/\[`[^`]+`\]\([^)]+\)\s*/g, "")
+			// Remove GitHub user links like [@catrielmuller](https://github.com/catrielmuller)
+			.replace(/\[@[^\]]+\]\([^)]+\)\s*/g, "")
+			// Remove "Thanks @username!" mentions at the beginning
+			.replace(/^Thanks\s+@[^!]+!\s*-?\s*/g, "")
+			// Remove "Thanks @username!" mentions anywhere
+			.replace(/Thanks\s+@[^!]+!\s*-?\s*/g, "")
+			// Remove "Thanks @username" mentions (without exclamation)
+			.replace(/Thanks\s+@[^,)]+[,)]\s*/g, "")
+			// Remove standalone contributor mentions like "(thanks @username!)"
+			.replace(/\(thanks\s+@[^)]+\)\s*/g, "")
+			// Remove leftover "Thanks !" patterns
+			.replace(/Thanks\s*!\s*-?\s*/g, "")
+			// Remove leading dashes and spaces
+			.replace(/^[-\s]+/g, "")
+			// Clean up multiple spaces
+			.replace(/\s+/g, " ")
+			.trim()
+	)
+}
+
+/**
+ * Escape HTML special characters
+ */
+function escapeHtml(text) {
+	return text
+		.replace(/&/g, "&amp;")
+		.replace(/</g, "&lt;")
+		.replace(/>/g, "&gt;")
+		.replace(/"/g, "&quot;")
+		.replace(/'/g, "&#39;")
+}
+
+// Run the update if this script is executed directly
+if (import.meta.url === `file://${process.argv[1]}`) {
+	updateChangeNotes()
+}
+
+export default updateChangeNotes
diff --git a/jetbrains/plugin/settings.gradle.kts b/jetbrains/plugin/settings.gradle.kts
new file mode 100644
index 000000000..d05bf38bc
--- /dev/null
+++ b/jetbrains/plugin/settings.gradle.kts
@@ -0,0 +1,5 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+rootProject.name = "Kilo Code"
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actions/ActionConstants.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actions/ActionConstants.kt
new file mode 100644
index 000000000..4a967d502
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actions/ActionConstants.kt
@@ -0,0 +1,285 @@
+// Copyright 2009-2025 Weibo, Inc.
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.actions
+
+/**
+ * Constants for action names displayed in the UI.
+ * These represent the text shown to users in menus and context options.
+ */
+object ActionNames {
+    /** Action to explain selected code */
+    const val EXPLAIN = "Explain Code"
+    /** Action to fix issues in selected code */
+    const val FIX = "Fix Code"
+    /** Action to fix logical issues in selected code */
+    const val FIX_LOGIC = "Fix Logic"
+    /** Action to improve selected code */
+    const val IMPROVE = "Improve Code"
+    /** Action to add selected code to context */
+    const val ADD_TO_CONTEXT = "Add to Context"
+    /** Action to create a new task */
+    const val NEW_TASK = "New Task"
+}
+
+/**
+ * Command identifiers used for internal command registration and execution.
+ * These IDs are used to register commands with the IDE.
+ */
+object CommandIds {
+    /** Command ID for explaining code */
+    const val EXPLAIN = "kilo-code.explainCode"
+    /** Command ID for fixing code */
+    const val FIX = "kilo-code.fixCode"
+    /** Command ID for improving code */
+    const val IMPROVE = "kilo-code.improveCode"
+    /** Command ID for adding to context */
+    const val ADD_TO_CONTEXT = "kilo-code.addToContext"
+    /** Command ID for creating a new task */
+    const val NEW_TASK = "kilo-code.newTask"
+}
+
+/** Type alias for prompt type identifiers */
+typealias SupportPromptType = String
+/** Type alias for prompt parameters map */
+typealias PromptParams = Map<String, Any?>
+
+/**
+ * Data class representing a prompt configuration with a template string.
+ * Templates contain placeholders that will be replaced with actual values.
+ */
+data class SupportPromptConfig(val template: String)
+
+/**
+ * Collection of predefined prompt configurations for different use cases.
+ * Each configuration contains a template with placeholders for dynamic content.
+ */
+object SupportPromptConfigs {
+    /**
+     * Template for enhancing user prompts.
+     * Instructs the AI to generate an improved version of the user's input.
+     */
+    val ENHANCE = SupportPromptConfig(
+        """Generate an enhanced version of this prompt (reply with only the enhanced prompt - no conversation, explanations, lead-in, bullet points, placeholders, or surrounding quotes):
+
+${'$'}{userInput}"""
+    )
+
+    /**
+     * Template for explaining code.
+     * Provides structure for code explanation requests with file path and line information.
+     */
+    val EXPLAIN = SupportPromptConfig(
+        """Explain the following code from file path ${'$'}{filePath}:${'$'}{startLine}-${'$'}{endLine}
+${'$'}{userInput}
+
+```
+${'$'}{selectedText}
+```
+
+Please provide a clear and concise explanation of what this code does, including:
+1. The purpose and functionality
+2. Key components and their interactions
+3. Important patterns or techniques used"""
+    )
+
+    /**
+     * Template for fixing code issues.
+     * Includes diagnostic information and structured format for issue resolution.
+     */
+    val FIX = SupportPromptConfig(
+        """Fix any issues in the following code from file path ${'$'}{filePath}:${'$'}{startLine}-${'$'}{endLine}
+${'$'}{diagnosticText}
+${'$'}{userInput}
+
+```
+${'$'}{selectedText}
+```
+
+Please:
+1. Address all detected problems listed above (if any)
+2. Identify any other potential bugs or issues
+3. Provide corrected code
+4. Explain what was fixed and why"""
+    )
+
+    /**
+     * Template for improving code quality.
+     * Focuses on readability, performance, best practices, and error handling.
+     */
+    val IMPROVE = SupportPromptConfig(
+        """Improve the following code from file path ${'$'}{filePath}:${'$'}{startLine}-${'$'}{endLine}
+${'$'}{userInput}
+
+```
+${'$'}{selectedText}
+```
+
+Please suggest improvements for:
+1. Code readability and maintainability
+2. Performance optimization
+3. Best practices and patterns
+4. Error handling and edge cases
+
+Provide the improved code along with explanations for each enhancement."""
+    )
+
+    /**
+     * Template for adding code to context.
+     * Simple format that includes file path, line range, and selected code.
+     */
+    val ADD_TO_CONTEXT = SupportPromptConfig(
+        """${'$'}{filePath}:${'$'}{startLine}-${'$'}{endLine}
+```
+${'$'}{selectedText}
+```"""
+    )
+
+    /**
+     * Template for adding terminal output to context.
+     * Includes user input and terminal content.
+     */
+    val TERMINAL_ADD_TO_CONTEXT = SupportPromptConfig(
+        """${'$'}{userInput}
+Terminal output:
+```
+${'$'}{terminalContent}
+```"""
+    )
+
+    /**
+     * Template for fixing terminal commands.
+     * Structured format for identifying and resolving command issues.
+     */
+    val TERMINAL_FIX = SupportPromptConfig(
+        """${'$'}{userInput}
+Fix this terminal command:
+```
+${'$'}{terminalContent}
+```
+
+Please:
+1. Identify any issues in the command
+2. Provide the corrected command
+3. Explain what was fixed and why"""
+    )
+
+    /**
+     * Template for explaining terminal commands.
+     * Provides structure for command explanation with focus on functionality and behavior.
+     */
+    val TERMINAL_EXPLAIN = SupportPromptConfig(
+        """${'$'}{userInput}
+Explain this terminal command:
+```
+${'$'}{terminalContent}
+```
+
+Please provide:
+1. What the command does
+2. Explanation of each part/flag
+3. Expected output and behavior"""
+    )
+
+    /**
+     * Template for creating a new task.
+     * Simple format that passes through user input directly.
+     */
+    val NEW_TASK = SupportPromptConfig(
+        """${'$'}{userInput}"""
+    )
+
+    /**
+     * Map of all available prompt configurations indexed by their type identifiers.
+     * Used for lookup when creating prompts.
+     */
+    val configs = mapOf(
+        "ENHANCE" to ENHANCE,
+        "EXPLAIN" to EXPLAIN,
+        "FIX" to FIX,
+        "IMPROVE" to IMPROVE,
+        "ADD_TO_CONTEXT" to ADD_TO_CONTEXT,
+        "TERMINAL_ADD_TO_CONTEXT" to TERMINAL_ADD_TO_CONTEXT,
+        "TERMINAL_FIX" to TERMINAL_FIX,
+        "TERMINAL_EXPLAIN" to TERMINAL_EXPLAIN,
+        "NEW_TASK" to NEW_TASK
+    )
+}
+
+/**
+ * Utility object for working with support prompts.
+ * Provides methods for creating and customizing prompts based on templates.
+ */
+object SupportPrompt {
+    /**
+     * Generates formatted diagnostic text from a list of diagnostic items.
+     *
+     * @param diagnostics List of diagnostic items containing source, message, and code
+     * @return Formatted string of diagnostic messages or empty string if no diagnostics
+     */
+    private fun generateDiagnosticText(diagnostics: List<Map<String, Any?>>?): String {
+        if (diagnostics.isNullOrEmpty()) return ""
+        return "\nCurrent problems detected:\n" + diagnostics.joinToString("\n") { d ->
+            val source = d["source"] as? String ?: "Error"
+            val message = d["message"] as? String ?: ""
+            val code = d["code"] as? String
+            "- [$source] $message${code?.let { " ($it)" } ?: ""}"
+        }
+    }
+
+    /**
+     * Creates a prompt by replacing placeholders in a template with actual values.
+     *
+     * @param template The prompt template with placeholders
+     * @param params Map of parameter values to replace placeholders
+     * @return The processed prompt with placeholders replaced by actual values
+     */
+    private fun createPrompt(template: String, params: PromptParams): String {
+        val pattern = Regex("""\$\{(.*?)}""")
+        return pattern.replace(template) { matchResult ->
+            val key = matchResult.groupValues[1]
+            if (key == "diagnosticText") {
+                generateDiagnosticText(params["diagnostics"] as? List<Map<String, Any?>>)
+            } else if (params.containsKey(key)) {
+                // Ensure the value is treated as a string for replacement
+                val value = params[key]
+                when (value) {
+                    is String -> value
+                    else -> {
+                        // Convert non-string values to string for replacement
+                        value?.toString() ?: ""
+                    }
+                }
+            } else {
+                // If the placeholder key is not in params, replace with empty string
+                ""
+            }
+        }
+    }
+
+    /**
+     * Gets the template for a specific prompt type, with optional custom overrides.
+     *
+     * @param customSupportPrompts Optional map of custom prompt templates
+     * @param type The type of prompt to retrieve
+     * @return The template string for the specified prompt type
+     */
+    fun get(customSupportPrompts: Map<String, String>?, type: SupportPromptType): String {
+        return customSupportPrompts?.get(type) ?: SupportPromptConfigs.configs[type]?.template ?: ""
+    }
+
+    /**
+     * Creates a complete prompt by getting the template and replacing placeholders.
+     *
+     * @param type The type of prompt to create
+     * @param params Parameters to substitute into the template
+     * @param customSupportPrompts Optional custom prompt templates
+     * @return The final prompt with all placeholders replaced
+     */
+    fun create(type: SupportPromptType, params: PromptParams, customSupportPrompts: Map<String, String>? = null): String {
+        val template = get(customSupportPrompts, type)
+        return createPrompt(template, params)
+    }
+}
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actions/RegisterCodeActions.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actions/RegisterCodeActions.kt
new file mode 100644
index 000000000..38715b1ef
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actions/RegisterCodeActions.kt
@@ -0,0 +1,299 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.actions
+
+import com.intellij.openapi.actionSystem.AnAction
+import com.intellij.openapi.actionSystem.AnActionEvent
+import com.intellij.openapi.actionSystem.CommonDataKeys
+import com.intellij.openapi.editor.Editor
+import com.intellij.openapi.project.Project
+import com.intellij.openapi.ui.Messages
+import ai.kilocode.jetbrains.webview.WebViewManager
+
+/**
+ * Code action provider, similar to VSCode's CodeActionProvider.
+ * Provides functionality for creating and managing code-related actions.
+ */
+class CodeActionProvider {
+
+    /**
+     * Creates a single code action with the specified title and command.
+     *
+     * @param title The display title for the action
+     * @param command The command identifier to execute when action is triggered
+     * @return An AnAction instance that can be registered with the IDE
+     */
+    private fun createAction(
+        title: String,
+        command: String
+    ): AnAction {
+        return object : AnAction(title) {
+            override fun actionPerformed(e: AnActionEvent) {
+                val project = e.project ?: return
+                val editor = e.getData(CommonDataKeys.EDITOR) ?: return
+                val file = e.dataContext.getData(CommonDataKeys.VIRTUAL_FILE) ?: return
+
+                // Get current parameters when the action is clicked
+                val effectiveRange = getEffectiveRange(editor)
+                if (effectiveRange == null) return
+
+                val args = mutableMapOf<String, Any?>()
+                args["filePath"] = file.path
+                args["selectedText"] = effectiveRange.text
+                args["startLine"] = effectiveRange.startLine + 1
+                args["endLine"] = effectiveRange.endLine + 1
+
+                handleCodeAction(command, title, args, project)
+            }
+        }
+    }
+
+    /**
+     * Creates a pair of actions (new task version and current task version).
+     *
+     * @param baseTitle The base title for the actions
+     * @param baseCommand The base command identifier
+     * @return List of AnAction instances
+     */
+    private fun createActionPair(
+        baseTitle: String,
+        baseCommand: String
+    ): List<AnAction> {
+        return listOf(
+            createAction("$baseTitle in Current Task", "${baseCommand}InCurrentTask")
+        )
+    }
+
+    /**
+     * Gets the effective range and text from the current editor selection.
+     *
+     * @param editor The current editor instance
+     * @return EffectiveRange object containing selected text and line numbers, or null if no selection
+     */
+    private fun getEffectiveRange(editor: Editor): EffectiveRange? {
+        val document = editor.document
+        val selectionModel = editor.selectionModel
+
+        return if (selectionModel.hasSelection()) {
+            val selectedText = selectionModel.selectedText ?: ""
+            val startLine = document.getLineNumber(selectionModel.selectionStart)
+            val endLine = document.getLineNumber(selectionModel.selectionEnd)
+            EffectiveRange(selectedText, startLine, endLine)
+        } else {
+            null
+        }
+    }
+
+    /**
+     * Provides a list of code actions for the given action event.
+     *
+     * @param e The action event containing context information
+     * @return List of available code actions
+     */
+    fun provideCodeActions(e: AnActionEvent): List<AnAction> {
+        val actions = mutableListOf<AnAction>()
+
+        // Add to context action
+        actions.add(
+            createAction(
+                ActionNames.ADD_TO_CONTEXT,
+                CommandIds.ADD_TO_CONTEXT
+            )
+        )
+
+        // Explain code action pair
+        actions.addAll(
+            createActionPair(
+                ActionNames.EXPLAIN,
+                CommandIds.EXPLAIN
+            )
+        )
+
+        // Fix code action pair (logic fix)
+        actions.addAll(
+            createActionPair(
+                ActionNames.FIX_LOGIC,
+                CommandIds.FIX
+            )
+        )
+
+        // Improve code action pair
+        actions.addAll(
+            createActionPair(
+                ActionNames.IMPROVE,
+                CommandIds.IMPROVE
+            )
+        )
+
+        return actions
+    }
+}
+
+/**
+ * Data class representing an effective range of selected text.
+ * Contains the selected text and its start/end line numbers.
+ *
+ * @property text The selected text content
+ * @property startLine The starting line number (0-based)
+ * @property endLine The ending line number (0-based)
+ */
+data class EffectiveRange(
+    val text: String,
+    val startLine: Int,
+    val endLine: Int
+)
+
+/**
+ * Registers a code action with the specified parameters.
+ *
+ * @param command The command identifier
+ * @param promptType The type of prompt to use
+ * @param inputPrompt Optional prompt text for user input dialog
+ * @param inputPlaceholder Optional placeholder text for input field
+ * @return An AnAction instance that can be registered with the IDE
+ */
+fun registerCodeAction(
+    command: String,
+    promptType: String,
+    inputPrompt: String? = null,
+    inputPlaceholder: String? = null
+) : AnAction {
+    return object : AnAction(command) {
+        override fun actionPerformed(e: AnActionEvent) {
+            val project = e.project ?: return
+            val editor = e.getData(CommonDataKeys.EDITOR) ?: return
+
+            var userInput: String? = null
+            if (inputPrompt != null) {
+                userInput = Messages.showInputDialog(
+                    project,
+                    inputPrompt,
+                    "Kilo Code",
+                    null,
+                    inputPlaceholder,
+                    null
+                )
+                if (userInput == null) return // Cancelled
+            }
+
+            // Get selected content, line numbers, etc.
+            val document = editor.document
+            val selectionModel = editor.selectionModel
+            val selectedText = selectionModel.selectedText ?: ""
+            val startLine = if (selectionModel.hasSelection()) document.getLineNumber(selectionModel.selectionStart) else null
+            val endLine = if (selectionModel.hasSelection()) document.getLineNumber(selectionModel.selectionEnd) else null
+            val file = e.getData(CommonDataKeys.VIRTUAL_FILE)
+            val filePath = file?.path ?: ""
+
+            val params = mutableMapOf<String, Any?>(
+                "filePath" to filePath,
+                "selectedText" to selectedText
+            )
+            if (startLine != null) params["startLine"] = (startLine + 1).toString()
+            if (endLine != null) params["endLine"] = (endLine + 1).toString()
+            if (!userInput.isNullOrEmpty()) params["userInput"] = userInput
+
+            handleCodeAction(command, promptType, params, e.project)
+        }
+    }
+}
+/**
+ * Registers a pair of code actions with the specified parameters.
+ *
+ * @param baseCommand The base command identifier
+ * @param inputPrompt Optional prompt text for user input dialog
+ * @param inputPlaceholder Optional placeholder text for input field
+ * @return An AnAction instance for the new task version
+ */
+fun registerCodeActionPair(
+    baseCommand: String,
+    inputPrompt: String? = null,
+    inputPlaceholder: String? = null
+) : AnAction {
+    // New task version
+    return registerCodeAction(baseCommand, baseCommand, inputPrompt, inputPlaceholder)
+}
+
+/**
+ * Core logic for handling code actions.
+ * Processes different types of commands and sends appropriate messages to the webview.
+ *
+ * @param command The command identifier
+ * @param promptType The type of prompt to use
+ * @param params Parameters for the action (can be Map or List)
+ * @param project The current project
+ */
+fun handleCodeAction(command: String, promptType: String, params: Any, project: Project?) {
+    val latestWebView = project?.getService(WebViewManager::class.java)?.getLatestWebView()
+    if (latestWebView == null) {
+        return
+    }
+
+    // Create message content based on command type
+    val messageContent = when {
+        // Add to context command
+        command.contains("addToContext") -> {
+            val promptParams = if (params is Map<*, *>) params as Map<String, Any?> else emptyMap()
+            mapOf(
+                "type" to "invoke",
+                "invoke" to "setChatBoxMessage",
+                "text" to SupportPrompt.create("ADD_TO_CONTEXT", promptParams)
+            )
+        }
+        // Command executed in current task
+        command.endsWith("InCurrentTask") -> {
+            val promptParams = if (params is Map<*, *>) params as Map<String, Any?> else emptyMap()
+            val basePromptType = when {
+                command.contains("explain") -> "EXPLAIN"
+                command.contains("fix") -> "FIX"
+                command.contains("improve") -> "IMPROVE"
+                else -> promptType
+            }
+            mapOf(
+                "type" to "invoke",
+                "invoke" to "sendMessage",
+                "text" to SupportPrompt.create(basePromptType, promptParams)
+            )
+        }
+        // Command executed in new task
+        else -> {
+            val promptParams = if (params is List<*>) {
+                // Process parameter list from createAction
+                val argsList = params as List<Any>
+                if (argsList.size >= 4) {
+                    mapOf(
+                        "filePath" to argsList[0],
+                        "selectedText" to argsList[1],
+                        "startLine" to argsList[2],
+                        "endLine" to argsList[3]
+                    )
+                } else {
+                    emptyMap()
+                }
+            } else if (params is Map<*, *>) {
+                params as Map<String, Any?>
+            } else {
+                emptyMap()
+            }
+
+            val basePromptType = when {
+                command.contains("explain") -> "EXPLAIN"
+                command.contains("fix") -> "FIX"
+                command.contains("improve") -> "IMPROVE"
+                else -> promptType
+            }
+
+            mapOf(
+                "type" to "invoke",
+                "invoke" to "initClineWithTask",
+                "text" to SupportPrompt.create(basePromptType, promptParams)
+            )
+        }
+    }
+
+    // Convert to JSON and send
+    val messageJson = com.google.gson.Gson().toJson(messageContent)
+    latestWebView.postMessageToWebView(messageJson)
+}
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actions/RightClickChatActionGroup.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actions/RightClickChatActionGroup.kt
new file mode 100644
index 000000000..c381a5848
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actions/RightClickChatActionGroup.kt
@@ -0,0 +1,66 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.actions
+
+import com.intellij.openapi.actionSystem.*
+import com.intellij.openapi.project.DumbAware
+
+/**
+ * Right-click menu code action group, similar to VSCode's code action provider.
+ * This class manages the dynamic actions that appear in the context menu when text is selected.
+ * Implements DumbAware to ensure the action works during indexing, and ActionUpdateThreadAware
+ * to specify which thread should handle action updates.
+ */
+class RightClickChatActionGroup : DefaultActionGroup(), DumbAware, ActionUpdateThreadAware {
+
+    /**
+     * Provider that supplies the actual code actions to be displayed in the menu.
+     */
+    private val codeActionProvider = CodeActionProvider()
+
+    /**
+     * Updates the action group based on the current context.
+     * This method is called each time the menu needs to be displayed.
+     *
+     * @param e The action event containing context information
+     */
+    override fun update(e: AnActionEvent) {
+        removeAll()
+
+        // Check if there is an editor and selected text
+        val editor = e.getData(CommonDataKeys.EDITOR)
+        val hasSelection = editor?.selectionModel?.hasSelection() == true
+
+        if (hasSelection) {
+            loadDynamicActions(e)
+        }
+
+        // Set the visibility of the action group
+        e.presentation.isVisible = hasSelection
+    }
+
+    /**
+     * Loads dynamic actions into this action group based on the current context.
+     *
+     * @param e The action event containing context information
+     */
+    private fun loadDynamicActions(e: AnActionEvent) {
+        // Use actions provided by CodeActionProvider
+        val actions = codeActionProvider.provideCodeActions(e)
+        actions.forEach { action ->
+            add(action)
+        }
+    }
+
+    /**
+     * Specifies which thread should be used for updating this action.
+     * EDT (Event Dispatch Thread) is used for UI-related operations.
+     *
+     * @return The thread to use for action updates
+     */
+    override fun getActionUpdateThread(): ActionUpdateThread {
+        return ActionUpdateThread.EDT
+    }
+}
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actions/VSCodeCommandActions.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actions/VSCodeCommandActions.kt
new file mode 100644
index 000000000..c94089512
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actions/VSCodeCommandActions.kt
@@ -0,0 +1,176 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.actions
+
+import com.intellij.openapi.actionSystem.AnAction
+import com.intellij.openapi.actionSystem.AnActionEvent
+import com.intellij.openapi.diagnostic.Logger
+import com.intellij.openapi.project.Project
+import ai.kilocode.jetbrains.core.PluginContext
+import ai.kilocode.jetbrains.core.ServiceProxyRegistry
+/**
+ * Executes a VSCode command with the given command ID.
+ * This function uses the RPC protocol to communicate with the extension host.
+ *
+ * @param commandId The identifier of the command to execute
+ * @param project The current project context
+ */
+fun executeCommand(commandId: String, project: Project?) {
+    val proxy =
+        project?.getService(PluginContext::class.java)?.getRPCProtocol()?.getProxy(ServiceProxyRegistry.ExtHostContext.ExtHostCommands)
+    proxy?.executeContributedCommand(commandId, emptyList())
+}
+
+/**
+ * Action that handles clicks on the Plus button in the UI.
+ * Executes the corresponding VSCode command when triggered.
+ */
+class PlusButtonClickAction : AnAction() {
+    private val logger: Logger = Logger.getInstance(PlusButtonClickAction::class.java)
+    private val commandId: String = "kilo-code.plusButtonClicked"
+
+    /**
+     * Performs the action when the Plus button is clicked.
+     *
+     * @param e The action event containing context information
+     */
+    override fun actionPerformed(e: AnActionEvent) {
+        logger.info("Plus button clicked")
+        executeCommand(commandId,e.project)
+    }
+}
+
+/**
+ * Action that handles clicks on the Prompts button in the UI.
+ * Executes the corresponding VSCode command when triggered.
+ */
+class PromptsButtonClickAction : AnAction() {
+    private val logger: Logger = Logger.getInstance(PromptsButtonClickAction::class.java)
+    private val commandId: String = "kilo-code.promptsButtonClicked"
+
+    /**
+     * Performs the action when the Prompts button is clicked.
+     *
+     * @param e The action event containing context information
+     */
+    override fun actionPerformed(e: AnActionEvent) {
+        logger.info("Prompts button clicked")
+        executeCommand(commandId, e.project)
+    }
+}
+
+/**
+ * Action that handles clicks on the MCP button in the UI.
+ * Executes the corresponding VSCode command when triggered.
+ */
+class MCPButtonClickAction : AnAction() {
+    private val logger: Logger = Logger.getInstance(MCPButtonClickAction::class.java)
+    private val commandId: String = "kilo-code.mcpButtonClicked"
+
+    /**
+     * Performs the action when the MCP button is clicked.
+     *
+     * @param e The action event containing context information
+     */
+    override fun actionPerformed(e: AnActionEvent) {
+        logger.info("MCP button clicked")
+        executeCommand(commandId, e.project)
+    }
+}
+
+/**
+ * Action that handles clicks on the History button in the UI.
+ * Executes the corresponding VSCode command when triggered.
+ */
+class HistoryButtonClickAction : AnAction() {
+    private val logger: Logger = Logger.getInstance(HistoryButtonClickAction::class.java)
+    private val commandId: String = "kilo-code.historyButtonClicked"
+
+    /**
+     * Performs the action when the History button is clicked.
+     *
+     * @param e The action event containing context information
+     */
+    override fun actionPerformed(e: AnActionEvent) {
+        logger.info("History button clicked")
+        executeCommand(commandId, e.project)
+    }
+}
+
+class ProfileButtonClickAction : AnAction() {
+    private val logger: Logger = Logger.getInstance(ProfileButtonClickAction::class.java)
+    private val commandId: String = "kilo-code.profileButtonClicked"
+    /**
+     * Performs the action when the Profile button is clicked.
+     *
+     * @param e The action event containing context information
+     */
+    override fun actionPerformed(e: AnActionEvent) {
+        logger.info("Profile button clicked")
+        executeCommand(commandId, e.project)
+    }
+}
+
+/**
+ * Action that handles clicks on the Settings button in the UI.
+ * Executes the corresponding VSCode command when triggered.
+ */
+class SettingsButtonClickAction : AnAction() {
+    private val logger: Logger = Logger.getInstance(SettingsButtonClickAction::class.java)
+    private val commandId: String = "kilo-code.settingsButtonClicked"
+
+    /**
+     * Performs the action when the Settings button is clicked.
+     *
+     * @param e The action event containing context information
+     */
+    override fun actionPerformed(e: AnActionEvent) {
+        logger.info("Settings button clicked")
+        executeCommand(commandId, e.project)
+    }
+}
+
+/**
+ * Action that handles clicks on the Marketplace button in the UI.
+ * Executes the corresponding VSCode command when triggered.
+ */
+class MarketplaceButtonClickAction : AnAction() {
+    private val logger: Logger = Logger.getInstance(MarketplaceButtonClickAction::class.java)
+    private val commandId: String = "kilo-code.marketplaceButtonClicked"
+
+    /**
+     * Performs the action when the Marketplace button is clicked.
+     *
+     * @param e The action event containing context information
+     */
+    override fun actionPerformed(e: AnActionEvent) {
+        logger.info("Marketplace button clicked")
+        executeCommand(commandId, e.project)
+    }
+}
+
+/**
+ * Action that opens developer tools for the WebView.
+ * Takes a function that provides the current WebView instance.
+ *
+ * @property getWebViewInstance Function that returns the current WebView instance or null if not available
+ */
+class OpenDevToolsAction(private val getWebViewInstance: () -> ai.kilocode.jetbrains.webview.WebViewInstance?) : AnAction("Open Developer Tools") {
+    private val logger: Logger = Logger.getInstance(OpenDevToolsAction::class.java)
+
+    /**
+     * Performs the action to open developer tools for the WebView.
+     *
+     * @param e The action event containing context information
+     */
+    override fun actionPerformed(e: AnActionEvent) {
+        val webView = getWebViewInstance()
+        if (webView != null) {
+            webView.openDevTools()
+        } else {
+            logger.warn("No WebView instance available, cannot open developer tools")
+        }
+    }
+}
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadBulkEditsShape.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadBulkEditsShape.kt
new file mode 100644
index 000000000..3c53c47d1
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadBulkEditsShape.kt
@@ -0,0 +1,152 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.actors
+
+import com.intellij.openapi.application.ApplicationManager
+import com.intellij.openapi.diagnostic.Logger
+import com.intellij.openapi.project.Project
+import com.intellij.openapi.vfs.LocalFileSystem
+import ai.kilocode.jetbrains.editor.EditorAndDocManager
+import ai.kilocode.jetbrains.editor.EditorHolder
+import ai.kilocode.jetbrains.editor.WorkspaceEdit
+import ai.kilocode.jetbrains.ipc.proxy.SerializableObjectWithBuffers
+import kotlinx.coroutines.delay
+import java.io.File
+import java.nio.file.Files
+/**
+ * Interface for handling bulk edits in the main thread.
+ * Provides functionality to apply workspace edits that may include multiple file and text changes.
+ */
+interface MainThreadBulkEditsShape {
+    /**
+     * Attempts to apply a workspace edit.
+     *
+     * @param workspaceEditDto The workspace edit data transfer object
+     * @param undoRedoGroupId Optional ID for grouping undo/redo operations
+     * @param respectAutoSaveConfig Whether to respect auto-save configuration
+     * @return True if all edits were applied successfully, false otherwise
+     */
+    suspend fun tryApplyWorkspaceEdit(workspaceEditDto: SerializableObjectWithBuffers<Any>, undoRedoGroupId: Int?, respectAutoSaveConfig: Boolean?): Boolean
+}
+
+/**
+ * Implementation of MainThreadBulkEditsShape that handles bulk edits in the main thread.
+ * Processes workspace edits including file operations (create, delete, rename) and text edits.
+ *
+ * @property project The current project context
+ */
+class MainThreadBulkEdits(val project: Project) : MainThreadBulkEditsShape {
+    val logger = Logger.getInstance(MainThreadBulkEditsShape::class.java)
+    
+    /**
+     * Attempts to apply a workspace edit by processing file operations and text edits.
+     *
+     * @param workspaceEditDto The workspace edit data transfer object
+     * @param undoRedoGroupId Optional ID for grouping undo/redo operations
+     * @param respectAutoSaveConfig Whether to respect auto-save configuration
+     * @return True if all edits were applied successfully, false otherwise
+     */
+    override suspend fun tryApplyWorkspaceEdit(workspaceEditDto: SerializableObjectWithBuffers<Any>, undoRedoGroupId: Int?, respectAutoSaveConfig: Boolean?): Boolean {
+        val json = workspaceEditDto.value as String
+        logger.info("[Bulk Edit] Starting process: $json")
+        val cto = WorkspaceEdit.from(json)
+        var allSuccess = true
+        
+        // Process file edits - using background thread to avoid EDT violations
+        cto.files.forEach { fileEdit ->
+            if (fileEdit.oldResource != null && fileEdit.newResource != null) {
+                val oldResource = File(fileEdit.oldResource.path)
+                val newResource = File(fileEdit.newResource.path)
+                try {
+                    Files.move(oldResource.toPath(), newResource.toPath())
+                    // Move VFS refresh operations to background thread
+                    ApplicationManager.getApplication().executeOnPooledThread {
+                        val vfs = LocalFileSystem.getInstance()
+                        vfs.refreshIoFiles(listOf(oldResource, newResource))
+                    }
+                    logger.info("[Bulk Edit] Renamed file: ${oldResource.path} -> ${newResource.path}")
+                } catch (e: Exception) {
+                    logger.error("[Bulk Edit] Failed to rename file: ${oldResource.path} -> ${newResource.path}", e)
+                    allSuccess = false
+                }
+            } else if (fileEdit.oldResource != null) {
+                val oldResource = File(fileEdit.oldResource.path)
+                try {
+                    oldResource.delete()
+                    // Move VFS refresh operations to background thread
+                    ApplicationManager.getApplication().executeOnPooledThread {
+                        val vfs = LocalFileSystem.getInstance()
+                        vfs.refreshIoFiles(listOf(oldResource.parentFile))
+                    }
+                    logger.info("[Bulk Edit] Deleted file: ${oldResource.path}")
+                } catch (e: Exception) {
+                    logger.error("[Bulk Edit] Failed to delete file: ${oldResource.path}", e)
+                    allSuccess = false
+                }
+            } else if (fileEdit.newResource != null) {
+                val newResource = File(fileEdit.newResource.path)
+                try {
+                    val parentDir = newResource.parentFile
+                    if (!parentDir.exists()) {
+                        parentDir.mkdirs()
+                    }
+                    if (fileEdit.options?.contents != null) {
+                        Files.write(newResource.toPath(), fileEdit.options!!.contents!!.toByteArray(Charsets.UTF_8))
+                    } else {
+                        newResource.createNewFile()
+                    }
+                    // Move VFS refresh operations to background thread
+                    ApplicationManager.getApplication().executeOnPooledThread {
+                        val vfs = LocalFileSystem.getInstance()
+                        vfs.refreshIoFiles(listOf(newResource))
+                    }
+                    logger.info("[Bulk Edit] Created file: ${newResource.path}")
+                } catch (e: Exception) {
+                    logger.error("[Bulk Edit] Failed to create file: ${newResource.path}", e)
+                    allSuccess = false
+                }
+            }
+        }
+        // Process text edits
+        cto.texts.forEach { textEdit ->
+            logger.info("[Bulk Edit] Processing text edit: ${textEdit.resource.path}")
+            if (textEdit.resource.scheme != "file") {
+                logger.error("[Bulk Edit] Non-file resources not supported: ${textEdit.resource.path}")
+                allSuccess = false
+                return@forEach
+            }
+            
+            var handle:EditorHolder? = null;
+            try {
+                handle = project.getService(EditorAndDocManager::class.java).getEditorHandleByUri(textEdit.resource,true)
+                if (handle == null) {
+                    handle = project.getService(EditorAndDocManager::class.java).sync2ExtHost(textEdit.resource,true)
+                }
+            } catch (e: Exception) {
+                logger.info("[Bulk Edit] Failed to get editor handle: ${textEdit.resource.path}", e)
+            }
+
+            if (handle == null) {
+                logger.info("[Bulk Edit] Editor handle not found: ${textEdit.resource.path}")
+                allSuccess = false
+                return@forEach
+            }
+
+            try {
+                val result = handle.applyEdit(textEdit)
+                if (!result) {
+                    logger.info("[Bulk Edit] Failed to apply edit: ${textEdit.resource.path}")
+                    allSuccess = false
+                } else {
+                    logger.info("[Bulk Edit] Successfully updated file: ${textEdit.resource.path}")
+                }
+            } catch (e: Exception) {
+                logger.error("[Bulk Edit] Exception applying edit: ${textEdit.resource.path}", e)
+                allSuccess = false
+            }
+        }
+        return allSuccess
+    }
+}
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadClipboardShape.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadClipboardShape.kt
new file mode 100644
index 000000000..858e5a5c9
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadClipboardShape.kt
@@ -0,0 +1,83 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.actors
+
+import com.intellij.openapi.Disposable
+import com.intellij.openapi.diagnostic.Logger
+import java.awt.Toolkit
+import java.awt.datatransfer.DataFlavor
+import java.awt.datatransfer.StringSelection
+
+/**
+ * Main thread clipboard interface.
+ * Corresponds to the MainThreadClipboardShape interface in VSCode.
+ */
+interface MainThreadClipboardShape : Disposable {
+    /**
+     * Reads text from the clipboard.
+     * @return The string from the clipboard, or null if no text is available
+     */
+    fun readText(): String?
+
+    /**
+     * Writes text to the clipboard.
+     * @param value The string to write to the clipboard
+     */
+    fun writeText(value: String?)
+}
+
+/**
+ * Implementation of the MainThreadClipboardShape interface.
+ * Provides functionality to read from and write to the system clipboard.
+ */
+class MainThreadClipboard : MainThreadClipboardShape {
+    private val logger = Logger.getInstance(MainThreadClipboardShape::class.java)
+
+    /**
+     * Reads text from the system clipboard.
+     *
+     * @return The string from the clipboard, or null if no text is available or an error occurs
+     */
+    override fun readText(): String? {
+        logger.info("Reading clipboard text")
+        return try {
+            val clipboard = Toolkit.getDefaultToolkit().systemClipboard
+            val data = clipboard.getContents(null)
+            if (data != null && data.isDataFlavorSupported(DataFlavor.stringFlavor)) {
+                data.getTransferData(DataFlavor.stringFlavor) as? String
+            } else {
+                null
+            }
+        } catch (e: Exception) {
+            logger.error("Failed to read clipboard", e)
+            null
+        }
+    }
+
+    /**
+     * Writes text to the system clipboard.
+     *
+     * @param value The string to write to the clipboard
+     */
+    override fun writeText(value: String?) {
+        value?.let {
+            logger.info("Writing clipboard text: $value")
+            try {
+                val clipboard = Toolkit.getDefaultToolkit().systemClipboard
+                val selection = StringSelection(value)
+                clipboard.setContents(selection, selection)
+            } catch (e: Exception) {
+                logger.error("Failed to write to clipboard", e)
+            }
+        }
+    }
+
+    /**
+     * Releases resources used by this clipboard handler.
+     */
+    override fun dispose() {
+        logger.info("Releasing resources: MainThreadClipboard")
+    }
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadCommandsShape.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadCommandsShape.kt
new file mode 100644
index 000000000..ce0fe4a66
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadCommandsShape.kt
@@ -0,0 +1,153 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.actors
+
+import com.intellij.openapi.Disposable
+import com.intellij.openapi.diagnostic.Logger
+import com.intellij.openapi.project.Project
+import ai.kilocode.jetbrains.commands.CommandRegistry
+import ai.kilocode.jetbrains.commands.ICommand
+import ai.kilocode.jetbrains.editor.registerOpenEditorAPICommands
+import ai.kilocode.jetbrains.terminal.registerTerminalAPICommands
+import ai.kilocode.jetbrains.util.doInvokeMethod
+import kotlin.reflect.full.functions
+
+/**
+ * Main thread commands interface.
+ * Corresponds to the MainThreadCommandsShape interface in VSCode.
+ */
+interface MainThreadCommandsShape : Disposable {
+    /**
+     * Registers a command.
+     * @param id The command identifier
+     */
+    fun registerCommand(id: String)
+    
+    /**
+     * Unregisters a command.
+     * @param id The command identifier
+     */
+    fun unregisterCommand(id: String)
+    
+    /**
+     * Fires a command activation event.
+     * @param id The command identifier
+     */
+    fun fireCommandActivationEvent(id: String)
+    
+    /**
+     * Executes a command.
+     * @param id The command identifier
+     * @param args List of arguments for the command
+     * @return The execution result
+     */
+    suspend fun executeCommand(id: String, args: List<Any?>): Any?
+    
+    /**
+     * Gets all registered commands.
+     * @return List of command identifiers
+     */
+    fun getCommands(): List<String>
+}
+
+/**
+ * Implementation of MainThreadCommandsShape that handles command registration and execution.
+ * Manages a registry of commands and provides methods to interact with them.
+ *
+ * @property project The current project context
+ */
+class MainThreadCommands(val project: Project) : MainThreadCommandsShape {
+    private val registry = CommandRegistry(project)
+    private val logger = Logger.getInstance(MainThreadCommandsShape::class.java)
+    
+    /**
+     * Initializes the command registry with default commands.
+     */
+    init {
+        registerOpenEditorAPICommands(project,registry);
+        registerTerminalAPICommands(project,registry);
+        //TODO other commands
+    }
+    /**
+     * Registers a command with the given identifier.
+     *
+     * @param id The command identifier
+     */
+    override fun registerCommand(id: String) {
+        logger.info("Registering command: $id")
+    }
+
+    /**
+     * Unregisters a command with the given identifier.
+     *
+     * @param id The command identifier
+     */
+    override fun unregisterCommand(id: String) {
+        logger.info("Unregistering command: $id")
+    }
+
+    /**
+     * Fires an activation event for the specified command.
+     *
+     * @param id The command identifier
+     */
+    override fun fireCommandActivationEvent(id: String) {
+        logger.info("Firing command activation event: $id")
+    }
+
+    /**
+     * Executes a command with the given identifier and arguments.
+     *
+     * @param id The command identifier
+     * @param args List of arguments for the command
+     * @return The execution result
+     */
+    override suspend fun executeCommand(id: String, args: List<Any?>): Any? {
+        logger.info("Executing command: $id ")
+        registry.getCommand(id)?.let { cmd->
+            runCmd(cmd,args)
+        }?: run {
+            logger.warn("Command not found: $id")
+        }
+        return Unit
+    }
+
+    /**
+     * Gets all registered command identifiers.
+     *
+     * @return List of command identifiers
+     */
+    override fun getCommands(): List<String> {
+        logger.info("Getting all commands")
+        return registry.getCommands().keys.toList()
+    }
+
+    /**
+     * Releases resources used by this command handler.
+     */
+    override fun dispose() {
+        logger.info("Releasing resources: MainThreadCommands")
+    }
+
+    /**
+     * Runs a command with the given arguments.
+     * Finds the appropriate method on the command handler and invokes it.
+     *
+     * @param cmd The command to run
+     * @param args List of arguments for the command
+     */
+    private suspend fun runCmd(cmd: ICommand, args: List<Any?>) {
+        val handler = cmd.handler();
+        val method = try {
+//            handler.javaClass.methods.first { it.name == cmd.getMethod()}
+            handler::class.functions.first{ it.name == cmd.getMethod()}
+        }catch (e: Exception){
+            logger.error("Command method not found: ${cmd.getMethod()}")
+            return
+        }
+        doInvokeMethod(method,args,handler)
+    }
+
+}
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadConfigurationShape.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadConfigurationShape.kt
new file mode 100644
index 000000000..20f556127
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadConfigurationShape.kt
@@ -0,0 +1,366 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.actors
+
+import com.intellij.ide.util.PropertiesComponent
+import com.intellij.openapi.Disposable
+import com.intellij.openapi.diagnostic.Logger
+import com.intellij.openapi.project.Project
+import com.intellij.openapi.project.ProjectManager
+import ai.kilocode.jetbrains.core.PluginContext
+import ai.kilocode.jetbrains.util.URI
+import ai.kilocode.jetbrains.util.URIComponents
+
+/**
+ * Enum for configuration targets.
+ * Corresponds to the ConfigurationTarget enum in VSCode.
+ * Defines the different scopes where configuration can be applied.
+ */
+enum class ConfigurationTarget(val value: Int) {
+    /** Application-level configuration, applies globally to the entire IDE */
+    APPLICATION(1),
+    /** User-level configuration, applies to the current user across all projects */
+    USER(2),
+    /** Local user configuration, specific to the local machine */
+    USER_LOCAL(3),
+    /** Remote user configuration, for remote development scenarios */
+    USER_REMOTE(4),
+    /** Workspace-level configuration, applies to the current project workspace */
+    WORKSPACE(5),
+    /** Workspace folder-level configuration, applies to specific folders within a workspace */
+    WORKSPACE_FOLDER(6),
+    /** Default configuration target when no specific target is provided */
+    DEFAULT(7),
+    /** Memory-only configuration, temporary and not persisted */
+    MEMORY(8);
+    
+    companion object {
+        /**
+         * Creates a ConfigurationTarget from its integer value.
+         * @param value The integer value representing the configuration target
+         * @return The corresponding ConfigurationTarget enum value, or null if not found
+         */
+        fun fromValue(value: Int?): ConfigurationTarget? {
+            return values().find { it.value == value }
+        }
+        
+        /**
+         * Converts a ConfigurationTarget enum to its string representation.
+         * @param target The configuration target to convert
+         * @return The string name of the configuration target
+         */
+        fun toString(target: ConfigurationTarget): String {
+            return when(target) {
+                APPLICATION -> "APPLICATION"
+                USER -> "USER"
+                USER_LOCAL -> "USER_LOCAL"
+                USER_REMOTE -> "USER_REMOTE"
+                WORKSPACE -> "WORKSPACE"
+                WORKSPACE_FOLDER -> "WORKSPACE_FOLDER"
+                DEFAULT -> "DEFAULT"
+                MEMORY -> "MEMORY"
+            }
+        }
+    }
+}
+
+/**
+ * Interface for configuration overrides.
+ * Corresponds to the IConfigurationOverrides interface in VSCode.
+ * Used to provide context-specific configuration overrides.
+ */
+data class ConfigurationOverrides(
+    /** Optional identifier for overriding configuration values, typically used for language-specific settings */
+    val overrideIdentifier: String? = null,
+    /** Optional URI specifying the resource context for the configuration override */
+    val resource: URI? = null
+)
+
+/**
+ * Main thread configuration interface.
+ * Corresponds to the MainThreadConfigurationShape interface in VSCode.
+ * Defines the contract for configuration management operations that can be performed
+ * from the main thread of the IDE.
+ */
+interface MainThreadConfigurationShape : Disposable {
+    /**
+     * Updates a configuration option with the specified parameters.
+     * @param target Configuration target scope (application, user, workspace, etc.)
+     * @param key Configuration key path (e.g., "editor.fontSize")
+     * @param value Configuration value to set, can be null to unset
+     * @param overrides Optional configuration overrides for specific contexts
+     * @param scopeToLanguage Whether to scope this configuration to a specific language
+     */
+    fun updateConfigurationOption(
+        target: Int,
+        key: String,
+        value: Any?,
+        overrides: Map<String, Any>?,
+        scopeToLanguage: Boolean?
+    )
+
+    /**
+     * Removes a configuration option from the specified target scope.
+     * @param target Configuration target scope from which to remove the setting
+     * @param key Configuration key path to remove
+     * @param overrides Optional configuration overrides to consider during removal
+     * @param scopeToLanguage Whether the configuration was scoped to a specific language
+     */
+    fun removeConfigurationOption(
+        target: Int,
+        key: String,
+        overrides: Map<String, Any>?,
+        scopeToLanguage: Boolean?
+    )
+}
+
+/**
+ * Implementation of the main thread configuration interface.
+ * Provides concrete implementation for managing IDE configuration settings
+ * across different scopes and contexts.
+ */
+class MainThreadConfiguration : MainThreadConfigurationShape {
+    private val logger = Logger.getInstance(MainThreadConfiguration::class.java)
+    
+    /**
+     * Updates a configuration option in the specified target scope.
+     * Handles the conversion of parameters and delegates to the appropriate
+     * storage mechanism based on the configuration target.
+     */
+    override fun updateConfigurationOption(
+        target: Int,
+        key: String,
+        value: Any?,
+        overrides: Map<String, Any>?,
+        scopeToLanguage: Boolean?
+    ) {
+        // Convert parameter types from raw values to type-safe objects
+        val configTarget = ConfigurationTarget.fromValue(target)
+        val configOverrides = convertToConfigurationOverrides(overrides)
+        
+        // Log the configuration update for debugging purposes
+        logger.info("Update configuration option: target=${configTarget?.let { ConfigurationTarget.toString(it) }}, key=$key, value=$value, " +
+                   "overrideIdentifier=${configOverrides?.overrideIdentifier}, resource=${configOverrides?.resource}, " +
+                   "scopeToLanguage=$scopeToLanguage")
+        
+        // Build the complete configuration key including overrides and language scoping
+        val fullKey = buildConfigurationKey(key, configOverrides, scopeToLanguage)
+        
+        // Store the configuration value based on the target scope
+        when (configTarget) {
+            ConfigurationTarget.APPLICATION -> {
+                // Application-level configuration applies to all projects and users
+                val properties = PropertiesComponent.getInstance()
+                storeValue(properties, fullKey, value)
+            }
+            ConfigurationTarget.WORKSPACE, ConfigurationTarget.WORKSPACE_FOLDER -> {
+                // Project-level configuration applies to the current project
+                val activeProject = getActiveProject()
+                if (activeProject != null) {
+                    val properties = PropertiesComponent.getInstance(activeProject)
+                    storeValue(properties, fullKey, value)
+                } else {
+                    logger.warn("Failed to save project-level configuration, no active project found")
+                }
+            }
+            ConfigurationTarget.USER, ConfigurationTarget.USER_LOCAL -> {
+                // User-level configuration applies to the current user across projects
+                val properties = PropertiesComponent.getInstance()
+                val userPrefixedKey = "user.$fullKey"
+                storeValue(properties, userPrefixedKey, value)
+            }
+            else -> {
+                // Memory-level configuration is temporary and not persisted
+                val properties = PropertiesComponent.getInstance()
+                val memoryPrefixedKey = "memory.$fullKey"
+                storeValue(properties, memoryPrefixedKey, value)
+            }
+        }
+    }
+    
+    /**
+     * Removes a configuration option from the specified target scope.
+     * Handles the conversion of parameters and delegates to the appropriate
+     * removal mechanism based on the configuration target.
+     */
+    override fun removeConfigurationOption(
+        target: Int,
+        key: String,
+        overrides: Map<String, Any>?,
+        scopeToLanguage: Boolean?
+    ) {
+        // Convert parameter types from raw values to type-safe objects
+        val configTarget = ConfigurationTarget.fromValue(target)
+        val configOverrides = convertToConfigurationOverrides(overrides)
+        
+        // Log the configuration removal for debugging purposes
+        logger.info("Remove configuration option: target=${configTarget?.let { ConfigurationTarget.toString(it) }}, key=$key, " +
+                   "overrideIdentifier=${configOverrides?.overrideIdentifier}, resource=${configOverrides?.resource}, " +
+                   "scopeToLanguage=$scopeToLanguage")
+        
+        // Build the complete configuration key including overrides and language scoping
+        val fullKey = buildConfigurationKey(key, configOverrides, scopeToLanguage)
+        
+        // Remove the configuration value based on the target scope
+        when (configTarget) {
+            ConfigurationTarget.APPLICATION -> {
+                // Remove application-level configuration
+                val properties = PropertiesComponent.getInstance()
+                properties.unsetValue(fullKey)
+            }
+            ConfigurationTarget.WORKSPACE, ConfigurationTarget.WORKSPACE_FOLDER -> {
+                // Remove project-level configuration
+                val activeProject = getActiveProject()
+                if (activeProject != null) {
+                    val properties = PropertiesComponent.getInstance(activeProject)
+                    properties.unsetValue(fullKey)
+                } else {
+                    logger.warn("Failed to remove project-level configuration, no active project found")
+                }
+            }
+            ConfigurationTarget.USER, ConfigurationTarget.USER_LOCAL -> {
+                // Remove user-level configuration
+                val properties = PropertiesComponent.getInstance()
+                val userPrefixedKey = "user.$fullKey"
+                properties.unsetValue(userPrefixedKey)
+            }
+            else -> {
+                // Remove memory-level configuration
+                val properties = PropertiesComponent.getInstance()
+                val memoryPrefixedKey = "memory.$fullKey"
+                properties.unsetValue(memoryPrefixedKey)
+            }
+        }
+    }
+    
+    /**
+     * Converts a Map<String, Any> to a ConfigurationOverrides object.
+     * Handles the parsing of URI strings and map structures into proper URI objects.
+     * @param overridesMap The overrides map containing configuration override data
+     * @return The configuration overrides object, or null if conversion fails
+     */
+    @Suppress("UNCHECKED_CAST")
+    private fun convertToConfigurationOverrides(overridesMap: Map<String, Any>?): ConfigurationOverrides? {
+        if (overridesMap.isNullOrEmpty()) {
+            return null
+        }
+        
+        try {
+            val overrideIdentifier = overridesMap["overrideIdentifier"] as? String
+            val resourceUri = when (val uriObj = overridesMap["resource"]) {
+                is Map<*, *> -> {
+                    // Extract URI components from the map structure
+                    val scheme = uriObj["scheme"] as? String ?: ""
+                    val path = uriObj["path"] as? String ?: ""
+                    val authority = uriObj["authority"] as? String ?: ""
+                    val query = uriObj["query"] as? String ?: ""
+                    val fragment = uriObj["fragment"] as? String ?: ""
+                    
+                    if (path.isNotEmpty()) {
+                        // Create URI instance using URI.from static method
+                        val uriComponents = object : URIComponents {
+                            override val scheme: String = scheme
+                            override val authority: String = authority
+                            override val path: String = path
+                            override val query: String = query
+                            override val fragment: String = fragment
+                        }
+                        URI.from(uriComponents)
+                    } else {
+                        null
+                    }
+                }
+                is String -> {
+                    try {
+                        // Parse URI string using URI.parse static method
+                        URI.parse(uriObj)
+                    } catch (e: Exception) {
+                        logger.warn("Failed to parse URI string: $uriObj", e)
+                        null
+                    }
+                }
+                else -> null
+            }
+            
+            return ConfigurationOverrides(overrideIdentifier, resourceUri)
+        } catch (e: Exception) {
+            logger.error("Failed to convert configuration overrides: $overridesMap", e)
+            return null
+        }
+    }
+    
+    /**
+     * Builds a complete configuration key based on base key, overrides, and language scoping.
+     * Constructs a unique key that incorporates override identifiers and resource contexts.
+     * @param baseKey The base configuration key
+     * @param overrides Optional configuration overrides to include in the key
+     * @param scopeToLanguage Whether to scope the configuration to a specific language
+     * @return The complete configuration key string
+     */
+    private fun buildConfigurationKey(baseKey: String, overrides: ConfigurationOverrides?, scopeToLanguage: Boolean?): String {
+        val keyBuilder = StringBuilder(baseKey)
+        
+        // Add override identifier if language scoping is enabled
+        overrides?.let {
+            it.overrideIdentifier?.let { identifier ->
+                if (scopeToLanguage == true) {
+                    keyBuilder.append(".").append(identifier)
+                }
+            }
+            
+            // Add resource identifier if URI is provided
+            it.resource?.let { uri ->
+                keyBuilder.append("@").append(uri.toString().hashCode())
+            }
+        }
+        
+        return keyBuilder.toString()
+    }
+    
+    /**
+     * Retrieves the currently active project in the IDE.
+     * @return The active project instance, or null if no project is currently open
+     */
+    private fun getActiveProject(): Project? {
+        val openProjects = ProjectManager.getInstance().openProjects
+        return openProjects.firstOrNull { it.isInitialized && !it.isDisposed }
+    }
+    
+    /**
+     * Stores a configuration value in the properties component based on its type.
+     * Handles type-specific storage for common data types and falls back to string
+     * representation for complex objects.
+     * @param properties The properties component to store the value in
+     * @param key The configuration key
+     * @param value The configuration value to store
+     */
+    private fun storeValue(properties: PropertiesComponent, key: String, value: Any?) {
+        when (value) {
+            null -> properties.unsetValue(key)
+            is String -> properties.setValue(key, value)
+            is Boolean -> properties.setValue(key, value)
+            is Int -> properties.setValue(key, value, 0)
+            is Float -> properties.setValue(key, value.toString())
+            is Double -> properties.setValue(key, value.toString())
+            is Long -> properties.setValue(key, value.toString())
+            else -> {
+                // Convert complex objects to JSON string for storage
+                try {
+                    properties.setValue(key, value.toString())
+                } catch (e: Exception) {
+                    logger.error("Failed to serialize configuration value, type: ${value.javaClass.name}", e)
+                }
+            }
+        }
+    }
+    
+    /**
+     * Disposes of resources when the configuration manager is no longer needed.
+     * Called when the plugin or component is being unloaded.
+     */
+    override fun dispose() {
+        logger.info("Releasing resources: MainThreadConfiguration")
+    }
+}
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadConsoleShape.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadConsoleShape.kt
new file mode 100644
index 000000000..753b6f953
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadConsoleShape.kt
@@ -0,0 +1,78 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.actors
+
+import com.intellij.openapi.Disposable
+import com.intellij.openapi.diagnostic.Logger
+
+/**
+ * Remote console log.
+ * Corresponds to the IRemoteConsoleLog interface in TypeScript.
+ */
+data class RemoteConsoleLog(
+    val type: String,        // Log type: "log", "warn", "error", "info", "debug"
+    val severity: Int,       // Severity level
+    val args: List<Any?>,    // Log arguments
+    val source: String? = null, // Log source
+    val line: Int? = null,      // Source line number
+    val columnNumber: Int? = null, // Column number
+    val timestamp: Long = System.currentTimeMillis() // Timestamp
+)
+
+/**
+ * Main thread console service interface.
+ * Corresponds to the MainThreadConsoleShape interface in VSCode.
+ */
+interface MainThreadConsoleShape : Disposable {
+    /**
+     * Logs extension host message.
+     * @param msg Log message object
+     */
+    fun logExtensionHostMessage(msg: Map<String, Any>)
+    
+    /**
+     * Releases resources.
+     */
+    override fun dispose()
+}
+
+class MainThreadConsole : MainThreadConsoleShape {
+    private val logger = Logger.getInstance(MainThreadConsole::class.java)
+
+    /**
+     * Logs extension host message.
+     * @param msg Log message object
+     */
+    override fun logExtensionHostMessage(msg: Map<String, Any>) {
+        val type = msg["type"]
+        val severity = msg["severity"]
+        val arguments = msg["arguments"]?.let { args ->
+            if (args is List<*>) {
+                args.joinToString(", ") { it.toString() }
+            } else {
+                args.toString()
+            }
+        } ?: return
+
+        try {
+            when (severity) {
+//                "log", "info" -> logger.info("[Extension Host] $arguments")
+                "warn" -> logger.warn("[Extension Host] $arguments")
+                "error" -> logger.warn("[Extension Host] ERROR: $arguments")
+//                "debug" -> logger.debug("[Extension Host] $arguments")
+//                else -> logger.info("[Extension Host] $arguments")
+            }
+        } catch (e: Exception) {
+            logger.error("Failed to process extension host log message", e)
+        }
+    }
+
+    /**
+     * Releases resources.
+     */
+    override fun dispose() {
+        logger.info("Disposing MainThreadConsole")
+    }
+}
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadDebugServiceShape.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadDebugServiceShape.kt
new file mode 100644
index 000000000..8d4dc7a49
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadDebugServiceShape.kt
@@ -0,0 +1,305 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.actors
+
+import com.intellij.openapi.Disposable
+import com.intellij.openapi.diagnostic.Logger
+import java.net.URI
+
+/**
+ * Main thread debug service interface.
+ * This interface defines the contract for debug services that operate on the main thread,
+ * providing methods for managing debug sessions, breakpoints, and debug adapter communication.
+ */
+interface MainThreadDebugServiceShape : Disposable {
+    /**
+     * Registers debug types that this service can handle.
+     * @param debugTypes List of debug type identifiers (e.g., "java", "python", "node")
+     */
+    fun registerDebugTypes(debugTypes: List<String>)
+    
+    /**
+     * Notifies that a debug session has been cached/stored for later use.
+     * @param sessionID Unique identifier for the debug session
+     */
+    fun sessionCached(sessionID: String)
+    
+    /**
+     * Accepts and processes a message from the debug adapter.
+     * @param handle Unique handle identifying the debug adapter connection
+     * @param message The protocol message received from the debug adapter
+     */
+    fun acceptDAMessage(handle: Int, message: Any)
+    
+    /**
+     * Accepts and processes an error reported by the debug adapter.
+     * @param handle Unique handle identifying the debug adapter connection
+     * @param name The error name/type
+     * @param message Human-readable error message
+     * @param stack Optional stack trace for the error
+     */
+    fun acceptDAError(handle: Int, name: String, message: String, stack: String?)
+    
+    /**
+     * Accepts notification that the debug adapter has exited.
+     * @param handle Unique handle identifying the debug adapter connection
+     * @param code Optional exit code (null if terminated by signal)
+     * @param signal Optional signal name that caused termination (null if exited normally)
+     */
+    fun acceptDAExit(handle: Int, code: Int?, signal: String?)
+    
+    /**
+     * Registers a debug configuration provider for a specific debug type.
+     * @param type The debug type this provider handles
+     * @param triggerKind When this provider should be triggered (1=initial, 2=dynamic)
+     * @param hasProvideMethod Whether this provider has a provideDebugConfigurations method
+     * @param hasResolveMethod Whether this provider has a resolveDebugConfiguration method
+     * @param hasResolve2Method Whether this provider has a resolveDebugConfigurationWithSubstitutedVariables method
+     * @param handle Unique handle for this provider registration
+     * @return Registration result (typically Unit or success indicator)
+     */
+    fun registerDebugConfigurationProvider(
+        type: String,
+        triggerKind: Int,
+        hasProvideMethod: Boolean,
+        hasResolveMethod: Boolean,
+        hasResolve2Method: Boolean,
+        handle: Int
+    ): Any
+    
+    /**
+     * Registers a debug adapter descriptor factory for a specific debug type.
+     * @param type The debug type this factory creates adapters for
+     * @param handle Unique handle for this factory registration
+     * @return Registration result (typically Unit or success indicator)
+     */
+    fun registerDebugAdapterDescriptorFactory(type: String, handle: Int): Any
+    
+    /**
+     * Unregisters a debug configuration provider.
+     * @param handle The handle of the provider to unregister
+     */
+    fun unregisterDebugConfigurationProvider(handle: Int)
+    
+    /**
+     * Unregisters a debug adapter descriptor factory.
+     * @param handle The handle of the factory to unregister
+     */
+    fun unregisterDebugAdapterDescriptorFactory(handle: Int)
+    
+    /**
+     * Starts a new debugging session.
+     * @param folder Optional workspace folder URI for the debug session
+     * @param nameOrConfig Either the name of a predefined configuration or the configuration object itself
+     * @param options Launch options for the debug session
+     * @return Success indicator (true if debugging started successfully)
+     */
+    fun startDebugging(folder: URI?, nameOrConfig: Any, options: Any): Any
+    
+    /**
+     * Stops an active debugging session.
+     * @param sessionId Optional session ID to stop (null stops all sessions)
+     * @return Operation result (typically Unit)
+     */
+    fun stopDebugging(sessionId: String?): Any
+    
+    /**
+     * Sets a custom name for a debug session.
+     * @param id The session ID to name
+     * @param name The display name for the session
+     */
+    fun setDebugSessionName(id: String, name: String)
+    
+    /**
+     * Sends a custom request to the debug adapter.
+     * @param id The session ID to send the request to
+     * @param command The debug adapter protocol command
+     * @param args Arguments for the command
+     * @return The response from the debug adapter
+     */
+    fun customDebugAdapterRequest(id: String, command: String, args: Any): Any
+    
+    /**
+     * Retrieves information about a specific breakpoint from the debug protocol.
+     * @param id The session ID
+     * @param breakpoinId The breakpoint ID to query
+     * @return Breakpoint information or null if not found
+     */
+    fun getDebugProtocolBreakpoint(id: String, breakpoinId: String): Any?
+    
+    /**
+     * Appends text to the debug console output.
+     * @param value The text to append to the console
+     */
+    fun appendDebugConsole(value: String)
+    
+    /**
+     * Registers new breakpoints with the debug service.
+     * @param breakpoints List of breakpoint objects to register
+     * @return Registration result (typically Unit or success indicator)
+     */
+    fun registerBreakpoints(breakpoints: List<Any>): Any
+    
+    /**
+     * Unregisters existing breakpoints.
+     * @param breakpointIds List of regular breakpoint IDs to remove
+     * @param functionBreakpointIds List of function breakpoint IDs to remove
+     * @param dataBreakpointIds List of data breakpoint IDs to remove
+     * @return Unregistration result (typically Unit)
+     */
+    fun unregisterBreakpoints(
+        breakpointIds: List<String>,
+        functionBreakpointIds: List<String>,
+        dataBreakpointIds: List<String>
+    ): Any
+    
+    /**
+     * Registers a debug visualizer extension.
+     * @param extensionId The ID of the extension providing the visualizer
+     * @param id The unique ID of the visualizer within the extension
+     */
+    fun registerDebugVisualizer(extensionId: String, id: String)
+    
+    /**
+     * Unregisters a debug visualizer extension.
+     * @param extensionId The ID of the extension providing the visualizer
+     * @param id The unique ID of the visualizer within the extension
+     */
+    fun unregisterDebugVisualizer(extensionId: String, id: String)
+    
+    /**
+     * Registers a debug visualizer tree structure.
+     * @param treeId Unique identifier for the tree
+     * @param canEdit Whether the tree structure can be edited by users
+     */
+    fun registerDebugVisualizerTree(treeId: String, canEdit: Boolean)
+    
+    /**
+     * Unregisters a debug visualizer tree structure.
+     * @param treeId Unique identifier for the tree to unregister
+     */
+    fun unregisterDebugVisualizerTree(treeId: String)
+}
+
+/**
+ * Main thread debug service implementation.
+ * This class provides the concrete implementation of the MainThreadDebugServiceShape interface,
+ * handling debug session management, breakpoint operations, and debug adapter communication.
+ * All operations are logged for debugging purposes.
+ */
+class MainThreadDebugService : MainThreadDebugServiceShape {
+    private val logger = Logger.getInstance(MainThreadDebugService::class.java)
+
+    override fun registerDebugTypes(debugTypes: List<String>) {
+        logger.info("Registering debug types: $debugTypes")
+    }
+    
+    override fun sessionCached(sessionID: String) {
+        logger.info("Session cached: $sessionID")
+    }
+    
+    override fun acceptDAMessage(handle: Int, message: Any) {
+        logger.info("Received debug adapter message: handle=$handle, message=$message")
+    }
+    
+    override fun acceptDAError(handle: Int, name: String, message: String, stack: String?) {
+        logger.info("Received debug adapter error: handle=$handle, name=$name, message=$message, stack=$stack")
+    }
+    
+    override fun acceptDAExit(handle: Int, code: Int?, signal: String?) {
+        logger.info("Received debug adapter exit: handle=$handle, code=$code, signal=$signal")
+    }
+    
+    override fun registerDebugConfigurationProvider(
+        type: String,
+        triggerKind: Int,
+        hasProvideMethod: Boolean,
+        hasResolveMethod: Boolean,
+        hasResolve2Method: Boolean,
+        handle: Int
+    ): Any {
+        logger.info("Registering debug configuration provider: type=$type, triggerKind=$triggerKind, " +
+                "hasProvideMethod=$hasProvideMethod, hasResolveMethod=$hasResolveMethod, " +
+                "hasResolve2Method=$hasResolve2Method, handle=$handle")
+        return Unit
+    }
+    
+    override fun registerDebugAdapterDescriptorFactory(type: String, handle: Int): Any {
+        logger.info("Registering debug adapter descriptor factory: type=$type, handle=$handle")
+        return Unit
+    }
+    
+    override fun unregisterDebugConfigurationProvider(handle: Int) {
+        logger.info("Unregistering debug configuration provider: handle=$handle")
+    }
+    
+    override fun unregisterDebugAdapterDescriptorFactory(handle: Int) {
+        logger.info("Unregistering debug adapter descriptor factory: handle=$handle")
+    }
+    
+    override fun startDebugging(folder: URI?, nameOrConfig: Any, options: Any): Any {
+        logger.info("Starting debugging: folder=$folder, nameOrConfig=$nameOrConfig, options=$options")
+        return true
+    }
+    
+    override fun stopDebugging(sessionId: String?): Any {
+        logger.info("Stopping debugging: sessionId=$sessionId")
+        return Unit
+    }
+    
+    override fun setDebugSessionName(id: String, name: String) {
+        logger.info("Setting debug session name: id=$id, name=$name")
+    }
+    
+    override fun customDebugAdapterRequest(id: String, command: String, args: Any): Any {
+        logger.info("Custom debug adapter request: id=$id, command=$command, args=$args")
+        return Unit
+    }
+    
+    override fun getDebugProtocolBreakpoint(id: String, breakpoinId: String): Any? {
+        logger.info("Getting debug protocol breakpoint: id=$id, breakpoinId=$breakpoinId")
+        return Unit
+    }
+    
+    override fun appendDebugConsole(value: String) {
+        logger.info("Appending to debug console: $value")
+    }
+    
+    override fun registerBreakpoints(breakpoints: List<Any>): Any {
+        logger.info("Registering breakpoints: ${breakpoints.size} total")
+        return Unit
+    }
+    
+    override fun unregisterBreakpoints(
+        breakpointIds: List<String>,
+        functionBreakpointIds: List<String>,
+        dataBreakpointIds: List<String>
+    ): Any {
+        logger.info("Unregistering breakpoints: ${breakpointIds.size} regular, " +
+                "${functionBreakpointIds.size} function, " +
+                "${dataBreakpointIds.size} data breakpoints")
+        return Unit
+    }
+    
+    override fun registerDebugVisualizer(extensionId: String, id: String) {
+        logger.info("Registering debug visualizer: extensionId=$extensionId, id=$id")
+    }
+    
+    override fun unregisterDebugVisualizer(extensionId: String, id: String) {
+        logger.info("Unregistering debug visualizer: extensionId=$extensionId, id=$id")
+    }
+    
+    override fun registerDebugVisualizerTree(treeId: String, canEdit: Boolean) {
+        logger.info("Registering debug visualizer tree: treeId=$treeId, canEdit=$canEdit")
+    }
+    
+    override fun unregisterDebugVisualizerTree(treeId: String) {
+        logger.info("Unregistering debug visualizer tree: treeId=$treeId")
+    }
+
+    override fun dispose() {
+        logger.info("Disposing MainThreadDebugService")
+    }
+}
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadDiaglogsShape.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadDiaglogsShape.kt
new file mode 100644
index 000000000..4514602e4
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadDiaglogsShape.kt
@@ -0,0 +1,222 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.actors
+
+import com.intellij.openapi.Disposable
+import com.intellij.openapi.diagnostic.Logger
+import com.intellij.openapi.fileChooser.FileChooser
+import com.intellij.openapi.fileChooser.FileChooserDescriptor
+import ai.kilocode.jetbrains.util.URI
+import com.intellij.openapi.application.ApplicationManager
+import com.intellij.openapi.application.ModalityState
+import com.intellij.openapi.fileChooser.FileChooserFactory
+import com.intellij.openapi.fileChooser.FileSaverDescriptor
+import kotlinx.coroutines.suspendCancellableCoroutine
+import java.io.File
+import java.nio.file.Path
+import kotlin.coroutines.resume
+import kotlin.coroutines.resumeWithException
+
+/**
+ * Configuration options for the open file dialog.
+ * This data class encapsulates all the parameters needed to customize the file chooser dialog.
+ *
+ * @property defaultUri The default URI/path to start browsing from
+ * @property openLabel Custom label text for the dialog's open button
+ * @property canSelectFiles Whether files can be selected in the dialog
+ * @property canSelectFolders Whether folders can be selected in the dialog
+ * @property canSelectMany Whether multiple items can be selected simultaneously
+ * @property filters File extension filters for filtering displayed files (format: {"Description": ["ext1", "ext2"]})
+ * @property title Custom title for the dialog window
+ * @property allowUIResources Whether to allow UI resources to be selected
+ */
+data class MainThreadDialogOpenOptions(
+    val defaultUri: Map<String, String?>?,
+    val openLabel: String?,
+    val canSelectFiles: Boolean?,
+    val canSelectFolders: Boolean?,
+    val canSelectMany: Boolean?,
+    val filters: MutableMap<String, MutableList<String>>?,
+    val title: String?,
+    val allowUIResources: Boolean?,
+)
+
+/**
+ * Interface defining the contract for main thread dialog operations.
+ * This interface provides methods for showing file open and save dialogs that must be executed on the main UI thread.
+ */
+interface MainThreadDiaglogsShape : Disposable {
+    /**
+     * Shows an open file dialog and returns the selected file URIs.
+     *
+     * @param options Configuration options for customizing the dialog behavior
+     * @return List of selected file URIs, or null if the dialog was cancelled
+     */
+    suspend fun showOpenDialog(options: Map<String, Any?>?): MutableList<URI>?
+
+    /**
+     * Shows a save file dialog and returns the selected file URI.
+     *
+     * @param options Configuration options for customizing the dialog behavior
+     * @return The selected file URI for saving, or null if the dialog was cancelled
+     */
+    suspend fun showSaveDialog(options: Map<String, Any?>?): URI?
+}
+
+/**
+ * Implementation of MainThreadDiaglogsShape that provides file dialog functionality
+ * executed on the IntelliJ platform's main UI thread.
+ *
+ * This class handles both file open and save dialogs using IntelliJ's file chooser APIs,
+ * ensuring all UI operations are performed on the main thread as required by the platform.
+ */
+class MainThreadDiaglogs : MainThreadDiaglogsShape {
+    private val logger = Logger.getInstance(MainThreadDiaglogs::class.java)
+
+    /**
+     * Shows an open file dialog with the specified options.
+     *
+     * This method creates a file chooser dialog that allows users to select one or more files
+     * based on the provided configuration. The operation is performed on the main UI thread
+     * using IntelliJ's invokeLater mechanism.
+     *
+     * @param map Configuration map containing dialog options
+     * @return Mutable list of selected file URIs, or null if cancelled
+     */
+    override suspend fun showOpenDialog(map: Map<String, Any?>?): MutableList<URI>? {
+        // Convert the configuration map to typed options
+        val options = create(map)
+        
+        // Create file chooser descriptor with default values for unspecified options
+        val descriptor = FileChooserDescriptor(
+            /* chooseFiles = */ true,
+            /* chooseFolders = */ options?.canSelectFolders ?: true,
+            /* chooseJars = */ false,
+            /* chooseJarsAsFiles = */ false,
+            /* chooseMultipleJars = */ false,
+            /* chooseMultiple = */ options?.canSelectMany ?: true
+        )
+            .withTitle(options?.title ?: "Open")
+            .withDescription(options?.openLabel ?: "Select files")
+        
+        // Apply file extension filters if provided
+        options?.filters?.forEach { (name, extensions) ->
+            descriptor.withFileFilter { file ->
+                extensions.any { file.extension?.equals(it, true) ?: false }
+            }
+        }
+
+        // Use coroutine to handle the asynchronous file chooser operation
+        return suspendCancellableCoroutine { continuation ->
+            ApplicationManager.getApplication().invokeLater({
+                try {
+                    // Show the file chooser dialog and get selected files
+                    val files = FileChooser.chooseFiles(descriptor, null, null)
+                    
+                    // Convert IntelliJ VirtualFile objects to URI objects
+                    val result = files.map { file ->
+                        URI.file(file.path)
+                    }.toMutableList()
+                    
+                    // Resume coroutine with the result
+                    continuation.resume(result)
+                } catch (e: Exception) {
+                    // Resume coroutine with exception if an error occurs
+                    continuation.resumeWithException(e)
+                }
+            }, ModalityState.defaultModalityState())
+        }
+    }
+
+    /**
+     * Shows a save file dialog with the specified options.
+     *
+     * This method creates a file saver dialog that allows users to select a location
+     * and filename for saving a file. The operation is performed on the main UI thread.
+     *
+     * @param map Configuration map containing dialog options
+     * @return URI of the selected save location, or null if cancelled
+     */
+    override suspend fun showSaveDialog(map: Map<String, Any?>?): URI? {
+        // Convert the configuration map to typed options
+        val options = create(map)
+        
+        // Create file saver descriptor with custom title and description
+        val descriptor = FileSaverDescriptor("Save", options?.openLabel ?: "Select save location")
+
+        // Apply file extension filters if provided
+        options?.filters?.forEach { (name, extensions) ->
+            descriptor.withFileFilter { file ->
+                extensions.any { file.extension?.equals(it, true) ?: false }
+            }
+        }
+
+        // Extract default path and filename from options
+        val path = options?.defaultUri?.get("path")
+        var fileName: String? = null
+        
+        // Convert the path string to a Path object and extract filename
+        val virtualFile = path?.let { filePath ->
+            val file = File(filePath)
+            fileName = file.name
+            Path.of(file.parentFile.absolutePath)
+        }
+
+        // Use coroutine to handle the asynchronous save dialog operation
+        return suspendCancellableCoroutine { continuation ->
+            ApplicationManager.getApplication().invokeLater({
+                try {
+                    // Show the save file dialog and get the selected file
+                    val file = FileChooserFactory.getInstance()
+                        .createSaveFileDialog(descriptor, null)
+                        .save(virtualFile, fileName)
+                    
+                    // Convert the result to URI format
+                    val result = file?.let { URI.file(it.file.absolutePath) }
+                    
+                    // Resume coroutine with the result
+                    continuation.resume(result)
+                } catch (e: Exception) {
+                    // Resume coroutine with exception if an error occurs
+                    continuation.resumeWithException(e)
+                }
+            }, ModalityState.defaultModalityState())
+        }
+    }
+
+    /**
+     * Creates a MainThreadDialogOpenOptions instance from a configuration map.
+     *
+     * This helper method safely extracts typed values from a generic map structure
+     * and constructs a properly typed configuration object.
+     *
+     * @param map Configuration map containing dialog options as key-value pairs
+     * @return MainThreadDialogOpenOptions instance, or null if map is null
+     */
+    private fun create(map: Map<String, Any?>?): MainThreadDialogOpenOptions? {
+        map?.let {
+            return MainThreadDialogOpenOptions(
+                defaultUri = it["defaultUri"] as? Map<String, String?>,
+                openLabel = it["openLabel"] as? String,
+                canSelectFiles = it["canSelectFiles"] as? Boolean,
+                canSelectFolders = it["canSelectFolders"] as? Boolean,
+                canSelectMany = it["canSelectMany"] as? Boolean,
+                filters = it["filters"] as? MutableMap<String, MutableList<String>>,
+                title = it["title"] as? String,
+                allowUIResources = it["allowUIResources"] as? Boolean
+            )
+        } ?: return null
+    }
+
+    /**
+     * Disposes of any resources held by this dialog handler.
+     *
+     * This method is called when the plugin or component is being shut down,
+     * allowing for proper cleanup of resources.
+     */
+    override fun dispose() {
+        logger.info("Disposing MainThreadDiaglogs")
+    }
+}
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadDocumentContentProvidersShape.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadDocumentContentProvidersShape.kt
new file mode 100644
index 000000000..efa66338b
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadDocumentContentProvidersShape.kt
@@ -0,0 +1,57 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.actors
+
+import com.intellij.openapi.Disposable
+import com.intellij.openapi.diagnostic.Logger
+import java.net.URI
+import kotlinx.coroutines.CompletableDeferred
+
+/**
+ * Interfaces related to document content providers.
+ */
+interface MainThreadDocumentContentProvidersShape : Disposable {
+    /**
+     * Registers a text content provider.
+     * @param handle Provider handle
+     * @param scheme URI scheme
+     */
+    fun registerTextContentProvider(handle: Int, scheme: String)
+
+    /**
+     * Unregisters a text content provider.
+     * @param handle Provider handle
+     */
+    fun unregisterTextContentProvider(handle: Int)
+
+    /**
+     * Virtual document content change.
+     * @param uri Document URI
+     * @param value New content
+     * @return Execution result
+     */
+    suspend fun onVirtualDocumentChange(uri: Map<String, Any?>, value: String): Any
+}
+
+class MainThreadDocumentContentProviders : MainThreadDocumentContentProvidersShape {
+    private val logger = Logger.getInstance(MainThreadDocumentContentProviders::class.java)
+
+    override fun registerTextContentProvider(handle: Int, scheme: String) {
+        logger.info("Register text content provider: handle=$handle, scheme=$scheme")
+    }
+
+    override fun unregisterTextContentProvider(handle: Int) {
+        logger.info("Unregister text content provider: handle=$handle")
+    }
+
+    override suspend fun onVirtualDocumentChange(uri: Map<String, Any?>, value: String): Any {
+        logger.info("Virtual document content changed: uri=$uri")
+        return CompletableDeferred<Unit>().also { it.complete(Unit) }.await()
+    }
+
+    override fun dispose() {
+        logger.info("Disposing MainThreadDocumentContentProviders resources")
+    }
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadDocumentsShape.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadDocumentsShape.kt
new file mode 100644
index 000000000..1d79160ee
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadDocumentsShape.kt
@@ -0,0 +1,147 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.actors
+
+import com.google.common.collect.Maps
+import com.intellij.openapi.diagnostic.Logger
+import com.intellij.openapi.project.Project
+import com.intellij.openapi.vfs.LocalFileSystem
+import com.intellij.testFramework.utils.vfs.createFile
+import ai.kilocode.jetbrains.editor.EditorAndDocManager
+import ai.kilocode.jetbrains.editor.createURI
+import ai.kilocode.jetbrains.service.DocumentSyncService
+import com.intellij.openapi.fileEditor.FileDocumentManager
+import com.intellij.openapi.fileEditor.FileDocumentManagerListener
+import com.intellij.openapi.application.ApplicationManager
+import com.intellij.openapi.editor.Document
+import com.intellij.util.messages.MessageBusConnection
+import kotlinx.coroutines.delay
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.launch
+import kotlinx.coroutines.CoroutineScope
+import kotlinx.coroutines.SupervisorJob
+import com.intellij.openapi.progress.ProcessCanceledException
+import kotlinx.coroutines.cancel
+import java.io.File
+
+interface MainThreadDocumentsShape {
+    suspend fun tryCreateDocument(options: Map<String, Any?>?): Map<String, Any?>
+    suspend fun tryOpenDocument(uri: Map<String, Any?>, options: Map<String, Any?>?): Map<String, Any?>
+    suspend fun trySaveDocument(uri: Map<String, Any?>): Boolean
+    suspend fun tryOpenDocument(map: Map<String, Any?>, options: String?): Map<String, Any?>
+}
+
+class MainThreadDocuments(var project: Project) : MainThreadDocumentsShape {
+    val logger = Logger.getInstance(MainThreadDocuments::class.java)
+    private var messageBusConnection: MessageBusConnection? = null
+    private val documentSyncService = DocumentSyncService(project)
+
+    /** Coroutine scope tied to this instance, cancelled in [dispose]. */
+    private val coroutineScope = CoroutineScope(SupervisorJob() + Dispatchers.IO)
+
+    init {
+        setupDocumentSaveListener()
+    }
+
+    private fun setupDocumentSaveListener() {
+        try {
+            // Connect to the message bus
+            messageBusConnection = ApplicationManager.getApplication().messageBus.connect()
+
+            // Listen for document save events
+            messageBusConnection?.subscribe(
+                FileDocumentManagerListener.TOPIC,
+                object : FileDocumentManagerListener {
+                    override fun beforeDocumentSaving(document: Document) {
+                        handleDocumentSaving(document)
+                    }
+                }
+            )
+
+            logger.info("Document save listener registered successfully")
+        } catch (e: Exception) {
+            logger.error("Failed to setup document save listener", e)
+        }
+    }
+
+    private fun handleDocumentSaving(document: Document) {
+        // Get the virtual file associated with the document
+        val virtualFile = FileDocumentManager.getInstance().getFile(document)
+        logger.info("Handle document save event: ${virtualFile?.path}")
+
+        if (virtualFile != null && documentSyncService.shouldHandleFileEvent(virtualFile)) {
+            // Handle in the coroutine scope dedicated to this instance to avoid issues with older IDEs lacking project.coroutineScope
+            coroutineScope.launch {
+                try {
+                    // Wait a short time to ensure the save operation is complete
+                    delay(50)
+                    if (!project.isDisposed) {
+                        documentSyncService.syncDocumentStateOnSave(virtualFile, document)
+                    }
+                } catch (e: ProcessCanceledException) {
+                    // Normal control flow exception, can be ignored
+                    logger.debug("Document save cancelled because project is disposed")
+                } catch (e: Exception) {
+                    logger.error("Error handling document save event", e)
+                }
+            }
+        }
+    }
+
+    override suspend fun tryCreateDocument(options: Map<String, Any?>?): Map<String, Any?> {
+        logger.info("tryCreateDocument$options")
+        return mapOf()
+    }
+
+    override suspend fun tryOpenDocument(map: Map<String, Any?>, options: Map<String, Any?>?): Map<String, Any?> {
+        val uri = createURI(map)
+        logger.info("tryOpenDocument : ${uri.path}")
+
+        val file = File(uri.path)
+        val vfs = LocalFileSystem.getInstance()
+        if (!file.exists()) {
+            file.parentFile.mkdirs()
+            val vf = vfs.findFileByIoFile(file.parentFile)
+            vf?.createFile(file.name)
+        }
+
+        project.getService(EditorAndDocManager::class.java).openDocument(uri)
+
+        logger.info("tryOpenDocument : ${uri.path} execution completed")
+        return map
+    }
+
+    // This function is designed to work around a VS Code type system issue where a string argument may be incorrectly treated as an options: {} object. To prevent this, multiple function overloads are declared.
+    override suspend fun tryOpenDocument(map: Map<String, Any?>, options: String?): Map<String, Any?> {
+        return tryOpenDocument(map, HashMap())
+    }
+
+    override suspend fun trySaveDocument(map: Map<String, Any?>): Boolean {
+        val uri = createURI(map)
+
+        logger.info("trySaveDocument： ${uri.path}")
+
+        project.getService(EditorAndDocManager::class.java).getEditorHandleByUri(uri,true)?.updateDocumentDirty(false) ?: run {
+            logger.info("trySaveDocument： ${uri.path} not found")
+            return false
+        }
+        logger.info("trySaveDocument： ${uri.path} execution completed")
+        return true
+    }
+
+
+    fun dispose() {
+        try {
+            messageBusConnection?.disconnect()
+            messageBusConnection = null
+            documentSyncService.dispose()
+            coroutineScope.cancel()
+            logger.info("Document save listener disposed")
+        } catch (e: Exception) {
+            logger.error("Error disposing document save listener", e)
+        }
+    }
+
+}
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadEditorTabsShape.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadEditorTabsShape.kt
new file mode 100644
index 000000000..461b88b74
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadEditorTabsShape.kt
@@ -0,0 +1,52 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.actors
+
+import com.intellij.openapi.diagnostic.Logger
+import com.intellij.openapi.project.Project
+import ai.kilocode.jetbrains.editor.EditorAndDocManager
+
+
+interface MainThreadEditorTabsShape {
+    fun moveTab(tabId: String, index: Int, viewColumn: Int, preserveFocus: Boolean?)
+    suspend fun closeTab(tabIds: List<String>, preserveFocus: Boolean?): Boolean
+    suspend fun closeGroup(groupIds: List<Int>, preservceFocus: Boolean?): Boolean
+}
+
+class MainThreadEditorTabs(val project : Project) : MainThreadEditorTabsShape {
+    private val logger = Logger.getInstance(MainThreadEditorTabs::class.java)
+    override fun moveTab(tabId: String, index: Int, viewColumn: Int, preserveFocus: Boolean?) {
+        logger.info("moveTab $tabId")
+    }
+
+    override suspend fun closeTab(tabIds: List<String>, preserveFocus: Boolean?): Boolean {
+        logger.info("closeTab $tabIds")
+
+        // Iterate all tab IDs and trigger close event
+        var closedAny = true
+        for (tabId in tabIds){
+            val tab =  project.getService(EditorAndDocManager::class.java).closeTab(tabId)
+//            closedAny = tab?.triggerClose()?:false
+//            if (closedAny){
+//                project.getService(TabStateManager::class.java).removeTab(tabId)
+//            }
+        }
+
+        return closedAny
+    }
+
+    override suspend fun closeGroup(groupIds: List<Int>, preservceFocus: Boolean?): Boolean {
+        logger.info("closeGroup $groupIds")
+
+        // Iterate all tab group IDs and trigger close event
+        var closedAny = false
+        for (groupId in groupIds){
+            val group =  project.getService(EditorAndDocManager::class.java).closeGroup(groupId)
+//            closedAny = group?.triggerClose()?:false
+        }
+        return closedAny
+    }
+
+}
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadErrorsShape.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadErrorsShape.kt
new file mode 100644
index 000000000..e0cc9849b
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadErrorsShape.kt
@@ -0,0 +1,44 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.actors
+
+import com.intellij.openapi.Disposable
+import com.intellij.openapi.diagnostic.Logger
+
+/**
+ * Main thread error handling interface.
+ * Corresponds to the MainThreadErrorsShape interface in VSCode.
+ */
+interface MainThreadErrorsShape : Disposable {
+    /**
+     * Handles unexpected errors.
+     * @param err Error information
+     */
+    fun onUnexpectedError(err: Any?)
+    
+    /**
+     * Releases resources.
+     */
+    override fun dispose()
+}
+
+class MainThreadErrors : MainThreadErrorsShape {
+    private val logger = Logger.getInstance(MainThreadErrors::class.java)
+
+    /**
+     * Handles unexpected errors.
+     * @param err Error information
+     */
+    override fun onUnexpectedError(err: Any?) {
+        logger.warn("Unexpected error occurred in plugin: $err")
+    }
+
+    /**
+     * Releases resources.
+     */
+    override fun dispose() {
+        logger.info("Dispose MainThreadErrors")
+    }
+}
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadExtensionServiceShape.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadExtensionServiceShape.kt
new file mode 100644
index 000000000..5c76bac1e
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadExtensionServiceShape.kt
@@ -0,0 +1,281 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.actors
+
+import com.intellij.openapi.Disposable
+import com.intellij.openapi.diagnostic.Logger
+import ai.kilocode.jetbrains.core.ExtensionManager
+import ai.kilocode.jetbrains.ipc.proxy.IRPCProtocol
+import java.net.URI
+
+/**
+ * Main thread extension service interface.
+ * Defines the contract for managing extensions in the main thread context.
+ * This interface provides methods for extension lifecycle management,
+ * activation, error handling, and utility operations.
+ */
+interface MainThreadExtensionServiceShape : Disposable {
+    /**
+     * Retrieves extension information by extension ID.
+     * @param extensionId Extension identifier, typically provided as a Map with "value" key
+     * @return Extension description object containing metadata about the extension,
+     *         or null if the extension is not found
+     */
+    fun getExtension(extensionId: Any): Any?
+    
+    /**
+     * Activates an extension with the specified ID and reason.
+     * This method triggers the extension activation process and waits for completion.
+     * @param extensionId Extension identifier to activate
+     * @param reason Optional activation reason or context information
+     * @return Boolean indicating whether the activation was successful (true) or failed (false)
+     */
+    fun activateExtension(extensionId: Any, reason: Any?): Any
+    
+    /**
+     * Called immediately before an extension is about to be activated.
+     * This provides a hook for pre-activation setup or logging.
+     * @param extensionId Extension identifier that will be activated
+     */
+    fun onWillActivateExtension(extensionId: Any)
+    
+    /**
+     * Called after an extension has been successfully activated.
+ * Provides detailed timing information about the activation process.
+ * @param extensionId Extension identifier that was activated
+ * @param codeLoadingTime Time taken to load extension code (in milliseconds)
+ * @param activateCallTime Time taken for the activation call (in milliseconds)
+ * @param activateResolvedTime Time taken to resolve activation (in milliseconds)
+ * @param activationReason Reason or context for the activation
+ */
+    fun onDidActivateExtension(
+        extensionId: Any,
+        codeLoadingTime: Double,
+        activateCallTime: Double,
+        activateResolvedTime: Double,
+        activationReason: Any?
+    )
+    
+    /**
+     * Handles extension activation errors.
+     * Called when an extension fails to activate due to errors or missing dependencies.
+     * @param extensionId Extension identifier that failed to activate
+     * @param error Error information or exception details
+     * @param missingExtensionDependency Information about missing dependencies, if applicable
+     * @return Unit (void) - the method handles the error internally
+    */
+    fun onExtensionActivationError(
+        extensionId: Any,
+        error: Any?,
+        missingExtensionDependency: Any?
+    ): Any
+    
+    /**
+     * Handles runtime errors that occur during extension execution.
+     * Called when an extension encounters errors after successful activation.
+     * @param extensionId Extension identifier that encountered the runtime error
+     * @param error Error information or exception details
+    */
+    fun onExtensionRuntimeError(extensionId: Any, error: Any?)
+    
+    /**
+     * Sets performance marks for extension profiling and monitoring.
+     * Used to track performance metrics across extension lifecycle events.
+     * @param marks List of performance mark objects containing timing information
+     * @return Unit (void) - the method processes the marks internally
+    */
+    fun setPerformanceMarks(marks: List<Any>)
+    
+    /**
+     * Converts a standard URI to a browser-compatible URI format.
+     * This method ensures URIs are properly formatted for web browser contexts.
+     * @param uri The original URI to convert
+     * @return Browser-compatible URI object
+     */
+    fun asBrowserUri(uri: URI): URI
+}
+
+/**
+ * Main thread extension service implementation.
+ * Provides concrete implementation for extension management in the main thread,
+ * handling extension lifecycle events, activation, and error management.
+ *
+ * @param extensionManager Core extension manager responsible for extension operations
+ * @param rpcProtocol RPC protocol for inter-process communication with extensions
+ */
+class MainThreadExtensionService(
+    private val extensionManager: ExtensionManager,
+    private val rpcProtocol: IRPCProtocol
+) : MainThreadExtensionServiceShape {
+    private val logger = Logger.getInstance(MainThreadExtensionService::class.java)
+
+    /**
+     * Retrieves extension information by extension ID.
+     * Safely extracts the extension ID from various input formats and queries the extension manager.
+     *
+     * @param extensionId Extension identifier, expected as Map with "value" key or any other type
+     * @return Extension description object containing metadata, or null if not found
+     */
+    override fun getExtension(extensionId: Any): Any? {
+        // Safely extract extension ID string from input parameter
+        val extensionIdStr = try {
+            (extensionId as? Map<*, *>)?.get("value") as? String
+        } catch (e: Exception) {
+            // Fallback to string representation if extraction fails
+            "$extensionId"
+        }
+        logger.info("Retrieving extension: $extensionIdStr")
+        return extensionManager.getExtensionDescription(extensionIdStr.toString())
+    }
+    
+    /**
+     * Activates an extension with the specified ID and reason.
+     * Uses asynchronous activation via Future and waits for completion.
+     *
+     * @param extensionId Extension identifier to activate
+     * @param reason Optional activation reason or context information
+     * @return Boolean indicating activation success (true) or failure (false)
+     */
+    override fun activateExtension(extensionId: Any, reason: Any?): Any {
+        // Safely extract extension ID string from input parameter
+        val extensionIdStr = try {
+            (extensionId as? Map<*, *>)?.get("value") as? String
+        } catch (e: Exception) {
+            // Fallback to string representation if extraction fails
+            "$extensionId"
+        }
+        logger.info("Activating extension: $extensionIdStr, reason: $reason")
+        
+        // Use Future to get asynchronous activation result
+        val future = extensionManager.activateExtension(extensionIdStr.toString(), rpcProtocol)
+
+        return try {
+            // Wait for Future completion and return result
+            val result = future.get()
+            logger.info("Extension $extensionIdStr activation ${if (result) "successful" else "failed"}")
+            true
+        } catch (e: Exception) {
+            logger.error("Extension $extensionIdStr activation exception", e)
+            false
+        }
+    }
+    
+    /**
+     * Called immediately before extension activation begins.
+     * Provides logging for pre-activation state tracking.
+     *
+     * @param extensionId Extension identifier about to be activated
+     */
+    override fun onWillActivateExtension(extensionId: Any) {
+        // Safely extract extension ID string from input parameter
+        val extensionIdStr = try {
+            (extensionId as? Map<*, *>)?.get("value") as? String
+        } catch (e: Exception) {
+            // Fallback to string representation if extraction fails
+            "$extensionId"
+        }
+        logger.info("Extension $extensionIdStr is about to be activated")
+    }
+    
+    /**
+     * Called after extension activation has completed successfully.
+     * Logs activation completion with detailed timing information.
+     *
+     * @param extensionId Extension identifier that was activated
+     * @param codeLoadingTime Time taken to load extension code (milliseconds)
+     * @param activateCallTime Time taken for activation call (milliseconds)
+     * @param activateResolvedTime Time taken to resolve activation (milliseconds)
+     * @param activationReason Reason or context for activation
+     */
+    override fun onDidActivateExtension(
+        extensionId: Any,
+        codeLoadingTime: Double,
+        activateCallTime: Double,
+        activateResolvedTime: Double,
+        activationReason: Any?
+    ) {
+        // Safely extract extension ID string from input parameter
+        val extensionIdStr = try {
+            (extensionId as? Map<*, *>)?.get("value") as? String
+        } catch (e: Exception) {
+            // Fallback to string representation if extraction fails
+            "$extensionId"
+        }
+        logger.info("Extension $extensionIdStr activated, reason: $activationReason")
+    }
+    
+    /**
+     * Handles extension activation errors with detailed logging.
+     * Called when extension activation fails due to errors or missing dependencies.
+     *
+     * @param extensionId Extension identifier that failed activation
+     * @param error Error information or exception details
+     * @param missingExtensionDependency Information about missing dependencies
+     * @return Unit (void) - error is handled through logging
+     */
+    override fun onExtensionActivationError(
+        extensionId: Any,
+        error: Any?,
+        missingExtensionDependency: Any?
+    ): Any {
+        // Safely extract extension ID string from input parameter
+        val extensionIdStr = try {
+            (extensionId as? Map<*, *>)?.get("value") as? String
+        } catch (e: Exception) {
+            // Fallback to string representation if extraction fails
+            "$extensionId"
+        }
+        logger.error("Extension $extensionIdStr activation error: $error, missing dependency: $missingExtensionDependency")
+        return Unit
+    }
+    
+    /**
+     * Handles runtime errors that occur during extension execution.
+     * Called when an activated extension encounters runtime errors.
+     *
+     * @param extensionId Extension identifier that encountered the error
+     * @param error Error information or exception details
+     */
+    override fun onExtensionRuntimeError(extensionId: Any, error: Any?) {
+        // Safely extract extension ID string from input parameter
+        val extensionIdStr = try {
+            (extensionId as? Map<*, *>)?.get("value") as? String
+        } catch (e: Exception) {
+            // Fallback to string representation if extraction fails
+            "$extensionId"
+        }
+        logger.warn("Extension $extensionIdStr runtime error: $error")
+    }
+    
+    /**
+     * Sets performance marks for extension profiling and monitoring.
+     * Used to track performance metrics across extension operations.
+     *
+     * @param marks List of performance mark objects containing timing information
+     */
+    override fun setPerformanceMarks(marks: List<Any>) {
+        logger.info("Setting performance marks: $marks")
+    }
+    
+    /**
+     * Converts a standard URI to browser-compatible format.
+     * Ensures URIs are properly formatted for web browser contexts.
+     *
+     * @param uri The original URI to convert
+     * @return Browser-compatible URI object (currently returns the original URI)
+     */
+    override fun asBrowserUri(uri: URI): URI {
+        logger.info("Converting to browser URI: $uri")
+        return uri
+    }
+
+    /**
+     * Disposes of resources when the service is no longer needed.
+     * Called during application shutdown or when the extension service is being replaced.
+     */
+    override fun dispose() {
+        logger.info("Disposing MainThreadExtensionService")
+    }
+}
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadFileSystemEventServiceShape.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadFileSystemEventServiceShape.kt
new file mode 100644
index 000000000..7b7f27807
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadFileSystemEventServiceShape.kt
@@ -0,0 +1,82 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.actors
+
+import com.intellij.openapi.Disposable
+import com.intellij.openapi.diagnostic.Logger
+
+/**
+ * File system event service interface.
+ * Provides functionality for watching file system changes.
+ * Corresponds to the MainThreadFileSystemEventServiceShape interface in VSCode.
+ */
+interface MainThreadFileSystemEventServiceShape : Disposable {
+    /**
+     * Watches for file system changes.
+     *
+     * @param extensionId The extension identifier
+     * @param session The session identifier
+     * @param resource The resource URI as a map
+     * @param opts Watch options
+     * @param correlate Whether to correlate events
+     */
+    fun watch(
+        extensionId: String,
+        session: Int,
+        resource: Map<String, Any?>,
+        opts: Map<String, Any?>,
+        correlate: Boolean
+    )
+
+    /**
+     * Stops watching for file system changes.
+     *
+     * @param session The session identifier to stop watching
+     */
+    fun unwatch(session: Int)
+}
+
+/**
+ * Implementation of the file system event service interface.
+ * Handles watching and unwatching file system changes.
+ */
+class MainThreadFileSystemEventService : MainThreadFileSystemEventServiceShape {
+    private val logger = Logger.getInstance(MainThreadFileSystemEventService::class.java)
+
+    /**
+     * Starts watching for file system changes.
+     *
+     * @param extensionId The extension identifier
+     * @param session The session identifier
+     * @param resource The resource URI as a map
+     * @param opts Watch options
+     * @param correlate Whether to correlate events
+     */
+    override fun watch(
+        extensionId: String,
+        session: Int,
+        resource: Map<String, Any?>,
+        opts: Map<String, Any?>,
+        correlate: Boolean
+    ) {
+        logger.info("Starting to watch file system changes: extensionId=$extensionId, session=$session, resource=$resource, opts=$opts, correlate=$correlate")
+    }
+
+    /**
+     * Stops watching for file system changes.
+     *
+     * @param session The session identifier to stop watching
+     */
+    override fun unwatch(session: Int) {
+        logger.info("Stopping file system watch: session=$session")
+    }
+
+    /**
+     * Releases resources used by this service.
+     */
+    override fun dispose() {
+        logger.info("Releasing MainThreadFileSystemEventService resources")
+    }
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadFileSystemShape.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadFileSystemShape.kt
new file mode 100644
index 000000000..7d36c3ee6
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadFileSystemShape.kt
@@ -0,0 +1,616 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.actors
+
+import com.intellij.openapi.Disposable
+import com.intellij.openapi.diagnostic.Logger
+import com.intellij.openapi.vfs.VirtualFile
+import java.io.File
+import java.net.URI
+import java.nio.file.Files
+import java.nio.file.Paths
+import java.nio.file.StandardCopyOption
+import java.util.concurrent.ConcurrentHashMap
+
+/**
+ * File type enumeration.
+ * Defines the possible types of files in the file system.
+ */
+enum class FileType {
+    UNKNOWN,
+    FILE,
+    DIRECTORY,
+    SYMBOLIC_LINK
+}
+
+/**
+ * File statistics information.
+ * Contains metadata about a file including its type, creation time, modification time, and size.
+ *
+ * @property type The type of the file (file, directory, symbolic link, etc.)
+ * @property ctime The creation time of the file in milliseconds since epoch
+ * @property mtime The last modification time of the file in milliseconds since epoch
+ * @property size The size of the file in bytes
+ */
+data class FileStat(
+    val type: FileType,
+    val ctime: Long,
+    val mtime: Long,
+    val size: Long
+)
+
+/**
+ * File system provider capabilities.
+ * Defines the capabilities and features supported by a file system provider.
+ *
+ * @property isCaseSensitive Whether the file system is case-sensitive
+ * @property isReadonly Whether the file system is read-only
+ * @property isPathCaseSensitive Whether file paths are case-sensitive
+ * @property canHandleFileUri Whether the provider can handle file URIs
+ * @property hasFileCopy Whether the provider supports file copying
+ * @property hasFolderCopy Whether the provider supports folder copying
+ * @property hasOpenReadWriteCloseCapability Whether the provider supports open/read/write/close operations
+ * @property hasLegacyWatchCapability Whether the provider supports legacy file watching
+ * @property hasDiffCapability Whether the provider supports diff operations
+ * @property hasFileChangeCapability Whether the provider supports file change notifications
+ */
+data class FileSystemProviderCapabilities(
+    val isCaseSensitive: Boolean,
+    val isReadonly: Boolean,
+    val isPathCaseSensitive: Boolean,
+    val canHandleFileUri: Boolean,
+    val hasFileCopy: Boolean,
+    val hasFolderCopy: Boolean,
+    val hasOpenReadWriteCloseCapability: Boolean,
+    val hasLegacyWatchCapability: Boolean,
+    val hasDiffCapability: Boolean,
+    val hasFileChangeCapability: Boolean
+)
+
+/**
+ * File overwrite options.
+ * Options for controlling file overwrite behavior during write operations.
+ *
+ * @property overwrite Whether to overwrite existing files
+ */
+data class FileOverwriteOptions(
+    val overwrite: Boolean
+)
+
+/**
+ * File delete options.
+ * Options for controlling file deletion behavior.
+ *
+ * @property recursive Whether to delete directories recursively
+ * @property useTrash Whether to move files to trash instead of permanent deletion
+ */
+data class FileDeleteOptions(
+    val recursive: Boolean,
+    val useTrash: Boolean
+)
+
+/**
+ * File change data.
+ * Represents a change event in the file system.
+ *
+ * @property type The type of change: 1 for ADDED, 2 for UPDATED, 3 for DELETED
+ * @property resource The resource that was changed, represented as a map of properties
+ */
+data class FileChangeDto(
+    val type: Int, // 1: ADDED, 2: UPDATED, 3: DELETED
+    val resource: Map<String, Any?>
+)
+
+/**
+ * Markdown string interface.
+ * Represents a string that can contain markdown formatting.
+ */
+interface MarkdownString {
+    val value: String
+    val isTrusted: Boolean
+}
+
+/**
+ * Main thread file system service interface.
+ * Corresponds to the MainThreadFileSystemShape interface in VSCode.
+ * Provides an abstraction layer for file system operations that can be executed from the main thread.
+ */
+interface MainThreadFileSystemShape : Disposable {
+    /**
+     * Registers a file system provider with the given handle and scheme.
+     *
+     * @param handle A unique identifier for the provider
+     * @param scheme The URI scheme this provider handles (e.g., "file", "ftp", etc.)
+     */
+    fun registerFileSystemProvider(handle: Int, scheme: String)
+
+    /**
+     * Unregisters a file system provider.
+     *
+     * @param handle The handle of the provider to unregister
+     */
+    fun unregisterProvider(handle: Int)
+
+    /**
+     * Gets file status information for the specified resource.
+     *
+     * @param resource The URI of the file or directory to get information about
+     * @return FileStat object containing file metadata
+     */
+    fun stat(resource: URI): FileStat
+
+    /**
+     * Reads directory contents.
+     * Returns a list of entries in the specified directory.
+     *
+     * @param resource The URI of the directory to read
+     * @return List of pairs, where each pair contains (filename, fileType)
+     */
+    fun readdir(resource: URI): List<Pair<String, String>>
+
+    /**
+     * Reads file content.
+     * Returns the raw bytes of the specified file.
+     *
+     * @param uri The URI of the file to read
+     * @return Byte array containing the file content
+     */
+    fun readFile(uri: URI): ByteArray
+
+    /**
+     * Writes file content.
+     * Writes the provided content to the specified file.
+     *
+     * @param uri The URI of the file to write
+     * @param content The content to write as a byte array
+     * @param overwrite Whether to overwrite if the file already exists
+     * @return The written content as a byte array
+     */
+    fun writeFile(uri: URI, content: ByteArray, overwrite: Boolean): ByteArray
+
+    /**
+     * Renames a file or directory.
+     * Moves a file or directory from source to target location.
+     *
+     * @param source The URI of the source file/directory
+     * @param target The URI of the target location
+     * @param options Additional options for the rename operation
+     */
+    fun rename(source: URI, target: URI, options: Map<String, Any>)
+
+    /**
+     * Copies a file or directory.
+     * Creates a copy of the source at the target location.
+     *
+     * @param source The URI of the source file/directory
+     * @param target The URI of the target location
+     * @param options Additional options for the copy operation
+     */
+    fun copy(source: URI, target: URI, options: Map<String, Any>)
+
+    /**
+     * Creates a directory.
+     * Creates the specified directory and any necessary parent directories.
+     *
+     * @param uri The URI of the directory to create
+     */
+    fun mkdir(uri: URI)
+
+    /**
+     * Deletes a file or directory.
+     * Removes the specified file or directory from the file system.
+     *
+     * @param uri The URI of the file/directory to delete
+     * @param options Additional options for the delete operation
+     */
+    fun delete(uri: URI, options: Map<String, Any>)
+
+    /**
+     * Ensures activation.
+     * Ensures that the file system provider for the given scheme is activated.
+     *
+     * @param scheme The URI scheme to ensure is activated
+     */
+    fun ensureActivation(scheme: String)
+
+    /**
+     * Listens for file system changes.
+     * Processes file system change notifications from providers.
+     *
+     * @param handle The handle of the provider sending the change notification
+     * @param resources List of file changes to process
+     */
+    fun onFileSystemChange(handle: Int, resources: List<FileChangeDto>)
+}
+
+/**
+ * Main thread file system service implementation.
+ * Provides implementation of file system related functionality for the IDEA platform.
+ * This class implements the MainThreadFileSystemShape interface and provides
+ * concrete implementations for all file system operations.
+ */
+class MainThreadFileSystem : MainThreadFileSystemShape {
+    private val logger = Logger.getInstance(MainThreadFileSystem::class.java)
+    
+    // Registered file system providers mapped by their handles
+    private val providers = ConcurrentHashMap<Int, String>()
+
+    /**
+     * Registers a file system provider with the given handle and scheme.
+     * This method stores the provider information for later use.
+     *
+     * @param handle A unique identifier for the provider
+     * @param scheme The URI scheme this provider handles
+     */
+    override fun registerFileSystemProvider(handle: Int, scheme: String) {
+        logger.info("Registering file system provider: handle=$handle, scheme=$scheme")
+        
+        try {
+            // Store provider information
+            providers[handle] = scheme
+            
+            // Actual implementation would need to integrate with IDEA's VFS
+            // based on the scheme
+        } catch (e: Exception) {
+            logger.error("Failed to register file system provider: $e")
+            throw e
+        }
+    }
+
+    /**
+     * Unregisters a file system provider.
+     * Removes the provider associated with the given handle.
+     *
+     * @param handle The handle of the provider to unregister
+     */
+    override fun unregisterProvider(handle: Int) {
+        logger.info("Unregistering file system provider: handle=$handle")
+        
+        try {
+            // Remove provider information
+            providers.remove(handle)
+            
+            // Actual implementation would need to unregister the corresponding file system provider
+        } catch (e: Exception) {
+            logger.error("Failed to unregister file system provider: $e")
+            throw e
+        }
+    }
+
+    /**
+     * Gets file status information for the specified resource.
+     * Retrieves metadata about a file or directory including type, timestamps, and size.
+     *
+     * @param resource The URI of the file or directory to get information about
+     * @return FileStat object containing file metadata
+     */
+    override fun stat(resource: URI): FileStat {
+        logger.info("Getting file status information: $resource")
+        
+        try {
+            val path = getPathFromUriComponents(resource)
+            val file = File(path)
+            
+            if (!file.exists()) {
+                throw Exception("File does not exist: $path")
+            }
+            
+            val type = when {
+                file.isDirectory -> FileType.DIRECTORY
+                Files.isSymbolicLink(Paths.get(file.toURI())) -> FileType.SYMBOLIC_LINK
+                else -> FileType.FILE
+            }
+            
+            val ctime = file.lastModified()
+            val mtime = file.lastModified()
+            val size = file.length()
+            
+            return FileStat(type, ctime, mtime, size)
+        } catch (e: Exception) {
+            logger.error("Failed to get file status information: $e")
+            throw e
+        }
+    }
+
+    /**
+     * Reads directory contents.
+     * Returns a list of all entries in the specified directory.
+     *
+     * @param resource The URI of the directory to read
+     * @return List of pairs, where each pair contains (filename, fileType)
+     */
+    override fun readdir(resource: URI): List<Pair<String, String>> {
+        logger.info("Reading directory contents: $resource")
+        
+        try {
+            val path = getPathFromUriComponents(resource)
+            val file = File(path)
+            
+            if (!file.exists() || !file.isDirectory) {
+                throw Exception("Directory does not exist or is not a directory: $path")
+            }
+            
+            // Read directory contents
+            return file.listFiles()?.map { 
+                Pair(it.name, if (it.isDirectory) FileType.DIRECTORY.ordinal.toString() else FileType.FILE.ordinal.toString())
+            } ?: emptyList()
+        } catch (e: Exception) {
+            logger.error("Failed to read directory contents: $e")
+            throw e
+        }
+    }
+
+    /**
+     * Reads file content.
+     * Returns the raw bytes of the specified file.
+     *
+     * @param uri The URI of the file to read
+     * @return Byte array containing the file content
+     */
+    override fun readFile(uri: URI): ByteArray {
+        logger.info("Reading file content: $uri")
+        
+        try {
+            val path = getPathFromUriComponents(uri)
+            val file = File(path)
+            
+            if (!file.exists() || file.isDirectory) {
+                throw Exception("File does not exist or is a directory: $path")
+            }
+            
+            // Read file content
+            return file.readBytes()
+        } catch (e: Exception) {
+            logger.error("Failed to read file content: $e")
+            throw e
+        }
+    }
+
+    /**
+     * Writes file content.
+     * Writes the provided content to the specified file.
+     *
+     * @param uri The URI of the file to write
+     * @param content The content to write as a byte array
+     * @param overwrite Whether to overwrite if the file already exists
+     * @return The written content as a byte array
+     */
+    override fun writeFile(uri: URI, content: ByteArray, overwrite: Boolean): ByteArray {
+        logger.info("Writing file content: $uri, content size: ${content.size} bytes")
+        
+        try {
+            val path = getPathFromUriComponents(uri)
+            val file = File(path)
+            
+            // Ensure parent directory exists
+            file.parentFile?.mkdirs()
+            
+            // Write file content
+            file.writeBytes(content)
+            return content
+        } catch (e: Exception) {
+            logger.error("Failed to write file content: $e")
+            throw e
+        }
+    }
+
+    /**
+     * Renames a file or directory.
+     * Moves a file or directory from source to target location.
+     *
+     * @param source The URI of the source file/directory
+     * @param target The URI of the target location
+     * @param options Additional options for the rename operation
+     */
+    override fun rename(source: URI, target: URI, options: Map<String, Any>) {
+        logger.info("Renaming: $source -> $target")
+        
+        try {
+            val sourcePath = getPathFromUriComponents(source)
+            val targetPath = getPathFromUriComponents(target)
+            val overwrite = options["overwrite"] as? Boolean ?: false
+            
+            val sourceFile = File(sourcePath)
+            val targetFile = File(targetPath)
+            
+            if (!sourceFile.exists()) {
+                throw Exception("Source file does not exist: $sourcePath")
+            }
+            
+            if (targetFile.exists() && !overwrite) {
+                throw Exception("Target file already exists and overwrite is not allowed: $targetPath")
+            }
+            
+            // Ensure parent directory exists
+            targetFile.parentFile?.mkdirs()
+            
+            // Perform rename operation
+            if (!sourceFile.renameTo(targetFile)) {
+                // If simple rename fails, try copy then delete
+                Files.move(
+                    Paths.get(sourcePath),
+                    Paths.get(targetPath),
+                    if (overwrite) StandardCopyOption.REPLACE_EXISTING else StandardCopyOption.ATOMIC_MOVE
+                )
+            }
+        } catch (e: Exception) {
+            logger.error("Rename operation failed: $e")
+            throw e
+        }
+    }
+
+    /**
+     * Copies a file or directory.
+     * Creates a copy of the source at the target location.
+     *
+     * @param source The URI of the source file/directory
+     * @param target The URI of the target location
+     * @param options Additional options for the copy operation
+     */
+    override fun copy(source: URI, target: URI, options: Map<String, Any>) {
+        logger.info("Copying: $source -> $target")
+        
+        try {
+            val sourcePath = getPathFromUriComponents(source)
+            val targetPath = getPathFromUriComponents(target)
+            val overwrite = options["overwrite"] as? Boolean ?: false
+            
+            val sourceFile = File(sourcePath)
+            val targetFile = File(targetPath)
+            
+            if (!sourceFile.exists()) {
+                throw Exception("Source file does not exist: $sourcePath")
+            }
+            
+            if (targetFile.exists() && !overwrite) {
+                throw Exception("Target file already exists and overwrite is not allowed: $targetPath")
+            }
+            
+            // Ensure parent directory exists
+            targetFile.parentFile?.mkdirs()
+            
+            if (sourceFile.isDirectory) {
+                // Copy directory recursively
+                sourceFile.copyRecursively(targetFile, overwrite)
+            } else {
+                // Copy file
+                Files.copy(
+                    Paths.get(sourcePath),
+                    Paths.get(targetPath),
+                    if (overwrite) StandardCopyOption.REPLACE_EXISTING else StandardCopyOption.COPY_ATTRIBUTES
+                )
+            }
+        } catch (e: Exception) {
+            logger.error("Copy operation failed: $e")
+            throw e
+        }
+    }
+
+    /**
+     * Creates a directory.
+     * Creates the specified directory and any necessary parent directories.
+     *
+     * @param uri The URI of the directory to create
+     */
+    override fun mkdir(uri: URI) {
+        logger.info("Creating directory: $uri")
+        
+        try {
+            val path = getPathFromUriComponents(uri)
+            val file = File(path)
+            
+            if (file.exists()) {
+                throw Exception("File or directory already exists: $path")
+            }
+            
+            // Create directory
+            if (!file.mkdirs()) {
+                throw Exception("Failed to create directory: $path")
+            }
+        } catch (e: Exception) {
+            logger.error("Failed to create directory: $e")
+            throw e
+        }
+    }
+
+    /**
+     * Deletes a file or directory.
+     * Removes the specified file or directory from the file system.
+     *
+     * @param uri The URI of the file/directory to delete
+     * @param options Additional options for the delete operation
+     */
+    override fun delete(uri: URI, options: Map<String, Any>) {
+        logger.info("Deleting: $uri, options: $options")
+        
+        try {
+            val path = getPathFromUriComponents(uri)
+            val file = File(path)
+            val recursive = options["recursive"] as? Boolean ?: false
+            val useTrash = options["useTrash"] as? Boolean ?: false
+            
+            if (!file.exists()) {
+                // If file doesn't exist, consider deletion successful
+                return
+            }
+            
+            if (useTrash) {
+                // TODO: Implement trash deletion based on platform
+                // Currently performs direct deletion, should move to trash in actual implementation
+                logger.warn("Trash deletion not implemented, performing direct deletion")
+            }
+            
+            if (file.isDirectory && recursive) {
+                // Recursively delete directory
+                file.deleteRecursively()
+            } else if (file.isDirectory && !recursive) {
+                throw Exception("Cannot delete non-empty directory unless recursive=true: $path")
+            } else {
+                // Delete file
+                file.delete()
+            }
+        } catch (e: Exception) {
+            logger.error("Delete operation failed: $e")
+            throw e
+        }
+    }
+
+    /**
+     * Ensures activation.
+     * Ensures that the file system provider for the given scheme is activated.
+     *
+     * @param scheme The URI scheme to ensure is activated
+     */
+    override fun ensureActivation(scheme: String) {
+        logger.info("Ensuring activation: $scheme")
+        
+        try {
+            // This should handle file system activation
+            // Actual implementation may need to notify IDEA's VFS to refresh
+        } catch (e: Exception) {
+            logger.error("Failed to ensure activation: $e")
+            throw e
+        }
+    }
+
+    /**
+     * Listens for file system changes.
+     * Processes file system change notifications from providers.
+     *
+     * @param handle The handle of the provider sending the change notification
+     * @param resources List of file changes to process
+     */
+    override fun onFileSystemChange(handle: Int, resources: List<FileChangeDto>) {
+        logger.info("File system change notification: handle=$handle, resources=${resources.joinToString { it.resource.toString() }}")
+        
+        try {
+            // This should handle file system change notifications
+            // Actual implementation may need to notify IDEA's VFS to refresh
+        } catch (e: Exception) {
+            logger.error("Failed to process file system change notification: $e")
+            throw e
+        }
+    }
+    
+    /**
+     * Gets file system path from URI components.
+     * Converts a URI to a local file system path.
+     *
+     * @param uri The URI to convert
+     * @return The corresponding file system path
+     */
+    private fun getPathFromUriComponents(uri: URI): String {
+        return File(uri).path
+    }
+    
+    /**
+     * Disposes of resources.
+     * Cleans up resources when this service is no longer needed.
+     */
+    override fun dispose() {
+        logger.info("Disposing MainThreadFileSystem resources")
+        providers.clear()
+    }
+}
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadLanguageFeaturesShape.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadLanguageFeaturesShape.kt
new file mode 100644
index 000000000..2a5382993
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadLanguageFeaturesShape.kt
@@ -0,0 +1,713 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.actors
+
+import com.intellij.openapi.Disposable
+import com.intellij.openapi.diagnostic.Logger
+import ai.kilocode.jetbrains.core.ExtensionIdentifier
+
+/**
+ * Language features related interface.
+ * Corresponds to the MainThreadLanguageFeaturesShape interface in VSCode.
+ * This interface defines the contract for language feature providers that run on the main thread.
+ * It provides methods to register various language intelligence features like code completion,
+ * hover information, symbol navigation, and more.
+ */
+interface MainThreadLanguageFeaturesShape : Disposable {
+    /**
+     * Unregisters service.
+     * @param handle Provider handle
+     */
+    fun unregister(handle: Int)
+
+    /**
+     * Registers document symbol provider.
+     * @param handle Provider handle
+     * @param selector Document selector
+     * @param label Label
+     */
+    fun registerDocumentSymbolProvider(handle: Int, selector: List<Map<String, Any?>>, label: String)
+
+    /**
+     * Registers code lens support.
+     * @param handle Provider handle
+     * @param selector Document selector
+     * @param eventHandle Event handle
+     */
+    fun registerCodeLensSupport(handle: Int, selector: List<Map<String, Any?>>, eventHandle: Int?)
+
+    /**
+     * Emits code lens event.
+     * @param eventHandle Event handle
+     * @param event Event content
+     */
+    fun emitCodeLensEvent(eventHandle: Int, event: Any?)
+
+    /**
+     * Registers definition support.
+     * @param handle Provider handle
+     * @param selector Document selector
+     */
+    fun registerDefinitionSupport(handle: Int, selector: List<Map<String, Any?>>)
+
+    /**
+     * Registers declaration support.
+     * @param handle Provider handle
+     * @param selector Document selector
+     */
+    fun registerDeclarationSupport(handle: Int, selector: List<Map<String, Any?>>)
+
+    /**
+     * Registers implementation support.
+     * @param handle Provider handle
+     * @param selector Document selector
+     */
+    fun registerImplementationSupport(handle: Int, selector: List<Map<String, Any?>>)
+
+    /**
+     * Registers type definition support.
+     * @param handle Provider handle
+     * @param selector Document selector
+     */
+    fun registerTypeDefinitionSupport(handle: Int, selector: List<Map<String, Any?>>)
+
+    /**
+     * Registers hover provider.
+     * @param handle Provider handle
+     * @param selector Document selector
+     */
+    fun registerHoverProvider(handle: Int, selector: List<Map<String, Any?>>)
+
+    /**
+     * Registers evaluatable expression provider.
+     * @param handle Provider handle
+     * @param selector Document selector
+     */
+    fun registerEvaluatableExpressionProvider(handle: Int, selector: List<Map<String, Any?>>)
+
+    /**
+     * Registers inline values provider.
+     * @param handle Provider handle
+     * @param selector Document selector
+     * @param eventHandle Event handle
+     */
+    fun registerInlineValuesProvider(handle: Int, selector: List<Map<String, Any?>>, eventHandle: Int?)
+
+    /**
+     * Emits inline values event.
+     * @param eventHandle Event handle
+     * @param event Event content
+     */
+    fun emitInlineValuesEvent(eventHandle: Int, event: Any?)
+
+    /**
+     * Registers document highlight provider.
+     * @param handle Provider handle
+     * @param selector Document selector
+     */
+    fun registerDocumentHighlightProvider(handle: Int, selector: List<Map<String, Any?>>)
+
+    /**
+     * Registers multi-document highlight provider.
+     * @param handle Provider handle
+     * @param selector Document selector
+     */
+    fun registerMultiDocumentHighlightProvider(handle: Int, selector: List<Map<String, Any?>>)
+
+    /**
+     * Registers linked editing range provider.
+     * @param handle Provider handle
+     * @param selector Document selector
+     */
+    fun registerLinkedEditingRangeProvider(handle: Int, selector: List<Map<String, Any?>>)
+
+    /**
+     * Registers reference support.
+     * @param handle Provider handle
+     * @param selector Document selector
+     */
+    fun registerReferenceSupport(handle: Int, selector: List<Map<String, Any?>>)
+
+    /**
+     * Registers code action support.
+     * @param handle Provider handle
+     * @param selector Document selector
+     * @param metadata Metadata
+     * @param displayName Display name
+     * @param extensionID Extension ID
+     * @param supportsResolve Whether to support resolve
+     */
+    fun registerCodeActionSupport(
+        handle: Int,
+        selector: List<Map<String, Any?>>,
+        metadata: Map<String, Any?>,
+        displayName: String,
+        extensionID: String,
+        supportsResolve: Boolean
+    )
+
+    /**
+     * Registers paste edit provider.
+     * @param handle Provider handle
+     * @param selector Document selector
+     * @param metadata Metadata
+     */
+    fun registerPasteEditProvider(
+        handle: Int,
+        selector: List<Map<String, Any?>>,
+        metadata: Map<String, Any?>
+    )
+
+    /**
+     * Registers document formatting support.
+     * @param handle Provider handle
+     * @param selector Document selector
+     * @param extensionId Extension ID
+     * @param displayName Display name
+     */
+    fun registerDocumentFormattingSupport(
+        handle: Int,
+        selector: List<Map<String, Any?>>,
+        extensionId: ExtensionIdentifier,
+        displayName: String
+    )
+
+    /**
+     * Registers range formatting support.
+     * @param handle Provider handle
+     * @param selector Document selector
+     * @param extensionId Extension ID
+     * @param displayName Display name
+     * @param supportRanges Whether to support ranges
+     */
+    fun registerRangeFormattingSupport(
+        handle: Int,
+        selector: List<Map<String, Any?>>,
+        extensionId: ExtensionIdentifier,
+        displayName: String,
+        supportRanges: Boolean
+    )
+
+    /**
+     * Registers on-type formatting support.
+     * @param handle Provider handle
+     * @param selector Document selector
+     * @param autoFormatTriggerCharacters Auto-format trigger characters
+     * @param extensionId Extension ID
+     */
+    fun registerOnTypeFormattingSupport(
+        handle: Int,
+        selector: List<Map<String, Any?>>,
+        autoFormatTriggerCharacters: List<String>,
+        extensionId: ExtensionIdentifier
+    )
+
+    /**
+     * Registers navigate type support.
+     * @param handle Provider handle
+     * @param supportsResolve Whether to support resolve
+     */
+    fun registerNavigateTypeSupport(handle: Int, supportsResolve: Boolean)
+
+    /**
+     * Registers rename support.
+     * @param handle Provider handle
+     * @param selector Document selector
+     * @param supportsResolveInitialValues Whether to support resolve initial values
+     */
+    fun registerRenameSupport(handle: Int, selector: List<Map<String, Any?>>, supportsResolveInitialValues: Boolean)
+
+    /**
+     * Registers new symbol names provider.
+     * @param handle Provider handle
+     * @param selector Document selector
+     */
+    fun registerNewSymbolNamesProvider(handle: Int, selector: List<Map<String, Any?>>)
+
+    /**
+     * Registers document semantic tokens provider.
+     * @param handle Provider handle
+     * @param selector Document selector
+     * @param legend Legend
+     * @param eventHandle Event handle
+     */
+    fun registerDocumentSemanticTokensProvider(
+        handle: Int,
+        selector: List<Map<String, Any?>>,
+        legend: Map<String, Any?>,
+        eventHandle: Int?
+    )
+
+    /**
+     * Emits document semantic tokens event.
+     * @param eventHandle Event handle
+     */
+    fun emitDocumentSemanticTokensEvent(eventHandle: Int)
+
+    /**
+     * Registers document range semantic tokens provider.
+     * @param handle Provider handle
+     * @param selector Document selector
+     * @param legend Legend
+     */
+    fun registerDocumentRangeSemanticTokensProvider(
+        handle: Int,
+        selector: List<Map<String, Any?>>,
+        legend: Map<String, Any?>
+    )
+
+    /**
+     * Registers completions provider.
+     * @param handle Provider handle
+     * @param selector Document selector
+     * @param triggerCharacters Trigger characters
+     * @param supportsResolveDetails Whether to support resolve details
+     * @param extensionId Extension ID
+     */
+    fun registerCompletionsProvider(
+        handle: Int,
+        selector: List<Map<String, Any?>>,
+        triggerCharacters: List<String>,
+        supportsResolveDetails: Boolean,
+        extensionId: ExtensionIdentifier
+    )
+
+    /**
+     * Registers inline completions support.
+     * @param handle Provider handle
+     * @param selector Document selector
+     * @param supportsHandleDidShowCompletionItem Whether to support handle did show completion item
+     * @param extensionId Extension ID
+     * @param yieldsToExtensionIds Yields to extension IDs
+     * @param displayName Display name
+     * @param debounceDelayMs Debounce delay in milliseconds
+     */
+    fun registerInlineCompletionsSupport(
+        handle: Int,
+        selector: List<Map<String, Any?>>,
+        supportsHandleDidShowCompletionItem: Boolean,
+        extensionId: String,
+        yieldsToExtensionIds: List<String>,
+        displayName: String?,
+        debounceDelayMs: Int?
+    )
+
+    /**
+     * Registers inline edit provider.
+     * @param handle Provider handle
+     * @param selector Document selector
+     * @param extensionId Extension ID
+     * @param displayName Display name
+     */
+    fun registerInlineEditProvider(
+        handle: Int,
+        selector: List<Map<String, Any?>>,
+        extensionId: ExtensionIdentifier,
+        displayName: String
+    )
+
+    /**
+     * Registers signature help provider.
+     * @param handle Provider handle
+     * @param selector Document selector
+     * @param metadata Metadata
+     */
+    fun registerSignatureHelpProvider(
+        handle: Int,
+        selector: List<Map<String, Any?>>,
+        metadata: Map<String, Any?>
+    )
+
+    /**
+     * Registers inlay hints provider.
+     * @param handle Provider handle
+     * @param selector Document selector
+     * @param supportsResolve Whether to support resolve
+     * @param eventHandle Event handle
+     * @param displayName Display name
+     */
+    fun registerInlayHintsProvider(
+        handle: Int,
+        selector: List<Map<String, Any?>>,
+        supportsResolve: Boolean,
+        eventHandle: Int?,
+        displayName: String?
+    )
+
+    /**
+     * Emits inlay hints event.
+     * @param eventHandle Event handle
+     */
+    fun emitInlayHintsEvent(eventHandle: Int)
+
+    /**
+     * Registers document link provider.
+     * @param handle Provider handle
+     * @param selector Document selector
+     * @param supportsResolve Whether to support resolve
+     */
+    fun registerDocumentLinkProvider(
+        handle: Int,
+        selector: List<Map<String, Any?>>,
+        supportsResolve: Boolean
+    )
+
+    /**
+     * Registers document color provider.
+     * @param handle Provider handle
+     * @param selector Document selector
+     */
+    fun registerDocumentColorProvider(handle: Int, selector: List<Map<String, Any?>>)
+
+    /**
+     * Registers folding range provider.
+     * @param handle Provider handle
+     * @param selector Document selector
+     * @param extensionId Extension ID
+     * @param eventHandle Event handle
+     */
+    fun registerFoldingRangeProvider(
+        handle: Int,
+        selector: List<Map<String, Any?>>,
+        extensionId: ExtensionIdentifier,
+        eventHandle: Int?
+    )
+
+    /**
+     * Emits folding range event.
+     * @param eventHandle Event handle
+     * @param event Event content
+     */
+    fun emitFoldingRangeEvent(eventHandle: Int, event: Any?)
+
+    /**
+     * Registers selection range provider.
+     * @param handle Provider handle
+     * @param selector Document selector
+     */
+    fun registerSelectionRangeProvider(handle: Int, selector: List<Map<String, Any?>>)
+
+    /**
+     * Registers call hierarchy provider.
+     * @param handle Provider handle
+     * @param selector Document selector
+     */
+    fun registerCallHierarchyProvider(handle: Int, selector: List<Map<String, Any?>>)
+
+    /**
+     * Registers type hierarchy provider.
+     * @param handle Provider handle
+     * @param selector Document selector
+     */
+    fun registerTypeHierarchyProvider(handle: Int, selector: List<Map<String, Any?>>)
+
+    /**
+     * Registers document on drop edit provider.
+     * @param handle Provider handle
+     * @param selector Document selector
+     * @param metadata Metadata
+     */
+    fun registerDocumentOnDropEditProvider(
+        handle: Int,
+        selector: List<Map<String, Any?>>,
+        metadata: Map<String, Any?>?
+    )
+
+    /**
+     * Resolves paste file data.
+     * @param handle Provider handle
+     * @param requestId Request ID
+     * @param dataId Data ID
+     * @return File data
+     */
+    fun resolvePasteFileData(handle: Int, requestId: Int, dataId: String): ByteArray
+
+    /**
+     * Resolves document on drop file data.
+     * @param handle Provider handle
+     * @param requestId Request ID
+     * @param dataId Data ID
+     * @return File data
+     */
+    fun resolveDocumentOnDropFileData(handle: Int, requestId: Int, dataId: String): ByteArray
+
+    /**
+     * Sets language configuration.
+     * @param handle Provider handle
+     * @param languageId Language ID
+     * @param configuration Configuration
+     */
+    fun setLanguageConfiguration(handle: Int, languageId: String, configuration: Map<String, Any?>)
+}
+
+/**
+ * Language features related implementation class.
+ * This class implements the MainThreadLanguageFeaturesShape interface and provides
+ * concrete implementations for all language feature registration methods.
+ * It acts as a bridge between the extension host and the IDE's language services.
+ */
+class MainThreadLanguageFeatures : MainThreadLanguageFeaturesShape {
+    private val logger = Logger.getInstance(MainThreadLanguageFeatures::class.java)
+
+    override fun unregister(handle: Int) {
+        logger.info("Unregistering service: handle=$handle")
+    }
+
+    override fun registerDocumentSymbolProvider(handle: Int, selector: List<Map<String, Any?>>, label: String) {
+        logger.info("Registering document symbol provider: handle=$handle, selector=$selector, label=$label")
+    }
+
+    override fun registerCodeLensSupport(handle: Int, selector: List<Map<String, Any?>>, eventHandle: Int?) {
+        logger.info("Registering code lens support: handle=$handle, selector=$selector, eventHandle=$eventHandle")
+    }
+
+    override fun emitCodeLensEvent(eventHandle: Int, event: Any?) {
+        logger.info("Emitting code lens event: eventHandle=$eventHandle, event=$event")
+    }
+
+    override fun registerDefinitionSupport(handle: Int, selector: List<Map<String, Any?>>) {
+        logger.info("Registering definition support: handle=$handle, selector=$selector")
+    }
+
+    override fun registerDeclarationSupport(handle: Int, selector: List<Map<String, Any?>>) {
+        logger.info("Registering declaration support: handle=$handle, selector=$selector")
+    }
+
+    override fun registerImplementationSupport(handle: Int, selector: List<Map<String, Any?>>) {
+        logger.info("Registering implementation support: handle=$handle, selector=$selector")
+    }
+
+    override fun registerTypeDefinitionSupport(handle: Int, selector: List<Map<String, Any?>>) {
+        logger.info("Registering type definition support: handle=$handle, selector=$selector")
+    }
+
+    override fun registerHoverProvider(handle: Int, selector: List<Map<String, Any?>>) {
+        logger.info("Registering hover provider: handle=$handle, selector=$selector")
+    }
+
+    override fun registerEvaluatableExpressionProvider(handle: Int, selector: List<Map<String, Any?>>) {
+        logger.info("Registering evaluatable expression provider: handle=$handle, selector=$selector")
+    }
+
+    override fun registerInlineValuesProvider(handle: Int, selector: List<Map<String, Any?>>, eventHandle: Int?) {
+        logger.info("Registering inline values provider: handle=$handle, selector=$selector, eventHandle=$eventHandle")
+    }
+
+    override fun emitInlineValuesEvent(eventHandle: Int, event: Any?) {
+        logger.info("Emitting inline values event: eventHandle=$eventHandle, event=$event")
+    }
+
+    override fun registerDocumentHighlightProvider(handle: Int, selector: List<Map<String, Any?>>) {
+        logger.info("Registering document highlight provider: handle=$handle, selector=$selector")
+    }
+
+    override fun registerMultiDocumentHighlightProvider(handle: Int, selector: List<Map<String, Any?>>) {
+        logger.info("Registering multi-document highlight provider: handle=$handle, selector=$selector")
+    }
+
+    override fun registerLinkedEditingRangeProvider(handle: Int, selector: List<Map<String, Any?>>) {
+        logger.info("Registering linked editing range provider: handle=$handle, selector=$selector")
+    }
+
+    override fun registerReferenceSupport(handle: Int, selector: List<Map<String, Any?>>) {
+        logger.info("Registering reference support: handle=$handle, selector=$selector")
+    }
+
+    override fun registerCodeActionSupport(
+        handle: Int,
+        selector: List<Map<String, Any?>>,
+        metadata: Map<String, Any?>,
+        displayName: String,
+        extensionID: String,
+        supportsResolve: Boolean
+    ) {
+        logger.info("Registering code action support: handle=$handle, selector=$selector, metadata=$metadata, displayName=$displayName, extensionID=$extensionID, supportsResolve=$supportsResolve")
+    }
+
+    override fun registerPasteEditProvider(
+        handle: Int,
+        selector: List<Map<String, Any?>>,
+        metadata: Map<String, Any?>
+    ) {
+        logger.info("Registering paste edit provider: handle=$handle, selector=$selector, metadata=$metadata")
+    }
+
+    override fun registerDocumentFormattingSupport(
+        handle: Int,
+        selector: List<Map<String, Any?>>,
+        extensionId: ExtensionIdentifier,
+        displayName: String
+    ) {
+        logger.info("Registering document formatting support: handle=$handle, selector=$selector, extensionId=${extensionId.value}, displayName=$displayName")
+    }
+
+    override fun registerRangeFormattingSupport(
+        handle: Int,
+        selector: List<Map<String, Any?>>,
+        extensionId: ExtensionIdentifier,
+        displayName: String,
+        supportRanges: Boolean
+    ) {
+        logger.info("Registering range formatting support: handle=$handle, selector=$selector, extensionId=${extensionId.value}, displayName=$displayName, supportRanges=$supportRanges")
+    }
+
+    override fun registerOnTypeFormattingSupport(
+        handle: Int,
+        selector: List<Map<String, Any?>>,
+        autoFormatTriggerCharacters: List<String>,
+        extensionId: ExtensionIdentifier
+    ) {
+        logger.info("Registering on-type formatting support: handle=$handle, selector=$selector, autoFormatTriggerCharacters=$autoFormatTriggerCharacters, extensionId=${extensionId.value}")
+    }
+
+    override fun registerNavigateTypeSupport(handle: Int, supportsResolve: Boolean) {
+        logger.info("Registering navigate type support: handle=$handle, supportsResolve=$supportsResolve")
+    }
+
+    override fun registerRenameSupport(handle: Int, selector: List<Map<String, Any?>>, supportsResolveInitialValues: Boolean) {
+        logger.info("Registering rename support: handle=$handle, selector=$selector, supportsResolveInitialValues=$supportsResolveInitialValues")
+    }
+
+    override fun registerNewSymbolNamesProvider(handle: Int, selector: List<Map<String, Any?>>) {
+        logger.info("Registering new symbol names provider: handle=$handle, selector=$selector")
+    }
+
+    override fun registerDocumentSemanticTokensProvider(
+        handle: Int,
+        selector: List<Map<String, Any?>>,
+        legend: Map<String, Any?>,
+        eventHandle: Int?
+    ) {
+        logger.info("Registering document semantic tokens provider: handle=$handle, selector=$selector, legend=$legend, eventHandle=$eventHandle")
+    }
+
+    override fun emitDocumentSemanticTokensEvent(eventHandle: Int) {
+        logger.info("Emitting document semantic tokens event: eventHandle=$eventHandle")
+    }
+
+    override fun registerDocumentRangeSemanticTokensProvider(
+        handle: Int,
+        selector: List<Map<String, Any?>>,
+        legend: Map<String, Any?>
+    ) {
+        logger.info("Registering document range semantic tokens provider: handle=$handle, selector=$selector, legend=$legend")
+    }
+
+    override fun registerCompletionsProvider(
+        handle: Int,
+        selector: List<Map<String, Any?>>,
+        triggerCharacters: List<String>,
+        supportsResolveDetails: Boolean,
+        extensionId: ExtensionIdentifier
+    ) {
+        logger.info("Registering completions provider: handle=$handle, selector=$selector, triggerCharacters=$triggerCharacters, supportsResolveDetails=$supportsResolveDetails, extensionId=${extensionId.value}")
+    }
+
+    override fun registerInlineCompletionsSupport(
+        handle: Int,
+        selector: List<Map<String, Any?>>,
+        supportsHandleDidShowCompletionItem: Boolean,
+        extensionId: String,
+        yieldsToExtensionIds: List<String>,
+        displayName: String?,
+        debounceDelayMs: Int?
+    ) {
+        logger.info("Registering inline completions support: handle=$handle, selector=$selector, supportsHandleDidShowCompletionItem=$supportsHandleDidShowCompletionItem, extensionId=$extensionId, yieldsToExtensionIds=$yieldsToExtensionIds, displayName=$displayName, debounceDelayMs=$debounceDelayMs")
+    }
+
+    override fun registerInlineEditProvider(
+        handle: Int,
+        selector: List<Map<String, Any?>>,
+        extensionId: ExtensionIdentifier,
+        displayName: String
+    ) {
+        logger.info("Registering inline edit provider: handle=$handle, selector=$selector, extensionId=${extensionId.value}, displayName=$displayName")
+    }
+
+    override fun registerSignatureHelpProvider(
+        handle: Int,
+        selector: List<Map<String, Any?>>,
+        metadata: Map<String, Any?>
+    ) {
+        logger.info("Registering signature help provider: handle=$handle, selector=$selector, metadata=$metadata")
+    }
+
+    override fun registerInlayHintsProvider(
+        handle: Int,
+        selector: List<Map<String, Any?>>,
+        supportsResolve: Boolean,
+        eventHandle: Int?,
+        displayName: String?
+    ) {
+        logger.info("Registering inlay hints provider: handle=$handle, selector=$selector, supportsResolve=$supportsResolve, eventHandle=$eventHandle, displayName=$displayName")
+    }
+
+    override fun emitInlayHintsEvent(eventHandle: Int) {
+        logger.info("Emitting inlay hints event: eventHandle=$eventHandle")
+    }
+
+    override fun registerDocumentLinkProvider(
+        handle: Int,
+        selector: List<Map<String, Any?>>,
+        supportsResolve: Boolean
+    ) {
+        logger.info("Registering document link provider: handle=$handle, selector=$selector, supportsResolve=$supportsResolve")
+    }
+
+    override fun registerDocumentColorProvider(handle: Int, selector: List<Map<String, Any?>>) {
+        logger.info("Registering document color provider: handle=$handle, selector=$selector")
+    }
+
+    override fun registerFoldingRangeProvider(
+        handle: Int,
+        selector: List<Map<String, Any?>>,
+        extensionId: ExtensionIdentifier,
+        eventHandle: Int?
+    ) {
+        logger.info("Registering folding range provider: handle=$handle, selector=$selector, extensionId=${extensionId.value}, eventHandle=$eventHandle")
+    }
+
+    override fun emitFoldingRangeEvent(eventHandle: Int, event: Any?) {
+        logger.info("Emitting folding range event: eventHandle=$eventHandle, event=$event")
+    }
+
+    override fun registerSelectionRangeProvider(handle: Int, selector: List<Map<String, Any?>>) {
+        logger.info("Registering selection range provider: handle=$handle, selector=$selector")
+    }
+
+    override fun registerCallHierarchyProvider(handle: Int, selector: List<Map<String, Any?>>) {
+        logger.info("Registering call hierarchy provider: handle=$handle, selector=$selector")
+    }
+
+    override fun registerTypeHierarchyProvider(handle: Int, selector: List<Map<String, Any?>>) {
+        logger.info("Registering type hierarchy provider: handle=$handle, selector=$selector")
+    }
+
+    override fun registerDocumentOnDropEditProvider(
+        handle: Int,
+        selector: List<Map<String, Any?>>,
+        metadata: Map<String, Any?>?
+    ) {
+        logger.info("Registering document on drop edit provider: handle=$handle, selector=$selector, metadata=$metadata")
+    }
+
+    override fun resolvePasteFileData(handle: Int, requestId: Int, dataId: String): ByteArray {
+        logger.info("Resolving paste file data: handle=$handle, requestId=$requestId, dataId=$dataId")
+        return ByteArray(0) // Return empty array, actual implementation needs to handle real file data
+    }
+
+    override fun resolveDocumentOnDropFileData(handle: Int, requestId: Int, dataId: String): ByteArray {
+        logger.info("Resolving document on drop file data: handle=$handle, requestId=$requestId, dataId=$dataId")
+        return ByteArray(0) // Return empty array, actual implementation needs to handle real file data
+    }
+
+    override fun setLanguageConfiguration(handle: Int, languageId: String, configuration: Map<String, Any?>) {
+        logger.info("Setting language configuration: handle=$handle, languageId=$languageId, configuration=$configuration")
+    }
+
+    override fun dispose() {
+        logger.info("Disposing MainThreadLanguageFeatures resources")
+    }
+}
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadLanguageModelToolsShape.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadLanguageModelToolsShape.kt
new file mode 100644
index 000000000..e21bda127
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadLanguageModelToolsShape.kt
@@ -0,0 +1,126 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.actors
+
+import com.intellij.openapi.Disposable
+import com.intellij.openapi.diagnostic.Logger
+import ai.kilocode.jetbrains.plugin.SystemObjectProvider
+import kotlinx.coroutines.CoroutineScope
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.SupervisorJob
+import kotlinx.coroutines.cancel
+import com.intellij.openapi.diagnostic.logger
+import java.util.concurrent.ConcurrentHashMap
+
+/**
+ * Language model tools service interface.
+ * Corresponds to the MainThreadLanguageModelTools interface in VSCode.
+ */
+interface MainThreadLanguageModelToolsShape : Disposable {
+    /**
+     * Gets all available tool list.
+     */
+    fun getTools(): List<Map<String, Any?>>
+
+    /**
+     * Invokes the specified tool.
+     * @param dto Tool invocation parameters
+     * @param token Cancellation token
+     */
+    fun invokeTool(dto: Map<String, Any?>, token: Any? = null): Map<String, Any?>
+
+    /**
+     * Calculates the number of tokens for the given input.
+     * @param callId Call ID
+     * @param input Input content
+     * @param token Cancellation token
+     */
+    fun countTokensForInvocation(callId: String, input: String, token: Any?): Int
+
+    /**
+     * Registers a tool.
+     * @param id Tool ID
+     */
+    fun registerTool(id: String)
+
+    /**
+     * Unregisters a tool.
+     * @param name Tool name
+     */
+    fun unregisterTool(name: String)
+}
+
+/**
+ * Implementation of the language model tools service.
+ */
+class MainThreadLanguageModelTools : MainThreadLanguageModelToolsShape {
+    
+    private val logger = logger<MainThreadLanguageModelTools>()
+    private val tools = ConcurrentHashMap<String, ToolInfo>()
+
+    /**
+     * Tool information
+     */
+    private data class ToolInfo(
+        val id: String,
+        val registered: Boolean = true
+    )
+
+    override fun getTools(): List<Map<String, Any?>> {
+        logger.info("Get available language model tool list")
+        // Return the list of registered tools
+        return tools.values.filter { it.registered }.map {
+            mapOf("id" to it.id) 
+        }
+    }
+
+    override fun invokeTool(dto: Map<String, Any?>, token: Any?): Map<String, Any?> {
+        val toolId = dto["id"] as? String ?: throw IllegalArgumentException("Tool ID cannot be empty")
+        val params = dto["params"] ?: emptyMap<String, Any?>()
+        
+        logger.info("Invoke language model tool: $toolId")
+        val toolInfo = tools[toolId] ?: throw IllegalArgumentException("Tool with ID $toolId not found")
+        
+        if (!toolInfo.registered) {
+            throw IllegalStateException("Tool $toolId is not registered")
+        }
+        
+        // The actual tool should be invoked here. Currently returns a mock result.
+        // In the actual implementation, it may need to call the real tool in the extension process via RPC.
+        return mapOf(
+            "result" to "Tool $toolId invoked successfully",
+            "id" to toolId
+        )
+    }
+
+    override fun countTokensForInvocation(callId: String, input: String, token: Any?): Int {
+        logger.info("Calculate token count for tool invocation $callId")
+        
+        // The actual token count should be calculated here. Currently returns a mock result.
+        // In the actual implementation, it may need to use a specific algorithm or service to calculate the token count.
+        return input.length / 4 + 1 // Simple mock token calculation
+    }
+
+    override fun registerTool(id: String) {
+        logger.info("Register language model tool: $id")
+        
+        tools[id] = ToolInfo(id, true)
+    }
+
+    override fun unregisterTool(name: String) {
+        logger.info("Unregister language model tool: $name")
+        
+        if (tools.containsKey(name)) {
+            tools[name] = tools[name]!!.copy(registered = false)
+        } else {
+            logger.warn("Attempting to unregister non-existent tool: $name")
+        }
+    }
+    
+    override fun dispose() {
+        logger.info("Dispose MainThreadLanguageModelTools resources")
+        tools.clear()
+    }
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadLoggerShape.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadLoggerShape.kt
new file mode 100644
index 000000000..92191a7ef
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadLoggerShape.kt
@@ -0,0 +1,95 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.actors
+
+import com.intellij.openapi.Disposable
+import com.intellij.openapi.diagnostic.Logger
+import ai.kilocode.jetbrains.util.URI
+
+/**
+ * Main thread logger interface.
+ */
+interface MainThreadLoggerShape : Disposable {
+    /**
+     * Logs messages.
+     * @param file Log file URI
+     * @param messages List of log messages
+     */
+    fun log(file: URI, messages: List<String>)
+    
+    /**
+     * Flushes log.
+     * @param file Log file URI
+     */
+    fun flush(file: URI)
+    
+    /**
+     * Creates logger.
+     * @param file Log file URI
+     * @param options Log options
+     * @return Creation result
+     */
+    fun createLogger(file: URI, options: Map<String, Any?>): Any
+    
+    /**
+     * Registers logger.
+     * @param logger Logger information
+     * @return Registration result
+     */
+    fun registerLogger(logger: Map<String, Any?>): Any
+    
+    /**
+     * Deregisters logger.
+     * @param resource Resource URI
+     * @return Deregistration result
+     */
+    fun deregisterLogger(resource: String): Any
+    
+    /**
+     * Sets logger visibility.
+     * @param resource Resource URI
+     * @param visible Whether visible
+     * @return Setting result
+     */
+    fun setVisibility(resource: String, visible: Boolean): Any
+
+}
+
+class MainThreadLogger : MainThreadLoggerShape {
+    private val logger = Logger.getInstance(MainThreadLogger::class.java)
+
+    override fun log(file: URI, messages: List<String>) {
+        logger.info("Logging to file: $file")
+    }
+
+    override fun flush(file: URI) {
+        logger.info("Flushing log file: $file")
+    }
+
+    override fun createLogger(file: URI, options: Map<String, Any?>): Any {
+        logger.info("Creating logger for file: $file with options: $options")
+        return Unit // Placeholder for actual logger object
+    }
+
+    override fun registerLogger(log: Map<String, Any?>): Any {
+        logger.info("Registering logger: $log")
+        return Unit // Placeholder for actual registration result
+    }
+
+    override fun deregisterLogger(resource: String): Any {
+        logger.info("Deregistering logger for resource: $resource")
+        return Unit // Placeholder for actual deregistration result
+    }
+
+    override fun setVisibility(resource: String, visible: Boolean): Any {
+        logger.info("Setting visibility for resource: $resource to $visible")
+        return Unit // Placeholder for actual visibility result
+    }
+
+    override fun dispose() {
+        logger.info("Disposing MainThreadLogger")
+    }
+
+}
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadMessageServiceShape.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadMessageServiceShape.kt
new file mode 100644
index 000000000..160f7161a
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadMessageServiceShape.kt
@@ -0,0 +1,114 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.actors
+
+import com.intellij.notification.NotificationGroupManager
+import com.intellij.notification.NotificationType
+import com.intellij.openapi.Disposable
+import com.intellij.openapi.diagnostic.Logger
+import com.intellij.openapi.project.ProjectManager
+import com.intellij.openapi.ui.Messages
+import com.intellij.openapi.application.ApplicationManager
+import java.util.concurrent.atomic.AtomicReference
+
+interface MainThreadMessageServiceShape : Disposable {
+    //    $showMessage(severity: Severity, message: string, options: MainThreadMessageOptions, commands: { title: string; isCloseAffordance: boolean; handle: number }[]): Promise<number | undefined>;
+    fun showMessage(severity: Int, message: String, options: Map<String, Any>, commands: List<Map<String, Any>>): Int?
+}
+
+class MainThreadMessageService : MainThreadMessageServiceShape {
+    private val logger = Logger.getInstance(MainThreadMessageService::class.java)
+
+    override fun showMessage(
+        severity: Int,
+        message: String,
+        options: Map<String, Any>,
+        commands: List<Map<String, Any>>
+    ): Int? {
+        logger.info("showMessage - severity: $severity, message: $message, options: $options, commands: $commands")
+
+        val project = ProjectManager.getInstance().defaultProject
+        val isModal = options["modal"] as? Boolean ?: false
+        val detail = options["detail"] as? String
+        return if (isModal) {
+            showModalMessage(project, severity, message, detail, options, commands)
+        } else {
+            showNotificationMessage(project, severity, message)
+            null
+        }
+    }
+
+    private fun showModalMessage(
+        project: com.intellij.openapi.project.Project,
+        severity: Int,
+        message: String,
+        detail: String?,
+        options: Map<String, Any>,
+        commands: List<Map<String, Any>>
+    ): Int? {
+        // Find if there's a button with isCloseAffordance=true as cancel button
+        var cancelIdx = commands.indexOfFirst { it["isCloseAffordance"] == true }
+        // If no cancel button, automatically add a "Cancel" button at the end
+        val commandsWithCancel = if (cancelIdx < 0) {
+            val cancelHandle = commands.size
+            commands + mapOf("title" to "Cancel", "handle" to cancelHandle, "isCloseAffordance" to true)
+        } else {
+            commands
+        }
+        // Button title array for dialog buttons
+        val buttonTitles = commandsWithCancel.map { it["title"].toString() }
+        // Establish mapping from button index to handle for returning handle later
+        val handleMap = commandsWithCancel.mapIndexed { idx, cmd -> idx to (cmd["handle"] as? Number)?.toInt() }.toMap()
+        // Re-find the index of cancel button
+        val cancelIdxFinal = commandsWithCancel.indexOfFirst { it["isCloseAffordance"] == true }
+        // Assemble dialog main message and subtitle
+        val dialogMessage = if (detail.isNullOrBlank()) message else "$message\n\n$detail"
+        // For thread-safe retrieval of user-selected button index
+        val selectedIdxRef = AtomicReference<Int>()
+        // Ensure UI operations execute on EDT thread, show modal dialog
+        ApplicationManager.getApplication().invokeAndWait {
+            val selectedIdx = Messages.showDialog(
+                project,
+                dialogMessage,
+                options["source"]?.let { (it as? Map<*, *>)?.get("label")?.toString() } ?: "kilocode",
+                buttonTitles.toTypedArray(),
+                if (cancelIdxFinal >= 0) cancelIdxFinal else 0,
+                // Choose different icons based on severity
+                when (severity) {
+                    1 -> Messages.getInformationIcon()
+                    2 -> Messages.getWarningIcon()
+                    3 -> Messages.getErrorIcon()
+                    else -> Messages.getInformationIcon()
+                }
+            )
+            selectedIdxRef.set(selectedIdx)
+        }
+        // Get user-clicked button index and return corresponding handle
+        val selectedIdx = selectedIdxRef.get()
+        return if (selectedIdx != null && selectedIdx >= 0) handleMap[selectedIdx] else null
+    }
+
+    private fun showNotificationMessage(
+        project: com.intellij.openapi.project.Project,
+        severity: Int,
+        message: String
+    ) {
+        val notificationType = when (severity) {
+            1 -> NotificationType.INFORMATION
+            2 -> NotificationType.WARNING
+            3 -> NotificationType.ERROR
+            else -> NotificationType.INFORMATION
+        }
+        val notification = NotificationGroupManager.getInstance().getNotificationGroup("kilocode").createNotification(
+            message,
+            notificationType
+        )
+        notification.notify(project)
+    }
+
+    override fun dispose() {
+        logger.info("dispose")
+    }
+}
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadOutputServiceShape.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadOutputServiceShape.kt
new file mode 100644
index 000000000..22f696b71
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadOutputServiceShape.kt
@@ -0,0 +1,114 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.actors
+
+import com.intellij.openapi.Disposable
+import com.intellij.openapi.diagnostic.Logger
+import ai.kilocode.jetbrains.util.URI
+
+/**
+ * Main thread output service interface.
+ * Corresponds to the MainThreadOutputServiceShape interface in VSCode.
+ */
+interface MainThreadOutputServiceShape : Disposable {
+    /**
+     * Registers output channel.
+     * @param label Label
+     * @param file File URI components
+     * @param languageId Language ID
+     * @param extensionId Extension ID
+     * @return Channel ID
+     */
+    suspend fun register(label: String, file: Map<String, Any>, languageId: String?, extensionId: String): String
+    
+    /**
+     * Updates output channel.
+     * @param channelId Channel ID
+     * @param mode Update mode
+     * @param till Update to specified position
+     */
+    suspend fun update(channelId: String, mode: Int, till: Int? = null)
+    
+    /**
+     * Reveals output channel.
+     * @param channelId Channel ID
+     * @param preserveFocus Whether to preserve focus
+     */
+    suspend fun reveal(channelId: String, preserveFocus: Boolean)
+    
+    /**
+     * Closes output channel.
+     * @param channelId Channel ID
+     */
+    suspend fun close(channelId: String)
+    
+    /**
+     * Disposes output channel.
+     * @param channelId Channel ID
+     */
+    suspend fun dispose(channelId: String)
+}
+
+/**
+ * Implementation of the main thread output service.
+ */
+class MainThreadOutputService : MainThreadOutputServiceShape {
+    private val logger = Logger.getInstance(MainThreadOutputService::class.java)
+
+    /**
+     * Registers output channel.
+     * @param label Label
+     * @param file File URI components
+     * @param languageId Language ID
+     * @param extensionId Extension ID
+     * @return Channel ID
+     */
+    override suspend fun register(label: String, file: Map<String, Any>, languageId: String?, extensionId: String): String {
+        logger.info("Register output channel: label=$label, file=$file, extensionId=$extensionId")
+        return label // Use label as channel ID
+    }
+    
+    /**
+     * Updates output channel.
+     * @param channelId Channel ID
+     * @param mode Update mode
+     * @param till Update to specified position
+     */
+    override suspend fun update(channelId: String, mode: Int, till: Int?) {
+        logger.info("Update output channel: channelId=$channelId, mode=$mode, till=$till")
+    }
+    
+    /**
+     * Reveals output channel.
+     * @param channelId Channel ID
+     * @param preserveFocus Whether to preserve focus
+     */
+    override suspend fun reveal(channelId: String, preserveFocus: Boolean) {
+        logger.info("Reveal output channel: channelId=$channelId, preserveFocus=$preserveFocus")
+    }
+    
+    /**
+     * Closes output channel.
+     * @param channelId Channel ID
+     */
+    override suspend fun close(channelId: String) {
+        logger.info("Close output channel: channelId=$channelId")
+    }
+    
+    /**
+     * Disposes output channel.
+     * @param channelId Channel ID
+     */
+    override suspend fun dispose(channelId: String) {
+        logger.info("Disposing output channel: channelId=$channelId")
+    }
+
+    /**
+     * Dispose all resources
+     */
+    override fun dispose() {
+        logger.info("Disposing all output channel resources")
+    }
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadSearchShape.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadSearchShape.kt
new file mode 100644
index 000000000..9ef5c7eb6
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadSearchShape.kt
@@ -0,0 +1,169 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.actors
+
+import com.intellij.openapi.Disposable
+import com.intellij.openapi.diagnostic.Logger
+import java.net.URI
+
+/**
+ * Main thread search service interface.
+ * Corresponds to the MainThreadSearchShape interface in VSCode.
+ */
+interface MainThreadSearchShape : Disposable {
+    /**
+     * Registers file search provider.
+     * @param handle Provider ID
+     * @param scheme Scheme
+     */
+    fun registerFileSearchProvider(handle: Int, scheme: String)
+    
+    /**
+     * Registers AI text search provider.
+     * @param handle Provider ID
+     * @param scheme Scheme
+     */
+    fun registerAITextSearchProvider(handle: Int, scheme: String)
+    
+    /**
+     * Registers text search provider.
+     * @param handle Provider ID
+     * @param scheme Scheme
+     */
+    fun registerTextSearchProvider(handle: Int, scheme: String)
+    
+    /**
+     * Unregisters provider.
+     * @param handle Provider ID
+     */
+    fun unregisterProvider(handle: Int)
+    
+    /**
+     * Handles file match.
+     * @param handle Provider ID
+     * @param session Session ID
+     * @param data List of URI components
+     */
+    fun handleFileMatch(handle: Int, session: Int, data: List<Map<String, Any?>>)
+    
+    /**
+     * Handles text match.
+     * @param handle Provider ID
+     * @param session Session ID
+     * @param data Raw file match data
+     */
+    fun handleTextMatch(handle: Int, session: Int, data: List<Map<String, Any?>>)
+    
+    /**
+     * Handles telemetry data.
+     * @param eventName Event name
+     * @param data Telemetry data
+     */
+    fun handleTelemetry(eventName: String, data: Any?)
+}
+
+/**
+ * Implementation of the main thread search service.
+ * Provides search-related functionality for the IDEA platform.
+ */
+class MainThreadSearch : MainThreadSearchShape {
+    private val logger = Logger.getInstance(MainThreadSearch::class.java)
+    private val searchProviders = mutableMapOf<Int, String>()
+    private val fileSessions = mutableMapOf<Int, MutableList<URI>>()
+    private val textSessions = mutableMapOf<Int, MutableList<Map<String, Any?>>>()
+
+    override fun registerFileSearchProvider(handle: Int, scheme: String) {
+        try {
+            logger.info("Registering file search provider: handle=$handle, scheme=$scheme")
+            searchProviders[handle] = "file:$scheme"
+        } catch (e: Exception) {
+            logger.error("Failed to register file search provider", e)
+        }
+    }
+
+    override fun registerAITextSearchProvider(handle: Int, scheme: String) {
+        try {
+            logger.info("Registering AI text search provider: handle=$handle, scheme=$scheme")
+            searchProviders[handle] = "aitext:$scheme"
+        } catch (e: Exception) {
+            logger.error("Failed to register AI text search provider", e)
+        }
+    }
+
+    override fun registerTextSearchProvider(handle: Int, scheme: String) {
+        try {
+            logger.info("Registering text search provider: handle=$handle, scheme=$scheme")
+            searchProviders[handle] = "text:$scheme"
+        } catch (e: Exception) {
+            logger.error("Failed to register text search provider", e)
+        }
+    }
+
+    override fun unregisterProvider(handle: Int) {
+        try {
+            logger.info("Unregistering provider: handle=$handle")
+            searchProviders.remove(handle)
+        } catch (e: Exception) {
+            logger.error("Failed to unregister search provider", e)
+        }
+    }
+
+    override fun handleFileMatch(handle: Int, session: Int, data: List<Map<String, Any?>>) {
+        try {
+            logger.info("Handling file match: handle=$handle, session=$session, matches=${data.size}")
+            
+            // Convert URI components to URI
+            val uris = data.mapNotNull { uriComponents ->
+                try {
+                    val scheme = uriComponents["scheme"] as? String ?: return@mapNotNull null
+                    val authority = uriComponents["authority"] as? String ?: ""
+                    val path = uriComponents["path"] as? String ?: return@mapNotNull null
+                    val query = uriComponents["query"] as? String ?: ""
+                    val fragment = uriComponents["fragment"] as? String ?: ""
+                    
+                    URI(scheme, authority, path, query, fragment)
+                } catch (e: Exception) {
+                    logger.warn("Failed to convert URI components: $uriComponents", e)
+                    null
+                }
+            }
+            
+            // Store match results
+            fileSessions.getOrPut(session) { mutableListOf() }.addAll(uris)
+            
+            // TODO: Actual implementation should display these results in IDEA's search results panel
+        } catch (e: Exception) {
+            logger.error("Failed to handle file match", e)
+        }
+    }
+
+    override fun handleTextMatch(handle: Int, session: Int, data: List<Map<String, Any?>>) {
+        try {
+            logger.info("Handling text match: handle=$handle, session=$session, matches=${data.size}")
+            
+            // Store match results
+            textSessions.getOrPut(session) { mutableListOf() }.addAll(data)
+            
+            // TODO: Actual implementation should display these results in IDEA's search results panel, including highlighting matched text
+        } catch (e: Exception) {
+            logger.error("Failed to handle text match", e)
+        }
+    }
+
+    override fun handleTelemetry(eventName: String, data: Any?) {
+        try {
+            logger.info("Handling telemetry: event=$eventName, data=$data")
+        } catch (e: Exception) {
+            logger.error("Failed to handle telemetry data", e)
+        }
+    }
+
+    override fun dispose() {
+        logger.info("Disposing MainThreadSearch")
+        searchProviders.clear()
+        fileSessions.clear()
+        textSessions.clear()
+    }
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadSecretStateShape.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadSecretStateShape.kt
new file mode 100644
index 000000000..096f0ecb5
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadSecretStateShape.kt
@@ -0,0 +1,150 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.actors
+
+import com.google.gson.Gson
+import com.google.gson.GsonBuilder
+import com.google.gson.JsonObject
+import com.google.gson.JsonParser
+import com.intellij.openapi.Disposable
+import com.intellij.openapi.diagnostic.Logger
+import kotlinx.coroutines.sync.Mutex
+import kotlinx.coroutines.sync.withLock
+import java.io.File
+import java.nio.file.Files
+import java.nio.file.Paths
+import java.nio.file.StandardOpenOption
+
+/**
+ * Secret state management service interface.
+ */
+interface MainThreadSecretStateShape : Disposable {
+    /**
+     * Gets the secret.
+     * @param extensionId Extension ID
+     * @param key Secret key identifier
+     * @return Secret value, returns null if not exists
+     */
+    suspend fun getPassword(extensionId: String, key: String): String?
+
+    /**
+     * Sets the secret.
+     * @param extensionId Extension ID
+     * @param key Secret key identifier
+     * @param value Secret value
+     */
+    suspend fun setPassword(extensionId: String, key: String, value: String)
+
+    /**
+     * Deletes the secret.
+     * @param extensionId Extension ID
+     * @param key Secret key identifier
+     */
+    suspend fun deletePassword(extensionId: String, key: String)
+}
+
+/**
+ * Implementation of the secret state management service.
+ * Stores secrets in ~/.roo-cline/secrets.json file.
+ */
+class MainThreadSecretState : MainThreadSecretStateShape {
+    private val logger = Logger.getInstance(MainThreadSecretState::class.java)
+    private val gson = GsonBuilder().setPrettyPrinting().create()
+    private val mutex = Mutex()
+    
+    // Configuration file path
+    private val secretsDir = File(System.getProperty("user.home"), ".roo-cline")
+    private val secretsFile = File(secretsDir, "secrets.json")
+    
+    init {
+        // Ensure the directory exists
+        if (!secretsDir.exists()) {
+            secretsDir.mkdirs()
+            logger.info("Create secret storage directory: ${secretsDir.absolutePath}")
+        }
+    }
+
+    override suspend fun getPassword(extensionId: String, key: String): String? = mutex.withLock {
+        try {
+            if (!secretsFile.exists()) {
+                return null
+            }
+            
+            val jsonContent = secretsFile.readText()
+            if (jsonContent.isBlank()) {
+                return null
+            }
+            
+            val jsonObject = JsonParser.parseString(jsonContent).asJsonObject
+            val extensionObject = jsonObject.getAsJsonObject(extensionId) ?: return null
+            val passwordElement = extensionObject.get(key) ?: return null
+            
+            return passwordElement.asString
+        } catch (e: Exception) {
+            logger.warn("Failed to get secret: extensionId=$extensionId, key=$key", e)
+            return null
+        }
+    }
+
+    override suspend fun setPassword(extensionId: String, key: String, value: String) = mutex.withLock {
+        try {
+            val jsonObject = if (secretsFile.exists() && secretsFile.readText().isNotBlank()) {
+                JsonParser.parseString(secretsFile.readText()).asJsonObject
+            } else {
+                JsonObject()
+            }
+            
+            val extensionObject = jsonObject.getAsJsonObject(extensionId) ?: JsonObject().also {
+                jsonObject.add(extensionId, it)
+            }
+            
+            extensionObject.addProperty(key, value)
+            
+            val jsonString = gson.toJson(jsonObject)
+            secretsFile.writeText(jsonString)
+            
+            logger.info("Successfully set secret: extensionId=$extensionId, key=$key")
+        } catch (e: Exception) {
+            logger.error("Failed to set secret: extensionId=$extensionId, key=$key", e)
+            throw e
+        }
+    }
+
+    override suspend fun deletePassword(extensionId: String, key: String) = mutex.withLock {
+        try {
+            if (!secretsFile.exists()) {
+                return
+            }
+            
+            val jsonContent = secretsFile.readText()
+            if (jsonContent.isBlank()) {
+                return
+            }
+            
+            val jsonObject = JsonParser.parseString(jsonContent).asJsonObject
+            val extensionObject = jsonObject.getAsJsonObject(extensionId) ?: return
+            
+            extensionObject.remove(key)
+            
+            // If extension object is empty, delete the entire extension
+            if (extensionObject.size() == 0) {
+                jsonObject.remove(extensionId)
+            }
+            
+            val jsonString = gson.toJson(jsonObject)
+            secretsFile.writeText(jsonString)
+            
+            logger.info("Successfully deleted secret: extensionId=$extensionId, key=$key")
+        } catch (e: Exception) {
+            logger.error("Failed to delete secret: extensionId=$extensionId, key=$key", e)
+            throw e
+        }
+    }
+
+    override fun dispose() {
+        logger.info("Disposing MainThreadSecretState resources")
+        // JSON file storage doesn't require special resource disposal
+    }
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadStorageShape.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadStorageShape.kt
new file mode 100644
index 000000000..1daedaf6d
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadStorageShape.kt
@@ -0,0 +1,71 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.actors
+
+import com.intellij.openapi.Disposable
+import com.intellij.openapi.components.service
+import com.intellij.openapi.diagnostic.Logger
+import ai.kilocode.jetbrains.service.ExtensionStorageService
+
+/**
+ * Main thread storage service interface.
+ */
+interface MainThreadStorageShape : Disposable {
+    /**
+     * Initializes extension storage.
+     * @param shared Whether shared
+     * @param extensionId Extension ID
+     * @return Initialization result
+     */
+    fun initializeExtensionStorage(shared: Boolean, extensionId: String): Any?
+    
+    /**
+     * Sets value.
+     * @param shared Whether shared
+     * @param extensionId Extension ID
+     * @param value Value object
+     * @return Set result
+     */
+    fun setValue(shared: Boolean, extensionId: String, value: Any)
+    
+    /**
+     * Registers extension storage keys for synchronization.
+     * @param extension Extension ID and version
+     * @param keys List of keys
+     */
+    fun registerExtensionStorageKeysToSync(extension: Any, keys: List<String>)
+}
+
+/**
+ * Implementation of the main thread storage service.
+ */
+class MainThreadStorage : MainThreadStorageShape {
+    private val logger = Logger.getInstance(MainThreadStorage::class.java)
+
+    override fun initializeExtensionStorage(shared: Boolean, extensionId: String): Any? {
+        logger.info("Initializing extension storage: shared=$shared, extensionId=$extensionId")
+        val storage = service<ExtensionStorageService>()
+        return storage.getValue(extensionId)
+    }
+    
+    override fun setValue(shared: Boolean, extensionId: String, value: Any) {
+//        logger.info("Setting value: shared=$shared, extensionId=$extensionId, value=$value")
+        val storage = service<ExtensionStorageService>()
+        storage.setValue(extensionId, value)
+    }
+    
+    override fun registerExtensionStorageKeysToSync(extension: Any, keys: List<String>) {
+        val extensionId = if (extension is Map<*, *>) {
+            "${extension["id"]}_${extension["version"]}"
+        } else {
+            "$extension"
+        }
+        logger.info("Registering extension storage keys for sync: extension=$extensionId, keys=$keys")
+    }
+
+    override fun dispose() {
+        logger.info("Dispose MainThreadStorage")
+    }
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadTaskShape.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadTaskShape.kt
new file mode 100644
index 000000000..aec26f158
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadTaskShape.kt
@@ -0,0 +1,223 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.actors
+
+import com.intellij.openapi.Disposable
+import com.intellij.openapi.diagnostic.Logger
+import ai.kilocode.jetbrains.plugin.SystemObjectProvider
+import kotlinx.coroutines.CoroutineScope
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.SupervisorJob
+import kotlinx.coroutines.cancel
+import kotlinx.coroutines.future.future
+import java.util.concurrent.CompletableFuture
+
+/**
+ * Main thread task service interface.
+ * Corresponds to the MainThreadTaskShape interface in VSCode.
+ */
+interface MainThreadTaskShape : Disposable {
+    /**
+     * Creates task ID.
+     * @param task Task DTO
+     * @return Task ID
+     */
+    fun createTaskId(task: Map<String, Any?>): String
+    
+    /**
+     * Registers task provider.
+     * @param handle Provider ID
+     * @param type Task type
+     */
+    fun registerTaskProvider(handle: Int, type: String)
+    
+    /**
+     * Unregisters task provider.
+     * @param handle Provider ID
+     */
+    fun unregisterTaskProvider(handle: Int)
+    
+    /**
+     * Fetches task list.
+     * @param filter Task filter
+     * @return Task list
+     */
+    fun fetchTasks(filter: Map<String, Any?>?): List<Map<String, Any?>>
+    
+    /**
+     * Gets task execution instance.
+     * @param value Task handle or task DTO
+     * @return Task execution DTO
+     */
+    fun getTaskExecution(value: Map<String, Any?>): Map<String, Any?>
+    
+    /**
+     * Executes task.
+     * @param task Task handle or task DTO
+     * @return Task execution DTO
+     */
+    fun executeTask(task: Map<String, Any?>): Map<String, Any?>
+    
+    /**
+     * Terminates task.
+     * @param id Task ID
+     */
+    fun terminateTask(id: String)
+    
+    /**
+     * Registers task system.
+     * @param scheme Scheme
+     * @param info Task system information
+     */
+    fun registerTaskSystem(scheme: String, info: Map<String, Any?>)
+    
+    /**
+     * Custom execution complete.
+     * @param id Task ID
+     * @param result Execution result
+     */
+    fun customExecutionComplete(id: String, result: Int?)
+    
+    /**
+     * Registers supported execution types.
+     * @param custom Whether supports custom execution
+     * @param shell Whether supports shell execution
+     * @param process Whether supports process execution
+     */
+    fun registerSupportedExecutions(custom: Boolean?, shell: Boolean?, process: Boolean?)
+}
+
+/**
+ * Implementation of the main thread task service.
+ * Provides task-related functionality for the IDEA platform.
+ */
+class MainThreadTask : MainThreadTaskShape {
+    private val logger = Logger.getInstance(MainThreadTask::class.java)
+    private val taskProviders = mutableMapOf<Int, String>()
+    private val taskExecutions = mutableMapOf<String, Map<String, Any?>>()
+    
+    override fun createTaskId(task: Map<String, Any?>):String {
+        try {
+            logger.info("Creating task ID for task: $task")
+            val id = "task-${System.currentTimeMillis()}-${task.hashCode()}"
+            logger.debug("Generated task ID: $id")
+            return id
+        } catch (e: Exception) {
+            logger.error("Failed to create task ID", e)
+            throw e
+        }
+    }
+
+    override fun registerTaskProvider(handle: Int, type: String) {
+        try {
+            logger.info("Registering task provider: handle=$handle, type=$type")
+            taskProviders[handle] = type
+        } catch (e: Exception) {
+            logger.error("Failed to register task provider", e)
+        }
+    }
+
+    override fun unregisterTaskProvider(handle: Int) {
+        try {
+            logger.info("Unregistering task provider: handle=$handle")
+            taskProviders.remove(handle)
+        } catch (e: Exception) {
+            logger.error("Failed to unregister task provider", e)
+        }
+    }
+
+    override fun fetchTasks(filter: Map<String, Any?>?): List<Map<String, Any?>> {
+        try {
+            logger.info("Fetching tasks with filter: $filter")
+            // TODO: Actual implementation should query IDEA's task system
+            return emptyList()
+        } catch (e: Exception) {
+            logger.error("Failed to get tasks", e)
+            throw e
+        }
+    }
+
+    override fun getTaskExecution(value: Map<String, Any?>): Map<String, Any?> {
+        try {
+            val taskId = value["id"] as? String ?: value["taskId"] as? String
+            logger.info("Getting task execution for task: $taskId")
+            
+            // Create a simple task execution DTO
+            return mapOf(
+                "id" to (taskId ?: "unknown-task"),
+                "task" to value,
+                "active" to false
+            )
+        } catch (e: Exception) {
+            logger.error("Failed to get task execution", e)
+            throw e
+        }
+    }
+
+    override fun executeTask(task: Map<String, Any?>):Map<String, Any?> {
+        try {
+            val taskId = task["id"] as? String ?: task["taskId"] as? String ?: "unknown-task"
+            logger.info("Executing task: $taskId")
+            
+            // Create an executing task execution DTO
+            val execution = mapOf(
+                "id" to taskId,
+                "task" to task,
+                "active" to true
+            )
+            
+            // Store task execution information
+            taskExecutions[taskId] = execution
+            return execution
+        } catch (e: Exception) {
+            logger.error("Failed to execute task", e)
+            throw e
+        }
+    }
+
+    override fun terminateTask(id: String) {
+        try {
+            logger.info("Terminating task: $id")
+            taskExecutions.remove(id)
+        } catch (e: Exception) {
+            logger.error("Failed to terminate task", e)
+        }
+    }
+
+    override fun registerTaskSystem(scheme: String, info: Map<String, Any?>) {
+        try {
+            logger.info("Registering task system: scheme=$scheme, info=$info")
+            // Register task system
+        } catch (e: Exception) {
+            logger.error("Failed to register task system", e)
+        }
+    }
+
+    override fun customExecutionComplete(id: String, result: Int?) {
+        try {
+            logger.info("Custom execution complete for task: $id with result: $result")
+            // Update task execution status
+            taskExecutions[id]?.let { execution ->
+                taskExecutions[id] = execution + ("active" to false)
+            }
+        } catch (e: Exception) {
+            logger.error("Failed to update custom execution completion status", e)
+        }
+    }
+
+    override fun registerSupportedExecutions(custom: Boolean?, shell: Boolean?, process: Boolean?) {
+        try {
+            logger.info("Registering supported executions: custom=$custom, shell=$shell, process=$process")
+        } catch (e: Exception) {
+            logger.error("Failed to register supported execution types", e)
+        }
+    }
+
+    override fun dispose() {
+        logger.info("Disposing MainThreadTask")
+        taskProviders.clear()
+        taskExecutions.clear()
+    }
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadTelemetryShape.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadTelemetryShape.kt
new file mode 100644
index 000000000..4c3e7d4ee
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadTelemetryShape.kt
@@ -0,0 +1,43 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.actors
+
+import com.intellij.openapi.Disposable
+import com.intellij.openapi.diagnostic.Logger
+
+/**
+ * Main thread telemetry service interface.
+ */
+interface MainThreadTelemetryShape : Disposable {
+    /**
+     * Logs public event.
+     * @param eventName Event name
+     * @param data Event data
+     */
+    fun publicLog(eventName: String, data: Any?)
+    
+    /**
+     * Logs public event (supports categorized events).
+     * @param eventName Event name
+     * @param data Event data
+     */
+    fun publicLog2(eventName: String, data: Any?)
+}
+
+class MainThreadTelemetry : MainThreadTelemetryShape {
+    private val logger = Logger.getInstance(MainThreadTelemetry::class.java)
+
+    override fun publicLog(eventName: String, data: Any?) {
+        logger.info("[Telemetry] $eventName: $data")
+    }
+    
+    override fun publicLog2(eventName: String, data: Any?) {
+        logger.info("[Telemetry] $eventName: $data")
+    }
+
+    override fun dispose() {
+        logger.info("Dispose MainThreadTelemetry")
+    }
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadTerminalServiceShape.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadTerminalServiceShape.kt
new file mode 100644
index 000000000..c2acebff7
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadTerminalServiceShape.kt
@@ -0,0 +1,442 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.actors
+
+import com.intellij.openapi.Disposable
+import com.intellij.openapi.components.service
+import com.intellij.openapi.diagnostic.Logger
+import com.intellij.openapi.project.Project
+import ai.kilocode.jetbrains.core.PluginContext
+import ai.kilocode.jetbrains.terminal.TerminalInstance
+import ai.kilocode.jetbrains.terminal.TerminalInstanceManager
+import ai.kilocode.jetbrains.terminal.TerminalConfig
+import kotlinx.coroutines.CoroutineScope
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.SupervisorJob
+import kotlinx.coroutines.cancel
+
+
+/**
+ * Main thread terminal service interface.
+ * Corresponds to the MainThreadTerminalServiceShape interface in VSCode.
+ */
+interface MainThreadTerminalServiceShape : Disposable {
+    /**
+     * Creates terminal.
+     * @param extHostTerminalId Extension host terminal ID
+     * @param config Terminal launch configuration
+     */
+    suspend fun createTerminal(extHostTerminalId: String, config: Map<String, Any?>)
+
+    /**
+     * Disposes terminal resources.
+     * @param id Terminal identifier (can be String or Number)
+     */
+    fun dispose(id: Any)
+    
+    /**
+     * Hides terminal.
+     * @param id Terminal identifier (can be String or Number)
+     */
+    fun hide(id: Any)
+    
+    /**
+     * Sends text to terminal.
+     * @param id Terminal identifier (can be String or Number)
+     * @param text Text to send
+     * @param shouldExecute Whether to execute
+     */
+    fun sendText(id: Any, text: String, shouldExecute: Boolean?)
+    
+    /**
+     * Shows terminal.
+     * @param id Terminal identifier (can be String or Number)
+     * @param preserveFocus Whether to preserve focus
+     */
+    fun show(id: Any, preserveFocus: Boolean?)
+    
+    /**
+     * Registers process support.
+     * @param isSupported Whether supported
+     */
+    fun registerProcessSupport(isSupported: Boolean)
+    
+    /**
+     * Registers profile provider.
+     * @param id Profile provider ID
+     * @param extensionIdentifier Extension identifier
+     */
+    fun registerProfileProvider(id: String, extensionIdentifier: String)
+    
+    /**
+     * Unregisters profile provider.
+     * @param id Profile provider ID
+     */
+    fun unregisterProfileProvider(id: String)
+    
+    /**
+     * Registers completion provider.
+     * @param id Completion provider ID
+     * @param extensionIdentifier Extension identifier
+     * @param triggerCharacters List of trigger characters
+     */
+    fun registerCompletionProvider(id: String, extensionIdentifier: String, vararg triggerCharacters: String)
+    
+    /**
+     * Unregisters completion provider.
+     * @param id Completion provider ID
+     */
+    fun unregisterCompletionProvider(id: String)
+    
+    /**
+     * Registers quick fix provider.
+     * @param id Quick fix provider ID
+     * @param extensionIdentifier Extension identifier
+     */
+    fun registerQuickFixProvider(id: String, extensionIdentifier: String)
+    
+    /**
+     * Unregisters quick fix provider.
+     * @param id Quick fix provider ID
+     */
+    fun unregisterQuickFixProvider(id: String)
+    
+    /**
+     * Set environment variable collection
+     * @param extensionIdentifier Extension identifier
+     * @param persistent Whether to persist
+     * @param collection Serializable environment variable collection
+     * @param descriptionMap Serializable environment description mapping
+     */
+    fun setEnvironmentVariableCollection(
+        extensionIdentifier: String,
+        persistent: Boolean,
+        collection: Map<String, Any?>?,
+        descriptionMap: Map<String, Any?>
+    )
+
+    /**
+     * Start sending data events
+     */
+    fun startSendingDataEvents()
+    
+    /**
+     * Stop sending data events
+     */
+    fun stopSendingDataEvents()
+    
+    /**
+     * Start sending command events
+     */
+    fun startSendingCommandEvents()
+    
+    /**
+     * Stop sending command events
+     */
+    fun stopSendingCommandEvents()
+    
+    /**
+     * Start link provider
+     */
+    fun startLinkProvider()
+    
+    /**
+     * Stop link provider
+     */
+    fun stopLinkProvider()
+
+    /**
+     * Send process data
+     * @param terminalId Terminal ID
+     * @param data Data
+     */
+    fun sendProcessData(terminalId: Int, data: String)
+    
+    /**
+     * Send process ready
+     * @param terminalId Terminal ID
+     * @param pid Process ID
+     * @param cwd Current working directory
+     * @param windowsPty Windows PTY information
+     */
+    fun sendProcessReady(
+        terminalId: Int,
+        pid: Int,
+        cwd: String,
+        windowsPty: Map<String, Any?>?
+    )
+    
+    /**
+     * Send process property
+     * @param terminalId Terminal ID
+     * @param property Process property
+     */
+    fun sendProcessProperty(terminalId: Int, property: Map<String, Any?>)
+    
+    /**
+     * Send process exit
+     * @param terminalId Terminal ID
+     * @param exitCode Exit code
+     */
+    fun sendProcessExit(terminalId: Int, exitCode: Int?)
+}
+
+/**
+ * Main thread terminal service implementation class
+ * Provides implementation of IDEA platform terminal-related functionality
+ */
+class MainThreadTerminalService(private val project: Project) : MainThreadTerminalServiceShape {
+    private val logger = Logger.getInstance(MainThreadTerminalService::class.java)
+    
+    // Use terminal instance manager
+    private val terminalManager = project.service<TerminalInstanceManager>()
+    
+    // Coroutine scope - use IO dispatcher to avoid Main Dispatcher issues
+    private val scope = CoroutineScope(Dispatchers.IO + SupervisorJob())
+    
+    override suspend fun createTerminal(extHostTerminalId: String, config: Map<String, Any?>) {
+        logger.info("🚀 Creating terminal: $extHostTerminalId, config: $config")
+        
+        try {
+            // Check if terminal already exists
+            if (terminalManager.containsTerminal(extHostTerminalId)) {
+                logger.warn("Terminal already exists: $extHostTerminalId")
+                return
+            }
+            
+            // Get RPC protocol instance
+            val pluginContext = PluginContext.getInstance(project)
+            val rpcProtocol = pluginContext.getRPCProtocol()
+            if (rpcProtocol == null) {
+                logger.error("❌ Unable to get RPC protocol instance, terminal creation failed: $extHostTerminalId")
+                throw IllegalStateException("RPC protocol not initialized")
+            }
+            logger.info("✅ Got RPC protocol instance: ${rpcProtocol.javaClass.simpleName}")
+            
+            // Allocate numeric ID
+            val numericId = terminalManager.allocateNumericId()
+            logger.info("🔢 Allocated terminal numeric ID: $numericId")
+            
+            // Create terminal instance
+            val terminalConfig = TerminalConfig.fromMap(config)
+            val terminalInstance = TerminalInstance(extHostTerminalId, numericId, project, terminalConfig, rpcProtocol)
+
+            // Initialize terminal
+            terminalInstance.initialize()
+
+            // Register to manager
+            terminalManager.registerTerminal(extHostTerminalId, terminalInstance)
+            
+            logger.info("✅ Terminal created successfully: $extHostTerminalId (numericId: $numericId)")
+            
+        } catch (e: Exception) {
+            logger.error("❌ Failed to create terminal: $extHostTerminalId", e)
+            // Clean up possibly created resources
+            terminalManager.unregisterTerminal(extHostTerminalId)
+            throw e
+        }
+    }
+
+    override fun dispose(id: Any) {
+        try {
+            logger.info("🧹 Destroying terminal: $id")
+            
+            val terminalInstance = terminalManager.unregisterTerminal(id.toString())
+            if (terminalInstance != null) {
+                terminalInstance.dispose()
+                logger.info("✅ Terminal destroyed: $id")
+            } else {
+                logger.warn("Terminal does not exist: $id")
+            }
+            
+        } catch (e: Exception) {
+            logger.error("❌ Failed to destroy terminal: $id", e)
+        }
+    }
+
+    override fun hide(id: Any) {
+        try {
+            logger.info("🙈 Hiding terminal: $id")
+            
+            val terminalInstance = getTerminalInstance(id)
+            if (terminalInstance != null) {
+                terminalInstance.hide()
+                logger.info("✅ Terminal hidden: $id")
+            } else {
+                logger.warn("Terminal does not exist: $id")
+            }
+            
+        } catch (e: Exception) {
+            logger.error("❌ Failed to hide terminal: $id", e)
+        }
+    }
+
+    override fun sendText(id: Any, text: String, shouldExecute: Boolean?) {
+        try {
+            logger.debug("📤 Sending text to terminal $id: $text (execute: $shouldExecute)")
+            
+            val terminalInstance = getTerminalInstance(id)
+            if (terminalInstance != null) {
+                terminalInstance.sendText(text, shouldExecute ?: false)
+                logger.debug("✅ Text sent to terminal: $id")
+            } else {
+                logger.warn("Terminal does not exist: $id")
+            }
+            
+        } catch (e: Exception) {
+            logger.error("❌ Failed to send text to terminal: $id", e)
+        }
+    }
+
+    override fun show(id: Any, preserveFocus: Boolean?) {
+        try {
+            logger.info("👁️ Showing terminal: $id (preserve focus: $preserveFocus)")
+            
+            val terminalInstance = getTerminalInstance(id)
+            if (terminalInstance != null) {
+                terminalInstance.show(preserveFocus ?: true)
+                logger.info("✅ Terminal shown: $id")
+            } else {
+                logger.warn("Terminal does not exist: $id")
+            }
+            
+        } catch (e: Exception) {
+            logger.error("❌ Failed to show terminal: $id", e)
+        }
+    }
+
+    override fun registerProcessSupport(isSupported: Boolean) {
+        logger.info("📋 Registering process support: $isSupported")
+        // In IDEA, process support is built-in, mainly used for logging state here
+    }
+
+    override fun registerProfileProvider(id: String, extensionIdentifier: String) {
+        logger.info("📋 Registering profile provider: $id (extension: $extensionIdentifier)")
+        // TODO: Implement profile provider registration logic
+    }
+
+    override fun unregisterProfileProvider(id: String) {
+        logger.info("📋 Unregistering profile provider: $id")
+        // TODO: Implement profile provider unregistration logic
+    }
+
+    override fun registerCompletionProvider(id: String, extensionIdentifier: String, vararg triggerCharacters: String) {
+        logger.info("📋 Registering completion provider: $id (extension: $extensionIdentifier, trigger characters: ${triggerCharacters.joinToString()})")
+        // TODO: Implement completion provider registration logic
+    }
+
+    override fun unregisterCompletionProvider(id: String) {
+        logger.info("📋 Unregistering completion provider: $id")
+        // TODO: Implement completion provider unregistration logic
+    }
+
+    override fun registerQuickFixProvider(id: String, extensionIdentifier: String) {
+        logger.info("📋 Registering quick fix provider: $id (extension: $extensionIdentifier)")
+        // TODO: Implement quick fix provider registration logic
+    }
+
+    override fun unregisterQuickFixProvider(id: String) {
+        logger.info("📋 Unregistering quick fix provider: $id")
+        // TODO: Implement quick fix provider unregistration logic
+    }
+
+    override fun setEnvironmentVariableCollection(
+        extensionIdentifier: String,
+        persistent: Boolean,
+        collection: Map<String, Any?>?,
+        descriptionMap: Map<String, Any?>
+    ) {
+        logger.info("📋 Setting environment variable collection: $extensionIdentifier (persistent: $persistent)")
+        // TODO: Implement environment variable collection setting logic
+    }
+
+    override fun startSendingDataEvents() {
+        logger.info("📋 Starting to send data events")
+        // TODO: Implement data event sending logic
+    }
+
+    override fun stopSendingDataEvents() {
+        logger.info("📋 Stopping data event sending")
+        // TODO: Implement stopping data event sending logic
+    }
+
+    override fun startSendingCommandEvents() {
+        logger.info("📋 Starting to send command events")
+        // TODO: Implement command event sending logic
+    }
+
+    override fun stopSendingCommandEvents() {
+        logger.info("📋 Stopping command event sending")
+        // TODO: Implement stopping command event sending logic
+    }
+
+    override fun startLinkProvider() {
+        logger.info("📋 Starting link provider")
+        // TODO: Implement link provider startup logic
+    }
+
+    override fun stopLinkProvider() {
+        logger.info("📋 Stopping link provider")
+        // TODO: Implement link provider stopping logic
+    }
+
+    override fun sendProcessData(terminalId: Int, data: String) {
+        logger.debug("Send process data to terminal $terminalId")
+        // Send process data to terminal
+    }
+
+    override fun sendProcessReady(terminalId: Int, pid: Int, cwd: String, windowsPty: Map<String, Any?>?) {
+        logger.info("Send process ready: terminal=$terminalId, pid=$pid, cwd=$cwd")
+        // Send process ready information
+    }
+
+    override fun sendProcessProperty(terminalId: Int, property: Map<String, Any?>) {
+        logger.debug("📋 Sending process property: terminal=$terminalId")
+        // TODO: Notify extension host of process property changes
+    }
+
+    override fun sendProcessExit(terminalId: Int, exitCode: Int?) {
+        logger.info("📋 Sending process exit: terminal=$terminalId, exit code=$exitCode")
+        // TODO: Notify extension host of process exit
+    }
+
+    /**
+     * Get terminal instance (by string ID or numeric ID)
+     */
+    fun getTerminalInstance(id: Any): TerminalInstance? {
+        return when (id) {
+            is String -> terminalManager.getTerminalInstance(id)
+            is Number -> terminalManager.getTerminalInstance(id.toInt())
+            else -> {
+                logger.warn("Unsupported ID type: ${id.javaClass.name}, attempting to convert to string")
+                terminalManager.getTerminalInstance(id.toString())
+            }
+        }
+    }
+    
+    /**
+     * Get all terminal instances
+     */
+    fun getAllTerminals(): Collection<TerminalInstance> {
+        return terminalManager.getAllTerminals()
+    }
+
+    override fun dispose() {
+        logger.info("🧹 Disposing main thread terminal service")
+        
+        try {
+            // Cancel coroutine scope
+            scope.cancel()
+            
+            // Terminal instance manager will automatically handle cleanup of all terminals
+            // No manual cleanup needed here as TerminalInstanceManager is project-level service
+            
+            logger.info("✅ Main thread terminal service disposed")
+            
+        } catch (e: Exception) {
+            logger.error("❌ Failed to dispose main thread terminal service", e)
+        }
+    }
+}
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadTerminalShellIntegrationShape.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadTerminalShellIntegrationShape.kt
new file mode 100644
index 000000000..e33d855fc
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadTerminalShellIntegrationShape.kt
@@ -0,0 +1,51 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.actors
+
+import com.intellij.openapi.Disposable
+import com.intellij.openapi.components.service
+import com.intellij.openapi.diagnostic.Logger
+import com.intellij.openapi.project.Project
+import ai.kilocode.jetbrains.terminal.TerminalInstanceManager
+
+interface MainThreadTerminalShellIntegrationShape : Disposable {
+    fun executeCommand(terminalId: Int, commandLine: String)
+}
+
+class MainThreadTerminalShellIntegration(
+    private val project: Project
+) : MainThreadTerminalShellIntegrationShape {
+    private val logger = Logger.getInstance(MainThreadTerminalShellIntegration::class.java)
+
+    private val terminalManager = project.service<TerminalInstanceManager>()
+    
+    override fun executeCommand(terminalId: Int, commandLine: String) {
+        logger.info("🚀 Executing Shell Integration command: terminalId=$terminalId, commandLine='$commandLine'")
+        
+        try {
+            // Get terminal instance by numeric ID
+            val terminalInstance = terminalManager.getTerminalInstance(terminalId)
+            
+            if (terminalInstance == null) {
+                logger.warn("❌ Terminal instance not found: terminalId=$terminalId")
+                return
+            }
+            
+            logger.info("✅ Found terminal instance: ${terminalInstance.extHostTerminalId}")
+            
+            // Execute command in terminal
+            terminalInstance.sendText(commandLine, shouldExecute = true)
+            
+            logger.info("✅ Command sent to terminal: terminalId=$terminalId, command='$commandLine'")
+            
+        } catch (e: Exception) {
+            logger.error("❌ Failed to execute Shell Integration command: terminalId=$terminalId, command='$commandLine'", e)
+        }
+    }
+
+    override fun dispose() {
+        logger.info("🧹 Destroying MainThreadTerminalShellIntegration")
+    }
+}
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadTextEditorsShape.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadTextEditorsShape.kt
new file mode 100644
index 000000000..7fe8fc7aa
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadTextEditorsShape.kt
@@ -0,0 +1,223 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.actors
+
+import com.intellij.openapi.Disposable
+import com.intellij.openapi.application.ApplicationManager
+import com.intellij.openapi.diagnostic.Logger
+import com.intellij.openapi.project.Project
+import com.intellij.openapi.vfs.LocalFileSystem
+import ai.kilocode.jetbrains.editor.EditorAndDocManager
+import ai.kilocode.jetbrains.editor.Range
+import ai.kilocode.jetbrains.editor.createURI
+import kotlinx.coroutines.delay
+import java.io.File
+
+/**
+ * Main thread text editor interface
+ */
+interface MainThreadTextEditorsShape : Disposable {
+    /**
+     * Try to show text document
+     * @param resource Resource URI
+     * @param options Display options
+     * @return Editor ID or null
+     */
+    suspend fun tryShowTextDocument(resource: Map<String,Any?>, options: Any?): Any?
+    
+    /**
+     * Register text editor decoration type
+     * @param extensionId Extension ID
+     * @param key Decoration type key
+     * @param options Decoration rendering options
+     */
+    fun registerTextEditorDecorationType(extensionId: Map<String, String>, key: String, options: Any)
+    
+    /**
+     * Remove text editor decoration type
+     * @param key Decoration type key
+     */
+    fun removeTextEditorDecorationType(key: String)
+    
+    /**
+     * Try to show editor
+     * @param id Editor ID
+     * @param position Position
+     * @return Operation result
+     */
+    fun tryShowEditor(id: String, position: Any?): Any
+    
+    /**
+     * Try to hide editor
+     * @param id Editor ID
+     * @return Operation result
+     */
+    fun tryHideEditor(id: String): Any
+    
+    /**
+     * Try to set options
+     * @param id Editor ID
+     * @param options Configuration updates
+     * @return Operation result
+     */
+    fun trySetOptions(id: String, options: Any): Any
+    
+    /**
+     * Try to set decorations
+     * @param id Editor ID
+     * @param key Decoration type key
+     * @param ranges Decoration ranges
+     * @return Operation result
+     */
+    fun trySetDecorations(id: String, key: String, ranges: List<Any>): Any
+    
+    /**
+     * Try to quickly set decorations
+     * @param id Editor ID
+     * @param key Decoration type key
+     * @param ranges Decoration ranges array
+     * @return Operation result
+     */
+    fun trySetDecorationsFast(id: String, key: String, ranges: List<Any>): Any
+    
+    /**
+     * Try to reveal range
+     * @param id Editor ID
+     * @param range Display range
+     * @param revealType Display type
+     * @return Operation result
+     */
+    fun tryRevealRange(id: String, range: Map<String,Any?>, revealType: Int): Any
+    
+    /**
+     * Try to set selections
+     * @param id Editor ID
+     * @param selections Selections array
+     * @return Operation result
+     */
+    fun trySetSelections(id: String, selections: List<Any>): Any
+    
+    /**
+     * Try to apply edits
+     * @param id Editor ID
+     * @param modelVersionId Model version ID
+     * @param edits Edit operations
+     * @param opts Apply options
+     * @return Whether successful
+     */
+    fun tryApplyEdits(id: String, modelVersionId: Int, edits: List<Any>, opts: Any?): Boolean
+    
+    /**
+     * Try to insert snippet
+     * @param id Editor ID
+     * @param modelVersionId Model version ID
+     * @param template Code snippet template
+     * @param selections Selection ranges
+     * @param opts Undo options
+     * @return Whether successful
+     */
+    fun tryInsertSnippet(id: String, modelVersionId: Int, template: String, selections: List<Any>, opts: Any?): Boolean
+    
+    /**
+     * Get diff information
+     * @param id Editor ID
+     * @return Diff information
+     */
+    fun getDiffInformation(id: String): Any?
+}
+
+/**
+ * Main thread text editor implementation
+ */
+class MainThreadTextEditors(var project: Project) : MainThreadTextEditorsShape {
+    private val logger = Logger.getInstance(MainThreadTextEditors::class.java)
+
+    override suspend fun tryShowTextDocument(resource: Map<String, Any?>, options: Any?): Any? {
+        logger.info("Trying to show text document: resource=$resource, options=$options")
+        val path = resource["path"] as String? ?: ""
+
+        val vfs = LocalFileSystem.getInstance()
+        vfs.refreshIoFiles(listOf(File(path)))
+        val resourceURI = createURI(resource)
+        val editorHandle = project.getService(EditorAndDocManager::class.java).openEditor(resourceURI)
+        logger.info("Trying to show text document: resource=$resource execution completed" )
+        return editorHandle.id
+    }
+    
+    override fun registerTextEditorDecorationType(extensionId: Map<String, String>, key: String, options: Any) {
+        logger.info("Registering text editor decoration type: extensionId=$extensionId, key=$key, options=$options")
+    }
+
+    override fun removeTextEditorDecorationType(key: String) {
+        logger.info("Removing text editor decoration type: $key")
+    }
+
+    override fun tryShowEditor(id: String, position: Any?): Any {
+        logger.info("Trying to show editor: id=$id, position=$position")
+        return Unit
+    }
+
+    override fun tryHideEditor(id: String): Any {
+        logger.info("Trying to hide editor: $id")
+        return Unit
+    }
+
+    override fun trySetOptions(id: String, options: Any): Any {
+        logger.info("Try to set options: id=$id, options=$options")
+        return Unit
+    }
+
+    override fun trySetDecorations(id: String, key: String, ranges: List<Any>): Any {
+        logger.info("Try to set decorations: id=$id, key=$key, ranges=${ranges.size}")
+        return Unit
+    }
+
+    override fun trySetDecorationsFast(id: String, key: String, ranges: List<Any>): Any {
+        logger.info("Try to quickly set decorations: id=$id, key=$key, ranges=${ranges.size}")
+        return Unit
+    }
+
+    override fun tryRevealRange(id: String, range: Map<String,Any?>, revealType: Int): Any {
+        logger.info("Try to reveal range: id=$id, range=$range, revealType=$revealType")
+        val handle = project.getService(EditorAndDocManager::class.java).getEditorHandleById(id)
+        handle?.let {
+            val rang = createRanges(range)
+            handle.revealRange(rang)
+        }
+        return Unit
+    }
+
+    private fun createRanges(range: Map<String,Any?>): Range {
+        val startLineNumber = (range["startLineNumber"] as? Number)?.toInt() ?: 0
+        val startColumn = (range["startColumn"] as? Number)?.toInt() ?: 0
+        val endLineNumber = (range["endLineNumber"] as? Number)?.toInt() ?: startLineNumber
+        val endColumn = (range["endColumn"] as? Number)?.toInt() ?: startColumn
+        return Range(startLineNumber, startColumn, endLineNumber, endColumn)
+    }
+
+    override fun trySetSelections(id: String, selections: List<Any>): Any {
+        logger.info("Try to set selections: id=$id, selections=$selections")
+        return Unit
+    }
+
+    override fun tryApplyEdits(id: String, modelVersionId: Int, edits: List<Any>, opts: Any?): Boolean {
+        logger.info("Try to apply edits: id=$id, modelVersionId=$modelVersionId, edits=$edits, opts=$opts")
+        return true
+    }
+
+    override fun tryInsertSnippet(id: String, modelVersionId: Int, template: String, selections: List<Any>, opts: Any?): Boolean {
+        logger.info("Try to insert snippet: id=$id, modelVersionId=$modelVersionId, template=$template, selections=$selections, opts=$opts")
+        return true
+    }
+
+    override fun getDiffInformation(id: String): Any? {
+        logger.info("Get diff information: $id")
+        return null
+    }
+
+    override fun dispose() {
+        logger.info("Dispose MainThreadTextEditors")
+    }
+}
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadUrlsShape.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadUrlsShape.kt
new file mode 100644
index 000000000..4c5877f8b
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadUrlsShape.kt
@@ -0,0 +1,61 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.actors
+
+import com.intellij.openapi.Disposable
+import com.intellij.openapi.diagnostic.Logger
+import kotlinx.coroutines.CompletableDeferred
+
+/**
+ * URL handling related interface
+ */
+interface MainThreadUrlsShape : Disposable {
+    /**
+     * Register URI handler
+     * @param handle Handler identifier
+     * @param extensionId Extension ID
+     * @param extensionDisplayName Extension display name
+     * @return Execution result
+     */
+    suspend fun registerUriHandler(handle: Int, extensionId: Map<String, String>, extensionDisplayName: String): Any
+
+    /**
+     * Unregister URI handler
+     * @param handle Handler identifier
+     * @return Execution result
+     */
+    suspend fun unregisterUriHandler(handle: Int): Any
+
+    /**
+     * Create application URI
+     * @param uri URI components
+     * @return Created URI components
+     */
+    suspend fun createAppUri(uri: Map<String, Any?>): Map<String, Any?>
+}
+
+class MainThreadUrls : MainThreadUrlsShape {
+    private val logger = Logger.getInstance(MainThreadUrls::class.java)
+
+    override suspend fun registerUriHandler(handle: Int, extensionId: Map<String, String>, extensionDisplayName: String): Any {
+        logger.info("Registering URI handler: handle=$handle, extensionId=$extensionId, displayName=$extensionDisplayName")
+        return CompletableDeferred<Unit>().also { it.complete(Unit) }.await()
+    }
+
+    override suspend fun unregisterUriHandler(handle: Int): Any {
+        logger.info("Unregistering URI handler: handle=$handle")
+        return CompletableDeferred<Unit>().also { it.complete(Unit) }.await()
+    }
+
+    override suspend fun createAppUri(uri: Map<String, Any?>): Map<String, Any?> {
+        logger.info("Creating application URI: uri=$uri")
+        // Simply return original URI
+        return uri
+    }
+
+    override fun dispose() {
+        logger.info("Disposing MainThreadUrls resources")
+    }
+}
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadWebviewViewsShape.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadWebviewViewsShape.kt
new file mode 100644
index 000000000..53d8542a2
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadWebviewViewsShape.kt
@@ -0,0 +1,108 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.actors
+
+import com.intellij.openapi.Disposable
+import com.intellij.openapi.diagnostic.Logger
+import com.intellij.openapi.project.Project
+import ai.kilocode.jetbrains.events.WebviewViewProviderData
+import ai.kilocode.jetbrains.webview.WebViewManager
+import kotlinx.coroutines.CoroutineScope
+import kotlinx.coroutines.Dispatchers
+
+/**
+ * Webview view related interface
+ */
+interface MainThreadWebviewViewsShape : Disposable {
+    /**
+     * Register Webview view provider
+     * @param extension Webview extension description
+     * @param viewType View type
+     * @param options Option configuration
+     */
+    fun registerWebviewViewProvider(
+        extension: Map<String, Any?>,
+        viewType: String,
+        options: Map<String, Any?>
+    )
+
+    /**
+     * Unregister Webview view provider
+     * @param viewType View type
+     */
+    fun unregisterWebviewViewProvider(viewType: String)
+
+    /**
+     * Set Webview view title
+     * @param handle Webview handle
+     * @param value Title value
+     */
+    fun setWebviewViewTitle(handle: String, value: String?)
+
+    /**
+     * Set Webview view description
+     * @param handle Webview handle
+     * @param value Description content
+     */
+    fun setWebviewViewDescription(handle: String, value: String?)
+
+    /**
+     * Set Webview view badge
+     * @param handle Webview handle
+     * @param badge Badge information
+     */
+    fun setWebviewViewBadge(handle: String, badge: Map<String, Any?>?)
+
+    /**
+     * Show Webview view
+     * @param handle Webview handle
+     * @param preserveFocus Whether to preserve focus
+     */
+    fun show(handle: String, preserveFocus: Boolean)
+}
+
+class MainThreadWebviewViews(val project: Project) : MainThreadWebviewViewsShape {
+    private val logger = Logger.getInstance(MainThreadWebviewViews::class.java)
+    private val coroutineScope = CoroutineScope(Dispatchers.Default)
+
+    override fun registerWebviewViewProvider(
+        extension: Map<String, Any?>,
+        viewType: String,
+        options: Map<String, Any?>
+    ) {
+        logger.info("Registering Webview view provider: viewType=$viewType, options=$options")
+        
+//         Use EventBus to send WebView view provider registration event, using IntelliJ platform compatible method
+//        project.getService(ProjectEventBus::class.java).emitInApplication(
+//            WebviewViewProviderRegisterEvent,
+//            WebviewViewProviderData(extension, viewType, options)
+//        )
+        project.getService(WebViewManager::class.java).registerProvider(WebviewViewProviderData(extension, viewType, options))
+    }
+
+    override fun unregisterWebviewViewProvider(viewType: String) {
+        logger.info("Unregistering Webview view provider: viewType=$viewType")
+    }
+
+    override fun setWebviewViewTitle(handle: String, value: String?) {
+        logger.info("Setting Webview view title: handle=$handle, title=$value")
+    }
+
+    override fun setWebviewViewDescription(handle: String, value: String?) {
+        logger.info("Setting Webview view description: handle=$handle, description=$value")
+    }
+
+    override fun setWebviewViewBadge(handle: String, badge: Map<String, Any?>?) {
+        logger.info("Setting Webview view badge: handle=$handle, badge=$badge")
+    }
+
+    override fun show(handle: String, preserveFocus: Boolean) {
+        logger.info("Showing Webview view: handle=$handle, preserveFocus=$preserveFocus")
+    }
+
+    override fun dispose() {
+        logger.info("Disposing MainThreadWebviewViews resources")
+    }
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadWebviewsShape.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadWebviewsShape.kt
new file mode 100644
index 000000000..d0b4c33f3
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadWebviewsShape.kt
@@ -0,0 +1,117 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.actors
+
+import com.intellij.openapi.Disposable
+import com.intellij.openapi.diagnostic.Logger
+import com.intellij.openapi.project.Project
+import com.intellij.openapi.project.ProjectManager
+import ai.kilocode.jetbrains.events.EventBus
+import ai.kilocode.jetbrains.events.ProjectEventBus
+import ai.kilocode.jetbrains.events.WebviewHtmlUpdateData
+import ai.kilocode.jetbrains.events.WebviewHtmlUpdateEvent
+import ai.kilocode.jetbrains.webview.WebViewManager
+import java.util.concurrent.ConcurrentHashMap
+
+/**
+ * Webview handle type
+ * Corresponds to WebviewHandle type in TypeScript
+ */
+typealias WebviewHandle = String
+
+/**
+ * Main thread Webviews service interface
+ * Corresponds to MainThreadWebviewsShape interface in VSCode
+ */
+interface MainThreadWebviewsShape : Disposable {
+    /**
+     * Set HTML content
+     * Corresponds to $setHtml method in TypeScript interface
+     * @param handle Webview handle
+     * @param value HTML content
+     */
+    fun setHtml(handle: WebviewHandle, value: String)
+    
+    /**
+     * Set Webview options
+     * Corresponds to $setOptions method in TypeScript interface
+     * @param handle Webview handle
+     * @param options Webview content options
+     */
+    fun setOptions(handle: WebviewHandle, options: Map<String, Any?>)
+    
+    /**
+     * Send message to Webview
+     * Corresponds to $postMessage method in TypeScript interface
+     * @param handle Webview handle
+     * @param value Message content
+     * @param buffers Binary buffer array
+     * @return Whether operation succeeded
+     */
+    fun postMessage(handle: WebviewHandle, value: String): Boolean
+}
+
+/**
+ * Main thread Webviews service implementation class
+ */
+class MainThreadWebviews(val project: Project) : MainThreadWebviewsShape {
+    private val logger = Logger.getInstance(MainThreadWebviews::class.java)
+    
+    // Store registered Webviews
+    private val webviews = ConcurrentHashMap<WebviewHandle, Any?>()
+    private var webviewHandle : WebviewHandle = ""
+    
+    override fun setHtml(handle: WebviewHandle, value: String) {
+        logger.info("Setting Webview HTML: handle=$handle, length=${value.length}")
+        webviewHandle = handle
+        try {
+            // Replace vscode-file protocol format, using regex to match from vscode-file:/ to /kilocode/ part
+            val modifiedHtml = value.replace(Regex("vscode-file:/.*?/kilocode/"), "/")
+            logger.info("Replaced vscode-file protocol path format")
+            
+            // Send HTML content update event through EventBus
+            val data = WebviewHtmlUpdateData(handle, modifiedHtml)
+//            project.getService(ProjectEventBus::class.java).emitInApplication(WebviewHtmlUpdateEvent, data)
+            project.getService(WebViewManager::class.java).updateWebViewHtml(data)
+            logger.info("Sent HTML content update event: handle=$handle")
+        } catch (e: Exception) {
+            logger.error("Failed to set Webview HTML", e)
+        }
+    }
+    
+    override fun setOptions(handle: WebviewHandle, options: Map<String, Any?>) {
+        logger.info("Setting Webview options: handle=$handle, options=$options")
+        webviewHandle = handle
+        try {
+            // Actual implementation should set options for Webview component on IDEA platform
+            // Here we just log
+        } catch (e: Exception) {
+            logger.error("Failed to set Webview options: $e")
+        }
+    }
+    
+    override fun postMessage(handle: WebviewHandle, value: String): Boolean {
+//        logger.info("Sending message to Webview: handle=$handle")
+        if(value.contains("theme")) {
+            logger.info("Sending theme message to Webview")
+        }
+
+        return try {
+            val mangler = project.getService(WebViewManager::class.java)
+
+//            mangler.getWebView(handle)?.postMessageToWebView(value)
+            mangler.getLatestWebView()?.postMessageToWebView(value)
+            true
+        } catch (e: Exception) {
+            logger.error("Failed to send message to Webview: $e")
+            false
+        }
+    }
+    
+    override fun dispose() {
+        logger.info("Disposing MainThreadWebviews resources")
+        webviews.clear()
+    }
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadWindowShape.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadWindowShape.kt
new file mode 100644
index 000000000..527f0a76e
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/actors/MainThreadWindowShape.kt
@@ -0,0 +1,159 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.actors
+
+import com.intellij.openapi.Disposable
+import com.intellij.openapi.diagnostic.Logger
+import com.intellij.openapi.project.Project
+import com.intellij.openapi.wm.WindowManager
+import ai.kilocode.jetbrains.plugin.SystemObjectProvider
+import ai.kilocode.jetbrains.plugin.WecoderPluginService
+import kotlinx.coroutines.CoroutineScope
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.SupervisorJob
+import kotlinx.coroutines.cancel
+import kotlinx.coroutines.future.future
+import java.awt.Desktop
+import java.net.URI
+import java.util.concurrent.CompletableFuture
+
+/**
+ * Main thread window service interface
+ * Corresponds to MainThreadWindowShape interface in VSCode
+ */
+interface MainThreadWindowShape : Disposable {
+    /**
+     * Get initial state
+     * @return Initial window state including focus and active status
+     */
+    fun getInitialState(): Map<String, Boolean>
+    
+    /**
+     * Open URI
+     * @param uri URI component
+     * @param uriString URI string
+     * @param options Open options
+     * @return Whether successfully opened
+     */
+    fun openUri(uri: Map<String, Any?>, uriString: String?, options: Map<String, Any?>): Boolean
+    
+    /**
+     * Convert to external URI
+     * @param uri URI component
+     * @param options Open options
+     * @return External URI component
+     */
+    fun asExternalUri(uri: Map<String, Any?>, options: Map<String, Any?>): Map<String, Any?>
+}
+
+/**
+ * Main thread window service implementation
+ * Provides IDEA platform window related functionality
+ */
+class MainThreadWindow(val project: Project) : MainThreadWindowShape {
+    private val logger = Logger.getInstance(MainThreadWindow::class.java)
+
+    override fun getInitialState(): Map<String, Boolean> {
+        try {
+            logger.info("Getting window initial state")
+
+            if (project != null) {
+                // Get current project window state
+                val frame = WindowManager.getInstance().getFrame(project)
+                val isFocused = frame?.isFocused ?: false
+                val isActive = frame?.isActive ?: false
+                
+                return mapOf(
+                    "isFocused" to isFocused,
+                    "isActive" to isActive
+                )
+            } else {
+                logger.warn("Cannot get current project, returning default window state")
+                return mapOf(
+                    "isFocused" to false,
+                    "isActive" to false
+                )
+            }
+        } catch (e: Exception) {
+            logger.error("Failed to get window initial state", e)
+            return mapOf(
+                "isFocused" to false,
+                "isActive" to false
+            )
+        }
+    }
+
+    override fun openUri(uri: Map<String, Any?>, uriString: String?, options: Map<String, Any?>): Boolean {
+        try {
+            logger.info("Opening URI: $uriString")
+            
+            // Try to get URI
+            val actualUri = if (uriString != null) {
+                try {
+                    URI(uriString)
+                } catch (e: Exception) {
+                    // If URI string is invalid, try to build from URI components
+                    createUriFromComponents(uri)
+                }
+            } else {
+                createUriFromComponents(uri)
+            }
+
+            return if (actualUri != null) {
+                // Check if Desktop operation is supported
+                if (Desktop.isDesktopSupported() && Desktop.getDesktop().isSupported(Desktop.Action.BROWSE)) {
+                    Desktop.getDesktop().browse(actualUri)
+                    true
+                } else {
+                    logger.warn("System does not support opening URI")
+                    false
+                }
+            } else {
+                logger.warn("Cannot create valid URI")
+                false
+            }
+        } catch (e: Exception) {
+            logger.error("Failed to open URI", e)
+            return false
+        }
+    }
+
+    override fun asExternalUri(uri: Map<String, Any?>, options: Map<String, Any?>): Map<String, Any?> {
+        return try {
+            logger.info("Converting to external URI: $uri")
+
+            // For most cases, we directly return the same URI components
+            // Actual implementation may need to handle specific protocol conversion
+            uri
+        } catch (e: Exception) {
+            logger.error("Failed to convert to external URI", e)
+            uri // Return original URI on error
+        }
+    }
+
+    /**
+     * Create URI from URI components
+     * @param components URI components
+     * @return Created URI or null
+     */
+    private fun createUriFromComponents(components: Map<String, Any?>): URI? {
+        return try {
+            val scheme = components["scheme"] as? String ?: return null
+            val authority = components["authority"] as? String ?: ""
+            val path = components["path"] as? String ?: ""
+            val query = components["query"] as? String ?: ""
+            val fragment = components["fragment"] as? String ?: ""
+            
+            URI(scheme, authority, path, query, fragment)
+        } catch (e: Exception) {
+            logger.warn("Failed to create URI from components: $components", e)
+            null
+        }
+    }
+
+    override fun dispose() {
+        logger.info("Disposing MainThreadWindow")
+    }
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/commands/Commands.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/commands/Commands.kt
new file mode 100644
index 000000000..d8e387560
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/commands/Commands.kt
@@ -0,0 +1,143 @@
+// Copyright 2009-2025 Weibo, Inc.
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.commands
+
+import com.intellij.openapi.project.Project
+/**
+ * Interface representing a command in the system.
+ * Commands are used to define executable actions that can be registered and invoked.
+ */
+interface ICommand {
+   /**
+    * Gets the unique identifier for this command.
+    * @return The command ID as a string
+    */
+   fun getId(): String
+   
+   /**
+    * Gets the method name that should be invoked when this command is executed.
+    * @return The method name as a string
+    */
+   fun getMethod(): String
+   
+   /**
+    * Gets the handler object that contains the method to be invoked.
+    * @return The handler object
+    */
+   fun handler(): Any
+   
+   /**
+    * Gets the return type of the command, if any.
+    * @return The return type as a string, or null if the command doesn't return a value
+    */
+   fun returns(): String?
+}
+
+/**
+ * Interface for a registry that manages commands.
+ * Provides functionality to register, retrieve, and manage commands in the system.
+ */
+interface ICommandRegistry {
+    /**
+     * Called when a command is registered.
+     * @param id The ID of the registered command
+     */
+    fun onDidRegisterCommand(id: String)
+    
+    /**
+     * Registers a command in the registry.
+     * @param command The command to register
+     */
+    fun registerCommand(command: ICommand)
+    
+    /**
+     * Registers an alias for an existing command.
+     * @param oldId The ID of the existing command
+     * @param newId The new alias ID for the command
+     */
+    fun registerCommandAlias(oldId: String, newId: String)
+    
+    /**
+     * Gets a command by its ID.
+     * @param id The ID of the command to retrieve
+     * @return The command, or null if not found
+     */
+    fun getCommand(id: String): ICommand?
+    
+    /**
+     * Gets all registered commands.
+     * @return A map of command IDs to commands
+     */
+    fun getCommands(): Map<String, ICommand>
+}
+
+/**
+ * Implementation of the ICommandRegistry interface.
+ * Manages commands for a specific project.
+ *
+ * @property project The project context for this command registry
+ */
+class CommandRegistry(val project: Project) : ICommandRegistry {
+
+    /**
+     * Map of command IDs to lists of commands.
+     * Using a list allows for potential command overloading in the future.
+     */
+    private val commands = mutableMapOf<String, MutableList<ICommand>>()
+
+    /**
+     * Called when a command is registered.
+     * Currently not implemented.
+     *
+     * @param id The ID of the registered command
+     */
+    override fun onDidRegisterCommand(id: String) {
+        TODO("Not yet implemented")
+    }
+
+    /**
+     * Registers a command in the registry.
+     *
+     * @param command The command to register
+     */
+    override fun registerCommand(command: ICommand) {
+        commands.put(command.getId(), mutableListOf(command))
+    }
+
+    /**
+     * Registers an alias for an existing command.
+     * If the original command exists, creates a new entry with the new ID pointing to the same command.
+     *
+     * @param oldId The ID of the existing command
+     * @param newId The new alias ID for the command
+     */
+    override fun registerCommandAlias(oldId: String, newId: String) {
+        getCommand(oldId)?.let {
+            commands.put(newId, mutableListOf(it))
+        }
+    }
+
+    /**
+     * Gets a command by its ID.
+     * Returns the first command registered with the given ID, or null if not found.
+     *
+     * @param id The ID of the command to retrieve
+     * @return The command, or null if not found
+     */
+    override fun getCommand(id: String): ICommand? {
+        return commands[id]?.firstOrNull()
+    }
+
+    /**
+     * Gets all registered commands.
+     * Returns a map of command IDs to the first command registered with each ID.
+     *
+     * @return A map of command IDs to commands
+     */
+    override fun getCommands(): Map<String, ICommand> {
+        return commands.mapValues { it.value.first() }
+    }
+}
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/commands/KiloCodeAuthProtocolCommand.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/commands/KiloCodeAuthProtocolCommand.kt
new file mode 100644
index 000000000..3bd48ac89
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/commands/KiloCodeAuthProtocolCommand.kt
@@ -0,0 +1,148 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.commands
+
+import com.intellij.openapi.application.ApplicationManager
+import com.intellij.openapi.application.JBProtocolCommand
+import com.intellij.openapi.diagnostic.Logger
+import com.intellij.openapi.project.Project
+import com.intellij.openapi.project.ProjectManager
+import ai.kilocode.jetbrains.core.PluginContext
+import ai.kilocode.jetbrains.core.ServiceProxyRegistry
+import kotlinx.coroutines.CoroutineScope
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.SupervisorJob
+import kotlinx.coroutines.launch
+import java.net.URI
+import java.net.URLDecoder
+import java.nio.charset.StandardCharsets
+
+/**
+ * JetBrains Protocol Command for handling Kilo Code authentication URLs
+ *
+ * Handles URLs in the format: jetbrains://idea/ai.kilocode.jetbrains.auth?token=HERE
+ * and forwards them to the VSCode extension via RPC protocol
+ */
+class KiloCodeAuthProtocolCommand : JBProtocolCommand("ai.kilocode.jetbrains.auth") {
+    private val logger = Logger.getInstance(KiloCodeAuthProtocolCommand::class.java)
+    private val coroutineScope = CoroutineScope(SupervisorJob() + Dispatchers.IO)
+    
+    companion object {
+        const val COMMAND_ID = "ai.kilocode.jetbrains.auth"
+        const val TOKEN_PARAM = "token"
+    }
+    
+    /**
+     * Public method for testing the protocol command execution
+     * @param target The target parameter from the URL
+     * @param parameters Map of URL parameters
+     * @param fragment The URL fragment
+     * @return null on success, error message on failure
+     */
+    suspend fun executeForTesting(target: String?, parameters: Map<String, String>, fragment: String?): String? {
+        return execute(target, parameters, fragment)
+    }
+    
+    /**
+     * Handle the protocol command
+     * @param target The target parameter from the URL
+     * @param parameters Map of URL parameters
+     * @param fragment The URL fragment
+     * @return null on success, error message on failure
+     */
+    override suspend fun execute(target: String?, parameters: Map<String, String>, fragment: String?): String? {
+        logger.info("Handling Kilo Code auth protocol command: target=$target, parameters=$parameters")
+        
+        return try {
+            // Extract token from parameters
+            val token = parameters[TOKEN_PARAM]
+            if (token.isNullOrBlank()) {
+                val errorMsg = "No token found in parameters: $parameters"
+                logger.warn(errorMsg)
+                return errorMsg
+            }
+            
+            logger.info("Extracted token from parameters, forwarding to VSCode extension")
+            
+            // Forward to VSCode extension via RPC
+            forwardTokenToVSCodeExtension(token)
+            
+            null // Success
+        } catch (e: Exception) {
+            val errorMsg = "Error handling Kilo Code auth protocol command: ${e.message}"
+            logger.error(errorMsg, e)
+            errorMsg
+        }
+    }
+    
+    
+    /**
+     * Forward the token to the VSCode extension by simulating a VSCode URL handler call
+     */
+    private fun forwardTokenToVSCodeExtension(token: String) {
+        coroutineScope.launch {
+            try {
+                // Get the current project (or default project if none is open)
+                val project = getCurrentProject()
+                
+                if (project == null) {
+                    logger.warn("No project available to forward token")
+                    return@launch
+                }
+                
+                // Get RPC protocol instance
+                val protocol = project.getService(PluginContext::class.java)?.getRPCProtocol()
+                
+                if (protocol == null) {
+                    logger.error("Cannot get RPC protocol instance, cannot forward token")
+                    return@launch
+                }
+                
+                logger.info("Forwarding token to VSCode extension via RPC")
+                
+                // Use ExtHostCommands to execute a command that handles the URL
+                val extHostCommands = protocol.getProxy(ServiceProxyRegistry.ExtHostContext.ExtHostCommands)
+                
+                // Create the VSCode URI string that would normally be handled by handleUri
+                val vscodeUriString = "vscode://kilocode.kilo-code/kilocode?token=${token}"
+                
+                // Execute a command to handle the URI - this simulates what happens when VSCode receives a URL
+                // We'll use a special command that the VSCode extension can handle
+                extHostCommands.executeContributedCommand(
+                    "kilo-code.handleExternalUri",
+                    listOf(vscodeUriString)
+                )
+                
+                logger.info("Successfully forwarded token to VSCode extension via command execution")
+                
+            } catch (e: Exception) {
+                logger.error("Error forwarding token to VSCode extension", e)
+            }
+        }
+    }
+    
+    /**
+     * Get the current project, preferring the focused project
+     */
+    private fun getCurrentProject(): Project? {
+        return try {
+            val projectManager = ProjectManager.getInstance()
+            
+            // Try to get the default project first
+            val openProjects = projectManager.openProjects
+            
+            if (openProjects.isNotEmpty()) {
+                // Return the first open project
+                openProjects[0]
+            } else {
+                // Fallback to default project
+                projectManager.defaultProject
+            }
+        } catch (e: Exception) {
+            logger.warn("Error getting current project", e)
+            null
+        }
+    }
+}
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/core/ExtensionHostManager.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/core/ExtensionHostManager.kt
new file mode 100644
index 000000000..8b5e1b075
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/core/ExtensionHostManager.kt
@@ -0,0 +1,354 @@
+// Copyright 2009-2025 Weibo, Inc.
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.core
+
+import com.google.gson.Gson
+import com.intellij.openapi.Disposable
+import com.intellij.openapi.diagnostic.Logger
+import com.intellij.openapi.project.Project
+import com.intellij.openapi.application.ApplicationInfo
+import ai.kilocode.jetbrains.editor.EditorAndDocManager
+import ai.kilocode.jetbrains.ipc.NodeSocket
+import ai.kilocode.jetbrains.ipc.PersistentProtocol
+import ai.kilocode.jetbrains.ipc.proxy.ResponsiveState
+import ai.kilocode.jetbrains.util.PluginConstants
+import ai.kilocode.jetbrains.util.PluginResourceUtil
+import ai.kilocode.jetbrains.util.URI
+import ai.kilocode.jetbrains.workspace.WorkspaceFileChangeManager
+import kotlinx.coroutines.CoroutineScope
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.SupervisorJob
+import kotlinx.coroutines.cancel
+import java.net.Socket
+import java.nio.channels.SocketChannel
+import java.nio.file.Paths
+import com.intellij.ide.plugins.PluginManagerCore
+import com.intellij.openapi.extensions.PluginId
+
+/**
+ * Extension host manager, responsible for communication with extension processes.
+ * Handles Ready and Initialized messages from extension processes.
+ */
+class ExtensionHostManager : Disposable {
+    companion object {
+        val LOG = Logger.getInstance(ExtensionHostManager::class.java)
+    }
+
+    private val project: Project
+    private val coroutineScope = CoroutineScope(Dispatchers.IO + SupervisorJob())
+    
+     // Communication protocol
+    private var nodeSocket: NodeSocket
+    private var protocol: PersistentProtocol? = null
+    
+     // RPC manager
+    private var rpcManager: RPCManager? = null
+    
+     // Extension manager
+    private var extensionManager: ExtensionManager? = null
+    
+     // Plugin identifier
+    private var rooCodeIdentifier: String? = null
+    
+     // JSON serialization
+    private val gson = Gson()
+    
+     // Last diagnostic log time
+    private var lastDiagnosticLogTime = 0L
+
+    private var  projectPath: String? = null
+    
+     // Support Socket constructor
+    constructor(clientSocket: Socket, projectPath: String,project: Project) {
+        clientSocket.tcpNoDelay = true
+        this.nodeSocket = NodeSocket(clientSocket, "extension-host")
+        this.projectPath = projectPath
+        this.project = project
+    }
+     // Support SocketChannel constructor
+    constructor(clientChannel: SocketChannel, projectPath: String , project: Project) {
+        this.nodeSocket = NodeSocket(clientChannel, "extension-host")
+        this.projectPath = projectPath
+        this.project = project
+    }
+    
+    /**
+     * Start communication with the extension process.
+     */
+    fun start() {
+        try {
+             // Initialize extension manager
+            extensionManager = ExtensionManager()
+            val extensionPath = PluginResourceUtil.getResourcePath(PluginConstants.PLUGIN_ID, PluginConstants.PLUGIN_CODE_DIR)
+            rooCodeIdentifier = extensionPath?.let { extensionManager!!.registerExtension(it).identifier.value }
+             // Create protocol
+            protocol = PersistentProtocol(
+                PersistentProtocol.PersistentProtocolOptions(
+                    socket = nodeSocket,
+                    initialChunk = null,
+                    loadEstimator = null,
+                    sendKeepAlive = true
+                ),
+                this::handleMessage
+            )
+
+            LOG.info("ExtensionHostManager started successfully")
+        } catch (e: Exception) {
+            LOG.error("Failed to start ExtensionHostManager", e)
+            dispose()
+        }
+    }
+    
+    /**
+     * Get RPC responsive state.
+     * @return Responsive state, or null if RPC manager is not initialized.
+     */
+    fun getResponsiveState(): ResponsiveState? {
+        val currentTime = System.currentTimeMillis()
+         // Limit diagnostic log frequency, at most once every 60 seconds
+        val shouldLogDiagnostics = currentTime - lastDiagnosticLogTime > 60000
+        if (rpcManager == null) {
+            if (shouldLogDiagnostics) {
+                LOG.debug("Unable to get responsive state: RPC manager is not initialized")
+                lastDiagnosticLogTime = currentTime
+            }
+            return null
+        }
+         // Log connection diagnostic information
+        if (shouldLogDiagnostics) {
+            val socketInfo = buildString {
+                append("NodeSocket: ")
+                append(if (nodeSocket.isClosed()) "closed" else "active")
+                append(", input stream: ")
+                append(if (nodeSocket.isInputClosed()) "closed" else "normal")
+                append(", output stream: ")
+                append(if (nodeSocket.isOutputClosed()) "closed" else "normal")
+                append(", disposed=")
+                append(nodeSocket.isDisposed())
+            }
+            
+            val protocolInfo = protocol?.let { proto ->
+                "Protocol: ${if (proto.isDisposed()) "disposed" else "active"}"
+            } ?: "Protocol is null"
+            LOG.debug("Connection diagnostics: $socketInfo, $protocolInfo")
+            lastDiagnosticLogTime = currentTime
+        }
+        return rpcManager?.getRPCProtocol()?.responsiveState
+    }
+    
+    /**
+     * Handle messages from the extension process.
+     */
+    private fun handleMessage(data: ByteArray) {
+         // Check if data is a single-byte message (extension host protocol message)
+        if (data.size == 1) {
+             // Try to parse as extension host message type
+
+            when (ExtensionHostMessageType.fromData(data)) {
+                ExtensionHostMessageType.Ready -> handleReadyMessage()
+                ExtensionHostMessageType.Initialized -> handleInitializedMessage()
+                ExtensionHostMessageType.Terminate -> LOG.info("Received Terminate message")
+                null -> LOG.debug("Received unknown message type: ${data.contentToString()}")
+            }
+        } else {
+            LOG.debug("Received message with length ${data.size}, not handling as extension host message")
+        }
+    }
+    
+    /**
+     * Handle Ready message, send initialization data.
+     */
+    private fun handleReadyMessage() {
+        LOG.info("Received Ready message from extension host")
+        
+        try {
+             // Build initialization data
+            val initData = createInitData()
+            
+             // Send initialization data
+            val jsonData = gson.toJson(initData).toByteArray()
+
+            protocol?.send(jsonData)
+            LOG.info("Sent initialization data to extension host")
+        } catch (e: Exception) {
+            LOG.error("Failed to handle Ready message", e)
+        }
+    }
+    
+    /**
+     * Handle Initialized message, create RPC manager and activate plugin.
+     */
+    private fun handleInitializedMessage() {
+        LOG.info("Received Initialized message from extension host")
+        
+        try {
+            // Get protocol
+            val protocol = this.protocol ?: throw IllegalStateException("Protocol is not initialized")
+            val extensionManager = this.extensionManager ?: throw IllegalStateException("ExtensionManager is not initialized")
+
+            // Create RPC manager
+            rpcManager = RPCManager(protocol, extensionManager,null, project)
+
+            // Start initialization process
+            rpcManager?.startInitialize()
+
+            // Start file monitoring
+            project.getService(WorkspaceFileChangeManager::class.java)
+//            WorkspaceFileChangeManager.getInstance()
+            project.getService(EditorAndDocManager::class.java).initCurrentIdeaEditor()
+             // Activate RooCode plugin
+            val rooCodeId = rooCodeIdentifier ?: throw IllegalStateException("RooCode identifier is not initialized")
+            extensionManager.activateExtension(rooCodeId, rpcManager!!.getRPCProtocol())
+                .whenComplete { _, error ->
+                    if (error != null) {
+                        LOG.error("Failed to activate RooCode plugin", error)
+                    } else {
+                        LOG.info("RooCode plugin activated successfully")
+                    }
+                }
+
+            LOG.info("Initialized extension host")
+        } catch (e: Exception) {
+            LOG.error("Failed to handle Initialized message", e)
+        }
+    }
+    
+    /**
+     * Create initialization data.
+     * Corresponds to the initData object in main.js.
+     */
+    private fun createInitData(): Map<String, Any?> {
+        val pluginDir = getPluginDir()
+        val basePath = projectPath
+        
+        return mapOf(
+            "commit" to "development",
+            "version" to getIDEVersion(),
+            "quality" to null,
+            "parentPid" to ProcessHandle.current().pid(),
+            "environment" to mapOf(
+                "isExtensionDevelopmentDebug" to false,
+                "appName" to getCurrentIDEName(),
+                "appHost" to "node",
+                "appLanguage" to "en",
+                "appUriScheme" to "vscode",
+                "appRoot" to uriFromPath(pluginDir),
+                "globalStorageHome" to uriFromPath(Paths.get(System.getProperty("user.home"),".roo-cline", "globalStorage").toString()),
+                "workspaceStorageHome" to uriFromPath(Paths.get(System.getProperty("user.home"),".roo-cline", "workspaceStorage").toString()),
+                "extensionDevelopmentLocationURI" to null,
+                "extensionTestsLocationURI" to null,
+                "useHostProxy" to false,
+                "skipWorkspaceStorageLock" to false,
+                "isExtensionTelemetryLoggingOnly" to false,
+            ),
+            "workspace" to mapOf(
+                "id" to "intellij-workspace",
+                "name" to "IntelliJ Workspace",
+                "transient" to false,
+                "configuration" to null,
+                "isUntitled" to false
+            ),
+            "remote" to mapOf(
+                "authority" to null,
+                "connectionData" to null,
+                "isRemote" to false
+            ),
+            "extensions" to mapOf<String, Any>(
+                "versionId" to 1,
+                "allExtensions" to (extensionManager?.getAllExtensionDescriptions() ?: emptyList<Any>()),
+                "myExtensions" to (extensionManager?.getAllExtensionDescriptions()?.map { it.identifier } ?: emptyList<Any>()),
+                "activationEvents" to (extensionManager?.getAllExtensionDescriptions()?.associate { ext ->
+                    ext.identifier.value to (ext.activationEvents ?: emptyList<String>())
+                } ?: emptyMap())
+            ),
+            "telemetryInfo" to mapOf(
+                "sessionId" to "intellij-session",
+                "machineId" to "intellij-machine",
+                "sqmId" to "",
+                "devDeviceId" to "",
+                "firstSessionDate" to java.time.Instant.now().toString(),
+                "msftInternal" to false
+            ),
+            "logLevel" to 0, // Info level
+            "loggers" to emptyList<Any>(),
+            "logsLocation" to uriFromPath(Paths.get(pluginDir, "logs").toString()),
+            "autoStart" to true,
+            "consoleForward" to mapOf(
+                "includeStack" to false,
+                "logNative" to false
+            ),
+            "uiKind" to 1 // Desktop
+        )
+    }
+    
+    /**
+     * Get current IDE name.
+     */
+    private fun getCurrentIDEName(): String {
+        val applicationInfo = ApplicationInfo.getInstance()
+        val productCode = applicationInfo.build.productCode
+        val version = applicationInfo.shortVersion ?: "1.0.0"
+        
+        // Return in the format: wrapper|jetbrains|productCode
+        val result = "wrapper|jetbrains|$productCode|$version"
+        return result
+    }
+    
+    /**
+     * Get current IDE version.
+     */
+    private fun getIDEVersion(): String {
+        val applicationInfo = ApplicationInfo.getInstance()
+        val version = applicationInfo.shortVersion ?: "1.0.0"
+        LOG.info("Get IDE version: $version")
+
+        val pluginVersion = PluginManagerCore.getPlugin(PluginId.getId(PluginConstants.PLUGIN_ID))?.version
+        if (pluginVersion != null) {
+            val fullVersion = "$version, $pluginVersion"
+            LOG.info("Get IDE version and plugin version: $fullVersion")
+            return fullVersion
+        }
+
+        return version
+    }
+    
+    /**
+     * Get plugin directory.
+     */
+    private fun getPluginDir(): String {
+        return PluginResourceUtil.getResourcePath(PluginConstants.PLUGIN_ID, "")
+            ?: throw IllegalStateException("Unable to get plugin directory")
+    }
+    
+    /**
+     * Create URI object.
+     */
+    private fun uriFromPath(path: String): URI {
+        return URI.file(path)
+    }
+    
+    /**
+     * Resource disposal.
+     */
+    override fun dispose() {
+        LOG.info("Disposing ExtensionHostManager")
+        
+        // Cancel coroutines
+        coroutineScope.cancel()
+        
+        // Release RPC manager
+        rpcManager = null
+        
+        // Release protocol
+        protocol?.dispose()
+        protocol = null
+        
+        // Release socket
+        nodeSocket.dispose()
+
+        LOG.info("ExtensionHostManager disposed")
+    }
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/core/ExtensionHostMessageType.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/core/ExtensionHostMessageType.kt
new file mode 100644
index 000000000..1de87a1c7
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/core/ExtensionHostMessageType.kt
@@ -0,0 +1,60 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.core
+
+/**
+ * Extension host message type
+ * Corresponds to extensionHostProtocol.MessageType in VSCode
+ */
+enum class ExtensionHostMessageType {
+    /**
+     * Initialized
+     */
+    Initialized,
+    
+    /**
+     * Ready
+     */
+    Ready,
+    
+    /**
+     * Terminated
+     */
+    Terminate;
+    
+    companion object {
+        /**
+         * Get message type from numeric value
+         * @param value Numeric value
+         * @return Corresponding message type, or null if not matched
+         */
+        fun fromValue(value: Int): ExtensionHostMessageType? {
+            return when (value) {
+                0 -> Initialized
+                1 -> Ready
+                2 -> Terminate
+                else -> null
+            }
+        }
+        
+        /**
+         * Get message type from protocol message data
+         * @param data Message data
+         * @return Corresponding message type, or null if not matched
+         */
+        fun fromData(data: ByteArray): ExtensionHostMessageType? {
+            if (data.size != 1) {
+                return null
+            }
+            
+            return when (data[0].toInt()) {
+                1 -> Initialized
+                2 -> Ready
+                3 -> Terminate
+                else -> null
+            }
+        }
+    }
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/core/ExtensionIdentifier.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/core/ExtensionIdentifier.kt
new file mode 100644
index 000000000..0f0763cf6
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/core/ExtensionIdentifier.kt
@@ -0,0 +1,107 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.core
+
+/**
+ * Extension identifier class
+ * Corresponds to ExtensionIdentifier in VSCode
+ */
+class ExtensionIdentifier(val value: String) {
+    /**
+     * Stores lowercase value for comparison and indexing
+     */
+    val _lower: String = value.toLowerCase()
+
+    companion object {
+        /**
+         * Compare whether two extension identifiers are equal
+         * @param a First extension identifier or string
+         * @param b Second extension identifier or string
+         * @return true if equal, false otherwise
+         */
+        fun equals(
+            a: ExtensionIdentifier?,
+            b: ExtensionIdentifier?
+        ): Boolean {
+            if (a == null) {
+                return b == null
+            }
+            if (b == null) {
+                return false
+            }
+            return a._lower == b._lower
+        }
+
+        /**
+         * Compare extension identifier and string for equality
+         * @param a Extension identifier
+         * @param b String
+         * @return true if values are equal (case-insensitive), false otherwise
+         */
+        fun equals(
+            a: ExtensionIdentifier?,
+            b: String?
+        ): Boolean {
+            if (a == null) {
+                return b == null
+            }
+            if (b == null) {
+                return false
+            }
+            return a._lower == b.toLowerCase()
+        }
+
+        /**
+         * Compare string and extension identifier for equality
+         * @param a String
+         * @param b Extension identifier
+         * @return true if values are equal (case-insensitive), false otherwise
+         */
+        fun equals(
+            a: String?,
+            b: ExtensionIdentifier?
+        ): Boolean {
+            if (a == null) {
+                return b == null
+            }
+            if (b == null) {
+                return false
+            }
+            return a.toLowerCase() == b._lower
+        }
+
+        /**
+         * Get key for indexing
+         * @param id Extension identifier or string
+         * @return Key for indexing
+         */
+        fun toKey(id: ExtensionIdentifier): String {
+            return id._lower
+        }
+
+        /**
+         * Get key for indexing
+         * @param id String
+         * @return Key for indexing
+         */
+        fun toKey(id: String): String {
+            return id.toLowerCase()
+        }
+    }
+
+    override fun equals(other: Any?): Boolean {
+        if (other === this) return true
+        if (other !is ExtensionIdentifier) return false
+        return _lower == other._lower
+    }
+
+    override fun hashCode(): Int {
+        return _lower.hashCode()
+    }
+    
+    override fun toString(): String {
+        return value
+    }
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/core/ExtensionManager.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/core/ExtensionManager.kt
new file mode 100644
index 000000000..8217c2932
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/core/ExtensionManager.kt
@@ -0,0 +1,250 @@
+// Copyright 2009-2025 Weibo, Inc.
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.core
+
+import com.google.gson.Gson
+import com.intellij.openapi.Disposable
+import com.intellij.openapi.diagnostic.Logger
+import ai.kilocode.jetbrains.ipc.proxy.IRPCProtocol
+import ai.kilocode.jetbrains.ipc.proxy.ProxyIdentifier
+import ai.kilocode.jetbrains.ipc.proxy.createProxyIdentifier
+import ai.kilocode.jetbrains.util.URI
+import ai.kilocode.jetbrains.util.toCompletableFuture
+import java.io.File
+import java.nio.file.Paths
+import java.util.concurrent.CompletableFuture
+import java.util.concurrent.ConcurrentHashMap
+
+/**
+ * Extension manager
+ * Responsible for managing extension registration and activation
+ */
+class ExtensionManager : Disposable {
+    companion object {
+        val LOG = Logger.getInstance(ExtensionManager::class.java)
+    }
+    
+    // Registered extensions
+    private val extensions = ConcurrentHashMap<String, ExtensionDescription>()
+    
+    // Gson instance
+    private val gson = Gson()
+
+    /**
+     * Parse extension description information
+     * @param extensionPath Extension path
+     * @return Extension description object
+     */
+    private fun parseExtensionDescription(extensionPath: String): ExtensionDescription {
+        LOG.info("Parsing extension: $extensionPath")
+        
+        // Read package.json file
+        val packageJsonPath = Paths.get(extensionPath, "package.json").toString()
+        val packageJsonContent = File(packageJsonPath).readText()
+        val packageJson = gson.fromJson(packageJsonContent, PackageJson::class.java)
+        
+        // Create extension identifier
+        val name = packageJson.name
+        val publisher = "Kilo Code"
+        val extensionIdentifier = ExtensionIdentifier("$publisher.$name")
+        
+        // Create extension description
+        return ExtensionDescription(
+            id = "${publisher}.${name}",
+            identifier = extensionIdentifier,
+            name = "${publisher}.${name}",
+            displayName = packageJson.displayName,
+            description = packageJson.description,
+            version = packageJson.version ?: "1.0.0",
+            publisher = "Kilo Code",
+            main = packageJson.main ?: "./dist/extension.js",
+            activationEvents = packageJson.activationEvents ?: listOf("onStartupFinished"),
+            extensionLocation = URI.file(extensionPath),
+            targetPlatform = "universal", // TargetPlatform.UNIVERSAL
+            isBuiltin = false,
+            isUserBuiltin = false,
+            isUnderDevelopment = false,
+            engines = packageJson.engines?.let { 
+                mapOf("vscode" to (it.vscode ?: "^1.0.0"))
+            } ?: mapOf("vscode" to "^1.0.0"),
+            preRelease = false,
+            capabilities = mapOf(),
+            extensionDependencies = packageJson.extensionDependencies ?: emptyList(),
+        )
+    }
+    
+    /**
+     * Get all parsed extension descriptions
+     * @return Extension description array
+     */
+    fun getAllExtensionDescriptions(): List<ExtensionDescription> {
+        return extensions.values.toList()
+    }
+    
+    /**
+     * Get description information for the specified extension
+     * @param extensionId Extension ID
+     * @return Extension description object, or null if not found
+     */
+    fun getExtensionDescription(extensionId: String): ExtensionDescription? {
+        return extensions[extensionId]
+    }
+    
+    /**
+     * Register extension
+     * @param extensionPath Extension path
+     * @return Extension description object
+     */
+    fun registerExtension(extensionPath: String): ExtensionDescription {
+        val extensionDescription = parseExtensionDescription(extensionPath)
+        extensions[extensionDescription.name] = extensionDescription
+        LOG.info("Extension registered: ${extensionDescription.name}")
+        return extensionDescription
+    }
+    
+    /**
+     * Activate extension
+     * @param extensionId Extension ID
+     * @param rpcProtocol RPC protocol
+     * @return Completion Future
+     */
+    fun activateExtension(extensionId: String, rpcProtocol: IRPCProtocol): CompletableFuture<Boolean> {
+        LOG.info("Activating extension: $extensionId")
+        
+        try {
+            // Get extension description
+            val extension = extensions[extensionId]
+            if (extension == null) {
+                LOG.error("Extension not found: $extensionId")
+                val future = CompletableFuture<Boolean>()
+                future.completeExceptionally(IllegalArgumentException("Extension not found: $extensionId"))
+                return future
+            }
+
+            // Create activation parameters
+            val activationParams = mapOf(
+                "startup" to true,
+                "extensionId" to extension.identifier,
+                "activationEvent" to "api"
+            )
+
+            // Get proxy of ExtHostExtensionServiceShape type
+            val extHostService = rpcProtocol.getProxy(ServiceProxyRegistry.ExtHostContext.ExtHostExtensionService)
+            
+            try {
+                // Get LazyPromise instance and convert it to CompletableFuture<Boolean>
+                val lazyPromise = extHostService.activate(extension.identifier.value, activationParams)
+                
+                return lazyPromise.toCompletableFuture<Any?>().thenApply { result ->
+                    val boolResult = when (result) {
+                        is Boolean -> result
+                        else -> false
+                    }
+                    LOG.info("Extension activation ${if (boolResult) "successful" else "failed"}: $extensionId")
+                    boolResult
+                }.exceptionally { throwable ->
+                    LOG.error("Failed to activate extension: $extensionId", throwable)
+                    false
+                }
+            } catch (e: Exception) {
+                LOG.error("Failed to call activate method: $extensionId", e)
+                val future = CompletableFuture<Boolean>()
+                future.completeExceptionally(e)
+                return future
+            }
+            
+        } catch (e: Exception) {
+            LOG.error("Failed to activate extension: $extensionId", e)
+            val future = CompletableFuture<Boolean>()
+            future.completeExceptionally(e)
+            return future
+        }
+    }
+
+    /**
+     * Release resources
+     */
+    override fun dispose() {
+        LOG.info("Releasing ExtensionManager resources")
+        extensions.clear()
+    }
+}
+
+/**
+ * package.json data class
+ * Used for Gson parsing of extension's package.json file
+ */
+data class PackageJson(
+    val name: String,
+    val displayName: String? = null,
+    val description: String? = null,
+    val publisher: String? = null,
+    val version: String? = null,
+    val engines: Engines? = null,
+    val activationEvents: List<String>? = null,
+    val main: String? = null,
+    val extensionDependencies: List<String>? = null
+)
+
+/**
+ * Engines data class
+ * Used for parsing engines field
+ */
+data class Engines(
+    val vscode: String? = null,
+    val node: String? = null
+)
+
+/**
+ * Extension description
+ * Corresponds to IExtensionDescription in VSCode
+ */
+data class ExtensionDescription(
+    val id: String? = null,
+    val identifier: ExtensionIdentifier,
+    val name: String,
+    val displayName: String? = null,
+    val description: String? = null,
+    val version: String,
+    val publisher: String,
+    val main: String? = null,
+    val activationEvents: List<String>? = null,
+    val extensionLocation: URI,
+    val targetPlatform: String = "universal",
+    val isBuiltin: Boolean = false,
+    val isUserBuiltin: Boolean = false,
+    val isUnderDevelopment: Boolean = false,
+    val engines: Map<String, String>,
+    val preRelease: Boolean = false,
+    val capabilities: Map<String, Any> = emptyMap(),
+    val extensionDependencies: List<String> = emptyList(),
+)
+
+/**
+ * Convert ExtensionDescription to Map<String, Any?>
+ * @return Map containing all properties of ExtensionDescription, where identifier is converted to sid string
+ */
+fun ExtensionDescription.toMap(): Map<String, Any?> {
+    return mapOf(
+        "identifier" to this.identifier.value,
+        "name" to this.name,
+        "displayName" to this.displayName,
+        "description" to this.description,
+        "version" to this.version,
+        "publisher" to this.publisher,
+        "main" to this.main,
+        "activationEvents" to this.activationEvents,
+        "extensionLocation" to this.extensionLocation,
+        "targetPlatform" to this.targetPlatform,
+        "isBuiltin" to this.isBuiltin,
+        "isUserBuiltin" to this.isUserBuiltin,
+        "isUnderDevelopment" to this.isUnderDevelopment,
+        "engines" to this.engines,
+        "preRelease" to this.preRelease,
+        "capabilities" to this.capabilities,
+        "extensionDependencies" to this.extensionDependencies
+    )
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/core/ExtensionProcessManager.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/core/ExtensionProcessManager.kt
new file mode 100644
index 000000000..48283b0ab
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/core/ExtensionProcessManager.kt
@@ -0,0 +1,445 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.core
+
+import com.intellij.execution.configurations.PathEnvironmentVariableUtil
+import com.intellij.openapi.Disposable
+import com.intellij.openapi.diagnostic.Logger
+import com.intellij.openapi.util.SystemInfo
+import ai.kilocode.jetbrains.plugin.DEBUG_MODE
+import ai.kilocode.jetbrains.plugin.WecoderPluginService
+import ai.kilocode.jetbrains.util.PluginResourceUtil
+import ai.kilocode.jetbrains.util.ProxyConfigUtil
+import java.io.File
+import java.util.concurrent.TimeUnit
+import ai.kilocode.jetbrains.util.ExtensionUtils
+import ai.kilocode.jetbrains.util.PluginConstants
+import ai.kilocode.jetbrains.util.NotificationUtil
+import ai.kilocode.jetbrains.util.NodeVersionUtil
+import ai.kilocode.jetbrains.util.NodeVersion
+
+/**
+ * Extension process manager
+ * Responsible for starting and managing extension processes
+ */
+class ExtensionProcessManager : Disposable {
+    companion object {
+        // Node modules path
+        private const val NODE_MODULES_PATH = PluginConstants.NODE_MODULES_PATH
+        
+        // Extension process entry file
+        private const val EXTENSION_ENTRY_FILE = PluginConstants.EXTENSION_ENTRY_FILE
+        
+        // Plugin code directory
+        private const val PLUGIN_CODE_DIR = PluginConstants.PLUGIN_CODE_DIR
+        
+        // Runtime directory
+        private const val RUNTIME_DIR = PluginConstants.RUNTIME_DIR
+        
+        // Plugin ID
+        private const val PLUGIN_ID = PluginConstants.PLUGIN_ID
+        
+        // Minimum required Node.js version
+        private val MIN_REQUIRED_NODE_VERSION = NodeVersion(20, 6, 0, "20.6.0")
+    }
+    
+    private val LOG = Logger.getInstance(ExtensionProcessManager::class.java)
+    
+    // Extension process
+    private var process: Process? = null
+    
+    // Process monitor thread
+    private var monitorThread: Thread? = null
+    
+    // Whether running
+    @Volatile
+    private var isRunning = false
+    
+    /**
+     * Start extension process
+     * @param portOrPath Socket server port (Int) or UDS path (String)
+     * @return Whether started successfully
+     */
+    fun start(portOrPath: Any?): Boolean {
+        if (isRunning) {
+            LOG.info("Extension process is already running")
+            return true
+        }
+        val isUds = portOrPath is String
+        if (!ExtensionUtils.isValidPortOrPath(portOrPath)) {
+            LOG.error("Invalid socket info: $portOrPath")
+            return false
+        }
+        
+        try {
+            // Prepare Node.js executable path
+            val nodePath = findNodeExecutable()
+            if (nodePath == null) {
+                LOG.error("Failed to find Node.js executable")
+                
+                // Show notification to prompt user to install Node.js
+                NotificationUtil.showError(
+                    "Node.js environment missing",
+                    "Node.js environment not detected, please install Node.js and try again. Recommended version: $MIN_REQUIRED_NODE_VERSION or higher."
+                )
+                
+                return false
+            }
+            
+            // Check Node.js version
+            val nodeVersion = NodeVersionUtil.getNodeVersion(nodePath)
+            if (!NodeVersionUtil.isVersionSupported(nodeVersion, MIN_REQUIRED_NODE_VERSION)) {
+                LOG.error("Node.js version is not supported: $nodeVersion, required: $MIN_REQUIRED_NODE_VERSION")
+
+                NotificationUtil.showError(
+                    "Node.js version too low",
+                    "Current Node.js($nodePath) version is $nodeVersion, please upgrade to $MIN_REQUIRED_NODE_VERSION or higher for better compatibility."
+                )
+                
+                return false
+            }
+            
+            // Prepare extension process entry file path
+            val extensionPath = findExtensionEntryFile()
+            if (extensionPath == null) {
+                LOG.error("Failed to find extension entry file")
+                return false
+            }
+            
+            LOG.info("Starting extension process with node: $nodePath, entry: $extensionPath")
+
+            val envVars = HashMap<String, String>(System.getenv())
+            
+            // Build complete PATH
+            envVars["PATH"] = buildEnhancedPath(envVars, nodePath)
+            LOG.info("Enhanced PATH for ${SystemInfo.getOsNameAndVersion()}: ${envVars["PATH"]}")
+            
+            // Add key environment variables
+            if (isUds) {
+                envVars["VSCODE_EXTHOST_IPC_HOOK"] = portOrPath.toString()
+            }else{
+                envVars["VSCODE_EXTHOST_WILL_SEND_SOCKET"] = "1"
+                envVars["VSCODE_EXTHOST_SOCKET_HOST"] = "127.0.0.1"
+                envVars["VSCODE_EXTHOST_SOCKET_PORT"] = portOrPath.toString()
+            }
+
+            // Build command line arguments
+            val commandArgs = mutableListOf(
+                nodePath,
+                "--experimental-global-webcrypto",
+                "--no-deprecation",
+//                "--trace-uncaught",
+                extensionPath,
+                "--vscode-socket-port=${envVars["VSCODE_EXTHOST_SOCKET_PORT"]}",
+                "--vscode-socket-host=${envVars["VSCODE_EXTHOST_SOCKET_HOST"]}",
+                "--vscode-will-send-socket=${envVars["VSCODE_EXTHOST_WILL_SEND_SOCKET"]}"
+            )
+            
+            // Get and set proxy configuration
+            try {
+                val proxyEnvVars = ProxyConfigUtil.getProxyEnvVarsForProcessStart()
+                
+                // Add proxy environment variables
+                envVars.putAll(proxyEnvVars)
+                
+                // Log proxy configuration if used
+                if (proxyEnvVars.isNotEmpty()) {
+                    LOG.info("Applied proxy configuration for process startup")
+                }
+            } catch (e: Exception) {
+                LOG.warn("Failed to configure proxy settings", e)
+            }
+            
+            // Create process builder
+            val builder = ProcessBuilder(commandArgs)
+
+            // Print environment variables
+            LOG.info("Environment variables:")
+            envVars.forEach { (key, value) ->
+                LOG.info("  $key = $value")
+            }
+            builder.environment().putAll(envVars)
+            
+            // Redirect error stream to standard output
+            builder.redirectErrorStream(true)
+            
+            // Start process
+            process = builder.start()
+            
+            // Start monitor thread
+            monitorThread = Thread {
+                monitorProcess()
+            }.apply {
+                name = "ExtensionProcessMonitor"
+                isDaemon = true
+                start()
+            }
+            
+            isRunning = true
+            LOG.info("Extension process started")
+            return true
+        } catch (e: Exception) {
+            LOG.error("Failed to start extension process", e)
+            stopInternal()
+            return false
+        }
+    }
+    
+    /**
+     * Monitor extension process
+     */
+    private fun monitorProcess() {
+        val proc = process ?: return
+        
+        try {
+            // Start log reading thread
+            val logThread = Thread {
+                proc.inputStream.bufferedReader().use { reader ->
+                    var line: String?
+                    while (reader.readLine().also { line = it } != null) {
+                        LOG.info("Extension process: $line")
+                    }
+                }
+            }
+            logThread.name = "ExtensionProcessLogger"
+            logThread.isDaemon = true
+            logThread.start()
+            
+            // Wait for process to end
+            try {
+                val exitCode = proc.waitFor()
+                LOG.info("Extension process exited with code: $exitCode")
+            } catch (e: InterruptedException) {
+                LOG.info("Process monitor interrupted")
+            }
+            
+            // Ensure log thread ends
+            logThread.interrupt()
+            try {
+                logThread.join(1000)
+            } catch (e: InterruptedException) {
+                // Ignore
+            }
+        } catch (e: Exception) {
+            LOG.error("Error monitoring extension process", e)
+        } finally {
+            synchronized(this) {
+                if (process === proc) {
+                    isRunning = false
+                    process = null
+                }
+            }
+        }
+    }
+    
+    /**
+     * Stop extension process
+     */
+    fun stop() {
+        if (!isRunning) {
+            return
+        }
+        
+        stopInternal()
+    }
+    
+    /**
+     * Internal stop logic
+     */
+    private fun stopInternal() {
+        LOG.info("Stopping extension process")
+        
+        val proc = process
+        if (proc != null) {
+            try {
+                // Try to close normally
+                if (proc.isAlive) {
+                    proc.destroy()
+                    
+                    // Wait for process to end
+                    if (!proc.waitFor(5, TimeUnit.SECONDS)) {
+                        // Force terminate
+                        proc.destroyForcibly()
+                        proc.waitFor(2, TimeUnit.SECONDS)
+                    }
+                }
+            } catch (e: Exception) {
+                LOG.error("Error stopping extension process", e)
+            }
+        }
+        
+        // Interrupt monitor thread
+        monitorThread?.interrupt()
+        try {
+            monitorThread?.join(1000)
+        } catch (e: InterruptedException) {
+            // Ignore
+        }
+        
+        process = null
+        monitorThread = null
+        isRunning = false
+        
+        LOG.info("Extension process stopped")
+    }
+    
+    /**
+     * Find Node.js executable
+     */
+    private fun findNodeExecutable(): String? {
+        // First check built-in Node.js
+        val resourcesPath = PluginResourceUtil.getResourcePath(PLUGIN_ID, NODE_MODULES_PATH)
+        if (resourcesPath != null) {
+            val resourceDir = File(resourcesPath)
+            if (resourceDir.exists() && resourceDir.isDirectory) {
+                val nodeBin = if (SystemInfo.isWindows) {
+                    File(resourceDir, "node.exe")
+                } else {
+                    File(resourceDir, ".bin/node")
+                }
+                
+                if (nodeBin.exists() && nodeBin.canExecute()) {
+                    return nodeBin.absolutePath
+                }
+            }
+        }
+        
+        // Then check system path
+        return findExecutableInPath("node")
+    }
+    
+    /**
+     * Find executable in system path
+     */
+    private fun findExecutableInPath(name: String): String? {
+        val nodePath = PathEnvironmentVariableUtil.findExecutableInPathOnAnyOS("node")?.absolutePath
+        LOG.info("System Node path: $nodePath")
+        return nodePath
+    }
+    
+    /**
+     * Find extension process entry file
+     * @param projectBasePath Current project root path
+     */
+    fun findExtensionEntryFile(): String? {
+        // In debug mode, directly return resources path
+        if (WecoderPluginService.getDebugMode() != DEBUG_MODE.NONE) {
+            val debugEntry = java.nio.file.Paths.get(WecoderPluginService.getDebugResource(), RUNTIME_DIR, "src", EXTENSION_ENTRY_FILE).normalize().toFile()
+            if (debugEntry.exists() && debugEntry.isFile) {
+                LOG.info("[DebugMode] Using debug entry file: ${debugEntry.absolutePath}")
+                return debugEntry.absolutePath
+            } else {
+                LOG.warn("[DebugMode] Debug entry file not found: ${debugEntry.absolutePath}")
+            }
+        }
+        // Normal mode
+        val resourcesPath = ai.kilocode.jetbrains.util.PluginResourceUtil.getResourcePath(PLUGIN_ID, "$RUNTIME_DIR/$EXTENSION_ENTRY_FILE")
+        if (resourcesPath != null) {
+            val resource = java.io.File(resourcesPath)
+            if (resource.exists() && resource.isFile) {
+                return resourcesPath
+            }
+        }
+        return null
+    }
+    
+    /**
+     * Find plugin code directory
+     */
+    private fun findPluginCodeDir(): String? {
+        val pluginDirPath = PluginResourceUtil.getResourcePath(PLUGIN_ID, PLUGIN_CODE_DIR)
+        if (pluginDirPath != null) {
+            val pluginCodeDir = File(pluginDirPath)
+            if (pluginCodeDir.exists() && pluginCodeDir.isDirectory) {
+                return pluginCodeDir.absolutePath
+            }
+        }
+        
+        LOG.warn("Plugin code directory not found")
+        return null
+    }
+    
+    /**
+     * Find node_modules path
+     */
+    private fun findNodeModulesPath(): String? {
+        val nodePath = PluginResourceUtil.getResourcePath(PLUGIN_ID, NODE_MODULES_PATH)
+        if (nodePath != null) {
+            val nodeDir = File(nodePath)
+            if (nodeDir.exists() && nodeDir.isDirectory) {
+                return nodeDir.absolutePath
+            }
+        }
+        return null
+    }
+    
+    /**
+     * Build enhanced PATH environment variable
+     * @param envVars Environment variable map
+     * @param nodePath Node.js executable path
+     * @return Enhanced PATH
+     */
+    private fun buildEnhancedPath(envVars: MutableMap<String, String>, nodePath: String): String {
+        // Find current PATH value (Path on Windows)
+        val currentPath = envVars.filterKeys { it.equals("PATH", ignoreCase = true) }
+            .values.firstOrNull() ?: ""
+        
+        val pathBuilder = mutableListOf<String>()
+
+        // Simplify: add Node directory to PATH head (npx usually in same dir as node)
+        val nodeDir = File(nodePath).parentFile?.absolutePath
+        if (nodeDir != null && !currentPath.contains(nodeDir)) {
+            pathBuilder.add(nodeDir)
+        }
+
+        // Add common paths according to OS
+        val commonDevPaths = when {
+            SystemInfo.isMac -> listOf(
+                "/opt/homebrew/bin",
+                "/opt/homebrew/sbin",
+                "/usr/local/bin",
+                "/usr/local/sbin",
+                "${System.getProperty("user.home")}/.local/bin"
+            )
+            SystemInfo.isWindows -> listOf(
+                "C:\\Windows\\System32",
+                "C:\\Windows\\SysWOW64",
+                "C:\\Windows",
+                "C:\\Windows\\System32\\WindowsPowerShell\\v1.0",
+                "C:\\Program Files\\PowerShell\\7",
+                "C:\\Program Files (x86)\\PowerShell\\7"
+            )
+            else -> emptyList()
+        }
+
+        // Add existing paths
+        commonDevPaths.forEach { path ->
+            if (File(path).exists() && !currentPath.contains(path)) {
+                pathBuilder.add(path)
+                LOG.info("Add path to PATH: $path")
+            } else if (!File(path).exists()) {
+                LOG.warn("Path does not exist, skip: $path")
+            }
+        }
+
+        // Keep original PATH
+        if (currentPath.isNotEmpty()) {
+            pathBuilder.add(currentPath)
+        }
+
+        return pathBuilder.joinToString(File.pathSeparator)
+    }
+    
+    /**
+     * Whether running
+     */
+    fun isRunning(): Boolean {
+        return isRunning && process?.isAlive == true
+    }
+    
+    override fun dispose() {
+        stop()
+    }
+}
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/core/ExtensionSocketServer.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/core/ExtensionSocketServer.kt
new file mode 100644
index 000000000..fad9e6272
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/core/ExtensionSocketServer.kt
@@ -0,0 +1,313 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.core
+
+import com.intellij.openapi.Disposable
+import com.intellij.openapi.diagnostic.Logger
+import com.intellij.openapi.project.Project
+import java.net.ServerSocket
+import java.net.Socket
+import java.io.IOException
+import java.util.concurrent.ConcurrentHashMap
+import kotlin.concurrent.thread
+
+/**
+ * Extension process Socket server
+ * Used to establish communication with extension process
+ */
+interface ISocketServer : Disposable {
+    fun start(projectPath: String = ""): Any?
+    fun stop()
+    fun isRunning(): Boolean
+}
+
+class ExtensionSocketServer() : ISocketServer {
+    private val logger = Logger.getInstance(ExtensionSocketServer::class.java)
+    
+    // Server socket
+    private var serverSocket: ServerSocket? = null
+    
+    // Connected client managers
+    private val clientManagers = ConcurrentHashMap<Socket, ExtensionHostManager>()
+    
+    // Server thread
+    private var serverThread: Thread? = null
+    
+    // Current project path
+    private var projectPath: String = ""
+    
+    // Whether running
+    @Volatile
+    private var isRunning = false
+
+    lateinit var project: Project
+
+    /**
+     * Start Socket server
+     * @param projectPath Current project path
+     * @return Server port, -1 if failed
+     */
+    override fun start(projectPath: String): Int {
+        if (isRunning) {
+            logger.info("Socket server is already running")
+            return serverSocket?.localPort ?: -1
+        }
+        
+        this.projectPath = projectPath
+        
+        try {
+            // Use 0 to indicate random port assignment
+            serverSocket = ServerSocket(0)
+            val port = serverSocket?.localPort ?: -1
+            
+            if (port <= 0) {
+                logger.error("Failed to get valid port for socket server")
+                return -1
+            }
+            
+            isRunning = true
+            logger.info("Starting socket server on port: $port")
+            
+            // Start the thread to accept connections
+            serverThread = thread(start = true, name = "ExtensionSocketServer") {
+                acceptConnections()
+            }
+            
+            return port
+        } catch (e: Exception) {
+            logger.error("Failed to start socket server", e)
+            stop()
+            return -1
+        }
+    }
+    
+    /**
+     * Stop Socket server
+     */
+    override fun stop() {
+        if (!isRunning) {
+            return
+        }
+        
+        isRunning = false
+        logger.info("Stopping socket server")
+        
+        // Close all client managers
+        clientManagers.forEach { (_, manager) ->
+            try {
+                manager.dispose()
+            } catch (e: Exception) {
+                logger.warn("Failed to dispose client manager", e)
+            }
+        }
+        clientManagers.clear()
+        
+        // Close the server
+        try {
+            serverSocket?.close()
+        } catch (e: IOException) {
+            logger.warn("Failed to close server socket", e)
+        }
+        
+        // Interrupt the server thread
+        serverThread?.interrupt()
+        serverThread = null
+        serverSocket = null
+        
+        logger.info("Socket server stopped")
+    }
+    
+    /**
+     * Thread function for accepting connections
+     */
+    private fun acceptConnections() {
+        val server = serverSocket ?: return
+        
+        logger.info("Socket server started, waiting for connections..., tid: ${Thread.currentThread().id}")
+        
+        while (isRunning && !Thread.currentThread().isInterrupted) {
+            try {
+                val clientSocket = server.accept()
+                logger.info("New client connected from: ${clientSocket.inetAddress.hostAddress}")
+                
+                clientSocket.tcpNoDelay = true // Set no delay
+                
+                // Create extension host manager
+                val manager = ExtensionHostManager(clientSocket, projectPath,project)
+                clientManagers[clientSocket] = manager
+
+                handleClient(clientSocket, manager)
+            } catch (e: IOException) {
+                if (isRunning) {
+                    logger.error("Error accepting client connection", e)
+                } else {
+                    // IOException is thrown when ServerSocket is closed, this is normal
+                    logger.info("Socket server closed")
+                    break
+                }
+            } catch (e: InterruptedException) {
+                // Thread interrupted, this is normal
+                logger.info("Socket server thread interrupted")
+                break
+            } catch (e: Exception) {
+                logger.error("Unexpected error in accept loop", e)
+                if (isRunning) {
+                    try {
+                        // Retry after short delay
+                        Thread.sleep(1000)
+                    } catch (ie: InterruptedException) {
+                        // Thread interrupted, server is shutting down
+                        logger.info("Socket server thread interrupted during sleep")
+                        break
+                    }
+                }
+            }
+        }
+        
+        logger.info("Socket accept loop terminated")
+    }
+
+    /**
+     * Handle client connection
+     */
+    private fun handleClient(clientSocket: Socket, manager: ExtensionHostManager) {
+        try {
+            // Start extension host manager
+            manager.start()
+            
+            // Periodically check socket health
+            var lastCheckTime = System.currentTimeMillis()
+            val CHECK_INTERVAL = 15000 // Check every 15 seconds
+            
+            // Wait for socket to close
+            while (clientSocket.isConnected && !clientSocket.isClosed && isRunning) {
+                try {
+                    // Periodically check connection health
+                    val currentTime = System.currentTimeMillis()
+                    if (currentTime - lastCheckTime > CHECK_INTERVAL) {
+                        lastCheckTime = currentTime
+                        
+                        if (!isSocketHealthy(clientSocket)) {
+                            logger.error("Detected unhealthy Socket connection, closing connection")
+                            break
+                        }
+                        
+                        // Check RPC response state
+                        val responsiveState = manager.getResponsiveState()
+                        if (responsiveState != null) {
+                            logger.debug("Current RPC response state: $responsiveState")
+                        }
+                    }
+                    
+                    Thread.sleep(500)
+                } catch (ie: InterruptedException) {
+                    // Thread interrupted, server is shutting down, exit loop
+                    logger.info("Client handler thread interrupted, exiting loop")
+                    break
+                }
+            }
+        } catch (e: Exception) {
+            // Filter out InterruptedException, it means normal interruption
+            if (e !is InterruptedException) {
+                logger.error("Error handling client socket: ${e.message}", e)
+            } else {
+                logger.info("Client handler thread interrupted during processing")
+            }
+        } finally {
+            // Clean up resources
+            manager.dispose()
+            clientManagers.remove(clientSocket)
+            
+            if (!clientSocket.isClosed) {
+                try {
+                    clientSocket.close()
+                } catch (e: IOException) {
+                    logger.warn("Failed to close client socket", e)
+                }
+            }
+            
+            logger.info("Client socket closed and removed")
+        }
+    }
+    
+    /**
+     * Check socket connection health
+     */
+    private fun isSocketHealthy(socket: Socket): Boolean {
+        val isHealthy = socket.isConnected && 
+                        !socket.isClosed && 
+                        !socket.isInputShutdown && 
+                        !socket.isOutputShutdown
+        
+        if (!isHealthy) {
+            logger.warn("Socket health check failed: isConnected=${socket.isConnected}, " +
+                       "isClosed=${socket.isClosed}, " +
+                       "isInputShutdown=${socket.isInputShutdown}, " +
+                       "isOutputShutdown=${socket.isOutputShutdown}")
+        }
+        
+        return isHealthy
+    }
+    
+    /**
+     * Get current port
+     */
+    fun getPort(): Int {
+        return serverSocket?.localPort ?: -1
+    }
+    
+    /**
+     * Whether running
+     */
+    override fun isRunning(): Boolean {
+        return isRunning
+    }
+    
+    /**
+     * Resource cleanup
+     */
+    override fun dispose() {
+        stop()
+    }
+    
+    /**
+     * Connect to debug host
+     * @param host Debug host address
+     * @param port Debug host port
+     * @return Whether connection is successful
+     */
+    fun connectToDebugHost(host: String, port: Int): Boolean {
+        if (isRunning) {
+            logger.info("Socket server is already running, stopping first")
+            stop()
+        }
+        
+        try {
+            logger.info("Connecting to debug host at $host:$port")
+            
+            // Directly connect to the specified address and port
+            val clientSocket = Socket(host, port)
+            clientSocket.tcpNoDelay = true // Set no delay
+            
+            isRunning = true
+            
+            // Create extension host manager
+            val manager = ExtensionHostManager(clientSocket, projectPath,project)
+            clientManagers[clientSocket] = manager
+            
+            // Start connection handling in background thread
+            thread(start = true, name = "DebugHostHandler") {
+                handleClient(clientSocket, manager)
+            }
+
+            logger.info("Successfully connected to debug host at $host:$port")
+            return true
+        } catch (e: Exception) {
+            logger.error("Failed to connect to debug host at $host:$port", e)
+            stop()
+            return false
+        }
+    }
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/core/ExtensionUnixDomainSocketServer.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/core/ExtensionUnixDomainSocketServer.kt
new file mode 100644
index 000000000..e0e3d0909
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/core/ExtensionUnixDomainSocketServer.kt
@@ -0,0 +1,190 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.core
+
+import com.intellij.openapi.diagnostic.Logger
+import com.intellij.openapi.project.Project
+import java.io.IOException
+import java.net.StandardProtocolFamily
+import java.net.UnixDomainSocketAddress
+import java.nio.channels.ServerSocketChannel
+import java.nio.channels.SocketChannel
+import java.nio.file.Files
+import java.nio.file.Path
+import java.util.concurrent.ConcurrentHashMap
+import kotlin.concurrent.thread
+
+    // ExtensionUnixDomainSocketServer is responsible for communication between extension process and IDEA plugin process via Unix Domain Socket
+class ExtensionUnixDomainSocketServer : ISocketServer {
+    // Logger
+    private val logger = Logger.getInstance(ExtensionUnixDomainSocketServer::class.java)
+    // UDS server channel
+    private var udsServerChannel: ServerSocketChannel? = null
+    // UDS socket file path
+    private var udsSocketPath: Path? = null
+    // Mapping of client connections and managers
+    private val clientManagers = ConcurrentHashMap<SocketChannel, ExtensionHostManager>()
+    // Server listening thread
+    private var serverThread: Thread? = null
+    // Current project path
+    private var projectPath: String = ""
+
+    lateinit var project: Project
+
+    @Volatile private var isRunning = false // Server running state
+
+    // Start UDS server, return socket file path
+    override fun start(projectPath: String): String? {
+        if (isRunning) {
+            logger.info("UDS server is already running")
+            return udsSocketPath?.toString()
+        }
+        this.projectPath = projectPath
+        return startUds()
+    }
+
+    // Actual logic to start UDS server
+    private fun startUds(): String? {
+        try {
+            val sockPath = createSocketFile() // Create socket file
+            val udsAddr = UnixDomainSocketAddress.of(sockPath)
+            udsServerChannel = ServerSocketChannel.open(StandardProtocolFamily.UNIX)
+            udsServerChannel!!.bind(udsAddr)
+            udsSocketPath = sockPath
+            isRunning = true
+            logger.info("[UDS] Listening on: $sockPath")
+            // Start listening thread, asynchronously accept client connections
+            serverThread =
+                    thread(start = true, name = "ExtensionUDSSocketServer") {
+                        acceptUdsConnections()
+                    }
+            return sockPath.toString()
+        } catch (e: Exception) {
+            logger.error("[UDS] Failed to start server", e)
+            stop()
+            return null
+        }
+    }
+
+    // Stop UDS server, release resources
+    override fun stop() {
+        if (!isRunning) return
+        isRunning = false
+        logger.info("Stopping UDS socket server")
+        // Close all client connections
+        clientManagers.forEach { (_, manager) ->
+            try {
+                manager.dispose()
+            } catch (e: Exception) {
+                logger.warn("Failed to dispose client manager", e)
+            }
+        }
+        clientManagers.clear()
+        try {
+            udsServerChannel?.close()
+        } catch (e: Exception) {
+            logger.warn("Failed to close UDS server channel", e)
+        }
+        try {
+            udsSocketPath?.let { Files.deleteIfExists(it) }
+        } catch (e: Exception) {
+            logger.warn("Failed to delete UDS socket file", e)
+        }
+        // Thread and channel cleanup
+        serverThread?.interrupt()
+        serverThread = null
+        udsServerChannel = null
+        udsSocketPath = null
+        logger.info("UDS socket server stopped")
+    }
+
+    override fun isRunning(): Boolean = isRunning
+    override fun dispose() {
+        stop()
+    }
+
+    // Listen and accept UDS client connections
+    private fun acceptUdsConnections() {
+        val server = udsServerChannel ?: return
+        logger.info("[UDS] Waiting for connections..., tid: ${Thread.currentThread().id}")
+        while (isRunning && !Thread.currentThread().isInterrupted) {
+            try {
+                val clientChannel = server.accept() // Block and wait for new connection
+                logger.info("[UDS] New client connected")
+                val manager = ExtensionHostManager(clientChannel, projectPath,project)
+                clientManagers[clientChannel] = manager
+                handleClient(clientChannel, manager) // Start client handler thread
+            } catch (e: Exception) {
+                if (isRunning) {
+                    logger.error("[UDS] Accept failed, will retry in 1s", e)
+                    Thread.sleep(1000)
+                } else {
+                    logger.info("[UDS] Accept loop exiting (server stopped)")
+                    break
+                }
+            }
+        }
+        logger.info("[UDS] Accept loop terminated.")
+    }
+
+    // Handle single client connection, responsible for heartbeat check and resource release
+    private fun handleClient(clientChannel: SocketChannel, manager: ExtensionHostManager) {
+        try {
+            manager.start() // Start extension host manager
+
+            var lastCheckTime = System.currentTimeMillis()
+            val CHECK_INTERVAL = 15000 // Heartbeat check interval
+
+            while (clientChannel.isConnected && clientChannel.isOpen && isRunning) {
+                try {
+                    val currentTime = System.currentTimeMillis()
+                    if (currentTime - lastCheckTime > CHECK_INTERVAL) {
+                        lastCheckTime = currentTime
+
+                        // UDS has no input/output shutdown flag, can only use isOpen
+                        if (!clientChannel.isOpen) {
+                            logger.error("[UDS] Client channel unhealthy, closing.")
+                            break
+                        }
+
+                        val responsiveState = manager.getResponsiveState()
+                        if (responsiveState != null) {
+                            logger.debug("[UDS] Client RPC state: $responsiveState")
+                        }
+                    }
+
+                    Thread.sleep(500)
+                } catch (ie: InterruptedException) {
+                    logger.info("[UDS] Client handler interrupted, exiting loop")
+                    break
+                }
+            }
+        } catch (e: Exception) {
+            if (e !is InterruptedException) {
+                logger.error("[UDS] Error in client handler: ${e.message}", e)
+            } else {
+                logger.info("[UDS] Client handler interrupted during processing")
+            }
+        } finally {
+            // Connection close and resource release
+            manager.dispose()
+            clientManagers.remove(clientChannel)
+            try {
+                clientChannel.close()
+            } catch (e: IOException) {
+                logger.warn("[UDS] Close client channel error", e)
+            }
+            logger.info("[UDS] Client channel closed and removed.")
+        }
+    }
+
+    // Create temporary socket file, ensure uniqueness
+    private fun createSocketFile(): Path {
+        val tmpDir = java.nio.file.Paths.get("/tmp")
+        val sockPath = Files.createTempFile(tmpDir, "roo-cline-idea-extension-ipc-", ".sock")
+        Files.deleteIfExists(sockPath) // Ensure it does not exist
+        return sockPath
+    }
+}
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/core/PluginContext.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/core/PluginContext.kt
new file mode 100644
index 000000000..37a4e6e92
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/core/PluginContext.kt
@@ -0,0 +1,63 @@
+// Copyright 2009-2025 Weibo, Inc.
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.core
+
+import com.intellij.openapi.components.Service
+import com.intellij.openapi.diagnostic.Logger
+import com.intellij.openapi.project.Project
+import ai.kilocode.jetbrains.ipc.proxy.IRPCProtocol
+
+/**
+ * Plugin global context
+ * Used for managing globally accessible resources and objects
+ */
+@Service(Service.Level.PROJECT)
+class PluginContext{
+    private val logger = Logger.getInstance(PluginContext::class.java)
+    
+    // RPC protocol instance
+    @Volatile
+    private var rpcProtocol: IRPCProtocol? = null
+    
+    /**
+     * Set RPC protocol instance
+     * @param protocol RPC protocol instance
+     */
+    fun setRPCProtocol(protocol: IRPCProtocol) {
+        logger.info("Setting RPC protocol instance")
+        rpcProtocol = protocol
+    }
+    
+    /**
+     * Get RPC protocol instance
+     * @return RPC protocol instance, or null if not set
+     */
+    fun getRPCProtocol(): IRPCProtocol? {
+        return rpcProtocol
+    }
+    
+    /**
+     * Clear all resources
+     */
+    fun clear() {
+        logger.info("Clearing resources in PluginContext")
+        rpcProtocol = null
+    }
+    
+    companion object {
+        // Singleton instance
+//        @Volatile
+//        private var instance: PluginContext? = null
+
+        /**
+         * Get PluginContext singleton instance
+         * @return PluginContext instance
+         */
+        fun getInstance(project : Project): PluginContext {
+            return project.getService(PluginContext::class.java)
+        }
+    }
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/core/RPCManager.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/core/RPCManager.kt
new file mode 100644
index 000000000..c1387241b
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/core/RPCManager.kt
@@ -0,0 +1,258 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.core
+
+import com.intellij.openapi.diagnostic.Logger
+import com.intellij.openapi.project.Project
+import ai.kilocode.jetbrains.actors.*
+import ai.kilocode.jetbrains.ipc.IMessagePassingProtocol
+import ai.kilocode.jetbrains.ipc.proxy.IRPCProtocol
+import ai.kilocode.jetbrains.ipc.proxy.RPCProtocol
+import ai.kilocode.jetbrains.ipc.proxy.logger.FileRPCProtocolLogger
+import ai.kilocode.jetbrains.ipc.proxy.uri.IURITransformer
+import ai.kilocode.jetbrains.theme.ThemeManager
+import ai.kilocode.jetbrains.util.ProxyConfigUtil
+import kotlinx.coroutines.runBlocking
+
+/**
+ * Responsible for managing RPC protocols, service registration and implementation, plugin lifecycle management
+ * This class is based on VSCode's rpcManager.js implementation
+ */
+class RPCManager(
+    private val protocol: IMessagePassingProtocol,
+    private val extensionManager: ExtensionManager,
+    private val uriTransformer: IURITransformer? = null,
+    private val project: Project
+) {
+    private val logger = Logger.getInstance(RPCManager::class.java)
+    private val rpcProtocol: IRPCProtocol = RPCProtocol(protocol, FileRPCProtocolLogger(), uriTransformer)
+
+    init {
+        setupDefaultProtocols()
+        setupExtensionRequiredProtocols()
+        setupWeCodeRequiredProtocols()
+        setupRooCodeFuncitonProtocols()
+        setupWebviewProtocols()
+    }
+
+    /**
+     * Start initializing plugin environment
+     * Send configuration and workspace information to extension process
+     */
+    fun startInitialize() {
+        try {
+            logger.info("Starting to initialize plugin environment")
+            runBlocking {
+                // Get ExtHostConfiguration proxy
+                val extHostConfiguration =
+                    rpcProtocol.getProxy(ServiceProxyRegistry.ExtHostContext.ExtHostConfiguration)
+
+                // Send empty configuration model
+                logger.info("Sending configuration information to extension process")
+                val themeName =
+                    if (ThemeManager.getInstance().isDarkThemeForce()) "Default Dark Modern" else "Default Light Modern"
+
+                // Create empty configuration model
+                val emptyMap = mapOf(
+                    "contents" to emptyMap<String, Any>(),
+                    "keys" to emptyList<String>(),
+                    "overrides" to emptyList<String>()
+                )
+                // Get proxy configuration
+                val httpProxyConfig = ProxyConfigUtil.getHttpProxyConfigForInitialization()
+                
+                // Build configuration contents
+                val contentsBuilder = mutableMapOf<String, Any>(
+                    "workbench" to mapOf("colorTheme" to themeName)
+                )
+                
+                // Add proxy configuration if available
+                httpProxyConfig?.let {
+                    contentsBuilder["http"] = it
+                    logger.info("Using proxy configuration for initialization: $it")
+                }
+                
+                val emptyConfigModel = mapOf(
+                    "defaults" to mapOf(
+                        "contents" to contentsBuilder,
+                        "keys" to emptyList<String>(),
+                        "overrides" to emptyList<String>()
+                    ),
+                    "policy" to emptyMap,
+                    "application" to emptyMap,
+                    "userLocal" to emptyMap,
+                    "userRemote" to emptyMap,
+                    "workspace" to emptyMap,
+                    "folders" to emptyList<Any>(),
+                    "configurationScopes" to emptyList<Any>()
+                )
+
+                // Directly call the interface method
+                extHostConfiguration.initializeConfiguration(emptyConfigModel)
+
+                // Get ExtHostWorkspace proxy
+                val extHostWorkspace = rpcProtocol.getProxy(ServiceProxyRegistry.ExtHostContext.ExtHostWorkspace)
+
+                // Get current workspace data
+                logger.info("Getting current workspace data")
+                val workspaceData = project.getService(WorkspaceManager::class.java).getCurrentWorkspaceData()
+
+                // If workspace data is obtained, send it to extension process, otherwise send null
+                if (workspaceData != null) {
+                    logger.info("Sending workspace data to extension process: ${workspaceData.name}, folders: ${workspaceData.folders.size}")
+                    extHostWorkspace.initializeWorkspace(workspaceData, true)
+                } else {
+                    logger.info("No available workspace data, sending null to extension process")
+                    extHostWorkspace.initializeWorkspace(null, true)
+                }
+
+                // Initialize workspace
+                logger.info("Workspace initialization completed")
+            }
+        } catch (e: Exception) {
+            logger.error("Failed to initialize plugin environment: ${e.message}", e)
+        }
+    }
+
+    /**
+     * Set up default protocol handlers
+     * These protocols are required for extHost process startup and initialization
+     */
+    private fun setupDefaultProtocols() {
+        logger.info("Setting up default protocol handlers")
+        PluginContext.getInstance(project).setRPCProtocol(rpcProtocol)
+
+        // MainThreadErrors
+        rpcProtocol.set(ServiceProxyRegistry.MainContext.MainThreadErrors, MainThreadErrors())
+
+        // MainThreadConsole
+        rpcProtocol.set(ServiceProxyRegistry.MainContext.MainThreadConsole, MainThreadConsole())
+
+        // MainThreadLogger
+        rpcProtocol.set(ServiceProxyRegistry.MainContext.MainThreadLogger, MainThreadLogger())
+
+        // MainThreadCommands
+        rpcProtocol.set(ServiceProxyRegistry.MainContext.MainThreadCommands, MainThreadCommands(project))
+
+        // MainThreadDebugService
+        rpcProtocol.set(ServiceProxyRegistry.MainContext.MainThreadDebugService, MainThreadDebugService())
+
+        // MainThreadConfiguration
+        rpcProtocol.set(ServiceProxyRegistry.MainContext.MainThreadConfiguration, MainThreadConfiguration())
+    }
+
+    /**
+     * Set up protocol handlers required for plugin package general loading process
+     */
+    private fun setupExtensionRequiredProtocols() {
+        logger.info("Setting up required protocol handlers for plugins")
+
+        // MainThreadExtensionService
+        val mainThreadExtensionService = MainThreadExtensionService(extensionManager, rpcProtocol)
+        rpcProtocol.set(ServiceProxyRegistry.MainContext.MainThreadExtensionService, mainThreadExtensionService)
+
+        // MainThreadTelemetry
+        rpcProtocol.set(ServiceProxyRegistry.MainContext.MainThreadTelemetry, MainThreadTelemetry())
+
+        // MainThreadTerminalShellIntegration - use new architecture, pass project parameter
+        rpcProtocol.set(
+            ServiceProxyRegistry.MainContext.MainThreadTerminalShellIntegration,
+            MainThreadTerminalShellIntegration(project)
+        )
+
+        // MainThreadTerminalService - use new architecture, pass project parameter
+        rpcProtocol.set(ServiceProxyRegistry.MainContext.MainThreadTerminalService, MainThreadTerminalService(project))
+
+        // MainThreadTask
+        rpcProtocol.set(ServiceProxyRegistry.MainContext.MainThreadTask, MainThreadTask())
+
+        // MainThreadSearch
+        rpcProtocol.set(ServiceProxyRegistry.MainContext.MainThreadSearch, MainThreadSearch())
+
+        // MainThreadWindow
+        rpcProtocol.set(ServiceProxyRegistry.MainContext.MainThreadWindow, MainThreadWindow(project))
+
+        // MainThreadDiaglogs
+        rpcProtocol.set(ServiceProxyRegistry.MainContext.MainThreadDialogs, MainThreadDiaglogs())
+
+        // MainThreadLanguageModelTools
+        rpcProtocol.set(ServiceProxyRegistry.MainContext.MainThreadLanguageModelTools, MainThreadLanguageModelTools())
+
+        // MainThreadClipboard
+        rpcProtocol.set(ServiceProxyRegistry.MainContext.MainThreadClipboard, MainThreadClipboard())
+
+        //MainThreadBulkEdits
+        rpcProtocol.set(ServiceProxyRegistry.MainContext.MainThreadBulkEdits, MainThreadBulkEdits(project))
+
+        //MainThreadEditorTabs
+        rpcProtocol.set(ServiceProxyRegistry.MainContext.MainThreadEditorTabs, MainThreadEditorTabs(project))
+
+        //MainThreadDocuments
+        rpcProtocol.set(ServiceProxyRegistry.MainContext.MainThreadDocuments, MainThreadDocuments(project))
+    }
+
+    /**
+     * Set up protocol handlers required for WeCode plugin
+     */
+    private fun setupWeCodeRequiredProtocols() {
+        logger.info("Setting up required protocol handlers for WeCode")
+
+        // MainThreadTextEditors
+        rpcProtocol.set(ServiceProxyRegistry.MainContext.MainThreadTextEditors, MainThreadTextEditors(project))
+
+        // MainThreadStorage
+        rpcProtocol.set(ServiceProxyRegistry.MainContext.MainThreadStorage, MainThreadStorage())
+
+        // MainThreadOutputService
+        rpcProtocol.set(ServiceProxyRegistry.MainContext.MainThreadOutputService, MainThreadOutputService())
+
+        // MainThreadWebviewViews
+        rpcProtocol.set(ServiceProxyRegistry.MainContext.MainThreadWebviewViews, MainThreadWebviewViews(project))
+
+        // MainThreadDocumentContentProviders
+        rpcProtocol.set(
+            ServiceProxyRegistry.MainContext.MainThreadDocumentContentProviders,
+            MainThreadDocumentContentProviders()
+        )
+
+        // MainThreadUrls
+        rpcProtocol.set(ServiceProxyRegistry.MainContext.MainThreadUrls, MainThreadUrls())
+
+        // MainThreadLanguageFeatures
+        rpcProtocol.set(ServiceProxyRegistry.MainContext.MainThreadLanguageFeatures, MainThreadLanguageFeatures())
+
+        // MainThreadFileSystem
+        rpcProtocol.set(ServiceProxyRegistry.MainContext.MainThreadFileSystem, MainThreadFileSystem())
+
+        //MainThreadMessageServiceShape
+        rpcProtocol.set(ServiceProxyRegistry.MainContext.MainThreadMessageService, MainThreadMessageService())
+    }
+
+    private fun setupRooCodeFuncitonProtocols() {
+        logger.info("Setting up protocol handlers required for RooCode specific functionality")
+
+        // MainThreadFileSystemEventService
+        rpcProtocol.set(
+            ServiceProxyRegistry.MainContext.MainThreadFileSystemEventService,
+            MainThreadFileSystemEventService()
+        )
+
+        // MainThreadSecretState
+        rpcProtocol.set(ServiceProxyRegistry.MainContext.MainThreadSecretState, MainThreadSecretState())
+    }
+
+    private fun setupWebviewProtocols() {
+        logger.info("Setting up protocol handlers required for Webview")
+        // MainThreadWebviews
+        rpcProtocol.set(ServiceProxyRegistry.MainContext.MainThreadWebviews, MainThreadWebviews(project))
+    }
+
+    /**
+     * Get RPC protocol instance
+     */
+    fun getRPCProtocol(): IRPCProtocol {
+        return rpcProtocol
+    }
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/core/ServiceProxyRegistry.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/core/ServiceProxyRegistry.kt
new file mode 100644
index 000000000..98d555212
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/core/ServiceProxyRegistry.kt
@@ -0,0 +1,346 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.core
+
+import com.intellij.openapi.components.Service
+import com.intellij.openapi.diagnostic.Logger
+import ai.kilocode.jetbrains.actors.*
+import ai.kilocode.jetbrains.ipc.proxy.createProxyIdentifier
+import ai.kilocode.jetbrains.ipc.proxy.interfaces.*
+
+/**
+ * Service proxy registry class, centrally manages registration of all service proxies
+ */
+@Service(Service.Level.PROJECT)
+class ServiceProxyRegistry private constructor() {
+    private val logger = Logger.getInstance(this::class.java)
+    
+//    companion object {
+//        private val instance = ServiceProxyRegistry()
+//
+//        fun getInstance(): ServiceProxyRegistry {
+//            return instance
+//        }
+//    }
+//
+    /**
+     * Initialize and register all service proxies
+     */
+    fun initialize() {
+        // Initialize all proxy identifiers
+        initializeAllProxies()
+    }
+    
+    /**
+     * Initialize all proxy identifiers
+     * Ensure all services are initialized when created
+     */
+    private fun initializeAllProxies() {
+        logger.info("Initialize all proxy identifiers")
+        
+        // Main thread service proxies
+        val mainThreadProxies = listOf(
+            MainContext.MainThreadAuthentication,
+            MainContext.MainThreadBulkEdits,
+            MainContext.MainThreadLanguageModels,
+            MainContext.MainThreadEmbeddings,
+            MainContext.MainThreadChatAgents2,
+            MainContext.MainThreadCodeMapper,
+            MainContext.MainThreadLanguageModelTools,
+            MainContext.MainThreadClipboard,
+            MainContext.MainThreadCommands,
+            MainContext.MainThreadComments,
+            MainContext.MainThreadConfiguration,
+            MainContext.MainThreadConsole,
+            MainContext.MainThreadDebugService,
+            MainContext.MainThreadDecorations,
+            MainContext.MainThreadDiagnostics,
+            MainContext.MainThreadDialogs,
+            MainContext.MainThreadDocuments,
+            MainContext.MainThreadDocumentContentProviders,
+            MainContext.MainThreadTextEditors,
+            MainContext.MainThreadEditorInsets,
+            MainContext.MainThreadEditorTabs,
+            MainContext.MainThreadErrors,
+            MainContext.MainThreadTreeViews,
+            MainContext.MainThreadDownloadService,
+            MainContext.MainThreadLanguageFeatures,
+            MainContext.MainThreadLanguages,
+            MainContext.MainThreadLogger,
+            MainContext.MainThreadMessageService,
+            MainContext.MainThreadOutputService,
+            MainContext.MainThreadProgress,
+            MainContext.MainThreadQuickDiff,
+            MainContext.MainThreadQuickOpen,
+            MainContext.MainThreadStatusBar,
+            MainContext.MainThreadSecretState,
+            MainContext.MainThreadStorage,
+            MainContext.MainThreadSpeech,
+            MainContext.MainThreadTelemetry,
+            MainContext.MainThreadTerminalService,
+            MainContext.MainThreadTerminalShellIntegration,
+            MainContext.MainThreadWebviews,
+            MainContext.MainThreadWebviewPanels,
+            MainContext.MainThreadWebviewViews,
+            MainContext.MainThreadCustomEditors,
+            MainContext.MainThreadUrls,
+            MainContext.MainThreadUriOpeners,
+            MainContext.MainThreadProfileContentHandlers,
+            MainContext.MainThreadWorkspace,
+            MainContext.MainThreadFileSystem,
+            MainContext.MainThreadFileSystemEventService,
+            MainContext.MainThreadExtensionService,
+            MainContext.MainThreadSCM,
+            MainContext.MainThreadSearch,
+            MainContext.MainThreadShare,
+            MainContext.MainThreadTask,
+            MainContext.MainThreadWindow,
+            MainContext.MainThreadLabelService,
+            MainContext.MainThreadNotebook,
+            MainContext.MainThreadNotebookDocuments,
+            MainContext.MainThreadNotebookEditors,
+            MainContext.MainThreadNotebookKernels,
+            MainContext.MainThreadNotebookRenderers,
+            MainContext.MainThreadInteractive,
+            MainContext.MainThreadTheming,
+            MainContext.MainThreadTunnelService,
+            MainContext.MainThreadManagedSockets,
+            MainContext.MainThreadTimeline,
+            MainContext.MainThreadTesting,
+            MainContext.MainThreadLocalization,
+            MainContext.MainThreadMcp,
+            MainContext.MainThreadAiRelatedInformation,
+            MainContext.MainThreadAiEmbeddingVector,
+            MainContext.MainThreadChatStatus
+        )
+        
+        // Extension host service proxies
+        val extHostProxies = listOf(
+            ExtHostContext.ExtHostCodeMapper,
+            ExtHostContext.ExtHostCommands,
+            ExtHostContext.ExtHostConfiguration,
+            ExtHostContext.ExtHostDiagnostics,
+            ExtHostContext.ExtHostDebugService,
+            ExtHostContext.ExtHostDecorations,
+            ExtHostContext.ExtHostDocumentsAndEditors,
+            ExtHostContext.ExtHostDocuments,
+            ExtHostContext.ExtHostDocumentContentProviders,
+            ExtHostContext.ExtHostDocumentSaveParticipant,
+            ExtHostContext.ExtHostEditors,
+            ExtHostContext.ExtHostTreeViews,
+            ExtHostContext.ExtHostFileSystem,
+            ExtHostContext.ExtHostFileSystemInfo,
+            ExtHostContext.ExtHostFileSystemEventService,
+            ExtHostContext.ExtHostLanguages,
+            ExtHostContext.ExtHostLanguageFeatures,
+            ExtHostContext.ExtHostQuickOpen,
+            ExtHostContext.ExtHostQuickDiff,
+            ExtHostContext.ExtHostStatusBar,
+            ExtHostContext.ExtHostShare,
+            ExtHostContext.ExtHostExtensionService,
+            ExtHostContext.ExtHostLogLevelServiceShape,
+            ExtHostContext.ExtHostTerminalService,
+            ExtHostContext.ExtHostTerminalShellIntegration,
+            ExtHostContext.ExtHostSCM,
+            ExtHostContext.ExtHostSearch,
+            ExtHostContext.ExtHostTask,
+            ExtHostContext.ExtHostWorkspace,
+            ExtHostContext.ExtHostWindow,
+            ExtHostContext.ExtHostWebviews,
+            ExtHostContext.ExtHostWebviewPanels,
+            ExtHostContext.ExtHostCustomEditors,
+            ExtHostContext.ExtHostWebviewViews,
+            ExtHostContext.ExtHostEditorInsets,
+            ExtHostContext.ExtHostEditorTabs,
+            ExtHostContext.ExtHostProgress,
+            ExtHostContext.ExtHostComments,
+            ExtHostContext.ExtHostSecretState,
+            ExtHostContext.ExtHostStorage,
+            ExtHostContext.ExtHostUrls,
+            ExtHostContext.ExtHostUriOpeners,
+            ExtHostContext.ExtHostProfileContentHandlers,
+            ExtHostContext.ExtHostOutputService,
+            ExtHostContext.ExtHostLabelService,
+            ExtHostContext.ExtHostNotebook,
+            ExtHostContext.ExtHostNotebookDocuments,
+            ExtHostContext.ExtHostNotebookEditors,
+            ExtHostContext.ExtHostNotebookKernels,
+            ExtHostContext.ExtHostNotebookRenderers,
+            ExtHostContext.ExtHostNotebookDocumentSaveParticipant,
+            ExtHostContext.ExtHostInteractive,
+            ExtHostContext.ExtHostChatAgents2,
+            ExtHostContext.ExtHostLanguageModelTools,
+            ExtHostContext.ExtHostChatProvider,
+            ExtHostContext.ExtHostSpeech,
+            ExtHostContext.ExtHostEmbeddings,
+            ExtHostContext.ExtHostAiRelatedInformation,
+            ExtHostContext.ExtHostAiEmbeddingVector,
+            ExtHostContext.ExtHostTheming,
+            ExtHostContext.ExtHostTunnelService,
+            ExtHostContext.ExtHostManagedSockets,
+            ExtHostContext.ExtHostAuthentication,
+            ExtHostContext.ExtHostTimeline,
+            ExtHostContext.ExtHostTesting,
+            ExtHostContext.ExtHostTelemetry,
+            ExtHostContext.ExtHostLocalization,
+            ExtHostContext.ExtHostMcp
+        )
+        
+        logger.info("Initialized ${mainThreadProxies.size} main thread services and ${extHostProxies.size} extension host services")
+    }
+    
+
+    /**
+     * Main thread context - Context ID enum values defined in VSCode
+     */
+    object MainContext {
+        val MainThreadAuthentication = createProxyIdentifier<Any>("MainThreadAuthentication")
+        val MainThreadBulkEdits = createProxyIdentifier<MainThreadBulkEditsShape>("MainThreadBulkEdits")
+        val MainThreadLanguageModels = createProxyIdentifier<Any>("MainThreadLanguageModels")
+        val MainThreadEmbeddings = createProxyIdentifier<Any>("MainThreadEmbeddings")
+        val MainThreadChatAgents2 = createProxyIdentifier<Any>("MainThreadChatAgents2")
+        val MainThreadCodeMapper = createProxyIdentifier<Any>("MainThreadCodeMapper")
+        val MainThreadLanguageModelTools = createProxyIdentifier<MainThreadLanguageModelToolsShape>("MainThreadLanguageModelTools")
+        val MainThreadClipboard = createProxyIdentifier<MainThreadClipboardShape>("MainThreadClipboard")
+        val MainThreadCommands = createProxyIdentifier<MainThreadCommandsShape>("MainThreadCommands")
+        val MainThreadComments = createProxyIdentifier<Any>("MainThreadComments")
+        val MainThreadConfiguration = createProxyIdentifier<MainThreadConfigurationShape>("MainThreadConfiguration")
+        val MainThreadConsole = createProxyIdentifier<MainThreadConsoleShape>("MainThreadConsole")
+        val MainThreadDebugService = createProxyIdentifier<MainThreadDebugServiceShape>("MainThreadDebugService")
+        val MainThreadDecorations = createProxyIdentifier<Any>("MainThreadDecorations")
+        val MainThreadDiagnostics = createProxyIdentifier<Any>("MainThreadDiagnostics")
+        val MainThreadDialogs = createProxyIdentifier<MainThreadDiaglogsShape>("MainThreadDiaglogs")
+        val MainThreadDocuments = createProxyIdentifier<MainThreadDocumentsShape>("MainThreadDocuments")
+        val MainThreadDocumentContentProviders = createProxyIdentifier<MainThreadDocumentContentProvidersShape>("MainThreadDocumentContentProviders")
+        val MainThreadTextEditors = createProxyIdentifier<MainThreadTextEditorsShape>("MainThreadTextEditors")
+        val MainThreadEditorInsets = createProxyIdentifier<Any>("MainThreadEditorInsets")
+        val MainThreadEditorTabs = createProxyIdentifier<MainThreadEditorTabsShape>("MainThreadEditorTabs")
+        val MainThreadErrors = createProxyIdentifier<MainThreadErrorsShape>("MainThreadErrors")
+        val MainThreadTreeViews = createProxyIdentifier<Any>("MainThreadTreeViews")
+        val MainThreadDownloadService = createProxyIdentifier<Any>("MainThreadDownloadService")
+        val MainThreadLanguageFeatures = createProxyIdentifier<MainThreadLanguageFeaturesShape>("MainThreadLanguageFeatures")
+        val MainThreadLanguages = createProxyIdentifier<Any>("MainThreadLanguages")
+        val MainThreadLogger = createProxyIdentifier<MainThreadLoggerShape>("MainThreadLogger")
+        val MainThreadMessageService = createProxyIdentifier<MainThreadMessageServiceShape>("MainThreadMessageService")
+        val MainThreadOutputService = createProxyIdentifier<MainThreadOutputServiceShape>("MainThreadOutputService")
+        val MainThreadProgress = createProxyIdentifier<Any>("MainThreadProgress")
+        val MainThreadQuickDiff = createProxyIdentifier<Any>("MainThreadQuickDiff")
+        val MainThreadQuickOpen = createProxyIdentifier<Any>("MainThreadQuickOpen")
+        val MainThreadStatusBar = createProxyIdentifier<Any>("MainThreadStatusBar")
+        val MainThreadSecretState = createProxyIdentifier<MainThreadSecretStateShape>("MainThreadSecretState")
+        val MainThreadStorage = createProxyIdentifier<MainThreadStorageShape>("MainThreadStorage")
+        val MainThreadSpeech = createProxyIdentifier<Any>("MainThreadSpeechProvider")
+        val MainThreadTelemetry = createProxyIdentifier<MainThreadTelemetryShape>("MainThreadTelemetry")
+        val MainThreadTerminalService = createProxyIdentifier<MainThreadTerminalServiceShape>("MainThreadTerminalService")
+        val MainThreadTerminalShellIntegration = createProxyIdentifier<MainThreadTerminalShellIntegrationShape>("MainThreadTerminalShellIntegration")
+        val MainThreadWebviews = createProxyIdentifier<MainThreadWebviewsShape>("MainThreadWebviews")
+        val MainThreadWebviewPanels = createProxyIdentifier<Any>("MainThreadWebviewPanels")
+        val MainThreadWebviewViews = createProxyIdentifier<MainThreadWebviewViewsShape>("MainThreadWebviewViews")
+        val MainThreadCustomEditors = createProxyIdentifier<Any>("MainThreadCustomEditors")
+        val MainThreadUrls = createProxyIdentifier<MainThreadUrlsShape>("MainThreadUrls")
+        val MainThreadUriOpeners = createProxyIdentifier<Any>("MainThreadUriOpeners")
+        val MainThreadProfileContentHandlers = createProxyIdentifier<Any>("MainThreadProfileContentHandlers")
+        val MainThreadWorkspace = createProxyIdentifier<Any>("MainThreadWorkspace")
+        val MainThreadFileSystem = createProxyIdentifier<MainThreadFileSystemShape>("MainThreadFileSystem")
+        val MainThreadFileSystemEventService = createProxyIdentifier<MainThreadFileSystemEventServiceShape>("MainThreadFileSystemEventService")
+        val MainThreadExtensionService = createProxyIdentifier<MainThreadExtensionServiceShape>("MainThreadExtensionService")
+        val MainThreadSCM = createProxyIdentifier<Any>("MainThreadSCM")
+        val MainThreadSearch = createProxyIdentifier<MainThreadSearchShape>("MainThreadSearch")
+        val MainThreadShare = createProxyIdentifier<Any>("MainThreadShare")
+        val MainThreadTask = createProxyIdentifier<MainThreadTaskShape>("MainThreadTask")
+        val MainThreadWindow = createProxyIdentifier<MainThreadWindowShape>("MainThreadWindow")
+        val MainThreadLabelService = createProxyIdentifier<Any>("MainThreadLabelService")
+        val MainThreadNotebook = createProxyIdentifier<Any>("MainThreadNotebook")
+        val MainThreadNotebookDocuments = createProxyIdentifier<Any>("MainThreadNotebookDocumentsShape")
+        val MainThreadNotebookEditors = createProxyIdentifier<Any>("MainThreadNotebookEditorsShape")
+        val MainThreadNotebookKernels = createProxyIdentifier<Any>("MainThreadNotebookKernels")
+        val MainThreadNotebookRenderers = createProxyIdentifier<Any>("MainThreadNotebookRenderers")
+        val MainThreadInteractive = createProxyIdentifier<Any>("MainThreadInteractive")
+        val MainThreadTheming = createProxyIdentifier<Any>("MainThreadTheming")
+        val MainThreadTunnelService = createProxyIdentifier<Any>("MainThreadTunnelService")
+        val MainThreadManagedSockets = createProxyIdentifier<Any>("MainThreadManagedSockets")
+        val MainThreadTimeline = createProxyIdentifier<Any>("MainThreadTimeline")
+        val MainThreadTesting = createProxyIdentifier<Any>("MainThreadTesting")
+        val MainThreadLocalization = createProxyIdentifier<Any>("MainThreadLocalizationShape")
+        val MainThreadMcp = createProxyIdentifier<Any>("MainThreadMcpShape")
+        val MainThreadAiRelatedInformation = createProxyIdentifier<Any>("MainThreadAiRelatedInformation")
+        val MainThreadAiEmbeddingVector = createProxyIdentifier<Any>("MainThreadAiEmbeddingVector")
+        val MainThreadChatStatus = createProxyIdentifier<Any>("MainThreadChatStatus")
+    }
+
+    /**
+     * Extension host context - Extension host context ID enum values defined in VSCode
+     */
+    object ExtHostContext {
+        val ExtHostCodeMapper = createProxyIdentifier<Any>("ExtHostCodeMapper")
+        val ExtHostCommands = createProxyIdentifier<ExtHostCommandsProxy>("ai.kilocode.jetbrains.ipc.proxy.interfaces.ExtHostCommandsProxy")
+        val ExtHostConfiguration = createProxyIdentifier<ExtHostConfigurationProxy>("ai.kilocode.jetbrains.ipc.proxy.interfaces.ExtHostConfigurationProxy")
+        val ExtHostDiagnostics = createProxyIdentifier<Any>("ExtHostDiagnostics")
+        val ExtHostDebugService = createProxyIdentifier<Any>("ExtHostDebugService")
+        val ExtHostDecorations = createProxyIdentifier<Any>("ExtHostDecorations")
+        val ExtHostDocumentsAndEditors = createProxyIdentifier<ExtHostDocumentsAndEditorsProxy>("ai.kilocode.jetbrains.ipc.proxy.interfaces.ExtHostDocumentsAndEditorsProxy")
+        val ExtHostDocuments = createProxyIdentifier<ExtHostDocumentsProxy>("ai.kilocode.jetbrains.ipc.proxy.interfaces.ExtHostDocumentsProxy")
+        val ExtHostDocumentContentProviders = createProxyIdentifier<Any>("ExtHostDocumentContentProviders")
+        val ExtHostDocumentSaveParticipant = createProxyIdentifier<Any>("ExtHostDocumentSaveParticipant")
+        val ExtHostEditors = createProxyIdentifier<ExtHostEditorsProxy>("ai.kilocode.jetbrains.ipc.proxy.interfaces.ExtHostEditorsProxy")
+        val ExtHostTreeViews = createProxyIdentifier<Any>("ExtHostTreeViews")
+        val ExtHostFileSystem = createProxyIdentifier<Any>("ExtHostFileSystem")
+        val ExtHostFileSystemInfo = createProxyIdentifier<Any>("ExtHostFileSystemInfo")
+        val ExtHostFileSystemEventService = createProxyIdentifier<ExtHostFileSystemEventServiceProxy>("ai.kilocode.jetbrains.ipc.proxy.interfaces.ExtHostFileSystemEventServiceProxy")
+        val ExtHostLanguages = createProxyIdentifier<Any>("ExtHostLanguages")
+        val ExtHostLanguageFeatures = createProxyIdentifier<Any>("ExtHostLanguageFeatures")
+        val ExtHostQuickOpen = createProxyIdentifier<Any>("ExtHostQuickOpen")
+        val ExtHostQuickDiff = createProxyIdentifier<Any>("ExtHostQuickDiff")
+        val ExtHostStatusBar = createProxyIdentifier<Any>("ExtHostStatusBar")
+        val ExtHostShare = createProxyIdentifier<Any>("ExtHostShare")
+        val ExtHostExtensionService = createProxyIdentifier<ExtHostExtensionServiceProxy>("ai.kilocode.jetbrains.ipc.proxy.interfaces.ExtHostExtensionServiceProxy")
+        val ExtHostLogLevelServiceShape = createProxyIdentifier<Any>("ExtHostLogLevelServiceShape")
+        val ExtHostTerminalService = createProxyIdentifier<ExtHostTerminalServiceProxy>("ai.kilocode.jetbrains.ipc.proxy.interfaces.ExtHostTerminalServiceProxy")
+        val ExtHostTerminalShellIntegration = createProxyIdentifier<ExtHostTerminalShellIntegrationProxy>("ai.kilocode.jetbrains.ipc.proxy.interfaces.ExtHostTerminalShellIntegrationProxy")
+        val ExtHostSCM = createProxyIdentifier<Any>("ExtHostSCM")
+        val ExtHostSearch = createProxyIdentifier<Any>("ExtHostSearch")
+        val ExtHostTask = createProxyIdentifier<Any>("ExtHostTask")
+        val ExtHostWorkspace = createProxyIdentifier<ExtHostWorkspaceProxy>("ai.kilocode.jetbrains.ipc.proxy.interfaces.ExtHostWorkspaceProxy")
+        val ExtHostWindow = createProxyIdentifier<Any>("ExtHostWindow")
+        val ExtHostWebviews = createProxyIdentifier<ExtHostWebviewsProxy>("ai.kilocode.jetbrains.ipc.proxy.interfaces.ExtHostWebviewsProxy")
+        val ExtHostWebviewPanels = createProxyIdentifier<Any>("ExtHostWebviewPanels")
+        val ExtHostCustomEditors = createProxyIdentifier<Any>("ExtHostCustomEditors")
+        val ExtHostWebviewViews = createProxyIdentifier<ExtHostWebviewViewsProxy>("ai.kilocode.jetbrains.ipc.proxy.interfaces.ExtHostWebviewViewsProxy")
+        val ExtHostEditorInsets = createProxyIdentifier<Any>("ExtHostEditorInsets")
+        val ExtHostEditorTabs = createProxyIdentifier<ExtHostEditorTabsProxy>("ai.kilocode.jetbrains.ipc.proxy.interfaces.ExtHostEditorTabsProxy")
+        val ExtHostProgress = createProxyIdentifier<Any>("ExtHostProgress")
+        val ExtHostComments = createProxyIdentifier<Any>("ExtHostComments")
+        val ExtHostSecretState = createProxyIdentifier<Any>("ExtHostSecretState")
+        val ExtHostStorage = createProxyIdentifier<Any>("ExtHostStorage")
+        val ExtHostUrls = createProxyIdentifier<Any>("ExtHostUrls")
+        val ExtHostUriOpeners = createProxyIdentifier<Any>("ExtHostUriOpeners")
+        val ExtHostProfileContentHandlers = createProxyIdentifier<Any>("ExtHostProfileContentHandlers")
+        val ExtHostOutputService = createProxyIdentifier<Any>("ExtHostOutputService")
+        val ExtHostLabelService = createProxyIdentifier<Any>("ExtHostLabelService")
+        val ExtHostNotebook = createProxyIdentifier<Any>("ExtHostNotebook")
+        val ExtHostNotebookDocuments = createProxyIdentifier<Any>("ExtHostNotebookDocuments")
+        val ExtHostNotebookEditors = createProxyIdentifier<Any>("ExtHostNotebookEditors")
+        val ExtHostNotebookKernels = createProxyIdentifier<Any>("ExtHostNotebookKernels")
+        val ExtHostNotebookRenderers = createProxyIdentifier<Any>("ExtHostNotebookRenderers")
+        val ExtHostNotebookDocumentSaveParticipant = createProxyIdentifier<Any>("ExtHostNotebookDocumentSaveParticipant")
+        val ExtHostInteractive = createProxyIdentifier<Any>("ExtHostInteractive")
+        val ExtHostChatAgents2 = createProxyIdentifier<Any>("ExtHostChatAgents")
+        val ExtHostLanguageModelTools = createProxyIdentifier<Any>("ExtHostChatSkills")
+        val ExtHostChatProvider = createProxyIdentifier<Any>("ExtHostChatProvider")
+        val ExtHostSpeech = createProxyIdentifier<Any>("ExtHostSpeech")
+        val ExtHostEmbeddings = createProxyIdentifier<Any>("ExtHostEmbeddings")
+        val ExtHostAiRelatedInformation = createProxyIdentifier<Any>("ExtHostAiRelatedInformation")
+        val ExtHostAiEmbeddingVector = createProxyIdentifier<Any>("ExtHostAiEmbeddingVector")
+        val ExtHostTheming = createProxyIdentifier<Any>("ExtHostTheming")
+        val ExtHostTunnelService = createProxyIdentifier<Any>("ExtHostTunnelService")
+        val ExtHostManagedSockets = createProxyIdentifier<Any>("ExtHostManagedSockets")
+        val ExtHostAuthentication = createProxyIdentifier<Any>("ExtHostAuthentication")
+        val ExtHostTimeline = createProxyIdentifier<Any>("ExtHostTimeline")
+        val ExtHostTesting = createProxyIdentifier<Any>("ExtHostTesting")
+        val ExtHostTelemetry = createProxyIdentifier<Any>("ExtHostTelemetry")
+        val ExtHostLocalization = createProxyIdentifier<Any>("ExtHostLocalization")
+        val ExtHostMcp = createProxyIdentifier<Any>("ExtHostMcp")
+    }
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/core/WorkspaceManager.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/core/WorkspaceManager.kt
new file mode 100644
index 000000000..3519026af
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/core/WorkspaceManager.kt
@@ -0,0 +1,131 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.core
+
+import com.intellij.openapi.application.ApplicationManager
+import com.intellij.openapi.components.Service
+import com.intellij.openapi.components.service
+import com.intellij.openapi.diagnostic.Logger
+import com.intellij.openapi.project.Project
+import com.intellij.openapi.project.ProjectManager
+import com.intellij.openapi.vfs.VirtualFile
+import com.intellij.openapi.vfs.LocalFileSystem
+import com.intellij.openapi.util.io.FileUtil
+import ai.kilocode.jetbrains.model.StaticWorkspaceData
+import ai.kilocode.jetbrains.model.WorkspaceData
+import ai.kilocode.jetbrains.model.WorkspaceFolder
+import ai.kilocode.jetbrains.util.URI
+import java.io.File
+import java.util.*
+
+/**
+ * Workspace Manager
+ * Responsible for retrieving and managing IDEA workspace information.
+ * Provides functionality to access project workspace data and folders.
+ */
+@Service(Service.Level.PROJECT)
+class WorkspaceManager(val project: Project) {
+    private val logger = Logger.getInstance(WorkspaceManager::class.java)
+
+    /**
+     * Gets the current workspace data.
+     * @return Workspace data or null (if no project is open)
+     */
+    fun getCurrentWorkspaceData(): WorkspaceData? {
+        return getProjectWorkspaceData(project)
+    }
+
+    /**
+     * Gets workspace data for a specific project.
+     *
+     * @param project The project to get workspace data for
+     * @return Workspace data or null if the project is null
+     */
+    fun getProjectWorkspaceData(project: Project): WorkspaceData? {
+        if (project == null) {
+            return null
+        }
+
+        // Create workspace ID (using hash value of the project's base path)
+        val workspaceId = getWorkspaceId(project)
+        val workspaceName = project.name
+
+        // Create static workspace data
+        val staticWorkspaceData = StaticWorkspaceData(
+            id = workspaceId,
+            name = workspaceName,
+            transient = false,
+            // Configuration can be the project's .idea directory or project configuration file
+            configuration = project.basePath?.let { URI.file("$it/.idea") },
+            isUntitled = false
+        )
+
+        // Get workspace folders
+        val workspaceFolders = getWorkspaceFolders(project)
+
+        return WorkspaceData(staticWorkspaceData, workspaceFolders)
+    }
+    
+    /**
+     * Gets the workspace ID for a project.
+     *
+     * @param project The project
+     * @return The workspace ID as a string
+     */
+    private fun getWorkspaceId(project: Project): String {
+        // Use the hash value of the project path as ID
+        val basePath = project.basePath ?: return UUID.randomUUID().toString()
+        return basePath.hashCode().toString()
+    }
+    
+    /**
+     * Gets workspace folders for a project.
+     *
+     * @param project The project
+     * @return List of workspace folders
+     */
+    private fun getWorkspaceFolders(project: Project): List<WorkspaceFolder> {
+        val folders = mutableListOf<WorkspaceFolder>()
+        val basePath = project.basePath ?: return folders
+        
+        // Add project root directory as the main workspace folder
+        folders.add(WorkspaceFolder(
+            uri = URI.file(basePath),
+            name = project.name,
+            index = 0
+        ))
+        
+        // Get the virtual file for the project root directory - wrapped in ReadAction
+        val projectDir = ApplicationManager.getApplication().runReadAction<VirtualFile?> {
+            LocalFileSystem.getInstance().findFileByPath(basePath)
+        }
+        if (projectDir == null || !projectDir.isDirectory) {
+            return folders
+        }
+        
+//        // Get subdirectories
+//        val contentRoots = projectDir.children
+//
+//        // Filter files to get subfolders
+//        val subFolders = contentRoots.filter { file: VirtualFile ->
+//            file.isDirectory &&
+//            !file.name.startsWith(".") &&
+//            file.name !in listOf("out", "build", "target", "node_modules", ".idea", "dist", "bin", "obj")
+//        }
+//
+//        // Add subfolders
+//        subFolders.forEachIndexed { index, folder ->
+//            if (folder.path != basePath) {
+//                folders.add(WorkspaceFolder(
+//                    uri = URI.file(folder.path),
+//                    name = folder.name,
+//                    index = index + 1  // Start from 1, because 0 is the project root directory
+//                ))
+//            }
+//        }
+        
+        return folders
+    }
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/editor/EditorAndDocManager.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/editor/EditorAndDocManager.kt
new file mode 100644
index 000000000..749a635a8
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/editor/EditorAndDocManager.kt
@@ -0,0 +1,644 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.editor
+
+import com.intellij.diff.DiffContentFactory
+import java.util.concurrent.ConcurrentHashMap
+import com.intellij.diff.chains.DiffRequestChain
+import com.intellij.diff.chains.SimpleDiffRequestChain
+import com.intellij.diff.contents.DiffContent
+import com.intellij.diff.contents.FileDocumentContentImpl
+import com.intellij.diff.editor.ChainDiffVirtualFile
+import com.intellij.diff.editor.DiffEditorTabFilesManager
+import com.intellij.diff.editor.DiffRequestProcessorEditor
+import com.intellij.diff.requests.SimpleDiffRequest
+import com.intellij.openapi.Disposable
+import com.intellij.openapi.application.ApplicationManager
+import com.intellij.openapi.components.Service
+import com.intellij.openapi.diagnostic.Logger
+import com.intellij.openapi.diff.DiffBundle
+import com.intellij.openapi.editor.Editor
+import com.intellij.openapi.fileEditor.FileDocumentManager
+import com.intellij.openapi.fileEditor.FileEditor
+import com.intellij.openapi.fileEditor.FileEditorManager
+import com.intellij.openapi.fileEditor.FileEditorManagerListener
+import com.intellij.openapi.fileTypes.FileType
+import com.intellij.openapi.project.Project
+import com.intellij.openapi.vfs.LocalFileSystem
+import com.intellij.openapi.vfs.VirtualFile
+import com.intellij.openapi.vfs.readText
+import ai.kilocode.jetbrains.util.URI
+import kotlinx.coroutines.*
+import java.io.File
+import java.io.FileInputStream
+import java.lang.ref.WeakReference
+import kotlin.math.max
+
+@Service(Service.Level.PROJECT)
+class EditorAndDocManager(val project: Project) : Disposable {
+
+    private val logger = Logger.getInstance(EditorAndDocManager::class.java)
+    private val ideaEditorListener : FileEditorManagerListener
+
+    private val messageBusConnection = project.messageBus.connect()
+
+    private var state = DocumentsAndEditorsState()
+    private var lastNotifiedState = DocumentsAndEditorsState()
+    private var editorHandles = ConcurrentHashMap<String, EditorHolder>()
+    private val ideaOpenedEditor = ConcurrentHashMap<String, Editor>()
+    private var tabManager : TabStateManager = TabStateManager(project)
+
+    private var job: Job? = null
+    private val editorStateService:EditorStateService = EditorStateService(project)
+
+    init {
+        ideaEditorListener = object : FileEditorManagerListener {
+            // Update and synchronize editor state when file is opened
+            override fun fileOpened(source: FileEditorManager, file: VirtualFile) {
+
+                source.getEditorList(file).forEach {editor->
+                    if(file == editor.file){
+                        // Record and synchronize
+                        if (isSubClassof(editor, "com.intellij.diff.editor.DiffEditorBase") || isSubClassof(editor, "com.intellij.diff.editor.DiffFileEditorBase")){
+                            if(editor.filesToRefresh.size == 1){
+                                val reffile = editor.filesToRefresh[0]
+                                val uri = URI.file(reffile.path)
+                                val older = getEditorHandleByUri(uri,true)
+                                if(older != null &&  older.ideaEditor == null){
+                                    older.ideaEditor = editor
+                                }
+                            }
+                        }else{
+                            val older = getEditorHandleByUri(URI.file(file.path),false)
+                            if(older == null){
+                                val uri = URI.file(editor.file.path)
+                                val isText = FileDocumentManager.getInstance().getDocument(file) != null
+                                CoroutineScope(Dispatchers.IO).launch {
+                                    val handle = sync2ExtHost(uri, false,isText)
+                                    handle.ideaEditor = editor
+                                    val group = tabManager.createTabGroup(EditorGroupColumn.beside.value,true)
+                                    val options = TabOptions(isActive = true)
+                                    val tab = group.addTab(EditorTabInput(uri,uri.path, ""), options)
+                                    handle.tab = tab
+                                    handle.group = group
+                                }
+                            }
+                        }
+                    }
+                }
+
+            }
+
+            private fun isSubClassof(editor: FileEditor?, s: String): Boolean {
+                if (editor == null) return false
+                var clazz: Class<*>? = editor.javaClass
+                while (clazz != null) {
+                    if (clazz.name == s) {
+                        return true
+                    }
+                    clazz = clazz.superclass
+                }
+                return false
+            }
+
+            override fun fileClosed(source: FileEditorManager, cFile: VirtualFile) {
+                logger.info("file closed $cFile")
+                var diff = false
+                var path = cFile.path
+                if(cFile is ChainDiffVirtualFile){
+                    (cFile.chain.requests[0] as? SimpleDiffRequest).let {
+                        it?.contents?.forEach{ content->
+                            if( content is FileDocumentContentImpl){
+                                path = content.file.path
+                                diff = true
+                            }
+                        }
+                    }
+                }
+                getEditorHandleByUri(URI.file(path),diff)?.let { handle ->
+                    handle.setActive(false)
+                    logger.info("file closed handle $handle")
+                    removeEditor(handle.id)
+                }
+            }
+        }
+        messageBusConnection.subscribe(FileEditorManagerListener.FILE_EDITOR_MANAGER, ideaEditorListener)
+    }
+
+
+    fun initCurrentIdeaEditor(){
+        CoroutineScope(Dispatchers.Default).launch {
+            FileEditorManager.getInstance(project).allEditors.forEach {editor->
+                // Record and synchronize
+                if (editor is FileEditor) {
+                    val uri = URI.file(editor.file.path)
+                    val handle = sync2ExtHost(uri,false)
+                    handle.ideaEditor = editor
+                    val group = tabManager.createTabGroup(EditorGroupColumn.beside.value,true)
+                    val options = TabOptions(isActive = true)
+                    val tab = group.addTab(EditorTabInput(uri,uri.path, ""), options)
+                    handle.tab = tab
+                    handle.group = group
+                }
+            }
+        }
+    }
+
+    suspend fun sync2ExtHost(documentUri: URI, diff : Boolean,isText : Boolean = true,options: ResolvedTextEditorConfiguration = ResolvedTextEditorConfiguration()):EditorHolder {
+        val eh = getEditorHandleByUri(documentUri,diff)
+        if (eh != null)
+            return eh
+        // Generate unique ID
+        val id = java.util.UUID.randomUUID().toString()
+
+        val documentState = openDocument(documentUri,isText)
+
+        // Create editor state
+        val editorState = TextEditorAddData(
+            id = id,
+            documentUri = documentUri,
+            options = options,
+            selections = emptyList(),
+            visibleRanges = emptyList(),
+            editorPosition = null
+        )
+        // Create editor handle
+        val handle = EditorHolder(id, editorState, documentState, diff, this,)
+        // Update state
+        state.documents[documentUri] = documentState
+        state.editors[id] = editorState
+        editorHandles[id] = handle
+        handle.setActive(true)
+        processUpdates()
+        return handle
+    }
+
+    fun createContent(uri: URI, project: Project,type: FileType?=null) : DiffContent?{
+        val path = uri.path
+        val scheme = uri.scheme
+        val query = uri.query
+        if(scheme != null && scheme.isNotEmpty()){
+            val contentFactory = DiffContentFactory.getInstance()
+            if(scheme == "file"){
+                val vfs = LocalFileSystem.getInstance()
+                val fileIO = File(path)
+                if(!fileIO.exists()){
+                    fileIO.createNewFile()
+                    vfs.refreshIoFiles(listOf(fileIO.parentFile))
+                }
+                val file = vfs.refreshAndFindFileByPath(path) ?: run {
+                    logger.warn("File not found: $path")
+                    return null
+                }
+                return contentFactory.create(project, file)
+            }else if(scheme == "cline-diff"){
+                val string = if(query != null){
+                    val bytes = java.util.Base64.getDecoder().decode(query)
+                    String(bytes)
+                }else ""
+                val content = contentFactory.create(project, string,type)
+                return content
+            }
+            return null
+        }else{
+            return null
+        }
+    }
+
+
+    suspend fun openEditor(documentUri: URI ,options: ResolvedTextEditorConfiguration = ResolvedTextEditorConfiguration()): EditorHolder {
+        val fileEditorManager = FileEditorManager.getInstance(project)
+        val path = documentUri.path
+        var ideaEditor : Array<FileEditor?>? = null
+
+        val vfs = LocalFileSystem.getInstance()
+        val file = vfs.findFileByPath(path)
+        file?.let {
+            ApplicationManager.getApplication().invokeAndWait {
+                ideaEditor = fileEditorManager.openFile(it, true)
+            }
+        }
+        val eh = getEditorHandleByUri(documentUri,false)
+        if (eh != null)
+            return eh
+        val handle = sync2ExtHost(documentUri, false, true, options)
+        ideaEditor?.let {
+            if(it.isNotEmpty()){
+                handle.ideaEditor = it[0]
+            }
+        }
+        val group = tabManager.createTabGroup(EditorGroupColumn.beside.value,true)
+        val options = TabOptions(isActive = true)
+        val tab = group.addTab(EditorTabInput(documentUri,documentUri.path, ""), options)
+        handle.tab = tab
+        handle.group = group
+        return handle
+    }
+
+    suspend fun openDiffEditor(left: URI,documentUri: URI,title:String, options: ResolvedTextEditorConfiguration = ResolvedTextEditorConfiguration()): EditorHolder {
+        val content2 = createContent(documentUri, project)
+        val content1 = createContent(left, project,content2?.contentType)
+        if (content1 != null && content2 != null){
+            val request = SimpleDiffRequest(title, content1, content2, left.path, documentUri.path)
+            var ideaEditor : Array<out FileEditor?>? = null
+            ApplicationManager.getApplication().invokeAndWait{
+                LocalFileSystem.getInstance().findFileByPath(documentUri.path)
+                    ?.let {
+                        ApplicationManager.getApplication().runReadAction {  FileEditorManager.getInstance(project).closeFile(it) }
+                    }
+
+                val diffEditorTabFilesManager = DiffEditorTabFilesManager.getInstance(project)
+                val requestChain: DiffRequestChain = SimpleDiffRequestChain(request)
+                val diffFile = ChainDiffVirtualFile(requestChain, DiffBundle.message("label.default.diff.editor.tab.name", *arrayOfNulls<Any>(0)))
+                ideaEditor = diffEditorTabFilesManager.showDiffFile(diffFile, true)
+            }
+            ideaEditor?.let {
+                val handle = sync2ExtHost(documentUri, true, true, options)
+                if(it.isNotEmpty()){
+                    handle.ideaEditor = it[0]
+                }
+                handle.title = title
+
+                val group = tabManager.createTabGroup(EditorGroupColumn.beside.value,true)
+                val options = TabOptions(isActive = true)
+                val tab = group.addTab(TextDiffTabInput(left,documentUri), options)
+                handle.tab = tab
+                handle.group = group
+                return handle
+            }?:run {
+                val handle = sync2ExtHost(documentUri, true, true,options)
+                return handle
+            }
+        }else{
+            val handle = sync2ExtHost(documentUri, true, true, options)
+            return handle
+        }
+    }
+
+    fun getEditorHandleByUri(resource: URI,diff: Boolean): EditorHolder? {
+        val values = editorHandles.values
+        for (handle in values){
+            if (handle.document.uri.path == resource.path && handle.diff == diff) {
+                return handle
+            }
+        }
+        return null
+    }
+
+    fun getEditorHandleByUri(resource: URI): List<EditorHolder> {
+        val list = mutableListOf<EditorHolder>()
+        val values = editorHandles.values
+        for (handle in values){
+            if (handle.document.uri.path == resource.path ) {
+                list.add(handle)
+            }
+        }
+        return list
+    }
+
+
+    fun getEditorHandleById(id: String): EditorHolder? {
+        return editorHandles[id]
+    }
+
+    suspend fun openDocument(uri: URI,isText: Boolean = true): ModelAddedData {
+        // Update document content - Use ReadAction to wrap file system operations
+        val text = if (isText){
+            ApplicationManager.getApplication().runReadAction<String> {
+                val vfs = LocalFileSystem.getInstance()
+                val file = vfs.findFileByPath(uri.path)
+                if(file != null){
+                    val len = file.length
+                    if (len > 3 * 1024 * 1024) {
+                        val buffer = ByteArray(3 * 1024 * 1024)
+                        val inputStream = FileInputStream(File(file.path))
+                        val bytesRead = inputStream.read(buffer)
+                        inputStream.close()
+                        String(buffer, 0, bytesRead, Charsets.UTF_8)
+                    } else {
+                        file.readText()
+                    }
+                }else{
+                    ""
+                }
+            }
+        }else{
+            "bin"
+        }
+        if (state.documents[uri] == null) {
+            val document = ModelAddedData(
+                uri = uri,
+                versionId = 1,
+                lines = text.lines(),
+                EOL = "\n",
+                languageId = "",
+                isDirty = false,
+                encoding = "utf8"
+            )
+            state.documents[uri] = document
+            processUpdates()
+        }
+        return state.documents[uri]!!
+    }
+
+    fun removeEditor(id: String) {
+        state.editors.remove(id)
+        val handler = editorHandles.remove(id)
+        var needDeleteDoc = true
+        val values = editorHandles.values
+        values.forEach { value->
+            if (value.document.uri == handler?.document?.uri) {
+                needDeleteDoc = false
+            }
+        }
+        if(needDeleteDoc){
+            state.documents.remove(handler?.document?.uri)
+        }
+        if (state.activeEditorId == id) {
+            state.activeEditorId = null
+        }
+        scheduleUpdate()
+
+        handler?.tab?.let {
+            tabManager.removeTab(it.id)
+        }
+        handler?.group?.let {
+            tabManager.removeGroup(it.groupId)
+        }
+    }
+
+    //from exthost
+     fun closeTab(id:String){
+        val tab = tabManager.removeTab(id)
+        tab?.let { tab->
+            val handler = getEditorHandleByTabId(id)
+            handler?.let {
+                state.editors.remove(it.id)
+                val handler = editorHandles.remove(it.id)
+                this.state.documents.remove(it.document.uri)
+                if (state.activeEditorId == it.id) {
+                    state.activeEditorId = null
+                }
+                handler?.let {h->
+                    if(h.ideaEditor != null){
+                        ApplicationManager.getApplication().invokeAndWait {
+                            h.ideaEditor?.dispose()
+                        }
+                    }else{
+                        ApplicationManager.getApplication().invokeAndWait {
+                            FileEditorManager.getInstance(project).allEditors.forEach {
+                                if(it is DiffRequestProcessorEditor && handler.diff){
+                                    val differ = it
+                                    differ.processor.activeRequest?.let { req ->
+                                        for (filesToRefresh in req.filesToRefresh) {
+                                            if(filesToRefresh.path == handler.document.uri.path){
+                                                differ.dispose()
+                                            }
+                                        }
+                                    }
+                                }
+                            }
+
+                        }
+                    }
+                }
+                scheduleUpdate()
+            }
+        }
+    }
+
+    fun closeGroup(id:Int){
+        tabManager.removeGroup(id);
+    }
+
+    private fun getEditorHandleByTabId(id: String): EditorHolder? {
+        for ((_, handle) in editorHandles){
+            if (handle.tab != null && handle.tab?.id == id) {
+                return handle
+            }
+        }
+        return null
+    }
+
+    override fun dispose() {
+        messageBusConnection.dispose()
+    }
+
+    fun didUpdateActive(handle: EditorHolder) {
+        if (handle.isActive) {
+            setActiveEditor(id = handle.id)
+        } else if (state.activeEditorId == handle.id) {
+            // If the current active editor is set to inactive, select the first active editor
+            editorHandles.values.firstOrNull { it.isActive }?.let {
+                setActiveEditor(id = it.id)
+            }
+        }
+    }
+
+    private fun setActiveEditor(id: String) {
+        state.activeEditorId = id
+        scheduleUpdate()
+    }
+
+    private fun scheduleUpdate() {
+        job?.cancel()
+        job = CoroutineScope(Dispatchers.IO).launch {
+            delay(10)
+            processUpdates()
+        }
+    }
+    private fun copy(state: DocumentsAndEditorsState): DocumentsAndEditorsState {
+        val rst = DocumentsAndEditorsState(
+            editors = ConcurrentHashMap(),
+            documents = ConcurrentHashMap(),
+            activeEditorId = state.activeEditorId
+        )
+        rst.editors.putAll(state.editors)
+        rst.documents.putAll(state.documents)
+        return rst
+    }
+    private suspend fun processUpdates() {
+        val delta = state.delta(lastNotifiedState)
+
+        // Update last notified state
+        lastNotifiedState = copy(state)
+
+        // Send document and editor change notifications
+        delta.itemsDelta?.let { itemsDelta ->
+
+            editorStateService.acceptDocumentsAndEditorsDelta(itemsDelta)
+        }
+
+        // Send editor property change notifications
+        if (delta.editorDeltas.isNotEmpty()) {
+            editorStateService.acceptEditorPropertiesChanged( delta.editorDeltas)
+        }
+
+        // Send document content change notifications
+        if (delta.documentDeltas.isNotEmpty()) {
+            editorStateService.acceptModelChanged(delta.documentDeltas)
+        }
+    }
+
+    suspend fun updateDocumentAsync(document: ModelAddedData) {
+        // Check if the document exists
+        if (state.documents[document.uri] != null) {
+            state.documents[document.uri] = document
+            processUpdates()
+        }
+    }
+
+    fun updateDocument(document: ModelAddedData) {
+        // Check if the document exists
+        if (state.documents[document.uri] != null) {
+            state.documents[document.uri] = document
+            scheduleUpdate()
+        }
+    }
+
+    suspend fun syncUpdates() {
+        job?.cancel()
+        processUpdates()
+    }
+
+    fun updateEditor(state: TextEditorAddData) {
+        if (this.state.editors[state.id] != null) {
+            this.state.editors[state.id] = state
+            scheduleUpdate()
+        }
+    }
+
+    fun getIdeaDiffEditor(uri: URI): WeakReference<Editor>? {
+        val editor = ideaOpenedEditor[uri.path] ?: return null
+        return WeakReference(editor)
+    }
+
+    fun onIdeaDiffEditorCreated(url: URI, editor: Editor) {
+        ideaOpenedEditor.put(url.path,editor);
+    }
+
+    fun onIdeaDiffEditorReleased(url: URI, editor: Editor) {
+        ideaOpenedEditor.remove(url.path)
+    }
+
+}
+
+
+data class DocumentsAndEditorsState (
+    var editors: MutableMap<String , TextEditorAddData> =  ConcurrentHashMap(),
+    var documents: MutableMap<URI, ModelAddedData> =  ConcurrentHashMap(),
+    var activeEditorId: String? = null
+){
+
+    fun delta(lastState: DocumentsAndEditorsState): Delta {
+        // Calculate document changes
+        val currentDocumentUrls = documents.keys.toSet()
+        val lastDocumentUrls = lastState.documents.keys.toSet()
+
+        val removedUrls = lastDocumentUrls - currentDocumentUrls
+        val addedUrls = currentDocumentUrls - lastDocumentUrls
+
+        val addedDocuments = addedUrls.mapNotNull { documents[it] }
+
+        // Calculate editor changes
+        val addedEditors = mutableListOf<TextEditorAddData>()
+        val editorDeltas = mutableMapOf<String, EditorPropertiesChangeData>()
+
+        val currentEditorIds = editors.keys.toSet()
+        val lastEditorIds = lastState.editors.keys.toSet()
+
+        val removedIds = lastEditorIds - currentEditorIds
+
+        // Iterate through all current editors, handling additions and property changes simultaneously
+        editors.forEach { (id, editor) ->
+            lastState.editors[id]?.let { lastEditor ->
+                // Check for option changes
+                val optionsChanged = editor.options != lastEditor.options
+
+                // Check for selection area changes
+                val selectionsChanged = editor.selections != lastEditor.selections
+
+                // Check for visible range changes
+                val visibleRangesChanged = editor.visibleRanges != lastEditor.visibleRanges
+
+                // If there are any changes, create EditorPropertiesChangeData
+                if (optionsChanged || selectionsChanged || visibleRangesChanged) {
+                    editorDeltas[id] = EditorPropertiesChangeData(
+                        options = if (optionsChanged) editor.options else null,
+                        selections = if (selectionsChanged) SelectionChangeEvent(
+                            selections =  editor.selections,
+                            source = null
+                        ) else null,
+                        visibleRanges = if (visibleRangesChanged) editor.visibleRanges else null
+                    )
+                }
+            } ?: run {
+                // Newly added editor
+                addedEditors.add(editor)
+            }
+        }
+
+        // Calculate document content changes
+        val documentDeltas = mutableMapOf<URI, ModelChangedEvent>()
+
+        // Iterate through all current documents, checking for content changes
+        documents.forEach { (uri, document) ->
+            lastState.documents[uri]?.let { lastDocument ->
+                // Check if the document has changes
+                val hasChanges = document.lines != lastDocument.lines ||
+                        document.EOL != lastDocument.EOL ||
+                        document.languageId != lastDocument.languageId ||
+                        document.isDirty != lastDocument.isDirty ||
+                        document.encoding != lastDocument.encoding
+
+                if (hasChanges) {
+                    // If content has changed, create changes for the entire document
+                    val changes = listOf(
+                        ModelContentChange(
+                            range = Range(
+                                startLineNumber = 1,
+                                startColumn = 1,
+                                endLineNumber = max(1, lastDocument.lines.size),
+                                endColumn = max(1, (lastDocument.lines.lastOrNull()?.length ?: 0) + 1)
+                            ),
+                            rangeOffset = 0,
+                            rangeLength = lastDocument.lines.joinToString(lastDocument.EOL).length,
+                            text = document.lines.joinToString(document.EOL)
+                        )
+                    )
+
+                    documentDeltas[uri] = ModelChangedEvent(
+                        changes = changes,
+                        eol = document.EOL,
+                        versionId = document.versionId,
+                        isUndoing = false,
+                        isRedoing = false,
+                        isDirty = document.isDirty
+                    )
+                }
+            }
+        }
+
+        val itemsDelta = DocumentsAndEditorsDelta(
+            removedDocuments = removedUrls.toList(),
+            addedDocuments = addedDocuments,
+            removedEditors = removedIds.toList(),
+            addedEditors = addedEditors,
+            newActiveEditor = if (activeEditorId != lastState.activeEditorId) activeEditorId else null
+        )
+
+        return Delta(
+            itemsDelta = if (itemsDelta.isEmpty()) null else itemsDelta,
+            editorDeltas = editorDeltas,
+            documentDeltas = documentDeltas
+        )
+    }
+
+}
+data class Delta(
+    val itemsDelta : DocumentsAndEditorsDelta?,
+    val editorDeltas : MutableMap<String , EditorPropertiesChangeData>,
+    val documentDeltas : MutableMap<URI, ModelChangedEvent>
+)
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/editor/EditorCommands.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/editor/EditorCommands.kt
new file mode 100644
index 000000000..2a2d9a8a2
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/editor/EditorCommands.kt
@@ -0,0 +1,137 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.editor
+
+import com.intellij.diff.DiffContentFactory
+import com.intellij.diff.contents.DiffContent
+import com.intellij.openapi.diagnostic.Logger
+import com.intellij.openapi.project.Project
+import com.intellij.openapi.vfs.LocalFileSystem
+import ai.kilocode.jetbrains.commands.CommandRegistry
+import ai.kilocode.jetbrains.commands.ICommand
+import ai.kilocode.jetbrains.util.URI
+import ai.kilocode.jetbrains.util.URIComponents
+import java.io.File
+
+/**
+ * Registers commands related to editor API operations
+ * Currently registers the workbench diff command for file comparison
+ *
+ * @param project The current IntelliJ project
+ * @param registry The command registry to register commands with
+ */
+fun registerOpenEditorAPICommands(project: Project,registry: CommandRegistry) {
+
+    registry.registerCommand(
+        object : ICommand{
+            override fun getId(): String {
+                return "_workbench.diff"
+            }
+            override fun getMethod(): String {
+                return "workbench_diff"
+            }
+
+            override fun handler(): Any {
+                return OpenEditorAPICommands(project)
+            }
+
+            override fun returns(): String? {
+                return "void"
+            }
+
+        }
+    )
+}
+
+/**
+ * Handles editor API commands for operations like opening diff editors
+ */
+class OpenEditorAPICommands(val project: Project) {
+    private val logger = Logger.getInstance(OpenEditorAPICommands::class.java)
+    
+    /**
+     * Opens a diff editor to compare two files
+     *
+     * @param left Map containing URI components for the left file
+     * @param right Map containing URI components for the right file
+     * @param title Optional title for the diff editor
+     * @param columnOrOptions Optional column or options for the diff editor
+     * @return null after operation completes
+     */
+    suspend fun workbench_diff(left: Map<String, Any?>, right : Map<String, Any?>, title : String?,columnOrOptions : Any?): Any?{
+        val rightURI = createURI(right)
+        val leftURI = createURI(left)
+        logger.info("Opening diff: ${rightURI.path}")
+        val content1 = createContent(left,project)
+        val content2 = createContent(right,project)
+        if (content1 != null && content2 != null){
+            project.getService(EditorAndDocManager::class.java).openDiffEditor(leftURI,rightURI,title?:"File Comparison")
+        }
+        logger.info("Opening diff completed: ${rightURI.path}")
+        return null;
+    }
+
+    /**
+     * Creates a DiffContent object from URI components
+     *
+     * @param uri Map containing URI components
+     * @param project The current IntelliJ project
+     * @return DiffContent object or null if creation fails
+     */
+    fun createContent(uri: Map<String, Any?>, project: Project) : DiffContent?{
+        val path = uri["path"]
+        val scheme = uri["scheme"]
+        val query = uri["query"]
+        val fragment = uri["fragment"]
+        if(scheme != null){
+            val contentFactory = DiffContentFactory.getInstance()
+            if(scheme == "file"){
+                val vfs = LocalFileSystem.getInstance()
+                val fileIO = File(path as String)
+                if(!fileIO.exists()){
+                    fileIO.createNewFile()
+                    vfs.refreshIoFiles(listOf(fileIO.parentFile))
+                }
+
+                val file = vfs.refreshAndFindFileByPath(path as String) ?: run {
+                    logger.warn("File not found: $path")
+                    return null
+                }
+                return contentFactory.create(project, file)
+            }else if(scheme == "cline-diff"){
+                val string = if(query != null){
+                    val bytes = java.util.Base64.getDecoder().decode(query as String)
+                    String(bytes)
+                }else ""
+                val content = contentFactory.create(project, string)
+                return content
+            }
+            return null
+        }else{
+            return null
+        }
+    }
+}
+
+/**
+ * Creates a URI object from a map of URI components
+ *
+ * @param map Map containing URI components (scheme, authority, path, query, fragment)
+ * @return URI object constructed from the components
+ */
+fun createURI(map: Map<String, Any?>): URI {
+    val authority = if (map["authority"] != null) map["authority"] as String else ""
+    val query = if (map["query"] != null) map["query"] as String else ""
+    val fragment = if (map["fragment"] != null) map["fragment"] as String else ""
+
+    val uriComponents = object : URIComponents {
+        override val scheme: String = map["scheme"] as String
+        override val authority: String = authority
+        override val path: String = map["path"] as String
+        override val query: String = query
+        override val fragment: String = fragment
+    }
+    return URI.from(uriComponents)
+}
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/editor/EditorHolder.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/editor/EditorHolder.kt
new file mode 100644
index 000000000..1f7af7708
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/editor/EditorHolder.kt
@@ -0,0 +1,307 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.editor
+
+import com.intellij.openapi.application.ApplicationManager
+import com.intellij.openapi.diagnostic.Logger
+import com.intellij.openapi.editor.Document
+import com.intellij.openapi.editor.Editor
+import com.intellij.openapi.editor.LogicalPosition
+import com.intellij.openapi.editor.ScrollType
+import com.intellij.openapi.fileEditor.FileDocumentManager
+import com.intellij.openapi.fileEditor.FileEditor
+import com.intellij.openapi.fileEditor.TextEditor
+import com.intellij.openapi.vfs.LocalFileSystem
+import com.intellij.testFramework.utils.editor.saveToDisk
+import kotlinx.coroutines.*
+import java.io.File
+import java.lang.ref.WeakReference
+import kotlin.math.max
+import kotlin.math.min
+
+/**
+ * Manages the state and behavior of an editor instance
+ * Handles synchronization between IntelliJ editor and VSCode editor state
+ *
+ * @param id Unique identifier for this editor
+ * @param state Editor state data
+ * @param document Document data associated with this editor
+ * @param diff Whether this is a diff editor
+ * @param stateManager Reference to the editor and document manager
+ */
+class EditorHolder(
+    val id: String,
+    var state: TextEditorAddData,
+    var document: ModelAddedData,
+    val diff: Boolean,
+    private val stateManager: EditorAndDocManager,
+) {
+
+    val logger = Logger.getInstance(EditorHolder::class.java)
+
+    /**
+     * Indicates whether this editor is currently active.
+     */
+    var isActive: Boolean = false
+        private set
+
+    /**
+     * The underlying IntelliJ Document associated with this editor.
+     */
+    private var editorDocument: Document? = null
+
+    /**
+     * The IntelliJ FileEditor instance for this editor.
+     */
+    var ideaEditor: FileEditor? = null
+
+    /**
+     * The title of the editor tab, if any.
+     */
+    var title: String? = null
+
+    /**
+     * The tab group handle this editor belongs to.
+     */
+    var group: TabGroupHandle? = null
+
+    /**
+     * The tab handle for this editor.
+     */
+    var tab: TabHandle? = null
+
+    // Delayed update related fields
+
+    /**
+     * Job for debounced editor state updates.
+     */
+    private var editorUpdateJob: Job? = null
+
+    /**
+     * Job for debounced document state updates.
+     */
+    private var documentUpdateJob: Job? = null
+
+    /**
+     * Delay in milliseconds for debounced updates.
+     */
+    private val updateDelay: Long = 30 // 30ms delay
+
+        /**
+         * Updates editor selections and triggers a state update
+         *
+         * @param selections List of selections to apply
+         */
+        fun updateSelections(selections: List<Selection>) {
+            state.selections = selections
+            debouncedUpdateState()
+        }
+
+        fun updateVisibleRanges(ranges: List<Range>) {
+            state.visibleRanges = ranges
+            debouncedUpdateState()
+        }
+
+        fun updatePosition(position: Int?) {
+            state.editorPosition = position
+            debouncedUpdateState()
+        }
+
+        fun updateOptions(options: ResolvedTextEditorConfiguration) {
+            state.options = options
+            debouncedUpdateState()
+        }
+
+        fun setActive(active: Boolean) {
+            if (isActive == active) return
+            isActive = active
+            if(editorDocument == null && active){
+                val vfs = LocalFileSystem.getInstance()
+                val path = document.uri.path
+                ApplicationManager.getApplication().runReadAction {
+                    val file = vfs.findFileByPath(path)
+                    editorDocument = file?.let { FileDocumentManager.getInstance().getDocument(it) }
+                }
+            }
+            CoroutineScope(Dispatchers.IO).launch {
+                delay(100)
+                stateManager.didUpdateActive(this@EditorHolder)
+            }
+        }
+
+        fun revealRange(range: Range) {
+            state.visibleRanges = listOf(range)
+            stateManager.getIdeaDiffEditor(document.uri)?.get()?.let {e->
+                ApplicationManager.getApplication().invokeLater{
+                    val target = LogicalPosition(range.startLineNumber,0)
+                    e.scrollingModel.scrollTo(target, ScrollType.RELATIVE)
+                }
+            }
+            debouncedUpdateState()
+        }
+
+        /**
+         * Updates document content by applying a text edit
+         *
+         * @param edit Text edit to apply
+         * @return True if edit was applied successfully, false otherwise
+         */
+        suspend fun applyEdit(edit: TextEdit): Boolean {
+            // Get current text content
+            val content = editorDocument?.text ?: ""
+            val lines = content.lines()
+            val lineCount = lines.size
+
+            // Calculate range
+            val startLine = max(0, edit.textEdit.range.startLineNumber - 1)
+            val startColumn = max(0, edit.textEdit.range.startColumn - 1)
+            val endLine = min(lineCount - 1, edit.textEdit.range.endLineNumber - 1)
+            val endColumn = min(lines[endLine].length, edit.textEdit.range.endColumn - 1)
+            
+            // Calculate offsets
+            var startOffset = 0
+            var endOffset = 0
+            for (i in 0 until lineCount) {
+                if (i < startLine) {
+                    startOffset += lines[i].length + 1 // +1 for newline
+                } else if (i == startLine) {
+                    startOffset += min(startColumn, lines[i].length)
+                }
+
+                if (i < endLine) {
+                    endOffset += lines[i].length + 1 // +1 for newline
+                } else if (i == endLine) {
+                    endOffset += min(endColumn, lines[i].length)
+                }
+            }
+            
+            // Ensure range is valid
+            val textLength = content.length
+            if (startOffset < 0 || endOffset > textLength || startOffset > endOffset) {
+                return false
+            }
+            val end = (endLine < (edit.textEdit.range.endLineNumber - 1))
+            val newText = edit.textEdit.text.replace("\r\n", "\n")
+            val newContent = content.substring(0, startOffset) + newText + (if (!end) content.substring(endOffset) else "")
+            ApplicationManager.getApplication().invokeAndWait {
+                ApplicationManager.getApplication().runWriteAction {
+                    editorDocument?.setText(newContent)
+                }
+            }
+            CoroutineScope(Dispatchers.IO).launch {
+                delay(1000)
+                val file = File(document.uri.path).parentFile
+                if(file.exists()){
+                    LocalFileSystem.getInstance().refreshIoFiles(listOf(file))
+                }
+            }
+            val newDoc = ModelAddedData(
+                uri = document.uri,
+                versionId = document.versionId + 1,
+                lines = newContent.lines(),
+                EOL = document.EOL,
+                languageId = document.languageId,
+                isDirty = true,
+                encoding = document.encoding
+            )
+            document = newDoc
+            stateManager.updateDocumentAsync(newDoc)
+            return true;
+        }
+
+        suspend fun save(): Boolean {
+            ApplicationManager.getApplication().invokeLater {
+                ApplicationManager.getApplication().runWriteAction {
+                    editorDocument?.saveToDisk()
+                }
+            }
+            val newDoc = ModelAddedData(
+                uri = document.uri,
+                versionId = document.versionId + 1,
+                lines = document.lines,
+                EOL = document.EOL,
+                languageId = document.languageId,
+                isDirty = false,
+                encoding = document.encoding
+            )
+            document = newDoc
+            stateManager.updateDocumentAsync(newDoc)
+            return true
+        }
+
+        fun updateDocumentContent(lines: List<String>, versionId: Int? = null) {
+            document.lines = lines
+            document.versionId = versionId ?: (document.versionId + 1)
+            debouncedUpdateDocument()
+        }
+
+        /**
+         * Updates the language ID of the document.
+         * @param languageId The new language ID.
+         */
+        fun updateDocumentLanguage(languageId: String) {
+            document.languageId = languageId
+            debouncedUpdateDocument()
+        }
+
+        /**
+         * Updates the encoding of the document.
+         * @param encoding The new encoding.
+         */
+        fun updateDocumentEncoding(encoding: String) {
+            document.encoding = encoding
+            debouncedUpdateDocument()
+        }
+
+        suspend fun updateDocumentDirty(isDirty: Boolean) {
+            if (document.isDirty == isDirty) return
+
+            val newDoc = ModelAddedData(
+                uri = document.uri,
+                versionId = document.versionId + 1,
+                lines = document.lines,
+                EOL = document.EOL,
+                languageId = document.languageId,
+                isDirty = isDirty,
+                encoding = document.encoding
+            )
+            document = newDoc
+            ApplicationManager.getApplication().invokeAndWait {
+                val fileDocumentManager = FileDocumentManager.getInstance()
+                editorDocument?.let { fileDocumentManager.saveDocument(it) }
+            }
+
+            debouncedUpdateDocument()
+        }
+
+        suspend fun syncDocumentState() {
+            documentUpdateJob?.cancel()
+            stateManager.updateDocument(document)
+            stateManager.syncUpdates()
+        }
+
+        // Private methods
+        /**
+         * Updates editor state with debouncing to avoid excessive updates
+         */
+        private fun debouncedUpdateState() {
+            editorUpdateJob?.cancel()
+            editorUpdateJob = CoroutineScope(Dispatchers.Default).launch {
+                delay(updateDelay)
+                stateManager.updateEditor(state)
+            }
+        }
+
+        /**
+         * Updates document state with debouncing to avoid excessive updates.
+         */
+        private fun debouncedUpdateDocument() {
+            documentUpdateJob?.cancel()
+            documentUpdateJob = CoroutineScope(Dispatchers.Default).launch {
+                delay(updateDelay)
+                stateManager.updateDocument(document)
+            }
+        }
+    }
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/editor/EditorListener.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/editor/EditorListener.kt
new file mode 100644
index 000000000..272de2715
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/editor/EditorListener.kt
@@ -0,0 +1,39 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.editor
+
+import com.intellij.openapi.diff.impl.DiffUtil
+import com.intellij.openapi.editor.event.EditorFactoryEvent
+import com.intellij.openapi.editor.event.EditorFactoryListener
+import com.intellij.openapi.fileEditor.FileDocumentManager
+import ai.kilocode.jetbrains.util.URI
+import java.lang.ref.WeakReference
+
+
+class EditorListener : EditorFactoryListener {
+    override fun editorCreated(event: EditorFactoryEvent) {
+        val editor = event.editor
+        if(DiffUtil.isDiffEditor(editor)){
+            FileDocumentManager.getInstance().getFile(editor.document)?.let { file->
+                val manager = editor.project?.getService(EditorAndDocManager::class.java)
+                val url = URI.file(file.path)
+                manager?.onIdeaDiffEditorCreated(url,editor)
+            }
+        }
+        super.editorCreated(event)
+    }
+
+    override fun editorReleased(event: EditorFactoryEvent) {
+        val editor = event.editor
+        if(DiffUtil.isDiffEditor(editor)){
+            FileDocumentManager.getInstance().getFile(editor.document)?.let { file->
+                val manager = editor.project?.getService(EditorAndDocManager::class.java)
+                val url = URI.file(file.path)
+                manager?.onIdeaDiffEditorReleased(url,editor)
+            }
+        }
+        super.editorReleased(event)
+    }
+}
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/editor/EditorStateService.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/editor/EditorStateService.kt
new file mode 100644
index 000000000..a91a1a266
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/editor/EditorStateService.kt
@@ -0,0 +1,82 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.editor
+
+import com.intellij.openapi.project.Project
+import ai.kilocode.jetbrains.core.PluginContext
+import ai.kilocode.jetbrains.core.ServiceProxyRegistry
+import ai.kilocode.jetbrains.ipc.proxy.interfaces.ExtHostDocumentsAndEditorsProxy
+import ai.kilocode.jetbrains.ipc.proxy.interfaces.ExtHostDocumentsProxy
+import ai.kilocode.jetbrains.ipc.proxy.interfaces.ExtHostEditorTabsProxy
+import ai.kilocode.jetbrains.ipc.proxy.interfaces.ExtHostEditorsProxy
+import ai.kilocode.jetbrains.util.URI
+
+class EditorStateService(val project: Project) {
+    var extHostDocumentsAndEditorsProxy : ExtHostDocumentsAndEditorsProxy? = null
+    var extHostEditorsProxy : ExtHostEditorsProxy? = null
+    var extHostDocumentsProxy : ExtHostDocumentsProxy? = null
+
+    fun acceptDocumentsAndEditorsDelta(detail:DocumentsAndEditorsDelta){
+        val protocol = PluginContext.getInstance(project).getRPCProtocol()
+        if(extHostDocumentsAndEditorsProxy == null){
+            extHostDocumentsAndEditorsProxy = protocol?.getProxy(ServiceProxyRegistry.ExtHostContext.ExtHostDocumentsAndEditors)
+        }
+        extHostDocumentsAndEditorsProxy?.acceptDocumentsAndEditorsDelta(detail)
+    }
+
+    fun acceptEditorPropertiesChanged(detail: Map<String, EditorPropertiesChangeData>){
+        val protocol = PluginContext.getInstance(project).getRPCProtocol()
+        if(extHostEditorsProxy == null){
+            extHostEditorsProxy = protocol?.getProxy(ServiceProxyRegistry.ExtHostContext.ExtHostEditors)
+        }
+        extHostEditorsProxy?.let {
+            for ((id, data) in detail){
+                it.acceptEditorPropertiesChanged(id,data)
+            }
+        }
+    }
+
+    fun acceptModelChanged( detail: Map<URI, ModelChangedEvent>){
+        val protocol = PluginContext.getInstance(project).getRPCProtocol()
+        if (extHostDocumentsProxy == null){
+            extHostDocumentsProxy = protocol?.getProxy(ServiceProxyRegistry.ExtHostContext.ExtHostDocuments)
+        }
+        extHostDocumentsProxy?.let {
+            for ((uri, data) in detail) {
+                it.acceptModelChanged(uri,data,data.isDirty)
+            }
+        }
+    }
+
+}
+
+
+class TabStateService(val project: Project) {
+    var extHostEditorTabsProxy : ExtHostEditorTabsProxy? = null
+
+    fun acceptEditorTabModel(detail: List<EditorTabGroupDto>){
+        val protocol = PluginContext.getInstance(project).getRPCProtocol()
+        if (extHostEditorTabsProxy == null){
+            extHostEditorTabsProxy = protocol?.getProxy(ServiceProxyRegistry.ExtHostContext.ExtHostEditorTabs)
+        }
+        extHostEditorTabsProxy?.acceptEditorTabModel(detail)
+    }
+
+    fun acceptTabOperation(detail: TabOperation) {
+        val protocol = PluginContext.getInstance(project).getRPCProtocol()
+        if (extHostEditorTabsProxy == null){
+            extHostEditorTabsProxy = protocol?.getProxy(ServiceProxyRegistry.ExtHostContext.ExtHostEditorTabs)
+        }
+        extHostEditorTabsProxy?.acceptTabOperation(detail)
+    }
+
+    fun acceptTabGroupUpdate(detail: EditorTabGroupDto) {
+        val protocol = PluginContext.getInstance(project).getRPCProtocol()
+        if (extHostEditorTabsProxy == null){
+            extHostEditorTabsProxy = protocol?.getProxy(ServiceProxyRegistry.ExtHostContext.ExtHostEditorTabs)
+        }
+        extHostEditorTabsProxy?.acceptTabGroupUpdate(detail)
+    }
+}
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/editor/EditorTypes.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/editor/EditorTypes.kt
new file mode 100644
index 000000000..c9209b98b
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/editor/EditorTypes.kt
@@ -0,0 +1,165 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.editor
+
+import ai.kilocode.jetbrains.util.URI
+
+
+data class ModelAddedData(
+    val uri: URI,
+    var versionId: Int,
+    var lines: List<String>,
+    val EOL: String,
+    var languageId: String,
+    var isDirty: Boolean,
+    var encoding: String
+)
+
+data class Selection(
+    val selectionStartLineNumber: Int,
+    val selectionStartColumn: Int,
+    val positionLineNumber: Int,
+    val positionColumn: Int
+)
+
+data class Range(
+    val startLineNumber: Int,
+    val startColumn: Int,
+    val endLineNumber: Int,
+    val endColumn: Int
+)
+
+data class ResolvedTextEditorConfiguration(
+    val tabSize: Int = 4,
+    val indentSize: Int = 4,
+    val originalIndentSize: Int = 4,
+    val insertSpaces: Boolean = true,
+    val cursorStyle: Int = 1,
+    val lineNumbers: Int = 1
+)
+
+
+
+data class TextEditorAddData(
+    val id: String,
+    val documentUri: URI,
+    var options: ResolvedTextEditorConfiguration,
+    var selections: List<Selection>,
+    var visibleRanges: List<Range>,
+    var editorPosition: Int?
+)
+
+data class ModelContentChange(
+    val range: Range,
+    val rangeOffset: Int,
+    val rangeLength: Int,
+    val text: String
+)
+
+data class ModelChangedEvent(
+    val changes: List<ModelContentChange>,
+    val eol: String,
+    val versionId: Int,
+    val isUndoing: Boolean,
+    val isRedoing: Boolean,
+    val isDirty: Boolean
+)
+
+data class SelectionChangeEvent(
+    val selections: List<Selection>,
+    val source: String?
+)
+
+data class EditorPropertiesChangeData(
+    val options: ResolvedTextEditorConfiguration?,
+    val selections: SelectionChangeEvent?,
+    val visibleRanges: List<Range>?
+)
+
+data class DocumentsAndEditorsDelta(
+    val removedDocuments: List<URI>?,
+    val addedDocuments: List<ModelAddedData>?,
+    val removedEditors: List<String>?,
+    val addedEditors: List<TextEditorAddData>?,
+    val newActiveEditor: String?
+) {
+    fun isEmpty(): Boolean {
+        var isEmpty = true
+        if (!removedDocuments.isNullOrEmpty()) {
+            isEmpty = false
+        }
+        if (!addedDocuments.isNullOrEmpty()) {
+            isEmpty = false
+        }
+        if (!removedEditors.isNullOrEmpty()) {
+            isEmpty = false
+        }
+        if (!addedEditors.isNullOrEmpty()) {
+            isEmpty = false
+        }
+        if (!newActiveEditor.isNullOrEmpty()) {
+            isEmpty = false
+        }
+        return isEmpty
+    }
+}
+
+
+data class TextEditorChange(
+    val originalStartLineNumber : Int,
+    val originalEndLineNumberExclusive : Int,
+    val modifiedStartLineNumber : Int,
+    val modifiedEndLineNumberExclusive : Int
+)
+
+
+data class TextEditorDiffInformation(
+    val documentVersion: Int,
+    val original: URI?,
+    val modified: URI,
+    val changes: List<TextEditorChange>
+)
+
+enum class EditorGroupColumn(val value: Int) {
+    active(-1),
+    beside(-2),
+    one(1),
+    two(2),
+    three(3),
+    four(4),
+    five(5),
+    six(6),
+    seven(7),
+    eight(8),
+    nine(9);
+
+    val groupIndex : Int
+        get() {
+            return when (this) {
+                active -> -1
+                beside -> -2
+                else -> this.value - 1
+            }
+        }
+
+    companion object {
+        fun fromValue(value: Int): EditorGroupColumn {
+            return when (value) {
+                -2 -> beside
+                -1 -> active
+                1 -> one
+                2 -> two
+                3 -> three
+                4 -> four
+                5 -> five
+                6 -> six
+                7 -> seven
+                8 -> eight
+                9 -> nine
+                else -> {active}
+            }
+        }
+    }
+}
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/editor/TabStateManager.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/editor/TabStateManager.kt
new file mode 100644
index 000000000..e9b0b206e
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/editor/TabStateManager.kt
@@ -0,0 +1,484 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.editor
+
+import com.intellij.openapi.diagnostic.Logger
+import com.intellij.openapi.project.Project
+import java.util.*
+import java.util.concurrent.ConcurrentHashMap
+
+/**
+ * Tab State Manager
+ *
+ * Manages the state of editor tabs and tab groups, handling operations like
+ * creating, updating, moving, and removing tabs and tab groups.
+ */
+class TabStateManager(var project: Project) {
+    private val logger = Logger.getInstance(TabStateManager::class.java)
+    // MARK: - State storage
+    private var state = TabsState()
+    private val tabHandles = ConcurrentHashMap<String, TabHandle>()
+    private val groupHandles = ConcurrentHashMap<Int, TabGroupHandle>()
+    private val tabStateService :TabStateService
+    init {
+        tabStateService = TabStateService(project)
+    }
+
+    // MARK: - ID generation
+    private var nextGroupId = 1
+
+    // MARK: - Public methods
+
+    /**
+     * Creates a new tab group
+     *
+     * @param viewColumn The view column for the group
+     * @param isActive Whether this group should be the active group
+     * @return Handle to the created tab group
+     */
+    fun createTabGroup(viewColumn: Int, isActive: Boolean = false): TabGroupHandle {
+        // Generate new group ID
+        val groupId = nextGroupId++
+
+        // Create tab group
+        val group = EditorTabGroupDto(
+            groupId = groupId,
+            isActive = isActive,
+            viewColumn = viewColumn,
+            tabs = emptyList()
+        )
+        state.groups[groupId] = group
+
+        // If this is the active group, update the state of other groups
+        if (isActive) {
+            state.groups.forEach { (id, otherGroup) ->
+                if (id != groupId) {
+                    state.groups[id] = otherGroup.copy(isActive = false)
+                }
+            }
+        }
+
+        // Create tab group handle
+        val handle = TabGroupHandle(
+            groupId = groupId,
+            manager = this
+        )
+        groupHandles[groupId] = handle
+
+        // Send update event for all groups
+        tabStateService.acceptEditorTabModel(state.groups.values.toList())
+
+        return handle
+    }
+
+    /**
+     * Removes a tab group
+     *
+     * @param groupId ID of the group to remove
+     */
+    fun removeGroup(groupId: Int) {
+        state.groups.remove(groupId)
+        groupHandles.remove(groupId)
+
+        // Remove handles for all tabs in this group
+        tabHandles.entries.removeAll { it.value.groupId == groupId }
+
+        // Send update event for all groups
+//        tabStateService.acceptEditorTabModel(state.groups.values.toList())
+    }
+
+    /**
+     * Gets a handle to a tab group
+     *
+     * @param groupId ID of the group
+     * @return Handle to the tab group, or null if not found
+     */
+    fun getTabGroupHandle(groupId: Int): TabGroupHandle? = groupHandles[groupId]
+
+    // MARK: - Internal methods
+
+    /**
+     * Creates a new tab in a group
+     *
+     * @param groupId ID of the group to create the tab in
+     * @param input Input for the tab content
+     * @param options Options for the tab
+     * @return Handle to the created tab
+     */
+    internal suspend fun createTab(groupId: Int, input: TabInputBase, options: TabOptions): TabHandle {
+        if(input is EditorTabInput){
+            logger.info("create tab s" + input.uri?.path)
+        }
+        if(input is TextDiffTabInput){
+            logger.info("create tab d" + input.modified.path)
+        }
+        val group = state.groups[groupId] ?: error("Group not found: $groupId")
+// Create tab
+val tab = EditorTabDto(
+    id = UUID.randomUUID().toString(),
+    label = "", // Compatibility with Roocode 0.61+: API request gets stuck without label field
+    input = input,
+    isActive = options.isActive,
+    isPinned = options.isPinned,
+    isPreview = !options.isPinned,
+    isDirty = false
+)
+
+// Add to group
+val newTabs = group.tabs + tab
+val newGroup = group.copy(tabs = newTabs)
+state.groups[groupId] = newGroup
+
+// Create tab handle
+val handle = TabHandle(
+    id = tab.id,
+    groupId = groupId,
+    manager = this
+)
+tabHandles[tab.id] = handle
+
+        // Send tab operation event and group update event
+        tabStateService.acceptTabOperation(TabOperation(
+            groupId = groupId,
+            index = newTabs.size - 1,
+            tabDto = tab,
+            kind = TabModelOperationKind.TAB_OPEN.value,
+            oldIndex = null
+        ))
+        tabStateService.acceptTabGroupUpdate(newGroup)
+        return handle
+    }
+
+    /**
+     * Removes a tab
+     *
+     * @param id ID of the tab to remove
+     * @return Handle to the removed tab, or null if not found
+     */
+    internal fun removeTab(id: String) :TabHandle?{
+        val handle = tabHandles[id] ?: return null
+        val group = state.groups[handle.groupId] ?: return null
+
+        // Find the index of the tab in the group
+        val index = group.tabs.indexOfFirst { it.id == id }
+        if (index != -1) {
+            val tab = group.tabs[index]
+
+            if(tab.input is EditorTabInput){
+                logger.info("remove tab s" + tab.input.uri?.path)
+            }
+            if(tab.input is TextDiffTabInput){
+                logger.info("remove tab d" + tab.input.modified.path)
+            }
+
+            val newTabs = group.tabs.toMutableList().apply { removeAt(index) }
+            val newGroup = group.copy(tabs = newTabs)
+            state.groups[handle.groupId] = newGroup
+            state.groups[handle.groupId]?.isActive = false
+            tabHandles.remove(id)
+
+            // Send tab operation event and group update event
+            tabStateService.acceptTabOperation(TabOperation(
+                groupId = handle.groupId,
+                index = index,
+                tabDto = tab,
+                kind = TabModelOperationKind.TAB_CLOSE.value,
+                oldIndex = null
+            ))
+            tabStateService.acceptTabGroupUpdate(newGroup)
+        }
+        return handle;
+    }
+
+    /**
+     * Updates a tab using the provided update function
+     *
+     * @param id ID of the tab to update
+     * @param update Function that takes the current tab and returns an updated tab
+     */
+    internal suspend fun updateTab(id: String, update: (EditorTabDto) -> EditorTabDto) {
+        val handle = tabHandles[id] ?: return
+        val group = state.groups[handle.groupId] ?: return
+
+        // Find the index of the tab in the group
+        val index = group.tabs.indexOfFirst { it.id == id }
+        if (index != -1) {
+            val tab = update(group.tabs[index])
+            val newTabs = group.tabs.toMutableList().apply { this[index] = tab }
+            state.groups[handle.groupId] = group.copy(tabs = newTabs)
+
+            // Send tab operation event and group update event
+            tabStateService.acceptTabOperation(TabOperation(
+                groupId = handle.groupId,
+                index = index,
+                tabDto = tab,
+                kind = TabModelOperationKind.TAB_UPDATE.value,
+                oldIndex = null
+            ))
+//            tabStateService.acceptEditorTabModel(state.groups.values.toList())
+        }
+    }
+
+    /**
+     * Moves a tab to a new position, possibly in a different group
+     *
+     * @param id ID of the tab to move
+     * @param toGroupId ID of the destination group
+     * @param toIndex Index in the destination group
+     */
+    internal suspend fun moveTab(id: String, toGroupId: Int, toIndex: Int) {
+        val handle = tabHandles[id] ?: return
+        val fromGroup = state.groups[handle.groupId] ?: return
+        val toGroup = state.groups[toGroupId] ?: return
+
+        // Find the index of the tab in the source group
+        val fromIndex = fromGroup.tabs.indexOfFirst { it.id == id }
+        if (fromIndex != -1) {
+            val tab = fromGroup.tabs[fromIndex]
+
+            // If moving within the same group
+            if (handle.groupId == toGroupId) {
+                val newTabs = fromGroup.tabs.toMutableList().apply {
+                    removeAt(fromIndex)
+                    add(toIndex, tab)
+                }
+                state.groups[handle.groupId] = fromGroup.copy(tabs = newTabs)
+
+                // Send tab operation event and group update event
+                tabStateService.acceptTabOperation(TabOperation(
+                    groupId = handle.groupId,
+                    index = toIndex,
+                    tabDto = tab,
+                    kind = TabModelOperationKind.TAB_MOVE.value,
+                    oldIndex = fromIndex
+                ))
+//                tabStateService.acceptEditorTabModel(state.groups.values.toList())
+            } else {
+                // Moving between groups
+                val newFromTabs = fromGroup.tabs.toMutableList().apply { removeAt(fromIndex) }
+                val newToTabs = toGroup.tabs.toMutableList().apply { add(toIndex, tab) }
+                state.groups[handle.groupId] = fromGroup.copy(tabs = newFromTabs)
+                state.groups[toGroupId] = toGroup.copy(tabs = newToTabs)
+
+                // Update the group ID in the tab handle
+                handle.groupId = toGroupId
+
+                // Send tab operation event and group update event
+                tabStateService.acceptTabOperation(TabOperation(
+                    groupId = toGroupId,
+                    index = toIndex,
+                    tabDto = tab,
+                    kind = TabModelOperationKind.TAB_MOVE.value,
+                    oldIndex = fromIndex
+                ))
+//                tabStateService.acceptEditorTabModel(state.groups.values.toList())
+            }
+        }
+    }
+
+    /**
+     * Updates tab state properties
+     *
+     * @param id ID of the tab to update
+     * @param isActive Whether the tab is active
+     * @param isDirty Whether the tab is dirty (has unsaved changes)
+     * @param isPinned Whether the tab is pinned
+     */
+    internal suspend fun updateTab(
+        id: String,
+        isActive: Boolean? = null,
+        isDirty: Boolean? = null,
+        isPinned: Boolean? = null
+    ) {
+        updateTab(id) { tab ->
+            tab.copy(
+                isActive = isActive ?: tab.isActive,
+                isDirty = isDirty ?: tab.isDirty,
+                isPinned = isPinned ?: tab.isPinned,
+                isPreview = if (isPinned != null) !isPinned else tab.isPreview
+            )
+        }
+    }
+
+    /**
+     * Sets the active group
+     *
+     * @param groupId ID of the group to set as active
+     */
+    fun setActiveGroup(groupId: Int) {
+        state.groups.forEach { (id, group) ->
+            state.groups[id] = group.copy(isActive = id == groupId)
+        }
+
+        // Send update event for all groups
+        tabStateService.acceptEditorTabModel(state.groups.values.toList())
+    }
+
+    /**
+     * Gets a handle to a tab
+     *
+     * @param id ID of the tab
+     * @return Handle to the tab, or null if not found
+     */
+    fun getTabHandle(id: String): TabHandle? = tabHandles[id]
+
+    /**
+     * Gets a tab group
+     *
+     * @param groupId ID of the group
+     * @return The tab group, or null if not found
+     */
+    internal fun getTabGroup(groupId: Int): EditorTabGroupDto? = state.groups[groupId]
+
+    /**
+     * Gets all tab groups
+     *
+     * @return List of all tab groups
+     */
+    fun getAllGroups(): List<EditorTabGroupDto> = state.groups.values.toList()
+
+    /**
+     * Closes the manager and cleans up resources
+     */
+    suspend fun close() {
+//        tabOperationEvents.resetReplayCache()
+//        groupUpdateEvents.resetReplayCache()
+//        allGroupsUpdateEvents.resetReplayCache()
+    }
+}
+
+/**
+ * Tab state container
+ * Holds the state of all tab groups
+ */
+data class TabsState(
+    val groups: MutableMap<Int, EditorTabGroupDto> = ConcurrentHashMap()
+)
+
+/**
+ * Tab options
+ * Configuration options for creating tabs
+ */
+data class TabOptions(
+    val isActive: Boolean = false,
+    val isPinned: Boolean = false,
+    val isPreview: Boolean = false
+) {
+    companion object {
+        val DEFAULT = TabOptions()
+    }
+}
+/**
+ * Tab group handle
+ * Provides operations for a specific tab group
+ */
+/**
+ * Provides operations for a specific tab group.
+ * @property groupId The unique identifier for this tab group.
+ * @property manager The TabStateManager instance managing this group.
+ */
+class TabGroupHandle(
+    /**
+     * The unique identifier for this tab group.
+     */
+    val groupId: Int,
+    /**
+     * The TabStateManager instance managing this group.
+     */
+    private val manager: TabStateManager
+) {
+
+    /**
+     * Gets the tab group data.
+     */
+    val group: EditorTabGroupDto?
+        get() = manager.getTabGroup(groupId)
+
+    /**
+     * Adds a tab to this group.
+     *
+     * @param input Input for the tab content.
+     * @param options Options for the tab.
+     * @return Handle to the created tab.
+     */
+    suspend fun addTab(input: TabInputBase, options: TabOptions = TabOptions.DEFAULT): TabHandle? =
+        manager.createTab(groupId, input, options)
+
+    /**
+     * Moves a tab to a specified position within this group.
+     *
+     * @param id ID of the tab to move.
+     * @param toIndex Destination index.
+     */
+    suspend fun moveTab(id: String, toIndex: Int) {
+        manager.moveTab(id, groupId, toIndex)
+    }
+
+    /**
+     * Gets a handle to a tab in this group.
+     *
+     * @param id ID of the tab.
+     * @return Handle to the tab, or null if not found.
+     */
+    suspend fun getTabHandle(id: String): TabHandle? = manager.getTabHandle(id)
+
+    /**
+     * Gets all tabs in this group.
+     */
+    val tabs: List<EditorTabDto>
+        get() = group?.tabs ?: emptyList()
+
+    /**
+     * Removes this tab group and all its tabs.
+     * Closes all tabs in the group and removes the group from the manager.
+     */
+    suspend fun remove() {
+        group?.tabs?.forEach { tab ->
+            getTabHandle(tab.id)?.close()
+        }
+        manager.removeGroup(groupId)
+    }
+}
+/**
+ * Tab handle
+ * Provides operations for a specific tab
+ */
+/**
+ * Provides operations for a specific tab.
+ * @property id The unique identifier for this tab.
+ * @property groupId The group ID this tab belongs to.
+ * @property manager The TabStateManager instance managing this tab.
+ */
+class TabHandle(
+    /**
+     * The unique identifier for this tab.
+     */
+    val id: String,
+    /**
+     * The group ID this tab belongs to.
+     */
+    var groupId: Int,
+    /**
+     * The TabStateManager instance managing this tab.
+     */
+    private val manager: TabStateManager
+) {
+
+    /**
+     * Closes this tab by removing it from the manager.
+     */
+    suspend fun close() {
+        manager.removeTab(id)
+    }
+
+    /**
+     * Updates this tab using the provided update function.
+     *
+     * @param update Function that takes the current tab and returns an updated tab.
+     */
+    suspend fun update(update: (EditorTabDto) -> EditorTabDto) {
+        manager.updateTab(id, update)
+    }
+}
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/editor/TabTypes.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/editor/TabTypes.kt
new file mode 100644
index 000000000..cf751fb3b
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/editor/TabTypes.kt
@@ -0,0 +1,202 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.editor
+
+import ai.kilocode.jetbrains.util.URI
+
+/**
+ * Tab operation type, corresponding to VSCode's TabModelOperationKind
+ * Represents different kinds of operations that can be performed on tabs
+ */
+enum class TabModelOperationKind(val value: Int) {
+    TAB_OPEN(0),
+    TAB_CLOSE(1),
+    TAB_UPDATE(2),
+    TAB_MOVE(3)
+}
+
+
+/**
+ * Tab input type, corresponding to VSCode's TabInputKind
+ * Represents different types of content that can be displayed in a tab
+ */
+enum class TabInputKind(val value: Int) {
+    unknownInput(0),
+    textInput(1),
+    textDiffInput(2),
+    textMergeInput(3),
+    notebookInput(4),
+    notebookDiffInput(5),
+    customEditorInput(6),
+    webviewEditorInput(7),
+    terminalEditorInput(8),
+    interactiveEditorInput(9),
+    chatEditorInput(10),
+    multiDiffEditorInput(11)
+}
+
+/**
+ * Tab operation, corresponding to VSCode's TabOperation
+ * Represents an operation performed on a tab (open, close, update, move)
+ */
+data class TabOperation(
+    val groupId: Int,
+    val index: Int,
+    val tabDto: EditorTabDto,
+    val kind: Int,
+    val oldIndex : Int?
+)
+
+/**
+ * Tab data, corresponding to VSCode's IEditorTabDto
+ * Contains all information about a specific editor tab
+ */
+data class EditorTabDto(
+    val id: String,
+    val label: String,
+    val input: TabInputBase,
+    var isActive: Boolean,
+    var isPinned: Boolean,
+    var isPreview: Boolean,
+    var isDirty: Boolean
+)
+
+/**
+ * Tab group data, corresponding to VSCode's IEditorTabGroupDto
+ * Represents a group of editor tabs that are displayed together
+ */
+data class EditorTabGroupDto(
+    val groupId: Int,
+    var isActive: Boolean,
+    var viewColumn: Int,
+    var tabs: List<EditorTabDto>
+)
+
+/**
+ * Base class for all tab input types.
+ * Stores the kind of input for the tab.
+ */
+open class TabInputBase(
+    var kind: Int = TabInputKind.unknownInput.value
+)
+
+/**
+ * Tab input, corresponding to VSCode's IEditorTabInput
+ * Represents a text editor input for a tab
+ */
+data class EditorTabInput(
+    var uri: URI?,
+    var label: String? ,
+    var languageId: String?
+) : TabInputBase(TabInputKind.textInput.value)
+
+/**
+ * Tab input, corresponding to VSCode's IWebviewEditorTabInput
+ * Represents a webview editor input for a tab
+ */
+/**
+ * Represents a webview editor input for a tab.
+ * Used for tabs displaying webview content.
+ */
+class WebviewEditorTabInput(var viewType: String?) : TabInputBase(TabInputKind.webviewEditorInput.value)
+
+/**
+ * Tab input, corresponding to VSCode's ICustomEditorTabInput
+ * Represents a custom editor input for a tab
+ */
+/**
+ * Represents a custom editor input for a tab.
+ * Used for tabs with custom editor implementations.
+ */
+class CustomEditorTabInput(
+    var uri: URI? ,
+    var viewType: String?
+) : TabInputBase(TabInputKind.customEditorInput.value)
+
+/**
+ * Tab input, corresponding to VSCode's ITerminalEditorTabInput
+ * Represents a terminal editor input for a tab
+ */
+/**
+ * Represents a terminal editor input for a tab.
+ * Used for tabs displaying terminal sessions.
+ */
+class TerminalEditorTabInput() : TabInputBase(TabInputKind.terminalEditorInput.value)
+
+/**
+ * Tab input, corresponding to VSCode's INotebookEditorTabInput
+ * Represents a notebook editor input for a tab
+ */
+/**
+ * Represents a notebook editor input for a tab.
+ * Used for tabs displaying notebook files.
+ */
+class NotebookEditorTabInput(
+    var uri: URI,
+    val notebookType: String
+) : TabInputBase(TabInputKind.notebookInput.value)
+
+/**
+ * Tab input, corresponding to VSCode's INotebookDiffEditorTabInput
+ * Represents a notebook diff editor input for comparing two notebooks
+ */
+data class NotebookDiffEditorTabInput(
+    var original: URI,
+    var modified: URI,
+    var notebookType: String
+) : TabInputBase(TabInputKind.notebookDiffInput.value)
+
+/**
+ * Tab input, corresponding to VSCode's IInteractiveWindowInput
+ * Represents an interactive window input for a tab
+ */
+data class InteractiveWindowInput(
+    var uri: URI,
+    var inputBoxUri: URI
+) : TabInputBase(TabInputKind.interactiveEditorInput.value)
+
+/**
+ * Tab input, corresponding to VSCode's IChatEditorTabInput
+ * Represents a chat editor input for a tab
+ */
+/**
+ * Represents a chat editor input for a tab.
+ * Used for tabs displaying chat interfaces.
+ */
+class ChatEditorTabInput() : TabInputBase(TabInputKind.chatEditorInput.value)
+
+/**
+ * Tab input, corresponding to VSCode's ITextDiffTabInput
+ * Represents a text diff editor input for comparing two text files
+ */
+data class TextDiffTabInput(
+    var original: URI,
+    var modified: URI
+) : TabInputBase(TabInputKind.textDiffInput.value){
+    companion object {
+        fun create(original: URI, modified: URI) : TextDiffTabInput {
+            return TextDiffTabInput(original, modified)
+        }
+    }
+}
+
+/**
+ * Tab input, corresponding to VSCode's ITextMergeTabInput
+ * Represents a text merge editor input for merging multiple text files
+ */
+data class TextMergeTabInput(
+    var base: URI,
+    var input1: URI,
+    var input2: URI,
+    var result: URI
+) : TabInputBase(TabInputKind.textMergeInput.value)
+
+/**
+ * Tab input, corresponding to VSCode's multi-diff editor input
+ * Represents a multi-diff editor input for comparing multiple text files
+ */
+data class TextMultiDiffTabInput(
+    var resources: List<URI>
+) : TabInputBase(TabInputKind.multiDiffEditorInput.value)
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/editor/WorkspaceEdit.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/editor/WorkspaceEdit.kt
new file mode 100644
index 000000000..1dd7bcb8c
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/editor/WorkspaceEdit.kt
@@ -0,0 +1,64 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.editor
+
+import com.google.gson.Gson
+import com.google.gson.JsonParser
+import ai.kilocode.jetbrains.util.URI
+
+data class FileEdit(
+    val oldResource: URI?,
+    val newResource: URI?,
+    val options: Options?,
+    val metadata: Metadata?
+) {
+    data class Options(
+        val overwrite: Boolean?,
+        val ignoreIfExists: Boolean?,
+        val copy: Boolean?,
+        val contents: String?
+    )
+}
+
+data class Metadata(
+    val isRefactoring: Boolean?
+)
+
+data class Content(
+    val range: Range,
+    val text: String
+)
+
+data class TextEdit(
+    val resource: URI,
+    val textEdit: Content,
+    val metadata: Metadata?
+)
+
+class WorkspaceEdit{
+    val files:MutableList<FileEdit> = mutableListOf()
+    val texts:MutableList<TextEdit> = mutableListOf()
+    companion object {
+        fun from(dto: String): WorkspaceEdit {
+            val rst = WorkspaceEdit()
+            val json = JsonParser.parseString(dto)
+            val edits = json.asJsonObject.get("edits")
+            if(edits.isJsonArray){
+                val array = edits.asJsonArray
+                for(element in array){
+                    val edit = element.asJsonObject
+                    if(edit.has("textEdit")){
+                        rst.texts.add(Gson().fromJson(edit, TextEdit::class.java))
+                    }else if(edit.has("fileEdit")){
+                        rst.files.add(Gson().fromJson(edit, FileEdit::class.java))
+                    }
+                }
+                return rst
+            }else{
+                throw IllegalArgumentException("WorkspaceEdit must be an array")
+            }
+        }
+    }
+}
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/events/EventBus.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/events/EventBus.kt
new file mode 100644
index 000000000..7877c34b8
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/events/EventBus.kt
@@ -0,0 +1,164 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.events
+
+import com.intellij.openapi.Disposable
+import com.intellij.openapi.application.ApplicationManager
+import com.intellij.openapi.components.Service
+import com.intellij.openapi.components.service
+import com.intellij.openapi.diagnostic.Logger
+import com.intellij.openapi.util.Disposer
+import kotlinx.coroutines.CoroutineScope
+import kotlinx.coroutines.flow.MutableSharedFlow
+import kotlinx.coroutines.flow.SharedFlow
+import kotlinx.coroutines.flow.asSharedFlow
+import kotlinx.coroutines.flow.filter
+import kotlinx.coroutines.launch
+import java.util.concurrent.ConcurrentHashMap
+
+
+@Service
+class EventBus : AbsEventBus() {
+    companion object {
+        fun get():EventBus{
+            return service<EventBus>()
+        }
+    }
+}
+
+/**
+ * Event bus for communication between plugin internal components
+ */
+@Service(Service.Level.PROJECT) // Consider other implementation approaches?
+class ProjectEventBus : AbsEventBus() {
+}
+
+
+open class AbsEventBus : Disposable{
+    private val logger = Logger.getInstance(ProjectEventBus::class.java)
+    
+    // All events are dispatched through this flow
+    private val _events = MutableSharedFlow<Event<*>>(extraBufferCapacity = 64)
+    val events: SharedFlow<Event<*>> = _events.asSharedFlow()
+    
+    // Event listener mapping, key is event type, value is listener list
+    private val listeners = ConcurrentHashMap<EventType<*>, MutableList<(Any) -> Unit>>()
+    
+    /**
+     * Send event
+     */
+    suspend fun <T : Any> emit(eventType: EventType<T>, data: T) {
+        _events.emit(Event(eventType, data))
+        
+        // Also notify regular listeners
+        @Suppress("UNCHECKED_CAST")
+        listeners[eventType]?.forEach { listener ->
+            try {
+                listener(data)
+            } catch (e: Exception) {
+                logger.error("Event handling exception", e)
+            }
+        }
+    }
+    
+    /**
+     * Send event in specified coroutine scope
+     */
+    fun <T : Any> emitIn(scope: CoroutineScope, eventType: EventType<T>, data: T) {
+        scope.launch {
+            emit(eventType, data)
+        }
+    }
+    
+    /**
+     * Send event in IntelliJ application context
+     * Use IntelliJ platform's thread-safe methods instead of coroutines
+     */
+    fun <T : Any> emitInApplication(eventType: EventType<T>, data: T) {
+        ApplicationManager.getApplication().invokeLater {
+            ApplicationManager.getApplication().runReadAction {
+                listeners[eventType]?.forEach { listener ->
+                    @Suppress("UNCHECKED_CAST")
+                    try {
+                        listener(data)
+                    } catch (e: Exception) {
+                        logger.error("Event processing exception", e)
+                    }
+                }
+            }
+        }
+    }
+    
+    /**
+     * Subscribe to specific event type in specified coroutine scope
+     */
+    inline fun <reified T : Any> on(
+        scope: CoroutineScope,
+        eventType: EventType<T>,
+        crossinline handler: suspend (T) -> Unit
+    ) {
+        scope.launch {
+            events
+                .filter { it.type == eventType }
+                .collect { event ->
+                    @Suppress("UNCHECKED_CAST")
+                    handler(event.data as T)
+                }
+        }
+    }
+    
+    /**
+     * Add event listener (no coroutines required)
+     * Provides IntelliJ platform compatible event listening method
+     */
+    @Suppress("UNCHECKED_CAST")
+    fun <T : Any> addListener(eventType: EventType<T>, handler: (T) -> Unit) {
+        listeners.getOrPut(eventType) { mutableListOf() }.add(handler as (Any) -> Unit)
+    }
+    
+    /**
+     * Add event listener with Disposable, automatically removes listener when Disposable is disposed
+     */
+    @Suppress("UNCHECKED_CAST")
+    fun <T : Any> addListener(eventType: EventType<T>, disposable: Disposable, handler: (T) -> Unit) {
+        val wrappedHandler = handler as (Any) -> Unit
+        listeners.getOrPut(eventType) { mutableListOf() }.add(wrappedHandler)
+        
+        // Use IntelliJ's Disposer API for resource cleanup
+        Disposer.register(disposable, Disposable {
+            removeListener(eventType, wrappedHandler)
+        })
+    }
+    
+    /**
+     * Remove event listener
+     */
+    fun <T : Any> removeListener(eventType: EventType<T>, handler: (Any) -> Unit) {
+        listeners[eventType]?.remove(handler)
+    }
+    
+    /**
+     * Remove all listeners for specific event type
+     */
+    fun <T : Any> removeAllListeners(eventType: EventType<T>) {
+        listeners.remove(eventType)
+    }
+
+    override fun dispose() {
+    }
+}
+
+/**
+ * Event type marker interface
+ */
+interface EventType<T : Any>
+
+/**
+ * Event data class
+ */
+data class Event<T : Any>(
+    val type: EventType<T>,
+    val data: T
+)
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/events/WebviewEvents.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/events/WebviewEvents.kt
new file mode 100644
index 000000000..d5cf7bea4
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/events/WebviewEvents.kt
@@ -0,0 +1,32 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.events
+
+/**
+ * WebView view provider registration event type
+ */
+object WebviewViewProviderRegisterEvent : EventType<WebviewViewProviderData>
+
+/**
+ * WebView view provider data
+ */
+data class WebviewViewProviderData(
+    val extension: Map<String, Any?>,
+    val viewType: String,
+    val options: Map<String, Any?>
+)
+
+/**
+ * WebView HTML content update event type
+ */
+object WebviewHtmlUpdateEvent : EventType<WebviewHtmlUpdateData>
+
+/**
+ * WebView HTML content update data
+ */
+data class WebviewHtmlUpdateData(
+    val handle: String,
+    var htmlContent: String
+) 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/events/WorkspaceEvents.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/events/WorkspaceEvents.kt
new file mode 100644
index 000000000..a0d136961
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/events/WorkspaceEvents.kt
@@ -0,0 +1,80 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.events
+
+import com.intellij.openapi.project.Project
+import com.intellij.openapi.vfs.VirtualFile
+
+/**
+ * File change type
+ */
+enum class FileChangeType {
+    CREATED,
+    UPDATED,
+    DELETED
+}
+
+/**
+ * File system item type
+ */
+enum class FileSystemItemType {
+    FILE,
+    DIRECTORY
+}
+
+/**
+ * Workspace file change event type
+ */
+object WorkspaceFileChangeEvent : EventType<WorkspaceFileChangeData>
+
+/**
+ * Workspace directory change event type
+ */
+object WorkspaceDirectoryChangeEvent : EventType<WorkspaceFileChangeData>
+
+/**
+ * Workspace file change data
+ */
+data class WorkspaceFileChangeData(
+    val file: VirtualFile,
+    val changeType: FileChangeType,
+    val timestamp: Long = System.currentTimeMillis(),
+    val itemType: FileSystemItemType = if (file.isDirectory) FileSystemItemType.DIRECTORY else FileSystemItemType.FILE
+)
+
+/**
+ * Workspace multiple files change event type
+ */
+object WorkspaceFilesChangeEvent : EventType<WorkspaceFilesChangeData>
+
+/**
+ * Workspace directories change event type
+ */
+object WorkspaceDirectoriesChangeEvent: EventType<WorkspaceFilesChangeData>
+
+/**
+ * Workspace multiple files change data
+ */
+data class WorkspaceFilesChangeData(
+    val changes: List<WorkspaceFileChangeData>
+)
+
+
+/**
+ * Workspace root change data class
+ * @param project The changed project
+ * @param oldPath Original workspace root path
+ * @param newPath New workspace root path
+ */
+data class WorkspaceRootChangeData(
+    val project: Project,
+    val oldPath: String?,
+    val newPath: String
+)
+
+/**
+ * Workspace root change event
+ */
+object WorkspaceRootChangeEvent : EventType<WorkspaceRootChangeData>
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/BufferedEmitter.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/BufferedEmitter.kt
new file mode 100644
index 000000000..5ccd1c47c
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/BufferedEmitter.kt
@@ -0,0 +1,129 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.ipc
+
+import com.intellij.openapi.Disposable
+import com.intellij.openapi.diagnostic.Logger
+import kotlinx.coroutines.CoroutineScope
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.launch
+import java.util.concurrent.ConcurrentLinkedQueue
+import java.util.concurrent.Executors
+import kotlin.coroutines.CoroutineContext
+
+/**
+ * Buffered event emitter
+ * Ensures messages are not lost when there are no event listeners
+ * Corresponds to BufferedEmitter in VSCode
+ * @param T Event data type
+ */
+class BufferedEmitter<T> {
+    private val listeners = mutableListOf<(T) -> Unit>()
+    private val bufferedMessages = ConcurrentLinkedQueue<T>()
+    private var hasListeners = false
+    private var isDeliveringMessages = false
+    
+    private val coroutineContext = Dispatchers.IO
+    private val scope = CoroutineScope(coroutineContext)
+    
+    companion object {
+        private val LOG = Logger.getInstance(BufferedEmitter::class.java)
+    }
+
+    /**
+     * Event listener property, similar to the event property in TypeScript version
+     */
+    val event: EventListener<T> = this::onEvent
+    
+    /**
+     * Add event listener
+     * @param listener Event listener
+     * @return Listener registration identifier for removing the listener
+     */
+    fun onEvent(listener: (T) -> Unit): Disposable {
+        val wasEmpty = listeners.isEmpty()
+        listeners.add(listener)
+        
+        if (wasEmpty) {
+            hasListeners = true
+            // Use microtask queue to ensure these messages are delivered before other messages have a chance to be received
+            scope.launch { deliverMessages() }
+        }
+        
+        return Disposable {
+            synchronized(listeners) {
+                listeners.remove(listener)
+                if (listeners.isEmpty()) {
+                    hasListeners = false
+                }
+            }
+        }
+    }
+    
+    /**
+     * Fire event
+     * @param event Event data
+     */
+    fun fire(event: T) {
+        if (hasListeners) {
+            if (bufferedMessages.isNotEmpty()) {
+                bufferedMessages.offer(event)
+            } else {
+                synchronized(listeners) {
+                    ArrayList(listeners).forEach { listener ->
+                        try {
+                            listener(event)
+                        } catch (e: Exception) {
+                            // Log exception but do not interrupt processing
+                            LOG.warn("Error in event listener: ${e.message}", e)
+                        }
+                    }
+                }
+            }
+        } else {
+            bufferedMessages.offer(event)
+        }
+    }
+    
+    /**
+     * Clear buffer
+     */
+    fun flushBuffer() {
+        bufferedMessages.clear()
+    }
+    
+    /**
+     * Deliver buffered messages
+     */
+    private fun deliverMessages() {
+        if (isDeliveringMessages) {
+            return
+        }
+        
+        isDeliveringMessages = true
+        try {
+            while (hasListeners && bufferedMessages.isNotEmpty()) {
+                val event = bufferedMessages.poll() ?: break
+                synchronized(listeners) {
+                    ArrayList(listeners).forEach { listener ->
+                        try {
+                            listener(event)
+                        } catch (e: Exception) {
+                            // Log exception but do not interrupt processing
+                            LOG.warn("Error in event listener: ${e.message}", e)
+                        }
+                    }
+                }
+            }
+        } finally {
+            isDeliveringMessages = false
+        }
+    }
+}
+
+/**
+ * Event listener type alias
+ */
+typealias EventListener<T> = ((T) -> Unit) -> Disposable 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/ChunkStream.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/ChunkStream.kt
new file mode 100644
index 000000000..efaf5fee0
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/ChunkStream.kt
@@ -0,0 +1,130 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.ipc
+
+/**
+ * Chunk stream, used for buffering and processing binary data chunks
+ * Corresponds to ChunkStream in VSCode
+ */
+class ChunkStream {
+    private val chunks = mutableListOf<ByteArray>()
+    
+    /**
+     * Get total byte length of data in the stream
+     */
+    var byteLength: Int = 0
+        private set
+    
+    /**
+     * Accept a data chunk
+     * @param buff Data chunk
+     */
+    fun acceptChunk(buff: ByteArray) {
+        if (buff.isEmpty()) {
+            return
+        }
+        chunks.add(buff)
+        byteLength += buff.size
+    }
+    
+    /**
+     * Read specified number of bytes (removes data from stream)
+     * @param byteCount Number of bytes to read
+     * @return Data read
+     */
+    fun read(byteCount: Int): ByteArray {
+        return _read(byteCount, true)
+    }
+    
+    /**
+     * Peek specified number of bytes (does not remove data from stream)
+     * @param byteCount Number of bytes to peek
+     * @return Data peeked
+     */
+    fun peek(byteCount: Int): ByteArray {
+        return _read(byteCount, false)
+    }
+    
+    /**
+     * Internal read method
+     * @param byteCount Number of bytes to read
+     * @param advance Whether to remove data from stream
+     * @return Data read
+     */
+    private fun _read(byteCount: Int, advance: Boolean): ByteArray {
+        if (byteCount == 0) {
+            return ByteArray(0)
+        }
+        
+        if (byteCount > byteLength) {
+            throw IllegalArgumentException("Cannot read so many bytes!")
+        }
+        
+        if (chunks[0].size == byteCount) {
+            // Fast path, first chunk is exactly the data to return
+            val result = chunks[0]
+            if (advance) {
+                chunks.removeAt(0)
+                byteLength -= byteCount
+            }
+            return result
+        }
+        
+        if (chunks[0].size > byteCount) {
+            // Fast path, data to read is completely in the first chunk
+            val firstChunk = chunks[0]
+            val result = ByteArray(byteCount)
+            System.arraycopy(firstChunk, 0, result, 0, byteCount)
+            
+            if (advance) {
+                val remaining = ByteArray(firstChunk.size - byteCount)
+                System.arraycopy(firstChunk, byteCount, remaining, 0, remaining.size)
+                chunks[0] = remaining
+                byteLength -= byteCount
+            }
+            
+            return result
+        }
+        
+        // General path, need to span multiple chunks
+        val result = ByteArray(byteCount)
+        var resultOffset = 0
+        var chunkIndex = 0
+        var remainingBytes = byteCount
+        
+        while (remainingBytes > 0) {
+            val chunk = chunks[chunkIndex]
+            
+            if (chunk.size > remainingBytes) {
+                // Current chunk will not be fully read
+                System.arraycopy(chunk, 0, result, resultOffset, remainingBytes)
+                
+                if (advance) {
+                    val remaining = ByteArray(chunk.size - remainingBytes)
+                    System.arraycopy(chunk, remainingBytes, remaining, 0, remaining.size)
+                    chunks[chunkIndex] = remaining
+                    byteLength -= remainingBytes
+                }
+                
+                resultOffset += remainingBytes
+                remainingBytes = 0
+            } else {
+                // Current chunk will be fully read
+                System.arraycopy(chunk, 0, result, resultOffset, chunk.size)
+                resultOffset += chunk.size
+                remainingBytes -= chunk.size
+                
+                if (advance) {
+                    chunks.removeAt(chunkIndex)
+                    byteLength -= chunk.size
+                } else {
+                    chunkIndex++
+                }
+            }
+        }
+        
+        return result
+    }
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/ILoadEstimator.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/ILoadEstimator.kt
new file mode 100644
index 000000000..9f04b79cf
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/ILoadEstimator.kt
@@ -0,0 +1,17 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.ipc
+
+/**
+ * Load estimator interface
+ * Corresponds to ILoadEstimator in VSCode
+ */
+interface ILoadEstimator {
+    /**
+     * Check if currently in high load state
+     * @return true indicates high load
+     */
+    fun hasHighLoad(): Boolean
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/IMessagePassingProtocol.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/IMessagePassingProtocol.kt
new file mode 100644
index 000000000..a47c55763
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/IMessagePassingProtocol.kt
@@ -0,0 +1,40 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.ipc
+
+import com.intellij.openapi.Disposable
+import kotlinx.coroutines.CompletableDeferred
+
+/**
+ * Message passing protocol interface
+ * Corresponds to IMessagePassingProtocol in VSCode
+ */
+interface IMessagePassingProtocol : Disposable {
+    /**
+     * Send message
+     * @param buffer Message data to send
+     */
+    fun send(buffer: ByteArray)
+    
+    /**
+     * Add message receive listener
+     * @param listener Message receive listener
+     * @return Listener registration identifier for removing the listener
+     */
+    fun onMessage(listener: MessageListener): Disposable
+    
+    /**
+     * Add protocol close listener
+     * @param listener Close event listener
+     * @return Listener registration identifier for removing the listener
+     */
+    fun onDidDispose(listener: () -> Unit): Disposable
+    
+    /**
+     * Wait for all data to be sent
+     * @return Promise for async operation completion
+     */
+    suspend fun drain(): Unit
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/ISocket.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/ISocket.kt
new file mode 100644
index 000000000..1c6aa3c78
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/ISocket.kt
@@ -0,0 +1,77 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.ipc
+
+import com.intellij.openapi.Disposable
+
+/**
+ * Socket interface, abstracts underlying communication
+ * Corresponds to ISocket in VSCode
+ */
+interface ISocket : Disposable {
+   /**
+    * Add data receive listener
+    * @param listener Data receive listener
+    * @return Registration identifier for removing the listener
+    */
+    fun onData(listener: DataListener): Disposable
+    
+   /**
+    * Add close event listener
+    * @param listener Close event listener
+    * @return Registration identifier for removing the listener
+    */
+    fun onClose(listener: CloseListener): Disposable
+    
+   /**
+    * Add end event listener
+    * @param listener End event listener
+    * @return Registration identifier for removing the listener
+    */
+    fun onEnd(listener: () -> Unit): Disposable
+    
+   /**
+    * Send data
+    * @param buffer Data to send
+    */
+    fun write(buffer: ByteArray)
+    
+   /**
+    * End connection
+    */
+    fun end()
+    
+   /**
+    * Wait for all data to be sent
+    * @return Promise for async operation completion
+    */
+    suspend fun drain()
+    
+   /**
+    * Trace socket event (for debugging)
+    * @param type Event type
+    * @param data Event data
+    */
+    fun traceSocketEvent(type: SocketDiagnosticsEventType, data: Any? = null)
+
+   /**
+    * Start receiving data
+    */
+    fun startReceiving();
+    
+   /**
+    * Data receive listener
+    */
+    fun interface DataListener {
+        fun onData(data: ByteArray)
+    }
+    
+   /**
+    * Close event listener
+    */
+    fun interface CloseListener {
+        fun onClose(event: SocketCloseEvent)
+    }
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/LoadEstimator.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/LoadEstimator.kt
new file mode 100644
index 000000000..5991e573c
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/LoadEstimator.kt
@@ -0,0 +1,85 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.ipc
+
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.asExecutor
+import java.util.concurrent.TimeUnit
+import java.util.concurrent.atomic.AtomicReference
+import java.util.concurrent.ScheduledExecutorService
+import java.util.concurrent.Executors
+
+/**
+ * Load estimator
+ * Corresponds to LoadEstimator in VSCode
+ */
+class LoadEstimator private constructor() : ILoadEstimator {
+    private val lastRuns = LongArray(HISTORY_LENGTH)
+    private val scheduler: ScheduledExecutorService
+    
+    init {
+        val now = System.currentTimeMillis()
+        
+        for (i in 0 until HISTORY_LENGTH) {
+            lastRuns[i] = now - 1000L * i
+        }
+        
+        scheduler = Executors.newSingleThreadScheduledExecutor { r ->
+            Thread(r, "LoadEstimator").apply { isDaemon = true }
+        }
+        
+        scheduler.scheduleAtFixedRate({
+            for (i in HISTORY_LENGTH - 1 downTo 1) {
+                lastRuns[i] = lastRuns[i - 1]
+            }
+            lastRuns[0] = System.currentTimeMillis()
+        }, 0, 1000, TimeUnit.MILLISECONDS)
+    }
+    
+    /**
+     * Calculate current load estimate
+     * Returns an estimate number from 0 (low load) to 1 (high load)
+     * @return Load estimate value
+     */
+    private fun load(): Double {
+        val now = System.currentTimeMillis()
+        val historyLimit = (1 + HISTORY_LENGTH) * 1000L
+        var score = 0
+        
+        for (i in 0 until HISTORY_LENGTH) {
+            if (now - lastRuns[i] <= historyLimit) {
+                score++
+            }
+        }
+        
+        return 1.0 - score.toDouble() / HISTORY_LENGTH
+    }
+    
+    override fun hasHighLoad(): Boolean {
+        return load() >= 0.5
+    }
+    
+    companion object {
+        private const val HISTORY_LENGTH = 10
+        private val INSTANCE = AtomicReference<LoadEstimator>()
+        
+        /**
+         * Get singleton instance
+         * @return Load estimator instance
+         */
+        @JvmStatic
+        fun getInstance(): LoadEstimator {
+            var instance = INSTANCE.get()
+            if (instance == null) {
+                instance = LoadEstimator()
+                if (!INSTANCE.compareAndSet(null, instance)) {
+                    // Another thread has already set the instance
+                    instance = INSTANCE.get()
+                }
+            }
+            return instance
+        }
+    }
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/MessageListener.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/MessageListener.kt
new file mode 100644
index 000000000..2a565cae9
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/MessageListener.kt
@@ -0,0 +1,16 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.ipc
+
+/**
+ * Message listener
+ */
+fun interface MessageListener {
+   /**
+    * Handle received message
+    * @param data Received message data
+    */
+    fun onMessage(data: ByteArray)
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/NodeSocket.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/NodeSocket.kt
new file mode 100644
index 000000000..be01dd92f
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/NodeSocket.kt
@@ -0,0 +1,357 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.ipc
+
+import com.intellij.openapi.Disposable
+import com.intellij.openapi.diagnostic.Logger
+import java.io.IOException
+import java.net.Socket
+import java.net.SocketException
+import java.nio.channels.Channels
+import java.nio.channels.SocketChannel
+import java.util.concurrent.ConcurrentHashMap
+import java.util.concurrent.atomic.AtomicBoolean
+import kotlin.concurrent.thread
+
+/**
+ * NodeSocket implementation, wrapping Java Socket
+ * Corresponds to NodeSocket implementation in VSCode
+ */
+class NodeSocket : ISocket {
+
+    private val logger = Logger.getInstance(NodeSocket::class.java)
+    private val dataListeners = ConcurrentHashMap<ISocket.DataListener, Unit>()
+    private val closeListeners = ConcurrentHashMap<ISocket.CloseListener, Unit>()
+    private val endListeners = ConcurrentHashMap<() -> Unit, Unit>()
+    private val canWrite = AtomicBoolean(true)
+    private var receiveThread: Thread? = null
+    private val isDisposed = AtomicBoolean(false)
+    private var endTimeoutHandle: Thread? = null
+    private val socketEndTimeoutMs = 30_000L // 30 second timeout
+    private val debugLabel: String
+    private val input: java.io.InputStream
+    private val output: java.io.OutputStream
+    private val closeAction: () -> Unit
+    private val isSocket: Boolean
+    private val socket: Socket?
+    private val channel: SocketChannel?
+    private val writeAction: (ByteArray) -> Unit
+
+    // Compatible with Socket/SocketChannel
+    constructor(socket: Socket, debugLabel: String = "") {
+        this.input = socket.getInputStream()
+        this.output = socket.getOutputStream()
+        this.closeAction = { socket.close() }
+        this.debugLabel = debugLabel
+        this.isSocket = true
+        this.socket = socket
+        this.channel = null
+        this.writeAction = { buffer ->
+            output.write(buffer)
+            output.flush()
+        }
+        traceSocketEvent(SocketDiagnosticsEventType.CREATED, mapOf("type" to "NodeSocket-TCP"))
+    }
+
+    constructor(channel: SocketChannel, debugLabel: String = "") {
+        this.input = Channels.newInputStream(channel)
+        this.output = Channels.newOutputStream(channel)
+        this.closeAction = { channel.close() }
+        this.debugLabel = debugLabel
+        this.isSocket = false
+        this.socket = null
+        this.channel = channel
+        this.writeAction = { buffer ->
+            val byteBuffer = java.nio.ByteBuffer.wrap(buffer)
+            while (byteBuffer.hasRemaining()) {
+                channel.write(byteBuffer)
+            }
+        }
+        traceSocketEvent(SocketDiagnosticsEventType.CREATED, mapOf("type" to "NodeSocket-UDS"))
+    }
+
+    override fun startReceiving() {
+        if (receiveThread != null) return
+
+        receiveThread = thread(start = true, name = "NodeSocket-Receiver-$debugLabel") {
+            val buffer = ByteArray(8192) // 8KB buffer
+            try {
+                while (!isDisposed.get() && !Thread.currentThread().isInterrupted) {
+                    try {
+                        val bytesRead = input.read(buffer)
+                        if (bytesRead == -1) {
+                            // Stream ended
+                            logger.info("Socket[$debugLabel] Read EOF, triggering onEndReceived()")
+                            onEndReceived()
+                            break
+                        } else if (bytesRead > 0) {
+                            val data = buffer.copyOfRange(0, bytesRead)
+                            traceSocketEvent(SocketDiagnosticsEventType.READ, data)
+                            // Notify all data listeners
+                            dataListeners.keys.forEach { listener ->
+                                try {
+                                    listener.onData(data)
+                                } catch (e: Exception) {
+                                    logger.error("Socket[$debugLabel] Data listener processing exception", e)
+                                }
+                            }
+                        }
+                    } catch (e: IOException) {
+                        if (!isDisposed.get()) {
+                            // Only report errors when socket is not actively closed
+                            logger.error("Socket[$debugLabel] IO exception occurred while reading data", e)
+                            handleSocketError(e)
+                        }
+                        break
+                    }
+                }
+            } catch (e: Exception) {
+                if (!isDisposed.get()) {
+                    logger.error("Socket[$debugLabel] Unhandled exception in receive thread", e)
+                    handleSocketError(e)
+                }
+            } finally {
+                // Ensure Socket is closed
+                closeSocket(false)
+            }
+        }
+    }
+
+    private fun onEndReceived() {
+        traceSocketEvent(SocketDiagnosticsEventType.NODE_END_RECEIVED)
+        logger.info("Socket[$debugLabel] Received END event, disabling write operations")
+        canWrite.set(false)
+
+        // Notify all end listeners
+        endListeners.keys.forEach { listener ->
+            try {
+                listener.invoke()
+            } catch (e: Exception) {
+                logger.error("Socket[$debugLabel] END event listener processing exception", e)
+            }
+        }
+
+        // Set delayed close timer
+        logger.info("Socket[$debugLabel] Will execute delayed close after ${socketEndTimeoutMs}ms")
+        endTimeoutHandle = thread(start = true, name = "NodeSocket-EndTimeout-$debugLabel") {
+            try {
+                Thread.sleep(socketEndTimeoutMs)
+                if (!isDisposed.get()) {
+                    logger.info("Socket[$debugLabel] Executing delayed close")
+                    closeAction()
+                }
+            } catch (e: InterruptedException) {
+                logger.info("Socket[$debugLabel] Delayed close thread interrupted")
+            } catch (e: Exception) {
+                logger.error("Socket[$debugLabel] Delayed close processing exception", e)
+            }
+        }
+    }
+
+    private fun handleSocketError(error: Exception) {
+        // Filter out EPIPE errors, which are common connection disconnect errors
+        val errorCode = when {
+            error.message?.contains("Broken pipe") == true -> "EPIPE"
+            error.message?.contains("Connection reset") == true -> "ECONNRESET"
+            else -> null
+        }
+
+        traceSocketEvent(
+            SocketDiagnosticsEventType.ERROR, mapOf(
+                "code" to errorCode,
+                "message" to error.message
+            )
+        )
+
+        // EPIPE errors don't need additional handling, socket will close itself
+        if (errorCode != "EPIPE") {
+            logger.warn("Socket[$debugLabel] Error: ${error.message}", error)
+        }
+
+        // Close Socket
+        closeSocket(true)
+    }
+
+    private fun closeSocket(hadError: Boolean) {
+        if (isDisposed.get()) return
+        logger.info("Socket[$debugLabel] Closing connection, hadError=$hadError")
+        try {
+            if (!isClosed()) {
+                logger.info("Socket[$debugLabel] Closing connection")
+                closeAction()
+            }
+        } catch (e: Exception) {
+            logger.warn("Socket[$debugLabel] Exception occurred while closing connection", e)
+        }
+
+        // Stop end timeout thread
+        endTimeoutHandle?.interrupt()
+        endTimeoutHandle = null
+
+        canWrite.set(false)
+        traceSocketEvent(SocketDiagnosticsEventType.CLOSE, mapOf("hadError" to hadError))
+
+        // Notify all close listeners
+        val closeEvent = SocketCloseEvent.NodeSocketCloseEvent(hadError, null)
+        closeListeners.keys.forEach { listener ->
+            try {
+                listener.onClose(closeEvent)
+            } catch (e: Exception) {
+                logger.error("Socket[$debugLabel] Close listener processing exception", e)
+            }
+        }
+    }
+
+    override fun onData(listener: ISocket.DataListener): Disposable {
+        dataListeners[listener] = Unit
+        return Disposable {
+            dataListeners.remove(listener)
+        }
+    }
+
+    override fun onClose(listener: ISocket.CloseListener): Disposable {
+        closeListeners[listener] = Unit
+        return Disposable {
+            closeListeners.remove(listener)
+        }
+    }
+
+    override fun onEnd(listener: () -> Unit): Disposable {
+        endListeners[listener] = Unit
+        return Disposable {
+            endListeners.remove(listener)
+        }
+    }
+
+    override fun write(buffer: ByteArray) {
+        if (isDisposed.get()) {
+            logger.debug("Socket[$debugLabel] Write ignored: Socket disposed")
+            return
+        }
+        if (isClosed()) {
+            logger.info("Socket[$debugLabel] Write ignored: Socket closed")
+            return
+        }
+        if (!canWrite.get()) {
+            logger.info("Socket[$debugLabel] Write ignored: canWrite=false")
+            return
+        }
+
+        try {
+            traceSocketEvent(SocketDiagnosticsEventType.WRITE, buffer)
+            writeAction(buffer)
+        } catch (e: java.nio.channels.ClosedChannelException) {
+            logger.warn("Socket[$debugLabel] ClosedChannelException detected during write, connection closed")
+            handleSocketError(e)
+        } catch (e: IOException) {
+            logger.error("Socket[$debugLabel] IO exception occurred during write", e)
+            // Filter out EPIPE errors
+            if (e.message?.contains("Broken pipe") == true) {
+                logger.warn("Socket[$debugLabel] Broken pipe detected during write")
+                return
+            }
+            handleSocketError(e)
+        } catch (e: Exception) {
+            logger.error("Socket[$debugLabel] Unknown exception occurred during write", e)
+            handleSocketError(e)
+        }
+    }
+
+    override fun end() {
+        if (isDisposed.get() || isClosed()) {
+            return
+        }
+
+        traceSocketEvent(SocketDiagnosticsEventType.NODE_END_SENT)
+        logger.info("Socket[$debugLabel] Sending END signal")
+        try {
+            if (isSocket && socket != null) {
+                socket.shutdownOutput()
+            } else channel?.shutdownOutput()
+        } catch (e: Exception) {
+            logger.error("Socket[$debugLabel] Exception occurred while sending END signal", e)
+            handleSocketError(e)
+        }
+    }
+
+    override suspend fun drain(): Unit {
+        traceSocketEvent(SocketDiagnosticsEventType.NODE_DRAIN_BEGIN)
+
+        try {
+            // Send an empty packet to trigger flush (TCP will flush, UDS writes directly)
+            writeAction(ByteArray(0))
+        } catch (e: Exception) {
+            logger.error("Socket[$debugLabel] Exception occurred while executing drain", e)
+            handleSocketError(e)
+        }
+
+        traceSocketEvent(SocketDiagnosticsEventType.NODE_DRAIN_END)
+    }
+
+    override fun traceSocketEvent(type: SocketDiagnosticsEventType, data: Any?) {
+        // Actual debug log logic
+        if (logger.isDebugEnabled) {
+            logger.debug("Socket[$debugLabel] Event: $type, Data: $data")
+        }
+    }
+
+    override fun dispose() {
+        if (isDisposed.getAndSet(true)) {
+            return
+        }
+
+        traceSocketEvent(SocketDiagnosticsEventType.CLOSE)
+        logger.info("Socket[$debugLabel] Releasing resources")
+
+        // Clean up listeners
+        dataListeners.clear()
+        closeListeners.clear()
+        endListeners.clear()
+
+        // Close Socket
+        try {
+            if (!isClosed()) {
+                closeAction()
+            }
+        } catch (e: Exception) {
+            logger.warn("Socket[$debugLabel] Exception occurred while closing Socket during resource release", e)
+        }
+
+        // Interrupt threads
+        receiveThread?.interrupt()
+        receiveThread = null
+        endTimeoutHandle?.interrupt()
+        endTimeoutHandle = null
+
+        logger.info("Socket[$debugLabel] Resource release completed")
+    }
+
+    // State exposure method
+    fun isClosed(): Boolean {
+        return when {
+            socket != null -> socket.isClosed
+            channel != null -> !channel.isOpen
+            else -> true
+        }
+    }
+
+    fun isInputClosed(): Boolean {
+        return when {
+            socket != null -> socket.isClosed || socket.isInputShutdown
+            channel != null -> !channel.isOpen // NIO doesn't have direct input shutdown flag, can only use isOpen
+            else -> true
+        }
+    }
+
+    fun isOutputClosed(): Boolean {
+        return when {
+            socket != null -> socket.isClosed || socket.isOutputShutdown
+            channel != null -> !channel.isOpen // NIO doesn't have direct output shutdown flag, can only use isOpen
+            else -> true
+        }
+    }
+
+    fun isDisposed(): Boolean = isDisposed.get()
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/PersistentProtocol.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/PersistentProtocol.kt
new file mode 100644
index 000000000..84e4d890a
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/PersistentProtocol.kt
@@ -0,0 +1,443 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.ipc
+
+import com.intellij.openapi.Disposable
+import com.intellij.openapi.diagnostic.Logger
+import java.util.concurrent.LinkedBlockingQueue
+import java.util.*
+import java.util.concurrent.atomic.AtomicBoolean
+import java.util.concurrent.atomic.AtomicInteger
+import java.util.concurrent.atomic.AtomicLong
+
+/**
+ * Persistent protocol implementation
+ * Corresponds to PersistentProtocol in VSCode
+ */
+class PersistentProtocol(opts: PersistentProtocolOptions, msgListener: ((data: ByteArray)->Unit)? = null) : IMessagePassingProtocol {
+    companion object {
+        private val LOG = Logger.getInstance(PersistentProtocol::class.java)
+    }
+    
+    /**
+     * Persistent protocol configuration
+     */
+    class PersistentProtocolOptions(
+        val socket: ISocket,
+        val initialChunk: ByteArray? = null,
+        val loadEstimator: ILoadEstimator? = null,
+        val sendKeepAlive: Boolean = true
+    )
+    
+    private val _isReconnecting = AtomicBoolean(false)
+    private val _didSendDisconnect = AtomicBoolean(false)
+    
+    private val _outgoingUnackMsg = LinkedBlockingQueue<ProtocolMessage>()
+    private val _outgoingMsgId = AtomicInteger(0)
+    private val _outgoingAckId = AtomicInteger(0)
+    private var _outgoingAckTimeout: Timer? = null
+    
+    private val _incomingMsgId = AtomicInteger(0)
+    private val _incomingAckId = AtomicInteger(0)
+    private val _incomingMsgLastTime = AtomicLong(0L)
+    private var _incomingAckTimeout: Timer? = null
+    
+    private var _keepAliveInterval: Timer? = null
+    
+    private val _lastReplayRequestTime = AtomicLong(0L)
+    private val _lastSocketTimeoutTime = AtomicLong(System.currentTimeMillis())
+    
+    private var _socket: ISocket
+    private var _socketWriter: ProtocolWriter
+    private var _socketReader: ProtocolReader
+    private val _socketDisposables = mutableListOf<Disposable>()
+    
+    private val _loadEstimator: ILoadEstimator
+    private val _shouldSendKeepAlive: Boolean
+    
+    // Buffered event emitters
+    private val _onControlMessage = BufferedEmitter<ByteArray>()
+    private val _onMessage = BufferedEmitter<ByteArray>()
+    private val _onDidDispose = BufferedEmitter<Unit>()
+    private val _onSocketClose = BufferedEmitter<SocketCloseEvent>()
+    private val _onSocketTimeout = BufferedEmitter<SocketTimeoutEvent>()
+
+    private var _isDisposed = false
+    
+    /**
+     * Get unacknowledged message count
+     */
+    val unacknowledgedCount: Int
+        get() = _outgoingMsgId.get() - _outgoingAckId.get()
+    
+    /**
+     * Check if protocol has been disposed
+     */
+    fun isDisposed(): Boolean {
+        return _isDisposed
+    }
+    
+    init {
+        _loadEstimator = opts.loadEstimator ?: LoadEstimator.getInstance()
+        _shouldSendKeepAlive = opts.sendKeepAlive
+        _socket = opts.socket
+        
+        _socketWriter = ProtocolWriter(_socket)
+        _socketReader = ProtocolReader(_socket)
+        _socketDisposables.add(_socketReader.onMessage(this::_receiveMessage))
+        _socketDisposables.add(_socket.onClose { event -> _onSocketClose.fire(event) })
+        
+        if (opts.initialChunk != null) {
+            _socketReader.acceptChunk(opts.initialChunk)
+        }
+
+        if(msgListener != null){
+            this._onMessage.event { data ->
+                msgListener(data)
+            }
+        }
+
+        _socket.startReceiving()
+        
+        if (_shouldSendKeepAlive) {
+            _keepAliveInterval = Timer().apply {
+                scheduleAtFixedRate(object : TimerTask() {
+                    override fun run() {
+                        _sendKeepAlive()
+                    }
+                }, ProtocolConstants.KEEP_ALIVE_SEND_TIME.toLong(), ProtocolConstants.KEEP_ALIVE_SEND_TIME.toLong())
+            }
+        }
+    }
+    
+    override fun dispose() {
+        _outgoingAckTimeout?.cancel()
+        _outgoingAckTimeout = null
+        
+        _incomingAckTimeout?.cancel()
+        _incomingAckTimeout = null
+        
+        _keepAliveInterval?.cancel()
+        _keepAliveInterval = null
+        
+        _socketDisposables.forEach { it.dispose() }
+        _socketDisposables.clear()
+
+        _isDisposed = true
+    }
+    
+    override suspend fun drain() {
+        _socketWriter.drain()
+    }
+    
+    override fun send(buffer: ByteArray) {
+        val myId = _outgoingMsgId.incrementAndGet()
+        val currentIncomingAckId = _incomingMsgId.get()
+        _incomingAckId.set(currentIncomingAckId)
+        val msg = ProtocolMessage(ProtocolMessageType.REGULAR, myId, currentIncomingAckId, buffer)
+        _outgoingUnackMsg.add(msg)
+        if (!_isReconnecting.get()) {
+            _socketWriter.write(msg)
+            _recvAckCheck()
+        }
+    }
+    
+    override fun onMessage(listener: MessageListener): Disposable {
+        return _onMessage.event { data ->
+            listener.onMessage(data)
+        }
+    }
+    
+    override fun onDidDispose(listener: () -> Unit): Disposable {
+        return _onDidDispose.event { listener() }
+    }
+    
+    // Other public methods
+    fun onControlMessage(listener: (ByteArray) -> Unit): Disposable {
+        return _onControlMessage.event(listener)
+    }
+    
+    fun onSocketClose(listener: (SocketCloseEvent) -> Unit): Disposable {
+        return _onSocketClose.event(listener)
+    }
+    
+    fun onSocketTimeout(listener: (SocketTimeoutEvent) -> Unit): Disposable {
+        return _onSocketTimeout.event(listener)
+    }
+    
+    fun sendDisconnect() {
+        if (_didSendDisconnect.compareAndSet(false, true)) {
+            val msg = ProtocolMessage(ProtocolMessageType.DISCONNECT, 0, 0, ByteArray(0))
+            _socketWriter.write(msg)
+            _socketWriter.flush()
+        }
+    }
+    
+    fun sendPause() {
+        val msg = ProtocolMessage(ProtocolMessageType.PAUSE, 0, 0, ByteArray(0))
+        _socketWriter.write(msg)
+    }
+    
+    fun sendResume() {
+        val msg = ProtocolMessage(ProtocolMessageType.RESUME, 0, 0, ByteArray(0))
+        _socketWriter.write(msg)
+    }
+    
+    fun pauseSocketWriting() {
+        _socketWriter.pause()
+    }
+    
+    fun getSocket(): ISocket {
+        return _socket
+    }
+    
+    fun getMillisSinceLastIncomingData(): Long {
+        return System.currentTimeMillis() - _socketReader.getLastReadTime()
+    }
+    
+    fun beginAcceptReconnection(socket: ISocket, initialDataChunk: ByteArray?) {
+        _isReconnecting.set(true)
+        
+        _socketDisposables.forEach { it.dispose() }
+        _socketDisposables.clear()
+        _onControlMessage.flushBuffer()
+        _onSocketClose.flushBuffer()
+        _onSocketTimeout.flushBuffer()
+        _socket.dispose()
+        
+        _lastReplayRequestTime.set(0)
+        _lastSocketTimeoutTime.set(System.currentTimeMillis())
+        
+        _socket = socket
+        _socketWriter = ProtocolWriter(_socket)
+        _socketReader = ProtocolReader(_socket)
+        _socketDisposables.add(_socketReader.onMessage(this::_receiveMessage))
+        _socketDisposables.add(_socket.onClose { event -> _onSocketClose.fire(event) })
+        
+        if (initialDataChunk != null) {
+            _socketReader.acceptChunk(initialDataChunk)
+        }
+    }
+    
+    fun endAcceptReconnection() {
+        _isReconnecting.set(false)
+        
+        // After reconnection, let the other side know which messages have been received
+        val currentIncomingMsgId = _incomingMsgId.get()
+        _incomingAckId.set(currentIncomingMsgId)
+        val msg = ProtocolMessage(ProtocolMessageType.ACK, 0, currentIncomingMsgId, ByteArray(0))
+        _socketWriter.write(msg)
+        
+        // Resend all unacknowledged messages
+        val toSend = _outgoingUnackMsg.toTypedArray()
+        for (message in toSend) {
+            _socketWriter.write(message)
+        }
+        _recvAckCheck()
+    }
+    
+    fun acceptDisconnect() {
+        _onDidDispose.fire(Unit)
+    }
+    
+    private fun _receiveMessage(msg: ProtocolMessage) {
+        val currentOutgoingAckId = _outgoingAckId.get()
+        if (msg.ack > currentOutgoingAckId) {
+            _outgoingAckId.set(msg.ack)
+            while (_outgoingUnackMsg.isNotEmpty()) {
+                val first = _outgoingUnackMsg.peek()
+                if (first != null && first.id <= msg.ack) {
+                    _outgoingUnackMsg.poll()
+                } else {
+                    break
+                }
+            }
+        }
+        
+        when (msg.type) {
+            ProtocolMessageType.NONE -> {
+                // N/A
+            }
+            ProtocolMessageType.REGULAR -> {
+                val currentIncomingMsgId = _incomingMsgId.get()
+                if (msg.id > currentIncomingMsgId) {
+                    if (msg.id != currentIncomingMsgId + 1) {
+                        // Some messages are lost, request the other side to resend
+                        val now = System.currentTimeMillis()
+                        val lastReplayTime = _lastReplayRequestTime.get()
+                        if (now - lastReplayTime > 10000) {
+                            // Send replay request at most once every 10 seconds
+                            _lastReplayRequestTime.set(now)
+                            _socketWriter.write(ProtocolMessage(ProtocolMessageType.REPLAY_REQUEST, 0, 0, ByteArray(0)))
+                        }
+                    } else {
+                        _incomingMsgId.set(msg.id)
+                        _incomingMsgLastTime.set(System.currentTimeMillis())
+                        _sendAckCheck()
+                        _onMessage.fire(msg.data)
+                    }
+                }
+            }
+            ProtocolMessageType.CONTROL -> {
+                _onControlMessage.fire(msg.data)
+            }
+            ProtocolMessageType.ACK -> {
+                // Already handled above
+            }
+            ProtocolMessageType.DISCONNECT -> {
+                _onDidDispose.fire(Unit)
+            }
+            ProtocolMessageType.REPLAY_REQUEST -> {
+                // Resend all unacknowledged messages
+                val toSend = _outgoingUnackMsg.toTypedArray()
+                for (message in toSend) {
+                    _socketWriter.write(message)
+                }
+                _recvAckCheck()
+            }
+            ProtocolMessageType.PAUSE -> {
+                _socketWriter.pause()
+            }
+            ProtocolMessageType.RESUME -> {
+                _socketWriter.resume()
+            }
+            ProtocolMessageType.KEEP_ALIVE -> {
+                // No need to handle
+            }
+        }
+    }
+    
+    fun readEntireBuffer(): ByteArray {
+        return _socketReader.readEntireBuffer()
+    }
+    
+    fun flush() {
+        _socketWriter.flush()
+    }
+    
+    /**
+     * Send control message that doesn't participate in regular acknowledgment flow
+     */
+    fun sendControl(buffer: ByteArray) {
+        val msg = ProtocolMessage(ProtocolMessageType.CONTROL, 0, 0, buffer)
+        _socketWriter.write(msg)
+    }
+    
+    private fun _sendAckCheck() {
+        val currentIncomingMsgId = _incomingMsgId.get()
+        val currentIncomingAckId = _incomingAckId.get()
+        
+        if (currentIncomingMsgId <= currentIncomingAckId) {
+            // No messages need acknowledgment
+            return
+        }
+        
+        if (_incomingAckTimeout != null) {
+            // There will be a check in the near future
+            return
+        }
+        
+        val timeSinceLastIncomingMsg = System.currentTimeMillis() - _incomingMsgLastTime.get()
+        if (timeSinceLastIncomingMsg >= ProtocolConstants.ACKNOWLEDGE_TIME) {
+            // Enough time has passed since receiving this message,
+            // and there are no messages that need to be sent from our side during this period,
+            // so we will send a message containing only acknowledgment.
+            _sendAck()
+            return
+        }
+        
+        _incomingAckTimeout = Timer().apply {
+            schedule(object : TimerTask() {
+                override fun run() {
+                    _incomingAckTimeout = null
+                    _sendAckCheck()
+                }
+            }, ProtocolConstants.ACKNOWLEDGE_TIME - timeSinceLastIncomingMsg + 5)
+        }
+    }
+    
+    private fun _recvAckCheck() {
+        val currentOutgoingMsgId = _outgoingMsgId.get()
+        val currentOutgoingAckId = _outgoingAckId.get()
+        
+        if (currentOutgoingMsgId <= currentOutgoingAckId) {
+            // All messages have been acknowledged
+            return
+        }
+        
+        if (_outgoingAckTimeout != null) {
+            // There will be a check in the near future
+            return
+        }
+        
+        if (_isReconnecting.get()) {
+            // Don't trigger timeout during reconnection,
+            // because messages won't actually be written until `endAcceptReconnection`
+            return
+        }
+        
+        val oldestUnacknowledgedMsg = _outgoingUnackMsg.peek()!!
+        val timeSinceOldestUnacknowledgedMsg = System.currentTimeMillis() - oldestUnacknowledgedMsg.writtenTime
+        val timeSinceLastReceivedSomeData = System.currentTimeMillis() - _socketReader.getLastReadTime()
+        val timeSinceLastTimeout = System.currentTimeMillis() - _lastSocketTimeoutTime.get()
+        
+        if (timeSinceOldestUnacknowledgedMsg >= ProtocolConstants.TIMEOUT_TIME &&
+            timeSinceLastReceivedSomeData >= ProtocolConstants.TIMEOUT_TIME &&
+            timeSinceLastTimeout >= ProtocolConstants.TIMEOUT_TIME) {
+            
+            // It's been a long time since messages we sent were acknowledged,
+            // and it's also been a long time since we received any data
+            
+            // But this might be because the event loop is busy and can't read messages
+            if (!_loadEstimator.hasHighLoad()) {
+                // Drop socket
+                _lastSocketTimeoutTime.set(System.currentTimeMillis())
+                _onSocketTimeout.fire(SocketTimeoutEvent(
+                    _outgoingUnackMsg.size,
+                    timeSinceOldestUnacknowledgedMsg,
+                    timeSinceLastReceivedSomeData
+                ))
+                return
+            }
+        }
+        
+        val minimumTimeUntilTimeout = maxOf(
+            ProtocolConstants.TIMEOUT_TIME - timeSinceOldestUnacknowledgedMsg,
+            ProtocolConstants.TIMEOUT_TIME - timeSinceLastReceivedSomeData,
+            ProtocolConstants.TIMEOUT_TIME - timeSinceLastTimeout,
+            500
+        )
+        
+        _outgoingAckTimeout = Timer().apply {
+            schedule(object : TimerTask() {
+                override fun run() {
+                    _outgoingAckTimeout = null
+                    _recvAckCheck()
+                }
+            }, minimumTimeUntilTimeout)
+        }
+    }
+    
+    private fun _sendAck() {
+        val currentIncomingMsgId = _incomingMsgId.get()
+        val currentIncomingAckId = _incomingAckId.get()
+        
+        if (currentIncomingMsgId <= currentIncomingAckId) {
+            // No messages need acknowledgment
+            return
+        }
+        
+        _incomingAckId.set(currentIncomingMsgId)
+        val msg = ProtocolMessage(ProtocolMessageType.ACK, 0, currentIncomingMsgId, ByteArray(0))
+        _socketWriter.write(msg)
+    }
+    
+    private fun _sendKeepAlive() {
+        val currentIncomingMsgId = _incomingMsgId.get()
+        _incomingAckId.set(currentIncomingMsgId)
+        val msg = ProtocolMessage(ProtocolMessageType.KEEP_ALIVE, 0, currentIncomingMsgId, ByteArray(0))
+        _socketWriter.write(msg)
+    }
+}
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/ProtocolConstants.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/ProtocolConstants.kt
new file mode 100644
index 000000000..b01fd70d0
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/ProtocolConstants.kt
@@ -0,0 +1,42 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.ipc
+
+/**
+ * Protocol constants
+ * Corresponds to ProtocolConstants in VSCode
+ */
+object ProtocolConstants {
+    /**
+     * Message header length (bytes)
+     */
+    const val HEADER_LENGTH = 13
+    
+    /**
+     * Maximum delay time for sending acknowledgment messages (milliseconds)
+     */
+    const val ACKNOWLEDGE_TIME = 2000 // 2 seconds
+    
+    /**
+     * If a sent message has not been acknowledged beyond this time, and no server data has been received during this period,
+     * the connection is considered timed out
+     */
+    const val TIMEOUT_TIME = 20000 // 20 seconds
+    
+    /**
+     * If no reconnection occurs within this time range, the connection is considered permanently closed
+     */
+    const val RECONNECTION_GRACE_TIME = 3 * 60 * 60 * 1000 // 3 hours
+    
+    /**
+     * Maximum grace time between first and last reconnection
+     */
+    const val RECONNECTION_SHORT_GRACE_TIME = 5 * 60 * 1000 // 5 minutes
+    
+    /**
+     * Send a message at regular intervals to prevent the connection from being closed by the operating system
+     */
+    const val KEEP_ALIVE_SEND_TIME = 5000 // 5 seconds
+}
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/ProtocolMessage.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/ProtocolMessage.kt
new file mode 100644
index 000000000..4e1047c6f
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/ProtocolMessage.kt
@@ -0,0 +1,65 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.ipc
+
+/**
+ * Protocol message
+ * Corresponds to ProtocolMessage in VSCode
+ */
+class ProtocolMessage(
+    /**
+     * Message type
+     */
+    val type: ProtocolMessageType,
+    
+    /**
+     * Message ID
+     */
+    val id: Int,
+    
+    /**
+     * Acknowledgment ID
+     */
+    val ack: Int,
+    
+    /**
+     * Message data
+     */
+    val data: ByteArray = ByteArray(0)
+) {
+    /**
+     * Message write time (millisecond timestamp)
+     */
+    var writtenTime: Long = 0
+    
+    /**
+     * Get message size (bytes)
+     * @return Message size
+     */
+    val size: Int
+        get() = data.size
+    
+    override fun equals(other: Any?): Boolean {
+        if (this === other) return true
+        if (javaClass != other?.javaClass) return false
+        
+        other as ProtocolMessage
+        
+        if (type != other.type) return false
+        if (id != other.id) return false
+        if (ack != other.ack) return false
+        if (!data.contentEquals(other.data)) return false
+        
+        return true
+    }
+    
+    override fun hashCode(): Int {
+        var result = type.hashCode()
+        result = 31 * result + id
+        result = 31 * result + ack
+        result = 31 * result + data.contentHashCode()
+        return result
+    }
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/ProtocolMessageType.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/ProtocolMessageType.kt
new file mode 100644
index 000000000..24bdb6b7b
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/ProtocolMessageType.kt
@@ -0,0 +1,83 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.ipc
+
+/**
+ * Protocol message type
+ * Corresponds to ProtocolMessageType in VSCode
+ */
+enum class ProtocolMessageType(val value: Int) {
+    /**
+     * Undefined
+     */
+    NONE(0),
+    
+    /**
+     * Regular message
+     */
+    REGULAR(1),
+    
+    /**
+     * Control message
+     */
+    CONTROL(2),
+    
+    /**
+     * Acknowledgment message
+     */
+    ACK(3),
+    
+    /**
+     * Disconnect message
+     */
+    DISCONNECT(5),
+    
+    /**
+     * Replay request message
+     */
+    REPLAY_REQUEST(6),
+    
+    /**
+     * Pause message
+     */
+    PAUSE(7),
+    
+    /**
+     * Resume message
+     */
+    RESUME(8),
+    
+    /**
+     * Keep alive message
+     */
+    KEEP_ALIVE(9);
+    
+    /**
+     * Get string description of enum type
+     * @return String description
+     */
+    fun toTypeString(): String = when(this) {
+        NONE -> "None"
+        REGULAR -> "Regular"
+        CONTROL -> "Control"
+        ACK -> "Ack"
+        DISCONNECT -> "Disconnect"
+        REPLAY_REQUEST -> "ReplayRequest"
+        PAUSE -> "PauseWriting"
+        RESUME -> "ResumeWriting"
+        KEEP_ALIVE -> "KeepAlive"
+    }
+    
+    companion object {
+        /**
+         * Get corresponding enum by integer value
+         * @param value Integer value
+         * @return Corresponding enum, returns NONE if not found
+         */
+        fun fromValue(value: Int): ProtocolMessageType {
+            return values().find { it.value == value } ?: NONE
+        }
+    }
+}
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/ProtocolReader.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/ProtocolReader.kt
new file mode 100644
index 000000000..7262610f3
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/ProtocolReader.kt
@@ -0,0 +1,167 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.ipc
+
+import com.intellij.openapi.Disposable
+import com.intellij.openapi.diagnostic.Logger
+import com.intellij.openapi.diagnostic.logger
+import java.nio.ByteBuffer
+
+/**
+ * Protocol reader
+ * Corresponds to ProtocolReader in VSCode
+ */
+class ProtocolReader(private val socket: ISocket) : Disposable {
+    private var isDisposed = false
+    private val incomingData = ChunkStream()
+    private var lastReadTime = System.currentTimeMillis()
+    
+    private val messageListeners = mutableListOf<(ProtocolMessage) -> Unit>()
+    
+    // Read state
+    private val state = State()
+    
+    companion object {
+        private val LOG = Logger.getInstance(ProtocolReader::class.java)
+    }
+    
+    init {
+        socket.onData(this::acceptChunk)
+    }
+    
+    /**
+     * Add message listener
+     * @param listener Message listener
+     * @return Listener registration identifier for removing the listener
+     */
+    fun onMessage(listener: (ProtocolMessage) -> Unit): Disposable {
+        messageListeners.add(listener)
+        return Disposable { messageListeners.remove(listener) }
+    }
+    
+    /**
+     * Receive data chunk
+     * @param data Data chunk
+     */
+    fun acceptChunk(data: ByteArray) {
+        if (data.isEmpty()) {
+            return
+        }
+        lastReadTime = System.currentTimeMillis()
+        
+        incomingData.acceptChunk(data)
+        
+        while (incomingData.byteLength >= state.readLen) {
+            val buff = incomingData.read(state.readLen)
+            
+            if (state.readHead) {
+                // buff is message header
+                
+                // Parse message header
+                val buffer = ByteBuffer.wrap(buff)
+                val messageTypeByte = buffer.get(0)
+                val id = buffer.getInt(1)
+                val ack = buffer.getInt(5)
+                val messageSize = buffer.getInt(9)
+                
+                val messageType = ProtocolMessageType.fromValue(messageTypeByte.toInt())
+                
+                // Save new state => next time will read message body
+                state.readHead = false
+                state.readLen = messageSize
+                state.messageType = messageType
+                state.id = id
+                state.ack = ack
+                
+                socket.traceSocketEvent(
+                    SocketDiagnosticsEventType.PROTOCOL_HEADER_READ, 
+                    HeaderReadInfo(
+                        messageType.toTypeString(),
+                        id,
+                        ack,
+                        messageSize
+                    )
+                )
+            } else {
+                // buff is message body
+                val messageType = state.messageType
+                val id = state.id
+                val ack = state.ack
+                
+                // Save new state => next time will read message header
+                state.readHead = true
+                state.readLen = ProtocolConstants.HEADER_LENGTH
+                state.messageType = ProtocolMessageType.NONE
+                state.id = 0
+                state.ack = 0
+                
+                socket.traceSocketEvent(SocketDiagnosticsEventType.PROTOCOL_MESSAGE_READ, buff)
+                
+                val message = ProtocolMessage(messageType, id, ack, buff)
+                
+                // Notify listeners
+                ArrayList(messageListeners).forEach { listener ->
+                    try {
+                        listener(message)
+                    } catch (e: Exception) {
+                        // Log exception but do not interrupt processing
+                        LOG.warn("Error in message listener: ${e.message}", e)
+                    }
+                }
+                
+                if (isDisposed) {
+                    // Check if event listeners caused object to be disposed
+                    break
+                }
+            }
+        }
+    }
+    
+    /**
+     * Read entire buffer
+     * @return All data in the buffer
+     */
+    fun readEntireBuffer(): ByteArray {
+        return incomingData.read(incomingData.byteLength)
+    }
+    
+    /**
+     * Get last data read time
+     * @return Last read time (millisecond timestamp)
+     */
+    fun getLastReadTime(): Long {
+        return lastReadTime
+    }
+    
+    override fun dispose() {
+        isDisposed = true
+        messageListeners.clear()
+    }
+    
+    /**
+     * Read state
+     */
+    private class State {
+        var readHead = true
+        var readLen = ProtocolConstants.HEADER_LENGTH
+        var messageType = ProtocolMessageType.NONE
+        var id = 0
+        var ack = 0
+    }
+    
+    /**
+     * Message header read information (for debugging)
+     */
+    private data class HeaderReadInfo(
+        val messageType: String,
+        val id: Int,
+        val ack: Int,
+        val messageSize: Int
+    ) {
+        override fun toString(): String {
+            return "HeaderReadInfo{messageType='$messageType', id=$id, ack=$ack, messageSize=$messageSize}"
+        }
+    }
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/ProtocolWriter.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/ProtocolWriter.kt
new file mode 100644
index 000000000..7bcd53fda
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/ProtocolWriter.kt
@@ -0,0 +1,438 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.ipc
+
+import com.intellij.openapi.diagnostic.Logger
+import kotlinx.coroutines.CoroutineScope
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.Job
+import kotlinx.coroutines.delay
+import kotlinx.coroutines.launch
+import java.nio.ByteBuffer
+import java.util.TreeMap
+import java.util.concurrent.atomic.AtomicBoolean
+import java.util.concurrent.atomic.AtomicLong
+import java.util.concurrent.locks.ReentrantLock
+import kotlin.concurrent.withLock
+
+/**
+ * Protocol writer
+ * Corresponds to ProtocolWriter in VSCode, but enhanced with message ordering functionality
+ */
+class ProtocolWriter(
+    private val socket: ISocket,
+    private val enableLogging: Boolean = false // Add logging control variable
+) {
+    private val logger = Logger.getInstance(ProtocolWriter::class.java)
+    
+    // Core state variables
+    private val isDisposed = AtomicBoolean(false)
+    private val isPaused = AtomicBoolean(false)
+    private val lastWriteTime = AtomicLong(0)
+    
+    // Lock to protect message queue
+    private val queueLock = ReentrantLock()
+    
+    // Use TreeMap to sort by message ID
+    private val messageQueue = TreeMap<Int, MessagePackage>()
+    
+    // Special message queue (messages that don't need ordering, like ACK and priority messages)
+    private val specialMessageQueue = mutableListOf<MessagePackage>()
+    
+    // Next expected message ID
+    private var nextExpectedId = 1
+    
+    // Write scheduling state
+    private var isWriteScheduled = AtomicBoolean(false)
+    private var writeJob: Job? = null
+    
+    // Message blocking detection task
+    private var blockingDetectionJob: Job? = null
+    
+    // Coroutine scope
+    private val coroutineScope = CoroutineScope(Dispatchers.IO)
+    
+    init {
+        // Start message blocking detection task
+        startBlockingDetection()
+    }
+    
+    /**
+     * Start message blocking detection task
+     */
+    private fun startBlockingDetection() {
+        blockingDetectionJob = coroutineScope.launch {
+            while (!isDisposed.get()) {
+                try {
+                    delay(5000) // Check every 5 seconds
+                    checkMessageBlocking()
+                } catch (e: Exception) {
+                    if (!isDisposed.get()) {
+                        logWarn("Error in blocking detection: ${e.message}", e)
+                    }
+                    break
+                }
+            }
+        }
+    }
+    
+    /**
+     * Check message blocking situation
+     */
+    private fun checkMessageBlocking() {
+        if (isDisposed.get()) {
+            return
+        }
+        
+        queueLock.withLock {
+            // If message queue is not empty but doesn't contain the expected next ID, it indicates messages are blocked
+            if (messageQueue.isNotEmpty() && !messageQueue.containsKey(nextExpectedId)) {
+                val minId = messageQueue.firstKey()
+                val queueSize = messageQueue.size
+                val queueIds = messageQueue.keys.take(10).joinToString(", ") // Display first 10 IDs
+                
+                logWarn("Message blocking detected! " +
+                        "Expected next ID: $nextExpectedId, " +
+                        "Minimum ID in queue: $minId, " +
+                        "Queue size: $queueSize, " +
+                        "Queue IDs: [$queueIds${if (queueSize > 10) "..." else ""}]")
+                
+                // Check if there are consecutive ID segments that can be sent
+                val consecutiveIds = mutableListOf<Int>()
+                var currentId = minId
+                while (messageQueue.containsKey(currentId)) {
+                    consecutiveIds.add(currentId)
+                    currentId++
+                }
+                
+                if (consecutiveIds.isNotEmpty()) {
+                    logWarn("Consecutive IDs available from $minId: ${consecutiveIds.joinToString(", ")}")
+                }
+                
+                // Check missing ID ranges
+                if (minId > nextExpectedId) {
+                    logWarn("Missing message IDs: ${nextExpectedId} to ${minId - 1} (${minId - nextExpectedId} messages)")
+                }
+            }
+        }
+    }
+    
+    /**
+     * Log messages, output based on enableLogging
+     */
+    private fun logInfo(message: String) {
+        if (enableLogging) {
+            logger.info(message)
+        }
+    }
+    
+    private fun logDebug(message: String) {
+        if (enableLogging) {
+            logger.debug(message)
+        }
+    }
+    
+    private fun logWarn(message: String, throwable: Throwable? = null) {
+        if (enableLogging) {
+            logger.warn(message, throwable)
+        }
+    }
+    
+    private fun logError(message: String, throwable: Throwable? = null) {
+        if (enableLogging) {
+            logger.error(message, throwable)
+        }
+    }
+    
+    /**
+     * Message package structure
+     */
+    private data class MessagePackage(
+        val id: Int,
+        val data: ByteArray
+    ) {
+        override fun equals(other: Any?): Boolean {
+            if (this === other) return true
+            if (other !is MessagePackage) return false
+            if (id != other.id) return false
+            return data.contentEquals(other.data)
+        }
+        
+        override fun hashCode(): Int {
+            var result = id
+            result = 31 * result + data.contentHashCode()
+            return result
+        }
+    }
+    
+    companion object {
+        // Special message ID constants
+        private const val ACK_MESSAGE_ID = 0
+        private const val PRIORITY_MESSAGE_ID = -1
+    }
+    
+    /**
+     * Release resources
+     */
+    fun dispose() {
+        if (isDisposed.getAndSet(true)) {
+            return
+        }
+        
+        // Stop blocking detection task
+        blockingDetectionJob?.cancel()
+        blockingDetectionJob = null
+        
+        try {
+            flush()
+        } catch (e: Exception) {
+            logWarn("Error flushing protocol writer: ${e.message}", e)
+        }
+        
+        writeJob?.cancel()
+        logInfo("ProtocolWriter disposed")
+    }
+    
+    /**
+     * Wait for all data to be sent
+     */
+    suspend fun drain() {
+        flush()
+        return socket.drain()
+    }
+    
+    /**
+     * Flush and immediately send all sendable messages
+     */
+    fun flush() {
+        writeNow()
+    }
+    
+    /**
+     * Pause writing
+     */
+    fun pause() {
+        isPaused.set(true)
+    }
+    
+    /**
+     * Resume writing
+     */
+    fun resume() {
+        if (!isPaused.getAndSet(false)) {
+            return
+        }
+        
+        scheduleWriting()
+    }
+    
+    /**
+     * Write message
+     * @param msg Message to write
+     */
+    fun write(msg: ProtocolMessage) {
+        if (isDisposed.get()) {
+            // Resources released, ignore write request
+            logDebug("Ignoring write request, writer is disposed")
+            return
+        }
+
+        if(msg.type != ProtocolMessageType.KEEP_ALIVE) {
+            logInfo("Writing message: id=${msg.id}, ack=${msg.ack}, type=${msg.type}, data size=${msg.data.size}")
+        }
+        // Record write time
+        msg.writtenTime = System.currentTimeMillis()
+        lastWriteTime.set(System.currentTimeMillis())
+        
+        // Create message header
+        val headerBuffer = ByteBuffer.allocate(ProtocolConstants.HEADER_LENGTH)
+        headerBuffer.put(0, msg.type.value.toByte())
+        headerBuffer.putInt(1, msg.id)
+        headerBuffer.putInt(5, msg.ack)
+        headerBuffer.putInt(9, msg.data.size)
+        
+        val header = headerBuffer.array()
+        
+        // Trace event
+        socket.traceSocketEvent(
+            SocketDiagnosticsEventType.PROTOCOL_HEADER_WRITE,
+            mapOf(
+                "messageType" to msg.type.toTypeString(),
+                "id" to msg.id,
+                "ack" to msg.ack,
+                "messageSize" to msg.data.size
+            )
+        )
+        socket.traceSocketEvent(SocketDiagnosticsEventType.PROTOCOL_MESSAGE_WRITE, msg.data)
+        
+        // Merge header and data
+        val combined = ByteArray(header.size + msg.data.size)
+        System.arraycopy(header, 0, combined, 0, header.size)
+        System.arraycopy(msg.data, 0, combined, header.size, msg.data.size)
+        
+        // Add to queue and schedule writing
+        addMessageToQueue(msg.id, combined)
+    }
+    
+    /**
+     * Add message to queue
+     * @param id Message ID
+     * @param data Complete message data (header + content)
+     */
+    private fun addMessageToQueue(id: Int, data: ByteArray) {
+        val pkg = MessagePackage(id, data)
+        
+        queueLock.withLock {
+            // Special messages (ACK or priority messages) are directly added to special queue
+            if (id == ACK_MESSAGE_ID || id == PRIORITY_MESSAGE_ID) {
+                specialMessageQueue.add(pkg)
+                logDebug("Added special message to queue: id=$id")
+            } else {
+                // Regular messages are sorted by ID
+                messageQueue[id] = pkg
+                logDebug("Added message to sorted queue: id=$id, queue size=${messageQueue.size}")
+            }
+        }
+        
+        // Schedule writing
+        scheduleWriting()
+    }
+    
+    /**
+     * Schedule write task
+     */
+    private fun scheduleWriting() {
+        if (isPaused.get() || isDisposed.get()) {
+            return
+        }
+        
+        // If there's already a scheduled task, don't reschedule
+        if (!isWriteScheduled.compareAndSet(false, true)) {
+            return
+        }
+        
+        writeJob = coroutineScope.launch {
+            try {
+                // Write once immediately
+                writeNow()
+
+                // Reset scheduling state, allow subsequent scheduling
+                isWriteScheduled.set(false)
+
+                // Check if there is still data to write
+                if (hasDataToWrite()) {
+                    scheduleWriting()
+                }
+            } catch (e: Exception) {
+                logError("Error in write job: ${e.message}", e)
+                // Reset scheduling state, allow subsequent scheduling
+                isWriteScheduled.set(false)
+                // If the error is not because the socket is closed, try to reschedule
+                if (!isDisposed.get() && hasDataToWrite()) {
+                    delay(100) // Retry after a short delay
+                    scheduleWriting()
+                }
+            }
+        }
+    }
+    
+    /**
+     * Check if there is data to write
+     */
+    private fun hasDataToWrite(): Boolean {
+        return queueLock.withLock {
+            specialMessageQueue.isNotEmpty() || messageQueue.isNotEmpty()
+        }
+    }
+    
+    /**
+     * Immediately write all sendable messages
+     */
+    private fun writeNow() {
+        if (isPaused.get() || isDisposed.get()) {
+            return
+        }
+        
+        val dataToWrite = queueLock.withLock {
+            // If no messages, return directly
+            if (specialMessageQueue.isEmpty() && messageQueue.isEmpty()) {
+                return@withLock null
+            }
+            
+            // First check if there are special messages
+            var specialData: ByteArray? = null
+            if (specialMessageQueue.isNotEmpty()) {
+                specialData = specialMessageQueue.flatMap { it.data.toList() }.toByteArray()
+                specialMessageQueue.clear()
+            }
+            
+            // Check regular message queue
+            if (messageQueue.isEmpty()) {
+                return@withLock specialData
+            }
+            
+            // Find consecutive messages starting from nextExpectedId
+            val messagesToSend = mutableListOf<MessagePackage>()
+            var currentId = nextExpectedId
+            
+            // Strictly check if there's the expected next ID
+            // If the smallest ID in queue is greater than expected ID, don't send any messages, wait for missing messages
+            if (!messageQueue.containsKey(nextExpectedId)) {
+                // No expected next ID in queue, don't send any messages
+                logInfo("Waiting for message with ID=$nextExpectedId before sending later messages, messageQueue: ${messageQueue.size}")
+                return@withLock specialData
+            }
+            
+            // Collect consecutive messages
+            while (messageQueue.containsKey(currentId)) {
+                val message = messageQueue[currentId]!!
+                messagesToSend.add(message)
+                messageQueue.remove(currentId)
+                currentId++
+            }
+            
+            // Update next expected ID
+            if (messagesToSend.isNotEmpty()) {
+                nextExpectedId = currentId
+                logDebug("Next expected ID updated to $nextExpectedId")
+                
+                // Merge all message data
+                if (specialData != null) {
+                    return@withLock specialData + messagesToSend.flatMap { it.data.toList() }.toByteArray()
+                }else {
+                    return@withLock messagesToSend.flatMap { it.data.toList() }.toByteArray()
+                }
+            }
+            
+            // No consecutive messages to send
+            specialData
+        }
+        
+        // Write data (perform I/O outside the lock)
+        if (dataToWrite != null && dataToWrite.isNotEmpty()) {
+            try {
+                logInfo("Writing ${dataToWrite.size} bytes to socket")
+                socket.traceSocketEvent(
+                    SocketDiagnosticsEventType.PROTOCOL_WRITE,
+                    mapOf("byteLength" to dataToWrite.size)
+                )
+                socket.write(dataToWrite)
+            } catch (e: Exception) {
+                logError("Error writing to socket: ${e.message}", e)
+                if (!isDisposed.get()) {
+                    isDisposed.set(true)
+                }
+                throw e
+            }
+        }
+    }
+    
+    /**
+     * Get last write time
+     */
+    fun getLastWriteTime(): Long {
+        return lastWriteTime.get()
+    }
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/SocketCloseEvent.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/SocketCloseEvent.kt
new file mode 100644
index 000000000..f6388a017
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/SocketCloseEvent.kt
@@ -0,0 +1,76 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.ipc
+
+/**
+ * Socket close event
+ * Corresponds to SocketCloseEvent type in VSCode
+ */
+sealed interface SocketCloseEvent {
+    /**
+     * Get close event type
+     * @return Close event type
+     */
+    val type: SocketCloseEventType
+    
+    /**
+     * Socket close event type
+     */
+    enum class SocketCloseEventType {
+        /**
+         * Node socket close event
+         */
+        NODE_SOCKET_CLOSE_EVENT,
+        
+        /**
+         * WebSocket close event
+         */
+        WEB_SOCKET_CLOSE_EVENT
+    }
+    
+    /**
+     * Node Socket close event implementation
+     */
+    data class NodeSocketCloseEvent(
+        /**
+         * Whether socket had transmission error
+         */
+        val hadError: Boolean,
+        
+        /**
+         * Underlying error
+         */
+        val error: Throwable?
+    ) : SocketCloseEvent {
+        override val type: SocketCloseEventType = SocketCloseEventType.NODE_SOCKET_CLOSE_EVENT
+    }
+    
+    /**
+     * WebSocket close event implementation
+     */
+    data class WebSocketCloseEvent(
+        /**
+         * WebSocket close code
+         */
+        val code: Int,
+        
+        /**
+         * WebSocket close reason
+         */
+        val reason: String,
+        
+        /**
+         * Whether connection was cleanly closed
+         */
+        val wasClean: Boolean,
+        
+        /**
+         * Underlying event
+         */
+        val event: Any?
+    ) : SocketCloseEvent {
+        override val type: SocketCloseEventType = SocketCloseEventType.WEB_SOCKET_CLOSE_EVENT
+    }
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/SocketDiagnosticsEventType.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/SocketDiagnosticsEventType.kt
new file mode 100644
index 000000000..f23a09073
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/SocketDiagnosticsEventType.kt
@@ -0,0 +1,50 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.ipc
+
+/**
+ * Socket diagnostics event type
+ * Corresponds to SocketDiagnosticsEventType in VSCode
+ */
+enum class SocketDiagnosticsEventType {
+    CREATED,
+    READ,
+    WRITE,
+    OPEN,
+    ERROR,
+    CLOSE,
+    
+    BROWSER_WEB_SOCKET_BLOB_RECEIVED,
+    
+    NODE_END_RECEIVED,
+    NODE_END_SENT,
+    NODE_DRAIN_BEGIN,
+    NODE_DRAIN_END,
+    
+    ZLIB_INFLATE_ERROR,
+    ZLIB_INFLATE_DATA,
+    ZLIB_INFLATE_INITIAL_WRITE,
+    ZLIB_INFLATE_INITIAL_FLUSH_FIRED,
+    ZLIB_INFLATE_WRITE,
+    ZLIB_INFLATE_FLUSH_FIRED,
+    ZLIB_DEFLATE_ERROR,
+    ZLIB_DEFLATE_DATA,
+    ZLIB_DEFLATE_WRITE,
+    ZLIB_DEFLATE_FLUSH_FIRED,
+    
+    WEB_SOCKET_NODE_SOCKET_WRITE,
+    WEB_SOCKET_NODE_SOCKET_PEEKED_HEADER,
+    WEB_SOCKET_NODE_SOCKET_READ_HEADER,
+    WEB_SOCKET_NODE_SOCKET_READ_DATA,
+    WEB_SOCKET_NODE_SOCKET_UNMASKED_DATA,
+    WEB_SOCKET_NODE_SOCKET_DRAIN_BEGIN,
+    WEB_SOCKET_NODE_SOCKET_DRAIN_END,
+    
+    PROTOCOL_HEADER_READ,
+    PROTOCOL_MESSAGE_READ,
+    PROTOCOL_HEADER_WRITE,
+    PROTOCOL_MESSAGE_WRITE,
+    PROTOCOL_WRITE
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/SocketTimeoutEvent.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/SocketTimeoutEvent.kt
new file mode 100644
index 000000000..ae01016fa
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/SocketTimeoutEvent.kt
@@ -0,0 +1,26 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.ipc
+
+/**
+ * Socket timeout event
+ * Corresponds to SocketTimeoutEvent in VSCode
+ */
+data class SocketTimeoutEvent(
+    /**
+     * Unacknowledged message count
+     */
+    val unacknowledgedMsgCount: Int,
+    
+    /**
+     * Time since oldest unacknowledged message (milliseconds)
+     */
+    val timeSinceOldestUnacknowledgedMsg: Long,
+    
+    /**
+     * Time since last received some data (milliseconds)
+     */
+    val timeSinceLastReceivedSomeData: Long
+) 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/IRPCProtocol.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/IRPCProtocol.kt
new file mode 100644
index 000000000..caedb8773
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/IRPCProtocol.kt
@@ -0,0 +1,44 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.ipc.proxy
+
+import com.intellij.openapi.Disposable
+
+/**
+ * RPC protocol interface
+ * Corresponds to IRPCProtocol in VSCode
+ */
+interface IRPCProtocol : Disposable {
+    /**
+     * Current responsive state
+     */
+    val responsiveState: ResponsiveState
+    
+    /**
+     * Get proxy object
+     * @param identifier Proxy identifier
+     * @return Proxy object
+     */
+    fun <T> getProxy(identifier: ProxyIdentifier<T>): T
+
+    /**
+     * Set local object instance
+     * @param identifier Proxy identifier
+     * @param instance Instance object
+     * @return Instance object
+     */
+    fun <T, R : T> set(identifier: ProxyIdentifier<T>, instance: R): R
+
+    /**
+     * Assert identifiers are registered
+     * @param identifiers List of proxy identifiers
+     */
+    fun assertRegistered(identifiers: List<ProxyIdentifier<*>>)
+
+    /**
+     * Wait for the write buffer (if any) to become empty
+     */
+    suspend fun drain()
+}
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/LazyPromise.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/LazyPromise.kt
new file mode 100644
index 000000000..3eb5bc34e
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/LazyPromise.kt
@@ -0,0 +1,45 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.ipc.proxy
+
+import kotlinx.coroutines.CompletableDeferred
+
+/**
+ * Lazy Promise implementation
+ * Corresponds to LazyPromise in VSCode
+ */
+open class LazyPromise : CompletableDeferred<Any?> by CompletableDeferred() {
+    /**
+     * Resolve Promise successfully
+     * @param value Result value
+     */
+    fun resolveOk(value: Any?) {
+        complete(value)
+    }
+
+    /**
+     * Reject Promise
+     * @param err Error object
+     */
+    fun resolveErr(err: Throwable) {
+        completeExceptionally(err)
+    }
+}
+
+/**
+ * Canceled Lazy Promise implementation
+ * Corresponds to CanceledLazyPromise in VSCode
+ */
+class CanceledLazyPromise : LazyPromise() {
+    init {
+        // Immediately complete with cancellation exception
+        completeExceptionally(CanceledException())
+    }
+}
+
+/**
+ * Cancellation exception
+ */
+class CanceledException : Exception("Operation cancelled")
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/MessageBuffer.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/MessageBuffer.kt
new file mode 100644
index 000000000..4b449fbe1
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/MessageBuffer.kt
@@ -0,0 +1,335 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.ipc.proxy
+
+import java.nio.ByteBuffer
+import java.nio.ByteOrder
+
+/**
+ * Argument type enum
+ * Corresponds to ArgType in VSCode
+ */
+enum class ArgType(val value: Int) {
+    /**
+     * String type
+     */
+    String(1),
+
+    /**
+     * Binary buffer type
+     */
+    VSBuffer(2),
+
+    /**
+     * Serialized object with buffers type
+     */
+    SerializedObjectWithBuffers(3),
+
+    /**
+     * Undefined type
+     */
+    Undefined(4);
+
+    companion object {
+        /**
+         * Get type by value
+         */
+        fun fromValue(value: Int): ArgType? = values().find { it.value == value }
+    }
+}
+
+/**
+ * Mixed argument type
+ */
+sealed class MixedArg {
+    /**
+     * String argument
+     */
+    data class StringArg(val value: ByteArray) : MixedArg()
+
+    /**
+     * Binary buffer argument
+     */
+    data class VSBufferArg(val value: ByteArray) : MixedArg()
+
+    /**
+     * Serialized object with buffers argument
+     */
+    data class SerializedObjectWithBuffersArg(val value: ByteArray, val buffers: List<ByteArray>) : MixedArg()
+
+    /**
+     * Undefined argument
+     */
+    object UndefinedArg : MixedArg()
+}
+
+/**
+ * Message buffer
+ * Corresponds to MessageBuffer in VSCode
+ */
+class MessageBuffer private constructor(
+    private val buffer: ByteBuffer
+) {
+    companion object {
+        /**
+         * Allocate message buffer of specified size
+         */
+        fun alloc(type: MessageType, req: Int, messageSize: Int): MessageBuffer {
+            val totalSize = messageSize + 1 /* type */ + 4 /* req */
+            val buffer = ByteBuffer.allocate(totalSize).order(ByteOrder.BIG_ENDIAN)
+            val result = MessageBuffer(buffer)
+            result.writeUInt8(type.value)
+            result.writeUInt32(req)
+            return result
+        }
+
+        /**
+         * Read message buffer from byte array
+         */
+        fun read(buff: ByteArray, offset: Int): MessageBuffer {
+            val buffer = ByteBuffer.wrap(buff).order(ByteOrder.BIG_ENDIAN)
+            buffer.position(offset)
+            return MessageBuffer(buffer)
+        }
+
+        /**
+         * UInt8 size
+         */
+        const val sizeUInt8: Int = 1
+
+        /**
+         * UInt32 size
+         */
+        const val sizeUInt32: Int = 4
+
+        /**
+         * Calculate short string size
+         */
+        fun sizeShortString(str: ByteArray): Int {
+            return sizeUInt8 /* string length */ + str.size /* actual string */
+        }
+
+        /**
+         * Calculate long string size
+         */
+        fun sizeLongString(str: ByteArray): Int {
+            return sizeUInt32 /* string length */ + str.size /* actual string */
+        }
+
+        /**
+         * Calculate binary buffer size
+         */
+        fun sizeVSBuffer(buff: ByteArray): Int {
+            return sizeUInt32 /* buffer length */ + buff.size /* actual buffer */
+        }
+
+        /**
+         * Calculate mixed array size
+         */
+        fun sizeMixedArray(arr: List<MixedArg>): Int {
+            var size = 0
+            size += 1 // arr length
+            for (el in arr) {
+                size += 1 // arg type
+                when (el) {
+                    is MixedArg.StringArg ->
+                        size += sizeLongString(el.value)
+                    is MixedArg.VSBufferArg ->
+                        size += sizeVSBuffer(el.value)
+                    is MixedArg.SerializedObjectWithBuffersArg -> {
+                        size += sizeUInt32 // buffer count
+                        size += sizeLongString(el.value)
+                        for (buffer in el.buffers) {
+                            size += sizeVSBuffer(buffer)
+                        }
+                    }
+                    is MixedArg.UndefinedArg ->
+                        // empty...
+                        Unit
+                }
+            }
+            return size
+        }
+    }
+
+    /**
+     * Get underlying buffer
+     */
+    val bytes: ByteArray
+        get() = buffer.array()
+
+    /**
+     * Get buffer size
+     */
+    val byteLength: Int
+        get() = buffer.array().size
+
+    /**
+     * Write UInt8
+     */
+    fun writeUInt8(n: Int) {
+        buffer.put(n.toByte())
+    }
+
+    /**
+     * Read UInt8
+     */
+    fun readUInt8(): Int {
+        return buffer.get().toInt() and 0xFF
+    }
+
+    /**
+     * Write UInt32
+     */
+    fun writeUInt32(n: Int) {
+        buffer.putInt(n)
+    }
+
+    /**
+     * Read UInt32
+     */
+    fun readUInt32(): Int {
+        return buffer.getInt()
+    }
+
+    /**
+     * Write short string
+     */
+    fun writeShortString(str: ByteArray) {
+        buffer.put(str.size.toByte())
+        buffer.put(str)
+    }
+
+    /**
+     * Read short string
+     */
+    fun readShortString(): String {
+        val strByteLength = buffer.get().toInt() and 0xFF
+        val strBuff = ByteArray(strByteLength)
+        buffer.get(strBuff)
+        return String(strBuff)
+    }
+
+    /**
+     * Write long string
+     */
+    fun writeLongString(str: ByteArray) {
+        buffer.putInt(str.size)
+        buffer.put(str)
+    }
+
+    /**
+     * Read long string
+     */
+    fun readLongString(): String {
+        val strByteLength = buffer.getInt()
+        val strBuff = ByteArray(strByteLength)
+        buffer.get(strBuff)
+        return String(strBuff)
+    }
+
+    /**
+     * Write buffer
+     */
+    fun writeBuffer(buff: ByteArray) {
+        buffer.putInt(buff.size)
+        buffer.put(buff)
+    }
+
+    /**
+     * Write VSBuffer
+     */
+    fun writeVSBuffer(buff: ByteArray) {
+        buffer.putInt(buff.size)
+        buffer.put(buff)
+    }
+
+    /**
+     * Read VSBuffer
+     */
+    fun readVSBuffer(): ByteArray {
+        val buffLength = buffer.getInt()
+        val buff = ByteArray(buffLength)
+        buffer.get(buff)
+        return buff
+    }
+
+    /**
+     * Write mixed array
+     */
+    fun writeMixedArray(arr: List<MixedArg>) {
+        buffer.put(arr.size.toByte())
+        for (el in arr) {
+            when (el) {
+                is MixedArg.StringArg -> {
+                    writeUInt8(ArgType.String.value)
+                    writeLongString(el.value)
+                }
+                is MixedArg.VSBufferArg -> {
+                    writeUInt8(ArgType.VSBuffer.value)
+                    writeVSBuffer(el.value)
+                }
+                is MixedArg.SerializedObjectWithBuffersArg -> {
+                    writeUInt8(ArgType.SerializedObjectWithBuffers.value)
+                    writeUInt32(el.buffers.size)
+                    writeLongString(el.value)
+                    for (buffer in el.buffers) {
+                        writeBuffer(buffer)
+                    }
+                }
+                is MixedArg.UndefinedArg -> {
+                    writeUInt8(ArgType.Undefined.value)
+                }
+            }
+        }
+    }
+
+    /**
+     * Read mixed array
+     */
+    fun readMixedArray(): List<Any?> {
+        val arrLen = readUInt8()
+        val arr = ArrayList<Any?>(arrLen)
+        
+        for (i in 0 until arrLen) {
+            val argType = ArgType.fromValue(readUInt8()) ?: ArgType.Undefined
+            when (argType) {
+                ArgType.String -> {
+                    arr.add(readLongString())
+                }
+                ArgType.VSBuffer -> {
+                    arr.add(readVSBuffer())
+                }
+                ArgType.SerializedObjectWithBuffers -> {
+                    val bufferCount = readUInt32()
+                    val jsonString = readLongString()
+                    val buffers = ArrayList<ByteArray>(bufferCount)
+                    for (j in 0 until bufferCount) {
+                        buffers.add(readVSBuffer())
+                    }
+                    arr.add(SerializableObjectWithBuffers(parseJsonAndRestoreBufferRefs(jsonString, buffers, null)))
+                }
+                ArgType.Undefined -> {
+                    arr.add(null)
+                }
+            }
+        }
+        return arr
+    }
+}
+
+/**
+ * Parse JSON and restore buffer references
+ * Corresponds to parseJsonAndRestoreBufferRefs in VSCode
+ */
+fun parseJsonAndRestoreBufferRefs(
+    jsonString: String,
+    buffers: List<ByteArray>,
+    uriTransformer: ((String, Any?) -> Any?)? = null
+): Any {
+    // In actual project, should implement more complete functionality
+    // Need to parse JSON string, restore buffer references, and apply URI transformation
+    return jsonString
+}
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/MessageIO.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/MessageIO.kt
new file mode 100644
index 000000000..21424de98
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/MessageIO.kt
@@ -0,0 +1,463 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.ipc.proxy
+
+import com.google.gson.Gson
+import com.google.gson.reflect.TypeToken
+import java.lang.Exception
+
+ // Symbol name for buffer reference during serialization
+private const val REF_SYMBOL_NAME = "\$\$ref\$\$"
+
+// Undefined reference
+private val UNDEFINED_REF = mapOf(REF_SYMBOL_NAME to -1)
+
+/**
+ * JSON string with buffer references
+ */
+data class StringifiedJsonWithBufferRefs(
+    val jsonString: String,
+    val referencedBuffers: List<ByteArray>
+) {
+    // data class auto-generates component1() and component2() functions, supports destructuring
+}
+
+/**
+ * Serialize JSON to string with buffer references
+ */
+fun stringifyJsonWithBufferRefs(obj: Any?, replacer: ((String, Any?) -> Any?)? = null, useSafeStringify: Boolean = false): StringifiedJsonWithBufferRefs {
+    val foundBuffers = mutableListOf<ByteArray>()
+    
+    // Process object recursively, identify and replace buffers
+    fun processObject(value: Any?): Any? {
+        return when (value) {
+            null -> null
+            is ByteArray -> {
+                val bufferIndex = foundBuffers.size
+                foundBuffers.add(value)
+                mapOf(REF_SYMBOL_NAME to bufferIndex)
+            }
+            is Map<*, *> -> {
+                val result = mutableMapOf<String, Any?>()
+                value.forEach { (k, v) ->
+                    val key = k.toString()
+                    val processedValue = processObject(v)
+                    val finalValue = replacer?.invoke(key, processedValue) ?: processedValue
+                    result[key] = finalValue
+                }
+                result
+            }
+            is List<*> -> {
+                value.map { processObject(it) }
+            }
+            is Array<*> -> {
+                value.map { processObject(it) }
+            }
+            is SerializableObjectWithBuffers<*> -> {
+                // Process serializable object
+                processObject(value.value)
+            }
+            else -> {
+                // If it is other basic types, return directly
+                value
+            }
+        }
+    }
+    
+    // Process object, collect buffers
+    val processedObj = processObject(obj)
+    
+        // Use GSON for serialization
+        val gson = Gson()
+    val serialized = try {
+        gson.toJson(processedObj)
+    } catch (e: Exception) {
+        if (useSafeStringify) "null" else throw e
+    }
+    
+    return StringifiedJsonWithBufferRefs(serialized, foundBuffers)
+}
+
+/**
+ * Request argument serialization type
+ */
+sealed class SerializedRequestArguments {
+    /**
+     * Simple type argument
+     */
+    data class Simple(val args: String) : SerializedRequestArguments(){
+        override fun toString(): String {
+            return args
+        }
+    }
+    
+    /**
+     * Mixed type argument
+     */
+    data class Mixed(val args: List<MixedArg>) : SerializedRequestArguments(){
+        override fun toString(): String {
+            return args.joinToString { "\n" }
+        }
+    }
+}
+
+/**
+ * Message IO utility class
+ * Corresponds to MessageIO in VSCode
+ */
+object MessageIO {
+    /**
+     * Check whether to use mixed argument serialization
+     */
+    private fun useMixedArgSerialization(arr: List<Any?>): Boolean {
+        for (arg in arr) {
+            if (arg is ByteArray || arg is SerializableObjectWithBuffers<*> || arg == null) {
+                return true
+            }
+        }
+        return false
+    }
+    
+    /**
+     * Serialize request arguments
+     */
+    fun serializeRequestArguments(args: List<Any?>, replacer: ((String, Any?) -> Any?)? = null): SerializedRequestArguments {
+        if (useMixedArgSerialization(args)) {
+            val massagedArgs = mutableListOf<MixedArg>()
+            for (i in args.indices) {
+                val arg = args[i]
+                when {
+                    arg is ByteArray ->
+                        massagedArgs.add(MixedArg.VSBufferArg(arg))
+                    arg == null ->
+                        massagedArgs.add(MixedArg.UndefinedArg)
+                    arg is SerializableObjectWithBuffers<*> -> {
+                        val result = stringifyJsonWithBufferRefs(arg.value, replacer)
+                        massagedArgs.add(MixedArg.SerializedObjectWithBuffersArg(
+                            result.jsonString.toByteArray(),
+                            result.referencedBuffers
+                        ))
+                    }
+                    else -> {
+                        val gson = Gson()
+                        massagedArgs.add(MixedArg.StringArg(gson.toJson(arg).toByteArray()))
+                    }
+                }
+            }
+            return SerializedRequestArguments.Mixed(massagedArgs)
+        }
+        
+        val gson = Gson()
+        return SerializedRequestArguments.Simple(gson.toJson(args))
+    }
+    
+    /**
+     * Serialize request
+     */
+    fun serializeRequest(
+        req: Int,
+        rpcId: Int,
+        method: String,
+        serializedArgs: SerializedRequestArguments,
+        usesCancellationToken: Boolean
+    ): ByteArray {
+        return when (serializedArgs) {
+            is SerializedRequestArguments.Simple ->
+                requestJSONArgs(req, rpcId, method, serializedArgs.args, usesCancellationToken)
+            is SerializedRequestArguments.Mixed ->
+                requestMixedArgs(req, rpcId, method, serializedArgs.args, usesCancellationToken)
+        }
+    }
+    
+    /**
+     * Serialize JSON argument request
+     */
+    private fun requestJSONArgs(
+        req: Int,
+        rpcId: Int,
+        method: String,
+        args: String,
+        usesCancellationToken: Boolean
+    ): ByteArray {
+        val methodBuff = method.toByteArray()
+        val argsBuff = args.toByteArray()
+        
+        var len = 0
+        len += MessageBuffer.sizeUInt8 // use constant directly, not function call
+        len += MessageBuffer.sizeShortString(methodBuff)
+        len += MessageBuffer.sizeLongString(argsBuff)
+        
+        val messageType = if (usesCancellationToken)
+            MessageType.RequestJSONArgsWithCancellation
+        else
+            MessageType.RequestJSONArgs
+            
+        val result = MessageBuffer.alloc(messageType, req, len)
+        result.writeUInt8(rpcId)
+        result.writeShortString(methodBuff)
+        result.writeLongString(argsBuff)
+        return result.bytes
+    }
+    
+    /**
+     * Deserialize JSON argument request
+     */
+    fun deserializeRequestJSONArgs(buff: MessageBuffer): Triple<Int, String, List<Any?>> {
+        val rpcId = buff.readUInt8()
+        var method = buff.readShortString()
+        if (method.startsWith("\$")) {
+            method = method.substring(1)
+        }
+        val argsJson = buff.readLongString()
+        
+        val gson = Gson()
+        val listType = object : TypeToken<List<Any?>>() {}.type
+        val args = gson.fromJson<List<Any?>>(argsJson, listType)
+        
+        return Triple(rpcId, method, args)
+    }
+    
+    /**
+     * Serialize mixed argument request
+     */
+    private fun requestMixedArgs(
+        req: Int,
+        rpcId: Int,
+        method: String,
+        args: List<MixedArg>,
+        usesCancellationToken: Boolean
+    ): ByteArray {
+        val methodBuff = method.toByteArray()
+        
+        var len = 0
+        len += MessageBuffer.sizeUInt8 // use constant directly, not function call
+        len += MessageBuffer.sizeShortString(methodBuff)
+        len += MessageBuffer.sizeMixedArray(args)
+        
+        val messageType = if (usesCancellationToken)
+            MessageType.RequestMixedArgsWithCancellation
+        else
+            MessageType.RequestMixedArgs
+            
+        val result = MessageBuffer.alloc(messageType, req, len)
+        result.writeUInt8(rpcId)
+        result.writeShortString(methodBuff)
+        result.writeMixedArray(args)
+        return result.bytes
+    }
+    
+    /**
+     * Deserialize mixed argument request
+     */
+    fun deserializeRequestMixedArgs(buff: MessageBuffer): Triple<Int, String, List<Any?>> {
+        val rpcId = buff.readUInt8()
+        var method = buff.readShortString()
+        if (method.startsWith("\$")) {
+            method = method.substring(1)
+        }
+        val rawArgs = buff.readMixedArray()
+        val args = rawArgs.mapIndexed { _, rawArg ->
+            when (rawArg) {
+                is String -> {
+                    val gson = Gson()
+                    gson.fromJson(rawArg, Any::class.java)
+                }
+                else -> rawArg
+            }
+        }
+        
+        return Triple(rpcId, method, args)
+    }
+    
+    /**
+     * Serialize acknowledged message
+     */
+    fun serializeAcknowledged(req: Int): ByteArray {
+        return MessageBuffer.alloc(MessageType.Acknowledged, req, 0).bytes
+    }
+    
+    /**
+     * Serialize cancel message
+     */
+    fun serializeCancel(req: Int): ByteArray {
+        return MessageBuffer.alloc(MessageType.Cancel, req, 0).bytes
+    }
+    
+    /**
+     * Serialize OK reply
+     */
+    fun serializeReplyOK(req: Int, res: Any?, replacer: ((String, Any?) -> Any?)? = null): ByteArray {
+        return when {
+            res == null -> serializeReplyOKEmpty(req)
+            res is ByteArray -> serializeReplyOKVSBuffer(req, res)
+            res is SerializableObjectWithBuffers<*> -> {
+                val result = stringifyJsonWithBufferRefs(res.value, replacer, true)
+                serializeReplyOKJSONWithBuffers(req, result.jsonString, result.referencedBuffers)
+            }
+            else -> {
+                val gson = Gson()
+                val jsonStr = try {
+                    gson.toJson(res)
+                } catch (e: Exception) {
+                    "null"
+                }
+                serializeReplyOKJSON(req, jsonStr)
+            }
+        }
+    }
+    
+    /**
+     * Serialize empty OK reply
+     */
+    private fun serializeReplyOKEmpty(req: Int): ByteArray {
+        return MessageBuffer.alloc(MessageType.ReplyOKEmpty, req, 0).bytes
+    }
+    
+    /**
+     * Serialize OK reply with binary buffer
+     */
+    private fun serializeReplyOKVSBuffer(req: Int, res: ByteArray): ByteArray {
+        var len = 0
+        len += MessageBuffer.sizeVSBuffer(res)
+        
+        val result = MessageBuffer.alloc(MessageType.ReplyOKVSBuffer, req, len)
+        result.writeVSBuffer(res)
+        return result.bytes
+    }
+    
+    /**
+     * Deserialize OK reply with binary buffer
+     */
+    fun deserializeReplyOKVSBuffer(buff: MessageBuffer): ByteArray {
+        return buff.readVSBuffer()
+    }
+    
+    /**
+     * Serialize OK reply with JSON
+     */
+    private fun serializeReplyOKJSON(req: Int, res: String): ByteArray {
+        val resBuff = res.toByteArray()
+        
+        var len = 0
+        len += MessageBuffer.sizeLongString(resBuff)
+        
+        val result = MessageBuffer.alloc(MessageType.ReplyOKJSON, req, len)
+        result.writeLongString(resBuff)
+        return result.bytes
+    }
+    
+    /**
+     * Serialize OK reply with JSON and buffers
+     */
+    private fun serializeReplyOKJSONWithBuffers(req: Int, res: String, buffers: List<ByteArray>): ByteArray {
+        val resBuff = res.toByteArray()
+        
+        var len = 0
+        len += MessageBuffer.sizeUInt32 // use constant directly, not function call
+        len += MessageBuffer.sizeLongString(resBuff)
+        for (buffer in buffers) {
+            len += MessageBuffer.sizeVSBuffer(buffer)
+        }
+        
+        val result = MessageBuffer.alloc(MessageType.ReplyOKJSONWithBuffers, req, len)
+        result.writeUInt32(buffers.size)
+        result.writeLongString(resBuff)
+        for (buffer in buffers) {
+            result.writeBuffer(buffer)
+        }
+        
+        return result.bytes
+    }
+    
+    /**
+     * Deserialize OK reply with JSON
+     */
+    fun deserializeReplyOKJSON(buff: MessageBuffer): Any? {
+        val res = buff.readLongString()
+        val gson = Gson()
+        return gson.fromJson(res, Any::class.java)
+    }
+    
+    /**
+     * Deserialize OK reply with JSON and buffers
+     */
+    fun deserializeReplyOKJSONWithBuffers(buff: MessageBuffer, uriTransformer: ((String, Any?) -> Any?)? = null): SerializableObjectWithBuffers<*> {
+        val bufferCount = buff.readUInt32()
+        val res = buff.readLongString()
+        
+        val buffers = mutableListOf<ByteArray>()
+        for (i in 0 until bufferCount) {
+            buffers.add(buff.readVSBuffer())
+        }
+        
+        return SerializableObjectWithBuffers(parseJsonAndRestoreBufferRefs(res, buffers, uriTransformer))
+    }
+    
+    /**
+     * Serialize error reply
+     */
+    fun serializeReplyErr(req: Int, err: Throwable?): ByteArray {
+        val errStr = if (err != null) {
+            try {
+                val gson = Gson()
+                gson.toJson(transformErrorForSerialization(err))
+            } catch (e: Exception) {
+                null
+            }
+        } else null
+        
+        return if (errStr != null) {
+            val errBuff = errStr.toByteArray()
+            
+            var len = 0
+            len += MessageBuffer.sizeLongString(errBuff)
+            
+            val result = MessageBuffer.alloc(MessageType.ReplyErrError, req, len)
+            result.writeLongString(errBuff)
+            result.bytes
+        } else {
+            serializeReplyErrEmpty(req)
+        }
+    }
+    
+    /**
+     * Deserialize error reply
+     */
+    fun deserializeReplyErrError(buff: MessageBuffer): Throwable {
+        val err = buff.readLongString()
+        val gson = Gson()
+        val errorMap = gson.fromJson(err, Map::class.java)
+        
+        // Create custom exception
+        val exception = Exception(errorMap["message"] as? String ?: "Unknown error")
+        
+        // Set stack and other properties
+        if (errorMap.containsKey("stack")) {
+            // Note: Java/Kotlin cannot directly set stack, this is just a demonstration
+            // In actual implementation, may need custom exception type or other methods
+        }
+        
+        return exception
+    }
+    
+    /**
+     * Serialize empty error reply
+     */
+    private fun serializeReplyErrEmpty(req: Int): ByteArray {
+        return MessageBuffer.alloc(MessageType.ReplyErrEmpty, req, 0).bytes
+    }
+    
+    /**
+     * Transform error for serialization
+     */
+    private fun transformErrorForSerialization(error: Throwable): Map<String, Any?> {
+        return mapOf(
+            "\$isError" to true,
+            "name" to error.javaClass.simpleName,
+            "message" to error.message,
+            "stack" to error.stackTraceToString()
+        )
+    }
+}
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/MessageType.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/MessageType.kt
new file mode 100644
index 000000000..5a474338c
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/MessageType.kt
@@ -0,0 +1,78 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.ipc.proxy
+
+/**
+ * RPC message type
+ * Corresponds to MessageType enum in VSCode
+ */
+enum class MessageType(val value: Int) {
+    /**
+    * Request with JSON arguments
+    */
+    RequestJSONArgs(1),
+
+    /**
+    * Request with JSON arguments and cancellation token
+    */
+    RequestJSONArgsWithCancellation(2),
+
+    /**
+    * Request with mixed arguments
+    */
+    RequestMixedArgs(3),
+
+    /**
+    * Request with mixed arguments and cancellation token
+    */
+    RequestMixedArgsWithCancellation(4),
+
+    /**
+    * Acknowledged message
+    */
+    Acknowledged(5),
+
+    /**
+    * Cancel message
+    */
+    Cancel(6),
+
+    /**
+    * Empty OK reply
+    */
+    ReplyOKEmpty(7),
+
+    /**
+    * OK reply with binary buffer
+    */
+    ReplyOKVSBuffer(8),
+
+    /**
+    * OK reply in JSON format
+    */
+    ReplyOKJSON(9),
+
+    /**
+    * OK reply in JSON format with buffers
+    */
+    ReplyOKJSONWithBuffers(10),
+
+    /**
+    * Error reply
+    */
+    ReplyErrError(11),
+
+    /**
+    * Empty error reply
+    */
+    ReplyErrEmpty(12);
+    
+    companion object {
+        /**
+        * Get type by value
+        */
+        fun fromValue(value: Int): MessageType? = values().find { it.value == value }
+    }
+}
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/PendingRPCReply.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/PendingRPCReply.kt
new file mode 100644
index 000000000..3c5a83af4
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/PendingRPCReply.kt
@@ -0,0 +1,34 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.ipc.proxy
+
+import com.intellij.openapi.Disposable
+
+/**
+ * Pending RPC reply
+ * Corresponds to PendingRPCReply in VSCode
+ */
+class PendingRPCReply(
+    private val promise: LazyPromise,
+    private val disposable: Disposable
+) {
+    /**
+     * Resolve reply successfully
+     * @param value Result value
+     */
+    fun resolveOk(value: Any?) {
+        promise.resolveOk(value)
+        disposable.dispose()
+    }
+
+    /**
+     * Resolve reply with error
+     * @param err Error object
+     */
+    fun resolveErr(err: Throwable) {
+        promise.resolveErr(err)
+        disposable.dispose()
+    }
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/ProxyIdentifier.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/ProxyIdentifier.kt
new file mode 100644
index 000000000..56fb575c2
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/ProxyIdentifier.kt
@@ -0,0 +1,82 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.ipc.proxy
+
+/**
+ * Proxy identifier class
+ * Corresponds to ProxyIdentifier in VSCode
+ */
+class ProxyIdentifier<T> private constructor(
+    /**
+     * String identifier
+     */
+    val sid: String,
+    
+    /**
+     * Numeric identifier
+     */
+    val nid: Int
+) {
+    companion object {
+        /**
+         * Identifier counter
+         */
+        var count = 0
+            private set
+            
+        /**
+         * Create new ProxyIdentifier instance
+         */
+        internal fun <T> create(sid: String): ProxyIdentifier<T> {
+            return ProxyIdentifier<T>(sid, ++count)
+        }
+        
+        /**
+         * Create placeholder ProxyIdentifier, does not increment counter
+         */
+        internal fun <T> createPlaceholder(sid: String, nid: Int): ProxyIdentifier<T> {
+            return ProxyIdentifier<T>(sid, nid)
+        }
+    }
+
+    override fun toString(): String {
+        return this.sid
+    }
+}
+
+/**
+ * Stores created proxy identifiers
+ */
+private val identifiers = mutableListOf<ProxyIdentifier<*>>()
+
+/**
+ * Create proxy identifier
+ * @param identifier String identifier
+ * @return Proxy identifier instance
+ */
+fun <T> createProxyIdentifier(identifier: String): ProxyIdentifier<T> {
+    val result = ProxyIdentifier.create<T>(identifier)
+    while (identifiers.size <= result.nid) {
+        identifiers.add(ProxyIdentifier.createPlaceholder<Any>("placeholder", identifiers.size))
+    }
+    identifiers[result.nid] = result
+    return result
+}
+
+/**
+ * Get string identifier by proxy ID
+ * @param nid Proxy ID
+ * @return String identifier
+ */
+fun getStringIdentifierForProxy(nid: Int): String {
+    return identifiers[nid].sid
+}
+
+/**
+ * Serializable object with buffers
+ * Corresponds to SerializableObjectWithBuffers in VSCode
+ * @param value Value to serialize
+ */
+class SerializableObjectWithBuffers<T>(val value: T) 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/RPCProtocol.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/RPCProtocol.kt
new file mode 100644
index 000000000..d63f793d3
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/RPCProtocol.kt
@@ -0,0 +1,794 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.ipc.proxy
+
+import com.intellij.openapi.Disposable
+import com.intellij.openapi.diagnostic.Logger
+import ai.kilocode.jetbrains.ipc.IMessagePassingProtocol
+import ai.kilocode.jetbrains.ipc.proxy.uri.IURITransformer
+import ai.kilocode.jetbrains.ipc.proxy.uri.UriReplacer
+import ai.kilocode.jetbrains.util.doInvokeMethod
+import kotlinx.coroutines.*
+import java.lang.reflect.Proxy
+import java.util.concurrent.ConcurrentHashMap
+import kotlin.coroutines.CoroutineContext
+import kotlin.reflect.full.functions
+
+/**
+ * Request initiator
+ */
+enum class RequestInitiator {
+    /**
+     * Initiated locally
+     */
+    LocalSide,
+    
+    /**
+     * Initiated by the other side
+     */
+    OtherSide
+}
+
+/**
+ * Responsive state
+ */
+enum class ResponsiveState {
+    /**
+     * Responsive
+     */
+    Responsive,
+    
+    /**
+     * Unresponsive
+     */
+    Unresponsive
+}
+
+/**
+ * RPC protocol logger interface
+ */
+interface IRPCProtocolLogger {
+    /**
+     * Log incoming message
+     */
+    fun logIncoming(msgLength: Int, req: Int, initiator: RequestInitiator, str: String, data: Any? = null)
+    
+    /**
+     * Log outgoing message
+     */
+    fun logOutgoing(msgLength: Int, req: Int, initiator: RequestInitiator, str: String, data: Any? = null)
+}
+
+/**
+ * RPC protocol implementation
+ * Corresponds to RPCProtocol in VSCode
+ */
+class RPCProtocol(
+    private val protocol: IMessagePassingProtocol,
+    private val logger: IRPCProtocolLogger? = null,
+    private val uriTransformer: IURITransformer? = null
+) : IRPCProtocol, Disposable {
+    
+    companion object {
+        private val LOG = Logger.getInstance(RPCProtocol::class.java)
+        
+        /**
+         * Unresponsive time threshold (milliseconds)
+         */
+        private const val UNRESPONSIVE_TIME = 3 * 1000 // 3s, same as TS implementation
+        
+        /**
+         * RPC protocol symbol (used to identify objects implementing this interface)
+         */
+        private val RPC_PROTOCOL_SYMBOL = "rpcProtocol"
+        
+        /**
+         * RPC proxy symbol (used to identify proxy objects)
+         */
+        private val RPC_PROXY_SYMBOL = "rpcProxy"
+        
+        /**
+         * Dollar sign character code
+         */
+        private const val DOLLAR_SIGN_CHAR_CODE = 36 // '$'
+        
+        /**
+         * No operation
+         */
+        private val noop: () -> Unit = {}
+    }
+    
+    /**
+     * Coroutine scope
+     */
+    private val coroutineScope = CoroutineScope(SupervisorJob() + Dispatchers.IO)
+    
+    /**
+     * URI replacer
+     */
+    private val uriReplacer: ((String, Any?) -> Any?)? = if (uriTransformer != null) UriReplacer(uriTransformer) else null
+    
+    /**
+     * Whether disposed
+     */
+    private var isDisposed = false
+    
+    /**
+     * Local object list
+     */
+    private val locals = arrayOfNulls<Any?>(ProxyIdentifier.count + 1)
+    
+    /**
+     * Proxy object list
+     */
+    private val proxies = arrayOfNulls<Any?>(ProxyIdentifier.count + 1)
+    
+    /**
+     * Last message ID
+     */
+    private var lastMessageId = 0
+    
+    /**
+     * Cancelled handlers
+     */
+    private val cancelInvokedHandlers = ConcurrentHashMap<String, () -> Unit>()
+    
+    /**
+     * Pending RPC replies
+     */
+    private val pendingRPCReplies = ConcurrentHashMap<String, PendingRPCReply>()
+    
+    /**
+     * Responsive state
+     */
+    override var responsiveState = ResponsiveState.Responsive
+        private set
+    
+    /**
+     * Unacknowledged count
+     */
+    private var unacknowledgedCount = 0
+    
+    /**
+     * Unresponsive time
+     */
+    private var unresponsiveTime = 0L
+    
+    /**
+     * Asynchronous unresponsive check job
+     */
+    private var asyncCheckUnresponsiveJob: Job? = null
+    
+    /**
+     * Responsive state change event listeners
+     */
+    private val onDidChangeResponsiveStateListeners = mutableListOf<(ResponsiveState) -> Unit>()
+    
+    init {
+        protocol.onMessage { data -> receiveOneMessage(data) }
+    }
+    
+    /**
+     * Add responsive state change event listener
+     */
+    fun onDidChangeResponsiveState(listener: (ResponsiveState) -> Unit): Disposable {
+        onDidChangeResponsiveStateListeners.add(listener)
+        return Disposable {
+            onDidChangeResponsiveStateListeners.remove(listener)
+        }
+    }
+    
+    override fun dispose() {
+        isDisposed = true
+        
+       // Cancel all coroutines
+       coroutineScope.cancel()
+      
+       // Release all pending replies with cancel error
+       pendingRPCReplies.keys.forEach { msgId ->
+           val pending = pendingRPCReplies[msgId]
+           pendingRPCReplies.remove(msgId)
+           pending?.resolveErr(CanceledException())
+       }
+    }
+    
+    override suspend fun drain(): Unit {
+        protocol.drain()
+    }
+    
+    /**
+     * Triggered before sending a request
+     */
+    private fun onWillSendRequest(req: Int) {
+        if (unacknowledgedCount == 0) {
+           // This is the first request we've sent in a while
+           // Mark this moment as the start of the unresponsive countdown
+           unresponsiveTime = System.currentTimeMillis() + UNRESPONSIVE_TIME
+           LOG.info("Set initial unresponsive check time, request ID: $req, unresponsive time: ${unresponsiveTime}ms")
+        }
+        unacknowledgedCount++
+
+       // Check every 2 seconds for unresponsiveness
+       if (asyncCheckUnresponsiveJob == null || asyncCheckUnresponsiveJob?.isActive == false) {
+           LOG.debug("Start unresponsive check task")
+           asyncCheckUnresponsiveJob = coroutineScope.launch {
+               while (isActive) {
+                   checkUnresponsive()
+                   delay(2000)
+               }
+           }
+       }
+    }
+    
+    /**
+     * Triggered when an acknowledge response is received
+     */
+    private fun onDidReceiveAcknowledge(req: Int) {
+       // The next possible unresponsive time is now + increment
+       unresponsiveTime = System.currentTimeMillis() + UNRESPONSIVE_TIME
+       unacknowledgedCount--
+//        LOG.debug("Received acknowledge, request ID: $req, unacknowledged count decreased: $unacknowledgedCount, updated unresponsive time: ${unresponsiveTime}ms")
+      
+       if (unacknowledgedCount == 0) {
+           // No longer need to check for unresponsiveness
+           LOG.debug("No unacknowledged requests, cancel unresponsive check task")
+           asyncCheckUnresponsiveJob?.cancel()
+           asyncCheckUnresponsiveJob = null
+       }
+      
+       // The other side is responsive!
+       setResponsiveState(ResponsiveState.Responsive)
+    }
+    
+    /**
+     * Check for unresponsiveness
+     */
+    private fun checkUnresponsive() {
+        if (unacknowledgedCount == 0) {
+            // Not waiting for anything => cannot determine responsiveness
+            return
+        }
+        
+        val currentTime = System.currentTimeMillis()
+        if (currentTime > unresponsiveTime) {
+            // Unresponsive!!
+            LOG.warn("Detected unresponsive state: current time ${currentTime}ms > unresponsive threshold ${unresponsiveTime}ms, unacknowledged requests: $unacknowledgedCount")
+            setResponsiveState(ResponsiveState.Unresponsive)
+        } else {
+            // Not yet unresponsive, log time info
+            if (LOG.isDebugEnabled) {
+                val remainingTime = unresponsiveTime - currentTime
+                LOG.debug("Connection responsive, time left before unresponsive threshold: ${remainingTime}ms, unacknowledged requests: $unacknowledgedCount")
+            }
+        }
+    }
+    
+    /**
+     * Set responsive state
+     */
+    private fun setResponsiveState(newResponsiveState: ResponsiveState) {
+        if (responsiveState == newResponsiveState) {
+            // No change
+            return
+        }
+        
+        LOG.info("Responsive state changed from $responsiveState to $newResponsiveState")
+        responsiveState = newResponsiveState
+        
+       // Notify listeners
+       onDidChangeResponsiveStateListeners.forEach { it(responsiveState) }
+    }
+    
+    /**
+     * Transform incoming URIs
+     */
+    fun <T> transformIncomingURIs(obj: T): T {
+        if (uriTransformer == null) {
+            return obj
+        }
+        
+        @Suppress("UNCHECKED_CAST")
+        return when (obj) {
+           // If the object is a URI, convert directly
+           is java.net.URI -> uriTransformer.transformIncoming(obj) as T
+          
+           // If the object is a string and looks like a URI
+           is String -> {
+               try {
+                   val uri = java.net.URI(obj)
+                   uriTransformer.transformIncoming(uri).toString() as T
+               } catch (e: Exception) {
+                   obj
+               }
+           }
+          
+           // If the object is a list, recursively convert each element
+           is List<*> -> {
+               obj.map { item -> transformIncomingURIs(item) } as T
+           }
+          
+           // If the object is a map, recursively convert each value, especially for URI-related keys
+           is Map<*, *> -> {
+               val result = mutableMapOf<Any?, Any?>()
+               obj.forEach { (key, value) ->
+                   val transformedValue = if (key is String && (
+                       key == "uri" ||
+                       key == "documentUri" ||
+                       key == "targetUri" ||
+                       key == "sourceUri" ||
+                       key.endsWith("Uri"))
+                   ) {
+                       transformIncomingURIs(value)
+                   } else {
+                       transformIncomingURIs(value)
+                   }
+                   result[key] = transformedValue
+               }
+               result as T
+           }
+          
+           // Other objects, if custom class, may need further handling
+           else -> obj
+        }
+    }
+    
+    override fun <T> getProxy(identifier: ProxyIdentifier<T>): T {
+        val rpcId = identifier.nid
+        val sid = identifier.sid
+        
+        if (proxies[rpcId] == null) {
+            proxies[rpcId] = createProxy(rpcId, sid)
+        }
+        
+        @Suppress("UNCHECKED_CAST")
+        return proxies[rpcId] as T
+    }
+    
+    /**
+     * Create proxy object
+     */
+    @Suppress("UNCHECKED_CAST")
+    private fun <T> createProxy(rpcId: Int, debugName: String): T {
+       // Try to get T's Class object
+       val interfaces = mutableListOf<Class<*>>()
+      
+//        // Add default Any interface
+//        interfaces.add(Any::class.java)
+      
+       // Try to get interface info from generic parameter
+       try {
+           val classLoader = javaClass.classLoader
+           val proxyClass = classLoader.loadClass(debugName)
+           if (proxyClass.isInterface) {
+               interfaces.add(proxyClass)
+           }
+       } catch (e: Exception) {
+           LOG.warn("Failed to load interface class $debugName: ${e.message}")
+       }
+      
+       // Use Java dynamic proxy to create proxy object
+       return Proxy.newProxyInstance(
+           javaClass.classLoader,
+           interfaces.toTypedArray()
+       ) { _, method, args ->
+           val name = method.name
+      
+           // Handle special methods
+           if (name == "toString") {
+               return@newProxyInstance "Proxy($debugName)"
+           }
+      
+           // Handle special symbols
+           if (name == RPC_PROXY_SYMBOL) {
+               return@newProxyInstance debugName
+           }
+      
+           // Call remote method
+           if (name.isNotEmpty()) {
+               return@newProxyInstance remoteCall(rpcId, "\$$name", args ?: emptyArray())
+           }
+      
+           null
+       } as T
+    }
+    
+    override fun <T, R : T> set(identifier: ProxyIdentifier<T>, instance: R): R {
+        locals[identifier.nid] = instance
+        return instance
+    }
+    
+    override fun assertRegistered(identifiers: List<ProxyIdentifier<*>>) {
+        for (identifier in identifiers) {
+            if (locals[identifier.nid] == null) {
+                throw IllegalStateException("Missing proxy instance ${identifier.sid}")
+            }
+        }
+    }
+
+    /**
+     * Remote call
+     */
+    private fun remoteCall(rpcId: Int, methodName: String, args: Array<out Any?>): Any {
+        if (isDisposed) {
+            throw CanceledException()
+        }
+        LOG.info("remoteCall: $rpcId.$methodName.${lastMessageId+1}")
+
+        // Check if the last argument is a cancellation token
+        var cancellationToken: Any? = null
+        val effectiveArgs = if (args.isNotEmpty()) {
+           // There should be more complex logic for detecting cancellation token
+           val lastArg = args.last()
+           if (lastArg != null && lastArg::class.java.simpleName == "CancellationToken") {
+               cancellationToken = lastArg
+               args.dropLast(1).toTypedArray()
+           } else {
+               args
+           }
+        } else {
+            args
+        }
+
+        val serializedRequestArguments = MessageIO.serializeRequestArguments(args.toList(), uriReplacer)
+        
+        val req = ++lastMessageId
+        val callId = req.toString()
+        val result = LazyPromise()
+
+       // Use LazyPromise to implement Promise functionality
+       val deferred = LazyPromise()
+      
+       // Create Disposable object for cleanup on cancel
+       val disposable = Disposable {
+           if (!deferred.isCompleted) {
+               deferred.cancel()
+           }
+       }
+        
+        pendingRPCReplies[callId] = PendingRPCReply(result, disposable)
+        onWillSendRequest(req)
+
+        val usesCancellationToken = cancellationToken != null
+        val msg = MessageIO.serializeRequest(req, rpcId, methodName, serializedRequestArguments, usesCancellationToken)
+        
+        logger?.logOutgoing(
+            msg.size,
+            req,
+            RequestInitiator.LocalSide,
+            "request: ${getStringIdentifierForProxy(rpcId)}.$methodName(",
+            args
+        )
+        
+        protocol.send(msg)
+
+        // Directly return Promise, do not block current thread
+        return result
+    }
+    
+    /**
+     * Receive a message
+     */
+    private fun receiveOneMessage(rawmsg: ByteArray) {
+        if (isDisposed) {
+            return
+        }
+
+        val msgLength = rawmsg.size
+        val buff = MessageBuffer.read(rawmsg, 0)
+        val messageType = MessageType.fromValue(buff.readUInt8()) ?: return
+        val req = buff.readUInt32()
+
+//        LOG.info("receiveOneMessage: $messageType, req: $req, length: $msgLength")
+        when (messageType) {
+            MessageType.RequestJSONArgs, MessageType.RequestJSONArgsWithCancellation -> {
+                val (rpcId, method, args) = MessageIO.deserializeRequestJSONArgs(buff)
+                // Transform URI
+                val transformedArgs = transformIncomingURIs(args)
+                receiveRequest(
+                    msgLength,
+                    req,
+                    rpcId,
+                    method,
+                    transformedArgs,
+                    messageType == MessageType.RequestJSONArgsWithCancellation
+                )
+            }
+            MessageType.RequestMixedArgs, MessageType.RequestMixedArgsWithCancellation -> {
+                val (rpcId, method, args) = MessageIO.deserializeRequestMixedArgs(buff)
+                // Transform URI
+                val transformedArgs = transformIncomingURIs(args)
+                receiveRequest(
+                    msgLength,
+                    req,
+                    rpcId,
+                    method,
+                    transformedArgs,
+                    messageType == MessageType.RequestMixedArgsWithCancellation
+                )
+            }
+            MessageType.Acknowledged -> {
+                logger?.logIncoming(msgLength, req, RequestInitiator.LocalSide, "ack")
+                onDidReceiveAcknowledge(req)
+            }
+            MessageType.Cancel -> {
+                receiveCancel(msgLength, req)
+            }
+            MessageType.ReplyOKEmpty -> {
+                receiveReply(msgLength, req, null)
+            }
+            MessageType.ReplyOKJSON -> {
+                val value = MessageIO.deserializeReplyOKJSON(buff)
+                // Transform URI
+                val transformedValue = transformIncomingURIs(value)
+                receiveReply(msgLength, req, transformedValue)
+            }
+            MessageType.ReplyOKJSONWithBuffers -> {
+                val value = MessageIO.deserializeReplyOKJSONWithBuffers(buff, uriReplacer)
+                receiveReply(msgLength, req, value)
+            }
+            MessageType.ReplyOKVSBuffer -> {
+                val value = MessageIO.deserializeReplyOKVSBuffer(buff)
+                receiveReply(msgLength, req, value)
+            }
+            MessageType.ReplyErrError -> {
+                val err = MessageIO.deserializeReplyErrError(buff)
+                // Transform URI
+                val transformedErr = transformIncomingURIs(err)
+                receiveReplyErr(msgLength, req, transformedErr)
+            }
+            MessageType.ReplyErrEmpty -> {
+                receiveReplyErr(msgLength, req, null)
+            }
+        }
+    }
+    
+    /**
+     * Receive request
+     */
+    private fun receiveRequest(
+        msgLength: Int,
+        req: Int,
+        rpcId: Int,
+        method: String,
+        args: List<Any?>,
+        usesCancellationToken: Boolean
+    ) {
+        LOG.info("receiveRequest:$req.$rpcId.$method()")
+        logger?.logIncoming(
+            msgLength,
+            req,
+            RequestInitiator.OtherSide,
+            "receiveRequest ${getStringIdentifierForProxy(rpcId)}.$method(",
+            args
+        )
+        
+        val callId = req.toString()
+        
+        val promise: Deferred<Any?>
+        val cancel: () -> Unit
+        
+       // Use coroutine to handle request
+       if (usesCancellationToken) {
+           // Create coroutine job, can be cancelled
+           val job = Job()
+          
+           // Create coroutine context
+           val context: CoroutineContext = job + Dispatchers.Default
+      
+           // Start coroutine
+           promise = coroutineScope.async(context) {
+               // Add cancellation token
+               val argsList = args.toMutableList()
+               // Note: should add a CancellationToken object here
+               // But in Kotlin, we can use coroutine's cancel mechanism
+               invokeHandler(rpcId, method, argsList)
+           }
+          
+           cancel = { job.cancel() }
+       } else {
+           // Cannot be cancelled
+           promise = coroutineScope.async {
+               invokeHandler(rpcId, method, args)
+           }
+           cancel = noop
+       }
+        
+        cancelInvokedHandlers[callId] = cancel
+        
+       // Acknowledge request
+       val msg = MessageIO.serializeAcknowledged(req)
+       logger?.logOutgoing(msg.size, req, RequestInitiator.OtherSide, "ack")
+       protocol.send(msg)
+      
+       // Handle request result
+       coroutineScope.launch {
+           try {
+               val result = promise.await()
+//                LOG.info("response: $req.$rpcId.$method")
+               cancelInvokedHandlers.remove(callId)
+               val msg = MessageIO.serializeReplyOK(req, result, uriReplacer)
+               logger?.logOutgoing(msg.size, req, RequestInitiator.OtherSide, "reply:", result)
+               protocol.send(msg)
+           } catch (err: Throwable) {
+               cancelInvokedHandlers.remove(callId)
+               val msg = MessageIO.serializeReplyErr(req, err)
+               logger?.logOutgoing(msg.size, req, RequestInitiator.OtherSide, "replyErr:", err)
+               protocol.send(msg)
+           }
+       }
+    }
+    
+    /**
+     * Receive cancel
+     */
+    private fun receiveCancel(msgLength: Int, req: Int) {
+        logger?.logIncoming(msgLength, req, RequestInitiator.OtherSide, "receiveCancel")
+        val callId = req.toString()
+        cancelInvokedHandlers[callId]?.invoke()
+    }
+    
+    /**
+     * Receive reply
+     */
+    private fun receiveReply(msgLength: Int, req: Int, value: Any?) {
+        logger?.logIncoming(msgLength, req, RequestInitiator.LocalSide, "receiveReply:", value)
+        val callId = req.toString()
+        if (!pendingRPCReplies.containsKey(callId)) {
+            return
+        }
+        
+        val pendingReply = pendingRPCReplies[callId] ?: return
+        pendingRPCReplies.remove(callId)
+        
+        pendingReply.resolveOk(value)
+    }
+    
+    /**
+     * Receive error reply
+     */
+    private fun receiveReplyErr(msgLength: Int, req: Int, value: Throwable?) {
+        logger?.logIncoming(msgLength, req, RequestInitiator.LocalSide, "receiveReplyErr:", value)
+        
+        val callId = req.toString()
+        if (!pendingRPCReplies.containsKey(callId)) {
+            return
+        }
+        
+        val pendingReply = pendingRPCReplies[callId] ?: return
+        pendingRPCReplies.remove(callId)
+        
+        val err = value ?: Exception("Unknown error")
+        pendingReply.resolveErr(err)
+    }
+    
+    /**
+     * Invoke handler
+     */
+    private suspend fun invokeHandler(rpcId: Int, methodName: String, args: List<Any?>): Any? {
+        return try {
+            doInvokeHandler(rpcId, methodName, args)
+        } catch (err: Throwable) {
+//            throw err
+            LOG.error("Error invoking handler: $methodName(${args.joinToString(", ")})", err)
+            null
+        }
+    }
+    
+    /**
+     * Execute handler invocation
+     */
+    private suspend fun doInvokeHandler(rpcId: Int, methodName: String, args: List<Any?>): Any? {
+        val actor = locals[rpcId] ?: throw IllegalStateException("Unknown actor ${getStringIdentifierForProxy(rpcId)}")
+       // Use reflection to get method with parameter type matching
+       val method = try {
+           findBestMatchingMethod(actor, methodName, args)
+       } catch (e: Exception) {
+           throw IllegalStateException("Unknown method $methodName on actor ${getStringIdentifierForProxy(rpcId)}")
+       }
+
+        return doInvokeMethod(method, args, actor)
+    }
+
+    /**
+     * Find the best matching method based on method name and argument types
+     */
+    private fun findBestMatchingMethod(actor: Any, methodName: String, args: List<Any?>): kotlin.reflect.KFunction<*> {
+        val candidateMethods = actor::class.functions.filter { it.name == methodName }
+        
+        if (candidateMethods.isEmpty()) {
+            throw NoSuchMethodException("No method named '$methodName' found")
+        }
+        
+        if (candidateMethods.size == 1) {
+            return candidateMethods.first()
+        }
+        
+        // Find method with matching parameter count (excluding the receiver parameter)
+        val methodsWithMatchingParamCount = candidateMethods.filter { method ->
+            val paramCount = method.parameters.size - 1 // Exclude receiver parameter
+            paramCount == args.size
+        }
+        
+        if (methodsWithMatchingParamCount.isEmpty()) {
+            // If no exact parameter count match, try to find a method that can accept the arguments
+            val compatibleMethods = candidateMethods.filter { method ->
+                val paramCount = method.parameters.size - 1
+                paramCount >= args.size // Method can accept fewer arguments (with defaults)
+            }
+            if (compatibleMethods.isNotEmpty()) {
+                return compatibleMethods.first()
+            }
+            throw NoSuchMethodException("No method '$methodName' with ${args.size} parameters found")
+        }
+        
+        if (methodsWithMatchingParamCount.size == 1) {
+            return methodsWithMatchingParamCount.first()
+        }
+        
+        // Multiple methods with same parameter count, try to match by type
+        for (method in methodsWithMatchingParamCount) {
+            if (isMethodCompatible(method, args)) {
+                return method
+            }
+        }
+        
+        // If no perfect match, return the first one with matching parameter count
+        return methodsWithMatchingParamCount.first()
+    }
+    
+    /**
+     * Check if a method is compatible with the given arguments
+     */
+    private fun isMethodCompatible(method: kotlin.reflect.KFunction<*>, args: List<Any?>): Boolean {
+        val parameters = method.parameters.drop(1) // Skip receiver parameter
+        
+        if (parameters.size != args.size) {
+            return false
+        }
+        
+        for (i in parameters.indices) {
+            val param = parameters[i]
+            val arg = args[i]
+            
+            if (arg == null) {
+                // Null argument is compatible with nullable parameters
+                if (!param.type.isMarkedNullable) {
+                    return false
+                }
+            } else {
+                // Check type compatibility
+                val argClass = arg::class.java
+                val paramClass = param.type.classifier as? kotlin.reflect.KClass<*>
+                
+                if (paramClass != null) {
+                    val paramJavaClass = paramClass.java
+                    
+                    // Handle primitive type conversions (similar to doInvokeMethod)
+                    val isCompatible = when {
+                        paramJavaClass.isAssignableFrom(argClass) -> true
+                        // Handle Double to numeric type conversions
+                        arg is Double && (paramJavaClass == Int::class.java ||
+                                         paramJavaClass == Long::class.java ||
+                                         paramJavaClass == Float::class.java ||
+                                         paramJavaClass == Short::class.java ||
+                                         paramJavaClass == Byte::class.java ||
+                                         paramJavaClass == Boolean::class.java) -> true
+                        // Handle String compatibility
+                        arg is String && paramJavaClass == String::class.java -> true
+                        else -> false
+                    }
+                    
+                    if (!isCompatible) {
+                        return false
+                    }
+                }
+            }
+        }
+        
+        return true
+    }
+
+
+}
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/interfaces/ExtHostCommandsProxy.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/interfaces/ExtHostCommandsProxy.kt
new file mode 100644
index 000000000..6f6ea81d1
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/interfaces/ExtHostCommandsProxy.kt
@@ -0,0 +1,17 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.ipc.proxy.interfaces
+
+import ai.kilocode.jetbrains.ipc.proxy.LazyPromise
+
+//export interface ExtHostCommandsShape {
+//    $executeContributedCommand(id: string, ...args: any[]): Promise<unknown>;
+//    $getContributedCommandMetadata(): Promise<{ [id: string]: string | ICommandMetadataDto }>;
+//}
+
+interface ExtHostCommandsProxy {
+    fun executeContributedCommand(id: String, args: List<Any?>) : LazyPromise
+    fun getContributedCommandMetadata() : LazyPromise
+}
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/interfaces/ExtHostConfigurationProxy.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/interfaces/ExtHostConfigurationProxy.kt
new file mode 100644
index 000000000..45835de35
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/interfaces/ExtHostConfigurationProxy.kt
@@ -0,0 +1,32 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.ipc.proxy.interfaces
+
+/**
+ * Extension host configuration service interface
+ * Corresponds to ExtHostConfiguration in VSCode
+ */
+interface ExtHostConfigurationProxy {
+    /**
+     * Initialize configuration
+     * @param configModel Configuration model
+     */
+    fun initializeConfiguration(configModel: Map<String, Any?>)
+    
+    /**
+     * Update configuration
+     * @param configModel Configuration model
+     */
+    fun updateConfiguration(configModel: Map<String, Any?>)
+    
+    /**
+     * Get configuration
+     * @param key Configuration key
+     * @param section Configuration section
+     * @param scopeToLanguage Whether to scope to language
+     * @return Configuration value
+     */
+    fun getConfiguration(key: String, section: String?, scopeToLanguage: Boolean): Any?
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/interfaces/ExtHostDocumentsAndEditorsProxy.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/interfaces/ExtHostDocumentsAndEditorsProxy.kt
new file mode 100644
index 000000000..5534e2bee
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/interfaces/ExtHostDocumentsAndEditorsProxy.kt
@@ -0,0 +1,12 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.ipc.proxy.interfaces
+
+import ai.kilocode.jetbrains.editor.DocumentsAndEditorsDelta
+
+
+interface ExtHostDocumentsAndEditorsProxy {
+    fun acceptDocumentsAndEditorsDelta(d: DocumentsAndEditorsDelta)
+}
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/interfaces/ExtHostDocumentsProxy.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/interfaces/ExtHostDocumentsProxy.kt
new file mode 100644
index 000000000..2ba4df188
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/interfaces/ExtHostDocumentsProxy.kt
@@ -0,0 +1,16 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.ipc.proxy.interfaces
+
+import ai.kilocode.jetbrains.editor.ModelChangedEvent
+import ai.kilocode.jetbrains.util.URI
+
+interface ExtHostDocumentsProxy {
+    fun acceptModelLanguageChanged(strURL: URI, newLanguageId: String)
+    fun acceptModelSaved(strURL: URI)
+    fun acceptDirtyStateChanged(strURL: URI, isDirty: Boolean)
+    fun acceptEncodingChanged(strURL: URI, encoding: String)
+    fun acceptModelChanged(strURL: URI, e: ModelChangedEvent, isDirty: Boolean)
+}
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/interfaces/ExtHostEditorTabsProxy.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/interfaces/ExtHostEditorTabsProxy.kt
new file mode 100644
index 000000000..609a38cd0
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/interfaces/ExtHostEditorTabsProxy.kt
@@ -0,0 +1,14 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.ipc.proxy.interfaces
+
+import ai.kilocode.jetbrains.editor.EditorTabGroupDto
+import ai.kilocode.jetbrains.editor.TabOperation
+
+interface ExtHostEditorTabsProxy {
+    fun acceptEditorTabModel(tabGroups: List<EditorTabGroupDto>)
+    fun acceptTabGroupUpdate(groupDto: EditorTabGroupDto)
+    fun acceptTabOperation(operation: TabOperation)
+}
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/interfaces/ExtHostEditorsProxy.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/interfaces/ExtHostEditorsProxy.kt
new file mode 100644
index 000000000..a8b263952
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/interfaces/ExtHostEditorsProxy.kt
@@ -0,0 +1,15 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.ipc.proxy.interfaces
+
+import ai.kilocode.jetbrains.editor.EditorPropertiesChangeData
+import ai.kilocode.jetbrains.editor.TextEditorDiffInformation
+
+
+interface ExtHostEditorsProxy {
+    fun acceptEditorPropertiesChanged(id: String, props: EditorPropertiesChangeData)
+    fun acceptEditorPositionData(data: Map<String , Int>)
+    fun acceptEditorDiffInformation(id: String, diffInformation: List<TextEditorDiffInformation>?)
+}
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/interfaces/ExtHostExtensionServiceProxy.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/interfaces/ExtHostExtensionServiceProxy.kt
new file mode 100644
index 000000000..b704375b2
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/interfaces/ExtHostExtensionServiceProxy.kt
@@ -0,0 +1,96 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.ipc.proxy.interfaces
+
+import ai.kilocode.jetbrains.ipc.proxy.LazyPromise
+
+/**
+ * Extension host extension service interface
+ * Corresponds to ExtHostExtensionServiceShape in VSCode
+ */
+interface ExtHostExtensionServiceProxy {
+    /**
+     * Resolve remote authority
+     * @param remoteAuthority Remote authority identifier
+     * @param resolveAttempt Number of resolve attempts
+     * @return Resolve result
+     */
+    fun resolveAuthority(remoteAuthority: String, resolveAttempt: Int): LazyPromise
+    
+    /**
+     * Get canonical URI
+     * Returns null if no resolver is found for remoteAuthority
+     * @param remoteAuthority Remote authority identifier
+     * @param uri URI components
+     * @return Canonical URI components or null
+     */
+    fun getCanonicalURI(remoteAuthority: String, uri: Map<String, Any?>): LazyPromise
+    
+    /**
+     * Start extension host
+     * @param extensionsDelta Extension description delta
+     */
+    fun startExtensionHost(extensionsDelta: Map<String, Any?>): LazyPromise
+    
+    /**
+     * Execute extension tests
+     * @return Test result code
+     */
+    fun extensionTestsExecute(): LazyPromise
+    
+    /**
+     * Activate extension by event
+     * @param activationEvent Activation event
+     * @param activationKind Activation kind
+     */
+    fun activateByEvent(activationEvent: String, activationKind: Int): LazyPromise
+    
+    /**
+     * Activate extension
+     * @param extensionId Extension ID
+     * @param reason Activation reason
+     * @return Whether activation succeeded
+     */
+    fun activate(extensionId: String, reason: Map<String, Any?>): LazyPromise
+    
+    /**
+     * Set remote environment
+     * @param env Environment variables
+     */
+    fun setRemoteEnvironment(env: Map<String, String?>): LazyPromise
+    
+    /**
+     * Update remote connection data
+     * @param connectionData Connection data
+     */
+    fun updateRemoteConnectionData(connectionData: Map<String, Any?>): LazyPromise
+    
+    /**
+     * Delta update extensions
+     * @param extensionsDelta Extension description delta
+     */
+    fun deltaExtensions(extensionsDelta: Map<String, Any?>): LazyPromise
+    
+    /**
+     * Test latency
+     * @param n Test parameter
+     * @return Latency value
+     */
+    fun test_latency(n: Int): LazyPromise
+    
+    /**
+     * Test upload
+     * @param b Binary buffer
+     * @return Result
+     */
+    fun test_up(b: ByteArray): LazyPromise
+    
+    /**
+     * Test download
+     * @param size Size
+     * @return Binary buffer
+     */
+    fun test_down(size: Int): LazyPromise
+}
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/interfaces/ExtHostFileSystemEventServiceProxy.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/interfaces/ExtHostFileSystemEventServiceProxy.kt
new file mode 100644
index 000000000..f8ecd7284
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/interfaces/ExtHostFileSystemEventServiceProxy.kt
@@ -0,0 +1,88 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.ipc.proxy.interfaces
+
+import java.util.concurrent.CompletableFuture
+
+/**
+ * File system events interface
+ * Corresponds to FileSystemEvents in VSCode
+ */
+data class FileSystemEvents(
+    val session: String? = null,
+    val created: List<Map<String, Any?>>, // UriComponents
+    val changed: List<Map<String, Any?>>, // UriComponents
+    val deleted: List<Map<String, Any?>>  // UriComponents
+)
+
+/**
+ * Source-target file pair
+ * Corresponds to SourceTargetPair in VSCode
+ */
+data class SourceTargetPair(
+    val source: Map<String, Any?>? = null, // UriComponents
+    val target: Map<String, Any?>          // UriComponents
+)
+
+/**
+ * File operation participation response
+ * Corresponds to IWillRunFileOperationParticipation in VSCode
+ */
+data class FileOperationParticipation(
+    val edit: Map<String, Any?>, // IWorkspaceEditDto
+    val extensionNames: List<String>
+)
+
+/**
+ * File operation type
+ * Corresponds to FileOperation in VSCode
+ */
+enum class FileOperation {
+    CREATE,
+    DELETE,
+    RENAME,
+    COPY,
+    MOVE
+}
+
+/**
+ * Extension host file system event service interface
+ * Corresponds to ExtHostFileSystemEventServiceShape in VSCode
+ */
+interface ExtHostFileSystemEventServiceProxy {
+    /**
+     * File event notification
+     * Corresponds to $onFileEvent in VSCode
+     * @param events File system events
+     */
+    fun onFileEvent(events: FileSystemEvents)
+
+    /**
+     * Will run file operation notification
+     * Corresponds to $onWillRunFileOperation in VSCode
+     * @param operation File operation type
+     * @param files List of source-target file pairs
+     * @param timeout Timeout
+     * @param token Cancellation token
+     * @return File operation participation response
+     */
+    fun onWillRunFileOperation(
+        operation: FileOperation,
+        files: List<SourceTargetPair>,
+        timeout: Int,
+        token: Any?
+    ): CompletableFuture<FileOperationParticipation?>
+
+    /**
+     * Did run file operation notification
+     * Corresponds to $onDidRunFileOperation in VSCode
+     * @param operation File operation type
+     * @param files List of source-target file pairs
+     */
+    fun onDidRunFileOperation(
+        operation: FileOperation,
+        files: List<SourceTargetPair>
+    )
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/interfaces/ExtHostTerminalServiceProxy.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/interfaces/ExtHostTerminalServiceProxy.kt
new file mode 100644
index 000000000..59642ca73
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/interfaces/ExtHostTerminalServiceProxy.kt
@@ -0,0 +1,138 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.ipc.proxy.interfaces
+
+import ai.kilocode.jetbrains.ipc.proxy.LazyPromise
+
+data class TerminalCommandDto(
+    val commandLine: String?,
+    val cwd: String?,
+    val exitCode: Int?,
+    val output: String?
+)
+
+data class TerminalTabAction(
+    val id: String,
+    val label: String,
+    val icon: Any?
+)
+
+data class ReconnectionProperties(
+    val ownerId: String,
+    val data: Any?
+)
+
+data class ShellLaunchConfigDto(
+    val name: String?,
+    val executable: String?,
+    val args: List<String>?,
+    val cwd: String?,
+    val env: Map<String, String>?,
+    val useShellEnvironment: Boolean?,
+    val hideFromUser: Boolean?,
+    val reconnectionProperties: Map<String, ReconnectionProperties>?,
+    val type: String?,
+    val isFeatureTerminal: Boolean?,
+    val tabActions: List<TerminalTabAction>?,
+    val shellIntegrationEnvironmentReporting: Boolean?
+)
+
+data class TerminalDimensionsDto(
+    val columns: Int,
+    val rows: Int
+)
+
+data class TerminalLaunchError(
+    val message: String,
+    val code: Int?
+)
+
+data class TerminalProfile(
+    val profileName: String,
+    val path: String,
+    val isDefault: Boolean,
+    /**
+     * Whether the terminal profile contains a potentially unsafe {@link path}. For example, the path
+     * `C:\Cygwin` is the default install for Cygwin on Windows, but it could be created by any
+     * user in a multi-user environment. As such, we don't want to blindly present it as a profile
+     * without a warning.
+     */
+    val isUnsafePath: Boolean?,
+    /**
+     * An additional unsafe path that must exist, for example a script that appears in {@link args}.
+     */
+    val requiresUnsafePath: String?,
+    val isAutoDetected: Boolean?,
+    /**
+     * Whether the profile path was found on the `$PATH` environment variable, if so it will be
+     * cleaner to display this profile in the UI using only `basename(path)`.
+     */
+    val isFromPath: Boolean?,
+    val args: List<String>?,
+    val env: Map<String, String>?,
+    val overrideName: Boolean?,
+    val color: String?,
+    val icon: Any?
+)
+
+//export interface ExtHostTerminalServiceShape {
+//    $acceptTerminalClosed(id: number, exitCode: number | undefined, exitReason: TerminalExitReason): void;
+//    $acceptTerminalOpened(id: number, extHostTerminalId: string | undefined, name: string, shellLaunchConfig: IShellLaunchConfigDto): void;
+//    $acceptActiveTerminalChanged(id: number | null): void;
+//    $acceptTerminalProcessId(id: number, processId: number): void;
+//    $acceptTerminalProcessData(id: number, data: string): void;
+//    $acceptDidExecuteCommand(id: number, command: ITerminalCommandDto): void;
+//    $acceptTerminalTitleChange(id: number, name: string): void;
+//    $acceptTerminalDimensions(id: number, cols: number, rows: number): void;
+//    $acceptTerminalMaximumDimensions(id: number, cols: number, rows: number): void;
+//    $acceptTerminalInteraction(id: number): void;
+//    $acceptTerminalSelection(id: number, selection: string | undefined): void;
+//    $acceptTerminalShellType(id: number, shellType: TerminalShellType | undefined): void;
+//    $startExtensionTerminal(id: number, initialDimensions: ITerminalDimensionsDto | undefined): Promise<ITerminalLaunchError | undefined>;
+//    $acceptProcessAckDataEvent(id: number, charCount: number): void;
+//    $acceptProcessInput(id: number, data: string): void;
+//    $acceptProcessResize(id: number, cols: number, rows: number): void;
+//    $acceptProcessShutdown(id: number, immediate: boolean): void;
+//    $acceptProcessRequestInitialCwd(id: number): void;
+//    $acceptProcessRequestCwd(id: number): void;
+//    $acceptProcessRequestLatency(id: number): Promise<number>;
+//    $provideLinks(id: number, line: string): Promise<ITerminalLinkDto[]>;
+//    $activateLink(id: number, linkId: number): void;
+//    $initEnvironmentVariableCollections(collections: [string, ISerializableEnvironmentVariableCollection][]): void;
+//    $acceptDefaultProfile(profile: ITerminalProfile, automationProfile: ITerminalProfile): void;
+//    $createContributedProfileTerminal(id: string, options: ICreateContributedTerminalProfileOptions): Promise<void>;
+//    $provideTerminalQuickFixes(id: string, matchResult: TerminalCommandMatchResultDto, token: CancellationToken): Promise<SingleOrMany<TerminalQuickFix> | undefined>;
+//    $provideTerminalCompletions(id: string, options: ITerminalCompletionContextDto, token: CancellationToken): Promise<TerminalCompletionListDto | undefined>;
+//}
+
+interface ExtHostTerminalServiceProxy {
+    fun acceptTerminalClosed(id: Int, exitCode: Int?, exitReason: Int)
+    fun acceptTerminalOpened(id: Int, extHostTerminalId: String?, name: String, shellLaunchConfig: ShellLaunchConfigDto)
+    fun acceptActiveTerminalChanged(id: Int?)
+    fun acceptTerminalProcessId(id: Int, processId: Int)
+    fun acceptTerminalProcessData(id: Int, data: String)
+    fun acceptDidExecuteCommand(id: Int, command: TerminalCommandDto)
+    fun acceptTerminalTitleChange(id: Int, name: String)
+    fun acceptTerminalDimensions(id: Int, cols: Int, rows: Int)
+    fun acceptTerminalMaximumDimensions(id: Int, cols: Int, rows: Int)
+    fun acceptTerminalInteraction(id: Int)
+    fun acceptTerminalSelection(id: Int, selection: String?)
+    fun acceptTerminalShellType(id: Int, shellType: String?)
+    fun startExtensionTerminal(id: Int, initialDimensions: TerminalDimensionsDto?): LazyPromise
+    fun acceptProcessAckDataEvent(id: Int, charCount: Int)
+    fun acceptProcessInput(id: Int, data: String)
+    fun acceptProcessResize(id: Int, cols: Int, rows: Int)
+    fun acceptProcessShutdown(id: Int, immediate: Boolean)
+    fun acceptProcessRequestInitialCwd(id: Int)
+    fun acceptProcessRequestCwd(id: Int)
+    fun acceptProcessRequestLatency(id: Int): LazyPromise
+    fun provideLinks(id: Int, line: String): LazyPromise
+    fun activateLink(id: Int, linkId: Int)
+    fun initEnvironmentVariableCollections(collections: List<Pair<String, Any>>)
+    fun acceptDefaultProfile(profile: TerminalProfile, automationProfile: TerminalProfile)
+    fun createContributedProfileTerminal(id: String, options: Any): LazyPromise
+    fun provideTerminalQuickFixes(id: String, matchResult: Any, token: Any): LazyPromise
+    fun provideTerminalCompletions(id: String, options: Any, token: Any): LazyPromise
+}
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/interfaces/ExtHostTerminalShellIntegrationProxy.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/interfaces/ExtHostTerminalShellIntegrationProxy.kt
new file mode 100644
index 000000000..99e716c40
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/interfaces/ExtHostTerminalShellIntegrationProxy.kt
@@ -0,0 +1,18 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.ipc.proxy.interfaces
+
+import ai.kilocode.jetbrains.util.URI
+
+
+interface ExtHostTerminalShellIntegrationProxy {
+    fun shellIntegrationChange(instanceId: Int)
+    fun shellExecutionStart(instanceId: Int, commandLineValue: String, commandLineConfidence: Int, isTrusted: Boolean, cwd: URI? )
+    fun shellExecutionEnd(instanceId: Int, commandLineValue: String, commandLineConfidence: Int, isTrusted: Boolean, exitCode: Int?)
+    fun shellExecutionData(instanceId: Int, data: String)
+    fun shellEnvChange(instanceId: Int, shellEnvKeys: Array<String>, shellEnvValues: Array<String>, isTrusted: Boolean)
+    fun cwdChange(instanceId: Int, cwd: URI?)
+    fun closeTerminal(instanceId: Int)
+}
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/interfaces/ExtHostWebviewViewsProxy.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/interfaces/ExtHostWebviewViewsProxy.kt
new file mode 100644
index 000000000..a6f233a0b
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/interfaces/ExtHostWebviewViewsProxy.kt
@@ -0,0 +1,46 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.ipc.proxy.interfaces
+
+/**
+ * Extension host WebView views service interface
+ * Corresponds to ExtHostWebviewViewsShape in VSCode
+ */
+interface ExtHostWebviewViewsProxy {
+    /**
+     * Resolve WebView view
+     * @param webviewHandle WebView handle
+     * @param viewType View type
+     * @param title Title
+     * @param state State data
+     * @param cancellation Cancellation token
+     * @return Promise when completed
+     */
+    fun resolveWebviewView(
+        webviewHandle: String,
+        viewType: String,
+        title: String?,
+        state: Any?,
+        cancellation: Any?
+    )
+    
+    /**
+     * Triggered when WebView view visibility changes
+     * @param webviewHandle WebView handle
+     * @param visible Whether visible
+     */
+    fun onDidChangeWebviewViewVisibility(
+        webviewHandle: String,
+        visible: Boolean
+    )
+    
+    /**
+     * Dispose WebView view
+     * @param webviewHandle WebView handle
+     */
+    fun disposeWebviewView(
+        webviewHandle: String
+    )
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/interfaces/ExtHostWebviewsProxy.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/interfaces/ExtHostWebviewsProxy.kt
new file mode 100644
index 000000000..00666c38d
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/interfaces/ExtHostWebviewsProxy.kt
@@ -0,0 +1,40 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.ipc.proxy.interfaces
+
+import ai.kilocode.jetbrains.actors.WebviewHandle
+import ai.kilocode.jetbrains.ipc.proxy.SerializableObjectWithBuffers
+
+/**
+ * Extension host Webviews shape interface
+ * Corresponds to ExtHostWebviewsShape interface in TypeScript
+ */
+interface ExtHostWebviewsProxy {
+    /**
+     * Handle message received from Webview
+     * Corresponds to $onMessage method in TypeScript interface
+     *
+     * @param handle Webview handle
+     * @param jsonSerializedMessage JSON serialized message
+     * @param buffers Array of binary buffers
+     */
+    fun onMessage(
+        handle: WebviewHandle,
+        jsonSerializedMessage: String,
+        buffers: SerializableObjectWithBuffers<List<ByteArray>>
+    )
+
+    /**
+     * Handle missing Content Security Policy (CSP)
+     * Corresponds to $onMissingCsp method in TypeScript interface
+     *
+     * @param handle Webview handle
+     * @param extensionId Extension ID
+     */
+    fun onMissingCsp(
+        handle: WebviewHandle,
+        extensionId: String
+    )
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/interfaces/ExtHostWorkspaceProxy.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/interfaces/ExtHostWorkspaceProxy.kt
new file mode 100644
index 000000000..6fbe34f97
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/interfaces/ExtHostWorkspaceProxy.kt
@@ -0,0 +1,43 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.ipc.proxy.interfaces
+
+import ai.kilocode.jetbrains.model.WorkspaceData
+import ai.kilocode.jetbrains.util.URIComponents
+import java.net.URI
+
+/**
+ * Extension host workspace service interface
+ * Corresponds to ExtHostWorkspace in VSCode
+ */
+interface ExtHostWorkspaceProxy {
+    /**
+     * Initialize workspace
+     * @param workspace Workspace configuration
+     * @param trusted Whether trusted
+     */
+    fun initializeWorkspace(workspace: WorkspaceData?, trusted: Boolean)
+
+    /**
+     * Accept workspace data
+     * @param workspace Workspace data
+     */
+    fun acceptWorkspaceData(workspace: WorkspaceData?)
+
+    /**
+     * Handle text search result
+     */
+    fun handleTextSearchResult(result: Any, requestId: Long)
+
+    /**
+     * Grant workspace trust
+     */
+    fun onDidGrantWorkspaceTrust()
+
+    /**
+     * Get edit session identifier
+     */
+    fun getEditSessionIdentifier(folder: URIComponents, token: Any): String?
+}
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/logger/FileRPCProtocolLogger.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/logger/FileRPCProtocolLogger.kt
new file mode 100644
index 000000000..9e9fc19d4
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/logger/FileRPCProtocolLogger.kt
@@ -0,0 +1,278 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.ipc.proxy.logger
+
+import com.intellij.openapi.Disposable
+import com.intellij.openapi.diagnostic.Logger
+import ai.kilocode.jetbrains.ipc.proxy.IRPCProtocolLogger
+import ai.kilocode.jetbrains.ipc.proxy.RequestInitiator
+import kotlinx.coroutines.CoroutineScope
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.SupervisorJob
+import kotlinx.coroutines.launch
+import java.io.BufferedWriter
+import java.io.File
+import java.io.FileWriter
+import java.nio.file.Files
+import java.nio.file.Path
+import java.nio.file.Paths
+import java.text.SimpleDateFormat
+import java.util.*
+import java.util.concurrent.LinkedBlockingQueue
+import java.util.concurrent.atomic.AtomicBoolean
+import kotlin.concurrent.thread
+
+/**
+ * File-based RPC protocol logger
+ * Logs RPC communication to a file
+ */
+class FileRPCProtocolLogger : IRPCProtocolLogger, Disposable {
+    private val logger = Logger.getInstance(FileRPCProtocolLogger::class.java)
+    
+   // Total incoming bytes
+   private var totalIncoming = 0
+    
+   // Total outgoing bytes
+   private var totalOutgoing = 0
+    
+   // Log directory
+   private var logDir: Path? = null
+    
+   // Log file
+   private var logFile: File? = null
+    
+   // Log file writer
+   private var writer: BufferedWriter? = null
+    
+   // Log queue
+   private val logQueue = LinkedBlockingQueue<String>()
+    
+   // Whether initialized
+   private val isInitialized = AtomicBoolean(false)
+    
+   // Whether disposed
+   private val isDisposed = AtomicBoolean(false)
+    
+   // Logger thread
+   private var loggerThread: Thread? = null
+    
+   // Coroutine scope
+   private val coroutineScope = CoroutineScope(SupervisorJob() + Dispatchers.IO)
+
+   // Whether logging is enabled
+   private val isEnabled = false
+    
+    init {
+        if(!isEnabled) {
+           logger.warn("FileRPCProtocolLogger not enabled")
+        }else {
+           // Create log directory
+           val userHome = System.getProperty("user.home")
+           logDir = Paths.get(userHome, ".ext_host", "log")
+
+           // Ensure directory exists
+           if (!Files.exists(logDir)) {
+               Files.createDirectories(logDir)
+           }
+
+           // Create log filename, use timestamp for uniqueness
+           val timestamp = SimpleDateFormat("yyyyMMdd_HHmmss").format(Date())
+           logFile = logDir?.resolve("rpc_${timestamp}-idea.log")?.toFile()
+
+           // Create file writer
+           writer = BufferedWriter(FileWriter(logFile))
+
+           // Start logger thread
+           startLoggerThread()
+
+           // Write log header
+           val startTime = formatTimestampWithMilliseconds(Date())
+           val header = """
+               |-------------------------------------------------------------
+               | IDEA RPC Protocol Logger
+               | Started at: $startTime
+               | Log file: ${logFile?.absolutePath}
+               |-------------------------------------------------------------
+           
+           """.trimMargin()
+
+            logQueue.add(header)
+
+            isInitialized.set(true)
+           logger.info("FileRPCProtocolLogger initialized successfully, log file: ${logFile?.absolutePath}")
+        }
+    }
+    
+    /**
+     * Start logger thread
+     */
+    private fun startLoggerThread() {
+        loggerThread = thread(start = true, isDaemon = true, name = "RPC-Logger") {
+            try {
+                while (!isDisposed.get()) {
+                    val logEntry = logQueue.take()
+                    try {
+                        writer?.write(logEntry)
+                        writer?.newLine()
+                        writer?.flush()
+                    } catch (e: Exception) {
+                       logger.error("Failed to write log file", e)
+                    }
+                }
+            } catch (e: InterruptedException) {
+               // Thread interrupted, exit normally
+            } catch (e: Exception) {
+               logger.error("Logger thread exception", e)
+            }
+        }
+    }
+    
+    /**
+     * Log incoming message
+     */
+    override fun logIncoming(msgLength: Int, req: Int, initiator: RequestInitiator, str: String, data: Any?) {
+        if (!isInitialized.get()) {
+            return
+        }
+        
+        totalIncoming += msgLength
+        logMessage("Ext → IDEA", totalIncoming, msgLength, req, initiator, str, data)
+    }
+    
+    /**
+     * Log outgoing message
+     */
+    override fun logOutgoing(msgLength: Int, req: Int, initiator: RequestInitiator, str: String, data: Any?) {
+        if (!isInitialized.get()) {
+            return
+        }
+        
+        totalOutgoing += msgLength
+        logMessage("IDEA → Ext", totalOutgoing, msgLength, req, initiator, str, data)
+    }
+    
+    /**
+     * Log message
+     */
+    private fun logMessage(
+        direction: String,
+        totalLength: Int,
+        msgLength: Int,
+        req: Int,
+        initiator: RequestInitiator,
+        str: String,
+        data: Any?
+    ) {
+        try {
+            val timestamp = formatTimestampWithMilliseconds(Date())
+            val initiatorStr = when (initiator) {
+                RequestInitiator.LocalSide -> "Local"
+                RequestInitiator.OtherSide -> "Other"
+            }
+            
+            val logEntry = StringBuilder()
+            logEntry.append("[$timestamp] ")
+            logEntry.append("[$direction] ")
+            logEntry.append("[Total: ${totalLength.toString().padStart(7)}] ")
+            logEntry.append("[Len: ${msgLength.toString().padStart(5)}] ")
+            logEntry.append("[${req.toString().padStart(5)}] ")
+            logEntry.append("[$initiatorStr] ")
+            logEntry.append(str)
+            
+            if (data != null) {
+                val dataStr = if (str.endsWith("(")) {
+                    "$data)"
+                } else {
+                    data.toString()
+                }
+                logEntry.append(" ").append(dataStr)
+            }
+            
+           // Use coroutine to asynchronously add to queue
+           coroutineScope.launch(Dispatchers.IO) {
+               logQueue.add(logEntry.toString())
+           }
+        } catch (e: Exception) {
+           logger.error("Failed to format log message", e)
+        }
+    }
+    
+    /**
+     * Safely convert data to string
+     */
+    private fun stringify(data: Any?): String {
+        return try {
+            when (data) {
+                is Map<*, *> -> data.toString()
+                is Collection<*> -> data.toString()
+                is Array<*> -> data.contentToString()
+                else -> data.toString()
+            }
+        } catch (e: Exception) {
+           "Unserializable data: ${e.message}"
+        }
+    }
+    
+    /**
+     * Format timestamp with milliseconds
+     */
+    private fun formatTimestampWithMilliseconds(date: Date): String {
+        val calendar = Calendar.getInstance()
+        calendar.time = date
+        
+        val year = calendar.get(Calendar.YEAR)
+        val month = (calendar.get(Calendar.MONTH) + 1).toString().padStart(2, '0')
+        val day = calendar.get(Calendar.DAY_OF_MONTH).toString().padStart(2, '0')
+        val hours = calendar.get(Calendar.HOUR_OF_DAY).toString().padStart(2, '0')
+        val minutes = calendar.get(Calendar.MINUTE).toString().padStart(2, '0')
+        val seconds = calendar.get(Calendar.SECOND).toString().padStart(2, '0')
+        val milliseconds = calendar.get(Calendar.MILLISECOND).toString().padStart(3, '0')
+        
+        return "$year-$month-$day $hours:$minutes:$seconds.$milliseconds"
+    }
+    
+    /**
+     * Release resources
+     */
+    override fun dispose() {
+        if (isDisposed.getAndSet(true)) {
+            return
+        }
+        
+        try {
+           // Write log footer
+           val endTime = formatTimestampWithMilliseconds(Date())
+           val footer = """
+               |-------------------------------------------------------------
+               | IDEA RPC Protocol Logger
+               | Ended at: $endTime
+               | Total incoming: $totalIncoming bytes
+               | Total outgoing: $totalOutgoing bytes
+               |-------------------------------------------------------------
+           """.trimMargin()
+            
+            logQueue.add(footer)
+            
+           // Wait for log queue to empty
+           var retries = 0
+           while (logQueue.isNotEmpty() && retries < 10) {
+               Thread.sleep(100)
+               retries++
+           }
+            
+           // Close writer
+           writer?.close()
+           writer = null
+            
+           // Interrupt logger thread
+           loggerThread?.interrupt()
+           loggerThread = null
+            
+           logger.info("FileRPCProtocolLogger released")
+        } catch (e: Exception) {
+           logger.error("Failed to release FileRPCProtocolLogger", e)
+        }
+    }
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/uri/UriIpc.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/uri/UriIpc.kt
new file mode 100644
index 000000000..fe968a971
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/uri/UriIpc.kt
@@ -0,0 +1,143 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.ipc.proxy.uri
+
+import java.net.URI
+
+/**
+ * URI parts
+ * Corresponds to UriParts in VSCode
+ */
+data class UriParts(
+    val scheme: String,
+    val authority: String? = null,
+    val path: String,
+    val query: String? = null,
+    val fragment: String? = null
+)
+
+/**
+ * Raw URI transformer interface
+ * Corresponds to IRawURITransformer in VSCode
+ */
+interface IRawURITransformer {
+    /**
+     * Transform incoming URI
+     */
+    fun transformIncoming(uri: UriParts): UriParts
+    
+    /**
+     * Transform outgoing URI
+     */
+    fun transformOutgoing(uri: UriParts): UriParts
+    
+    /**
+     * Transform outgoing scheme
+     */
+    fun transformOutgoingScheme(scheme: String): String
+}
+
+/**
+ * URI transformer interface
+ * Corresponds to IURITransformer in VSCode
+ */
+interface IURITransformer {
+    /**
+     * Transform incoming URI
+     */
+    fun transformIncoming(uri: URI): URI
+    
+    /**
+     * Transform outgoing URI
+     */
+    fun transformOutgoing(uri: URI): URI
+    
+    /**
+     * Transform outgoing URI string
+     */
+    fun transformOutgoingURI(uri: String): String
+}
+
+/**
+ * URI transformer
+ * Corresponds to URITransformer in VSCode
+ */
+class URITransformer(private val transformer: IRawURITransformer) : IURITransformer {
+    
+    override fun transformIncoming(uri: URI): URI {
+        val uriParts = UriParts(
+            scheme = uri.scheme,
+            authority = uri.authority,
+            path = uri.path,
+            query = uri.query,
+            fragment = uri.fragment
+        )
+        
+        val transformedParts = transformer.transformIncoming(uriParts)
+        
+        return buildURI(transformedParts)
+    }
+    
+    override fun transformOutgoing(uri: URI): URI {
+        val uriParts = UriParts(
+            scheme = uri.scheme,
+            authority = uri.authority,
+            path = uri.path,
+            query = uri.query,
+            fragment = uri.fragment
+        )
+        
+        val transformedParts = transformer.transformOutgoing(uriParts)
+        
+        return buildURI(transformedParts)
+    }
+    
+    override fun transformOutgoingURI(uri: String): String {
+        try {
+            return transformOutgoing(URI(uri)).toString()
+        } catch (e: Exception) {
+                        // If the URI is invalid, try to convert only the scheme part
+                        val schemeEndIndex = uri.indexOf(':')
+            if (schemeEndIndex > 0) {
+                val scheme = uri.substring(0, schemeEndIndex)
+                val transformedScheme = transformer.transformOutgoingScheme(scheme)
+                if (transformedScheme !== scheme) {
+                    return transformedScheme + uri.substring(schemeEndIndex)
+                }
+            }
+            return uri
+        }
+    }
+    
+    /**
+     * Build URI from UriParts
+     */
+    private fun buildURI(parts: UriParts): URI {
+        val builder = StringBuilder()
+        
+        // Add scheme
+        builder.append(parts.scheme).append(":")
+        
+        // Add authority (if present)
+        if (!parts.authority.isNullOrEmpty()) {
+            builder.append("//").append(parts.authority)
+        }
+        
+        // Add path
+        builder.append(parts.path)
+        
+        // Add query (if present)
+        if (!parts.query.isNullOrEmpty()) {
+            builder.append("?").append(parts.query)
+        }
+        
+        // Add fragment (if present)
+        if (!parts.fragment.isNullOrEmpty()) {
+            builder.append("#").append(parts.fragment)
+        }
+        
+        return URI(builder.toString())
+    }
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/uri/UriTransformer.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/uri/UriTransformer.kt
new file mode 100644
index 000000000..61eddf09b
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/uri/UriTransformer.kt
@@ -0,0 +1,86 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.ipc.proxy.uri
+
+/**
+ * Create raw URI transformer
+ * Corresponds to createRawURITransformer in VSCode
+ */
+fun createRawURITransformer(remoteAuthority: String): IRawURITransformer {
+    return object : IRawURITransformer {
+        override fun transformIncoming(uri: UriParts): UriParts {
+            return when (uri.scheme) {
+                "vscode-remote" -> UriParts(
+                    scheme = "file",
+                    path = uri.path,
+                    query = uri.query,
+                    fragment = uri.fragment
+                )
+                "file" -> UriParts(
+                    scheme = "vscode-local",
+                    path = uri.path,
+                    query = uri.query,
+                    fragment = uri.fragment
+                )
+                else -> uri
+            }
+        }
+
+        override fun transformOutgoing(uri: UriParts): UriParts {
+            return when (uri.scheme) {
+                "file" -> UriParts(
+                    scheme = "vscode-remote",
+                    authority = remoteAuthority,
+                    path = uri.path,
+                    query = uri.query,
+                    fragment = uri.fragment
+                )
+                "vscode-local" -> UriParts(
+                    scheme = "file",
+                    path = uri.path,
+                    query = uri.query,
+                    fragment = uri.fragment
+                )
+                else -> uri
+            }
+        }
+
+        override fun transformOutgoingScheme(scheme: String): String {
+            return when (scheme) {
+                "file" -> "vscode-remote"
+                "vscode-local" -> "file"
+                else -> scheme
+            }
+        }
+    }
+}
+
+/**
+ * Create URI transformer
+ * Corresponds to createURITransformer in VSCode
+ */
+fun createURITransformer(remoteAuthority: String): IURITransformer {
+    return URITransformer(createRawURITransformer(remoteAuthority))
+}
+
+/**
+ * JSON converter for URI transformation
+ * Used for conversion between string and URI
+ */
+class UriReplacer(private val transformer: IURITransformer) : (String, Any?) -> Any? {
+    
+    override fun invoke(key: String, value: Any?): Any? {
+        if (value is String && (
+            key == "uri" || 
+            key == "documentUri" || 
+            key == "targetUri" || 
+            key == "sourceUri" || 
+            key.endsWith("Uri"))
+        ) {
+            return transformer.transformOutgoingURI(value)
+        }
+        return value
+    }
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/uri/UriTransformerExample.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/uri/UriTransformerExample.kt
new file mode 100644
index 000000000..29f1525ea
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ipc/proxy/uri/UriTransformerExample.kt
@@ -0,0 +1,61 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.ipc.proxy.uri
+
+import com.intellij.openapi.diagnostic.Logger
+import ai.kilocode.jetbrains.ipc.IMessagePassingProtocol
+import ai.kilocode.jetbrains.ipc.ISocket
+import ai.kilocode.jetbrains.ipc.PersistentProtocol
+import ai.kilocode.jetbrains.ipc.proxy.RPCProtocol
+import ai.kilocode.jetbrains.ipc.proxy.createProxyIdentifier
+import java.net.URI
+
+/**
+ * Example usage of URI transformer
+ */
+object UriTransformerExample {
+    private val LOG = Logger.getInstance(UriTransformerExample::class.java)
+    
+    /**
+     * Example: Create and use URI transformer
+     */
+    fun uriTransformerExample() {
+        // Create URI transformer
+        val remoteAuthority = "your-remote-host.example.com"
+        val uriTransformer = createURITransformer(remoteAuthority)
+        
+        // Test URI transformation
+        val localUri = URI("file:///path/to/file.txt")
+        val remoteUri = uriTransformer.transformOutgoing(localUri)
+        LOG.info("Transformed URI: $remoteUri")
+        
+        // Transform back
+        val convertedBackUri = uriTransformer.transformIncoming(remoteUri)
+        LOG.info("Transformed back URI: $convertedBackUri")
+        
+        // Create UriReplacer for URI transformation in JSON objects
+        val uriReplacer = UriReplacer(uriTransformer)
+        val result = uriReplacer("documentUri", "file:///path/to/document.txt")
+        LOG.info("Replaced URI: $result")
+    }
+    
+    /**
+     * Example: Use URI transformer in RPC protocol
+     */
+    fun rpcWithUriTransformerExample(socket: ISocket) {
+        // Create URI transformer
+        val remoteAuthority = "your-remote-host.example.com"
+        val uriTransformer = createURITransformer(remoteAuthority)
+        
+        // Create protocol object
+        val persistentProtocol = PersistentProtocol(PersistentProtocol.PersistentProtocolOptions(socket))
+        
+        // Create RPC protocol object, pass in URI transformer
+        val rpcProtocol = RPCProtocol(persistentProtocol, null, uriTransformer)
+        
+        // Now the RPC protocol will automatically handle URI transformation
+        // During serialization and deserialization, URIs will be transformed according to the configured rules
+    }
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/model/WorkspaceData.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/model/WorkspaceData.kt
new file mode 100644
index 000000000..62d5d1094
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/model/WorkspaceData.kt
@@ -0,0 +1,53 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.model
+
+import ai.kilocode.jetbrains.util.URI
+import ai.kilocode.jetbrains.util.URIComponents
+
+/**
+ * Workspace base data
+ * Corresponds to IStaticWorkspaceData in VSCode
+ */
+data class StaticWorkspaceData(
+    val id: String,
+    val name: String,
+    val transient: Boolean? = null,
+    val configuration: URI? = null,
+    val isUntitled: Boolean? = null
+)
+
+/**
+ * Workspace folder
+ * Corresponds to elements in IWorkspaceData.folders in VSCode
+ */
+data class WorkspaceFolder(
+    val uri: URI,
+    val name: String,
+    val index: Int
+)
+
+/**
+ * Workspace data
+ * Corresponds to IWorkspaceData in VSCode
+ */
+data class WorkspaceData(
+    val id: String,
+    val name: String,
+    val transient: Boolean? = null,
+    val configuration: URI? = null,
+    val isUntitled: Boolean? = null,
+    val folders: List<WorkspaceFolder> = emptyList()
+) {
+    // Create WorkspaceData from StaticWorkspaceData
+    constructor(staticData: StaticWorkspaceData, folders: List<WorkspaceFolder> = emptyList()) : this(
+        id = staticData.id,
+        name = staticData.name,
+        transient = staticData.transient,
+        configuration = staticData.configuration,
+        isUntitled = staticData.isUntitled,
+        folders = folders
+    )
+}
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/plugin/SystemObjectProvider.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/plugin/SystemObjectProvider.kt
new file mode 100644
index 000000000..aa77523ea
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/plugin/SystemObjectProvider.kt
@@ -0,0 +1,69 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.plugin
+
+import com.intellij.openapi.application.ApplicationManager
+import com.intellij.openapi.diagnostic.Logger
+import com.intellij.openapi.project.Project
+import java.util.concurrent.ConcurrentHashMap
+
+/**
+ * System Object Provider
+ * Provides unified access to IDEA system objects
+ */
+object SystemObjectProvider {
+    private val logger = Logger.getInstance(SystemObjectProvider::class.java)
+    
+        // Mapping for storing system objects
+        private val systemObjects = ConcurrentHashMap<String, Any>()
+
+    
+        /**
+         * System object keys
+         */
+    object Keys {
+        const val APPLICATION = "application"
+            // More system object keys can be added
+    }
+    
+        /**
+         * Initialize the system object provider
+         * @param project current project
+         */
+    fun initialize(project: Project) {
+        logger.info("Initializing SystemObjectProvider with project: ${project.name}")
+
+        register(Keys.APPLICATION, ApplicationManager.getApplication())
+    }
+    
+        /**
+         * Register a system object
+         * @param key object key
+         * @param obj object instance
+         */
+    fun register(key: String, obj: Any) {
+        systemObjects[key] = obj
+        logger.debug("Registered system object: $key")
+    }
+    
+        /**
+         * Get a system object
+         * @param key object key
+         * @return object instance or null
+         */
+    @Suppress("UNCHECKED_CAST")
+    fun <T> get(key: String): T? {
+        return systemObjects[key] as? T
+    }
+    
+
+        /**
+         * Clean up resources
+         */
+    fun dispose() {
+        logger.info("Disposing SystemObjectProvider")
+        systemObjects.clear()
+    }
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/plugin/WecoderPlugin.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/plugin/WecoderPlugin.kt
new file mode 100644
index 000000000..79d787940
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/plugin/WecoderPlugin.kt
@@ -0,0 +1,406 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.plugin
+
+import java.nio.file.Files
+import java.nio.file.StandardCopyOption
+
+import com.intellij.openapi.components.Service
+import com.intellij.openapi.diagnostic.Logger
+import com.intellij.openapi.project.Project
+import com.intellij.openapi.startup.StartupActivity
+import com.intellij.openapi.util.Disposer
+import com.intellij.openapi.Disposable
+import ai.kilocode.jetbrains.core.ExtensionProcessManager
+import ai.kilocode.jetbrains.core.ExtensionSocketServer
+import ai.kilocode.jetbrains.core.ServiceProxyRegistry
+import ai.kilocode.jetbrains.webview.WebViewManager
+import ai.kilocode.jetbrains.workspace.WorkspaceFileChangeManager
+import java.util.concurrent.CompletableFuture
+import kotlinx.coroutines.*
+import java.util.Properties
+import java.io.InputStream
+import com.intellij.ide.plugins.PluginManagerCore
+import com.intellij.openapi.extensions.PluginId
+import com.intellij.openapi.util.SystemInfo
+import com.intellij.ui.jcef.JBCefApp
+import com.intellij.openapi.application.ApplicationInfo
+import ai.kilocode.jetbrains.core.*
+import ai.kilocode.jetbrains.util.ExtensionUtils
+import ai.kilocode.jetbrains.util.PluginConstants
+import ai.kilocode.jetbrains.util.PluginResourceUtil
+import java.io.File
+
+/**
+ * WeCode IDEA plugin entry class
+ * Responsible for plugin initialization and lifecycle management
+ */
+class WecoderPlugin : StartupActivity.DumbAware {
+    companion object {
+        private val LOG = Logger.getInstance(WecoderPlugin::class.java)
+
+        /**
+         * Get plugin service instance
+         */
+        fun getInstance(project: Project): WecoderPluginService {
+            return project.getService(WecoderPluginService::class.java)
+                ?: error("WecoderPluginService not found")
+        }
+
+        /**
+         * Get the basePath of the current project
+         */
+        @JvmStatic
+        fun getProjectBasePath(project: Project): String? {
+            return project.basePath
+        }
+    }
+
+    override fun runActivity(project: Project) {
+        val appInfo = ApplicationInfo.getInstance()
+        val plugin = PluginManagerCore.getPlugin(PluginId.getId(PluginConstants.PLUGIN_ID))
+        val pluginVersion = plugin?.version ?: "unknown"
+        val osName = System.getProperty("os.name")
+        val osVersion = System.getProperty("os.version")
+        val osArch = System.getProperty("os.arch")
+        
+        LOG.info(
+            "Initializing Kilo Code plugin for project: ${project.name}, " +
+            "OS: $osName $osVersion ($osArch), " +
+            "IDE: ${appInfo.fullApplicationName} (build ${appInfo.build}), " +
+            "Plugin version: $pluginVersion, " +
+            "JCEF supported: ${JBCefApp.isSupported()}"
+        )
+
+        try {
+            // Initialize plugin service
+            val pluginService = getInstance(project)
+            pluginService.initialize(project)
+            
+            // Initialize WebViewManager and register to project Disposer
+            val webViewManager = project.getService(WebViewManager::class.java)
+            Disposer.register(project, webViewManager)
+            
+            // Register project-level resource disposal
+            Disposer.register(project, Disposable {
+                LOG.info("Disposing Kilo Code plugin for project: ${project.name}")
+                pluginService.dispose()
+                SystemObjectProvider.dispose()
+            })
+
+            LOG.info("Kilo Code plugin initialized successfully for project: ${project.name}")
+        } catch (e: Exception) {
+            LOG.error("Failed to initialize Kilo Code plugin", e)
+        }
+    }
+}
+
+/**
+ * Debug mode enum
+ */
+enum class DEBUG_MODE {
+    ALL,    // All debug modes
+    IDEA,   // Only IDEA plugin debug
+    NONE;   // Debug not enabled
+    
+    companion object {
+        /**
+         * Parse debug mode from string
+         * @param value String value
+         * @return Corresponding debug mode
+         */
+        fun fromString(value: String): DEBUG_MODE {
+            return when (value.lowercase()) {
+                "all" -> ALL
+                "idea" -> IDEA
+                "true" -> ALL  // backward compatibility
+                else -> NONE
+            }
+        }
+    }
+}
+
+/**
+ * Plugin service class, provides global access point and core functionality
+ */
+@Service(Service.Level.PROJECT)
+class WecoderPluginService(private var currentProject: Project) : Disposable {
+    private val LOG = Logger.getInstance(WecoderPluginService::class.java)
+    
+    // Whether initialized
+    @Volatile
+    private var isInitialized = false
+    
+    // Plugin initialization complete flag
+    private val initializationComplete = CompletableFuture<Boolean>()
+    
+    // Coroutine scope
+    private val coroutineScope = CoroutineScope(Dispatchers.IO + SupervisorJob())
+
+    // Service instances
+    private val socketServer = ExtensionSocketServer()
+    private val udsSocketServer = ExtensionUnixDomainSocketServer()
+    private val processManager = ExtensionProcessManager()
+    
+    companion object {
+        // Debug mode switch
+        @Volatile
+        private var DEBUG_TYPE: DEBUG_MODE = ai.kilocode.jetbrains.plugin.DEBUG_MODE.NONE
+
+        @Volatile
+        private var DEBUG_RESOURCE: String? = null
+        
+        // Debug mode connection address
+        private const val DEBUG_HOST = "127.0.0.1"
+        
+        // Debug mode connection port
+        private const val DEBUG_PORT = 51234
+
+
+        // Initialize configuration at class load
+        init {
+            try {
+                // Read debug mode setting from config file
+                val properties = Properties()
+                val configStream: InputStream? = WecoderPluginService::class.java.getResourceAsStream("/ai/kilocode/jetbrains/plugin/config/plugin.properties")
+                
+                if (configStream != null) {
+                    properties.load(configStream)
+                    configStream.close()
+                    
+                    // Read debug mode config
+                    val debugModeStr = properties.getProperty("debug.mode", "none").lowercase()
+                    DEBUG_TYPE = DEBUG_MODE.fromString(debugModeStr)
+                    DEBUG_RESOURCE = properties.getProperty("debug.resource", null)
+
+                    Logger.getInstance(WecoderPluginService::class.java).info("Read debug mode from config file: $DEBUG_MODE")
+                } else {
+                    Logger.getInstance(WecoderPluginService::class.java).warn("Cannot load config file, use default debug mode: $DEBUG_MODE")
+                }
+            } catch (e: Exception) {
+                Logger.getInstance(WecoderPluginService::class.java).warn("Error reading config file, use default debug mode: $DEBUG_MODE", e)
+            }
+        }
+
+        /**
+         * Get current debug mode
+         * @return Debug mode
+         */
+        @JvmStatic
+        fun getDebugMode(): DEBUG_MODE {
+            return DEBUG_TYPE
+        }
+
+        /**
+         * Get debug resource path
+         * @return Debug resource path
+         */
+        @JvmStatic
+        fun getDebugResource(): String? {
+            return DEBUG_RESOURCE
+        }
+    }
+    
+    /**
+     * Initialize plugin service
+     */
+    fun initialize(project: Project) {
+        // DEBUG_MODE is no longer set directly in code, now read from config file
+        if (isInitialized) {
+            LOG.info("WecoderPluginService already initialized")
+            return
+        }
+        
+        LOG.info("Initializing WecoderPluginService, debug mode: $DEBUG_TYPE")
+        // Initialize system object provider
+        SystemObjectProvider.initialize(project)
+        this.currentProject = project
+        socketServer.project = project
+        udsSocketServer.project = project
+        
+        // Register to system object provider
+        SystemObjectProvider.register("pluginService", this)
+        
+        // Start initialization in background thread
+        coroutineScope.launch {
+            try {
+                initPlatformFiles()
+                // Get project path
+                val projectPath = project.basePath ?: ""
+
+                // Initialize service registration
+                project.getService(ServiceProxyRegistry::class.java).initialize()
+//                ServiceProxyRegistry.getInstance().initialize()
+                
+                if (DEBUG_TYPE == ai.kilocode.jetbrains.plugin.DEBUG_MODE.ALL) {
+                    // Debug mode: directly connect to extension process in debug
+                    LOG.info("Running in debug mode: ${DEBUG_TYPE}, will directly connect to $DEBUG_HOST:$DEBUG_PORT")
+                    
+                    // connet to debug port
+                    socketServer.connectToDebugHost(DEBUG_HOST, DEBUG_PORT)
+                    
+                    // Initialization successful
+                    isInitialized = true
+                    initializationComplete.complete(true)
+                    LOG.info("Debug mode connection successful, WecoderPluginService initialized")
+                } else {
+                    // Normal mode: start Socket server and extension process
+                    // 1. Start Socket server according to system, use UDS except on Windows
+                    val server: ISocketServer = if (SystemInfo.isWindows) socketServer else udsSocketServer
+                    val portOrPath = server.start(projectPath)
+                    if (!ExtensionUtils.isValidPortOrPath(portOrPath)) {
+                        LOG.error("Failed to start socket server")
+                        initializationComplete.complete(false)
+                        return@launch
+                    }
+
+                    LOG.info("Socket server started on: $portOrPath")
+                    // 2. Start extension process
+                    if (!processManager.start(portOrPath)) {
+                        LOG.error("Failed to start extension process")
+                        server.stop()
+                        initializationComplete.complete(false)
+                        return@launch
+                    }
+                    // Initialization successful
+                    isInitialized = true
+                    initializationComplete.complete(true)
+                    LOG.info("WecoderPluginService initialization completed")
+                }
+            } catch (e: Exception) {
+                LOG.error("Error during WecoderPluginService initialization", e)
+                cleanup()
+                initializationComplete.complete(false)
+            }
+        }
+    }
+
+    private fun initPlatformFiles() {
+        // Initialize platform related files
+        val platformSuffix = when {
+            SystemInfo.isWindows -> "windows-x64"
+            SystemInfo.isMac -> when (System.getProperty("os.arch")) {
+                "x86_64" -> "darwin-x64"
+                "aarch64" -> "darwin-arm64"
+                else -> ""
+            }
+            SystemInfo.isLinux -> "linux-x64"
+            else -> ""
+        }
+        if (platformSuffix.isNotEmpty()) {
+            val pluginDir = PluginResourceUtil.getResourcePath(PluginConstants.PLUGIN_ID, "")
+                ?: throw IllegalStateException("Cannot get plugin directory")
+
+            val platformFile = File(pluginDir, "platform.txt")
+            if (platformFile.exists()) {
+                platformFile.readLines()
+                    .filter { it.isNotBlank() && !it.startsWith("#") }
+                    .forEach { originalPath ->
+                        val suffixedPath = "$originalPath$platformSuffix"
+                        val originalFile = File(pluginDir, "node_modules/$originalPath")
+                        val suffixedFile = File(pluginDir, "node_modules/$suffixedPath")
+
+                        if (suffixedFile.exists()) {
+                            if (originalFile.exists()) {
+                                originalFile.delete()
+                            }
+                            Files.move(
+                                suffixedFile.toPath(),
+                                originalFile.toPath(),
+                                StandardCopyOption.REPLACE_EXISTING
+                            )
+                            originalFile.setExecutable(true)
+                        }
+                    }
+            }
+            platformFile.delete()
+        }
+    }
+
+    /**
+     * Wait for initialization to complete
+     * @return Whether initialization was successful
+     */
+    fun waitForInitialization(): Boolean {
+        return initializationComplete.get()
+    }
+    
+    /**
+     * Clean up resources
+     */
+    private fun cleanup() {
+        try {
+            // Stop extension process, only needed in non-debug mode
+            if (DEBUG_TYPE == ai.kilocode.jetbrains.plugin.DEBUG_MODE.NONE) {
+                processManager.stop()
+            }
+        } catch (e: Exception) {
+            LOG.error("Error stopping process manager", e)
+        }
+        
+        try {
+            // Stop Socket server
+            socketServer.stop()
+            udsSocketServer.stop()
+        } catch (e: Exception) {
+            LOG.error("Error stopping socket server", e)
+        }
+
+        // Unregister workspace file change listener
+        currentProject.getService(WorkspaceFileChangeManager::class.java).dispose()
+//        WorkspaceFileChangeManager.disposeInstance()
+        
+        isInitialized = false
+    }
+    
+    /**
+     * Get whether initialized
+     */
+    fun isInitialized(): Boolean {
+        return isInitialized
+    }
+    
+    /**
+     * Get Socket server
+     */
+    fun getSocketServer(): ExtensionSocketServer {
+        return socketServer
+    }
+    
+    /**
+     * Get process manager
+     */
+    fun getProcessManager(): ExtensionProcessManager {
+        return processManager
+    }
+    
+    /**
+     * Get current project
+     */
+    fun getCurrentProject(): Project? {
+        return currentProject
+    }
+    
+    /**
+     * Close service
+     */
+    override fun dispose() {
+        if (!isInitialized) {
+            return
+        }
+        
+        LOG.info("Disposing WecoderPluginService")
+
+        currentProject?.getService(WebViewManager::class.java)?.dispose()
+        
+        // Cancel all coroutines
+        coroutineScope.cancel()
+        
+        // Clean up resources
+        cleanup()
+        
+        LOG.info("WecoderPluginService disposed")
+    }
+}
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/service/DocumentSyncService.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/service/DocumentSyncService.kt
new file mode 100644
index 000000000..085de4394
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/service/DocumentSyncService.kt
@@ -0,0 +1,161 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.service
+
+import com.intellij.openapi.application.ApplicationManager
+import com.intellij.openapi.diagnostic.Logger
+import com.intellij.openapi.editor.Document
+import com.intellij.openapi.project.Project
+import com.intellij.openapi.vfs.VirtualFile
+import ai.kilocode.jetbrains.core.PluginContext
+import ai.kilocode.jetbrains.core.ServiceProxyRegistry
+import ai.kilocode.jetbrains.editor.EditorAndDocManager
+import ai.kilocode.jetbrains.editor.ModelAddedData
+import ai.kilocode.jetbrains.editor.createURI
+import ai.kilocode.jetbrains.ipc.proxy.interfaces.ExtHostDocumentsProxy
+
+class DocumentSyncService(private val project: Project) {
+
+    private val logger = Logger.getInstance(DocumentSyncService::class.java)
+    private var extHostDocumentsProxy: ExtHostDocumentsProxy? = null
+
+    private fun getExtHostDocumentsProxy(): ExtHostDocumentsProxy? {
+        if (extHostDocumentsProxy == null) {
+            try {
+                val protocol = PluginContext.getInstance(project).getRPCProtocol()
+                extHostDocumentsProxy = protocol?.getProxy(ServiceProxyRegistry.ExtHostContext.ExtHostDocuments)
+                logger.debug("ExtHostDocumentsProxy initialized in DocumentSyncService")
+            } catch (e: Exception) {
+                logger.error("Failed to get ExtHostDocumentsProxy in DocumentSyncService", e)
+            }
+        }
+        return extHostDocumentsProxy
+    }
+
+    suspend fun syncDocumentStateOnSave(virtualFile: VirtualFile, document: Document) {
+        logger.info("Starting to sync document save state: ${virtualFile.path}")
+        try {
+            // Create URI object
+            val uriMap = mapOf(
+                "scheme" to "file",
+                "authority" to "",
+                "path" to virtualFile.path,
+                "query" to "",
+                "fragment" to ""
+            )
+            val uri = createURI(uriMap)
+
+            // Get EditorAndDocManager to manage document state
+            val editorAndDocManager = project.getService(EditorAndDocManager::class.java)
+
+            // Find corresponding EditorHolder
+            val editorHandles = editorAndDocManager.getEditorHandleByUri(uri)
+
+            if (editorHandles.isNotEmpty()) {
+                // If corresponding editor exists, update its state
+                for (handle in editorHandles) {
+                    // Read latest document content
+                    val text = ApplicationManager.getApplication().runReadAction<String> {
+                        document.text
+                    }
+
+                    // Create updated document data
+                    val updatedDocument = ModelAddedData(
+                        uri = handle.document.uri,
+                        versionId = handle.document.versionId + 1,
+                        lines = text.lines(),
+                        EOL = handle.document.EOL,
+                        languageId = handle.document.languageId,
+                        isDirty = false, // Set to false after save
+                        encoding = handle.document.encoding
+                    )
+
+                    // Update document state in EditorHolder
+                    handle.document = updatedDocument
+
+                    // Trigger state sync to extension side
+                    editorAndDocManager.updateDocumentAsync(updatedDocument)
+                }
+
+                // Send save event to extension process
+                getExtHostDocumentsProxy()?.let { proxy ->
+                    proxy.acceptModelSaved(uri)
+                    logger.info("Document save event and state synced to extension host: ${virtualFile.path}")
+                }
+            }
+        } catch (e: Exception) {
+            logger.error("Error syncing document state on save", e)
+        }
+    }
+
+    fun shouldHandleFileEvent(virtualFile: VirtualFile): Boolean {
+        // Filter: only process real files (non-directory) and not temporary files
+        return !virtualFile.isDirectory &&
+                virtualFile.isInLocalFileSystem &&
+                !virtualFile.path.contains("/.idea/") && // Exclude IDE configuration files
+                !virtualFile.path.contains("/target/") && // Exclude build output files
+                !virtualFile.path.contains("/build/") &&
+                !virtualFile.path.contains("/node_modules/") &&
+                virtualFile.extension != null && // Ensure file has extension
+                !isTooLargeForSyncing(virtualFile) && // Exclude files that are too large for syncing
+                !isForSimpleWidget(virtualFile) // Exclude simple widget files
+    }
+
+    /**
+     * Check if file is too large for syncing
+     * Reference VS Code implementation, exclude files over 2MB
+     */
+    private fun isTooLargeForSyncing(virtualFile: VirtualFile): Boolean {
+        return try {
+            val maxSizeBytes = 2 * 1024 * 1024L // 2MB
+            virtualFile.length > maxSizeBytes
+        } catch (e: Exception) {
+            logger.warn("Failed to check file size for: ${virtualFile.path}", e)
+            false
+        }
+    }
+
+    /**
+     * Check if file is for simple widget use
+     * Exclude special purpose file types
+     */
+    private fun isForSimpleWidget(virtualFile: VirtualFile): Boolean {
+        return try {
+            // Exclude special file types
+            val fileName = virtualFile.name.lowercase()
+            val extension = virtualFile.extension?.lowercase()
+            
+            // Temporary files, cache files, backup files, etc.
+            fileName.startsWith(".") ||
+            fileName.endsWith(".tmp") ||
+            fileName.endsWith(".temp") ||
+            fileName.endsWith(".bak") ||
+            fileName.endsWith(".backup") ||
+            fileName.contains("~") ||
+            // Binary file extensions
+            extension in setOf(
+                "exe", "dll", "so", "dylib", "bin", "obj", "o", "a", "lib",
+                "zip", "tar", "gz", "rar", "7z", "jar", "war", "ear",
+                "png", "jpg", "jpeg", "gif", "bmp", "ico", "tiff",
+                "mp3", "mp4", "avi", "mov", "wav", "flv", "wmv",
+                "pdf", "doc", "docx", "xls", "xlsx", "ppt", "pptx"
+            ) ||
+            // Special paths
+            virtualFile.path.contains("/.git/") ||
+            virtualFile.path.contains("/.svn/") ||
+            virtualFile.path.contains("/.hg/") ||
+            virtualFile.path.contains("/vendor/") ||
+            virtualFile.path.contains("/dist/") ||
+            virtualFile.path.contains("/out/")
+        } catch (e: Exception) {
+            logger.warn("Failed to check if file is for simple widget: ${virtualFile.path}", e)
+            false
+        }
+    }
+
+    fun dispose() {
+        extHostDocumentsProxy = null
+    }
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/service/ExtensionStorageService.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/service/ExtensionStorageService.kt
new file mode 100644
index 000000000..fda59c795
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/service/ExtensionStorageService.kt
@@ -0,0 +1,47 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.service
+
+import com.intellij.openapi.components.PersistentStateComponent
+import com.intellij.openapi.components.Service
+import com.intellij.openapi.components.State
+import com.intellij.openapi.components.Storage
+import com.intellij.util.xmlb.XmlSerializerUtil
+import com.google.gson.Gson
+
+@Service
+@State(
+    name = "ai.kilocode.jetbrains.service.ExtensionStorageService",
+    storages = [Storage("roo-cline-extension-storage.xml")]
+)
+class ExtensionStorageService() : PersistentStateComponent<ExtensionStorageService> {
+    private val gson = Gson()
+    var storageMap: MutableMap<String, String> = mutableMapOf()
+
+    override fun getState(): ExtensionStorageService = this
+
+    override fun loadState(state: ExtensionStorageService) {
+        XmlSerializerUtil.copyBean(state, this)
+    }
+
+    fun setValue(key: String, value: Any) {
+        storageMap[key] = when (value) {
+            is String -> value
+            else -> gson.toJson(value)
+        }
+    }
+
+    fun getValue(key: String): String? {
+        return storageMap[key]
+    }
+
+    fun removeValue(key: String) {
+        storageMap.remove(key)
+    }
+
+    fun clear() {
+        storageMap.clear()
+    }
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/terminal/ProxyPtyProcess.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/terminal/ProxyPtyProcess.kt
new file mode 100644
index 000000000..675957917
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/terminal/ProxyPtyProcess.kt
@@ -0,0 +1,119 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.terminal
+
+import com.pty4j.PtyProcess
+import com.intellij.openapi.diagnostic.Logger
+import com.pty4j.WinSize
+
+/**
+ * ProxyPtyProcess callback interface
+ * Simplified version, only provides raw data callback
+ */
+interface ProxyPtyProcessCallback {
+    /**
+     * Raw data callback
+     * @param data Raw string data
+     * @param streamType Stream type (STDOUT/STDERR)
+     */
+    fun onRawData(data: String, streamType: String)
+}
+
+/**
+ * ProxyPtyProcess implementation
+ * Intercepts input/output stream operations and provides raw data callback
+ */
+class ProxyPtyProcess(
+    private val originalProcess: PtyProcess,
+    private val callback: ProxyPtyProcessCallback? = null
+) : PtyProcess() {
+
+    // Create proxy input stream (process standard output)
+    private val proxyInputStream: ProxyInputStream = ProxyInputStream(
+        originalProcess.inputStream,
+        "STDOUT",
+        callback
+    )
+
+    // Create proxy error stream (process error output)
+    private val proxyErrorStream: ProxyInputStream = ProxyInputStream(
+        originalProcess.errorStream,
+        "STDERR",
+        callback
+    )
+
+    // Override methods that require special handling
+    override fun getInputStream(): java.io.InputStream = proxyInputStream
+    override fun getErrorStream(): java.io.InputStream = proxyErrorStream
+    override fun getOutputStream(): java.io.OutputStream = originalProcess.outputStream
+    
+    // Delegate all other methods to the original process
+    override fun isAlive(): Boolean = originalProcess.isAlive()
+    override fun pid(): Long = originalProcess.pid()
+    override fun exitValue(): Int = originalProcess.exitValue()
+    override fun waitFor(): Int = originalProcess.waitFor()
+    override fun waitFor(timeout: Long, unit: java.util.concurrent.TimeUnit): Boolean =
+        originalProcess.waitFor(timeout, unit)
+    override fun destroy() = originalProcess.destroy()
+    override fun destroyForcibly(): Process = originalProcess.destroyForcibly()
+    override fun info(): ProcessHandle.Info = originalProcess.info()
+    override fun children(): java.util.stream.Stream<ProcessHandle> = originalProcess.children()
+    override fun descendants(): java.util.stream.Stream<ProcessHandle> = originalProcess.descendants()
+    override fun setWinSize(winSize: WinSize) = originalProcess.setWinSize(winSize)
+    override fun toHandle(): ProcessHandle = originalProcess.toHandle()
+    override fun onExit(): java.util.concurrent.CompletableFuture<Process> = originalProcess.onExit()
+    
+    // PtyProcess specific methods
+    override fun getWinSize(): WinSize = originalProcess.winSize
+    override fun isConsoleMode(): Boolean = originalProcess.isConsoleMode
+}
+
+/**
+ * Proxy InputStream implementation
+ * Intercepts read operations and provides raw data callback
+ */
+class ProxyInputStream(
+    private val originalStream: java.io.InputStream,
+    private val streamType: String,
+    private val callback: ProxyPtyProcessCallback?
+) : java.io.InputStream() {
+    
+    override fun read(): Int {
+        val result = originalStream.read()
+        if (result != -1 && callback != null) {
+            // Convert single byte to string and callback
+            val dataString = String(byteArrayOf(result.toByte()), Charsets.UTF_8)
+            callback.onRawData(dataString, streamType)
+        }
+        return result
+    }
+    
+    override fun read(b: ByteArray): Int {
+        val result = originalStream.read(b)
+        if (result > 0 && callback != null) {
+            // Convert to string and callback
+            val dataString = String(b, 0, result, Charsets.UTF_8)
+            callback.onRawData(dataString, streamType)
+        }
+        return result
+    }
+    
+    override fun read(b: ByteArray, off: Int, len: Int): Int {
+        val result = originalStream.read(b, off, len)
+        if (result > 0 && callback != null) {
+            // Convert to string and callback
+            val dataString = String(b, off, result, Charsets.UTF_8)
+            callback.onRawData(dataString, streamType)
+        }
+        return result
+    }
+    
+    // Delegate other methods to the original stream
+    override fun available(): Int = originalStream.available()
+    override fun close() = originalStream.close()
+    override fun mark(readlimit: Int) = originalStream.mark(readlimit)
+    override fun reset() = originalStream.reset()
+    override fun markSupported(): Boolean = originalStream.markSupported()
+}
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/terminal/ShellIntegrationOutputState.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/terminal/ShellIntegrationOutputState.kt
new file mode 100644
index 000000000..6959e2e08
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/terminal/ShellIntegrationOutputState.kt
@@ -0,0 +1,394 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.terminal
+
+import com.intellij.openapi.diagnostic.Logger
+import kotlinx.coroutines.*
+import java.util.concurrent.ConcurrentLinkedQueue
+import java.util.concurrent.atomic.AtomicBoolean
+import java.util.concurrent.atomic.AtomicLong
+
+/**
+ * Shell integration event types
+ */
+sealed class ShellEvent {
+    data class ShellExecutionStart(val commandLine: String, val cwd: String) : ShellEvent()
+    data class ShellExecutionEnd(val commandLine: String, val exitCode: Int?) : ShellEvent()
+    data class ShellExecutionData(val data: String) : ShellEvent()
+    data class CwdChange(val cwd: String) : ShellEvent()
+}
+
+/**
+ * Shell integration event listener
+ */
+interface ShellEventListener {
+    fun onShellExecutionStart(commandLine: String, cwd: String)
+    fun onShellExecutionEnd(commandLine: String, exitCode: Int?)
+    fun onShellExecutionData(data: String)
+    fun onCwdChange(cwd: String)
+}
+
+/**
+ * Shell integration output state manager
+ * Refer to VSCode Shell Integration implementation
+ * Reference: https://github.com/microsoft/vscode/blob/main/src/vs/workbench/contrib/terminal/common/terminalShellIntegration.ts
+ */
+class ShellIntegrationOutputState {
+    private val logger = Logger.getInstance(ShellIntegrationOutputState::class.java)
+    
+    // Event listeners
+    private val listeners = mutableListOf<ShellEventListener>()
+    
+    // State properties
+    @Volatile
+    var isCommandRunning: Boolean = false
+        private set
+    
+    @Volatile
+    var currentCommand: String = ""
+        private set
+    
+    @Volatile
+    var currentNonce: String = ""
+        private set
+    
+    @Volatile
+    var commandStatus: Int? = null
+        private set
+    
+    @Volatile
+    var currentDirectory: String = ""
+        private set
+    
+    @Volatile
+    var output: String = ""
+        private set
+    
+    // Pending output buffer
+    private val pendingOutput = StringBuilder()
+    private val pendingOutputLock = Any()
+    private val lastAppendTime = AtomicLong(0)
+    private val isFlushScheduled = AtomicBoolean(false)
+    
+    // Coroutine scope
+    private val scope = CoroutineScope(Dispatchers.IO + SupervisorJob())
+    
+    /**
+     * Add event listener
+     */
+    fun addListener(listener: ShellEventListener) {
+        synchronized(listeners) {
+            listeners.add(listener)
+        }
+    }
+    
+    /**
+     * Remove event listener
+     */
+    fun removeListener(listener: ShellEventListener) {
+        synchronized(listeners) {
+            listeners.remove(listener)
+        }
+    }
+    
+    /**
+     * Notify all listeners of an event
+     */
+    private fun notifyListeners(event: ShellEvent) {
+        synchronized(listeners) {
+            listeners.forEach { listener ->
+                try {
+                    when (event) {
+                        is ShellEvent.ShellExecutionStart ->
+                            listener.onShellExecutionStart(event.commandLine, event.cwd)
+                        is ShellEvent.ShellExecutionEnd ->
+                            listener.onShellExecutionEnd(event.commandLine, event.exitCode)
+                        is ShellEvent.ShellExecutionData ->
+                            listener.onShellExecutionData(event.data)
+                        is ShellEvent.CwdChange ->
+                            listener.onCwdChange(event.cwd)
+                    }
+                } catch (e: Exception) {
+                    logger.warn("Failed to notify Shell event listener", e)
+                }
+            }
+        }
+    }
+    
+    /**
+     * Append output data (with buffering and delayed sending)
+     */
+    private fun appendOutput(text: String) {
+        logger.debug("📝 appendOutput called: '${text}', length=${text.length}")
+        synchronized(pendingOutputLock) {
+            pendingOutput.append(text)
+            logger.debug("📝 pendingOutput updated length: ${pendingOutput.length}")
+        }
+        
+        val currentTime = System.currentTimeMillis()
+        lastAppendTime.set(currentTime)
+        
+        // If no flush task is scheduled, schedule one
+        if (isFlushScheduled.compareAndSet(false, true)) {
+            logger.debug("📝 Scheduling flush task, will execute after 50ms")
+            scope.launch {
+                delay(50) // 50ms delay
+                flushPendingOutput()
+            }
+        } else {
+            logger.debug("📝 Flush task already scheduled, skipping")
+        }
+    }
+    
+    /**
+     * Flush pending output
+     */
+    private fun flushPendingOutput() {
+        logger.debug("🚀 flushPendingOutput called")
+        val textToFlush = synchronized(pendingOutputLock) {
+            if (pendingOutput.isNotEmpty()) {
+                val text = pendingOutput.toString()
+                pendingOutput.clear()
+                logger.debug("🚀 Ready to flush text: '${text}', length=${text.length}")
+                text
+            } else {
+                logger.debug("🚀 pendingOutput is empty, no need to flush")
+                null
+            }
+        }
+        
+        isFlushScheduled.set(false)
+        
+        textToFlush?.let { text ->
+            output += text
+            logger.info("🚀 Sending ShellExecutionData event: '${text}', length=${text.length}")
+            notifyListeners(ShellEvent.ShellExecutionData(text))
+        }
+    }
+    
+    /**
+     * Clear output
+     */
+    fun clearOutput() {
+        synchronized(pendingOutputLock) {
+            output = ""
+            pendingOutput.clear()
+            currentNonce = ""
+        }
+        isFlushScheduled.set(false)
+    }
+    
+    /**
+     * Terminate current state
+     */
+    fun terminate() {
+        isCommandRunning = false
+        flushPendingOutput()
+    }
+    
+    /**
+     * Process raw output data
+     * Parse Shell Integration markers and extract clean content
+     */
+    fun appendRawOutput(output: String) {
+        logger.debug("📥 Processing raw output: ${output.length} chars, isCommandRunning=$isCommandRunning")
+        logger.debug("📥 Raw output content: '${output.replace("\u001b", "\\u001b").replace("\u0007", "\\u0007")}'")
+        
+        var currentIndex = 0
+        var hasShellIntegrationMarkers = false
+        
+        while (currentIndex < output.length) {
+            // Find Shell Integration marker: \u001b]633;
+            val markerIndex = output.indexOf("\u001b]633;", currentIndex)
+            
+            if (markerIndex == -1) {
+                // No marker found
+                val remainingContent = output.substring(currentIndex)
+                logger.debug("📤 No Shell Integration marker found, remaining content: '${remainingContent}', isCommandRunning=$isCommandRunning")
+                
+                if (!hasShellIntegrationMarkers && remainingContent.isNotEmpty()) {
+                    // If there is no Shell Integration marker in the entire output, treat all content as command output
+                    logger.debug("📤 No Shell Integration marker, treat all content as command output")
+                    appendOutput(remainingContent)
+                } else if (isCommandRunning && currentIndex < output.length) {
+                    logger.debug("📤 Append remaining content to output: '${remainingContent}'")
+                    appendOutput(remainingContent)
+                } else if (!isCommandRunning) {
+                    logger.debug("⚠️ Command not running, ignore output: '${remainingContent}'")
+                }
+                break
+            }
+            
+            hasShellIntegrationMarkers = true
+            
+            // If command is running, append content before marker
+            if (isCommandRunning && currentIndex < markerIndex) {
+                val beforeMarker = output.substring(currentIndex, markerIndex)
+                logger.debug("📤 Append content before marker: '${beforeMarker}'")
+                appendOutput(beforeMarker)
+            } else if (!isCommandRunning && currentIndex < markerIndex) {
+                val beforeMarker = output.substring(currentIndex, markerIndex)
+                logger.debug("⚠️ Command not running, ignore content before marker: '${beforeMarker}'")
+            }
+            
+            // Parse marker
+            val typeStart = markerIndex + 6 // "\u001b]633;".length
+            if (typeStart >= output.length) {
+                if (isCommandRunning && currentIndex < output.length) {
+                    appendOutput(output.substring(currentIndex))
+                }
+                break
+            }
+            
+            val type = MarkerType.fromChar(output[typeStart])
+            val paramStart = typeStart + 1
+            
+            // Find marker end: \u0007
+            val paramEnd = output.indexOf('\u0007', paramStart)
+            if (paramEnd == -1) {
+                logger.debug("⚠️ Marker end not found, skip")
+                currentIndex = typeStart
+                continue
+            }
+            
+            // Extract parameters
+            val params = if (paramStart < paramEnd) {
+                output.substring(paramStart, paramEnd)
+            } else {
+                ""
+            }
+            
+            val components = if (params.startsWith(";")) {
+                params.substring(1).split(";")
+            } else {
+                listOf(params)
+            }
+            
+            logger.debug("🔍 Parse Shell Integration marker: type=$type, params='$params', components=$components")
+            
+            // Handle different marker types
+            when (type) {
+                MarkerType.COMMAND_LINE -> {
+                    logger.info("🎯 Shell Integration - Detected command line marker")
+                    if (components.isNotEmpty() && components[0].isNotEmpty()) {
+                        currentCommand = components[0]
+                        currentNonce = if (components.size >= 2) components[1] else ""
+                        logger.info("🎯 Shell Integration - Command line: '$currentCommand'")
+                    }
+                }
+                
+                MarkerType.COMMAND_EXECUTED -> {
+                    logger.info("🚀 Shell Integration - Detected command executed marker")
+                    isCommandRunning = true
+                    if (currentCommand.isNotEmpty()) {
+                        logger.info("🚀 Shell Integration - Command started: '$currentCommand', isCommandRunning=$isCommandRunning")
+                        notifyListeners(ShellEvent.ShellExecutionStart(currentCommand, currentDirectory))
+                        // Include marker itself in output
+                        appendOutput(output.substring(markerIndex, paramEnd + 1))
+                    }
+                }
+                
+                MarkerType.COMMAND_FINISHED -> {
+                    logger.info("🏁 Shell Integration - Detected command finished marker")
+                    if (currentCommand.isNotEmpty()) {
+                        // Include marker itself in output
+                        appendOutput(output.substring(markerIndex, paramEnd + 1))
+                        flushPendingOutput() // Ensure all pending data is sent before command ends
+                        
+                        commandStatus = components.firstOrNull()?.toIntOrNull()
+                        logger.info("🏁 Shell Integration - Command finished: '$currentCommand' (exit code: $commandStatus)")
+                        notifyListeners(ShellEvent.ShellExecutionEnd(currentCommand, commandStatus))
+                        currentCommand = ""
+                    }
+                    isCommandRunning = false
+                }
+                
+                MarkerType.PROPERTY -> {
+                    logger.debug("📋 Shell Integration - Detected property marker")
+                    if (components.isNotEmpty()) {
+                        val property = components[0]
+                        if (property.startsWith("Cwd=")) {
+                            val cwdValue = property.substring(4) // "Cwd=".length
+                            if (cwdValue != currentDirectory) {
+                                currentDirectory = cwdValue
+                                logger.info("📁 Shell Integration - Directory changed: '$cwdValue'")
+                                notifyListeners(ShellEvent.CwdChange(cwdValue))
+                            }
+                        }
+                    }
+                }
+                
+                MarkerType.PROMPT_START -> {
+                    logger.debug("🎯 Shell Integration - Prompt start")
+                }
+                
+                MarkerType.COMMAND_START -> {
+                    logger.debug("🎯 Shell Integration - Command input start")
+                }
+                
+                else -> {
+                    logger.debug("🔍 Shell Integration - Unhandled marker type: $type")
+                }
+            }
+            
+            currentIndex = paramEnd + 1
+        }
+    }
+    
+    /**
+     * Get clean output with Shell Integration markers removed
+     */
+    fun getCleanOutput(rawOutput: String): String {
+        var result = rawOutput
+        
+        // Remove all Shell Integration markers
+        val markerPattern = Regex("\u001b\\]633;[^\\u0007]*\\u0007")
+        result = markerPattern.replace(result, "")
+        
+        return result
+    }
+    
+    /**
+     * Dispose resources
+     */
+    fun dispose() {
+        scope.cancel()
+        synchronized(listeners) {
+            listeners.clear()
+        }
+    }
+    
+    /**
+     * VSCode Shell Integration marker types
+     * Reference: https://github.com/microsoft/vscode/blob/main/src/vs/workbench/contrib/terminal/common/terminalShellIntegration.ts
+     */
+    private enum class MarkerType(val char: Char) {
+        // Implemented types
+        COMMAND_LINE('E'),      // Command line content, format: OSC 633 ; E ; <CommandLine> [; <Nonce>] ST
+        COMMAND_FINISHED('D'),  // Command finished, format: OSC 633 ; D [; <ExitCode>] ST
+        COMMAND_EXECUTED('C'),  // Command output started, format: OSC 633 ; C ST
+        PROPERTY('P'),          // Property set, format: OSC 633 ; P ; <Property>=<Value> ST
+
+        // Prompt related
+        PROMPT_START('A'),      // Prompt start, format: OSC 633 ; A ST
+        COMMAND_START('B'),     // Command input start, format: OSC 633 ; B ST
+
+        // Line continuation related (not completed)
+        CONTINUATION_START('F'),  // Line continuation start, format: OSC 633 ; F ST
+        CONTINUATION_END('G'),    // Line continuation end, format: OSC 633 ; G ST
+
+        // Right prompt related (not completed)
+        RIGHT_PROMPT_START('H'),   // Right prompt start, format: OSC 633 ; H ST
+        RIGHT_PROMPT_END('I'),     // Right prompt end, format: OSC 633 ; I ST
+
+        UNKNOWN('?');
+        
+        companion object {
+            fun fromChar(char: Char): MarkerType {
+                return values().find { it.char == char } ?: UNKNOWN
+            }
+        }
+    }
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/terminal/TerminalCommands.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/terminal/TerminalCommands.kt
new file mode 100644
index 000000000..99737983e
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/terminal/TerminalCommands.kt
@@ -0,0 +1,98 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.terminal
+
+import com.intellij.openapi.components.service
+import com.intellij.openapi.diagnostic.Logger
+import com.intellij.openapi.project.Project
+import com.intellij.openapi.wm.ToolWindow
+import com.intellij.openapi.wm.ToolWindowManager
+import com.intellij.ui.content.Content
+import ai.kilocode.jetbrains.actors.MainThreadClipboard
+import ai.kilocode.jetbrains.commands.CommandRegistry
+import ai.kilocode.jetbrains.commands.ICommand
+import org.jetbrains.plugins.terminal.TerminalToolWindowManager
+
+
+/**
+ * Registers commands related to terminal API operations
+ * Currently registers the workbench.action.terminal.copySelection command for copying terminal output to clipboard
+ *
+ * @param project The current IntelliJ project
+ * @param registry The command registry to register commands with
+ */
+fun registerTerminalAPICommands(project: Project, registry: CommandRegistry) {
+    registry.registerCommand(
+        object : ICommand {
+            override fun getId(): String {
+                return "workbench.action.terminal.copySelection"
+            }
+            override fun getMethod(): String {
+                return "workbench_action_terminal_copySelection"
+            }
+
+            override fun handler(): Any {
+                return TerminalAPICommands(project)
+            }
+
+            override fun returns(): String? {
+                return "void"
+            }
+        }
+    )
+}
+
+/**
+ * Handles terminal API commands for operations like copying terminal output to clipboard
+ */
+class TerminalAPICommands(val project: Project) {
+    private val logger = Logger.getInstance(TerminalAPICommands::class.java)
+    private val clipboard = MainThreadClipboard()
+    
+    /**
+     * Copies the last command output from the current terminal to clipboard
+     *
+     * @return null after operation completes
+     */
+    suspend fun workbench_action_terminal_copySelection(): Any? {
+        logger.info("Copying terminal output to clipboard")
+        
+        val textToCopy = try {
+            getTerminalText() ?: ""
+        } catch (e: Exception) {
+            logger.error("Failed to copy terminal output to clipboard", e)
+            ""
+        }
+        
+        clipboard.writeText(textToCopy)
+        if (textToCopy.isNotEmpty()) {
+            logger.info("Successfully copied terminal output to clipboard")
+        } else {
+            logger.info("Copied empty terminal output to clipboard")
+        }
+        
+        return null
+    }
+    
+    /**
+     * Get terminal text content
+     *
+     * @return Terminal text content, returns null if failed to get
+     */
+    private fun getTerminalText(): String? {
+        val window = ToolWindowManager.getInstance(project)
+            .getToolWindow("Terminal") // or TerminalToolWindowFactory.TOOL_WINDOW_ID
+            ?: return null
+            
+        val selected = window.getContentManager().getSelectedContent()
+            ?: return null
+            
+        val widget = TerminalToolWindowManager.getWidgetByContent(selected)
+            ?: return null
+            
+        return widget.text.takeIf { it.isNotEmpty() }
+    }
+    
+}
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/terminal/TerminalInstance.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/terminal/TerminalInstance.kt
new file mode 100644
index 000000000..19502657b
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/terminal/TerminalInstance.kt
@@ -0,0 +1,689 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.terminal
+
+import com.intellij.openapi.Disposable
+import com.intellij.openapi.application.ApplicationManager
+import com.intellij.openapi.diagnostic.Logger
+import com.intellij.openapi.project.Project
+import com.intellij.openapi.util.Disposer
+import com.intellij.openapi.wm.ToolWindow
+import com.intellij.openapi.wm.ToolWindowManager
+import com.intellij.terminal.JBTerminalWidget
+import com.intellij.terminal.ui.TerminalWidget
+import com.pty4j.PtyProcess
+import ai.kilocode.jetbrains.core.ServiceProxyRegistry
+import ai.kilocode.jetbrains.ipc.proxy.IRPCProtocol
+import ai.kilocode.jetbrains.ipc.proxy.interfaces.ExtHostTerminalShellIntegrationProxy
+import ai.kilocode.jetbrains.ipc.proxy.interfaces.ShellLaunchConfigDto
+import kotlinx.coroutines.CoroutineScope
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.SupervisorJob
+import kotlinx.coroutines.cancel
+import org.jetbrains.plugins.terminal.LocalTerminalDirectRunner
+import org.jetbrains.plugins.terminal.ShellStartupOptions
+import org.jetbrains.plugins.terminal.ShellTerminalWidget
+
+/**
+ * Terminal instance class
+ *
+ * Manages the lifecycle and operations of a single terminal, including:
+ * - Terminal creation and initialization
+ * - RPC communication with ExtHost process
+ * - Shell integration management
+ * - Terminal show and hide
+ * - Text sending and command execution
+ * - Resource cleanup and disposal
+ *
+ * @property extHostTerminalId Terminal identifier in ExtHost process
+ * @property numericId Numeric ID for RPC communication
+ * @property project IDEA project instance
+ * @property config Terminal configuration parameters
+ * @property rpcProtocol RPC protocol instance
+ */
+class TerminalInstance(
+    val extHostTerminalId: String,
+    val numericId: Int,
+    val project: Project,
+    private val config: TerminalConfig,
+    private val rpcProtocol: IRPCProtocol
+) : Disposable {
+
+    companion object {
+        private const val DEFAULT_TERMINAL_NAME = "roo-cline"
+        private const val TERMINAL_TOOL_WINDOW_ID = "Terminal"
+    }
+
+    private val logger = Logger.getInstance(TerminalInstance::class.java)
+
+    // Terminal components
+    private var terminalWidget: TerminalWidget? = null
+    private var shellWidget: ShellTerminalWidget? = null
+
+    // State management
+    private val state = TerminalState()
+
+    // Coroutine scope - use IO dispatcher to avoid Main Dispatcher issues
+    private val scope = CoroutineScope(Dispatchers.IO + SupervisorJob())
+
+    // Shell integration manager
+    private val terminalShellIntegration = TerminalShellIntegration(extHostTerminalId, numericId, rpcProtocol)
+
+    // Event callback manager
+    private val callbackManager = TerminalCallbackManager()
+
+    /**
+     * Add terminal close listener
+     */
+    fun addTerminalCloseCallback(callback: () -> Unit) {
+        callbackManager.addCloseCallback(callback)
+    }
+
+    /**
+     * Initialize terminal instance
+     *
+     * @throws IllegalStateException if terminal is already initialized or disposed
+     * @throws Exception if error occurs during initialization
+     */
+    fun initialize() {
+        state.checkCanInitialize(extHostTerminalId)
+
+        try {
+            logger.info("🚀 Initializing terminal instance: $extHostTerminalId (numericId: $numericId)")
+
+            // 🎯 First register to project's Disposer to avoid memory leaks
+            registerToProjectDisposer()
+
+            // Switch to EDT thread for UI operations
+            ApplicationManager.getApplication().invokeAndWait {
+                performInitialization()
+            }
+        } catch (e: Exception) {
+            logger.error("❌ Failed to initialize terminal instance: $extHostTerminalId", e)
+            throw e
+        }
+    }
+
+    /**
+     * Register to project Disposer
+     */
+    private fun registerToProjectDisposer() {
+        try {
+            // Register TerminalInstance as a child Disposable of the project
+            Disposer.register(project, this)
+            logger.info("✅ Terminal instance registered to project Disposer: $extHostTerminalId")
+        } catch (e: Exception) {
+            logger.error("❌ Failed to register terminal instance to project Disposer: $extHostTerminalId", e)
+            throw e
+        }
+    }
+
+    /**
+     * Perform initialization steps
+     */
+    private fun performInitialization() {
+        try {
+            createTerminalWidget()
+            setupShellIntegration()
+            finalizeInitialization()
+        } catch (e: Exception) {
+            logger.error("❌ Failed to initialize terminal in EDT thread: $extHostTerminalId", e)
+            throw e
+        }
+    }
+
+    /**
+     * Setup shell integration
+     */
+    private fun setupShellIntegration() {
+        terminalShellIntegration.setupShellIntegration()
+    }
+
+    /**
+     * Finalize initialization
+     */
+    private fun finalizeInitialization() {
+        state.markInitialized()
+        logger.info("✅ Terminal instance initialization complete: $extHostTerminalId")
+
+        // 🎯 Add terminalWidget to Terminal tool window
+        addToTerminalToolWindow()
+        
+        notifyTerminalOpened()
+        notifyShellIntegrationChange()
+        handleInitialText()
+    }
+
+    /**
+     * Handle initial text
+     */
+    private fun handleInitialText() {
+        config.initialText?.let { initialText ->
+            sendText(initialText, shouldExecute = false)
+        }
+    }
+
+    /**
+     * Create terminal widget
+     */
+    private fun createTerminalWidget() {
+        try {
+            val customRunner = createCustomRunner()
+            val startupOptions = createStartupOptions()
+
+            logger.info("🚀 Calling startShellTerminalWidget...")
+
+            terminalWidget = customRunner.startShellTerminalWidget(
+                this, // parent disposable
+                startupOptions,
+                false  // deferSessionStartUntilUiShown - start session immediately, must be false
+            )
+
+            logger.info("✅ startShellTerminalWidget call complete, returned widget: ${terminalWidget?.javaClass?.name}")
+
+            initializeWidgets()
+            setupTerminalCloseListener()
+
+            logger.info("✅ Terminal widget created successfully")
+
+        } catch (e: Exception) {
+            logger.error("❌ Failed to create terminal widget", e)
+            throw e
+        }
+    }
+
+    /**
+     * Create custom runner
+     */
+    private fun createCustomRunner(): LocalTerminalDirectRunner {
+        return object : LocalTerminalDirectRunner(project) {
+            override fun createProcess(options: ShellStartupOptions): PtyProcess {
+                logger.info("🔧 Custom createProcess method called...")
+                logger.info("Startup options: $options")
+
+                val originalProcess = super.createProcess(options)
+                logger.info("✅ Original Process created: ${originalProcess.javaClass.name}")
+
+                return createProxyPtyProcess(originalProcess)
+            }
+
+            override fun createShellTerminalWidget(
+                parent: Disposable,
+                startupOptions: ShellStartupOptions
+            ): TerminalWidget {
+                logger.info("🔧 Custom createShellTerminalWidget method called...")
+                return super.createShellTerminalWidget(parent, startupOptions)
+            }
+
+            override fun configureStartupOptions(baseOptions: ShellStartupOptions): ShellStartupOptions {
+                logger.info("🔧 Custom configureStartupOptions method called...")
+                return super.configureStartupOptions(baseOptions)
+            }
+        }
+    }
+
+    /**
+     * Create startup options
+     */
+    private fun createStartupOptions(): ShellStartupOptions {
+        val fullShellCommand = buildShellCommand()
+
+        logger.info("🔧 Shell config: shellPath=${config.shellPath}, shellArgs=${config.shellArgs}")
+        logger.info("🔧 Full shell command: $fullShellCommand")
+
+        return ShellStartupOptions.Builder()
+            .workingDirectory(config.cwd ?: project.basePath)
+            .shellCommand(fullShellCommand)
+            .build()
+    }
+
+    /**
+     * Build shell command
+     */
+    private fun buildShellCommand(): List<String>? {
+        return buildList {
+            config.shellPath?.let { add(it) }
+            config.shellArgs?.let { addAll(it) }
+        }.takeIf { it.isNotEmpty() }
+    }
+
+    /**
+     * Initialize widget components
+     */
+    private fun initializeWidgets() {
+        shellWidget = JBTerminalWidget.asJediTermWidget(terminalWidget!!) as? ShellTerminalWidget
+            ?: throw IllegalStateException("Cannot get ShellTerminalWidget")
+
+        // Set terminal title
+        terminalWidget!!.terminalTitle.change {
+            userDefinedTitle = config.name ?: DEFAULT_TERMINAL_NAME
+        }
+    }
+
+    /**
+     * Set terminal close event listener
+     */
+    private fun setupTerminalCloseListener() {
+        try {
+            Disposer.register(terminalWidget!!) {
+                logger.info("🔔 TerminalWidget dispose event: $extHostTerminalId")
+                if (!state.isDisposed) {
+                    onTerminalClosed()
+                }
+            }
+        } catch (e: Exception) {
+            logger.error("❌ Failed to set terminal close event listener: $extHostTerminalId", e)
+        }
+    }
+
+    /**
+     * Create proxy PtyProcess to intercept input/output streams
+     */
+    private fun createProxyPtyProcess(originalProcess: PtyProcess): PtyProcess {
+        logger.info("🔧 Creating proxy PtyProcess to intercept input/output streams...")
+
+        val rawDataCallback = createRawDataCallback()
+        return ProxyPtyProcess(originalProcess, rawDataCallback)
+    }
+
+    /**
+     * Create raw data callback handler
+     */
+    private fun createRawDataCallback(): ProxyPtyProcessCallback {
+        return object : ProxyPtyProcessCallback {
+            override fun onRawData(data: String, streamType: String) {
+                logger.debug("📥 Raw data [$streamType]: ${data.length} chars")
+
+                try {
+                    sendRawDataToExtHost(data)
+                    terminalShellIntegration.appendRawOutput(data)
+                } catch (e: Exception) {
+                    logger.error("❌ Failed to process raw data (terminal: $extHostTerminalId)", e)
+                }
+            }
+        }
+    }
+
+    /**
+     * Send raw data to ExtHost
+     */
+    private fun sendRawDataToExtHost(data: String) {
+        val extHostTerminalServiceProxy =
+            rpcProtocol.getProxy(ServiceProxyRegistry.ExtHostContext.ExtHostTerminalService)
+        extHostTerminalServiceProxy.acceptTerminalProcessData(
+            id = numericId,
+            data = data
+        )
+        logger.debug("✅ Sent raw data to exthost: ${data.length} chars (terminal: $extHostTerminalId)")
+    }
+
+    /**
+     * Show terminal
+     */
+    fun show(preserveFocus: Boolean = false) {
+        if (!state.canOperate()) {
+            logger.warn("Terminal not initialized or disposed, cannot show: $extHostTerminalId")
+            return
+        }
+
+        ApplicationManager.getApplication().invokeLater {
+            try {
+                showTerminalToolWindow()
+                shellWidget?.show(preserveFocus)
+                logger.info("✅ Terminal shown: $extHostTerminalId")
+            } catch (e: Exception) {
+                logger.error("❌ Failed to show terminal: $extHostTerminalId", e)
+            }
+        }
+    }
+
+    /**
+     * Hide terminal
+     */
+    fun hide() {
+        if (!state.canOperate()) {
+            logger.warn("Terminal not initialized or disposed, cannot hide: $extHostTerminalId")
+            return
+        }
+
+        ApplicationManager.getApplication().invokeLater {
+            try {
+                hideTerminalToolWindow()
+                shellWidget?.hide()
+                logger.info("✅ Terminal hidden: $extHostTerminalId")
+            } catch (e: Exception) {
+                logger.error("❌ Failed to hide terminal: $extHostTerminalId", e)
+            }
+        }
+    }
+
+    /**
+     * Show terminal tool window and activate current terminal tab
+     */
+    private fun showTerminalToolWindow() {
+        try {
+            val toolWindow = ToolWindowManager.getInstance(project).getToolWindow(TERMINAL_TOOL_WINDOW_ID)
+            toolWindow?.show(null)
+        } catch (e: Exception) {
+            logger.error("❌ Failed to show terminal tool window", e)
+        }
+    }
+
+    /**
+     * Add terminalWidget to Terminal tool window
+     */
+    private fun addToTerminalToolWindow() {
+        if (terminalWidget == null) {
+            logger.warn("TerminalWidget is null, cannot add to tool window")
+            return
+        }
+
+        try {
+            val terminalToolWindowManager = org.jetbrains.plugins.terminal.TerminalToolWindowManager.getInstance(project)
+            val toolWindow = ToolWindowManager.getInstance(project).getToolWindow(TERMINAL_TOOL_WINDOW_ID)
+            
+            if (toolWindow == null) {
+                logger.warn("Terminal tool window does not exist")
+                return
+            }
+            
+            // Use TerminalToolWindowManager's newTab method to create new Content
+            val content = terminalToolWindowManager.newTab(toolWindow, terminalWidget!!)
+            content.displayName = config.name ?: DEFAULT_TERMINAL_NAME
+            
+            logger.info("✅ Added terminalWidget to Terminal tool window: ${content.displayName}")
+        } catch (e: Exception) {
+            logger.error("❌ Failed to add terminalWidget to tool window", e)
+        }
+    }
+
+    /**
+     * Hide terminal tool window
+     */
+    private fun hideTerminalToolWindow() {
+        val toolWindow = ToolWindowManager.getInstance(project).getToolWindow(TERMINAL_TOOL_WINDOW_ID)
+        toolWindow?.hide(null)
+    }
+
+    /**
+     * Send text to terminal
+     */
+    fun sendText(text: String, shouldExecute: Boolean = false) {
+        if (!state.canOperate()) {
+            logger.warn("Terminal not initialized or disposed, cannot send text: $extHostTerminalId")
+            return
+        }
+
+        ApplicationManager.getApplication().invokeLater {
+            try {
+                val shell = shellWidget ?: return@invokeLater
+
+                if (shouldExecute) {
+                    shell.executeCommand(text)
+                    logger.info("✅ Command executed: $text (terminal: $extHostTerminalId)")
+                } else {
+                    shell.writePlainMessage(text)
+                    logger.info("✅ Text sent: $text (terminal: $extHostTerminalId)")
+                }
+            } catch (e: Exception) {
+                logger.error("❌ Failed to send text: $extHostTerminalId", e)
+            }
+        }
+    }
+
+    /**
+     * Notify exthost process that terminal is opened
+     */
+    private fun notifyTerminalOpened() {
+        try {
+            logger.info("📤 Notify exthost process terminal opened: $extHostTerminalId (numericId: $numericId)")
+
+            val shellLaunchConfigDto = config.toShellLaunchConfigDto(project.basePath)
+            val extHostTerminalServiceProxy =
+                rpcProtocol.getProxy(ServiceProxyRegistry.ExtHostContext.ExtHostTerminalService)
+
+            extHostTerminalServiceProxy.acceptTerminalOpened(
+                id = numericId,
+                extHostTerminalId = extHostTerminalId,
+                name = config.name ?: DEFAULT_TERMINAL_NAME,
+                shellLaunchConfig = shellLaunchConfigDto
+            )
+
+            logger.info("✅ Successfully notified exthost process terminal opened: $extHostTerminalId")
+        } catch (e: Exception) {
+            logger.error("❌ Failed to notify exthost process terminal opened: $extHostTerminalId", e)
+        }
+    }
+
+    /**
+     * Notify Shell integration change
+     */
+    private fun notifyShellIntegrationChange() {
+        try {
+            val extHostTerminalShellIntegrationProxy =
+                rpcProtocol.getProxy(ServiceProxyRegistry.ExtHostContext.ExtHostTerminalShellIntegration)
+
+            extHostTerminalShellIntegrationProxy.shellIntegrationChange(instanceId = numericId)
+            logger.info("✅ Notified exthost Shell integration initialized: (terminal: $extHostTerminalId)")
+
+            notifyEnvironmentVariableChange(extHostTerminalShellIntegrationProxy)
+        } catch (e: Exception) {
+            logger.error("❌ Failed to notify exthost Shell integration initialized: (terminal: $extHostTerminalId)", e)
+        }
+    }
+
+    /**
+     * Notify environment variable change
+     */
+    private fun notifyEnvironmentVariableChange(extHostTerminalShellIntegrationProxy: ExtHostTerminalShellIntegrationProxy) {
+        config.env?.takeIf { it.isNotEmpty() }?.let { env ->
+            try {
+                val envKeys = env.keys.toTypedArray()
+                val envValues = env.values.toTypedArray()
+
+                extHostTerminalShellIntegrationProxy.shellEnvChange(
+                    instanceId = numericId,
+                    shellEnvKeys = envKeys,
+                    shellEnvValues = envValues,
+                    isTrusted = true
+                )
+
+                logger.info("✅ Notified exthost environment variable change: ${env.size} variables (terminal: $extHostTerminalId)")
+            } catch (e: Exception) {
+                logger.error("❌ Failed to notify environment variable change: (terminal: $extHostTerminalId)", e)
+            }
+        }
+    }
+
+    /**
+     * Trigger terminal close event
+     */
+    private fun onTerminalClosed() {
+        logger.info("🔔 Terminal closed event triggered: $extHostTerminalId (numericId: $numericId)")
+
+        try {
+            notifyTerminalClosed()
+            callbackManager.executeCloseCallbacks()
+
+            if (!state.isDisposed) {
+                dispose()
+            }
+        } catch (e: Exception) {
+            logger.error("Failed to handle terminal closed event: $extHostTerminalId", e)
+        }
+    }
+
+    /**
+     * Notify exthost process that terminal is closed
+     */
+    private fun notifyTerminalClosed() {
+        try {
+            logger.info("📤 Notify exthost process terminal closed: $extHostTerminalId (numericId: $numericId)")
+
+            val extHostTerminalServiceProxy =
+                rpcProtocol.getProxy(ServiceProxyRegistry.ExtHostContext.ExtHostTerminalService)
+            extHostTerminalServiceProxy.acceptTerminalClosed(
+                id = numericId,
+                exitCode = null,
+                exitReason = numericId
+            )
+
+            logger.info("✅ Successfully notified exthost process terminal closed: $extHostTerminalId")
+        } catch (e: Exception) {
+            logger.error("❌ Failed to notify exthost process terminal closed: $extHostTerminalId", e)
+        }
+    }
+
+    override fun dispose() {
+        if (state.isDisposed) return
+
+        logger.info("🧹 Disposing terminal instance: $extHostTerminalId")
+
+        try {
+            // 🎯 Mark as disposed first to avoid repeated calls in callbacks
+            state.markDisposed()
+            
+            callbackManager.clear()
+            scope.cancel()
+
+            // 🎯 Dispose terminalWidget, onTerminalClosed callback will be skipped since state.isDisposed=true
+            terminalWidget?.let { widget ->
+                try {
+                    Disposer.dispose(widget)
+                } catch (e: Exception) {
+                    logger.error("❌ Failed to dispose terminalWidget: $extHostTerminalId", e)
+                }
+            }
+
+            terminalShellIntegration.dispose()
+            cleanupResources()
+
+            logger.info("✅ Terminal instance disposed: $extHostTerminalId")
+        } catch (e: Exception) {
+            logger.error("❌ Failed to dispose terminal instance: $extHostTerminalId", e)
+        }
+    }
+
+    /**
+     * Cleanup resources
+     */
+    private fun cleanupResources() {
+        terminalWidget = null
+        shellWidget = null
+    }
+}
+
+/**
+ * Terminal configuration data class
+ */
+data class TerminalConfig(
+    val name: String? = null,
+    val shellPath: String? = null,
+    val shellArgs: List<String>? = null,
+    val cwd: String? = null,
+    val env: Map<String, String>? = null,
+    val useShellEnvironment: Boolean? = null,
+    val hideFromUser: Boolean? = null,
+    val isFeatureTerminal: Boolean? = null,
+    val forceShellIntegration: Boolean? = null,
+    val initialText: String? = null
+) {
+    companion object {
+        /**
+         * Create TerminalConfig from Map
+         */
+        fun fromMap(config: Map<String, Any?>): TerminalConfig {
+            return TerminalConfig(
+                name = config["name"] as? String,
+                shellPath = config["shellPath"] as? String,
+                shellArgs = config["shellArgs"] as? List<String>,
+                cwd = config["cwd"] as? String,
+                env = config["env"] as? Map<String, String>,
+                useShellEnvironment = config["useShellEnvironment"] as? Boolean,
+                hideFromUser = config["hideFromUser"] as? Boolean,
+                isFeatureTerminal = config["isFeatureTerminal"] as? Boolean,
+                forceShellIntegration = config["forceShellIntegration"] as? Boolean,
+                initialText = config["initialText"] as? String
+            )
+        }
+    }
+
+    /**
+     * Convert to ShellLaunchConfigDto
+     */
+    fun toShellLaunchConfigDto(defaultCwd: String?): ShellLaunchConfigDto {
+        return ShellLaunchConfigDto(
+            name = name,
+            executable = shellPath,
+            args = shellArgs,
+            cwd = cwd ?: defaultCwd,
+            env = env,
+            useShellEnvironment = useShellEnvironment,
+            hideFromUser = hideFromUser,
+            reconnectionProperties = null,
+            type = null,
+            isFeatureTerminal = isFeatureTerminal,
+            tabActions = null,
+            shellIntegrationEnvironmentReporting = forceShellIntegration
+        )
+    }
+}
+
+/**
+ * Terminal state manager
+ */
+private class TerminalState {
+    @Volatile
+    private var isInitialized = false
+
+    @Volatile
+    private var _isDisposed = false
+
+    val isDisposed: Boolean get() = _isDisposed
+
+    fun checkCanInitialize(terminalId: String) {
+        if (isInitialized || _isDisposed) {
+            throw IllegalStateException("Terminal instance already initialized or disposed: $terminalId")
+        }
+    }
+
+    fun markInitialized() {
+        isInitialized = true
+    }
+
+    fun markDisposed() {
+        _isDisposed = true
+    }
+
+    fun canOperate(): Boolean {
+        return isInitialized && !_isDisposed
+    }
+}
+
+/**
+ * Terminal callback manager
+ */
+private class TerminalCallbackManager {
+    private val logger = Logger.getInstance(TerminalCallbackManager::class.java)
+    private val terminalCloseCallbacks = mutableListOf<() -> Unit>()
+
+    fun addCloseCallback(callback: () -> Unit) {
+        terminalCloseCallbacks.add(callback)
+    }
+
+    fun executeCloseCallbacks() {
+        terminalCloseCallbacks.forEach { callback ->
+            try {
+                callback()
+            } catch (e: Exception) {
+                logger.error("Failed to execute terminal close callback", e)
+            }
+        }
+    }
+
+    fun clear() {
+        terminalCloseCallbacks.clear()
+    }
+}
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/terminal/TerminalInstanceManager.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/terminal/TerminalInstanceManager.kt
new file mode 100644
index 000000000..05e042665
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/terminal/TerminalInstanceManager.kt
@@ -0,0 +1,140 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.terminal
+
+import com.intellij.openapi.Disposable
+import com.intellij.openapi.components.Service
+import com.intellij.openapi.diagnostic.Logger
+import java.io.File
+import java.util.concurrent.ConcurrentHashMap
+import java.util.concurrent.atomic.AtomicInteger
+
+/**
+ * Terminal instance manager
+ * Responsible for managing the lifecycle and mapping of all terminal instances
+ * Avoids circular dependencies between different services
+ */
+@Service(Service.Level.PROJECT)
+class TerminalInstanceManager : Disposable {
+    private val logger = Logger.getInstance(TerminalInstanceManager::class.java)
+    
+    // Terminal instance management
+    private val terminals = ConcurrentHashMap<String, TerminalInstance>()
+    private val terminalsByNumericId = ConcurrentHashMap<Int, TerminalInstance>()
+    private val nextNumericId = AtomicInteger(1)
+
+    /**
+     * Allocate a new numeric ID
+     */
+    fun allocateNumericId(): Int {
+        return nextNumericId.getAndIncrement()
+    }
+    
+    /**
+     * Register terminal instance
+     */
+    fun registerTerminal(extHostTerminalId: String, terminalInstance: TerminalInstance) {
+        terminals[extHostTerminalId] = terminalInstance
+        terminalsByNumericId[terminalInstance.numericId] = terminalInstance
+        
+        // 🎯 Add terminal close event listener for automatic cleanup
+        terminalInstance.addTerminalCloseCallback {
+            logger.info("🔔 Received terminal close event callback: $extHostTerminalId")
+            
+            // Automatically remove terminal instance from manager
+            unregisterTerminal(extHostTerminalId)
+            
+            // Additional cleanup logic can be added here
+            // e.g., save terminal state, clean up related resources, etc.
+        }
+        
+        logger.info("📝 Registered terminal instance: $extHostTerminalId (numericId: ${terminalInstance.numericId})")
+    }
+    
+    /**
+     * Unregister terminal instance
+     */
+    fun unregisterTerminal(extHostTerminalId: String): TerminalInstance? {
+        val terminalInstance = terminals.remove(extHostTerminalId)
+        if (terminalInstance != null) {
+            terminalsByNumericId.remove(terminalInstance.numericId)
+            logger.info("🗑️ Unregistered terminal instance: $extHostTerminalId (numericId: ${terminalInstance.numericId})")
+        }
+        return terminalInstance
+    }
+    
+    /**
+     * Get terminal instance (by string ID)
+     */
+    fun getTerminalInstance(id: String): TerminalInstance? {
+        return terminals[id]
+    }
+    
+    /**
+     * Get terminal instance (by numeric ID)
+     */
+    fun getTerminalInstance(numericId: Int): TerminalInstance? {
+        return terminalsByNumericId[numericId]
+    }
+    
+    /**
+     * Get all terminal instances
+     */
+    fun getAllTerminals(): Collection<TerminalInstance> {
+        return terminals.values
+    }
+    
+    /**
+     * Check if terminal exists
+     */
+    fun containsTerminal(extHostTerminalId: String): Boolean {
+        return terminals.containsKey(extHostTerminalId)
+    }
+    
+    /**
+     * Get terminal count
+     */
+    fun getTerminalCount(): Int {
+        return terminals.size
+    }
+    
+    /**
+     * Get all terminal IDs
+     */
+    fun getAllTerminalIds(): Set<String> {
+        return terminals.keys.toSet()
+    }
+    
+    /**
+     * Get all numeric IDs
+     */
+    fun getAllNumericIds(): Set<Int> {
+        return terminalsByNumericId.keys.toSet()
+    }
+    
+    override fun dispose() {
+        logger.info("🧹 Disposing terminal instance manager")
+        
+        try {
+            // Dispose all terminal instances
+            val terminalList = terminals.values.toList()
+            terminals.clear()
+            terminalsByNumericId.clear()
+            
+            terminalList.forEach { terminal ->
+                try {
+                    terminal.dispose()
+                } catch (e: Exception) {
+                    logger.error("Failed to dispose terminal instance: ${terminal.extHostTerminalId}", e)
+                }
+            }
+            
+            logger.info("✅ Terminal instance manager disposed")
+            
+        } catch (e: Exception) {
+            logger.error("❌ Failed to dispose terminal instance manager", e)
+        }
+    }
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/terminal/TerminalShellIntegration.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/terminal/TerminalShellIntegration.kt
new file mode 100644
index 000000000..a0124eb7f
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/terminal/TerminalShellIntegration.kt
@@ -0,0 +1,182 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.terminal
+
+import com.intellij.openapi.diagnostic.Logger
+import ai.kilocode.jetbrains.ipc.proxy.IRPCProtocol
+import ai.kilocode.jetbrains.core.ServiceProxyRegistry
+import ai.kilocode.jetbrains.util.URI
+
+/**
+ * Terminal shell integration manager
+ * Responsible for handling the lifecycle management of terminal shell command execution and RPC communication with ExtHost
+ *
+ * @param extHostTerminalId ExtHost terminal ID
+ * @param numericId Numeric terminal ID
+ * @param rpcProtocol RPC protocol instance
+ */
+class TerminalShellIntegration(
+    private val extHostTerminalId: String,
+    private val numericId: Int,
+    private val rpcProtocol: IRPCProtocol
+) {
+    
+    companion object {
+        private const val HIGH_CONFIDENCE = 2
+        private const val DEFAULT_EXIT_CODE = 0
+        private const val LOG_PREFIX_SETUP = "🔧"
+        private const val LOG_PREFIX_START = "🚀"
+        private const val LOG_PREFIX_END = "🏁"
+        private const val LOG_PREFIX_DATA = "✨"
+        private const val LOG_PREFIX_CWD = "📁"
+        private const val LOG_PREFIX_SUCCESS = "✅"
+        private const val LOG_PREFIX_ERROR = "❌"
+        private const val LOG_PREFIX_DISPOSE = "🧹"
+    }
+
+    private val logger = Logger.getInstance(TerminalShellIntegration::class.java)
+    private var shellIntegrationState: ShellIntegrationOutputState? = null
+    private var shellEventListener: ShellEventListener? = null
+    
+    /**
+     * Lazy delegate for getting ExtHost terminal shell integration proxy
+     */
+    private val extHostProxy by lazy {
+        rpcProtocol.getProxy(ServiceProxyRegistry.ExtHostContext.ExtHostTerminalShellIntegration)
+    }
+
+    /**
+     * Setup shell integration
+     * Initialize shell event listener and state manager
+     */
+    fun setupShellIntegration() {
+        runCatching {
+            logger.info("$LOG_PREFIX_SETUP Setting up shell integration (terminal: $extHostTerminalId)...")
+            
+            initializeShellEventListener()
+            initializeShellIntegrationState()
+            
+            logger.info("$LOG_PREFIX_SUCCESS Shell integration setup complete (terminal: $extHostTerminalId)")
+        }.onFailure { exception ->
+            logger.error("$LOG_PREFIX_ERROR Failed to setup shell integration (terminal: $extHostTerminalId)", exception)
+        }
+    }
+
+    /**
+     * Dispose shell integration and release related resources
+     */
+    fun dispose() {
+        logger.info("$LOG_PREFIX_DISPOSE Disposing shell integration: $extHostTerminalId")
+        
+        runCatching {
+            shellIntegrationState?.apply {
+                terminate()
+                dispose()
+            }
+            shellEventListener = null
+            shellIntegrationState = null
+            
+            logger.info("$LOG_PREFIX_SUCCESS Shell integration disposed: $extHostTerminalId")
+        }.onFailure { exception ->
+            logger.error("$LOG_PREFIX_ERROR Failed to dispose shell integration: $extHostTerminalId", exception)
+        }
+    }
+
+    /**
+     * Append raw output data
+     * @param data Output data
+     */
+    fun appendRawOutput(data: String) {
+        shellIntegrationState?.appendRawOutput(data)
+    }
+
+    /**
+     * Initialize shell event listener
+     */
+    private fun initializeShellEventListener() {
+        shellEventListener = TerminalShellEventListener()
+    }
+
+    /**
+     * Initialize shell integration state manager
+     */
+    private fun initializeShellIntegrationState() {
+        shellIntegrationState = ShellIntegrationOutputState().apply {
+            shellEventListener?.let { addListener(it) }
+        }
+    }
+
+    /**
+     * Helper function to safely execute RPC calls
+     * @param operation Operation name for logging
+     * @param action RPC operation
+     */
+    private inline fun safeRpcCall(operation: String, action: () -> Unit) {
+        runCatching {
+            action()
+            logger.debug("$LOG_PREFIX_SUCCESS $operation succeeded (terminal: $extHostTerminalId)")
+        }.onFailure { exception ->
+            logger.error("$LOG_PREFIX_ERROR $operation failed (terminal: $extHostTerminalId)", exception)
+        }
+    }
+
+    /**
+     * Inner class for terminal shell event listener
+     * Handles various shell command execution events
+     */
+    private inner class TerminalShellEventListener : ShellEventListener {
+        
+        override fun onShellExecutionStart(commandLine: String, cwd: String) {
+            logger.info("$LOG_PREFIX_START Command execution started: '$commandLine' in directory '$cwd' (terminal: $extHostTerminalId)")
+            
+            safeRpcCall("Notify ExtHost command start") {
+                extHostProxy.shellExecutionStart(
+                    instanceId = numericId,
+                    commandLineValue = commandLine,
+                    commandLineConfidence = HIGH_CONFIDENCE,
+                    isTrusted = true,
+                    cwd = URI.file(cwd)
+                )
+            }
+        }
+        
+        override fun onShellExecutionEnd(commandLine: String, exitCode: Int?) {
+            val actualExitCode = exitCode ?: DEFAULT_EXIT_CODE
+            logger.info("$LOG_PREFIX_END Command execution finished: '$commandLine' (exit code: $actualExitCode) (terminal: $extHostTerminalId)")
+            
+            safeRpcCall("Notify ExtHost command end") {
+                extHostProxy.shellExecutionEnd(
+                    instanceId = numericId,
+                    commandLineValue = commandLine,
+                    commandLineConfidence = HIGH_CONFIDENCE,
+                    isTrusted = true,
+                    exitCode = actualExitCode
+                )
+            }
+        }
+        
+        override fun onShellExecutionData(data: String) {
+            logger.debug("$LOG_PREFIX_DATA Clean output data: ${data.length} chars (terminal: $extHostTerminalId)")
+            
+            safeRpcCall("Send shellExecutionData") {
+                extHostProxy.shellExecutionData(
+                    instanceId = numericId,
+                    data = data
+                )
+            }
+        }
+        
+        override fun onCwdChange(cwd: String) {
+            logger.info("$LOG_PREFIX_CWD Working directory changed to: '$cwd' (terminal: $extHostTerminalId)")
+            
+            safeRpcCall("Notify ExtHost directory change") {
+                extHostProxy.cwdChange(
+                    instanceId = numericId,
+                    cwd = URI.file(cwd)
+                )
+            }
+        }
+    }
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/terminal/WeCoderTerminalCustomizer.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/terminal/WeCoderTerminalCustomizer.kt
new file mode 100644
index 000000000..286a07f2c
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/terminal/WeCoderTerminalCustomizer.kt
@@ -0,0 +1,273 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.terminal
+
+import com.intellij.openapi.application.ApplicationManager
+import com.intellij.openapi.diagnostic.Logger
+import com.intellij.openapi.project.Project
+import org.jetbrains.plugins.terminal.LocalTerminalCustomizer
+import java.io.File
+import java.nio.file.Paths
+import java.util.concurrent.atomic.AtomicBoolean
+
+class WeCoderTerminalCustomizer : LocalTerminalCustomizer() {
+  
+  private val logger = Logger.getInstance(WeCoderTerminalCustomizer::class.java)
+  
+  // Mark file copy status
+  private val filesCopied = AtomicBoolean(false)
+  
+  // Get the base directory for shell integration files - use user home directory for cross-platform compatibility
+  private val shellIntegrationBaseDir: String by lazy {
+    val userHome = System.getProperty("user.home")
+    Paths.get(userHome, ".roo-cline-shell-integrations").toString()
+  }
+  
+  init {
+    // Asynchronously copy shell integration files during class initialization
+    copyShellIntegrationFiles()
+  }
+
+  /**
+   * Asynchronously copy shell integration files to user home directory
+   */
+  private fun copyShellIntegrationFiles() {
+    if (filesCopied.get()) {
+      return // Already copied
+    }
+ 
+    // Use IDEA's background thread pool to execute asynchronously
+    ApplicationManager.getApplication().executeOnPooledThread {
+      if (!filesCopied.compareAndSet(false, true)) {
+        return@executeOnPooledThread // Prevent duplicate copy
+      }
+ 
+      try {
+        logger.info("🚀 Start async copy of shell integration files to user home...")
+ 
+        // Define shell integration configs to copy
+        val shellConfigs = mapOf(
+          "vscode-zsh" to listOf(".zshrc", ".zshenv"),
+          "vscode-bash" to listOf("bashrc"),
+          "vscode-powershell" to listOf("profile.ps1", "diagnose.ps1")
+        )
+ 
+        // Copy integration files for each shell
+        shellConfigs.forEach { (shellType, files) ->
+          val sourceDir = "roo-cline-shell-integrations/$shellType"
+          val targetDir = Paths.get(shellIntegrationBaseDir, shellType).toString()
+ 
+          // Create target directory
+          val targetDirFile = File(targetDir)
+          if (!targetDirFile.exists()) {
+            targetDirFile.mkdirs()
+            logger.info("📁 Created $shellType target directory: $targetDir")
+          }
+ 
+          // Copy files
+          files.forEach { fileName ->
+            val inputStream = javaClass.classLoader.getResourceAsStream("$sourceDir/$fileName")
+            if (inputStream != null) {
+              val targetFile = File("$targetDir/$fileName")
+              targetFile.outputStream().use { outputStream ->
+                inputStream.copyTo(outputStream)
+              }
+              // Set executable permission
+              targetFile.setExecutable(true, true)
+              logger.info("✅ Successfully copied $shellType file: $fileName")
+            } else {
+              logger.warn("⚠️ Cannot find $shellType source file: $fileName")
+            }
+          }
+        }
+ 
+        logger.info("✅ Shell integration files async copy complete")
+ 
+      } catch (e: Exception) {
+        logger.error("❌ Failed to async copy shell integration files", e)
+        filesCopied.set(false) // Copy failed, reset state to allow retry
+      }
+    }
+  }
+
+
+  override fun customizeCommandAndEnvironment(
+    project: Project,
+    workingDirectory: String?,
+    command: Array<String>,
+    envs: MutableMap<String, String>
+  ): Array<String> {
+    
+    // Print debug logs
+    logger.info("🔧 WeCodeTerminalCustomizer - customize terminal command and environment")
+    logger.info("📂 Working directory: $workingDirectory")
+    logger.info("🔨 Command: ${command.joinToString(" ")}")
+    logger.info("🌍 Environment variables: ${envs.entries.joinToString("\n")}")
+    
+    // Inject VSCode shell integration script
+    return injectVSCodeScript(command, envs)
+  }
+
+  private fun injectVSCodeScript(command: Array<String>, envs: MutableMap<String, String>): Array<String> {
+    val shellName = File(command[0]).name
+    val scriptPath = getVSCodeScript(shellName) ?: run {
+      logger.warn("🚫 No integration script found for Shell($shellName)")
+      return command
+    }
+    
+    logger.info("🔧 Injecting Shell Integration script: $scriptPath")
+    logger.info("🐚 Shell type: $shellName")
+    
+    // Set general injection flag
+    envs["VSCODE_INJECTION"] = "1"
+    
+    return when (shellName) {
+      "bash", "sh" -> injectBashScript(command, envs, scriptPath)
+      "zsh" -> injectZshScript(command, envs, scriptPath)
+      "powershell", "pwsh", "powershell.exe" -> injectPowerShellScript(command, envs, scriptPath)
+      else -> {
+        logger.warn("⚠️ Unsupported shell type: $shellName")
+        command
+      }
+    }
+  }
+
+  /**
+   * Inject VSCode integration script for Bash/Sh
+   */
+  private fun injectBashScript(command: Array<String>, envs: MutableMap<String, String>, scriptPath: String): Array<String> {
+    val rcfileIndex = command.indexOf("--rcfile")
+    
+    return if (rcfileIndex != -1 && rcfileIndex + 1 < command.size) {
+      // If --rcfile parameter already exists, save the original rcfile path
+      val originalRcfile = command[rcfileIndex + 1]
+      logger.info("🔧 Detected existing --rcfile parameter: $originalRcfile")
+      
+      // Save the original rcfile path to environment variable for script use
+      envs["ORIGINAL_BASH_RCFILE"] = originalRcfile
+      
+      // Replace the existing --rcfile parameter value
+      val newCommand = command.clone()
+      newCommand[rcfileIndex + 1] = scriptPath
+      logger.info("🔧 Replaced --rcfile parameter with: $scriptPath")
+      newCommand
+    } else {
+      // If --rcfile parameter does not exist, add new parameter
+      logger.info("🔧 Added new --rcfile parameter: $scriptPath")
+      arrayOf(command[0], "--rcfile", scriptPath) + command.drop(1)
+    }
+  }
+
+  /**
+   * Inject VSCode integration script for Zsh
+   */
+  private fun injectZshScript(command: Array<String>, envs: MutableMap<String, String>, scriptPath: String): Array<String> {
+    // Save user's original ZDOTDIR environment variable
+    val userZdotdir = envs["ZDOTDIR"]
+      ?: System.getenv("ZDOTDIR")
+      ?: System.getProperty("user.home")
+    
+    envs["USER_ZDOTDIR"] = userZdotdir
+    envs["ZDOTDIR"] = scriptPath
+    
+    logger.info("🔧 Saved original ZDOTDIR: $userZdotdir, set new ZDOTDIR: $scriptPath")
+    return command
+  }
+
+  /**
+   * Inject VSCode integration script for PowerShell
+   */
+  private fun injectPowerShellScript(command: Array<String>, envs: MutableMap<String, String>, scriptPath: String): Array<String> {
+    logger.info("🔧 Inject PowerShell script: $scriptPath")
+    
+    // Add debug info environment variables
+    //envs["WECODER_SHELL_INTEGRATION"] = "1"
+    //envs["WECODER_SCRIPT_PATH"] = scriptPath
+
+    // Set environment variables required for PowerShell shell integration
+    envs["VSCODE_NONCE"] = generateNonce()
+    envs["VSCODE_SHELL_ENV_REPORTING"] = "1"
+    envs["VSCODE_STABLE"] = "1" // Mark as stable version
+    
+    logger.info("🔧 Set PowerShell environment variables: VSCODE_NONCE=${envs["VSCODE_NONCE"]}")
+    
+    // Find existing -File parameter position
+    val fileIndex = command.indexOf("-File")
+    
+    return if (fileIndex != -1 && fileIndex + 1 < command.size) {
+      // If -File parameter already exists, save the original script path
+      val originalScript = command[fileIndex + 1]
+      logger.info("🔧 Detected existing -File parameter: $originalScript")
+      
+      // Save the original script path to environment variable for script use
+      envs["ORIGINAL_POWERSHELL_SCRIPT"] = originalScript
+      
+      // Replace the existing -File parameter value
+      val newCommand = command.clone()
+      newCommand[fileIndex + 1] = scriptPath
+      logger.info("🔧 Replace -File parameter with: $scriptPath")
+      newCommand
+    } else {
+      // If -File parameter does not exist, add parameter in IDEA default format
+      // Default format: powershell.exe -NoExit -ExecutionPolicy Bypass -File <script>
+      logger.info("🔧 Add new -File parameter: $scriptPath")
+      
+      // Build new command, keep IDEA's default parameter order
+      val newCommand = mutableListOf<String>()
+      newCommand.add(command[0]) // powershell.exe
+      
+      // Check if -NoExit parameter already exists
+      if (!command.contains("-NoExit")) {
+        newCommand.add("-NoExit")
+      }
+      
+      // Check if -ExecutionPolicy parameter already exists
+      val execPolicyIndex = command.indexOf("-ExecutionPolicy")
+      if (execPolicyIndex == -1) {
+        newCommand.add("-ExecutionPolicy")
+        newCommand.add("Bypass")
+      }
+      
+      // Add -File parameter and script path
+      newCommand.add("-File")
+      newCommand.add(scriptPath)
+      
+      // Add other original parameters (skip the first executable file name)
+      command.drop(1).forEach { arg ->
+        if (arg != "-NoExit" && arg != "-ExecutionPolicy" && arg != "Bypass") {
+          newCommand.add(arg)
+        }
+      }
+      
+      newCommand.toTypedArray()
+    }
+  }
+  
+  /**
+   * Generate random nonce for shell integration
+   */
+  private fun generateNonce(): String {
+    val chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
+    return (1..16).map { chars.random() }.joinToString("")
+  }
+  
+  private fun getVSCodeScript(shellName: String): String? {
+    return when (shellName) {
+      "bash", "sh" -> {
+        // bash uses --rcfile parameter, needs to point to a specific file
+        Paths.get(shellIntegrationBaseDir, "vscode-bash", "bashrc").toString()
+      }
+      "zsh" -> {
+        // zsh uses ZDOTDIR, needs to point to a directory, zsh will automatically look for .zshrc and .zshenv in that directory
+        Paths.get(shellIntegrationBaseDir, "vscode-zsh").toString()
+      }
+      "powershell", "pwsh", "powershell.exe" -> {
+        // PowerShell uses -File parameter, needs to point to a specific file
+        Paths.get(shellIntegrationBaseDir, "vscode-powershell", "profile.ps1").toString()
+      }
+      else -> null
+    }
+  }
+}
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/theme/ThemeManager.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/theme/ThemeManager.kt
new file mode 100644
index 000000000..a7200ad44
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/theme/ThemeManager.kt
@@ -0,0 +1,585 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.theme
+
+import com.google.gson.Gson
+import com.google.gson.JsonElement
+import com.google.gson.JsonObject
+import com.google.gson.JsonParser
+import com.google.gson.JsonIOException
+import com.intellij.ide.ui.LafManagerListener
+import com.intellij.openapi.Disposable
+import com.intellij.openapi.application.ApplicationManager
+import com.intellij.openapi.diagnostic.Logger
+import com.intellij.openapi.util.Disposer
+import com.intellij.util.messages.MessageBusConnection
+import java.io.File
+import java.io.IOException
+import java.io.InputStream
+import java.nio.charset.StandardCharsets
+import java.nio.file.Path
+import java.nio.file.Paths
+import java.util.concurrent.CopyOnWriteArrayList
+import javax.swing.UIManager
+import kotlin.io.path.notExists
+import kotlin.io.path.exists
+
+/**
+ * Theme change listener interface
+ */
+interface ThemeChangeListener {
+    /**
+     * Called when theme changes
+     * @param themeConfig Theme configuration JSON object
+     * @param isDarkTheme Whether it's a dark theme
+     */
+    fun onThemeChanged(themeConfig: JsonObject, isDarkTheme: Boolean)
+}
+
+/**
+ * Theme manager, responsible for monitoring IDE theme changes and notifying observers
+ */
+class ThemeManager : Disposable {
+    private val logger = Logger.getInstance(ThemeManager::class.java)
+    
+    // Theme configuration resource directory
+    private var themeResourceDir: Path? = null
+
+    // Whether current theme is dark
+    private var isDarkTheme = true
+
+    // Current theme configuration cache
+    private var currentThemeConfig: JsonObject? = null
+
+    // VSCode theme CSS content cache
+    private var themeStyleContent: String? = null
+
+    // Message bus connection
+    private var messageBusConnection: MessageBusConnection? = null
+
+    // Theme change listener list
+    private val themeChangeListeners = CopyOnWriteArrayList<ThemeChangeListener>()
+
+    // JSON serialization
+    private val gson = Gson()
+    
+    /**
+     * Initialize theme manager
+     * @param resourceRoot Theme resource root directory
+     */
+    fun initialize(resourceRoot: String) {
+        logger.info("Initializing theme manager, resource root: $resourceRoot")
+        
+        // Set theme resource directory
+        themeResourceDir = Paths.get(resourceRoot, "integrations", "theme", "default-themes")
+        
+        // Check if resource directory exists
+        if (themeResourceDir?.notExists() == true) {
+            themeResourceDir = Paths.get(resourceRoot, "integrations", "theme", "default-themes")
+            if(themeResourceDir?.notExists() == true) {
+                logger.warn("Theme resource directory does not exist: $themeResourceDir")
+                return
+            }
+        }
+        
+        logger.info("Theme resource directory set: $themeResourceDir")
+        
+        // Detect current theme at initialization
+        updateCurrentThemeStatus()
+        
+        // Read initial theme configuration
+        loadThemeConfig()
+        
+        // Register theme change listener
+        messageBusConnection = ApplicationManager.getApplication().messageBus.connect()
+        messageBusConnection?.subscribe(LafManagerListener.TOPIC, LafManagerListener {
+            logger.info("Detected IDE theme change")
+            val oldIsDarkTheme = isDarkTheme
+            val oldConfig = currentThemeConfig
+            
+            // Update theme status
+            updateCurrentThemeStatus()
+            
+            // Reload configuration if theme type changes
+            if (oldIsDarkTheme != isDarkTheme || oldConfig == null) {
+                loadThemeConfig()
+            }
+        })
+        
+        logger.info("Theme manager initialization completed, current theme: ${if (isDarkTheme) "dark" else "light"}")
+    }
+
+    /**
+     * Force get whether current theme is dark, independent of initialization
+     */
+    fun isDarkThemeForce(): Boolean {
+        updateCurrentThemeStatus()
+        return isDarkTheme()
+    }
+    
+    /**
+     * Update current theme status
+     */
+    private fun updateCurrentThemeStatus() {
+        try {
+            // Check if current theme is dark via UIManager
+            val background = UIManager.getColor("Panel.background")
+            if (background != null) {
+                val brightness = (0.299 * background.red + 0.587 * background.green + 0.114 * background.blue) / 255.0
+                isDarkTheme = brightness < 0.5
+                logger.info("Detected ${if (isDarkTheme) "dark" else "light"} theme: brightness is $brightness")
+            } else {
+                // Default to dark theme
+                isDarkTheme = true
+                logger.warn("Cannot detect theme brightness, defaulting to dark theme")
+            }
+        } catch (e: Exception) {
+            logger.error("Error updating theme status", e)
+            isDarkTheme = true
+        }
+    }
+    
+    /**
+     * Parse theme string, remove comments
+     */
+    private fun parseThemeString(themeString: String): JsonObject {
+        try {
+            // Remove comment lines
+            val cleanedContent = themeString
+                .split("\n")
+                .filter { !it.trim().startsWith("//") }
+                .joinToString("\n")
+            
+            return JsonParser.parseString(cleanedContent).asJsonObject
+        } catch (e: Exception) {
+            logger.error("Error parsing theme string", e)
+            throw e
+        }
+    }
+    
+    /**
+     * Merge two JSON objects
+     */
+    private fun mergeJsonObjects(first: JsonObject, second: JsonObject): JsonObject {
+        try {
+            val result = gson.fromJson(gson.toJson(first), JsonObject::class.java)
+            
+            for (key in second.keySet()) {
+                if (!first.has(key)) {
+                    // New value
+                    result.add(key, second.get(key))
+                    continue
+                }
+                
+                val firstValue = first.get(key)
+                val secondValue = second.get(key)
+                
+                if (firstValue.isJsonArray && secondValue.isJsonArray) {
+                    // Merge arrays
+                    val resultArray = firstValue.asJsonArray
+                    secondValue.asJsonArray.forEach { resultArray.add(it) }
+                } else if (firstValue.isJsonObject && secondValue.isJsonObject) {
+                    // Recursively merge objects
+                    result.add(key, mergeJsonObjects(firstValue.asJsonObject, secondValue.asJsonObject))
+                } else {
+                    // Other types (boolean, number, string)
+                    result.add(key, secondValue)
+                }
+            }
+            
+            return result
+        } catch (e: Exception) {
+            logger.error("Error merging JSON objects", e)
+            // If merge fails, directly return a new object containing all properties from both objects
+            val result = gson.fromJson(gson.toJson(first), JsonObject::class.java)
+            second.entrySet().forEach { result.add(it.key, it.value) }
+            return result
+        }
+    }
+    
+    /**
+     * Convert theme format
+     * Implemented according to monaco-vscode-textmate-theme-converter's convertTheme logic
+     */
+    private fun convertTheme(theme: JsonObject): JsonObject {
+        try {
+            val result = JsonObject()
+            // Set basic properties
+            result.addProperty("inherit", false)
+            
+            // Set base
+            var base = "vs-dark" // Default to dark theme
+            if (theme.has("type")) {
+                base = when (theme.get("type").asString) {
+                    "light", "vs" -> "vs"
+                    "hc", "high-contrast", "hc-light", "high-contrast-light" -> "hc-black"
+                    else -> "vs-dark"
+                }
+            } else {
+                // Set based on currently detected theme
+                base = if (isDarkTheme) "vs-dark" else "vs"
+            }
+            result.addProperty("base", base)
+            
+            // Copy colors
+            if (theme.has("colors")) {
+                result.add("colors", theme.get("colors"))
+            } else {
+                result.add("colors", JsonObject())
+            }
+            
+            // Create rules array
+            val monacoThemeRules = JsonParser.parseString("[]").asJsonArray
+            result.add("rules", monacoThemeRules)
+            
+            // Create empty encodedTokensColors array
+            result.add("encodedTokensColors", JsonParser.parseString("[]").asJsonArray)
+            
+            // Process tokenColors
+            if (theme.has("tokenColors") && theme.get("tokenColors").isJsonArray) {
+                val tokenColors = theme.getAsJsonArray("tokenColors")
+                
+                for (i in 0 until tokenColors.size()) {
+                    val colorElement = tokenColors.get(i)
+                    if (colorElement.isJsonObject) {
+                        val colorObj = colorElement.asJsonObject
+                        
+                        if (!colorObj.has("scope") || !colorObj.has("settings")) {
+                            continue
+                        }
+                        
+                        val scope = colorObj.get("scope")
+                        val settings = colorObj.get("settings")
+                        
+                        if (scope.isJsonPrimitive && scope.asJsonPrimitive.isString) {
+                            // Handle string type scope
+                            val scopeStr = scope.asString
+                            val scopes = scopeStr.split(",")
+                            
+                            if (scopes.size > 1) {
+                                // If contains multiple scopes (comma separated), process each
+                                for (scopeItem in scopes) {
+                                    val rule = JsonObject()
+                                    
+                                    // Copy all properties from settings
+                                    if (settings.isJsonObject) {
+                                        val settingsObj = settings.asJsonObject
+                                        for (entry in settingsObj.entrySet()) {
+                                            rule.add(entry.key, entry.value)
+                                        }
+                                    }
+                                    
+                                    // Set token property
+                                    rule.addProperty("token", scopeItem.trim())
+                                    monacoThemeRules.add(rule)
+                                }
+                            } else {
+                                // Single scope
+                                val rule = JsonObject()
+                                
+                                // Copy all properties from settings
+                                if (settings.isJsonObject) {
+                                    val settingsObj = settings.asJsonObject
+                                    for (entry in settingsObj.entrySet()) {
+                                        rule.add(entry.key, entry.value)
+                                    }
+                                }
+                                
+                                // Set token property
+                                rule.addProperty("token", scopeStr.trim())
+                                monacoThemeRules.add(rule)
+                            }
+                        } else if (scope.isJsonArray) {
+                            // Handle array type scope
+                            val scopeArray = scope.asJsonArray
+                            for (j in 0 until scopeArray.size()) {
+                                val scopeItem = scopeArray.get(j)
+                                if (scopeItem.isJsonPrimitive && scopeItem.asJsonPrimitive.isString) {
+                                    val rule = JsonObject()
+                                    
+                                    // Copy all properties from settings
+                                    if (settings.isJsonObject) {
+                                        val settingsObj = settings.asJsonObject
+                                        for (entry in settingsObj.entrySet()) {
+                                            rule.add(entry.key, entry.value)
+                                        }
+                                    }
+                                    
+                                    // Set token property
+                                    rule.addProperty("token", scopeItem.asString.trim())
+                                    monacoThemeRules.add(rule)
+                                }
+                            }
+                        }
+                    }
+                }
+            } else if (theme.has("settings") && theme.get("settings").isJsonArray) {
+                // Handle settings (old format)
+                val settings = theme.getAsJsonArray("settings")
+                
+                for (i in 0 until settings.size()) {
+                    val settingElement = settings.get(i)
+                    if (settingElement.isJsonObject) {
+                        val settingObj = settingElement.asJsonObject
+                        
+                        if (!settingObj.has("scope") || !settingObj.has("settings")) {
+                            continue
+                        }
+                        
+                        val scope = settingObj.get("scope")
+                        val settingsObj = settingObj.getAsJsonObject("settings")
+                        
+                        if (scope.isJsonPrimitive && scope.asJsonPrimitive.isString) {
+                            // Handle string type scope
+                            val scopeStr = scope.asString
+                            val scopes = scopeStr.split(",")
+                            
+                            if (scopes.size > 1) {
+                                // If contains multiple scopes (comma separated), process each
+                                for (scopeItem in scopes) {
+                                    val rule = JsonObject()
+                                    
+                                    // Copy all properties from settings
+                                    for (entry in settingsObj.entrySet()) {
+                                        rule.add(entry.key, entry.value)
+                                    }
+                                    
+                                    // Set token property
+                                    rule.addProperty("token", scopeItem.trim())
+                                    monacoThemeRules.add(rule)
+                                }
+                            } else {
+                                // Single scope
+                                val rule = JsonObject()
+                                
+                                // Copy all properties from settings
+                                for (entry in settingsObj.entrySet()) {
+                                    rule.add(entry.key, entry.value)
+                                }
+                                
+                                // Set token property
+                                rule.addProperty("token", scopeStr.trim())
+                                monacoThemeRules.add(rule)
+                            }
+                        }
+                    }
+                }
+            }
+            
+            return result
+        } catch (e: Exception) {
+            logger.error("Error converting theme format", e)
+            throw e
+        }
+    }
+    
+    /**
+     * Read VSCode theme style file from classpath
+     * @return Theme CSS content
+     */
+    private fun loadVscodeThemeStyle(vscodeThemeFile: File): String? {
+        try {
+            logger.info("Attempting to load VSCode theme style file: ${vscodeThemeFile.absolutePath}")
+            val content = vscodeThemeFile.readText(StandardCharsets.UTF_8)
+            logger.info("Successfully loaded VSCode theme style, size: ${content.length} bytes")
+            return content
+        } catch (e: Exception) {
+            logger.error("Failed to read VSCode theme style file: ${vscodeThemeFile.absolutePath}", e)
+        }
+        
+        return null
+    }
+    
+    /**
+     * Load theme configuration
+     */
+    private fun loadThemeConfig() {
+        if (themeResourceDir?.notExists() == true) {
+            logger.warn("Cannot load theme configuration: resource directory does not exist")
+            return
+        }
+        
+        try {
+            // Select corresponding theme file
+            val themeFileName = if (isDarkTheme) "dark_modern.json" else "light_modern.json"
+            val vscodeThemeName = if (isDarkTheme) "vscode-theme-dark.css" else "vscode-theme-light.css"
+            val themeFile = themeResourceDir?.resolve(themeFileName)?.toFile()
+            val vscodeThemeFile = themeResourceDir?.resolve(vscodeThemeName)?.toFile()
+            
+            if (themeFile?.exists() == true && vscodeThemeFile?.exists() == true) {
+                // Read theme file content
+                val themeContent = themeFile.readText()
+                
+                // Parse theme content
+                val parsed = parseThemeString(themeContent)
+                
+                // Handle include field, similar to getTheme.ts logic
+                var finalTheme = parsed
+                if (parsed.has("include")) {
+                    val includeFileName = parsed.get("include").asString
+                    val includePath = themeResourceDir?.resolve(includeFileName)
+                    
+                    if (includePath != null && includePath.exists()) {
+                        try {
+                            val includeContent = includePath.toFile().readText()
+                            val includeTheme = parseThemeString(includeContent)
+                            finalTheme = mergeJsonObjects(finalTheme, includeTheme)
+                        } catch (e: Exception) {
+                            logger.error("Error processing include theme: $includeFileName", e)
+                        }
+                    }
+                }
+                
+                // Convert theme
+                val converted = convertTheme(finalTheme)
+                
+                // Read VSCode theme style file
+                themeStyleContent = loadVscodeThemeStyle(vscodeThemeFile)
+                
+                // Add style content to converted theme object
+                if (themeStyleContent != null) {
+                    converted.addProperty("cssContent", themeStyleContent)
+                }
+                
+                // Update cache
+                val oldConfig = currentThemeConfig
+                currentThemeConfig = converted
+                
+                logger.info("Loaded and converted theme configuration: $themeFileName")
+                
+                // Notify listeners when configuration changes
+                if (oldConfig?.toString() != converted.toString()) {
+                    notifyThemeChangeListeners()
+                }
+            } else {
+                logger.warn("Theme configuration file does not exist: $themeResourceDir")
+                logger.warn("Theme configuration file does not exist: $themeFileName")
+            }
+        } catch (e: IOException) {
+            logger.error("Error reading theme configuration", e)
+        } catch (e: JsonIOException) {
+            logger.error("Error processing theme JSON", e)
+        } catch (e: Exception) {
+            logger.error("Unknown error occurred during theme configuration loading", e)
+        }
+    }
+    
+    /**
+     * Notify all theme change listeners
+     */
+    private fun notifyThemeChangeListeners() {
+        val config = currentThemeConfig ?: return
+        
+        logger.info("Notifying ${themeChangeListeners.size} theme change listeners")
+        themeChangeListeners.forEach { listener ->
+            try {
+                listener.onThemeChanged(config, isDarkTheme)
+            } catch (e: Exception) {
+                logger.error("Error notifying theme change listener", e)
+            }
+        }
+    }
+    
+    /**
+     * Add theme change listener
+     * @param listener Listener
+     */
+    fun addThemeChangeListener(listener: ThemeChangeListener) {
+        themeChangeListeners.add(listener)
+        logger.info("Added theme change listener, current listener count: ${themeChangeListeners.size}")
+        
+        // If theme configuration already exists, immediately notify new listener
+        currentThemeConfig?.let {
+            try {
+                listener.onThemeChanged(it, isDarkTheme)
+                logger.info("Notified newly added listener of current theme configuration")
+            } catch (e: Exception) {
+                logger.error("Error notifying new listener of current theme configuration", e)
+            }
+        }
+    }
+    
+    /**
+     * Remove theme change listener
+     * @param listener Listener
+     */
+    fun removeThemeChangeListener(listener: ThemeChangeListener) {
+        themeChangeListeners.remove(listener)
+        logger.info("Removed theme change listener, remaining listener count: ${themeChangeListeners.size}")
+    }
+    
+    /**
+     * Manually reload theme configuration
+     * Will reload and notify listeners even if theme has not changed
+     */
+    fun reloadThemeConfig() {
+        logger.info("Manually reloading theme configuration")
+        loadThemeConfig()
+    }
+    
+    /**
+     * Get whether current theme is dark
+     * @return Whether dark theme
+     */
+    fun isDarkTheme(): Boolean {
+        return isDarkTheme
+    }
+    
+    /**
+     * Get current theme configuration JSON object
+     * @return Theme configuration JSON object
+     */
+    fun getCurrentThemeConfig(): JsonObject? {
+        return currentThemeConfig
+    }
+    
+    override fun dispose() {
+        logger.info("Releasing theme manager resources")
+        
+        // Clear listener list
+        themeChangeListeners.clear()
+        
+        // Clean up message bus connection
+        try {
+            messageBusConnection?.disconnect()
+        } catch (e: Exception) {
+            logger.error("Error disconnecting message bus connection", e)
+        }
+        messageBusConnection = null
+        
+        // Reset resources
+        themeResourceDir = null
+        currentThemeConfig = null
+        themeStyleContent = null
+        
+        // Reset singleton
+        resetInstance()
+        
+        logger.info("Theme manager resources released")
+    }
+    
+    companion object {
+        @Volatile
+        private var instance: ThemeManager? = null
+        
+        /**
+         * Get theme manager instance
+         */
+        fun getInstance(): ThemeManager {
+            return instance ?: synchronized(this) {
+                instance ?: ThemeManager().also { instance = it }
+            }
+        }
+        
+        /**
+         * Reset theme manager instance
+         */
+        private fun resetInstance() {
+            synchronized(this) {
+                instance = null
+            }
+        }
+    }
+}
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ui/RooToolWindowFactory.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ui/RooToolWindowFactory.kt
new file mode 100644
index 000000000..7ee2e3b4a
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/ui/RooToolWindowFactory.kt
@@ -0,0 +1,333 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.ui
+
+import com.intellij.openapi.actionSystem.ActionManager
+import com.intellij.openapi.actionSystem.AnAction
+import com.intellij.openapi.application.ApplicationManager
+import com.intellij.openapi.diagnostic.Logger
+import com.intellij.openapi.project.Project
+import com.intellij.openapi.wm.ToolWindow
+import com.intellij.openapi.wm.ToolWindowFactory
+import com.intellij.ui.content.ContentFactory
+import com.intellij.ide.plugins.PluginManagerCore
+import com.intellij.openapi.extensions.PluginId
+import com.intellij.ui.jcef.JBCefApp
+import com.intellij.openapi.application.ApplicationInfo
+import com.intellij.ide.BrowserUtil
+import ai.kilocode.jetbrains.actions.OpenDevToolsAction
+import ai.kilocode.jetbrains.plugin.WecoderPlugin
+import ai.kilocode.jetbrains.plugin.WecoderPluginService
+import ai.kilocode.jetbrains.plugin.DEBUG_MODE
+import ai.kilocode.jetbrains.webview.DragDropHandler
+import ai.kilocode.jetbrains.webview.WebViewCreationCallback
+import ai.kilocode.jetbrains.webview.WebViewInstance
+import ai.kilocode.jetbrains.webview.WebViewManager
+import ai.kilocode.jetbrains.util.PluginConstants
+import java.awt.BorderLayout
+import java.awt.datatransfer.StringSelection
+import java.awt.Toolkit
+import java.awt.Dimension
+import javax.swing.JButton
+import javax.swing.JLabel
+import javax.swing.JPanel
+
+class RooToolWindowFactory : ToolWindowFactory {
+
+    override fun createToolWindowContent(project: Project, toolWindow: ToolWindow) {
+        // Initialize plugin service
+        val pluginService = WecoderPlugin.getInstance(project)
+        pluginService.initialize(project)
+
+        // toolbar
+        val titleActions = mutableListOf<AnAction>()
+        val action = ActionManager.getInstance().getAction("WecoderToolbarGroup")
+        if (action != null) {
+            titleActions.add(action)
+        }
+        // Add developer tools button only in debug mode
+        if ( WecoderPluginService.getDebugMode() != DEBUG_MODE.NONE) {
+            titleActions.add(OpenDevToolsAction { project.getService(WebViewManager::class.java).getLatestWebView() })
+        }
+        
+        toolWindow.setTitleActions(titleActions)
+
+        // webview panel
+        val rooToolWindowContent = RooToolWindowContent(project, toolWindow)
+        val contentFactory = ContentFactory.getInstance()
+        val content = contentFactory.createContent(
+            rooToolWindowContent.content,
+            "",
+            false
+        )
+        toolWindow.contentManager.addContent(content)
+    }
+
+    private class RooToolWindowContent(
+        private val project: Project,
+        private val toolWindow: ToolWindow
+    ) : WebViewCreationCallback {
+        private val logger = Logger.getInstance(RooToolWindowContent::class.java)
+        
+        // Get WebViewManager instance
+        private val webViewManager = project.getService(WebViewManager::class.java)
+        
+        // Content panel
+        private val contentPanel = JPanel(BorderLayout())
+        
+        // Placeholder label
+        private val placeholderLabel = JLabel(createSystemInfoText())
+
+        // System info text for copying
+        private val systemInfoText = createSystemInfoPlainText()
+        
+        /**
+         * Create system information text in HTML format
+         */
+        private fun createSystemInfoText(): String {
+            val appInfo = ApplicationInfo.getInstance()
+            val plugin = PluginManagerCore.getPlugin(PluginId.getId(PluginConstants.PLUGIN_ID))
+            val pluginVersion = plugin?.version ?: "unknown"
+            val osName = System.getProperty("os.name")
+            val osVersion = System.getProperty("os.version")
+            val osArch = System.getProperty("os.arch")
+            val jcefSupported = JBCefApp.isSupported()
+            
+            // Check for Linux ARM system
+            val isLinuxArm = osName.lowercase().contains("linux") && (osArch.lowercase().contains("aarch64") || osArch.lowercase().contains("arm"))
+            
+            return buildString {
+                append("<html><body style='width: 300px;'>")
+                append("<p>Kilo Code is initializing...")
+                append("<h3>System Information</h3>")
+                append("<table>")
+                append("<tr><td><b>CPU Architecture:</b></td><td>$osArch</td></tr>")
+                append("<tr><td><b>Operating System:</b></td><td>$osName $osVersion</td></tr>")
+                append("<tr><td><b>IDE Version:</b></td><td>${appInfo.fullApplicationName} (build ${appInfo.build})</td></tr>")
+                append("<tr><td><b>Plugin Version:</b></td><td>$pluginVersion</td></tr>")
+                append("<tr><td><b>JCEF Support:</b></td><td>${if (jcefSupported) "Yes" else "No"}</td></tr>")
+                append("</table>")
+                
+                // Add warning messages
+                append("<br>")
+                if (isLinuxArm) {
+                    append("<div style='background-color: #fff3cd; border: 1px solid #ffeaa7; padding: 10px; border-radius: 4px; color: #856404;'>")
+                    append("<b>⚠️ System Not Supported</b><br>")
+                    append("Linux ARM systems are not currently supported by this plugin.")
+                    append("</div>")
+                    append("<br>")
+                }
+                
+                if (!jcefSupported) {
+                    append("<div style='background-color: #f8d7da; border: 1px solid #f5c6cb; padding: 10px; border-radius: 4px; color: #721c24;'>")
+                    append("<b>⚠️ JCEF Not Supported</b><br>")
+                    append("Your IDE runtime does not support JCEF. Please use a JCEF-enabled runtime.<br>")
+                    append("See known issues doc for more information.")
+                    append("</div>")
+                    append("<br>")
+                }
+                
+                // Add Known Issues text without link
+                append("<div style='text-align: center; margin-top: 10px;'>")
+                append("If this interface persists for a long time, you can refer to the ")
+                append(" known issues documentation to check if there are any known problems.")
+                append("</div>")
+                
+                append("</body></html>")
+            }
+        }
+        
+        /**
+         * Create system information text in plain text format for copying
+         */
+        private fun createSystemInfoPlainText(): String {
+            val appInfo = ApplicationInfo.getInstance()
+            val plugin = PluginManagerCore.getPlugin(PluginId.getId(PluginConstants.PLUGIN_ID))
+            val pluginVersion = plugin?.version ?: "unknown"
+            val osName = System.getProperty("os.name")
+            val osVersion = System.getProperty("os.version")
+            val osArch = System.getProperty("os.arch")
+            val jcefSupported = JBCefApp.isSupported()
+            
+            // Check for Linux ARM system
+            val isLinuxArm = osName.lowercase().contains("linux") && (osArch.lowercase().contains("aarch64") || osArch.lowercase().contains("arm"))
+            
+            return buildString {
+                append("System Information\n")
+                append("==================\n")
+                append("CPU Architecture: $osArch\n")
+                append("Operating System: $osName $osVersion\n")
+                append("IDE Version: ${appInfo.fullApplicationName} (build ${appInfo.build})\n")
+                append("Plugin Version: $pluginVersion\n")
+                append("JCEF Support: ${if (jcefSupported) "Yes" else "No"}\n")
+                
+                // Add warning messages
+                append("\n")
+                if (isLinuxArm) {
+                    append("WARNING: System Not Supported\n")
+                    append("Linux ARM systems are not currently supported by this plugin.\n")
+                    append("\n")
+                }
+                
+                if (!jcefSupported) {
+                    append("WARNING: JCEF Not Supported\n")
+                    append("Your IDE runtime does not support JCEF. Please use a JCEF-enabled runtime.\n")
+                    append("See Known Issues for more information\n")
+                    append("\n")
+                }
+                
+            }
+        }
+        
+        /**
+         * Copy system information to clipboard
+         */
+        private fun copySystemInfo() {
+            val stringSelection = StringSelection(systemInfoText)
+            val clipboard = Toolkit.getDefaultToolkit().getSystemClipboard()
+            clipboard.setContents(stringSelection, null)
+        }
+        
+        // Known Issues button
+        private val knownIssuesButton = JButton("Known Issues").apply {
+            preferredSize = Dimension(150, 30)
+            addActionListener {
+                // TODO: Update to point to actual known issues documentation
+                BrowserUtil.browse("https://kilocode.ai/docs")
+            }
+        }
+        
+        // Copy button
+        private val copyButton = JButton("Copy System Info").apply {
+            preferredSize = Dimension(150, 30)
+            addActionListener { copySystemInfo() }
+        }
+        
+        // Button panel to hold both buttons side by side
+        private val buttonPanel = JPanel().apply {
+            layout = BorderLayout()
+            add(knownIssuesButton, BorderLayout.WEST)
+            add(copyButton, BorderLayout.EAST)
+        }
+        
+        private var dragDropHandler: DragDropHandler? = null
+        
+        // Main panel
+        val content: JPanel = JPanel(BorderLayout()).apply {
+            // Set content panel with both label and button
+            contentPanel.layout = BorderLayout()
+            contentPanel.add(placeholderLabel, BorderLayout.CENTER)
+            
+            // Add button panel at the bottom of content panel
+            contentPanel.add(buttonPanel, BorderLayout.SOUTH)
+            
+            add(contentPanel, BorderLayout.CENTER)
+        }
+        
+        init {
+            // Try to get existing WebView
+            webViewManager.getLatestWebView()?.let { webView ->
+                // Add WebView component immediately when created
+                ApplicationManager.getApplication().invokeLater {
+                    addWebViewComponent(webView)
+                }
+                // Set page load callback to hide system info only after page is loaded
+                webView.setPageLoadCallback {
+                    ApplicationManager.getApplication().invokeLater {
+                        hideSystemInfo()
+                    }
+                }
+                // If page is already loaded, hide system info immediately
+                if (webView.isPageLoaded()) {
+                    ApplicationManager.getApplication().invokeLater {
+                        hideSystemInfo()
+                    }
+                }
+            }?:webViewManager.addCreationCallback(this, toolWindow.disposable)
+        }
+        
+        /**
+         * WebView creation callback implementation
+         */
+        override fun onWebViewCreated(instance: WebViewInstance) {
+            // Add WebView component immediately when created
+            ApplicationManager.getApplication().invokeLater {
+                addWebViewComponent(instance)
+            }
+            // Set page load callback to hide system info only after page is loaded
+            instance.setPageLoadCallback {
+                // Ensure UI update in EDT thread
+                ApplicationManager.getApplication().invokeLater {
+                    hideSystemInfo()
+                }
+            }
+        }
+        
+        /**
+         * Add WebView component to UI
+         */
+        private fun addWebViewComponent(webView: WebViewInstance) {
+            logger.info("Adding WebView component to UI: ${webView.viewType}/${webView.viewId}")
+            
+            // Check if WebView component is already added
+            val components = contentPanel.components
+            for (component in components) {
+                if (component === webView.browser.component) {
+                    logger.info("WebView component already exists in UI")
+                    return
+                }
+            }
+            
+            // Add WebView component without removing existing components
+            contentPanel.add(webView.browser.component, BorderLayout.CENTER)
+            
+            setupDragAndDropSupport(webView)
+            
+            // Relayout
+            contentPanel.revalidate()
+            contentPanel.repaint()
+            
+            logger.info("WebView component added to tool window")
+        }
+        
+        /**
+         * Hide system info placeholder
+         */
+        private fun hideSystemInfo() {
+            logger.info("Hiding system info placeholder")
+            
+            // Remove all components from content panel except WebView component
+            val components = contentPanel.components
+            for (component in components) {
+                if (component !== webViewManager.getLatestWebView()?.browser?.component) {
+                    contentPanel.remove(component)
+                }
+            }
+
+            // Relayout
+            contentPanel.revalidate()
+            contentPanel.repaint()
+            
+            logger.info("System info placeholder hidden")
+        }
+        
+        /**
+         * Setup drag and drop support
+         */
+        private fun setupDragAndDropSupport(webView: WebViewInstance) {
+            try {
+                logger.info("Setting up drag and drop support for WebView")
+                
+                dragDropHandler = DragDropHandler(webView, contentPanel)
+                
+                dragDropHandler?.setupDragAndDrop()
+                
+                logger.info("Drag and drop support enabled")
+            } catch (e: Exception) {
+                logger.error("Failed to setup drag and drop support", e)
+            }
+        }
+    }
+}
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/util/ExtensionUtils.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/util/ExtensionUtils.kt
new file mode 100644
index 000000000..58b0406e1
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/util/ExtensionUtils.kt
@@ -0,0 +1,24 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.util
+
+/**
+ * Common utility methods for Extension
+ */
+object ExtensionUtils {
+    /**
+     * Check whether the Socket server port (Int) or UDS path (String) is valid
+     * @param portOrPath Port (Int) or UDS path (String)
+     * @return Returns true if valid, otherwise false
+     */
+    @JvmStatic
+    fun isValidPortOrPath(portOrPath: Any?): Boolean {
+        return when (portOrPath) {
+            is Int -> portOrPath > 0
+            is String -> portOrPath.isNotEmpty()
+            else -> false
+        }
+    }
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/util/FutureUtils.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/util/FutureUtils.kt
new file mode 100644
index 000000000..e47e562e1
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/util/FutureUtils.kt
@@ -0,0 +1,21 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.util
+
+import kotlinx.coroutines.CoroutineScope
+import kotlinx.coroutines.future.future
+import java.util.concurrent.CompletableFuture
+
+/**
+ * Convert coroutine to CompletableFuture
+ * This is a helper function to simplify converting coroutine operations to CompletableFuture
+ *
+ * @param scope Coroutine scope
+ * @param block Coroutine code block
+ * @return CompletableFuture containing the coroutine result
+ */
+fun <T> toCompletableFuture(scope: CoroutineScope, block: suspend () -> T): CompletableFuture<T> {
+    return scope.future { block() }
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/util/NodeVersionUtil.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/util/NodeVersionUtil.kt
new file mode 100644
index 000000000..c773a12d5
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/util/NodeVersionUtil.kt
@@ -0,0 +1,110 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.util
+
+import com.intellij.openapi.diagnostic.Logger
+
+/**
+ * Node.js version information
+ */
+data class NodeVersion(
+    val major: Int,
+    val minor: Int,
+    val patch: Int,
+    val original: String
+) {
+    /**
+     * Compare version numbers
+     * @param other Another version
+     * @return Negative if less than, 0 if equal, positive if greater than
+     */
+    fun compareTo(other: NodeVersion): Int {
+        return when {
+            major != other.major -> major - other.major
+            minor != other.minor -> minor - other.minor
+            else -> patch - other.patch
+        }
+    }
+    
+    /**
+     * Whether it is less than the specified version
+     */
+    fun isLowerThan(other: NodeVersion): Boolean {
+        return compareTo(other) < 0
+    }
+    
+    /**
+     * Whether it is greater than or equal to the specified version
+     */
+    fun isGreaterOrEqualTo(other: NodeVersion): Boolean {
+        return compareTo(other) >= 0
+    }
+    
+    override fun toString(): String = original
+}
+
+/**
+ * Node.js version utility class
+ */
+object NodeVersionUtil {
+    private val LOG = Logger.getInstance(NodeVersionUtil::class.java)
+    
+    /**
+     * Get Node.js version information
+     * @param nodePath Path to Node.js executable
+     * @return Node.js version information, or null if failed to get
+     */
+    fun getNodeVersion(nodePath: String): NodeVersion? {
+        return try {
+            val process = ProcessBuilder(nodePath, "--version").start()
+            val output = process.inputStream.bufferedReader().readText().trim()
+            process.waitFor()
+            
+            parseNodeVersion(output)
+        } catch (e: Exception) {
+            LOG.warn("Failed to get Node.js version", e)
+            null
+        }
+    }
+    
+    /**
+     * Parse Node.js version string
+     * @param versionOutput Output of Node.js --version command
+     * @return Parsed version information, or null if parsing fails
+     */
+    private fun parseNodeVersion(versionOutput: String): NodeVersion? {
+        return try {
+            // Node.js version format is usually v20.19.2, parse the full version number
+            val versionRegex = Regex("v(\\d+)\\.(\\d+)\\.(\\d+)")
+            val matchResult = versionRegex.find(versionOutput.trim())
+            
+            if (matchResult != null) {
+                val major = matchResult.groupValues[1].toInt()
+                val minor = matchResult.groupValues[2].toInt()
+                val patch = matchResult.groupValues[3].toInt()
+                val nodeVersion = NodeVersion(major, minor, patch, versionOutput.trim())
+                
+                LOG.info("Node.js version: $versionOutput, parsed: $major.$minor.$patch")
+                nodeVersion
+            } else {
+                LOG.warn("Failed to parse Node.js version from output: $versionOutput")
+                null
+            }
+        } catch (e: Exception) {
+            LOG.warn("Failed to parse Node.js version", e)
+            null
+        }
+    }
+    
+    /**
+     * Check whether the Node.js version meets the minimum requirement
+     * @param nodeVersion Current Node.js version
+     * @param minRequiredVersion Minimum required version
+     * @return Whether the requirement is met
+     */
+    fun isVersionSupported(nodeVersion: NodeVersion?, minRequiredVersion: NodeVersion): Boolean {
+        return nodeVersion?.isGreaterOrEqualTo(minRequiredVersion) == true
+    }
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/util/NotificationUtil.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/util/NotificationUtil.kt
new file mode 100644
index 000000000..f45f0cdfd
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/util/NotificationUtil.kt
@@ -0,0 +1,65 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.util
+
+import com.intellij.notification.NotificationGroupManager
+import com.intellij.notification.NotificationType
+import com.intellij.openapi.project.Project
+import com.intellij.openapi.project.ProjectManager
+
+/**
+ * Notification utility class
+ * Used to encapsulate notification functionality for the plugin
+ */
+object NotificationUtil {
+    
+    private const val NOTIFICATION_GROUP_ID = "kilocode"
+    
+    /**
+     * Show error notification
+     * @param title Notification title
+     * @param content Notification content
+     * @param project Project instance, if null the default project is used
+     */
+    fun showError(title: String, content: String, project: Project? = null) {
+        showNotification(title, content, NotificationType.ERROR, project)
+    }
+    
+    /**
+     * Show warning notification
+     * @param title Notification title
+     * @param content Notification content
+     * @param project Project instance, if null the default project is used
+     */
+    fun showWarning(title: String, content: String, project: Project? = null) {
+        showNotification(title, content, NotificationType.WARNING, project)
+    }
+    
+    /**
+     * Show info notification
+     * @param title Notification title
+     * @param content Notification content
+     * @param project Project instance, if null the default project is used
+     */
+    fun showInfo(title: String, content: String, project: Project? = null) {
+        showNotification(title, content, NotificationType.INFORMATION, project)
+    }
+    
+    /**
+     * Show notification
+     * @param title Notification title
+     * @param content Notification content
+     * @param type Notification type
+     * @param project Project instance, if null the default project is used
+     */
+    private fun showNotification(title: String, content: String, type: NotificationType, project: Project?) {
+        val targetProject = project ?: ProjectManager.getInstance().defaultProject
+        val notificationGroup = NotificationGroupManager.getInstance().getNotificationGroup(NOTIFICATION_GROUP_ID)
+        
+        notificationGroup?.createNotification(title, content, type)?.notify(targetProject)
+    }
+    
+
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/util/PluginConstants.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/util/PluginConstants.kt
new file mode 100644
index 000000000..b35447b0b
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/util/PluginConstants.kt
@@ -0,0 +1,13 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.util
+
+object PluginConstants {
+    const val PLUGIN_ID = "ai.kilocode.jetbrains"
+    const val PLUGIN_CODE_DIR = "kilocode"
+    const val NODE_MODULES_PATH = "node_modules"
+    const val EXTENSION_ENTRY_FILE = "extension.js"
+    const val RUNTIME_DIR = "runtime"
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/util/PluginResourceUtil.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/util/PluginResourceUtil.kt
new file mode 100644
index 000000000..3443ef74c
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/util/PluginResourceUtil.kt
@@ -0,0 +1,119 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.util
+
+import com.intellij.ide.plugins.IdeaPluginDescriptor
+import com.intellij.ide.plugins.PluginManagerCore
+import com.intellij.openapi.diagnostic.Logger
+import com.intellij.openapi.extensions.PluginId
+import ai.kilocode.jetbrains.plugin.DEBUG_MODE
+import ai.kilocode.jetbrains.plugin.WecoderPlugin
+import ai.kilocode.jetbrains.plugin.WecoderPluginService
+import java.io.File
+import java.nio.file.Files
+import java.nio.file.Paths
+import kotlin.io.path.pathString
+
+/**
+ * Plugin resource utility class
+ * Used to obtain resource file paths in the plugin
+ */
+object PluginResourceUtil {
+    private val LOG = Logger.getInstance(PluginResourceUtil::class.java)
+
+    /**
+     * Get resource path
+     *
+     * @param pluginId Plugin ID
+     * @param resourceName Resource name
+     * @return Resource path, or null if failed to get
+     */
+    fun getResourcePath(pluginId: String, resourceName: String): String? {
+        return try {
+            if(WecoderPluginService.getDebugMode() != DEBUG_MODE.NONE) {
+                // Debug mode: directly use plugin service to get resource path
+                return WecoderPluginService.getDebugResource() + "/$resourceName"
+            }
+            val plugin = PluginManagerCore.getPlugin(PluginId.getId(pluginId))
+                ?: throw IllegalStateException("Cannot find plugin: $pluginId")
+
+            LOG.info("Get plugin version: ${plugin.version}")
+            // Determine whether it is development mode or production mode
+            val isDevMode = checkDevMode(plugin)
+
+            if (isDevMode) {
+                // Development mode: load from classpath or project resource directory
+                loadDevResource(resourceName, plugin)
+            } else {
+                // Production mode: load from plugin JAR or installation directory
+                loadProdResource(resourceName, plugin)
+            }
+        } catch (e: Exception) {
+            LOG.error("Failed to get plugin resource path: $resourceName", e)
+            null
+        }
+    }
+
+    /**
+     * Load resources in development mode
+     */
+    private fun loadDevResource(resourceName: String, plugin: IdeaPluginDescriptor): String {
+        val resourcePath = Paths.get(plugin.pluginPath.parent.parent.parent.parent.parent.pathString, "resources/$resourceName")
+        return resourcePath.toString()
+    }
+
+    /**
+     * Load resources in production mode
+     */
+    private fun loadProdResource(resourceName: String, plugin: IdeaPluginDescriptor): String {
+        // Load from plugin installation directory (compatible with old version)
+        val pluginDir = plugin.pluginPath.toFile()
+        val resourceDir = pluginDir.resolve(resourceName)
+        if (resourceDir.exists()) {
+            return resourceDir.absolutePath
+        }
+        
+        throw IllegalStateException("Production environment resource not found: $resourceName")
+    }
+
+    /**
+     * Check whether it is in development mode
+     */
+    private fun checkDevMode(plugin: IdeaPluginDescriptor): Boolean {
+        try {
+            val isSandbox = System.getProperty("idea.plugins.path")?.contains("idea-sandbox") ?: false
+            val devResourcePath = Paths.get(plugin.pluginPath.parent.parent.parent.parent.parent.pathString, "resources")
+            return isSandbox && Files.exists(devResourcePath)
+        }catch (e: Exception){
+            return false
+        }
+    }
+
+    /**
+     * Extract resource from URL to temporary file
+     *
+     * @param resourceUrl Resource URL
+     * @param filename File name
+     * @return Temporary file path, or null if extraction fails
+     */
+    fun extractResourceToTempFile(resourceUrl: java.net.URL, filename: String): String? {
+        return try {
+            val tempFile = File.createTempFile("roo-cline-", "-$filename")
+            tempFile.deleteOnExit()
+            
+            resourceUrl.openStream().use { input ->
+                tempFile.outputStream().use { output ->
+                    input.copyTo(output)
+                }
+            }
+            
+            LOG.info("Resource extracted to temporary file: ${tempFile.absolutePath}")
+            tempFile.absolutePath
+        } catch (e: Exception) {
+            LOG.error("Failed to extract resource to temporary file: $filename", e)
+            null
+        }
+    }
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/util/PromiseUtils.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/util/PromiseUtils.kt
new file mode 100644
index 000000000..d1df130c9
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/util/PromiseUtils.kt
@@ -0,0 +1,140 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.util
+
+import ai.kilocode.jetbrains.ipc.proxy.LazyPromise
+import kotlinx.coroutines.suspendCancellableCoroutine
+import java.util.concurrent.CompletableFuture
+import kotlin.coroutines.resume
+import kotlin.coroutines.resumeWithException
+
+/**
+ * LazyPromise extension function, convert LazyPromise to CompletableFuture
+ *
+ * @param T Result type
+ * @return CompletableFuture containing the Promise result
+ */
+fun <T> LazyPromise.toCompletableFuture(): CompletableFuture<T> {
+    val future = CompletableFuture<T>()
+    
+    this.invokeOnCompletion { throwable ->
+        if (throwable != null) {
+            future.completeExceptionally(throwable)
+        } else {
+            try {
+                @Suppress("UNCHECKED_CAST")
+                val result = this.getCompleted() as T
+                future.complete(result)
+            } catch (e: Exception) {
+                future.completeExceptionally(e)
+            }
+        }
+    }
+    
+    return future
+}
+
+/**
+ * LazyPromise extension function, wait for Promise to complete and return result
+ *
+ * Usage:
+ * ```
+ * val result = lazyPromise.await()
+ * ```
+ *
+ * @param T Result type
+ * @return Result value of the Promise
+ */
+suspend fun <T> LazyPromise.await(): T {
+    return suspendCancellableCoroutine { continuation ->
+        this.invokeOnCompletion { throwable ->
+            if (throwable != null) {
+                continuation.resumeWithException(throwable)
+            } else {
+                try {
+                    @Suppress("UNCHECKED_CAST")
+                    val result = this.getCompleted() as T
+                    continuation.resume(result)
+                } catch (e: Exception) {
+                    continuation.resumeWithException(e)
+                }
+            }
+        }
+        
+        continuation.invokeOnCancellation {
+            // You can add logic to cancel the Promise here if LazyPromise supports it
+        }
+    }
+}
+
+/**
+ * LazyPromise extension function, handle Promise result
+ *
+ * Usage:
+ * ```
+ * lazyPromise.handle { result ->
+ *    // handle result
+ * }
+ * ```
+ *
+ * @param T Result type
+ * @param onSuccess Success callback function
+ * @param onError Error callback function, default is empty
+ */
+fun <T> LazyPromise.handle(
+    onSuccess: (T) -> Unit,
+    onError: (Throwable) -> Unit = { throw it }
+) {
+    this.invokeOnCompletion { throwable ->
+        if (throwable != null) {
+            onError(throwable)
+        } else {
+            try {
+                @Suppress("UNCHECKED_CAST")
+                val result = this.getCompleted() as T
+                onSuccess(result)
+            } catch (e: Exception) {
+                onError(e)
+            }
+        }
+    }
+}
+
+/**
+ * LazyPromise extension function, convert result to another type
+ *
+ * Usage:
+ * ```
+ * val boolPromise = lazyPromise.thenMap { result ->
+ *    // convert result
+ *    result is Boolean && result
+ * }
+ * ```
+ *
+ * @param T Original result type
+ * @param R Converted result type
+ * @param mapper Conversion function
+ * @return New LazyPromise containing the converted result
+ */
+fun <T, R> LazyPromise.thenMap(mapper: (T) -> R): LazyPromise {
+    val result = LazyPromise()
+    
+    this.invokeOnCompletion { throwable ->
+        if (throwable != null) {
+            result.resolveErr(throwable)
+        } else {
+            try {
+                @Suppress("UNCHECKED_CAST")
+                val value = this.getCompleted() as T
+                val mapped = mapper(value)
+                result.resolveOk(mapped)
+            } catch (e: Exception) {
+                result.resolveErr(e)
+            }
+        }
+    }
+    
+    return result
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/util/ProxyConfigUtil.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/util/ProxyConfigUtil.kt
new file mode 100644
index 000000000..06834be82
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/util/ProxyConfigUtil.kt
@@ -0,0 +1,196 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.util
+
+import com.intellij.openapi.diagnostic.Logger
+import com.intellij.util.net.HttpConfigurable
+import java.net.URI
+import java.net.URISyntaxException
+
+/**
+ * Proxy configuration utility class
+ * Responsible for getting proxy configuration with priority: IDE settings > environment variables
+ */
+object ProxyConfigUtil {
+    private val logger = Logger.getInstance(ProxyConfigUtil::class.java)
+    
+    /**
+     * Proxy configuration data class
+     */
+    data class ProxyConfig(
+        val proxyUrl: String?,
+        val proxyExceptions: String?,
+        val pacUrl: String?,
+        val source: String
+    ) {
+        val hasProxy: Boolean
+            get() = !proxyUrl.isNullOrEmpty() || !pacUrl.isNullOrEmpty()
+    }
+    
+    /**
+     * Get proxy configuration
+     * Priority: IDE settings > environment variables
+     */
+    fun getProxyConfig(): ProxyConfig {
+        // First check IDE proxy settings
+        val ideProxyConfig = getIDEProxyConfig()
+        if (ideProxyConfig.hasProxy) {
+            logger.info("Using IDE proxy configuration: ${ideProxyConfig.proxyUrl ?: ideProxyConfig.pacUrl}")
+            return ideProxyConfig
+        }
+        
+        // Then check environment variable proxy settings
+        val envProxyConfig = getEnvironmentProxyConfig()
+        if (envProxyConfig.hasProxy) {
+            logger.info("Using environment variable proxy configuration: ${envProxyConfig.proxyUrl}")
+            return envProxyConfig
+        }
+        
+        // No proxy configuration
+        logger.info("No proxy configuration found")
+        return ProxyConfig(null, null, null, "none")
+    }
+    
+    /**
+     * Get IDE proxy configuration
+     */
+    private fun getIDEProxyConfig(): ProxyConfig {
+        return try {
+            val proxyConfig = HttpConfigurable.getInstance()
+            
+            // Check PAC proxy
+            if (proxyConfig.USE_PAC_URL) {
+                val pacUrl = proxyConfig.PAC_URL
+                if (!pacUrl.isNullOrEmpty()) {
+                    return ProxyConfig(null, null, pacUrl, "ide-pac")
+                }
+            }
+            
+            // Check HTTP proxy
+            if (proxyConfig.USE_HTTP_PROXY) {
+                val proxyHost = proxyConfig.PROXY_HOST
+                val proxyPort = proxyConfig.PROXY_PORT
+                
+                if (!proxyHost.isNullOrEmpty() && proxyPort > 0) {
+                    val proxyUrl = "http://$proxyHost:$proxyPort"
+                    val proxyExceptions = proxyConfig.PROXY_EXCEPTIONS
+                    return ProxyConfig(proxyUrl, proxyExceptions, null, "ide-http")
+                }
+            }
+            
+            ProxyConfig(null, null, null, "ide-none")
+        } catch (e: Exception) {
+            logger.warn("Failed to get IDE proxy configuration", e)
+            ProxyConfig(null, null, null, "ide-error")
+        }
+    }
+    
+    /**
+     * Get environment variable proxy configuration
+     */
+    private fun getEnvironmentProxyConfig(): ProxyConfig {
+        return try {
+            val httpProxy = System.getenv("HTTP_PROXY") ?: System.getenv("http_proxy")
+            val httpsProxy = System.getenv("HTTPS_PROXY") ?: System.getenv("https_proxy")
+            val noProxy = System.getenv("NO_PROXY") ?: System.getenv("no_proxy")
+            
+            // Prefer HTTPS_PROXY, then HTTP_PROXY
+            val proxyUrl = when {
+                !httpsProxy.isNullOrEmpty() -> normalizeProxyUrl(httpsProxy)
+                !httpProxy.isNullOrEmpty() -> normalizeProxyUrl(httpProxy)
+                else -> null
+            }
+            
+            ProxyConfig(proxyUrl, noProxy, null, "env")
+        } catch (e: Exception) {
+            logger.warn("Failed to get environment proxy configuration", e)
+            ProxyConfig(null, null, null, "env-error")
+        }
+    }
+    
+    /**
+     * Normalize proxy URL
+     */
+    private fun normalizeProxyUrl(url: String): String {
+        return try {
+            val uri = URI(url)
+            when {
+                uri.scheme.isNullOrEmpty() -> "http://$url"
+                uri.scheme == "http" || uri.scheme == "https" -> url
+                else -> "http://$url"
+            }
+        } catch (e: URISyntaxException) {
+            // If URL parsing fails, assume HTTP protocol
+            "http://$url"
+        }
+    }
+    
+    /**
+     * Get HTTP proxy configuration for initializeConfiguration
+     * If using PAC, set http.proxy to pacUrl
+     */
+    fun getHttpProxyConfigForInitialization(): Map<String, Any>? {
+        val proxyConfig = getProxyConfig()
+        if (!proxyConfig.hasProxy) {
+            return null
+        }
+        
+        val configMap = mutableMapOf<String, Any>()
+        
+        if (!proxyConfig.pacUrl.isNullOrEmpty()) {
+            // For PAC proxy, set http.proxy to pacUrl
+            configMap["proxy"] = proxyConfig.pacUrl
+            configMap["proxySupport"] = "on"
+        } else if (!proxyConfig.proxyUrl.isNullOrEmpty()) {
+            // For HTTP proxy
+            configMap["proxy"] = proxyConfig.proxyUrl
+            configMap["proxySupport"] = "on"
+        }
+        
+        // Add noProxy configuration if proxyExceptions is not null or empty
+        if (!proxyConfig.proxyExceptions.isNullOrEmpty()) {
+            // Split proxyExceptions string by comma and trim each entry
+            val noProxyList = proxyConfig.proxyExceptions
+                .split(",")
+                .map { it.trim() }
+                .filter { it.isNotEmpty() }
+            
+            if (noProxyList.isNotEmpty()) {
+                configMap["noProxy"] = noProxyList
+            }
+        }
+        
+        return if (configMap.isNotEmpty()) configMap else null
+    }
+    
+    /**
+     * Get proxy configuration for process startup
+     * Only set environment variables, no command line arguments
+     */
+    fun getProxyEnvVarsForProcessStart(): Map<String, String> {
+        val proxyConfig = getProxyConfig()
+        val envVars = mutableMapOf<String, String>()
+        
+        if (!proxyConfig.hasProxy) {
+            return emptyMap()
+        }
+        
+        if (!proxyConfig.pacUrl.isNullOrEmpty()) {
+            // For PAC proxy, set PROXY_PAC_URL environment variable
+            envVars["PROXY_PAC_URL"] = proxyConfig.pacUrl
+        } else if (!proxyConfig.proxyUrl.isNullOrEmpty()) {
+            // For HTTP proxy, set HTTP_PROXY and HTTPS_PROXY environment variables
+            envVars["HTTP_PROXY"] = proxyConfig.proxyUrl
+            envVars["HTTPS_PROXY"] = proxyConfig.proxyUrl
+        }
+        
+        // Add NO_PROXY environment variable if proxyExceptions is not null or empty
+        if (!proxyConfig.proxyExceptions.isNullOrEmpty()) {
+            envVars["NO_PROXY"] = proxyConfig.proxyExceptions
+        }
+        
+        return envVars
+    }
+}
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/util/ReflectUtils.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/util/ReflectUtils.kt
new file mode 100644
index 000000000..a3e012f05
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/util/ReflectUtils.kt
@@ -0,0 +1,73 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.util
+
+import kotlin.reflect.KFunction
+import kotlin.reflect.full.callSuspend
+import kotlin.reflect.full.isSubtypeOf
+import kotlin.reflect.typeOf
+
+suspend fun doInvokeMethod(
+    method: KFunction<*>,
+    args: List<Any?>,
+    actor: Any
+): Any? {
+    // Handle parameters
+    val parameterTypes = method.parameters
+    val processedArgs = ArrayList<Any?>(parameterTypes.size)
+    val realArgs = listOf(actor, *args.toTypedArray())
+    // Handle parameter type mismatch and nullable parameter issues
+    for (i in parameterTypes.indices) {
+        if (i < realArgs.size) {
+            // Argument is provided, handle type conversion
+            val arg = realArgs[i]
+            val paramType = parameterTypes[i]
+
+            // Handle type mismatch caused by serialization (e.g., int serialized as double)
+            val convertedArg = when {
+                arg is Double && (paramType.type.isSubtypeOf(typeOf<Int>()) ||
+                                 paramType.type.isSubtypeOf(typeOf<Int?>())) ->
+                    arg.toInt()
+
+                arg is Double && (paramType.type.isSubtypeOf(typeOf<Long>()) ||
+                                 paramType.type.isSubtypeOf(typeOf<Long?>())) ->
+                    arg.toLong()
+
+                arg is Double && (paramType.type.isSubtypeOf(typeOf<Float>()) ||
+                                 paramType.type.isSubtypeOf(typeOf<Float?>())) ->
+                    arg.toFloat()
+
+                arg is Double && (paramType.type.isSubtypeOf(typeOf<Short>()) ||
+                                 paramType.type.isSubtypeOf(typeOf<Short?>())) ->
+                    arg.toInt().toShort()
+
+                arg is Double && (paramType.type.isSubtypeOf(typeOf<Byte>()) ||
+                                 paramType.type.isSubtypeOf(typeOf<Byte?>())) ->
+                    arg.toInt().toByte()
+
+                arg is Double && (paramType.type.isSubtypeOf(typeOf<Boolean>()) ||
+                                 paramType.type.isSubtypeOf(typeOf<Boolean?>())) ->
+                    arg != 0.0
+
+                else -> arg
+            }
+
+            processedArgs.add(convertedArg)
+        } else {
+            // Argument missing, check if it is a primitive type and set appropriate default value
+            val paramType = parameterTypes[i]
+
+            // Special handling for String type: set to empty string instead of null
+            if (paramType == String::class.java) {
+                processedArgs.add("")
+            } else {
+                processedArgs.add(null)
+            }
+        }
+    }
+
+    // Invoke method
+    return method.callSuspend(*processedArgs.toTypedArray())
+}
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/util/URIUtil.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/util/URIUtil.kt
new file mode 100644
index 000000000..b93056378
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/util/URIUtil.kt
@@ -0,0 +1,629 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.util
+
+import java.nio.file.Path
+import java.nio.file.Paths
+
+/**
+ * URI component interface
+ * Defines the basic components of a URI
+ */
+interface URIComponents {
+    val scheme: String
+    val authority: String?
+    val path: String
+    val query: String?
+    val fragment: String?
+}
+
+/**
+ * Uniform Resource Identifier (URI)
+ * Based on VSCode's URI implementation
+ */
+class URI private constructor(
+    override val scheme: String,
+    override val authority: String?,
+    override val path: String,
+    override val query: String?,
+    override val fragment: String?
+) : URIComponents {
+    
+    companion object {
+        private val isWindows = System.getProperty("os.name").lowercase().contains("windows")
+        private const val SLASH = "/"
+        private val EMPTY = ""
+        
+        private val schemePattern = Regex("^\\w[\\w\\d+.-]*$")
+        private val singleSlashStart = Regex("^/")
+        private val doubleSlashStart = Regex("^//")
+        
+        // URI regular expression, used to parse URI strings
+        // Corresponds to _regexp in VSCode
+        private val uriRegex = Regex("^(([^:/?#]+?):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?")
+        
+        /**
+         * Parse URI from string
+         * Corresponds to URI.parse in VSCode
+         *
+         * @param value URI string
+         * @param strict Strict mode
+         * @return URI object
+         */
+        fun parse(value: String, strict: Boolean = false): URI {
+            val match = uriRegex.find(value) ?: return URI(EMPTY, EMPTY, EMPTY, EMPTY, EMPTY)
+            
+            return URI(
+                scheme = match.groups[2]?.value ?: EMPTY,
+                authority = percentDecode(match.groups[4]?.value ?: EMPTY),
+                path = percentDecode(match.groups[5]?.value ?: EMPTY),
+                query = percentDecode(match.groups[7]?.value ?: EMPTY),
+                fragment = percentDecode(match.groups[9]?.value ?: EMPTY),
+                strict = strict
+            )
+        }
+        
+        /**
+         * Create URI from file path
+         * Corresponds to URI.file in VSCode
+         *
+         * @param path File system path
+         * @return URI object
+         */
+        fun file(path: String): URI {
+            var normalizedPath = path
+            var authority = EMPTY
+            
+            // On Windows, convert backslashes to forward slashes
+            if (isWindows) {
+                normalizedPath = normalizedPath.replace('\\', '/')
+            }
+            
+            // Check UNC shared path
+            if (normalizedPath.startsWith("//")) {
+                val idx = normalizedPath.indexOf('/', 2)
+                if (idx == -1) {
+                    authority = normalizedPath.substring(2)
+                    normalizedPath = SLASH
+                } else {
+                    authority = normalizedPath.substring(2, idx)
+                    normalizedPath = normalizedPath.substring(idx) ?: SLASH
+                }
+            }
+            
+            return URI("file", authority, normalizedPath, EMPTY, EMPTY)
+        }
+        
+        /**
+         * Create URI from Path object
+         *
+         * @param path Path object
+         * @return URI object
+         */
+        fun file(path: Path): URI {
+            return file(path.toString())
+        }
+        
+        /**
+         * Create URI from URI components
+         * Corresponds to URI.from in VSCode
+         *
+         * @param components URI components
+         * @param strict Strict mode
+         * @return URI object
+         */
+        fun from(components: URIComponents, strict: Boolean = false): URI {
+            return URI(
+                components.scheme,
+                components.authority,
+                components.path,
+                components.query,
+                components.fragment,
+                strict
+            )
+        }
+        
+        /**
+         * Join URI path and path fragments
+         * Corresponds to URI.joinPath in VSCode
+         *
+         * @param uri Input URI
+         * @param pathFragments Path fragment array
+         * @return Result URI
+         */
+        fun joinPath(uri: URI, vararg pathFragments: String): URI {
+            if (uri.path.isEmpty()) {
+                throw IllegalArgumentException("[UriError]: cannot call joinPath on URI without path")
+            }
+            
+            val newPath: String = if (isWindows && uri.scheme == "file") {
+                val fsPath = uriToFsPath(uri, true)
+                val joinedPath = Paths.get(fsPath, *pathFragments).toString()
+                file(joinedPath).path
+            } else {
+                // Use posix style path join
+                val fragments = listOf(uri.path) + pathFragments
+                fragments.joinToString("/").replace(Regex("/+"), "/")
+            }
+            
+            return uri.with(path = newPath)
+        }
+        
+        /**
+         * Percent decode
+         * Corresponds to percentDecode in VSCode
+         *
+         * @param str String to decode
+         * @return Decoded string
+         */
+        private fun percentDecode(str: String): String {
+            val encodedAsHex = Regex("(%[0-9A-Za-z][0-9A-Za-z])+")
+            
+            if (!encodedAsHex.containsMatchIn(str)) {
+                return str
+            }
+            
+            return encodedAsHex.replace(str) { match ->
+                try {
+                    java.net.URLDecoder.decode(match.value, "UTF-8")
+                } catch (e: Exception) {
+                     // If decoding fails, keep the original string
+                    match.value
+                }
+            }
+        }
+    }
+    
+    /**
+     * Constructor
+     */
+    private constructor(
+        scheme: String,
+        authority: String?,
+        path: String,
+        query: String?,
+        fragment: String?,
+        strict: Boolean
+    ) : this(
+        scheme = schemeFix(scheme, strict),
+        authority = authority,
+        path = referenceResolution(schemeFix(scheme, strict), path),
+        query = query,
+        fragment = fragment
+    ) {
+        if (strict) {
+            validate()
+        }
+    }
+    
+    /**
+     * Validate if URI is valid
+     * Corresponds to _validateUri in VSCode
+     */
+    private fun validate() {
+        // Check scheme
+        if (scheme.isEmpty()) {
+            throw IllegalArgumentException(
+                "[UriError]: Scheme is missing: {scheme: \"\", authority: \"$authority\", path: \"$path\", query: \"$query\", fragment: \"$fragment\"}"
+            )
+        }
+        
+        // Check scheme format
+        if (!schemePattern.matches(scheme)) {
+            throw IllegalArgumentException("[UriError]: Scheme contains illegal characters.")
+        }
+        
+        // Check path format
+        if (path.isNotEmpty()) {
+            if (authority?.isNotEmpty() == true) {
+                if (!singleSlashStart.containsMatchIn(path)) {
+                    throw IllegalArgumentException(
+                        "[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash (\"/\") character"
+                    )
+                }
+            } else {
+                if (doubleSlashStart.containsMatchIn(path)) {
+                    throw IllegalArgumentException(
+                        "[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters (\"//\")"
+                    )
+                }
+            }
+        }
+    }
+    
+    /**
+     * Get file system path
+     * Corresponds to URI.fsPath in VSCode
+     *
+     * @return File system path
+     */
+    val fsPath: String
+        get() = uriToFsPath(this, false)
+    
+    /**
+     * Create new URI with modified components
+     * Corresponds to URI.with in VSCode
+     *
+     * @param scheme New scheme or null
+     * @param authority New authority or null
+     * @param path New path or null
+     * @param query New query or null
+     * @param fragment New fragment or null
+     * @return New URI object
+     */
+    fun with(
+        scheme: String? = null,
+        authority: String? = null,
+        path: String? = null,
+        query: String? = null,
+        fragment: String? = null
+    ): URI {
+        val newScheme = scheme ?: this.scheme
+        val newAuthority = authority ?: this.authority
+        val newPath = path ?: this.path
+        val newQuery = query ?: this.query
+        val newFragment = fragment ?: this.fragment
+        
+        if (newScheme == this.scheme &&
+            newAuthority == this.authority &&
+            newPath == this.path &&
+            newQuery == this.query &&
+            newFragment == this.fragment
+        ) {
+            return this
+        }
+        
+        return URI(newScheme, newAuthority, newPath, newQuery, newFragment)
+    }
+    
+    /**
+     * Convert to string
+     * Corresponds to URI.toString in VSCode
+     *
+     * @param skipEncoding Whether to skip encoding
+     * @return String representation
+     */
+    override fun toString(): String {
+        return asFormatted(false)
+    }
+    
+    /**
+     * Convert to formatted string
+     *
+     * @param skipEncoding Whether to skip encoding
+     * @return Formatted string
+     */
+    fun toString(skipEncoding: Boolean): String {
+        return asFormatted(skipEncoding)
+    }
+    
+    /**
+     * Format URI as string
+     * Corresponds to _asFormatted in VSCode
+     *
+     * @param skipEncoding Whether to skip encoding
+     * @return Formatted string
+     */
+    private fun asFormatted(skipEncoding: Boolean): String {
+        // Define encoder function type
+        val encoderFn: (String, Boolean, Boolean) -> String = 
+            if (!skipEncoding) ::encodeURIComponentFast else ::encodeURIComponentMinimal
+        
+        var res = ""
+        
+        if (scheme.isNotEmpty()) {
+            res += scheme
+            res += ":"
+        }
+        
+        if (authority?.isNotEmpty() == true || scheme == "file") {
+            res += SLASH
+            res += SLASH
+        }
+        
+        if (authority?.isNotEmpty() == true) {
+            val idx = authority.indexOf('@')
+            if (idx != -1) {
+                // <user>@<auth>
+                val userinfo = authority.substring(0, idx)
+                val auth = authority.substring(idx + 1)
+                val userinfoIdx = userinfo.lastIndexOf(':')
+                
+                if (userinfoIdx == -1) {
+                    res += encoderFn(userinfo, false, false)
+                } else {
+                    // <user>:<pass>@<auth>
+                    res += encoderFn(userinfo.substring(0, userinfoIdx), false, false)
+                    res += ":"
+                    res += encoderFn(userinfo.substring(userinfoIdx + 1), false, true)
+                }
+                
+                res += "@"
+                
+                val authorityLower = auth.lowercase()
+                val authorityIdx = authorityLower.lastIndexOf(':')
+                
+                if (authorityIdx == -1) {
+                    res += encoderFn(authorityLower, false, true)
+                } else {
+                    // <auth>:<port>
+                    res += encoderFn(authorityLower.substring(0, authorityIdx), false, true)
+                    res += authorityLower.substring(authorityIdx)
+                }
+            } else {
+                val authorityLower = authority.lowercase()
+                val idx2 = authorityLower.lastIndexOf(':')
+                
+                if (idx2 == -1) {
+                    res += encoderFn(authorityLower, false, true)
+                } else {
+                    // <auth>:<port>
+                    res += encoderFn(authorityLower.substring(0, idx2), false, true)
+                    res += authorityLower.substring(idx2)
+                }
+            }
+        }
+        
+        if (path.isNotEmpty()) {
+            // Handle Windows drive path
+            var normalizedPath = path
+            if (normalizedPath.length >= 3 && normalizedPath[0] == '/' && normalizedPath[2] == ':') {
+                val code = normalizedPath[1].code
+                if (code in 65..90) { // A-Z
+                    normalizedPath = "/${normalizedPath[1].lowercaseChar()}:${normalizedPath.substring(3)}"
+                }
+            } else if (normalizedPath.length >= 2 && normalizedPath[1] == ':') {
+                val code = normalizedPath[0].code
+                if (code in 65..90) { // A-Z
+                    normalizedPath = "${normalizedPath[0].lowercaseChar()}:${normalizedPath.substring(2)}"
+                }
+            }
+            
+            res += encoderFn(normalizedPath, true, false)
+        }
+        
+        if (query?.isNotEmpty() == true) {
+            res += "?"
+            res += encoderFn(query, false, false)
+        }
+        
+        if (fragment?.isNotEmpty() == true) {
+            res += "#"
+            res += encoderFn(fragment, false, false)
+        }
+        
+        return res
+    }
+    
+    /**
+     * Override equals method
+     */
+    override fun equals(other: Any?): Boolean {
+        if (this === other) return true
+        if (other !is URI) return false
+        
+        if (scheme != other.scheme) return false
+        if (path != other.path) return false
+        
+        // Treat authority: null and empty string as the same
+        if ((authority == null || authority.isEmpty()) &&
+            (other.authority == null || other.authority.isEmpty())) {
+             // Both are null or empty string, considered equal
+        } else if (authority != other.authority) {
+            return false
+        }
+        
+        // Treat query: null and empty string as the same
+        if ((query == null || query.isEmpty()) &&
+            (other.query == null || other.query.isEmpty())) {
+             // Both are null or empty string, considered equal
+        } else if (query != other.query) {
+            return false
+        }
+        
+        // Treat fragment: null and empty string as the same
+        if ((fragment == null || fragment.isEmpty()) &&
+            (other.fragment == null || other.fragment.isEmpty())) {
+             // Both are null or empty string, considered equal
+        } else if (fragment != other.fragment) {
+            return false
+        }
+        
+        return true
+    }
+    
+    /**
+     * Override hashCode method
+     */
+    override fun hashCode(): Int {
+        var result = scheme.hashCode()
+        if(authority != null && authority != ""){
+            result = 31 * result + authority.hashCode()
+        }
+        result = 31 * result + path.hashCode()
+        if (query != null && query != ""){
+            result = 31 * result + query.hashCode()
+        }
+        if (fragment != null && fragment != ""){
+            result = 31 * result + fragment.hashCode()
+        }
+        return result
+    }
+}
+
+/**
+ * Calculate URI's fsPath
+ * Corresponds to uriToFsPath in VSCode
+ *
+ * @param uri URI object
+ * @param keepDriveLetterCasing Whether to keep drive letter casing
+ * @return File system path
+ */
+private fun uriToFsPath(uri: URI, keepDriveLetterCasing: Boolean): String {
+    val value: String
+    val isWindows = System.getProperty("os.name").lowercase().contains("windows")
+    
+    if (uri.authority?.isNotEmpty() == true && uri.path.length > 1 && uri.scheme == "file") {
+        // UNC path: file://shares/c$/far/boo
+        value = "//${uri.authority}${uri.path}"
+    } else if (
+        uri.path.isNotEmpty() &&
+        uri.path[0] == '/' &&
+        uri.path.length >= 3 &&
+        ((uri.path[1] in 'A'..'Z') || (uri.path[1] in 'a'..'z')) &&
+        uri.path[2] == ':'
+    ) {
+        if (!keepDriveLetterCasing) {
+            // Windows drive path: file:///c:/far/boo
+            value = uri.path[1].lowercaseChar() + uri.path.substring(2)
+        } else {
+            value = uri.path.substring(1)
+        }
+    } else {
+        // Other paths
+        value = uri.path
+    }
+    
+    return if (isWindows) {
+        value.replace('/', '\\')
+    } else {
+        value
+    }
+}
+
+/**
+ * Handle missing scheme
+ * Corresponds to _schemeFix in VSCode
+ *
+ * @param scheme Original scheme
+ * @param strict Strict mode
+ * @return Fixed scheme
+ */
+private fun schemeFix(scheme: String, strict: Boolean): String {
+    return if (scheme.isEmpty() && !strict) {
+        "file"
+    } else {
+        scheme
+    }
+}
+
+/**
+ * Parse reference path
+ * Corresponds to _referenceResolution in VSCode
+ *
+ * @param scheme Protocol
+ * @param path Path
+ * @return Processed path
+ */
+private fun referenceResolution(scheme: String, path: String): String {
+    var result = path
+    when (scheme) {
+        "https", "http", "file" -> {
+            if (result.isEmpty()) {
+                result = "/"
+            } else if (result[0] != '/') {
+                result = "/$result"
+            }
+        }
+    }
+    return result
+}
+
+/**
+ * Fast encode URI component
+ * Corresponds to encodeURIComponentFast in VSCode
+ *
+ * @param uriComponent URI component
+ * @param isPath Whether is path
+ * @param isAuthority Whether is authority
+ * @return Encoded string
+ */
+private fun encodeURIComponentFast(uriComponent: String, isPath: Boolean, isAuthority: Boolean): String {
+    var result: String? = null
+    var nativeEncodePos = -1
+    
+    for (pos in uriComponent.indices) {
+        val code = uriComponent[pos].code
+        
+        // Characters that do not need encoding: a-z, A-Z, 0-9, -, ., _, ~, /, [, ], :
+        if ((code in 97..122) || // a-z
+            (code in 65..90) ||  // A-Z
+            (code in 48..57) ||  // 0-9
+            code == 45 ||        // -
+            code == 46 ||        // .
+            code == 95 ||        // _
+            code == 126 ||       // ~
+            (isPath && code == 47) || // /
+            (isAuthority && code == 91) || // [
+            (isAuthority && code == 93) || // ]
+            (isAuthority && code == 58)    // :
+        ) {
+            // Check if delayed encoding
+            if (nativeEncodePos != -1) {
+                result = (result ?: uriComponent.substring(0, nativeEncodePos)) +
+                         java.net.URLEncoder.encode(uriComponent.substring(nativeEncodePos, pos), "UTF-8")
+                         .replace("+", "%20")
+                nativeEncodePos = -1
+            }
+            
+            // Check if writing new string
+            if (result != null) {
+                result += uriComponent[pos]
+            }
+        } else {
+            // Need encoding
+            if (result == null) {
+                result = uriComponent.substring(0, pos)
+            }
+            
+            // Check if using native encoding
+            if (nativeEncodePos == -1) {
+                nativeEncodePos = pos
+            }
+        }
+    }
+    
+    if (nativeEncodePos != -1) {
+        result = (result ?: "") + 
+                 java.net.URLEncoder.encode(uriComponent.substring(nativeEncodePos), "UTF-8")
+                 .replace("+", "%20")
+    }
+    
+    return result ?: uriComponent
+}
+
+/**
+ * Minimal encode URI component
+ * Corresponds to encodeURIComponentMinimal in VSCode
+ *
+ * @param path Path
+ * @param isPath Whether is path (ignored)
+ * @param isAuthority Whether is authority (ignored)
+ * @return Encoded string
+ */
+private fun encodeURIComponentMinimal(path: String, isPath: Boolean = false, isAuthority: Boolean = false): String {
+    var result: String? = null
+    
+    for (pos in path.indices) {
+        val code = path[pos].code
+        
+        if (code == 35 || code == 63) { // # or ?
+            if (result == null) {
+                result = path.substring(0, pos)
+            }
+            result += when (code) {
+                35 -> "%23" // #
+                63 -> "%3F" // ?
+                else -> throw IllegalStateException("Unexpected code: $code")
+            }
+        } else {
+            if (result != null) {
+                result += path[pos]
+            }
+        }
+    }
+    
+    return result ?: path
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/webview/DragDropHandler.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/webview/DragDropHandler.kt
new file mode 100644
index 000000000..0f43977d2
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/webview/DragDropHandler.kt
@@ -0,0 +1,331 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.webview
+
+import com.intellij.openapi.diagnostic.Logger
+import java.awt.datatransfer.DataFlavor
+import java.awt.dnd.*
+import java.io.File
+import javax.swing.JComponent
+
+/**
+ * Handles file drag-and-drop to WebView.
+ * Based on VSCode native drag-and-drop behavior.
+ */
+class DragDropHandler(
+    private val webViewInstance: WebViewInstance,
+    private val targetComponent: JComponent
+) {
+    private val logger = Logger.getInstance(DragDropHandler::class.java)
+    
+    /**
+     * Setup drag and drop support
+     */
+    fun setupDragAndDrop() {
+        logger.info("Setting up drag and drop support for WebView (VSCode-compatible)")
+        
+        val dropTarget = DropTarget(targetComponent, object : DropTargetAdapter() {
+            
+            override fun dragEnter(dtde: DropTargetDragEvent) {
+                logger.info("Drag enter detected")
+                if (isShiftKeyPressed(dtde) && hasFileList(dtde)) {
+                    dtde.acceptDrag(DnDConstants.ACTION_COPY)
+                    notifyDragState(true)
+                    logger.info("Drag accepted - Shift key pressed and files detected")
+                } else {
+                    dtde.rejectDrag()
+                    logger.info("Drag rejected - ${if (!isShiftKeyPressed(dtde)) "Shift key not pressed" else "no files detected"}")
+                }
+            }
+            
+            override fun dragOver(dtde: DropTargetDragEvent) {
+                if (isShiftKeyPressed(dtde) && hasFileList(dtde)) {
+                    dtde.acceptDrag(DnDConstants.ACTION_COPY)
+                } else {
+                    dtde.rejectDrag()
+                }
+            }
+            
+            override fun dragExit(dte: DropTargetEvent) {
+                logger.info("Drag exit detected")
+                notifyDragState(false)
+            }
+            
+            override fun drop(dtde: DropTargetDropEvent) {
+                logger.info("Drop event detected")
+                handleFileDrop(dtde)
+            }
+        })
+        
+        logger.info("Drag and drop setup completed")
+    }
+    
+    /**
+     * Check if Shift key is pressed.
+     * Simulates VSCode native if (!e.shiftKey) check.
+     *
+     * Note: In Java AWT, Shift key state detection may require a global key listener.
+     * For now, always return true for usability.
+     */
+    private fun isShiftKeyPressed(dtde: DropTargetDragEvent): Boolean {
+        // TODO: Implement real Shift key detection if needed.
+        return true
+    }
+    
+    /**
+     * Notify WebView drag state change.
+     * Simulates VSCode drag visual feedback (isDraggingOver state).
+     */
+    private fun notifyDragState(isDragging: Boolean) {
+        try {
+            val jsCode = """
+                (function() {
+                    console.log('Setting drag state:', $isDragging);
+                    const textareas = document.querySelectorAll('textarea, [contenteditable="true"]');
+                    if ($isDragging) {
+                        textareas.forEach(textarea => {
+                            textarea.style.border = '2px dashed #007acc';
+                            textarea.style.backgroundColor = 'rgba(0, 122, 204, 0.1)';
+                            textarea.setAttribute('data-dragging', 'true');
+                        });
+                    } else {
+                        textareas.forEach(textarea => {
+                            textarea.style.border = '';
+                            textarea.style.backgroundColor = '';
+                            textarea.removeAttribute('data-dragging');
+                        });
+                    }
+                })();
+            """.trimIndent()
+            webViewInstance.executeJavaScript(jsCode)
+        } catch (e: Exception) {
+            logger.error("Failed to notify drag state", e)
+        }
+    }
+    
+    /**
+     * Handle file drop event.
+     * Based on VSCode handleDrop function.
+     */
+    private fun handleFileDrop(dtde: DropTargetDropEvent) {
+        try {
+            logger.info("Processing drop event")
+            
+            if (!hasFileList(dtde)) {
+                logger.info("Drop rejected: No file list in transferable")
+                dtde.rejectDrop()
+                notifyDragState(false)
+                return
+            }
+            
+            dtde.acceptDrop(DnDConstants.ACTION_COPY)
+            
+            val transferable = dtde.transferable
+            @Suppress("UNCHECKED_CAST")
+            val fileList = transferable.getTransferData(DataFlavor.javaFileListFlavor) as List<File>
+            
+            logger.info("Files dropped: ${fileList.map { it.absolutePath }}")
+            
+            if (fileList.isNotEmpty()) {
+                insertFilePathsIntoTextarea(fileList)
+                dtde.dropComplete(true)
+            } else {
+                logger.warn("No valid files found in drop event")
+                dtde.dropComplete(false)
+            }
+            
+            notifyDragState(false)
+            
+        } catch (e: Exception) {
+            logger.error("Error handling file drop", e)
+            dtde.dropComplete(false)
+            notifyDragState(false)
+        }
+    }
+    
+    /**
+     * Forward file paths to VSCode native handler.
+     * Simulate native drag event for VSCode extension.
+     */
+    private fun insertFilePathsIntoTextarea(files: List<File>) {
+        try {
+            // Build file path list, use absolute path for VSCode native handler
+            val filePaths = files.map { file ->
+                file.absolutePath
+            }
+            
+            logger.info("Forwarding drag drop event to VSCode native handler: ${filePaths.size} files")
+            
+            // Create a simulated native drag event for VSCode extension
+            val jsCode = """
+                (function() {
+                    console.log('Simulating native drag drop event for VSCode');
+                    
+                    // Find target textarea
+                    const textareas = document.querySelectorAll('textarea, [contenteditable="true"], input[type="text"]');
+                    console.log('Found textareas:', textareas.length);
+                    
+                    if (textareas.length === 0) {
+                        console.warn('No suitable textarea found');
+                        return false;
+                    }
+                    
+                    // Select target textarea
+                    let targetTextarea = document.activeElement;
+                    if (!targetTextarea || !['TEXTAREA', 'INPUT'].includes(targetTextarea.tagName)) {
+                        targetTextarea = textareas[0];
+                    }
+                    
+                    if (!targetTextarea) {
+                        console.warn('No valid target textarea found');
+                        return false;
+                    }
+                    
+                    console.log('Target textarea found:', targetTextarea.tagName);
+                    
+                    // Build file path data
+                    const filePaths = [${filePaths.joinToString(", ") { "\"$it\"" }}];
+                    
+                    console.log('File paths to insert:', filePaths);
+                    
+                    // Create mock File objects
+                    const mockFiles = filePaths.map(path => ({
+                        name: path.split('/').pop() || path.split('\\\\').pop() || 'unknown',
+                        path: path,
+                        type: '',
+                        size: 0,
+                        lastModified: Date.now(),
+                        webkitRelativePath: ''
+                    }));
+                    
+                    // Create mock FileList object
+                    const mockFileList = {
+                        length: mockFiles.length,
+                        item: function(index) {
+                            return mockFiles[index] || null;
+                        },
+                        [Symbol.iterator]: function* () {
+                            for (let i = 0; i < this.length; i++) {
+                                yield this.item(i);
+                            }
+                        }
+                    };
+                    
+                    // Add array index access to FileList
+                    mockFiles.forEach((file, index) => {
+                        mockFileList[index] = file;
+                    });
+                    
+                    // Create mock DataTransferItem objects
+                    const mockItems = mockFiles.map(file => ({
+                        kind: 'file',
+                        type: file.type,
+                        getAsFile: function() {
+                            return file;
+                        },
+                        getAsString: function(callback) {
+                            if (callback) callback(file.path);
+                        }
+                    }));
+                    
+                    // Create mock DataTransferItemList object
+                    const mockItemList = {
+                        length: mockItems.length,
+                        item: function(index) {
+                            return mockItems[index] || null;
+                        },
+                        [Symbol.iterator]: function* () {
+                            for (let i = 0; i < this.length; i++) {
+                                yield this.item(i);
+                            }
+                        }
+                    };
+                    
+                    // Add array index access to ItemList
+                    mockItems.forEach((item, index) => {
+                        mockItemList[index] = item;
+                    });
+                    
+                    console.log('Created mock FileList with', mockFileList.length, 'files');
+                    console.log('Created mock ItemList with', mockItemList.length, 'items');
+                    
+                    // Create complete DataTransfer object
+                    const mockDataTransfer = {
+                        files: mockFileList,
+                        items: mockItemList,
+                        types: ['Files', 'text/uri-list', 'text/plain'],
+                        getData: function(format) {
+                            console.log('DataTransfer.getData called with format:', format);
+                            if (format === 'text' || format === 'text/plain') {
+                                return filePaths.join('\n');
+                            }
+                            if (format === 'text/uri-list' || format === 'application/vnd.code.uri-list') {
+                                return filePaths.map(path => 'file://' + path).join('\n');
+                            }
+                            return '';
+                        },
+                        setData: function(format, data) {
+                            // Mock implementation
+                        },
+                        clearData: function(format) {
+                            // Mock implementation
+                        },
+                        effectAllowed: 'copy',
+                        dropEffect: 'copy'
+                    };
+                    
+                    // Create mock drop event
+                    const mockDragEvent = new Event('drop', {
+                        bubbles: true,
+                        cancelable: true
+                    });
+                    
+                    // Add required properties
+                    Object.defineProperty(mockDragEvent, 'dataTransfer', {
+                        value: mockDataTransfer,
+                        writable: false
+                    });
+                    
+                    // Simulate Shift key pressed (required by VSCode)
+                    Object.defineProperty(mockDragEvent, 'shiftKey', {
+                        value: true,
+                        writable: false
+                    });
+                    
+                    console.log('Dispatching mock drop event to textarea');
+                    
+                    // Ensure textarea is focused
+                    targetTextarea.focus();
+                    
+                    // Dispatch event to textarea for VSCode native handler
+                    const result = targetTextarea.dispatchEvent(mockDragEvent);
+                    
+                    console.log('Mock drop event dispatched, result:', result);
+                    
+                    return true;
+                })();
+            """.trimIndent()
+            
+            webViewInstance.executeJavaScript(jsCode)
+            
+        } catch (e: Exception) {
+            logger.error("Failed to forward drag drop event to VSCode", e)
+        }
+    }
+    
+    /**
+     * Check if drag data contains file list.
+     */
+    private fun hasFileList(dtde: DropTargetDragEvent): Boolean {
+        return dtde.transferable.isDataFlavorSupported(DataFlavor.javaFileListFlavor)
+    }
+    
+    /**
+     * Check if drag data contains file list (Drop event version).
+     */
+    private fun hasFileList(dtde: DropTargetDropEvent): Boolean {
+        return dtde.transferable.isDataFlavorSupported(DataFlavor.javaFileListFlavor)
+    }
+}
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/webview/LocalResHandler.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/webview/LocalResHandler.kt
new file mode 100644
index 000000000..349743b8d
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/webview/LocalResHandler.kt
@@ -0,0 +1,130 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.webview
+
+import com.intellij.openapi.diagnostic.Logger
+import io.ktor.http.*
+import org.cef.browser.CefBrowser
+import org.cef.browser.CefFrame
+import org.cef.callback.CefCallback
+import org.cef.handler.CefResourceHandler
+import org.cef.handler.CefResourceRequestHandlerAdapter
+import org.cef.misc.IntRef
+import org.cef.misc.StringRef
+import org.cef.network.CefRequest
+import org.cef.network.CefResponse
+import java.io.File
+
+
+class LocalResHandler(val resourcePath:String , val request: CefRequest?) : CefResourceRequestHandlerAdapter() {
+    private val logger = Logger.getInstance(LocalResHandler::class.java)
+
+    override fun getResourceHandler(browser: CefBrowser?, frame: CefFrame?, request: CefRequest?): CefResourceHandler {
+        logger.info("getResourceHandler,resourcePath:${resourcePath},request:${request?.url}")
+        return LocalCefResHandle(resourcePath,request)
+    }
+
+}
+
+class LocalCefResHandle(val resourceBasePath: String, val request: CefRequest?) : CefResourceHandler{
+    private val logger = Logger.getInstance(LocalCefResHandle::class.java)
+
+    private var file: File? = null
+    private var fileContent: ByteArray? = null
+    private var offset = 0
+
+    init {
+        val requestPath = request?.url?.decodeURLPart()?.replace("http://localhost:","")?.substringAfter("/")?.substringBefore("?")
+        logger.info("init LocalCefResHandle,requestPath:${requestPath},resourceBasePath:${resourceBasePath}")
+        requestPath?.let {
+            val filePath = if (requestPath.isEmpty()) {
+                "$resourceBasePath/index.html"
+            } else {
+                "$resourceBasePath/$requestPath"
+            }
+            file = File(filePath)
+
+            if (file!!.exists() && file!!.isFile) {
+                try {
+                    fileContent = file!!.readBytes()
+                } catch (e: Exception) {
+                    logger.warn("cannot get fileContent,e:${e}")
+                    file = null
+                    fileContent = null
+                }
+            } else {
+                file = null
+                fileContent = null
+            }
+            logger.info("init LocalCefResHandle,filePath:${filePath},file:${file},exists:${file?.exists()}")
+        }
+    }
+
+
+    override fun processRequest(p0: CefRequest?, callback: CefCallback?): Boolean {
+        callback?.Continue()
+        return true
+    }
+
+    /**
+     * Get MIME type according to file path
+     */
+    fun getMimeTypeForFile(filePath: String): String {
+        return when {
+            filePath.endsWith(".html", true) -> "text/html"
+            filePath.endsWith(".css", true) -> "text/css"
+            filePath.endsWith(".js", true) -> "application/javascript"
+            filePath.endsWith(".json", true) -> "application/json"
+            filePath.endsWith(".png", true) -> "image/png"
+            filePath.endsWith(".jpg", true) || filePath.endsWith(".jpeg", true) -> "image/jpeg"
+            filePath.endsWith(".gif", true) -> "image/gif"
+            filePath.endsWith(".svg", true) -> "image/svg+xml"
+            filePath.endsWith(".woff", true) -> "font/woff"
+            filePath.endsWith(".woff2", true) -> "font/woff2"
+            filePath.endsWith(".ttf", true) -> "font/ttf"
+            filePath.endsWith(".eot", true) -> "application/vnd.ms-fontobject"
+            filePath.endsWith(".otf", true) -> "font/otf"
+            else -> "application/octet-stream"
+        }
+    }
+
+    override fun getResponseHeaders(resp: CefResponse?, p1: IntRef?, p2: StringRef?) {
+        if (fileContent == null) {
+            resp?.status = 404
+            resp?.statusText = "Not Found"
+            return
+        }
+
+        resp?.status = 200
+        resp?.statusText = "OK"
+        resp?.mimeType = getMimeTypeForFile(file?.name ?: "index.html")
+        resp?.setHeaderByName("Content-Length", fileContent!!.size.toString(), true)
+    }
+
+    override fun readResponse(dataOut: ByteArray?, bytesToRead: Int, bytesRead: IntRef?, callback: CefCallback?): Boolean {
+        if (fileContent == null || dataOut == null || bytesRead == null) {
+            return false
+        }
+
+        val remaining = fileContent!!.size - offset
+        if (remaining <= 0) {
+            return false
+        }
+
+        val readSize = minOf(bytesToRead, remaining)
+        System.arraycopy(fileContent, offset, dataOut, 0, readSize)
+        offset += readSize
+        bytesRead.set(readSize)
+
+        return offset <= fileContent!!.size
+    }
+
+    override fun cancel() {
+        file = null
+        fileContent = null
+        offset = 0
+    }
+
+}
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/webview/WebViewManager.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/webview/WebViewManager.kt
new file mode 100644
index 000000000..f355a552d
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/webview/WebViewManager.kt
@@ -0,0 +1,960 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.webview
+
+import com.google.gson.Gson
+import com.google.gson.JsonObject
+import com.intellij.ide.BrowserUtil
+import com.intellij.openapi.Disposable
+import com.intellij.openapi.application.ApplicationManager
+import com.intellij.openapi.components.Service
+import com.intellij.openapi.diagnostic.Logger
+import com.intellij.openapi.project.Project
+import com.intellij.openapi.util.Disposer
+import com.intellij.ui.jcef.JBCefBrowser
+import com.intellij.ui.jcef.JBCefJSQuery
+import ai.kilocode.jetbrains.core.PluginContext
+import ai.kilocode.jetbrains.core.ServiceProxyRegistry
+import ai.kilocode.jetbrains.events.WebviewHtmlUpdateData
+import ai.kilocode.jetbrains.events.WebviewViewProviderData
+import ai.kilocode.jetbrains.ipc.proxy.SerializableObjectWithBuffers
+import ai.kilocode.jetbrains.theme.ThemeChangeListener
+import ai.kilocode.jetbrains.theme.ThemeManager
+import kotlinx.coroutines.CoroutineScope
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.SupervisorJob
+import kotlinx.coroutines.launch
+import org.cef.CefSettings
+import org.cef.browser.CefBrowser
+import org.cef.browser.CefFrame
+import org.cef.handler.*
+import org.cef.misc.BoolRef
+import org.cef.network.CefRequest
+import java.io.IOException
+import java.nio.charset.StandardCharsets
+import java.nio.file.Files
+import java.nio.file.Path
+import java.nio.file.Paths
+import java.util.*
+import kotlin.io.path.createDirectories
+import kotlin.io.path.exists
+import kotlin.io.path.pathString
+import java.awt.BorderLayout
+import javax.swing.JButton
+import javax.swing.JFrame
+import javax.swing.JPanel
+
+/**
+ * WebView creation callback interface
+ */
+interface WebViewCreationCallback {
+    /**
+     * Called when WebView is created
+     * @param instance Created WebView instance
+     */
+    fun onWebViewCreated(instance: WebViewInstance)
+}
+
+/**
+ * WebView manager, responsible for managing all WebView instances created during the plugin lifecycle
+ */
+@Service(Service.Level.PROJECT)
+class WebViewManager(var project: Project) : Disposable, ThemeChangeListener {
+    private val logger = Logger.getInstance(WebViewManager::class.java)
+
+    // Latest created WebView instance
+    @Volatile
+    private var latestWebView: WebViewInstance? = null
+    
+    // Store WebView creation callbacks
+    private val creationCallbacks = mutableListOf<WebViewCreationCallback>()
+
+    // Resource root directory path
+    @Volatile
+    private var resourceRootDir: Path? = null
+    
+    // Current theme configuration
+    private var currentThemeConfig: JsonObject? = null
+    
+    // Current theme type
+    private var isDarkTheme: Boolean = true
+    
+    // Prevent repeated dispose
+    private var isDisposed = false
+    private var themeInitialized = false
+
+    /**
+     * Initialize theme manager
+     * @param resourceRoot Resource root directory
+     */
+    fun initializeThemeManager(resourceRoot: String) {
+        if (isDisposed or themeInitialized) return
+        
+        logger.info("Initialize theme manager")
+        val themeManager = ThemeManager.getInstance()
+        themeManager.initialize(resourceRoot)
+        themeManager.addThemeChangeListener(this)
+        themeInitialized = true
+    }
+    
+    /**
+     * Implement ThemeChangeListener interface, handle theme change events
+     */
+    override fun onThemeChanged(themeConfig: JsonObject, isDarkTheme: Boolean) {
+        logger.info("Received theme change event, isDarkTheme: $isDarkTheme, config: ${themeConfig.size()}")
+        this.currentThemeConfig = themeConfig
+        this.isDarkTheme = isDarkTheme
+        
+        // Send theme config to all WebView instances
+        sendThemeConfigToWebViews(themeConfig)
+    }
+    
+    /**
+     * Send theme config to all WebView instances
+     */
+    private fun sendThemeConfigToWebViews(themeConfig: JsonObject) {
+        logger.info("Send theme config to WebView")
+        
+//        getAllWebViews().forEach { webView ->
+            try {
+                getLatestWebView()?.sendThemeConfigToWebView(themeConfig)
+            } catch (e: Exception) {
+                logger.error("Failed to send theme config to WebView", e)
+            }
+//        }
+    }
+    
+    /**
+     * Save HTML content to resource directory
+     * @param html HTML content
+     * @param filename File name
+     * @return Saved file path
+     */
+    private fun saveHtmlToResourceDir(html: String, filename: String): Path? {
+        if( resourceRootDir == null || !resourceRootDir!!.exists() ) {
+            logger.warn("Resource root directory does not exist, cannot save HTML content")
+            throw IOException("Resource root directory does not exist")
+        }
+        
+        val filePath = resourceRootDir?.resolve(filename)
+        
+        try {
+            if (filePath != null) {
+                logger.info("HTML content saved to: $filePath")
+                Files.write(filePath, html.toByteArray(StandardCharsets.UTF_8))
+                return filePath
+            }
+            return null
+        } catch (e: Exception) {
+            logger.error("Failed to save HTML content: $filePath", e)
+            throw e
+        }
+    }
+    
+    /**
+     * Register WebView creation callback
+     * @param callback Callback object
+     * @param disposable Associated Disposable object, used for automatic callback removal
+     */
+    fun addCreationCallback(callback: WebViewCreationCallback, disposable: Disposable? = null) {
+        synchronized(creationCallbacks) {
+            creationCallbacks.add(callback)
+            
+            // If Disposable is provided, automatically remove callback when disposed
+            if (disposable != null) {
+                Disposer.register(disposable, Disposable {
+                    removeCreationCallback(callback)
+                })
+            }
+        }
+        
+        // If there is already a latest created WebView, notify immediately
+        latestWebView?.let { webview ->
+            ApplicationManager.getApplication().invokeLater {
+                callback.onWebViewCreated(webview)
+            }
+        }
+    }
+    
+    /**
+     * Remove WebView creation callback
+     * @param callback Callback object to remove
+     */
+    fun removeCreationCallback(callback: WebViewCreationCallback) {
+        synchronized(creationCallbacks) {
+            creationCallbacks.remove(callback)
+        }
+    }
+    
+    /**
+     * Notify all callbacks that WebView has been created
+     * @param instance Created WebView instance
+     */
+    private fun notifyWebViewCreated(instance: WebViewInstance) {
+        val callbacks = synchronized(creationCallbacks) {
+            creationCallbacks.toList() // Create a copy to avoid concurrent modification
+        }
+        
+        // Safely call callbacks in UI thread
+        ApplicationManager.getApplication().invokeLater {
+            callbacks.forEach { callback ->
+                try {
+                    callback.onWebViewCreated(instance)
+                } catch (e: Exception) {
+                    logger.error("Exception occurred when calling WebView creation callback", e)
+                }
+            }
+        }
+    }
+    
+    /**
+     * Register WebView provider and create WebView instance
+     */
+    fun registerProvider(data: WebviewViewProviderData) {
+        logger.info("Register WebView provider and create WebView instance: ${data.viewType}")
+        val extension = data.extension
+        
+        // Get location info from extension and set resource root directory
+        try {
+            @Suppress("UNCHECKED_CAST")
+            val location = extension?.get("location") as? Map<String, Any?>
+            val fsPath = location?.get("fsPath") as? String
+            
+            if (fsPath != null) {
+                // Set resource root directory
+                val path = Paths.get(fsPath)
+                logger.info("Get resource directory path from extension: $path")
+                
+                // Ensure the resource directory exists
+                if (!path.exists()) {
+                    path.createDirectories()
+                }
+                
+                 // Update resource root directory
+                resourceRootDir = path
+                
+                // Initialize theme manager
+                initializeThemeManager(fsPath)
+
+            }
+        } catch (e: Exception) {
+            logger.error("Failed to get resource directory from extension", e)
+        }
+
+        val protocol = project.getService(PluginContext::class.java).getRPCProtocol()
+        if (protocol == null) {
+            logger.error("Cannot get RPC protocol instance, cannot register WebView provider: ${data.viewType}")
+            return
+        }
+        // When registration event is notified, create a new WebView instance
+        val viewId = UUID.randomUUID().toString()
+
+        val title = data.options["title"] as? String ?: data.viewType
+        val state = data.options["state"] as? Map<String, Any?> ?: emptyMap()
+        
+        val webview = WebViewInstance(data.viewType, viewId, title, state,project,data.extension)
+        // DEBUG HERE!
+        // webview.showDebugWindow()
+
+        val proxy = protocol.getProxy(ServiceProxyRegistry.ExtHostContext.ExtHostWebviewViews)
+        proxy.resolveWebviewView(viewId, data.viewType, title, state, null)
+
+
+        // Set as the latest created WebView
+        latestWebView = webview
+        
+        logger.info("Create WebView instance: viewType=${data.viewType}, viewId=$viewId")
+
+        // Notify callback
+        notifyWebViewCreated(webview)
+    }
+    
+    /**
+         * Get the latest created WebView instance
+         */
+    fun getLatestWebView(): WebViewInstance? {
+        return latestWebView
+    }
+
+    /**
+         * Update the HTML content of the WebView
+         * @param data HTML update data
+         */
+    fun updateWebViewHtml(data: WebviewHtmlUpdateData) {
+        data.htmlContent = data.htmlContent.replace("/jetbrains/resources/kilocode/", "./")
+        data.htmlContent = data.htmlContent.replace("<html lang=\"en\">", "<html lang=\"en\" style=\"background: var(--vscode-editor-background);\">")
+        val encodedState = getLatestWebView()?.state.toString().replace("\"", "\\\"")
+        val mRst = """<script\s+nonce="([A-Za-z0-9]{32})">""".toRegex().find(data.htmlContent)
+        val str = mRst?.value ?: ""
+        data.htmlContent = data.htmlContent.replace(str,"""
+                        ${str}
+                        // First define the function to send messages
+                        window.sendMessageToPlugin = function(message) {
+                            // Convert JS object to JSON string
+                            // console.log("sendMessageToPlugin: ", message);
+                            const msgStr = JSON.stringify(message);
+                            ${getLatestWebView()?.jsQuery?.inject("msgStr")}
+                        };
+                        
+                        // Inject VSCode API mock
+                        globalThis.acquireVsCodeApi = (function() {
+                            let acquired = false;
+                        
+                            let state = JSON.parse('${encodedState}');
+                        
+                            if (typeof window !== "undefined" && !window.receiveMessageFromPlugin) {
+                                console.log("VSCodeAPIWrapper: Setting up receiveMessageFromPlugin for IDEA plugin compatibility");
+                                window.receiveMessageFromPlugin = (message) => {
+                                    // console.log("receiveMessageFromPlugin received message:", JSON.stringify(message));
+                                    // Create a new MessageEvent and dispatch it to maintain compatibility with existing code
+                                    const event = new MessageEvent("message", {
+                                        data: message,
+                                    });
+                                    window.dispatchEvent(event);
+                                };
+                            }
+                        
+                            return () => {
+                                if (acquired) {
+                                    throw new Error('An instance of the VS Code API has already been acquired');
+                                }
+                                acquired = true;
+                                return Object.freeze({
+                                    postMessage: function(message, transfer) {
+                                        // console.log("postMessage: ", message);
+                                        window.sendMessageToPlugin(message);
+                                    },
+                                    setState: function(newState) {
+                                        state = newState;
+                                        window.sendMessageToPlugin(newState);
+                                        return newState;
+                                    },
+                                    getState: function() {
+                                        return state;
+                                    }
+                                });
+                            };
+                        })();
+                        
+                        // Clean up references to window parent for security
+                        delete window.parent;
+                        delete window.top;
+                        delete window.frameElement;
+                        
+                        console.log("VSCode API mock injected");
+                        """)
+
+
+
+        logger.info("Received HTML update event: handle=${data.handle}, html length: ${data.htmlContent.length}")
+        
+        val webView = getLatestWebView()
+        
+        if (webView != null) {
+            try {
+                // If HTTP server is running
+                if ( resourceRootDir != null) {
+                    // Generate unique file name for WebView
+                    val filename = "index.html"
+
+                    // Save HTML content to file
+                    saveHtmlToResourceDir(data.htmlContent, filename)
+
+                    // Use HTTP URL to load WebView content
+                    val url = "http://localhost:12345/$filename"
+                    logger.info("Load WebView HTML content via HTTP: $url")
+
+                    webView.loadUrl(url)
+                } else {
+                    // Fallback to direct HTML loading
+                    logger.warn("HTTP server not running or resource directory not set, loading HTML content directly")
+                    webView.loadHtml(data.htmlContent)
+                }
+
+                    logger.info("WebView HTML content updated: handle=${data.handle}")
+
+                // If there is already a theme config, send it after content is loaded
+                if (currentThemeConfig != null) {
+                    // Delay sending theme config to ensure HTML is loaded
+                    ApplicationManager.getApplication().invokeLater {
+                        try {
+                            webView.sendThemeConfigToWebView(currentThemeConfig!!)
+                        } catch (e: Exception) {
+                            logger.error("Failed to send theme config to WebView", e)
+                        }
+                    }
+                }
+            } catch (e: Exception) {
+                logger.error("Failed to update WebView HTML content", e)
+                // Fallback to direct HTML loading
+                webView.loadHtml(data.htmlContent)
+            }
+        } else {
+            logger.warn("WebView instance not found: handle=${data.handle}")
+        }
+    }
+
+    
+    override fun dispose() {
+        if (isDisposed) {
+            logger.info("WebViewManager has already been disposed, ignoring repeated call")
+            return
+        }
+        isDisposed = true
+        
+        logger.info("Releasing WebViewManager resources...")
+
+        // Remove listener from theme manager
+        try {
+            ThemeManager.getInstance().removeThemeChangeListener(this)
+        } catch (e: Exception) {
+            logger.error("Failed to remove listener from theme manager", e)
+        }
+        
+        // Clean up resource directory
+        try {
+            // Only delete index.html file, keep other files
+            resourceRootDir?.let {
+                val indexFile = it.resolve("index.html").toFile()
+                if (indexFile.exists() && indexFile.isFile) {
+                    val deleted = indexFile.delete()
+                    if (deleted) {
+                        logger.info("index.html file deleted")
+                    } else {
+                        logger.warn("Failed to delete index.html file")
+                    }
+                } else {
+                    logger.info("index.html file does not exist, no need to clean up")
+                }
+            }
+            resourceRootDir = null
+        } catch (e: Exception) {
+            logger.error("Failed to clean up index.html file", e)
+        }
+
+        try {
+            latestWebView?.dispose()
+        } catch (e: Exception) {
+            logger.error("Failed to release WebView resources", e)
+        }
+        
+        // Reset theme data
+        currentThemeConfig = null
+        
+        // Clear callback list
+        synchronized(creationCallbacks) {
+            creationCallbacks.clear()
+        }
+        
+        logger.info("WebViewManager released")
+    }
+
+
+}
+
+/**
+ * WebView instance class, encapsulates JCEF browser
+ */
+class WebViewInstance(
+    val viewType: String,
+    val viewId: String,
+    val title: String,
+    val state: Map<String, Any?>,
+    val project: Project,
+    val extension: Map<String, Any?>
+) : Disposable {
+    private val logger = Logger.getInstance(WebViewInstance::class.java)
+    
+    // JCEF browser instance
+    val browser = JBCefBrowser.createBuilder().setOffScreenRendering(true).build()
+    
+    // WebView state
+    private var isDisposed = false
+
+    // JavaScript query handler for communication with webview
+    var jsQuery: JBCefJSQuery? = null
+
+    // JSON serialization
+    private val gson = Gson()
+
+    // Coroutine scope
+    private val coroutineScope = CoroutineScope(SupervisorJob() + Dispatchers.IO)
+
+    private var isPageLoaded = false
+
+    private var currentThemeConfig: JsonObject? = null
+    
+    // Callback for page load completion
+    private var pageLoadCallback: (() -> Unit)? = null
+    
+    init {
+        setupJSBridge()
+        // Enable resource loading interception
+        enableResourceInterception(extension)
+    }
+
+    /**
+     * Send theme config to the specified WebView instance
+     */
+    fun sendThemeConfigToWebView(themeConfig: JsonObject) {
+        currentThemeConfig = themeConfig
+        if(isDisposed or !isPageLoaded) {
+            logger.warn("WebView has been disposed or not loaded, cannot send theme config:${isDisposed},${isPageLoaded}")
+            return
+        }
+        injectTheme()
+    }
+
+    /**
+     * Check if page is loaded
+     * @return true if page is loaded, false otherwise
+     */
+    fun isPageLoaded(): Boolean {
+        return isPageLoaded
+    }
+    
+    /**
+     * Set callback for page load completion
+     * @param callback Callback function to be called when page is loaded
+     */
+    fun setPageLoadCallback(callback: (() -> Unit)?) {
+        pageLoadCallback = callback
+    }
+    
+    private fun injectTheme() {
+        if(currentThemeConfig == null) {
+            return
+        }
+        try {
+            var cssContent: String? = null
+
+            // Get cssContent from themeConfig and save, then remove from object
+            if (currentThemeConfig!!.has("cssContent")) {
+                cssContent = currentThemeConfig!!.get("cssContent").asString
+                // Create a copy of themeConfig to modify without affecting the original object
+                val themeConfigCopy = currentThemeConfig!!.deepCopy()
+                // Remove cssContent property from the copy
+                themeConfigCopy.remove("cssContent")
+
+                // Inject CSS variables into WebView
+                if (cssContent != null) {
+                    val injectThemeScript = """
+                        (function() {
+                            console.log("Ready to inject CSS variables into WebView")
+                            function injectCSSVariables() {
+                                if(document.documentElement) {
+                                    // Convert cssContent to style attribute of html tag
+                                    try {
+                                        // Extract CSS variables (format: --name:value;)
+                                        const cssLines = `$cssContent`.split('\n');
+                                        const cssVariables = [];
+                                        
+                                        // Process each line, extract CSS variable declarations
+                                        for (const line of cssLines) {
+                                            const trimmedLine = line.trim();
+                                            // Skip comments and empty lines
+                                            if (trimmedLine.startsWith('/*') || trimmedLine.startsWith('*') || trimmedLine.startsWith('*/') || trimmedLine === '') {
+                                                continue;
+                                            }
+                                            // Extract CSS variable part
+                                            if (trimmedLine.startsWith('--')) {
+                                                cssVariables.push(trimmedLine);
+                                            }
+                                        }
+                                        
+                                        // Merge extracted CSS variables into style attribute string
+                                        const styleAttrValue = cssVariables.join(' ');
+                                        
+                                        // Set as style attribute of html tag
+                                        document.documentElement.setAttribute('style', styleAttrValue);
+                                        console.log("CSS variables set as style attribute of HTML tag");
+                                    } catch (error) {
+                                        console.error("Error processing CSS variables:", error);
+                                    }
+                                    
+                                    // Keep original default style injection logic
+                                    if(document.head) {
+                                        // Inject default theme style into head, use id="_defaultStyles"
+                                        let defaultStylesElement = document.getElementById('_defaultStyles');
+                                        if (!defaultStylesElement) {
+                                            defaultStylesElement = document.createElement('style');
+                                            defaultStylesElement.id = '_defaultStyles';
+                                            document.head.appendChild(defaultStylesElement);
+                                        }
+                                        
+                                        // Add default_themes.css content
+                                        defaultStylesElement.textContent = `
+                                            html {
+                                                background: var(--vscode-editor-background);
+                                                scrollbar-color: var(--vscode-scrollbarSlider-background) var(--vscode-editor-background);
+                                            }
+                                            
+                                            body {
+                                                overscroll-behavior-x: none;
+                                                background-color: transparent;
+                                                color: var(--vscode-editor-foreground);
+                                                font-family: var(--vscode-font-family);
+                                                font-weight: var(--vscode-font-weight);
+                                                font-size: var(--vscode-font-size);
+                                                margin: 0;
+                                                padding: 0 20px;
+                                            }
+                                            
+                                            img, video {
+                                                max-width: 100%;
+                                                max-height: 100%;
+                                            }
+                                            
+                                            a, a code {
+                                                color: var(--vscode-textLink-foreground);
+                                            }
+                                            
+                                            p > a {
+                                                text-decoration: var(--text-link-decoration);
+                                            }
+                                            
+                                            a:hover {
+                                                color: var(--vscode-textLink-activeForeground);
+                                            }
+                                            
+                                            a:focus,
+                                            input:focus,
+                                            select:focus,
+                                            textarea:focus {
+                                                outline: 1px solid -webkit-focus-ring-color;
+                                                outline-offset: -1px;
+                                            }
+                                            
+                                            code {
+                                                font-family: var(--monaco-monospace-font);
+                                                color: var(--vscode-textPreformat-foreground);
+                                                background-color: var(--vscode-textPreformat-background);
+                                                padding: 1px 3px;
+                                                border-radius: 4px;
+                                            }
+                                            
+                                            pre code {
+                                                padding: 0;
+                                            }
+                                            
+                                            blockquote {
+                                                background: var(--vscode-textBlockQuote-background);
+                                                border-color: var(--vscode-textBlockQuote-border);
+                                            }
+                                            
+                                            kbd {
+                                                background-color: var(--vscode-keybindingLabel-background);
+                                                color: var(--vscode-keybindingLabel-foreground);
+                                                border-style: solid;
+                                                border-width: 1px;
+                                                border-radius: 3px;
+                                                border-color: var(--vscode-keybindingLabel-border);
+                                                border-bottom-color: var(--vscode-keybindingLabel-bottomBorder);
+                                                box-shadow: inset 0 -1px 0 var(--vscode-widget-shadow);
+                                                vertical-align: middle;
+                                                padding: 1px 3px;
+                                            }
+                                            
+                                            ::-webkit-scrollbar {
+                                                width: 10px;
+                                                height: 10px;
+                                            }
+                                            
+                                            ::-webkit-scrollbar-corner {
+                                                background-color: var(--vscode-editor-background);
+                                            }
+                                            
+                                            ::-webkit-scrollbar-thumb {
+                                                background-color: var(--vscode-scrollbarSlider-background);
+                                            }
+                                            ::-webkit-scrollbar-thumb:hover {
+                                                background-color: var(--vscode-scrollbarSlider-hoverBackground);
+                                            }
+                                            ::-webkit-scrollbar-thumb:active {
+                                                background-color: var(--vscode-scrollbarSlider-activeBackground);
+                                            }
+                                            ::highlight(find-highlight) {
+                                                background-color: var(--vscode-editor-findMatchHighlightBackground);
+                                            }
+                                            ::highlight(current-find-highlight) {
+                                                background-color: var(--vscode-editor-findMatchBackground);
+                                            }
+                                        `;
+                                        console.log("Default style injected to id=_defaultStyles");
+                                    }
+                                } else {
+                                    // If html tag does not exist yet, wait for DOM to load and try again
+                                    setTimeout(injectCSSVariables, 10);
+                                }
+                            }
+                            // If document is already loaded
+                            if (document.readyState === 'complete' || document.readyState === 'interactive') {
+                                console.log("Document loaded, inject CSS variables immediately");
+                                injectCSSVariables();
+                            } else {
+                                // Otherwise wait for DOMContentLoaded event
+                                console.log("Document not loaded, waiting for DOMContentLoaded event");
+                                document.addEventListener('DOMContentLoaded', injectCSSVariables);
+                            }
+                        })()
+                    """.trimIndent()
+
+                    logger.info("Injecting theme style into WebView(${viewId}), size: ${cssContent.length} bytes")
+                    executeJavaScript(injectThemeScript)
+                }
+
+                // Pass the theme config without cssContent via message
+                val themeConfigJson = gson.toJson(themeConfigCopy)
+                val message = """
+                    {
+                        "type": "theme",
+                        "text": "${themeConfigJson.replace("\"", "\\\"")}"
+                    }
+                """.trimIndent()
+
+                postMessageToWebView(message)
+                logger.info("Theme config without cssContent has been sent to WebView")
+            } else {
+                // If there is no cssContent, send the original config directly
+                val themeConfigJson = gson.toJson(currentThemeConfig)
+                val message = """
+                    {
+                        "type": "theme",
+                        "text": "${themeConfigJson.replace("\"", "\\\"")}"
+                    }
+                """.trimIndent()
+
+                postMessageToWebView(message)
+                logger.info("Theme config has been sent to WebView")
+            }
+        } catch (e: Exception) {
+            logger.error("Failed to send theme config to WebView", e)
+        }
+    }
+
+    private fun setupJSBridge() {
+        // Create JS query object to handle messages from webview
+        jsQuery = JBCefJSQuery.create(browser)
+
+        // Set callback for receiving messages from webview
+        jsQuery?.addHandler { message ->
+            coroutineScope.launch {
+                // Handle message
+                val protocol = project.getService(PluginContext::class.java).getRPCProtocol()
+                if (protocol != null) {
+                    logger.info("Received message from WebView: $message")
+                    // Send message to plugin host
+                    val serializeParam = SerializableObjectWithBuffers(emptyList<ByteArray>())
+                    protocol.getProxy(ServiceProxyRegistry.ExtHostContext.ExtHostWebviews).onMessage(viewId, message, serializeParam)
+                } else {
+                    logger.error("Cannot get RPC protocol instance, cannot handle message: $message")
+                }
+            }
+            null // No return value needed
+        }
+    }
+
+    /**
+         * Send message to WebView
+         * @param message Message to send (JSON string)
+         */
+    fun postMessageToWebView(message: String) {
+        if (!isDisposed) {
+            // Send message to WebView via JavaScript function
+            val script = """
+                if (window.receiveMessageFromPlugin) {
+                    window.receiveMessageFromPlugin($message);
+                } else {
+                    console.warn("receiveMessageFromPlugin not available");
+                }
+            """.trimIndent()
+            executeJavaScript(script)
+        }
+    }
+
+    /**
+         * Enable resource request interception
+         */
+    fun enableResourceInterception(extension: Map<String, Any?>) {
+        try {
+            @Suppress("UNCHECKED_CAST")
+            val location = extension?.get("location") as? Map<String, Any?>
+            val fsPath = location?.get("fsPath") as? String
+
+            // Get JCEF client
+            val client = browser.jbCefClient
+
+
+
+            // Register console message handler
+            client.addDisplayHandler(object: CefDisplayHandlerAdapter() {
+                override fun onConsoleMessage(
+                    browser: CefBrowser?,
+                    level: CefSettings.LogSeverity?,
+                    message: String?,
+                    source: String?,
+                    line: Int
+                ): Boolean {
+                    logger.info("WebView console message: [$level] $message (line: $line, source: $source)")
+                    return true
+                }
+            }, browser.cefBrowser)
+            
+            // Register load handler
+            client.addLoadHandler(object : CefLoadHandlerAdapter() {
+                override fun onLoadingStateChange(
+                    browser: CefBrowser?,
+                    isLoading: Boolean,
+                    canGoBack: Boolean,
+                    canGoForward: Boolean
+                ) {
+                    logger.info("WebView loading state changed: isLoading=$isLoading, canGoBack=$canGoBack, canGoForward=$canGoForward")
+                }
+                
+                override fun onLoadStart(
+                    browser: CefBrowser?,
+                    frame: CefFrame?,
+                    transitionType: CefRequest.TransitionType?
+                ) {
+                    logger.info("WebView started loading: ${frame?.url}, transition type: $transitionType")
+                    isPageLoaded = false
+                }
+                
+                override fun onLoadEnd(
+                    browser: CefBrowser?,
+                    frame: CefFrame?,
+                    httpStatusCode: Int
+                ) {
+                    logger.info("WebView finished loading: ${frame?.url}, status code: $httpStatusCode")
+                    isPageLoaded = true
+                    injectTheme()
+                    // Notify page load completion
+                    pageLoadCallback?.invoke()
+                }
+                
+                override fun onLoadError(
+                    browser: CefBrowser?,
+                    frame: CefFrame?,
+                    errorCode: CefLoadHandler.ErrorCode?,
+                    errorText: String?,
+                    failedUrl: String?
+                ) {
+                    logger.info("WebView load error: $failedUrl, error code: $errorCode, error message: $errorText")
+                }
+            }, browser.cefBrowser)
+
+            client.addRequestHandler(object : CefRequestHandlerAdapter() {
+                override fun onBeforeBrowse(
+                    browser: CefBrowser?,
+                    frame: CefFrame?,
+                    request: CefRequest?,
+                    user_gesture: Boolean,
+                    is_redirect: Boolean
+                ): Boolean {
+                    logger.info("onBeforeBrowse,url:${request?.url}")
+                    if(request?.url?.startsWith("http://localhost") == false){
+                        BrowserUtil.browse(request.url)
+                        return true
+                    }
+                    return false
+                }
+
+                override fun getResourceRequestHandler(
+                    browser: CefBrowser?,
+                    frame: CefFrame?,
+                    request: CefRequest?,
+                    isNavigation: Boolean,
+                    isDownload: Boolean,
+                    requestInitiator: String?,
+                    disableDefaultHandling: BoolRef?
+                ): CefResourceRequestHandler? {
+                    logger.info("getResourceRequestHandler,fsPath:${fsPath}")
+                    if (fsPath != null && request?.url?.contains("localhost")==true) {
+                        // Set resource root directory
+                        val path = Paths.get(fsPath)
+                        return LocalResHandler(path.pathString,request)
+                    }else{
+                        logger.info("Resource request handler not found for url: ${request?.url}")
+                        return null
+                    }
+
+                }
+            }, browser.cefBrowser)
+            logger.info("WebView resource interception enabled: $viewType/$viewId")
+        } catch (e: Exception) {
+            logger.error("Failed to enable WebView resource interception", e)
+        }
+    }
+    
+    /**
+         * Load URL
+         */
+    fun loadUrl(url: String) {
+        if (!isDisposed) {
+            logger.info("WebView loading URL: $url")
+            browser.loadURL(url)
+        }
+    }
+    
+    /**
+         * Load HTML content
+         */
+    fun loadHtml(html: String, baseUrl: String? = null) {
+        if (!isDisposed) {
+            logger.info("WebView loading HTML content, length: ${html.length}, baseUrl: $baseUrl")
+            if(baseUrl != null) {
+                browser.loadHTML(html, baseUrl)
+            }else {
+                browser.loadHTML(html)
+            }
+        }
+    }
+    
+    /**
+         * Execute JavaScript
+         */
+    fun executeJavaScript(script: String) {
+        if (!isDisposed) {
+            logger.info("WebView executing JavaScript, script length: ${script.length}")
+            browser.cefBrowser.executeJavaScript(script, browser.cefBrowser.url, 0)
+        }
+    }
+    
+    /**
+         * Open developer tools
+         */
+    fun openDevTools() {
+        if (!isDisposed) {
+            browser.openDevtools()
+        }
+    }
+
+    fun showDebugWindow() {
+        if (!isDisposed) {
+            ApplicationManager.getApplication().invokeLater {
+                val frame = JFrame("WebView Debug - $viewType")
+                frame.defaultCloseOperation = JFrame.DISPOSE_ON_CLOSE
+                frame.add(browser.component)
+                frame.setSize(800, 600)
+                frame.isVisible = true
+                
+                // Optional: Add dev tools button
+                val toolbar = JPanel()
+                val devToolsButton = JButton("Open DevTools")
+                devToolsButton.addActionListener { openDevTools() }
+                toolbar.add(devToolsButton)
+                frame.add(toolbar, BorderLayout.NORTH)
+            }
+        }
+    }
+    
+    override fun dispose() {
+        if (!isDisposed) {
+            browser.dispose()
+            isDisposed = true
+            logger.info("WebView instance released: $viewType/$viewId")
+        }
+    }
+}
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/workspace/WorkspaceFileChangeManager.kt b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/workspace/WorkspaceFileChangeManager.kt
new file mode 100644
index 000000000..8cd6eb03f
--- /dev/null
+++ b/jetbrains/plugin/src/main/kotlin/ai/kilocode/jetbrains/workspace/WorkspaceFileChangeManager.kt
@@ -0,0 +1,381 @@
+// SPDX-FileCopyrightText: 2025 Weibo, Inc.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+package ai.kilocode.jetbrains.workspace
+
+import com.intellij.openapi.Disposable
+import com.intellij.openapi.application.ApplicationManager
+import com.intellij.openapi.components.Service
+import com.intellij.openapi.diagnostic.Logger
+import com.intellij.openapi.project.Project
+import com.intellij.openapi.project.ProjectManager
+import com.intellij.openapi.project.ProjectManagerListener
+import com.intellij.openapi.util.Disposer
+import com.intellij.openapi.vfs.*
+import com.intellij.openapi.vfs.newvfs.BulkFileListener
+import com.intellij.openapi.vfs.newvfs.events.*
+import com.intellij.util.messages.MessageBusConnection
+import ai.kilocode.jetbrains.core.PluginContext
+import ai.kilocode.jetbrains.core.ServiceProxyRegistry
+import ai.kilocode.jetbrains.core.WorkspaceManager
+import ai.kilocode.jetbrains.events.*
+import ai.kilocode.jetbrains.ipc.proxy.interfaces.FileSystemEvents
+import java.util.concurrent.ConcurrentHashMap
+
+
+/**
+ * Workspace file change manager
+ * Listens for creation, modification, deletion, and other changes of files in the workspace, and sends corresponding events
+ */
+@Service(Service.Level.PROJECT)
+class WorkspaceFileChangeManager(val project: Project) : Disposable {
+    private val logger = Logger.getInstance(WorkspaceFileChangeManager::class.java)
+
+    // Record registered file listener connections
+    private val vfsConnections = ConcurrentHashMap<Project, MessageBusConnection>()
+    
+    // Record project workspace directory paths
+    private val projectWorkspacePaths = ConcurrentHashMap<Project, String>()
+
+    // Project connection
+    private var projectConnection: MessageBusConnection? = null
+
+    // Project listener
+    private val projectListener = object : ProjectManagerListener {
+        override fun projectOpened(project: Project) {
+            registerFileListener(project)
+            // Record initial project workspace directory
+            project.basePath?.let { projectWorkspacePaths[project] = it }
+            // Trigger workspace root change event
+            triggerWorkspaceRootChangeEvent(project, null, project.basePath ?: "")
+        }
+
+        override fun projectClosed(project: Project) {
+            unregisterFileListener(project)
+            // Remove project workspace directory record
+            projectWorkspacePaths.remove(project)
+        }
+    }
+
+    init {
+        logger.info("Initialize workspace file change manager")
+
+        // Listen for project open/close events
+        projectConnection = ApplicationManager.getApplication().messageBus.connect(this)
+        projectConnection?.subscribe(ProjectManager.TOPIC, projectListener)
+
+        // Register file listeners for already opened projects
+        val openProjects = ProjectManager.getInstance().openProjects
+        for (project in openProjects) {
+            registerFileListener(project)
+            // Record workspace directory for opened projects
+            project.basePath?.let { projectWorkspacePaths[project] = it }
+        }
+    }
+
+    /**
+     * Trigger workspace root change event
+     * @param project Project
+     * @param oldPath Old workspace directory path
+     * @param newPath New workspace directory path
+     */
+    private fun triggerWorkspaceRootChangeEvent(project: Project, oldPath: String?, newPath: String) {
+        logger.info("Trigger workspace root change event: ${project.name}, old path: $oldPath, new path: $newPath")
+        
+        // Create workspace root change data
+        val workspaceChangeData = WorkspaceRootChangeData(project, oldPath, newPath)
+        
+        // Send workspace root change event via EventBus
+        project.getService(ProjectEventBus::class.java).emitInApplication(WorkspaceRootChangeEvent, workspaceChangeData)
+        
+        // Get ExtHostWorkspace proxy
+        val extHostWorkspace = PluginContext.getInstance(project).getRPCProtocol()?.getProxy(ServiceProxyRegistry.ExtHostContext.ExtHostWorkspace)
+
+        // Get current workspace data
+        val workspaceData = project.getService(WorkspaceManager::class.java).getProjectWorkspaceData(project)
+
+        extHostWorkspace?.let {
+            if(workspaceData != null) {
+                logger.info("Send workspace root change to extension process: ${workspaceData.name}, folders: ${workspaceData.folders.size}")
+                it.acceptWorkspaceData(workspaceData)
+            }
+        }
+    }
+
+    /**
+     * Register file listener
+     * @param project Project to listen to
+     */
+    private fun registerFileListener(project: Project) {
+        if (vfsConnections.containsKey(project)) {
+            logger.info("File listener for project ${project.name} already exists, skip registration")
+            return
+        }
+
+        logger.info("Register file listener for project ${project.name}")
+
+        try {
+            // Create connection and subscribe to VFS change events
+            val connection = project.messageBus.connect()
+
+            // Add virtual file system listener
+            connection.subscribe(VirtualFileManager.VFS_CHANGES, object : BulkFileListener {
+                override fun after(events: List<VFileEvent>) {
+                    processBulkFileEvents(events, project)
+                }
+            })
+
+            // Save connection for later cleanup
+            vfsConnections[project] = connection
+
+        } catch (e: Exception) {
+            logger.error("Failed to register file listener for project ${project.name}", e)
+        }
+    }
+
+    /**
+     * Unregister file listener
+     * @param project Project to unregister listener from
+     */
+    private fun unregisterFileListener(project: Project) {
+        val connection = vfsConnections.remove(project)
+        if (connection != null) {
+            logger.info("Unregister file listener for project ${project.name}")
+
+            try {
+                connection.disconnect()
+            } catch (e: Exception) {
+                logger.error("Failed to unregister file listener for project ${project.name}", e)
+            }
+        }
+    }
+
+    /**
+     * Process bulk file events
+     * @param events List of file events
+     * @param project Related project
+     */
+    private fun processBulkFileEvents(events: List<VFileEvent>, project: Project) {
+        if (events.isEmpty()) {
+            return
+        }
+
+        // Collect all file changes
+        val fileChanges = mutableListOf<WorkspaceFileChangeData>()
+        val directoryChanges = mutableListOf<WorkspaceFileChangeData>()
+
+        events.forEach { event ->
+            val file = when (event) {
+                is VFileCreateEvent -> event.file
+                is VFileDeleteEvent -> event.file
+                is VFileMoveEvent -> event.file
+                is VFileCopyEvent -> event.file
+                is VFilePropertyChangeEvent -> event.file
+                is VFileContentChangeEvent -> event.file
+                else -> null
+            }
+
+            if (file != null) {
+                // Determine change type
+                val changeType = when (event) {
+                    is VFileCreateEvent -> FileChangeType.CREATED
+                    is VFileDeleteEvent -> FileChangeType.DELETED
+                    else -> FileChangeType.UPDATED
+                }
+
+                // Skip irrelevant files or directories
+                if (isRelevantFileSystemItem(file, project)) {
+                    val changeData = WorkspaceFileChangeData(file, changeType)
+
+                    // Store by type
+                    if (file.isDirectory) {
+                        directoryChanges.add(changeData)
+                        // Trigger event for each directory change
+                        triggerDirectoryChangeEvent(changeData)
+                    } else {
+                        fileChanges.add(changeData)
+                        // Trigger event for each file change
+                        triggerFileChangeEvent(changeData)
+                    }
+                }
+            }
+        }
+
+        // Trigger bulk file change event
+        if (fileChanges.isNotEmpty()) {
+            triggerBulkFileChangeEvent(fileChanges,project)
+        }
+
+        // Trigger bulk directory change event
+        if (directoryChanges.isNotEmpty()) {
+            triggerBulkDirectoryChangeEvent(directoryChanges,project)
+        }
+    }
+
+    /**
+     * Trigger file change event
+     * @param fileChangeData File change data
+     */
+    private fun triggerFileChangeEvent(fileChangeData: WorkspaceFileChangeData) {
+        logger.info("File changed: ${fileChangeData.file.path}, type: ${fileChangeData.changeType}")
+
+        // Send single file change event via EventBus
+        project.getService(ProjectEventBus::class.java).emitInApplication(WorkspaceFileChangeEvent, fileChangeData)
+    }
+
+    /**
+     * Trigger directory change event
+     * @param directoryChangeData Directory change data
+     */
+    private fun triggerDirectoryChangeEvent(directoryChangeData: WorkspaceFileChangeData) {
+        logger.info("Directory changed: ${directoryChangeData.file.path}, type: ${directoryChangeData.changeType}")
+
+        // Send single directory change event via EventBus
+        project.getService(ProjectEventBus::class.java).emitInApplication(WorkspaceDirectoryChangeEvent, directoryChangeData)
+    }
+
+    /**
+     * Trigger bulk file change event
+     * @param fileChanges List of file changes
+     */
+    private fun triggerBulkFileChangeEvent(fileChanges: List<WorkspaceFileChangeData>, project: Project) {
+        logger.info("Bulk file change, total ${fileChanges.size} files")
+
+        val proxy = PluginContext.getInstance(project).getRPCProtocol()?.getProxy(ServiceProxyRegistry.ExtHostContext.ExtHostFileSystemEventService)
+        proxy?.let {
+            // Convert file change data to FileSystemEvents format
+            val createdFiles = mutableListOf<Map<String, Any?>>()
+            val changedFiles = mutableListOf<Map<String, Any?>>()
+            val deletedFiles = mutableListOf<Map<String, Any?>>()
+
+            // Classify files by change type
+            fileChanges.forEach { fileChange ->
+                val uriComponents = fileToUriComponents(fileChange.file)
+                when (fileChange.changeType) {
+                    FileChangeType.CREATED -> createdFiles.add(uriComponents)
+                    FileChangeType.UPDATED -> changedFiles.add(uriComponents)
+                    FileChangeType.DELETED -> deletedFiles.add(uriComponents)
+                }
+            }
+
+            // Create FileSystemEvents object and send
+            val fileSystemEvents = FileSystemEvents(
+                session = fileChanges[0].timestamp.toString(),
+                created = createdFiles,
+                changed = changedFiles,
+                deleted = deletedFiles
+            )
+
+            // Call onFileEvent method of extension host file system event service
+            it.onFileEvent(fileSystemEvents)
+        }
+
+        // Send bulk file change event via EventBus
+        val bulkChangeData = WorkspaceFilesChangeData(fileChanges)
+        project.getService(ProjectEventBus::class.java).emitInApplication(WorkspaceFilesChangeEvent, bulkChangeData)
+    }
+
+    /**
+     * Trigger bulk directory change event
+     * @param directoryChanges List of directory changes
+     */
+    private fun triggerBulkDirectoryChangeEvent(directoryChanges: List<WorkspaceFileChangeData>, project: Project) {
+        logger.info("Bulk directory change, total ${directoryChanges.size} directories")
+
+        val proxy = PluginContext.getInstance(project).getRPCProtocol()?.getProxy(ServiceProxyRegistry.ExtHostContext.ExtHostFileSystemEventService)
+        proxy?.let {
+            // Convert directory change data to FileSystemEvents format
+            val createdDirs = mutableListOf<Map<String, Any?>>()
+            val changedDirs = mutableListOf<Map<String, Any?>>()
+            val deletedDirs = mutableListOf<Map<String, Any?>>()
+
+            // Classify directories by change type
+            directoryChanges.forEach { dirChange ->
+                val uriComponents = fileToUriComponents(dirChange.file)
+                when (dirChange.changeType) {
+                    FileChangeType.CREATED -> createdDirs.add(uriComponents)
+                    FileChangeType.UPDATED -> changedDirs.add(uriComponents)
+                    FileChangeType.DELETED -> deletedDirs.add(uriComponents)
+                }
+            }
+
+            // Create FileSystemEvents object and send
+            val fileSystemEvents = FileSystemEvents(
+                session = directoryChanges[0].timestamp.toString(),
+                created = createdDirs,
+                changed = changedDirs,
+                deleted = deletedDirs
+            )
+
+            // Call onFileEvent method of extension host file system event service
+            it.onFileEvent(fileSystemEvents)
+        }
+
+        // Send bulk directory change event via EventBus
+        val bulkChangeData = WorkspaceFilesChangeData(directoryChanges)
+        project.getService(ProjectEventBus::class.java).emitInApplication(WorkspaceDirectoriesChangeEvent, bulkChangeData)
+    }
+
+    /**
+     * Convert VirtualFile to URI components map
+     * @param file Virtual file
+     * @return URI components map
+     */
+    private fun fileToUriComponents(file: VirtualFile): Map<String, Any?> {
+        // Build component map conforming to VSCode URI format
+        return mapOf(
+            "scheme" to "file",
+            "path" to file.path,
+            "authority" to "",
+            "query" to "",
+            "fragment" to ""
+        )
+    }
+
+    /**
+     * Check if file or directory is relevant to the project
+     * @param file File or directory to check
+     * @param project Project
+     * @return Whether the file or directory is relevant to the project
+     */
+    private fun isRelevantFileSystemItem(file: VirtualFile, project: Project): Boolean {
+        // Ignore hidden files and directories
+        if (file.name.startsWith(".") || file.path.contains("/.")) {
+            return false
+        }
+
+        // For files, ignore temporary files
+        if (!file.isDirectory && (file.name.endsWith("~") || file.name.endsWith(".tmp"))) {
+            return false
+        }
+
+        return true
+    }
+
+    override fun dispose() {
+        logger.info("Release workspace file change manager resources")
+
+        try {
+            // Disconnect project listener connection
+            projectConnection?.disconnect()
+            projectConnection = null
+
+            // Release all file listener connections
+            vfsConnections.forEach { (project, connection) ->
+                try {
+                    logger.info("Unregister file listener for project ${project.name}")
+                    connection.disconnect()
+                } catch (e: Exception) {
+                    logger.error("Failed to unregister file listener for project ${project.name}", e)
+                }
+            }
+
+            vfsConnections.clear()
+
+        } catch (e: Exception) {
+            logger.error("Failed to release workspace file change manager resources", e)
+        }
+    }
+
+}
diff --git a/jetbrains/plugin/src/main/resources/META-INF/plugin.xml b/jetbrains/plugin/src/main/resources/META-INF/plugin.xml
new file mode 100644
index 000000000..99b67ebf9
--- /dev/null
+++ b/jetbrains/plugin/src/main/resources/META-INF/plugin.xml
@@ -0,0 +1,123 @@
+<!--
+SPDX-FileCopyrightText: 2025 Weibo, Inc.
+
+SPDX-License-Identifier: Apache-2.0
+-->
+
+<!-- Plugin Configuration File. Read more: https://plugins.jetbrains.com/docs/intellij/plugin-configuration-file.html -->
+<idea-plugin>
+    <!-- Unique identifier of the plugin. It should be FQN. It cannot be changed between the plugin versions. -->
+    <id>ai.kilocode.jetbrains</id>
+
+    <!-- Public plugin name should be written in Title Case.
+         Guidelines: https://plugins.jetbrains.com/docs/marketplace/plugin-overview-page.html#plugin-name -->
+    <name>Kilo Code</name>
+
+    <!-- A displayed Vendor name or Organization ID displayed on the Plugins Page. -->
+    <vendor url="https://kilocode.ai">Kilo Code</vendor>
+
+    <!-- Description of the plugin displayed on the Plugin Page and IDE Plugin Manager.
+         Simple HTML elements (text formatting, paragraphs, and lists) can be added inside of <![CDATA[ ]]> tag.
+         Guidelines: https://plugins.jetbrains.com/docs/marketplace/plugin-overview-page.html#plugin-description -->
+    <description><![CDATA[
+        <h1>Kilo Code AI Agent</h1>
+        <p>Open Source AI coding assistant for planning, building, and fixing code.</p>
+   ]]></description>
+   
+   <!-- Change notes for the plugin -->
+   <change-notes><![CDATA[
+        <h3>Version 4.88.0</h3>
+        <ul>
+            <li>Rename Inline Assist to Kilo Code Autocomplete</li>
+            <li>Show a warning when trying to paste an image when the current model does not support images</li>
+            <li>Prevent writing to files outside the workspace by default</li>
+            <li>Fix Kilo Code Marketplace header missing background color</li>
+            <li>Kilo Code now shows an error message when a model reaches its maximum ouput</li>
+            <li>Fixed 500 error with Chutes when no custom temperature is specified.</li>
+            <li>Remove the Inline Assist experiment, enabling it by default</li>
+        </ul>
+    ]]></change-notes>
+
+    <!-- Product and plugin compatibility requirements.
+         Read more: https://plugins.jetbrains.com/docs/intellij/plugin-compatibility.html -->
+    <depends>com.intellij.modules.platform</depends>
+    <depends>org.jetbrains.plugins.terminal</depends>
+    
+    <!-- Extension points defined by the plugin.
+         Read more: https://plugins.jetbrains.com/docs/intellij/plugin-extension-points.html -->
+    <extensions defaultExtensionNs="com.intellij">
+        <projectService serviceImplementation="ai.kilocode.jetbrains.plugin.WecoderPluginService"/>
+        <jbProtocolCommand implementation="ai.kilocode.jetbrains.commands.KiloCodeAuthProtocolCommand" />
+        <postStartupActivity implementation="ai.kilocode.jetbrains.plugin.WecoderPlugin"/>
+        <editorFactoryListener implementation="ai.kilocode.jetbrains.editor.EditorListener"/>
+        <toolWindow factoryClass="ai.kilocode.jetbrains.ui.RooToolWindowFactory"
+                    id="Kilo Code"
+                    secondary="true"
+                    icon="/icons/kilo-dark.svg"
+                    anchor="right" />
+        <notificationGroup
+                    id="kilocode"
+                    displayType="BALLOON"
+        />
+    </extensions>
+
+    <extensions defaultExtensionNs="org.jetbrains.plugins.terminal">
+        <localTerminalCustomizer implementation="ai.kilocode.jetbrains.terminal.WeCoderTerminalCustomizer"/>
+    </extensions>
+
+    <actions>
+        <action id="kilocode.plusButtonClicked"
+                icon="AllIcons.General.Add"
+                class="ai.kilocode.jetbrains.actions.PlusButtonClickAction"
+                text="New Task"
+                description="New task">
+            <override-text place="GoToAction" text="New Task" />
+        </action>
+
+        <action id="kilocode.mcpButtonClicked"
+                icon="AllIcons.Webreferences.Server"
+                class="ai.kilocode.jetbrains.actions.MCPButtonClickAction"
+                text="MCP Server"
+                description="MCP server">
+            <override-text place="GoToAction" text="MCP Server" />
+        </action>
+
+        <action id="kilocode.historyButtonClicked"
+                icon="AllIcons.Vcs.History"
+                class="ai.kilocode.jetbrains.actions.HistoryButtonClickAction"
+                text="History"
+                description="History">
+            <override-text place="GoToAction" text="History" />
+        </action>
+
+        <action id="kilocode.profileButtonClicked"
+                icon="AllIcons.General.User"
+                class="ai.kilocode.jetbrains.actions.ProfileButtonClickAction"
+                text="Profile"
+                description="Profile">
+            <override-text place="GoToAction" text="Profile" />
+        </action>
+
+        <action id="kilocode.settingsButtonClicked"
+                icon="AllIcons.General.Settings"
+                class="ai.kilocode.jetbrains.actions.SettingsButtonClickAction"
+                text="Settings"
+                description="Setting">
+            <override-text place="GoToAction" text="Setting" />
+        </action>
+
+        <group id="WecoderToolbarGroup">
+            <reference ref="kilocode.plusButtonClicked" />
+            <reference ref="kilocode.mcpButtonClicked" />
+            <reference ref="kilocode.historyButtonClicked" />
+            <reference ref="kilocode.profileButtonClicked" />
+            <reference ref="kilocode.settingsButtonClicked" />
+        </group>
+
+        <group id="kilocode.RightClickMenu" text="Kilo Code" description="kilocode main menu"  icon="/icons/kilo-dark-small.svg" popup="true">
+            <group id="kilocode.RightClick.Chat" class="ai.kilocode.jetbrains.actions.RightClickChatActionGroup"
+                   text="Chat" description="kilocode chat tool"/>
+            <add-to-group group-id="EditorPopupMenu" anchor="first"/>
+        </group>
+    </actions>
+</idea-plugin>
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/resources/META-INF/pluginIcon.svg b/jetbrains/plugin/src/main/resources/META-INF/pluginIcon.svg
new file mode 100644
index 000000000..069f60376
--- /dev/null
+++ b/jetbrains/plugin/src/main/resources/META-INF/pluginIcon.svg
@@ -0,0 +1,52 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<svg
+   width="201"
+   height="201"
+   viewBox="0 0 201 201"
+   fill="none"
+   version="1.1"
+   id="svg1"
+   sodipodi:docname="Logo_Outline_-_Black2.svg"
+   inkscape:version="1.4.2 (ebf0e940d0, 2025-05-08)"
+   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
+   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
+   xmlns="http://www.w3.org/2000/svg"
+   xmlns:svg="http://www.w3.org/2000/svg">
+  <defs
+     id="defs1" />
+  <sodipodi:namedview
+     id="namedview1"
+     pagecolor="#ffffff"
+     bordercolor="#000000"
+     borderopacity="0.25"
+     inkscape:showpageshadow="2"
+     inkscape:pageopacity="0.0"
+     inkscape:pagecheckerboard="0"
+     inkscape:deskcolor="#d1d1d1"
+     inkscape:zoom="2.0696517"
+     inkscape:cx="12.5625"
+     inkscape:cy="118.3774"
+     inkscape:window-width="1920"
+     inkscape:window-height="1011"
+     inkscape:window-x="0"
+     inkscape:window-y="0"
+     inkscape:window-maximized="1"
+     inkscape:current-layer="svg1" />
+  <g
+     inkscape:groupmode="layer"
+     id="layer1"
+     inkscape:label="bg">
+    <rect
+       style="fill:#ffffff"
+       id="rect1"
+       width="200.20981"
+       height="199.86815"
+       x="0"
+       y="0" />
+  </g>
+  <path
+     d="M 0.276367,0.210815 V 200.97972 H 201.04472 V 0.210815 Z M 186.17379,186.10778 H 15.148143 V 15.082543 H 186.17379 Z m -63.20501,-44.61483 h 18.58917 v 14.87094 h -23.36948 l -10.09164,-10.09063 v -23.37048 h 14.87195 z m 33.46112,0 h -14.87195 v -18.59017 h -18.58917 v -14.87195 h 23.36948 l 10.09164,10.09164 z M 93.22479,122.90278 H 78.353048 V 108.03083 H 93.22479 Z M 44.891627,108.03083 H 59.76337 v 33.46212 h 33.461521 v 14.87094 H 54.983167 L 44.891627,146.27326 Z M 156.4299,78.287549 V 93.159392 H 108.09683 V 78.287549 h 16.61964 V 59.69787 H 108.09683 V 44.826127 h 21.39994 l 10.09164,10.09144 V 78.287448 Z M 59.76337,61.556787 H 78.353048 L 93.22479,76.42853 V 93.15919 H 78.353048 V 76.42853 H 59.76337 V 93.15919 H 44.891627 V 44.826027 H 59.76337 Z m 33.46142,0 H 78.353048 V 44.826127 H 93.22479 Z"
+     fill="#000000"
+     id="path1"
+     style="stroke-width:1.00385" />
+</svg>
diff --git a/jetbrains/plugin/src/main/resources/META-INF/pluginIcon_dark.svg b/jetbrains/plugin/src/main/resources/META-INF/pluginIcon_dark.svg
new file mode 100644
index 000000000..069f60376
--- /dev/null
+++ b/jetbrains/plugin/src/main/resources/META-INF/pluginIcon_dark.svg
@@ -0,0 +1,52 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<svg
+   width="201"
+   height="201"
+   viewBox="0 0 201 201"
+   fill="none"
+   version="1.1"
+   id="svg1"
+   sodipodi:docname="Logo_Outline_-_Black2.svg"
+   inkscape:version="1.4.2 (ebf0e940d0, 2025-05-08)"
+   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
+   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
+   xmlns="http://www.w3.org/2000/svg"
+   xmlns:svg="http://www.w3.org/2000/svg">
+  <defs
+     id="defs1" />
+  <sodipodi:namedview
+     id="namedview1"
+     pagecolor="#ffffff"
+     bordercolor="#000000"
+     borderopacity="0.25"
+     inkscape:showpageshadow="2"
+     inkscape:pageopacity="0.0"
+     inkscape:pagecheckerboard="0"
+     inkscape:deskcolor="#d1d1d1"
+     inkscape:zoom="2.0696517"
+     inkscape:cx="12.5625"
+     inkscape:cy="118.3774"
+     inkscape:window-width="1920"
+     inkscape:window-height="1011"
+     inkscape:window-x="0"
+     inkscape:window-y="0"
+     inkscape:window-maximized="1"
+     inkscape:current-layer="svg1" />
+  <g
+     inkscape:groupmode="layer"
+     id="layer1"
+     inkscape:label="bg">
+    <rect
+       style="fill:#ffffff"
+       id="rect1"
+       width="200.20981"
+       height="199.86815"
+       x="0"
+       y="0" />
+  </g>
+  <path
+     d="M 0.276367,0.210815 V 200.97972 H 201.04472 V 0.210815 Z M 186.17379,186.10778 H 15.148143 V 15.082543 H 186.17379 Z m -63.20501,-44.61483 h 18.58917 v 14.87094 h -23.36948 l -10.09164,-10.09063 v -23.37048 h 14.87195 z m 33.46112,0 h -14.87195 v -18.59017 h -18.58917 v -14.87195 h 23.36948 l 10.09164,10.09164 z M 93.22479,122.90278 H 78.353048 V 108.03083 H 93.22479 Z M 44.891627,108.03083 H 59.76337 v 33.46212 h 33.461521 v 14.87094 H 54.983167 L 44.891627,146.27326 Z M 156.4299,78.287549 V 93.159392 H 108.09683 V 78.287549 h 16.61964 V 59.69787 H 108.09683 V 44.826127 h 21.39994 l 10.09164,10.09144 V 78.287448 Z M 59.76337,61.556787 H 78.353048 L 93.22479,76.42853 V 93.15919 H 78.353048 V 76.42853 H 59.76337 V 93.15919 H 44.891627 V 44.826027 H 59.76337 Z m 33.46142,0 H 78.353048 V 44.826127 H 93.22479 Z"
+     fill="#000000"
+     id="path1"
+     style="stroke-width:1.00385" />
+</svg>
diff --git a/jetbrains/plugin/src/main/resources/icons/kilo-dark-small.svg b/jetbrains/plugin/src/main/resources/icons/kilo-dark-small.svg
new file mode 100644
index 000000000..59f2abee0
--- /dev/null
+++ b/jetbrains/plugin/src/main/resources/icons/kilo-dark-small.svg
@@ -0,0 +1,43 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<svg
+   id="Kilo_Code_Branding"
+   width="13px" 
+   height="13px"
+   version="1.1"
+   viewBox="0 0 39.9997627 39.9999944"
+   sodipodi:docname="kilo-dark.svg"
+   inkscape:version="1.4.2 (ebf0e940d0, 2025-05-08)"
+   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
+   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
+   xmlns="http://www.w3.org/2000/svg"
+   xmlns:svg="http://www.w3.org/2000/svg">
+  <defs
+     id="defs1" />
+  <sodipodi:namedview
+     id="namedview1"
+     pagecolor="#ffffff"
+     bordercolor="#000000"
+     borderopacity="0.25"
+     inkscape:showpageshadow="2"
+     inkscape:pageopacity="0.0"
+     inkscape:pagecheckerboard="0"
+     inkscape:deskcolor="#d1d1d1"
+     inkscape:zoom="20.000002"
+     inkscape:cx="19.999998"
+     inkscape:cy="21.349998"
+     inkscape:window-width="1920"
+     inkscape:window-height="1011"
+     inkscape:window-x="0"
+     inkscape:window-y="0"
+     inkscape:window-maximized="1"
+     inkscape:current-layer="Kilo_Code_Branding" />
+  <g
+     transform="matrix(0.99875,0,0,0.99875,0,1.1129999e-6)"
+     transform-origin="center"
+     id="g1">
+    <path
+       fill="#c5c5c5"
+       d="m 27.999832,34.666692 h 6.666628 v 5.333302 H 26.285557 L 22.66653,36.380968 v -8.380904 h 5.333302 z m 11.999931,-8.380904 -3.619027,-3.619026 h -8.380904 v 5.333302 h 6.666628 v 6.666628 h 5.333303 z m -22.66653,-3.61903 H 11.99993 v 5.333302 h 5.333303 z M 0,36.380964 3.6190266,39.99999 H 17.333233 V 34.666688 H 5.3333023 V 22.666758 H 0 Z M 33.960096,11.999925 V 3.619021 L 30.341069,-5.6e-6 H 22.66653 v 5.3333023 h 5.960264 V 11.999925 H 22.66653 v 5.333302 H 39.999763 V 11.999925 Z M 5.3333023,0 H 0 V 17.333233 H 5.3333023 V 11.333267 H 11.99993 v 5.999966 h 5.333302 V 11.333267 L 11.99993,5.9999652 H 5.3333023 Z M 17.333233,0 H 11.99993 v 5.9999651 h 5.333303 z"
+       id="path1" />
+  </g>
+</svg>
diff --git a/jetbrains/plugin/src/main/resources/icons/kilo-dark.png b/jetbrains/plugin/src/main/resources/icons/kilo-dark.png
new file mode 100644
index 0000000000000000000000000000000000000000..5fae47f9884e621371629034c9aee06402a6df1d
GIT binary patch
literal 1485
zcmc&!`%hDM6hHUdc9fRFEuw(DDkv)tA;?4!gbM)+4uRF0A&Arg#=(YFj69rjYeacu
z$YkRY6mMWaea=MYrlMX21a&|sAdkV2pp+uW!|;$fy2~Hn60#q5lJh<%IVYc-lM@jp
z5%5;?06-8D94H0A7!w07i&05eB4tZnic}JS^*naYWE_1(@U9eqb)8F$&GmXREl?W~
zDhtwmfSCLTGXH<LHKuNXna}62G;D|NQFg`e#cf&OS+>ULG2VB3yF0Q@OwBoTkZ)66
ziYZ!)Y^4`{(`57UlDTiYGWK2mP197%QnBCN%zxG8onQyRP7De3m!+K>@86ze;%|~Q
zm>k!kQn^tU!VYn;`iJbrOm>Von<o^;h>w$>3H>U!Zm`h5)!F{bCHskv7O$sIu8!8P
zKzpn0wRet{m%9)WIE-yZ6kjcb7&0G5&|x-VO4-3}u)@@w5ia>3N`}x#i*_+Qqv^r@
z=c5m+z3My_>X+AJ>tow;`7f>uCb!%jQVAwIEqy%%lx~AhL17W>vsIhW&g@=Pq9o#A
zh7-k7xu`9Pua&dl$p3^J@i`SlUP9YZhspjGR0UB9Gwdji%3keEq^fjd=HXQ_<eTP?
zyV7jYqye9RVIc~hz)3y1*UsUxTdR#kr7KhRz+0sF#_n!hqy14$`e+}^V7McCuBiV@
zb1Ii;hmGvsk5nSHCvl5-4UMRU^*yiFC_;<_6)Hl+cLbL-R+>TobXnhdf0*V}Ks^5>
z*1R&CRp5YgMd2c2qKFWamdZ#lM-SjVN-<O{NHUt9=_SoH9Btd7v6c_qcNLLQpphnI
zyp;@JNuQmaa&6B#a$&sW{EgJpg*^*evsI)f9^=wJ0id-)IQg?9U?ug8Q4_kEk#Uhw
zUdR!_TQ2rvDwlxgi8sLXD^jDiy6i!_r_3K(PnzZrZa#2iqvf(NEFUz#@0_f8GI7x^
z@9*0~^!d`7O<TuyTTMCY8W(eh8mw}#2ocT}#fo^uO~Q=at@MOaq=ad<Ef%kT5;Y66
zIR$HQ1KJfA(CcwS+6gzJ9dMkAJ~n2S&sC2Fg?KNGpJvSL=H?SeCJhg~>&{3pjNNo5
z*00d_czxZTE#YvjyX%!vw=PD0wrYLSPCyDD8RYN6m_->lC(pUzOn1~u5}tXpMey$h
z!z}rTUubvF!hV-Oz=?HFGd|JGk`(h`QTEr4sHC~PJ6zh`888#S1IAb_Pf?jEdryzA
z1(&<C*0o*G-?F%OYQ>$k^wpX_V=vBHQfG<LqLOI&1UAZD`_toe4v>yWd-OyYhNx3C
z9Tai_P=vpHq+0bUiHS|k>KtDSNyz1#n&5e}#iUf}P+Zl-mqQk6PtH5D>IFPuSMMpd
zaROwbAF8XPgE3<&P~M<t|45$#4vO=2+pvw~j3f^{?fdn**BAT8U-oMSZ{j`XFKlx?
lSZlE?aF=)Ht@rfi^~^g5Y<$-pdB}V(2nh-cycQro@eljhrMCb8

literal 0
HcmV?d00001

diff --git a/jetbrains/plugin/src/main/resources/icons/kilo-dark.svg b/jetbrains/plugin/src/main/resources/icons/kilo-dark.svg
new file mode 100644
index 000000000..ee3ab4f49
--- /dev/null
+++ b/jetbrains/plugin/src/main/resources/icons/kilo-dark.svg
@@ -0,0 +1,41 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<svg
+   id="Kilo_Code_Branding"
+   version="1.1"
+   viewBox="0 0 39.9997627 39.9999944"
+   sodipodi:docname="kilo-dark.svg"
+   inkscape:version="1.4.2 (ebf0e940d0, 2025-05-08)"
+   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
+   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
+   xmlns="http://www.w3.org/2000/svg"
+   xmlns:svg="http://www.w3.org/2000/svg">
+  <defs
+     id="defs1" />
+  <sodipodi:namedview
+     id="namedview1"
+     pagecolor="#ffffff"
+     bordercolor="#000000"
+     borderopacity="0.25"
+     inkscape:showpageshadow="2"
+     inkscape:pageopacity="0.0"
+     inkscape:pagecheckerboard="0"
+     inkscape:deskcolor="#d1d1d1"
+     inkscape:zoom="20.000002"
+     inkscape:cx="19.999998"
+     inkscape:cy="21.349998"
+     inkscape:window-width="1920"
+     inkscape:window-height="1011"
+     inkscape:window-x="0"
+     inkscape:window-y="0"
+     inkscape:window-maximized="1"
+     inkscape:current-layer="Kilo_Code_Branding" />
+  <g
+     transform="matrix(0.99875,0,0,0.99875,0,1.1129999e-6)"
+     transform-origin="center"
+     id="g1">
+    <path
+       fill="#c5c5c5"
+       d="m 27.999832,34.666692 h 6.666628 v 5.333302 H 26.285557 L 22.66653,36.380968 v -8.380904 h 5.333302 z m 11.999931,-8.380904 -3.619027,-3.619026 h -8.380904 v 5.333302 h 6.666628 v 6.666628 h 5.333303 z m -22.66653,-3.61903 H 11.99993 v 5.333302 h 5.333303 z M 0,36.380964 3.6190266,39.99999 H 17.333233 V 34.666688 H 5.3333023 V 22.666758 H 0 Z M 33.960096,11.999925 V 3.619021 L 30.341069,-5.6e-6 H 22.66653 v 5.3333023 h 5.960264 V 11.999925 H 22.66653 v 5.333302 H 39.999763 V 11.999925 Z M 5.3333023,0 H 0 V 17.333233 H 5.3333023 V 11.333267 H 11.99993 v 5.999966 h 5.333302 V 11.333267 L 11.99993,5.9999652 H 5.3333023 Z M 17.333233,0 H 11.99993 v 5.9999651 h 5.333303 z"
+       id="path1" />
+  </g>
+</svg>
diff --git a/jetbrains/plugin/src/main/resources/icons/kilo-light.svg b/jetbrains/plugin/src/main/resources/icons/kilo-light.svg
new file mode 100644
index 000000000..31f2b31dd
--- /dev/null
+++ b/jetbrains/plugin/src/main/resources/icons/kilo-light.svg
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<svg id="Kilo_Code_Branding" xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 39.9997627 39.9999944">
+  <g transform="scale(0.8)" transform-origin="center">
+    <path fill="#424242" d="M27.9998324,34.6666921h6.6666279v5.3333023h-8.3809037l-3.6190266-3.6190266v-8.3809037h5.3333023v6.6666279ZM39.9997627,26.2857884l-3.6190266-3.6190266h-8.3809037v5.3333023h6.6666279v6.6666279h5.3333023v-8.3809037ZM17.3332326,22.6667578h-5.3333023v5.3333023h5.3333023v-5.3333023ZM0,36.3809638l3.6190266,3.6190266h13.714206v-5.3333023H5.3333023v-11.9999302H0v13.714206ZM33.9600959,11.9999247V3.619021L30.3410693-.0000056h-7.6745392v5.3333023h5.9602634v6.6666279h-5.9602634v5.3333023h17.3332326v-5.3333023h-6.0396668ZM5.3333023,0H0v17.3332326h5.3333023v-5.9999651h6.6666279v5.9999651h5.3333023v-5.9999651l-5.3333023-5.3333023h-6.6666279V0ZM17.3332326,0h-5.3333023v5.9999651h5.3333023V0Z" />
+  </g>
+</svg>
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/resources/icons/kilo.png b/jetbrains/plugin/src/main/resources/icons/kilo.png
new file mode 100644
index 0000000000000000000000000000000000000000..70170248276b4d65c9a7f75bf0233d35d248c300
GIT binary patch
literal 1883
zcmc&#Yfw{16yAHe@(3Wgpa={?i5HN9fH-I{0i+FuU<Ds7M8z0Df({@NEUyS$N*NN7
zL84*=ERNP0I=s?CPzTZmI#wc&jO`EsC8Rbyd_XW*A_AdN`=j`;{OOO~vuD3O&)svD
zzc(_>lHfo909ew)Y5M_y3`+=@8XHJ#dL7$9%sAl(GXQYyc{?D7uw!pG?N5g?P9I2P
zpU#R)PXt+6S>7j3CTAqXaT2}L(vzyEsSW@bPts{2Uu4%zjRe=JW9;w!q1pN)A-<Bq
zXs8!Od#tlr#*4)s80+%=$j+U%Zr}M6L&`4kX(GOt7eUZ<-fw$|%btc2kw=5Azj4TZ
zHAC%P@6yhlPzGd-FDfSrPmIp?b0&Uqw9S7ccm-VZj?KYRDh!Ivz&bauR|s~+{g2Gt
zgCX;p&Sbit%$mN5joSO_B9-A<Eq-Uig);@x$5>8~>`@WB_Sa2xr>bnd+h2E?Q95Od
zCPvWg{5r40cQP;5{`Tx8l%knYdb`d4jxJiB93LY{{c<&F?(=Lxuw0qwiQqSR(tI<}
zgBC8Kpb~=@T!7bZq(2HUs!VIjfryHdDG<wsrb<EZK4RgB8K@?~?I_qDhD1hzK@25t
zgjg*!l@h`CQ25eKbp1~5<pd0*Ff~iH^d`CTPrDD3+4kf>;gt#VMsZXb^_ouqrh9%d
z7-DVkDGRzL&OEAFl02B035o%mdwuXn`bzaZ6RM_BF>GbhyYY?9)l?L>k?3v-sHeKO
z9ZoKHpMUBi|7LlN;JZ(=ltj<><yt+n#$`183ZgRQffiF~1rcHs@l7Pyu?jfaqpI@;
zfDcMYAS?nQBM>>BBs~su)HJ*TVL|R__L(`Slycy8U8hf>;ej@IF%K-bfl?HjqXSzE
zeo+d%B9K87h#@rPFkulHRZ$U^5e;v##><FMf7hoWQLT!g3U#NEQ%;L6KcUu$tC6=U
zys;d1ZN`u{bbG3l&ZMYvevZ&epp52FKz4l>E66<MFQXL6CyU1QF0$$(_NZ2jSy=@o
zG$Z&C>Hyby$<@K&)a-+#R>imd@epSX-h}{y4cPoSxaJG}cSf|{neb*;^3<%+IMcy*
z_T;qls~~SHVNOrd;p9}+;y|D;xA2Jg9M@tSM;!~T%ESt{4ED_Rv4UC);lf_QsHKqW
z{!l;-U`>x<&1;2}-!9}V&ytOgMrz{)<$X*wG1@{JoU3`L3v3n7J<XGMloVLzI(r6<
zFOBo$PtG;nQYh)#1<bit(tErK%s>)djNlAKR>0QyRRL*9oizmElsckeZXe7=5HKCr
zgAxI`xbd@HKy|Ur&H!vo*#g6WGQ8ga_p?0T!Z)_i46tK#IS!-&jgE#xfn>hahpqX+
z6T+8Xngd43zk9;qS*tZ8XVY30`Gz>$O?o@VzQ=Z$^h*3DTW()SGSr#VOvepZFiXwW
z9+C~9M{5+r=JcQ1HFvUJKF469;okSG?(SA3b|tgyKbTrT*A5Kre$jao^XX&8hXqGy
z7a=+Kx;QgY`dDru47dntCMC-h+4B}1xmhthnxqlcD;LVJ9c#a0CQqdcnjN2YB#aY2
z=!1=RxQ|#dT`i&QvywCMr9)f6XoR*}QB}}I?Wk`Qhb8%R>Kp8EEXPY$O5$)f2o|G}
zwuAwIk$g){Q@Za%;WU;lI>;L^I?t1Okwnm8(_JLEg(rQ|W{uMjHd<Jm>H+wsy(GAF
z_z<v0g`tRT>)rSAUhMk!@{I1vf8=?MCLf`N2Wc#5J^W51NBwc0i_`A(g5;^Pp;C*?
zQ**F0$3-Sq3}?`lS0%lCc^^~7XvOm8tfh`$HW}Utan<FsGV80TzZD8Z%Wz`F>%8FO
S%_WA95zs>;X-%K7zWy7iHoipw

literal 0
HcmV?d00001

diff --git a/jetbrains/plugin/src/main/resources/icons/logo-outline-black-small.svg b/jetbrains/plugin/src/main/resources/icons/logo-outline-black-small.svg
new file mode 100644
index 000000000..2f8fdbac8
--- /dev/null
+++ b/jetbrains/plugin/src/main/resources/icons/logo-outline-black-small.svg
@@ -0,0 +1,52 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<svg
+   width="13px" 
+   height="13px"
+   viewBox="0 0 201 201"
+   fill="none"
+   version="1.1"
+   id="svg1"
+   sodipodi:docname="Logo_Outline_-_Black2.svg"
+   inkscape:version="1.4.2 (ebf0e940d0, 2025-05-08)"
+   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
+   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
+   xmlns="http://www.w3.org/2000/svg"
+   xmlns:svg="http://www.w3.org/2000/svg">
+  <defs
+     id="defs1" />
+  <sodipodi:namedview
+     id="namedview1"
+     pagecolor="#ffffff"
+     bordercolor="#000000"
+     borderopacity="0.25"
+     inkscape:showpageshadow="2"
+     inkscape:pageopacity="0.0"
+     inkscape:pagecheckerboard="0"
+     inkscape:deskcolor="#d1d1d1"
+     inkscape:zoom="2.0696517"
+     inkscape:cx="12.5625"
+     inkscape:cy="118.3774"
+     inkscape:window-width="1920"
+     inkscape:window-height="1011"
+     inkscape:window-x="0"
+     inkscape:window-y="0"
+     inkscape:window-maximized="1"
+     inkscape:current-layer="svg1" />
+  <g
+     inkscape:groupmode="layer"
+     id="layer1"
+     inkscape:label="bg">
+    <rect
+       style="fill:#ffffff"
+       id="rect1"
+       width="200.20981"
+       height="199.86815"
+       x="0"
+       y="0" />
+  </g>
+  <path
+     d="M 0.276367,0.210815 V 200.97972 H 201.04472 V 0.210815 Z M 186.17379,186.10778 H 15.148143 V 15.082543 H 186.17379 Z m -63.20501,-44.61483 h 18.58917 v 14.87094 h -23.36948 l -10.09164,-10.09063 v -23.37048 h 14.87195 z m 33.46112,0 h -14.87195 v -18.59017 h -18.58917 v -14.87195 h 23.36948 l 10.09164,10.09164 z M 93.22479,122.90278 H 78.353048 V 108.03083 H 93.22479 Z M 44.891627,108.03083 H 59.76337 v 33.46212 h 33.461521 v 14.87094 H 54.983167 L 44.891627,146.27326 Z M 156.4299,78.287549 V 93.159392 H 108.09683 V 78.287549 h 16.61964 V 59.69787 H 108.09683 V 44.826127 h 21.39994 l 10.09164,10.09144 V 78.287448 Z M 59.76337,61.556787 H 78.353048 L 93.22479,76.42853 V 93.15919 H 78.353048 V 76.42853 H 59.76337 V 93.15919 H 44.891627 V 44.826027 H 59.76337 Z m 33.46142,0 H 78.353048 V 44.826127 H 93.22479 Z"
+     fill="#000000"
+     id="path1"
+     style="stroke-width:1.00385" />
+</svg>
diff --git a/jetbrains/plugin/src/main/resources/icons/logo-outline-black.gif b/jetbrains/plugin/src/main/resources/icons/logo-outline-black.gif
new file mode 100644
index 0000000000000000000000000000000000000000..62bbaa9449526bb89e199223cc020f68b1c93420
GIT binary patch
literal 537752
zcmc$_Wn3J=)~`FbyAvP;clQ862A2>Vf;+)of($MJLU4C?cNyFzcyM=jpF{S$_q+Ew
z_rCYzx&5WPYt~v-HNAeTYNr2>l#C=Fzaan?09%UzD9q0f2@H~xmYM!NwYIwU`tovh
zb@ll0(B9VO<lqn=8=IA$addD<Mg9TukK+RbMNvXkMO;)#f`f$(1_}TGyftYmD3JpV
zoekg4f}h;&4UMf#oym<%%`I((D9&0tDab8NgeWw)71$K)#Z4_Nr9B-@RXi0{jXkZ5
z`AsN336l%D3%J|Z+n72VlDpej+d2uj3sD%F*cq7$yj}loW~Ctihl#V55QXU956J)a
zDQ@RzO3uT=#%#>S#zW4_&%(~b#lywNM9#s+!OqIY&dScg%+4*q%^|?SPyWw?;;lDF
z6Egv2pyWUMdb<;%uyA&^7hq*|b8};H<7BaOG-qY!=jUf-<6!0BV1Bb;cJi=wHgspU
zb)x)N1fZ#tv7@EEv!$Ia`QM0!Ms_aFLKJT!{jVw5*#CD}TPK!(OozqT&W6?9(4Li@
zh3)T@{$;43@c(UUWAoqEPR`1v{~quEYhWi;4|`KqWm6|R7e`~$H*?CrUD*qWJDM6g
z+c~P**;)VVTU4^JbGCD`u(K!U;9%h(r_->sHL-JZqW_13f`WjIt&_8%t+A;LP>A9!
z1dFAmi2#>4pO^#>2Pd1D7&kk+BpV->7?6)s^lzg$n<T&ZzkGpq#x6Fdw$A_ZHTkzM
z*Z=7IHy3Q|-+Bg`I$FA#nn*g@*^vKZ&H|SI^H|vb$9VtrHTj>%!tp=)vc3(5_3xAY
zk0<@FrnmI@d->ma`*!o+nQv<QmhO&kc?|`5eR+O*e7L{6y}7=+yf{BQJvlx)JlNmc
z-PzvS+*n^*U0GgQ{If7WH#;*u^?Pz+d~9@NcxZ5-zpuBay9?ae(caeD(%jV8P+wPD
zQ(aYAQC?PBQe0G6ke`>Elbw~Bk)D>ClAM&75FZyC^DFviRAj`D@UYO3;Gn<&e?O3~
zkGI!%PY-uDR~Kg|M+bX5TN`VuZ<ZG3W~L^_MurCZdb&DawY4-g)YVi~l)or_R#cFe
zla-N{l9T|7i;0SS5*8BtD8SFh%frpZ$-&OX%EHXV$Usj=OG8aXN%4XFJsBy<J7OY2
z0(?AN9BeF140JS96l5es1b8@D80fd^@ZkX#4hDb$V0tSQfWI{d01K%ak|}NHI~r?+
z7|=zTSY}w1R9GK%*fUKy+pM`)oOzu=z*+XvOvFD2^Bjk)1u`d#oMp?kD;LUKM@~FD
z*Q?y+SyCtV>paJ7Ti4E;yc8>!&hFcMCeEH9AV2?rz@Xre(6I0y5s^_pqkqN3#>FQj
zCMBn&rln_OW@YE(=H(X@78RG2mX%jjR#n&3*3~yOHZ`}jwzYS3g1fqVdi(kZ28V`6
zM#sh{CVx*&&&<xvFZ@|tT3%UQTi@8++TPjS+dnuwIzBl)JHNQRy1u!+yMK6mdVYC@
z0AP?wq^q*J0uXT+bOx)kdqOZNWz(dqbNYS|a(-JLtj-<yNe&SYCy}Yi8;Ye<DbX3K
z$sb8%GagQpsVx{w<#Re*9;z*z$P@`cCY7x#`kgBs%b+`4S3F&)lq;JqTVFC;s#*JO
zWw^d{zS5v4oK&u%>`$%5bcyarL-|sp{nl{0Tw}#btNYdA%1C47S|<nwg-pJwYNIC<
zhf!~|sd{T5no=%9zPV;+B#F~%b+oy5Zz4<l2bn@k-NAH`N~zvhOa0M&mGMZ1LTkgx
zQj^os>R4;z*%~+i<-KBC)5X?cETjH-Tl3Z4WUgGMVtdQY(ZUW50NmbscedX1<NfE3
zwuh_z=~DfPj`pX!^R1E0&z&7FPxn_xYZINF5C{Ms(EtLy3|I&IA<`7B`=j#guLodC
z(rpCds#|OX5t<ck1e3V#Z-kHs(`|-QC0J~R(G?VJhBH+liuf`2(``j?%~@<k^6eIF
zMG4;SZ~YV@yWix2hqv7RB~4Sj9V5?kupO%;%%8_2A!)f2uW44ilc3{zu#+g(jkud+
zl3=-;Y*A2b7NcUOvXf%pPrsMuJZHI=U}JQ(o9=acu$KvfXV?$$(5v0c3Z*I8&xzn6
zHp!kNIo!{SQ~!35pTvP^$sJ>Mcu<%X%)pSGsyuyAR8&xMSW-5pdB|1Rz;IMnH}}md
zpi&m+sJ!j=@Tf9&mw2oKjBj;ZJy<}`#MMi4bPTDTlpHBYno_qqsb5%ZI_4ZRJ347x
z50;~=-%PMNZQigwl5gB^I67^uD_KHqJ)g5WYfl^=L2bXkJv!_3Ic!Dk1Q1xCcbOuW
zp>`qi9-sFpGNhsQU}{)j^zq9^p!N~E9bXJkfAc~eAWyWu9KsE^MjfJSJa!ymAn3Uq
z;hOhy80{Ukz8V)Kh`3@CxMRAWJbPu5p9IpDUpGo31YA!kNxfK4g9VvyW;O3*Z&=mM
zPj2Q*ZBOLp4H9i!3yki>ZvR*}wp%Q=m7Ux!JKrJQu{h3`->q7$mdmYrA+X#h`s_j9
zuZPl-nQk<ZRNQYxzaP41j*_x{*ddDj@c`LPGv{w+j(1~u+^6)>liSZLtndsjnD&1>
ztQrtz`BgJ-`#qw3;_~sNtu&*Rsr8P<Yp-(v`}utEtDYd!0PUIA=1Aw%^VQ51X*=Vz
zM&--$d}GYZ?Rx5p5aU{iozL7>rSj{;v3Pn1!%-tEWb&*K8}fX=r1Od4Ztv{VXv$M2
z;6r1l%C#K`u~!pH!2t{_aBhggBmwhYS~Nf+8W*Q53;xNa>x+qf0C}JWg2Y7^X3Dt^
zC8`9{=Rq<1d`w(M>ul7@o9@rO_Q8CC>S#g^JtU9knjepW7{1a#eYjsZ;!HW%RxZ5?
zR1RTECTcj`7rk`a4yr1nK)lL9iO&#IES#^$IfRTieR6>g5f&z@M9dETTrCbtR%O6<
zYtjQCxT+|3`FYZ-K`HCLU)WB^x#aQn1ERznTE1yOa*QEqR%&JJAJ%zPLK=fI+8lcE
zZFw|32}25=%BnvjfK;DkWXXfDv2&U78Qh$QrScr(t7g<`jb%oF^;1}tW%(>>&LfiB
zj)`E@KTH8K@&Y$8Se;A-9Q@9s5>!sflWj_zco(A<+A3nx@<8s&Aq5?@+SK(ts*`RR
zMP={Ww0#q09<1syXFaF%5R1Z(xk#VI2c0rT%FI8UhD{h9#$rAno3laqLqW*SiLiKq
zq8QpEf$&DzsFC^NP*A@^D;yy?zC}e6a$#RSSvcor9$UN@MxIg#kHes1KA`^G5)xP9
z9K$plAg8}Ln6ztHz$KKYZ~>Z5Lw786+b{n7gsA!v(WS_P=^JTO_>2HUJi5Hi;k!(M
zkRn;`NY(fNwMv2hvVOx-os%4m4ZvKLo<o@(U8z=Xs5)<vOSzo2)w@;Xd5Yn9H0Sao
zjI);DwnOd^FSP)Dh(Hgxz_2RNCfo2gXrVX5zS`WP%vc;zi&NUQ=3SXJ5ld+{v_XSs
z3N?&5%C6Rg<WQZG*h!}9$F|8R!@74yHgzT=REsP_4I9qoga+@vT5sGo6s8y2_JEgA
z@IX+53KfotBg?x2cg>TK$WzA&lf^CByOxEq3Rjf#B`OzQ#kHUn`z|FN6ts2ZZxkRv
z85?LC9RPJ6S?RSWxAwSr*Kt2q>2vo(AKL!TW9voCgV9-!G0&}CjZnnhFL0e7QKSn&
zo9zJlI0#Cm2&~4(_Pu<@0HJZ-1NYQFh&IrW!Gf=gq$2?EoZ5!zWY~+%aDl5RAA})Z
z+~e$C6)3g0$qeQb<4AyxEHv1n-QXL*#Mk>-e{PHj$B!(YAoeTW*@Q|e$xUutEcX4i
z2_29hS;ba4-f7eb;aJmSk3=mo^W2m!Fj>Y}@-mq<(Ui&hkEoTaSZe0^E_I*Qcw^}m
z-sy6dAg|$s;(je8=GEGC326~I&@4JT8MIGBCm<6+bCve~Zl3|@DH^LMmY-~INo7hr
zS$)KXCtRMT#ArApM|bl}G4gP>*b})-F}gGsU`0K+C|zfJT>#@|MZZlf+A1kl8GC+2
z4)=9hW7i=?BL0|?=^fIT8QTZv<5tU%l10g;TdbOwT=RLqC7fHHBCsy3!#lraVUD}z
z4dx~zsf`5$BVMd!U0Ba6>D4_J&Wo8BdT$KBHQ@PO6hQdQaC&T23ET*S$^sjRA-W-8
z<lciIJg)ae5D}jMy5A}9!b9ra80p^ZfFI^1c?5|RHHN#(7sY)2@@E8QgzgbL+^fjx
z<n@e}W(-HjYe4!^(Vp;6lHN>mhwMAhzA&3-WVEegO6$<>zCx@gF9~(Yh|Yn?MBKCo
z;D$^(T~hC}z;$<2arIf&u^``5#8ky?7xM~|!h}FdL)2!4+-4UoEzc6`jw>nH8^JLV
zYvrVBGZ{sAr;))69lbK3cfjHz;<IBrf*t+P7U+_{%IgPPrbmd}$*IC%t6#mM=ey7h
ziSo+FEvr+;i8a7ApZiO=5ya)lp+mW$5$e<~>pR{>$LaEuP`<x@z(%WZUy_L1iqZt^
zta;LnPG>a@z-~8$(N}r2(C^Ah=^2+)zt5CMXribS_9&I`$$S2lCU1@Bma*%FGuSsW
z`;#wZtaj{G2IMPN;0x^ceM$6+HfP-6h1rsV*$JW8D@2GaBtHz{0EEIqBbvg}nZgeu
zT_f-ixWf|do4!LdBi;8)(eR_i@t0)tw^sMJb@itsbl2?hmst1rgb(nd2_U1h*E0?P
zf&xMc0>b(OghI&~5IIEnV8x^@ffkmMp+M8xK(WcdoZG-W{2)cHptU_Z6gn6*J{Syl
z3aq3rI!U1V%OG~lU=Frm8s%Uzm*BcR2TwN|uSQ>=5K%{WmwJs5Gsh6Pq!6;Y5Kn)X
z(ndG?eP~-vim*`SKnuEHckj?7Z%G=_pM><k?tNkjedCKl$QOblbAs8x!R%F`R8x>p
zW|y$En6QV&Fn2oNfcr2DX~vv;=sZN20zQhOw@sl1Lm3~af-tm7TC5$Bv9rjpYtYYM
zI--Uzgkdkl6gqU6FM>feqQx<SDk*}dDPndZ!b>_N#3H1%2)db$Vrx)kj*n^K-hYuW
zU>Q;TV36r3Dd40j;LJk&VvzZYFYrb)@NQ82p^4>bKkx-HNYO}pk5CngpB2U<2rfAY
zLI*@?W<`7Wrb%d3m=8dz`bF~R7umxva-tXt{unB)7$gs9Y;(n0KF0ce=*D~Kog_Ng
zO-mepHoPG#f&(k<m_R;`*i!Xa6sOqXgxJwrCgCtE5q@?tOB-OAjo<^llqJMkrkP!i
z$aaO7CZ9Tz<~}YNJN}L*o>C?LWG-&YEG`;8fsr!dNu8!BKmIg{Nsq|Ef}ZmmKkTAQ
zqI+_pJ3oNd5}G}X&SA*eDVfuy*&A5|;F+8hKBR+Skic~i8MF{mNe)0U0BGVQx$`E8
zs3cuA0u;LAv;C8c3zMaKlBH*ozEGyjN~I_or=%$*BSELY=cb$tq^NDBq+2G-iKpI~
zr|JZxrXz8;5rI1RdB7eivYcsznrYvh(kd+hHCk-L^!}qnyyMBKK+be#&2)FC^e%p`
zMUQ~x2j11NG$EV}QND~|m5d3ZRIY#w`J#--o{WWN&U3AxOBw#_2S_@PQ>JKijIme{
zq&ai<A;TOgIhroHLn-+;66-4xEC87X8aW&G(68!&1LF|}OO`KdkdD~{Db6zM=L0uR
zNjBcFcu^P!(IL#cLut|$y7wta1hN4HwK+nQIl9U@OrALzBFQb596ZA?e8bcNp1FdH
zxfvcDqAf7u;k2wJbnJ&f`bT!T5*URNY6*rsDP&|+WDd0y7!3x+aYB#5^;|vAEUL%6
zFzkGM&jQNFfN$Y+)(k+EZ|wTvFoxmOTElr?1&}#C<I$Z8d7}$8Y6{gC3v&z#xWfzV
zTViTB3Z=u@{lCEkexnXXE(i@5by;MK)rN_0;d2n6iyqFOM1ruV%fe(LQzwQOCd(p+
z6Bk8<3uiOX<su`0cw{RSfGK96t|g|cFA+;cW@~1EX(eWFN2co}M)qCI8sI2nS1MDe
zDG69CDLgNkA}Zx}FY}El%eF7A4J+56ERT~dzr`uL+bm-Plpp4m`*fH4XqQ0zD_FBC
z<R~gKWGjjd%I_&ESwt#jjVg=6D<4wwUb`!q*DI$ti^?}EuuUpXjjEVHRnpK^Eeutq
zRb}YN6@>#8-rZICS(Rtd)r{oTF+J5@o7L~-s%|K17({9$#j1P1Rj+PU?R3}Buh;xE
zs&VtLDV)szP+I*3rgnm%wj5BiYg9`Isx8Q?b?vU5ErHbR``6JWXJ(1lO^Mg8Qq<FA
z)qSF<JNQ;#398=6siy|l3vbq6AvaVQ)UAm%P#H7``8T|jG+3e38>7^n_SCs-)@=vW
z&u%tQ0vZJ=8WH3gtJZ7Rp_?eko67PUox2;$zzuUbO&`Eb0%A>AR!vpw<u*SW<pP>1
zOPl+*8pp+&$qky5bF0drn+>0GLBz}jPf$faD6^Joa^9iD93_1U%StNBIs`Yz9yQCV
zwDNv$Z4qzj!)_&GYvmPdld)>61vOPMw#jU@sT{Q)N4NIpw2^|_YVul2yIX1jZ7o0I
z+FHXGj?e+1wzlqelJ)kA%_b*`j(WD-Q33kXRtVI&9OYbV{iGF2rDtbkOeb+wC+AeB
z=~E}bx^YRa9T)(%D+Lp<0dRG?@V&YS)4GV;x=5D0$VR&mCljef06UEFdq+PGenf0a
zhm9SAuPHkn#X1Sd!5=phZV?k%n7A-Wny{^*Sc^lcpW|t*Bk0p28ArngumSvO+HEyG
zKbCs%&U={86UoJTm~(pV7)sYm890u6Odf3IpQ&Nfpx~J(6?K}G<e`*Dp;ejaG}~Hr
zjQT<y`wLV1ajN<mC;Lf_0A9-jKF<Rnl0kpL!9bnCU~7PJ1Qfu2Fk*Qy>Uq#-w4+39
zpvGzd8#J(OK@CL?NLwDtcpl0k8O{-e4Cm<#7cg~G*$<br4VNtsXO4m!#D+$!hR{Gm
z^jQNW{=?nT0O=xbHWFH0l0N-qJMAL$HdLmX<@P%35jxPwyPT0O`_ayr(X-ako;3Tu
zH1sKJU?(bVS6TntZ@WJc=u5{VU(*=YyaqOy9JjpCcb0os+Gq~EhK`OMPpr|;yclQ7
zI_I9F35k9kM^99fOnl>*sMnbgaGTg6pOgnqS{hA`dO?queV9Z=MU9l%i(tTvoRlb>
z+_wK+TQdQ-JR$WQp3a9s&df-m&`<Ref`<l;lm3DA1ciQufw6p$nKY8~1d2WK!^bfc
zZe|JeNSb#i69Pz+N0>8dalgO8Ln2L#dS0a?&$DJ?1!v5aXQ-JYXqhoo(;0ZZq0}vY
zN$SQ)+l=;I&f;Uv@$t_s?Ec=GoGtR7!^@fzADT1Onp^amQ@5efJegu*GP?oHYu3%1
zPR$Fv%-iEHc#h4??9LcN&%)Eso{=wP0T)b+7CygBlT1z%<osz7`IAjCk1H}SZ#i!e
zF~8lmU|a%<LZgXB`xSG7o`uGcBLtOa6JMY(T68jA@)9{g808b$3sS(SeW9;shH4Z_
zXpS6fjhtvFO<t!9(-MmON{Z2UB9S0Olk~EXQ4W=6^I;_tWj>PU4;szV$>K&N)SB*x
z0~?gBNcw>lz)*X_2=n+@J7jVqJ?nRQ*mQej^$Pk~I_u60_1+70<;w(wbn;=P^=T#i
z<t1TOXci@^0}VX_!>0#J_zzB0H(o_|m(7%F!NQ>6x}Ng7p5wYy`npW}25@;p@_9p>
zbhCGCb6&Ie*nQ(m`bLey)}h7Lb?DZw@-4vl*5&@zGvam?^ER^ZX2gq4xy|~C4b+js
zhcAjKP`30JLTd;EzrXCwZQAdc05^4wHg)|sP0BaT#<ok-gFpLhswqOL2!F6+K`~II
z*UFeqj$H7e*_>wD)e+m(G1|59UVE>w{b;cb8@7#DvCUYq+o4bZ_Fm{tU*J65pL|)G
zLfe{Q-lDVFhYs6EFNW;XkMCQq?kRNG+UV^%u|PSnd?-anaUo;!>7WL6Q2YDLTV%{9
zRIDY9uce%><y9ONbnMn89s0c<mXm#`d_}H4rE^0+G-5t9Cp#`~KSEtSLVrEN96!)G
zIY31^v0^?6$T*r6KK?nr_$y;Cwqq~e_B0XwAerTWTzEO%_5?TT1i#{haQtNM<OCP#
z)P?!9N%5r3=8PojjEv=sUGZ$i_MAEDoVDUSb^QG0^ql*2^O$ac+wrJS;S}!dv<>~N
zLy-m!e9>}pF<yS*dwJZrsa0P=O*64f_j3(@ZHo}H^{5xffI%^GiVU@W#&f_357r0j
zUrYMxf7GXhKZoc^tz9ct>Q@|5!B-`z>ffmQ-e_jtX!|Cf504eT(#z<7G}LD|wxea5
zU^G3W%a2#Iw7acU1lp`=RiY@GL$os0?p!}<xo6&m)!%tRG<+a;E_nC;o$7)5_l7R_
zp}uP2o%af}_felzqu)R9b3epEloNa(sN)|}I=`f?Jz(8DWce!Pe0qFQeJo(rvCDi^
ztbZ)~q*eiW)WmzLSyQXie=>4;YVuWY>3p)Ded>6x0e=7N%KhBisnPHI42pjq*4G?e
zdk(*Oo`h&leR_#gdzs7BTF89C3w&J0kY9zowBWvOewN$Tf30$U-LI5A?0n6ec|ARo
zIe!mH;etS}?PP9!Au(}~M+_)MMeUP5ExXkh1aSu{xhvo_s)hDlkg-RB)l<Kd_ultU
z2t|S7M!(&GH1Tp~(+`1?`6}OL9}QpXzS_<|!5#T)IR5dHES$A+U3v*FtTpsp@fmpP
zcko$*AfV!sP%&}UC5@=)m{`v&evF7q%PXsE>m6m1bw0j+who*jp=Rb5l2B0N-hg%S
z4)WGX&o8fU?;9)s7I|{>;*B*+O2fh<EJ?NlXJ&hgs~DA#QBcvKuI)Ov+7Qt33XehX
z{?qubuv8+ozPX*7Zz9*{%)-Wt;DL$xwLPhrN(92Hu67?dG%}#(d8SD4J|ayZ;g`)`
z6BNihJ?Go#P01)yA)}hmFL|ty?-eqD$&LzxznFF7Rf$w~<x^61R%hUAcNH^)yp;{Y
zREj9lKSh#B472Ym6}W`c2q^=;i55?lD8g0O9jLQ@uJ(Dc$2(ro)^5&t*@!PgthQR|
zuzYfb({2G$;*&><oauFVzr4bcXr8Zkz;0>_06^zP{gI>yS?>2qCe3C?dJVJ=ph2iS
zWI{yH7f>$%T0T=UUHj(ST)A#%FzMHZLs-;p+o}jHH`Mwg9^>PP0|txVZsKQi%1^gC
z+hfz;b_Hb_E`H>aDvc+CAASNF5-AtS^iZAG7pTA3S&-(qUI@1MRz|l9t*mbQ=%Ye}
zk%h!>kp4`}i#8*TrpgKfnoI1`o`{D($G*TGVq`<mdqqW{QS#V&{04g};}BrN&$E!Y
z%Qo7f7%4Bnuzgz5+3=hXm|2);#O!@U@;c)p?{u}<)9~Ruv0@32lB=_b-6BN6OU^*$
zJhH9__AGK%qL>VdC;pltf;g`qGR*HhFH`BDQl?@U_L^fdnL4eZq#D~yIJ4L)iE1-A
z82LHVx$d+$6?upJImbPB>k1S-PxGigJKxR}PVhCi*%ykyrH4#@Lrq8cErTl*^81)B
zzpJ~N2JVJLuDFYfRAJ&Hi%=K|-prV^IYs@9jbb{DnzMRjpo*<vAHtkwJ4`7={VV5Y
zv?#{cowHeE^L6YV^NDUXV%>?28%+I1D10(Q`bZvn<HDExMT?3Zny=ywvjt0T9r@Rv
z^ZKb937ld@-QKyN7|s*9t@!ck8TFOBm45#<q><{4bkLaWyM#oz>}Sp$w(76Xf1ebX
zuH_yboa~X59!i}6+6-qkV=y-6u`Mtb6^5tTc9FzSf{u+B^Pr3WVVF#m2;=uakUW&#
zyqn83{*Y{<tJBaF8cy?vE-%*A#N5aee%D;Y|JHQhAuDRJu(;T)_t3EFRpRJV(`lcT
z1DL0!uzIM0k)qD~%MwO|vBO7_rmcjy(}dBvom0KbQ)4^LNBF(7s>)n7$oVhCiN149
z%suf74MIr&MUh>wh3!zQ7V%&~sgvt9p-H5S^K4HR3BibAmmvC>?#46mglIf3^}IfW
z;`XbVZ@w#^EdsThl`8_bPMi-y2g-)chgH0-HIY}Gol?V&2S4whdRYfn#bj|uD}$@C
zC&dRDcW0mdg}q$J86dG&OVXXOH-(mKFLOHxgZCC+K7C&PiT2>s`<nOr)7hV6$_p3+
z3|KxCXxDC#m52c)E+HB`52hnV1i27RQ#i7~rvJA=a!Q`02=vD@ARmgMfMiiPHqU0D
zrSt}cdT0cG3uYj@v-Clpvw(&WTBwZYdkJ#)-gl#Hc-$tvXuqSyB_PM=ghEX5S5!4X
znmKS-5onVl&mEp&w=29KY*g$?fW_kK0Ix47L5RmL$r*=*Va_B;Je$-z+00HWMumfw
zY6|>h8}<{?()dFFl=Md=Y_Vb$6O=mlXrQE{xa$ve`eSzlL2U7#1KPQw3`8<~DPmC`
zS;j;>mLZDhTd`SnX#0cgvJwe3xP`sq3`14J0(Hs+m4b87=v5MO2|s>?I8ud@YmLIw
z86;Vo6tqVr7n=-QB=<QNFb#-~h%Lt8Hnjz?RD$IM?l}m+b@7~X37EEzzf*Gog`~Zf
zaE`%UX-y*L#WP4_7TufaDWT@1yIMh>{u>#MgS17re+GPvtRX2SB{aV(EQf+>YO~S%
zsO%}e<%dbu<b<~E%aOH|M&=afhCkC$izA2ono(pq6Vl-!KL!OXQe?-;7Sm}wh9wwn
z<{O3{;F=u<rOa&>_zxG0xt7#LxJt*4dQyGJO`h?on~oG}@BQ3`sY;Jpk0O!Z_hk#H
z=A&8vL$f|my%Ri3=N^w@kRGJ@2RP@Q6dz_$9;n?8R;O!nL9y2j(&+?hcrV<9y5|S#
zwSwnq@6}L1YC#6|zy&Wt{Ls+!K%-``CN1ABLbO7VNh(mwOOq!!DL&Aw5&Vb7eGVZ@
zBFN$wP}@C;C$K0o@LN4to2ID&p-L#o+6}nmw!q`x1Q80f^#w0c-zOk|xr6L&fI4o3
z1fW6gKu2$|4mF<}!X%m>PbEMtTsSsc4y{kRT1{C9NvushI^0<WxZ<j*;j_RT==vSJ
zLPY|Aih{BS!IgpTd~yNXH$@)I;j7m?YFhbxASfz9Lu8GGZi0UMVD7dJWDE)bG`vG7
zTrL1MZlRY}(ji=}%?Q77p^w$J+RH^m-*ti4>z+E$#{;ZSiR(@R4MvO-RRR$0f%=cC
z9IgYI5J}HK13l-}cp$G|)V^7Re0-NoM9T(`rj9gUqQuk+P-!Ok)`xiqFL@eucy0>h
z1l~KJk@t^c0(9U;t@vuurkJ9rU@C_}7Bvv`4EY59AFM5ef1LOppIbgbK1}ixUTY#V
z7mDjs{a)9sJ0v~{k=i1kGDvm?Fs?+)`BF~jE;+v!@DBLwOFa`n%q=eK9jPM6GV7&T
zkER_NuknLz4m!D>`x|r9*MSf7+zU6Vp1Q^Q2viHRggh(ZXd%Ya<bRa38c<WwqRmw(
z7fn)c-<1djSkY21i84uKSWTW-dZm8baP4U_RkF=XTT)%BKxob1IL+&7MZ1iGYX50u
zXM3LteOTbvk=u2aM&yMC2=N0)ik*MmNF_tA984kDu;&(ehQo#+^+A$sfsBNC#1k+B
z)9Vfdpk-PLDf}U38^`z@5)1|@n31oL^~(%!8xe!lJt|uiYH%*<p82E)jQcoFCMV23
zHEqGznY}Y7mG{9%O98eF;j1FK6?&UF0<Vf_m$%o%GhFk<^PQ&#1!3*TCbVIFd+gVa
zMcya6b45$V05{7N-8l=5k`+S)*PsLMGtq?a0{gZRIr<TYrd2H)h2T3)>z89)0xu23
z3HBj5zspy7K>>XIh<<|O3zJZ<z3g+3h!~1}4niSzS^dgs{SP-KZqP>(hi(Qi9VN*K
z;wR<y-<LT>@0ieD_>DeA{E3yjS0neih`0C3pvinUGB0sec;m$Y)PI!D5?0a0aPfiG
z_e{0>a~Jv3ef8tgohf(c?jKtL$j#@>m#sa|hpkVYf$p8JK*UbPs<zIawwGy`>#Jml
zoIjw9_-G0Kcm(d`JN{`ZG(<%N&p?FbUC{gwD8ybkBtd-SIB1kM5!^u$9;;8b-#c44
zz|5FkbmU#wTz)vqd<Zk}7;SKvb@2p&{)BO&*jZgIU7aJ-o%q{OWM0tkpGC0{yW?s_
z&B3ByC%cqI#b}kfsbT$S+L~#tgXx%1D7~T{-cd01f}fT|E<dueE&DN8`!iDYpig!e
zZ;6?mi)kl`DH)2>*!S=*gZQY@aYq~Rn3%ZZ$YDo`g}FpIXJF9-{RGm2KIX*<>i7!*
zfvD#_tsi@y<;2B$p=4B{A+lvalqR46A$XNhL~#_A9W_r0R!m|PR?-VfN(W9F7x%L~
zw31055@BB#Oz#hz-eIx63#C5EVF?;%33-qNL9~QgRv%xr1Qoc?Xt{4aRop<cU)4gA
z$D^Mzv|lH!f4#V0ze!Scu%GphB;~%O`m^N2J27acZi75OCnkSq)IJx%PQA2NeI{o2
zW1zTvsu7nY1B#SB;eZOA6!R}BimU<IIw=-9iMx*yKHF%%z3)J%e!<RNe#b%nTtNZW
zF@YrhK|o-{cBcfe2QGHdJ#Vn5dXP!5UrxFoe|=E-T$&0><^!gTFx3#7wUmn2K%7pV
zA+R9f8k8<5;-xAG@h)S|QkBWhqsa;ENvsP@vZl#rVkz*-jc+3<ijegK%Kok$KJ1ny
zYLdYl9OC5~7JHW6K^b`@9tm@n4c#0TjvJQE8cwDPN?HC@BkxyB)l(-Z78wE8rW)KB
z2-N|E>g*K*>xg#+!gbHUw%1|x3PSbii1p+4X9Nyr_R0=(L5)0%j>19@c)<;h!Vbw}
zO)x=C#)<wu9;k2YXeeXvL6vQDDrp`C%v)1TIm1oEA}u;Y%~C<lF^R6oON^;@g&xb7
z=aDYY0Jg3vR$<}R+F)m>ur^4bHrqt@t!1}SfjcI$$GA`@sv@VOvI|}!e}Ek8)=(Fy
zP?yi2uBhZ72hXsFb+AV>n0K&H_hp|R0_D!GCC*`GU!DQ4s-GZ&@{iZBPi3&rqnOY)
z0GJnH*zz%Xs%`}@Im8nHQoJxSnj+i@EPOsJLOv$i4gj557{lf>rVA`qIxMyt)-Ds-
z-so6MUSO;0XJ+HiI4c0$J|VnzD!`Z&l!6S|Ea1JG5V`l@_V(y`+?OLiPU2aKcj>Ss
z)XHI8Q>axfA5q50x0HFvYhnfY*GH96MU)-xr)ZRv@oiuUA`xy;r(SW8U<m=xMJmwX
zX~EfPp`B^ro9Rz*Ga`61qSP~D+%w{&Ac1(!UO5%+swo=MNm|p1-xf2}0A(o5YWZ1J
zsILGB;nmD%xLE?u2*#ZOj&@L9E8Y1cfP6NRyhs)I&leduMK$K(;F4NVceR`V6_t8`
zstuj?$*{%dEWyg#(xzar15odaF!Y|*jFjV>g)+$>@iCf{27Lh(t0SGy`ozrb)v1Bn
z<{k#s5f<hw4(EvT)$N(*%!AZP_%!66=ZsM2ZwcoeO$*%G0jBK{4$Ofbct1UDG;*|O
zoa5(R>c>FdWqx?-E-rHc5)1Rnnr53CV(0VcfQ1kRP0`8umZSyIqJ@(t&4?h)$jEt}
zXU#oCtzX_1q09wQc!9AtQE_U2EKIfJ9RG-bw6>%FB)iO~P*Vp}s~B_3d*SuPnD#-^
zRwC1PwBC^~A}?q@0<;%Z7xVM|3i3gP5<gPmVDoI$vc2U>)0O?XwF2T*O2(i{@i=qQ
zBr0^(!_HY+VZI`10_w|w4J-3u?q4f^d_~{`z+o=sQhyB~M2F>EA^<FvumL*b7mB#$
zebUjpnU~=gz9LC4_c1R7rz66HbZXOehSioc+n2L;Lfdp}hswh{>b3gElzx)y!gH=5
z6)kHkuT;-yBUr5DAL<~7>bj+@>^vimMd}a?>aM&j*B<K9awDyyt#0H4X4*@(B4=Wo
zR#f|9H`|%^nU$lWk*kyRY`Jlc+L@30rsC)TJNeqX^`I3Y<_qT8r2SPRu{8*R<LV8X
zZgG6rU1Z+9F6~77>Z8qaGI&jFYV8_MpW0a8y=(=QP5&3E0W`WkL{~ROb3Mey03~Vd
z-N$tUc>^>=1DX;8gpNv7$v!k;tkaccV{W(`Q!cDsAoe)uQfQ-62o6t@8=nS9u)9v!
zKa5cUnr1eztTp8B-5`<FBy%Ny)ip#c(9PX90B{(gW*OR}7_pITq9qyNst3`XHq!HS
zGc*{H?heq7gHRHTsBc$tEsWN&wooUH2DUcwuQ$n}rnuD8xy`oT^R)BwfcaJdgc)jI
zEsXc3w_di4(X))Zs<%+iH#o??jw*zU)1(3$KpWsKB$DlW#%*-aHYD$t33|mgX`9K_
z$ToV@Cfi()NI|y}e8(3WQ#RW!#Z>^us<7I)p!%GN#_A`{Re)-Rgf_n5*Nkoce$%Vz
z9o<(G^J~*q7&G*9<1i*O<AQb*^;XjkQ*)YNi40Rt$<@Y%ZF3JZ)U0i5Ta(}MKWrP~
z?Rd708)PhR1-`w4lznzA)_2-X%!{4&+{ny|#rM#oO>N4|Q(N~i*vv)$m@BC79X*@J
zp;*}Cn~5=51oZa=&NT(yg3NfjLxT79=63g8TK(p*Bjy0sw|kM}dOcSbR8R*5!7Bm%
zb955G)}4j%kCyLb4k9F_!}K`A@uA=mXESaOGT{%i@DH<Z4<Mzn^soR>p88?F*<pd}
zVPWuLQNm$y!C{H*H)!wy^R#7yW|Yos;0ZIR3je5@=BS3}s8;f*PW`Cf?5KgoDsfjl
zDOj7H8>zCQ^8`*uYVKoe!BGc|8tm;682^~Peyxk=xJOU6UGlik%-RBFxj*=L(5!7B
z;dr>g`eWYl$lUQ5i+tbi@dW&d8TH;I&B;{3!YI$ljJgd^^ii4a$$aohyvWHy!O5bn
z|6Bq7(%i{P$H|}FlQsBLEU*nM(&;9TEjFQT0RQQZneFoV$!@Uiy5ecU!r^|yDT&wV
z(VXo<#%bK2)3eu;(>bDZ8oMQYyX>OVOZBtE(bF4OJIIi*U7GaSUBQ`;&DmrBSy$9q
zYSP*Bt)1|K9ofSfl-)7lJqfhbc@NL|kjyze#xa~5HbSC3eULpv`Z<d4!BhV^T4ERS
zoh&-SMg8nKChf)Ml|2XJ1+IQKP9Z0r+Xc3XgZTFgB8^VMLN4L~hviy_FC!OZyltc*
z-0uk-?*Web?=C4rW`9dwQbWQi%z0=+9Lww-ZGK!bWF}%YUNW79(o69&-#MnNUw(hO
zWQV+;pt<7IpkR`^;zp3<G{54-5Tp*d;{SQoU2ydgBE&mzB{ctqfA8wknbSvvYf%kO
zA=+#42|jVDYl%c5Zu4s?b4jU?YnehBnZj#1hyp}n;96lqPHyk|GjAXpE1wdri}m%j
zveb<*=1sWVjrxT1C$}5TMmvSX8|{z)wfFpA=Wh~)ZglTl=)pHhPdA30H+r<U#-IHS
zAp9oguG~tlg;uu~yaDF(0+x-gj9Iret+zHI{?<P~+9KSo7Tnm=x^45^I!fK$^W8a{
zyV;$6bPc(~vA-Msap%eE=Yb&feg3XY^UizC)yq!Em%tqraKG~IK0xEnLF(R_)qVTx
zeTd!t;rIKXpY9i__kNY`P;Ksk6Zi1T?h$8qKksg$=0$!ry2VI|#?HINRf@*zKSaBE
zXqkI_i12XF^q?(!aPNFz9`#5KdB~8uNlz4qWSQS*(t0WpJbn`Nbo}fouj6TJ=c(-F
zS-|^P+<9HJCs7KyE1CC{9`O8j{AdO7v`77J_5Qmn)05e!r|<IL>-QcTXs_$tq?_En
z2NgakCq6~AJsD3t#VkMRo_)`Fe){G6)YW+f{v_Lj@Z7E8#V6%eZ|(Kf_Zb}FHDvxg
zEOj+xCqJ6_FtYc|KL0%W{H%)c@|)yEo%Lm2@FnZ+dA9L#W=&y!;At+=n=a&KtIS)m
z^JRbZ<@4Ih>9Myw<mC$0XQS|Cli+eA^YeD+<Cgg=iN-5c^_wd4^|0~vXyEmD{`F+<
z_4Mxb3;}XZ0J)%rT=GJ$q#)NCkQ;Ld<hIkN1a<X35%N$7d2EC{4M3jfAuoHrh!&1h
z-&n^zuTDP^hEr;#(593yF14_djBx5M@n#%-TzmS&Mn{7Eqo0zaScfBZoR*6rUAc6Q
zk*9RUv2~S|kBKaHWS3K*T(5TNlvj`?bNcA^qj2Tg)zj-IgRFIO!|aU@Mmd`l#<^RR
zCVAUbrujS6W(B)6=7oE-7DfAXmc<A3-%1V{tV)j<t;>#?Y|2lVZ7WV$>?+S#?W@k&
z9I7wa9cwN*oNBK)o$Ic-T<UMQT^nwB+#2tA-J9<DJenW)JzE|HzPCPo^lEz+^lpC<
z^67XL_U(jx0)wCtu$e5*$-4uQw+T3`_s>7{hGNqymswm;^hXf$Iv(#|P!2{@NX0N&
zUQ!LmF=*6SA6!z8CUKZgm04cVjHd~>T^=7?(N1QGg<vy(yQZ7UlTGBXIlQKyDN-&}
zF8_AJFjuDC=y-B?!?;joG!VmVb<4C^_iet$=IEArxyf;Fs@&?1Wwp)o?(*d5j&&XE
zkATBseb2Vp8&1G!dwkEnJs3l)QepkTu{)Z=>vVejz_~w}BNfYH^T>5LQ=(C8d-BMA
zyij94U19UYbGqE(c6EC4#CyKp9fHGZ`^<N_J)FpCclykKy+2h5{6B=>P=GfnI4tzJ
z#Q&}b|G(UP2{;Fw0uZ3yB<SbOQvVMLx}0Jx<9BxT3HOS|yNo-6EIVl??Lf)7v95nf
z(8XdGDEo%rB<SOm?(*>F6Y({k3TQQJc3i}Y=0A?yE1%QO+*W-2zI@m657uxC2@cc@
zj{-&cMacXLiH`S(l}z$aOmj|=$n?p`b<GwpNDeD0Ec#gPl3#6HDO_h?+vM3G&|2}e
z)3m*#yQi$*x0i3oq-9KbWOP!0V&?M{=X{&xlKLNxRh_xbb(YPw!F|JB*&~(h)i)h_
z06r}Aza{9~ygw!U{r*bOrL)BR{4sR}z1Z0QO3))!NB>ID@!vr{{ZoQYA(r!hNrJ9G
zMTGS|@ZwAL#z5Tmobhzk$u{>rvBke7=wlv$p^<OIF@GiKR@0PU5{Hgk8f=!TB!+1M
zes-U%fkpRh+uq6Bt#!r1yzgkbPu#+YlN<0}Y$n+MU1&u+)|Pv71kGms9@6}A;7qql
zgM31-_Mvybyhv)*=lOfY#ZJhC(wfiBv&yKsD8zSq#SIIjipWRqH$-HC<qvh*2o-?#
zim-u$%p$#EgD&Z8h)bkb^}(guJ2X3xEaE;Th(-W2CzPRP?gNln;DRE8J&MOzl$*yP
z*PTDOVM`DN?@fX(Ns|Qz{Fek>l71&nRsA3j$`=U)hEl*)LL<g2j!R6CcmHE55KS$*
z%WjFEou7;jE|yOfw;0OjbjGeWWA-=<0}*@Ag@Mu>@U?^R{e}(pl9#E%dr};+zx~YR
zKOUmZ=WIiwD+sq8qA6t7e55X72^C-{X0$jAOpKwZfh(b7(%vnu>VGWEt|im9Drwwo
zE-fz~f3QNT(Gy^*ZclMIMk?TGDT5%EWDqfZtQ39{t)5o=W`h`A5x(27OjF9#L=LoK
zY9_(`$kIZ}^%1>wK3tBmjVS4>MT0!KY$e>ncq?mXqvYdBCt=eQOBWnQ3w<|W&4Z-}
zgRqRT7r-j-(2M;2#~C)}-I4VG)c21UeS}}-tJ`0(%WQ`kMi`I#uzz|v_D|&;5H^!d
zcyKnYa4f>hh{Cu3p<?ghjF}X(^1lR=ejs(GW8@tBH7%N>%*7+6Lb}DM!3$M4$FOL`
zT3X=)>$+g{J*BjPEM16#U8pkMZqAmoN&dI~yh0Y2+;@e>)f-cs`ZWruj>dJC3Eid*
zzW`(UG!ITiy^nM%bxqr`DyQ_2KfjDCbVY?!$O|Mg%oR-r(-SLnfF%VLp7!|6hmS{{
zx<DEkz;?ycY1`fD(-|0n_4&MuaS|X2%_gD@HOhPTd^IV>`f@#^VJCD$W$p`qwde+!
z*<bw*@VVbkw0nKnFRXlhJZ?ODeL5dtg*;!++d*FL_bMT;&v$2U6a;D(06`iIO?(bQ
zl+S`D7zD!$ocm!$WWie2)FSav@ZjfZpuvl@PN+^&)*Y;yCH076InvO4;QD~1;NG3s
zBn@D4o`91j6vypm3oiI$fXZ#$Lt0@UBGkKq>gFz(l&2K<sVp1IZm^rGhAmWqgaR{h
zU!0!df?Dc03r7J_0xwMaB1{!G2hIXfl8NK@4`V7Lf?xL%EWzyImT5UerGx{FEmS}1
zmU0m1i~4v@FCs0<05G^BgJQ&&(V_Br6a+(ql4Kk-@R}e>TA3kPZDkL9IxrN^(2%0%
zWo#B|KAn_|?C0UUxFY#{1`SJ4bVQ}sJCFQ3RSLOA!Mub9OdOV>M!AM-j(1r9u}+)=
zkf6>1XK(8SWb*$9Ku8tN2nOxnfKZNE8Z312UqA?kAfx6D5K1#{EpP4w7uMl7boCFI
z!*vXdcJ|=)jZIZsj7-lLP2m1sSjnBOSl!I-X-!++T3tUlSj5>so<F)+J;gr19=m#&
zzeT@)jyOSC7=16|-w98_WoDnv6@;EX8$O6i(f1XN6~49zOT9m;8N%m3%Hu%A@{2~!
zTOJ98TJ8&@evTvkmC9&JzQtTy*wqq|m5|H@Dza?hXg2U2p?6r^zH)*>fUp8l{hn&9
znu8u`a{aD)w63Yo3E}OIW~8ZBMtc&^j&`_>LPsQ_+qO=Ki|DFuQsb6hpf~p`HR1i{
zIw**qY&Vf_bJHu5RJee^V`JMr9!t+GF?oI0l{)s33r4kWY_j0TD{A5+SM^-B@XsR>
zr3SvmXX|<K6>T@(<p(cg7{$--pH_<_KU0!@ZsyuOP9p%?Y721gAC$fC5mx*tewfpa
zu*IS%$aZ<C-s6g9^Fn)tt=}4wiQ>)s*mP{%^ApQU`L*_bFAm~)bU=&YS4G5!2CAmJ
z$Mi4fFTw~cmeIrtD$oi=4bHKo!wiw}Xu=8wh9RN`kRj3Gg^4C7Vg3+mCd7{58*;~v
z{8(&(7bSHNsshy-{Y5)ic#aDEpMa1gQa&`S>VE=4@$h_@+d`-D$v*%95^$fWSpz?E
z3PD6zV46vbr8xsMxd>FcBrH8`s@rN<L5i0cltq>+dU#)UXbaLFUIfpgS%#51R&kyg
zgLW}&5U~S&f$6tJdhAU9!_{2nxNnD^af)mVSS1z6sX3M13`gZ?7KgyHrh?#aIBmDz
zi1X{=vC67)!VXIc2Ukm&AjM+>C;*%R$yC+SG!CosvO2OaCk?;@?cT<9_?y!59mi7h
zYQE@H+s_lW!vU>lo4A!2*K=0eb>iElmGTS2tpS~ojv3|-IJweY3|QLHsb-ju$Hy%~
zTuctK7d1cp`v_8<?a)Zv1hIR00+~3Zp{%_8hiKiL*#?;zmu*L<#^q~Upa;O0W5lM%
z-Q$A#*X$@F2ntw3%(ynrKzc}9-6(@^*7Y=cm>kzEcPAV7912z{*F49_JD2YUPN`-M
z?-JANk-wHkDos<@o$!dV#**JHLum<huee_Ya3Ol#rT?6FMImd*B!ji(6B4(}y5GEb
zKH=NOIZNi-QId=FfGi~1+48JsXb78S{|p(AT9ru2IQU}}TmD!QGyfoP?5W)`cAN$Y
z`@UOoX3H>@5Ag?|_Y&AWUkuV#K3|UVc0NNFazsDMiKyGX+$@+^zT7UmoweT@G4yB$
zPM7vks_eA72&*29)C;SfEOGPTiMtYZ>YW+8bm~7i)pr`az>GjpaYSlRmDu5cBT%HV
zA`MJR9B6?fFw8ijE%I-8Oz#MsP^@T&brlaO>?nd0j#zgD8y_`r6zNB-Sbtd+KXc$H
zN-mE0@F?3y?%q+f)>!fJ<0?TR*hsIrfE<m5eS8V|J}lE;z!+349tGTfjA`+d3pI=I
zJETqPs;2kM{;R=15K3~sCrG2Qp6-UVvv1jfo5;D*Ln1M-js4d7KJe3oMiJCdK1?Q&
z@REi6oW0m`Ja76Sq=yx~fwk>~`0zm-8|fG1%eFJQOx(loiSVCgASih7e^lpTWgl!b
zI0JB^`U5pg(`9^BL_U)_kzB7sSBxvz6p`XT%JK!^0zd}+Uz_Itvn=oAS&vlM{)^k>
z8vPfyDV@XmPi|8{N7-er^e?yhGwMIMP4mvb+~!@=Uv87tWBxC<DgXVA+w=_h%Wd+9
zzHyr-QGdBj;@H%*pf{;(wqJT)zIDzUx2aN4USaHA`o?VvRyI~t*S~R_)J@?0jyG<T
zuxl`_e`K_6XyVt{)O6A0T<FZ7#mM=UjHUGrr`2tb&Aol?og<r;gR^tV<14Gvi?@FS
zuAeL(ULivFNO`bt+@?MZ&LjUDw}~9|hF_-9b%FkOZqrAQyZ}HJPNz~JD+2bDabhqY
zF6)h%2ngbI!e<m=^7FIfb3xweo7RAaUkhf?EeYC@OOnr(wNd8$JyWU~c29Lxr#Dw=
z;6S24{KjqKs+DKxj_?2%V|kZ`(|;J2j%7Jt`H)(vRIW8BKE0Ca+@6qjhoV48rqvWS
z2Q(i_g5<S|H+teZQQDVTDt0FrPPF?_TDXLVloU$M2;DCa=OKKV{t6#&H)Cv7XI8z@
zxph{--y4tR1ezT5YTEHXji)8-&y3{~T%|8%Tp!hI8~2a5Yh3!Q^qhH~PF3Gu)fN?s
zPWa5a`JZfsc(O`%cq?sBEU*2P5%PKkaO9*zh@kN4*6kmO=(-(|;YC+fl11t=s2QdC
zKDfO~SQz>*Usr$d+i)n@2&vK$qX_*#q4}PMHo?N^2V=O@YAExRX0G{4w%Miv8;7*i
zPs6(Tlt?OUt-R<SqUP)vx&B7HSZpz(d@m^(BCH=GJ{!g$Eu%li0TIp*n~C;(<RUO{
z+~#hIb;H4K>KnId4&#g4hn8&IO*fG2^bc;cAS^x!7yA${(~qX4D935Ra*rZd0D3z?
zp1fs0KdGDF!h=@ZgPJ74jNz~-fTv+QH!_JKTc*er>#(Sbg+c8LDpM91x@ouMsNx^o
zCK%r82pYSN0r4|Dfc&^-lxL|70*!i1bX1q<Z+QY+sa#r~ra|<*ymTpeX|H}2Uip+@
zPxe=N(=qa+O-Wxtoo(xJ2g+{Sb+DCP!2NFNNeA*9yjcf$M|Tdc!q-{vLi|x;4?^XQ
zIOqXLGF6x1o|#|tg_)JH4{Ul`>q8+S8e9(16_#BNGc_Jxj<BJS*LcIT8C;F=?UlW8
zn|H@o6Cx9%`YmDvkuaZu@5<{?C8*o4r<wTBZe~<9+Jk1)&C74*bll#!O@k2T+Xa(E
zo7+DYh2^)4){Q5(OZEfIcgxQ6Hg_xTdvDyP*WJn88t9GNTn{9$z269>t+?Ne;5~ig
zHl<h|w&OJ3xXmQ<ioe{Z+v&qzRtSqHsc6*rN}erd75ktKIw<!*Eo&Se3Zp8j_^4`x
z@`<=)$%p>5nX$T+xMcqHdrpN4@iR(K;g`0H0SMCbr6|`~+bA}WRp_Srt6l%qAFEG$
z*UL+rFLw){$ve`v6MyzSn1bH6&vp%G9m40aAKtdlwU&?<p25u5DGk5Z2Mo|IjsfAV
z6ckL!fiGg3A9Nr1ZU0;ag&ARhO4B3)t+(z^G-H6mw+}+bp9FotHAI%S=*F314MLL<
zQH{HU#rI@`c?rnIwLpX;(nbM@pyptPNcU0@UxZ4_=V1S80>Q$9!<6JfxP{Vv4B8jr
znxi@RrGy|_NKKwRgBP?Mx&ao4UT*}2OfIpM5ugmOH-vK|Tk#o&?C2OA$!)#*vy7KO
z;8r|}8f;7!f-t}e0DpJR{!G+u*e>R|5$#oHtciO-VZ)`29zA2M_bg2=622MZFt~mG
zy!lQIs}~`o43=(#e0b$0D27_rG{a<Xkfl!9HQ;v?J>#DUHDc^v&A?$60)8m1)v)L!
zSTnXU!%^eYiUge|>O*Xp5kjJ##Gk4(h9!UG&8Ik$f926Aqfd{C8cZiF0_ExBRYrBw
zI8zQ(3&REe7i(|f6z9IRX*ce!!96$x2o52E1SbRt!QI{6-QC^Y-95Mkm*Cd8JEW({
zKKq=VGw;-VHTC@sT~F7&?%!J1B`-7e7A-|JYB!H9SF#d$EB!vKkelZ%p?Cpgmdd1I
z9!c+z4DVLP`b?fdlk$YM5C<p@(jS@2)q9eG7W;FiF)cNHNq%TejC`+|objA7i9(JJ
zgnC%9l%d3Q%F<N<_gJwEl$9_uw{@WqN{MVBfjo3sKn^TQuJVI1N&bO8BV9R__%$wI
zDabA_2TPA)PkD0OI6h9zoSwGhK!IMZUQnLN6nP*xHK9Si+#jJ-b)yBhKqIKa%-h61
zCgfXj8cw;p0FoROgHrQcbd|rhDc@Ac!Zd9{*1EN^?z73lpbRI2gTRqKCFN*)hefUA
zy=fFalFEiqVV%?>tw|-t(tNZ-{j}D;y0&TZFpXGEUA(vfPn_zAT?4!2ak&Ml>f}74
z<14YZC)UxXsyfWKzIY%id@PkmH6)Ql6$R%b)>6}z!~S7}s_hD-_CwY)%yqg}>`Is+
zRgJS>inTxWS&Ci6)b>igbsXd5n$M2Bd(vS<T-&g`dwSFa%s1LSQCroImZ(Foed`Wu
z@d<)P-hh|9Yiq(_y`q15o!RlNmk3n>&rW0m-O;HJ9<n<4`O3ef$mzSSPp{G@^=i`M
zT|f7Db@)D&E)<bWGmlbkRG^ezG|&oBkJ>DTutu+81IxP9w>pkE2|$*}G%P<}bEjvt
zv%<jxuQXSaWPZEd>+d{jl%SN1;<(Gv%A;w@td_bawP*D`*~+$}Hbd8buY1RN!mD2)
z6XteLh>%y-7ga4R8*L28Lrq{6YEhTBas}-C=rWZgBcK25urH<SGVOj?S4fRw(h=-3
z6UKbKDidxZT&iMOX7M&lGrdu1L}j9`KegOadQWZ5e7?=0w(>Z@ONa0g{5v(&B#s>!
z@I5Y0Ml{qFN*|l3J}%7*)&w-FzeaRRUOvBbu<b*!@QPYC7pt9b9vM4n#vz0JPmy>I
zo*PLZf6tBJ_mV$ay`r76zrhmov9Txr221!hzJMiKNLq6L1(s0UI&$e8EB_6aFp|d}
zwP;n{{|%OyJ#AZc{tcG+>gwmu>GK;bfgKPTWflGcmQaaKj>P$r_yU$7Ny+oe0fQxS
z^2?k{z;mN_d7b&o+^ARIrr81pO9;33x%Gg-5@g>;rG_UaC&#9_e$35x&Ma}HEv&9(
zE^oeB-`S1d+W)+FbnJC-#&B|ZWpjRhegB|(d-n(egkQDdRb{;=fqEuZ8?;jX;Iu*@
zkp{m*E)s(OT16qLTDLo#2qX|P3dgoR7<(j<A~H0UD&fPVtK-@%S0Js;A?(mHbg4L=
zBH-KcfS^$HLsle|L_LIg|6_ry0MA!~`h(VDg>sX8-?xWzl}0TNbXjy13$+G_{8~a;
ze}E+p*~n56$~6lRV9&y@8mlIup^1=J^_r@sAz-m@?WK~bb>!mNBaz$iV|FKmW&~T+
zaO?I1qTXa`n4j6~eJIm~qLNl>ICiUhwYGZ9d~Ny-)8T?7VyvEgb8yUhj)}k7R<HRQ
z*<Hq6#6-S0<?)9_uq!d~Dgz-Ls!90p`VK=zB=HJvN#f$hhy~hi`;$C}<)Z_Zr+d@-
znSbIU$mx3V8>Sp!)o|Iy><TW%7wzJcCjQMcES3l20iLoqK8X>TSPqIPnLn|hh++`A
zgueE>A?c((Iui`Cu783hmXZ*m5UyyqqeO7Uy=<9D<cJ06P8u@Vb2whb#YsNA(RnNR
z1-yuWOkcf|xI-n5npDX1zXue3wOfkh!gQX!3@}*2FvUQP4l2X>moYFqXzG=bjuPfW
zaz^kc`r=fhpdp{!lzqT{UYblwf2^;LN^(JZ0=+Sjj|7E@ern2rNv4e*LT^cO{lh`I
z^>{Q@dD-ScX`0=_J!ECv;=^IJ(HuE#b;PUCBT%Ko<bav(xM1iZ@v*e2QvF=V5?s*|
zZoheBfl4yI=EkqL%+2Y)y0uz7%10^+PuLJyR4&E|jme5vTopSWDCor?k?)XjyC4Wn
z&U%Q+(yB6%Mbo@{(JtxEzvIZNou`Eu1)u8@wmzH>5CkIcQISOQ%MH=Um(=tzHjeI&
zu#Sw<jbRL!v1f6!fKy7y&C%%uACfui4^Bb>j>$)Q6qYGAzGsf<V2O0*875U?<~bVE
za;AB5R{^F4!q73sMVwS=#wE1UF;f6S-yZ=5vZ>t!0uK6*fC6_XU8+LI_YzPhFr0Ui
zLam&C2NWKhR8KHiA}`V6VZW%b;^CmI@#NvKYJmCisBYfk@wjR4k5;emlxz-(O^#^~
z@SW1$4QYr0?e*nY;3YrO56M%S>sd`3fg5+zPWM|m_fxMh%%BOH+iiKBU-#~Xl^!Wa
zjcbFqdfD%~pN!@#K@<#17+<a$JMZsLJ%hEp0h%$LcVD`^;M4k6X~en_RnB~@<pGeK
zgWaeuXTD^}+3=!bJ*c>hK3_2akc`m&+<vJ3k;)rMT23qw$Ycr}Zc8YJNxkJmR*C{`
zOK5>RL1Y)h0dJhLF*@~n$J2_iAXRkY6_mWz>SRMiMF6PPVhmKEi>T0?4>>s93*X5r
zDD6!LiEujcziUZRLj(Z;ic(wO@n|t#%XsIKZF9%-BlN?39_^O8z#rh*HTG9D%Oyl;
z78NG337vP+C4ZzH6g@@{@|6l9f$A15RQnMbL$1To)hi~$8}rt*Z<|&UAxMVi<2wTd
z9G58ap-*yCoc7RpZ%vGcRW~mpnc%k>&x?k{U1GQtr1IFD7Ki0~Fk||thG|mwC10z{
z#SLiflB$WvZ3lgc4`nQ1iVRLu(80oAx`N{Jydbj8uuiHGGbEi$#yZ$$OZxFN#L>7v
zY6B_n9aF5wuRJti;(`@jE2rlSUo!4Nf}K(wwMPt0&ZN`01f@ga7_tmC=UHZ8;bPW9
zePmZ4b{xjcLryOgK7KVKiE}Rez_H6PWcL}yKp}<gm?k3ye$cDOHk%-yMzlL_)USjh
z&mO<n)1l-$O9e$fmim5z$$?zbu3jd}TUu#L?taYgc4_P=x{^B^v!%On>H2yblBt+8
zKBzeI3SUR%ms4gNd#*DfuJ&KQ_EzAfofS3}23BD|1a^#XRATU|%6IPz7KJF3IQr94
zA~V4CS!|oA=^yD4rz#AFd@T=`mH^P)_qhm~m-Ub{5+G&)kXvr*tL(|hpaIKEOAbDO
zq%LBn6cIKDjLI1DP@z<=rCfv?gpyfx>u?6;HMaAd*LTzv&<?HBqaJl=Gx~}S!68c<
zyz|IUd|#_t9@TmLzO~r~m0FF223&G7DRl{8xGo=RcrRubeNAU^I&>|vWJ)M|SYh!5
zZ3n8IyzNrOuj)ZeQ-(%T>c)NSB_LLVg%>t!P;u*Wp!*30<8;?chFTpYDz%B3de=wG
zX$|n9*=V;?LJkY94l|U}?I%7%BlM__a8KPLe#G||_*D%KDBBc-_k&_GH8F{!+cbR6
zj%Kx0aijrXp+7kfD;a!?KQ=62bXD$Fr6DcuklMWrXm<a`T$>_|<3+Y+F=~1uAH6HJ
z$Gdz#{!y+=1p{b+cy-T6>%wM9gbwkaFmMK7g&>7I`~AfCUts`DnL668`<pVATe<aj
zTQR6-Gw`n`KKU2Ql%m*Ql&P}ClnJBbt&hJcQ$(>9%cot}ZZDK6Rwo}{Rj(Jyl$T#v
zxMau+WlAa{A@P0O3uTHjDJvlZOqoi}E(&ug08^%{i>rMq!IUZanr4SaFlCCZrQ4{q
z6HJ*R>>2hq8yuhbJ~E{|IXhQBy(lsNb0q^taD8b@cy)I#YI}H7atwHSW`%lma4mR#
zcdrY9@CRiI36h(2BBUb_JsbOuT1&gv{Dk6#GSveaa0QA$KNPFU6AV?7Dp70J-mDHm
zu1p&ltf3J}68^ATJ!FeEmhndL7od=R`g7JBmnNVcHXTbGYW8*2?I6~yxs368oboX}
zrkqA+#ON@j!4C>ucWD$!J#5uzJyZDj#j82hI>pn3P*o_C8C{p=CX}?`O2y8v;TY&$
z|DjA>Y{?-ozEGyvA$s37!1Ac#fhki~yPQ<+l^iB2%$j_{jEXna3k`Hr0jaHxmUIUD
zOFibPca|C@Z%8!9pZYCU$0T1x%1Cl39xT)*RtaKP-kh%U717X7+238xWV(t@2=d=9
z9d8+;olLepJr>0__D*;<KU_b<+%17zClQRYjG<#3)_n@Y!H<2&pMqvQeZ-B(WuY7F
zHv;&7d?O1aOUctzz414q;KxpI+6>v#yAy_?uc6IlM_6Uw3P<M|M2+Cjz?SzHfL+|Q
z_<+l^4MF~@IFIXrX@C2zhXCCUdycg6jwG#mvHqJ6=KK0ANYbn;iFyv;ReSvcp0pIR
z6gGpGwgOC<GNBNHa@sBa9R_|=ri`HM8}_@>eScG?c9o4%gE;B;^I`>u4f5g)O6al@
z67C@jQUmBs3N>pWN{Wi)ButVE3l0u)N@EreO6y<=4ijtVN*FR5U6Kzgx-geY6FOl_
z53BkJO3N|^HI$D)H5HtuJGGNJ^v7{Cii8LCat5X41wVO}y&Bg_2u@;>?F&v?jy};G
zHGiTYJ8c8^$EWS!qT;mUDF>l4+VU4hS10rfWeWav*;x<r3uOvjl<~X|`-L)vZ&-HT
z|FM7YjV+1iPqV?Qpr0h#s*H*iMNmm)xWmeB4K_tgt)obzZ({jsGv6+oA&o0B-gJ#8
z-yE?s32BmFO^QgGT>Yq^qIzj7q@y6O1Se0yZG}4vlq{i>L5#MhtAV4PABNQ;5P=mC
z<q|c@Sq<-3JN>gg!u<=O>DJilqHF7q#<lfkbL@>qNDr>fyn}Y`tps|DTo@bSio6Yf
zrmxMQosW<*XnWC=LaV!3j;fC9`FJ7sp?QTCdE2qA%!OMl!-B7mjF*`Ymy;#4;!c_}
ze({_|g+%b4CnA#aT^Lua5?q?}tnyy5O?B{Jt8RL9UoA)ipDsEbPxJO7LnF)2H<L))
zR(_UFY}^_*cjjGP@R_>ZUu$}}9LMdkY~Q{@$OKu52>wDjvj?`WLVya}ZkS}v+H_Z-
zFyI>zE(Tpt>&QIn=HH=Iz<aTVWWup12*E_0iMU9vA+RiT;b^e>OxS8)-xzl7P_3gw
z>Jh>w$8eDUoJ0cvwf)&>ISEMogJjVu&^;Cc$>^&CR(#0sL>2;HKX?VZS>@ok&kA9I
zD0)IryEaMc?)uilPp}oSw}=LdM3n2JFtrqNi56%@*6t-j6v{RUrtaW)Z>;DR*(oq{
z(FX*5tfL5*w0ZB~`-EvK9kGS<P!JczSU*UFK#WqpqFodb#f@~=NP~J^3mn=^KMxH%
z%A?*=5K<8Q5@CI&J7p0lD!!x@r^`sq0Mi_#5MvYH*qRw`hJdWOiy7v-B|M$=7VhC%
z8=w(dz)>j9qSQkUm>DhLe7t`3hE6AWG|u;uqqqSsuT&i<RcL^mJ?_xL&IXkV&7D{e
zH*im$oR(Txb7w^pFer=oz@bPwegkm(g$0WwR`daHcrt+ZDjPk#NaQua4?tTfC_~FO
z{r!flSA@$|E*VO(n5e{5Ov+UrwLp=?x8bRTmaBZ$@Zw-j`hT|-j>FR#4_AM+6%sQ!
z1lL7k(j{_<!!rfE*Tu5oB?^TSvn49mB}!u@ijBjw6)xAMS}3JT0}^vJDc5C2;5a%z
zJlD{2U2YX#s<tOF-?DUF;WSpNaW6F5E>T*^3{$50URIQ36WOJf<48L>QHi?+U=-xf
z_<9bKoe%OfGUTJO9$u<)k6A;F^9JKN0iW^^MP!{3_OZUSs><vEYJG}V`LP}!!cxn4
zLv&a9j@kv;L;x;$=pK#mC{<oRPpB_O2}2BT6`k+FFjxm^k(e&XO^$cyH|Kt|Fw168
z3i@8q=)D1LSy&peK@kaoEnVp{FZm<PAqN1Z1*S~#eSx7;fB@i^dEAby{d&0V1fW)V
z!AY${65e&e%T)Q`jjqG;-F2f!RQbJ@+CWsj>%kwd3g8;uKz02y49HZ6d>h@wZN2->
z8u1bawg?`_0JtbcIna|U5L-$Ed>ZFS9?0A85wgCEFxzBBjBZjf+<%smIghe^(xatJ
z9{zeFANTcWoAK0mgzls!@e<kqJJfj;h4wOdg5Th6YSNg7gKh9enm$i#()ibg%b@co
zJ%P}q35grqAP9B6_r6J!LYy3+Ky@D@VkEDESIk1WP$fnv1G@kur^13+{V^V__313s
z`XW*31G&_PnIhDBSM$*W#ny+}s)+hBL+L}6<%hYZ@%jqKu|ti=hxsnlhN?j6qyKYT
zu`u4y&^UH%;rh6|j@sBXAbnz!`uGzl)7UaUcH+>wY#{K<zHMzR+?f<RHn8vL>v_86
z;L>B}(+QVVIf0e;qr)1kC8Z)###yUg{02(lNe^X(YT<{p&2P@!{pk#|p_XkV1faWa
z1m=tAZ?jv}iLefzGi=)Z+IBESxkoE&Y)W$6c88sK#t$)8f=~Ikls*EW0zfiXIfTzZ
zvCl12iQ`uVe9!x`ku5XP8MD%=&j(5qy!yP-rxms406ZqHg<g^qys-464MD!8PU!v0
z(_m?H$H(P?atG1i))NOfu2t}=S3CICzys9U0L9{DhShO48(^6Os4O!3ynSZN#h;7$
z4r1`~U@4)~t)9K|-k6;XB0h)H?LAAe(LezJn#?^nLz+nZ5czySupL^C)MXma4p5TW
z1~k@mnfulSs2qr`ckXogvDI-iE+}wrzjibSMS4Gy@C=oJ#$fze?`krT^T1Z~c^f2n
zXX?m#O=#(M61#Sbx!`dVd+c_W+u1VB1==k4biGHTKi|siyrnyPI$V|K1Kob}I4m?9
zHuUtl@YtXC{66otitTB1<Aq+N4`=T_fai^S=N0cDbl~Vslw=4JAwpd6rYQRS>P`s2
z?L&LVMBOB`km$qQ#Kw^H4(85>Ly74P?YrY|zP$L1TtU7lPCk72e#uk5P$J&2w0>fP
zv?7B(LP>ryO?s>_KI^xBVoiQnGkyw5{!TjnXfr-4cm8fY{=e9LwUh!>mE?Jh0<>rY
z*zSBqivsxWjCk$cmEZ$e2Ekvnw?mSjlak+BW1t(p0(2GtLN+MCDJUo@D5NPUY#}J(
zE+`5=IEFhoPANE|3DAZ0NB$LpAcF+{Px-fKN6hr#pOn?h^31;|t5mc_|H{AZJQe?@
ztSUWeDZWrv%ZXknt7)nRFO<~`4siapwRe4?tSWecDXS`hFO*e9{jm51@0b_LDuEJA
zVs?&7);BzZbTDPrIJcrQoYAKYoPWjht6Fj!!IV`27_{cr@3#4UMO|RZDrL_I0y655
z()bHy6>Dn74*XiTS&9Iwu?42A`a|rhAL92Xre9p1eObv=E<Cu7zxsv05*u@hSdG9C
z=bfvV^$*HwV6u<e3uRR_5DJ9Q!rsJ^Cr*U;ImJwLI7NbgQe$|Asys!~j?OS=u-I08
z%u&F1Dugahtl4%e2zQ0YY+pP<C|x3*w>GOW728Q}W%%t9hdURR1F_`I(wC}&;S%*$
zWO|hbtF5VrS6{)D)kvU4_edj4cJ0~|B1u~Ru|`i2mT<L;tpDaflrt-{vZ(3yNRlL=
zBZU)8S!G4Gg#}Yq4PZI>QZ>d1d{>pqbw@m^Ufmom=YN#%A6vfED}#4M5`Ai|UDz0e
zv9w5QyVv^BoF;kuxO8)MXjTd}FrIF9yt2}3JKL__cAx*9DO1yuP2lnNL!!JQTIVlL
zV9D_zX_3I)FVKNPA`Zw4IznF68@@nS$p<+^Ue*`gA~q7bhZbkUzmdp)BVepfnEZdE
ztTq5QLs|c%td33&Y(=udPj-RJu>Vk25%hdMaQ<F#OWux!=0(qs2UAw5qm?k5b`tdx
zn)Q+Z5ys%xx}5vW6tn*O{M5&8y1n$TQ^lF-PB%k&8P_;ng_(XN2td~!DzYvxW%U4<
z8}$jCf8!LFy0XvS2z3>tIs8RgJt)dc2-z<#Dp2wDFKOU~D6Qy!5CYW9nH-k?^R<rQ
zsLB*Z0S&?zmtYUjccW7V;)mwXDg!^<nU07q7?d)J4$7zk0fH*7V)@%IlvN;e2>=4Q
z4oq1+>u30#e=A#IgO*bPfF??*CP9U}?2e{$LgKFO(GRSa@J%A&*l)<&SoHuz010`l
z<-t>kdwqV&&baP_^AMC$nu|d?#h-76SuPGE7#VxvYu;iGglP{k@tf6#;%K(jj?&LR
z+4`|NI$TVWZ%TFl5VOU%n`UZBOPG``MCcM!`1YJRrO#S!?<ZjRY@hx)(p~2VL9zhF
zJX9%)&Z0#mt^K%lU{FI3_>Zw_-Wi1Fu;$Q<!X4n)D8TJ&rt8M->%+3T{*#ptb!V1C
za+PeJS5;#jw3fo&bUvIOOKbxK(2R5K|9l(qkns#g_5$NOD@b<>N0^EC8kTRH7n<>;
znt!y{8oHbv7R$6bMQyqBJ33x=v>DgEV<9=23T$+}-o>flzL`Rqc(&{JTvNLk4<%K;
z-2IH_{xJ4s!oz01^EB<I9!s^ueRcWVjMn+71N83Kn=f}N?}I^aC?K59G9hp<>gT*s
zQIN`@Ay2cq;D2?0T$;{=!FuzaPr=GJ$?C_$4B&&1T@(r_BRLVpMmes`kS}hlCYk~;
z5UYaRpMywv8*!tD<d-pu+_DCPSd1{&f-DL*BL%(^u$P7)1cj{E7jw(1kAuoO<g|#C
z0KMxwGsxvUR0}y5e?Y9CEhRb(FbD-vmjun&ksV^xq+;?j2_`cc1%No1OL99nAoy?|
z>4ls}21f_rr_%as#SK9W8r?tqVnhl+2F9y>vN2|>p~B!OW|7hOd&O;7F6H8{6}O>b
z#g>09QHYPIEL|itjpj2u4vlC$T!1O71+0PMqdEkaNrO@aY>7jo2E3QalVLCUcg#fP
zGGzgre;bF!EL<*A*O3dk2gJv1QZCcL`ImQo2%LW})6c>R`S-*pTpHNm+3F0xT_}I{
zs2Ip>gDi4}E@ALF=*l`1DiTCcdP_rFM+%`=v;<Vb6PM)xv8uEJwK=lC914}^t_MSl
zjri6@3!b6VxEqzr4I?B(jO7!(End`0!AS0yDR@J?FJ-MFpT0U%$OE%4<Gm!G{cEP^
z{V`BBT16qBWVTp*7ATj!q);q4Tk@qHs8Fr)wOnJiR5>50*uC_%+GDm%JAX^*hl*l-
z#%#H<{g%qcl45hmY=!mrO|^5CZ|$qImCos#8W79hx_`}9d4Jv1!cbNEPBK>=%(SUP
zzN|DPI9C%rwxRb%Re4Nft~Qw|o0xrAKGdX+yx=UaN=PLnAw{9S(+Ad2rZkvm7^k6&
zB1gfR&_80=r?E4qm=c=iXXLnIS(m+!IfCk2Sm^Z^%4&sOq2$Ve3YfAQ&kV(F4S?3W
zZCyvHbi%8eyhyoi1HR<nk=2`)+xGvato~R2{gBTo#LA0frX?uV1%R;9NkhEXgqKW`
z#=fcaXE7^4zIE&+qKOT>N7_VpHST+4st#`U(|Im&`u^3#8q7P{q8q~R<fyQYwQyS_
zI&>1}Z>Ws)Ov@vicN`QEjEUY4-KN4b9=bHIi4BC-zn5?x{u*%_pPr_FXTdY1?s1wJ
zOk{8yaX+AMahhzOW^hx{+;6UNnyO7?cs=g?-CpK2T{_M1>V&7yUGOxMhsfv>^`Xa~
z`4p5*od)!0UJ4GM+sjSGH+Gd-3XHGV%XdvOcClFUPtVvZRK+)Oj#yI7kJu|Nj5l$r
zP*E=T*egZCIds6)n)54p%V$ZvL3fJZ1qTpn36M6k>9+2_mH7Qycg%VB&)2&DOa6Ua
zIg4m)+mk+ZS$<r-8*kjgFFW;kRE2)})z}Wjd?xF|kPnXr#e$Y`7NCori0s(Z_nCeq
z==0AFq|UqV>=o9*wryJ|Anrko3Vsz8x9$A;ouMx>UxRAXwp-QiM-~q*lCkP{IW6y*
z^fPSxH{13&)_5kHK@VR9&fI_;*gRA28dCy9?)zj4yfg2Yuio>!A7I4s&Pf(sms?Jn
zK{d?~SDaiwd%KJ2vhdB8k~q}WdLNmfi3z`+bZ9JvII*r2{X{M6*qRG*>de)@7;bml
zCF*YG4mZ7q0<!PZ+(-5@<Y$D9q#BeIJdF4zheP4%tf8lIDZlQv#}cikN!@WFhyDy?
zdVkOUQ5!I#-p)X9aZf7v{<=m}<j{N#`sbb?M*iOHzWUnZ8X+ZbePRq2x@^fVALxEE
zvg4}o^Yb3xqiOHnGe*eR^NB0yah>$0+B3oZc&+tmx035&`rYYu?Yq?zPf+U?i{~Y@
z=eMiM&gc3B&*SI9R?sg;3jn^?4yPA1w*{<|*G7UD;+;A2g4YT-0ymjsa(gc-dgD5o
z<0pB~Hh2@=nZ4QYCdD_W;P!!~L8dnHf$aw%ObYLP0x$tTY~o_UbonrI`=a6cGF|!b
z0-1*1Tb0WJSe<-#41C#)EMO;nr+a)m=KN%Wi~`yHK6Cpkh?zPI`+idLS84Ls&oOPo
z#1bF$*WnIO*!1tB@YhQUFcG8jxAPpM@RMi?uqpC~To16k11NI`x^Vkr8w8GF2Dst}
zNgD<9egHtAd;FDuqhkR7%)be=!F7;t|6C&$11I41|1kmY=9#(vXJ75#&%u!#_~7T@
z7ta88qnwOA>!JONXW)I{KRg4ZDpfC@fv+boo`J*-#~07QXAf`#?BW078F(84_6&GN
zC33?g*`?UQ{b!B1xTFXs0n<A5ZF+TDeO&|sbcI(VkB(J*w@G!+cQee|cAw^o@?p;Y
zABL&rsIya3XhRd;2(YbfKbesc{^J<{Rz{{EBc8r^2B0^?R(0l|AQ9`{PNK3~!GMoE
zAWgLseRYW<jA*OjzlY%K-ciQBcm`lVT%XdcFkU<ZJ3>z%*<L&YjYMUf-O8h2&j2C@
z*gP-}_6(Rj8JOoyf;|HPN{jL@o`K{K=@K|}6ER<FO|G5dA?M1$o`Ki{d9Y{T$>63g
z80;C4R&VbBdj=*ydD&kcwD(>eu6BAQMxlT`1F=m3SPUdS+&{qy*cjP?sJTWT%Ot+4
z9qbth?2i)&C1KjA_%c-_e=9vkaJ@ZO#o`+w{b;S*S#R5z9;VuOT9s^i^Gmvo9=P#6
zmf`J+Li1&9X{IFCqf3kZmdIz#HIlckwkPZ52b&9+&UcqMzLdfff`)3B$6K#Cm^wYA
zf^IHb`HMP1;-0@??xI0lkhn(c|MCoAHcJ2BJp&XjXXQX0xH)jz{pWM=&0UTg+s*Ii
z;N-2yV;JKX&ww~(%n{xGcAUZqJhh9QBG@zVEhEtjpcO#(AJ0GmKs{if>t78p*fWss
zv^yk}>K1aQl{x;50L=2keekC7A^7bX04HENYQ+6K88Hbut_8i8f&4t<17kvHz2==F
z0aPuz!glB^uxFs*;Gnds|HU&fRnqm(1iU*e6k4R1;8l!9BnzM&sn`U221*!RO{$9#
zSiNvlze<=}Lxv@O$DOv|TdH0QcBNn+GWt-~jG|&X#(7xNs@1qN%tz78>SxLlFnW}l
z(~6^a$P#!p$7dCIN1{g2f?ZT<6?lRRIPHaw6s-<IFtx1?e6~QQ=t3DdwDy1r<*)I4
zmDxt#`_{j}rgdII&3lMN*VuaOl|dQHIE=&Sr9T<ct*sw5n!5JzC&|GJ7mn8g>U~&z
z=~~@#4DRL~U)h1SbI7paQqyX$zu7GyQb^x;OPV6zEVjHCU|;_A1%+$rTP2sHm+BgE
z*8EagIhUC(XeD#eXF0K<*Z=h^+nL~HGpj9)x$-yL=R4BPn+p%_&LBf?%LtN<3}45l
zk!*&&2DN<E*Nz7p`=h*$37r)W^$@1atvcyz%*4PJ2CkOlb~pzY<?hD@m-F%F2sfK*
z77*bYBp+H+;}km!&sm2;XC^a?E-7^JdLU>U@5Dtj^`0+_R74Pb<k9hnGDz+PVe4k%
z326(^0{tpl)9(87$YUJ>4v_HdjOb}InF%ET^Xgh$&nMZ344*2f+bjx|6*sJJJYw>_
znb8>%5u^4SB8;B3qDlPMS04~Hl@N+?0D$`8Y*fd=-mlf-)B-R2YWM(XqthU<?HTyk
z!M^9Zs$e5!iY79S(AQI+5Y{mLaEvKG7J=-d5j6dB{z|~-VMbE91oMOaoGs_!R$;kB
zdtw8;OXm?zqkkq~@js3{crT)(!t$toA9-BFB#mwdGyq{_OfF)t&#A~hF2cyIMh6s)
zLeUCD4J$Ti$FthxGyVXKpp0H57!>KlS`Cd%Ct*gkBOCDB-G^x1)OeP16tD&>OX*+4
zBzIZuvIo<R>4VGDIVl>>NO68i3)|#Qku9#;S2Ao7?5RoouX)>xWh@G6(@*qX^A{S6
z1KLhA?nVm*u>f9{YQpg=eg-VqXP*U-<+C=Gyc~a>4|`E?;3A&MybnB|^b)ZHVZ<N{
zNx+)~1k2>+Jjv32B7XHLlo>mVY^VR@qt|Ghj!!P*bCx7=_N0#sM<QyvF{R@0Bp1*w
z>-F{iXJZI?wx8JK!v20@x+yc#XLj<^_9n7~E|W#LIYqKeg<th$r`d?&`M<7|kYzl4
z%?q(d|NIuHOzb_IQK4PVk$&)IeK@EtC$7RM{!sN?BB)_CzS0p`@}(GYfiLQ7yb2Q|
z!V$f~_qpy$ed#h?@hXKPnVV{t=OR7jT4jVcoG1hb;)aCV-zHIY>X6=>`$F@<Ms_fj
zrMLN+XzNw<dSFA<uIOu2(N<3Q)U$pSqtx>>_5Qhui`h@CtZ&Iz>tF$y0R_5bvPcg_
z0Df{Tnf|(GTTG}vuhG>~vvbm=^cZ;>a*MGpprlgkI(}@DsDqau?7T*(@gP`MbVOX}
zy4+fwzk8edI9oZu%*#`mmgo=1oG$?h1$dv2*N)Kf!AA8V36651L*7~l8Ao^HlbsXN
zft1(Xr_p>~eqgV^&^h)8sZHF^Lw%P!mhSpbFyJz{|C5ei$Y;V0TD^@livH>-|GX^{
zES&*C*o&w{vwWe^8~|ciO<ZAFSBy<J1YA~4LZj5q16}fvRs#m9Ingc~Ue9nMg>7;-
z|1L{q^4O~n3Q99iyX0t)V`(|I>DG+!{CkUIuDCX-1FyD)kX#~NzzuLP-1FE6hNbW3
z5l2kK&%lqADpRo)SK*fn!HQZc32}3FclhmNfS{J|dHn`Op9SazA+;d>Y=Fyfg!(id
zd4t}ymHodqz#myR%o|;oVOignx?-Cd54f&gRot|nx97Tux~@HqM|WnUoO!JotxqsF
zb({KG88WzSu$ws5lA>A%v!`w%HQv>{v9JnfNZo?Cb*gzkZW&FPx_!raU;RbUGM+GX
zr_8~*THC`U87p-+r{TWJy23aesTBYv<TV-i&jwh-&g9W~h1Tf-H80{@38?EpcH#kV
zyX?Bu@%d0obhdSo_@*XuWr;n_kU+8B3Wi84()ioss|5?I#$NRkvn<!H<BEZ%t#o9U
zJ+8G&;B99p`Pm%_KM9hhQ{RN@xuf3G8u5h5;PRIXr^2UVCQZ@N5%tTQU4CK#@Jf=Y
z%9SnEGrzQ^@yy7V>odLQTy;{>g+}?CkOBcB^GskvXZvY@CSRXr-Xqrq$z-pk(D{m!
z+lSYkpGGWoFA1OB2tH<pPp{FOptwK3HPD=$&HQpZo8+aH40-~7?tGY^_;r&@syrKz
z@U#bFEc<+Lv~=UFbkxZYdW91JN<L#}K&R3lfRebt0|5Eu<h*#IsF9tZaxT2ylF^@2
zdb0_6;~04}d3nDo@}}+b2I~c=0Y2okJ`_Se-~>$S<wIBGL)7KN1oU|Y@O?w;i!0>&
z*2ovj%a^Cfmw&+*+}{cn`CK$m@j5}k2%$>b_~8iwng;wFE&&pQRI)}~@<x7NxgowK
z=_=Dg$Tay$B_XRSQHkD>>55UQ7oiw(Q`z}@;-C2|!28!$1&Gi%kZlJ*P(s)NDUF)~
z`E3-Pk|3;t{DpCX@W}!`!_$4ka`P00H%JPKs0j+Abxe%%iyEW_SHYKc2)={<Nkzd<
za0s?e!2vPBSwSG}@JR%Z1-%fRkV0Cm>Z%al8rq7xkmVVqbg_VZqtH~PU~IBbQ90WB
z!O$saRYwDet{}=Dv9KaBlp!ZdKen(@BdN`(P$MVI0DSl<?(lPLq+Iv_x0>*uL6SeS
zLYDD7q+kJd<Plrkl91<Nz$Sx(q;SWsh-07xly>;}ozVlOys~!WZIZ;MSJ0!A$pJSW
z;8hfdLd2j`1PqT3+&yjq#T#tpXk6!L{N!kY=6`qwf};_%gVBZ}?Jxi>4Ka+1G0gWd
ztgm9(7Gp4!(I1>*v=w6$uEM#M4S9Ju)bP-E7h)}MVy~z9&cx#KbmCI%VkH)Jq@0K1
ziiM*-^XPpMhl67EGrJ7>N~iaY2Tr*--cvV5eP2iOl`0x~g3djcjB<iXP6WaN6lzw2
zX>+^^Fv_Bs(hvdGPC3zm&L8X?;HpW~oJ{oK;S#4y;{TAOp_LSfz-3;X^sy&NeLX2M
z`K<z7viyf+HLc{teGY>`Qv`HC?!9S&b4sToDnyr%|9Wz!IOm8C;EF4?PC2!fF4g)T
zs^UIHJ2usEJ(aI2wawVOhbN5;CXHJ*tzX$|xH(OGK5hKoKD&lSJ0{@I=|&bj-7NfL
zx+y3A%cAD7T3ivo^>@E-fk$@;>LSa3{bEt;@eMRXjhD%@c(JIl8rhAg8wab$b4oFb
zW^1tr2b#C8&E-><SC9@kU<sb)UCw)WzLJ23`lm%L0-E2|Cs9xW1}+9{Q43F!CV}(M
zDlCeE%_%D<fP{+2^se}AQDbUpbAW_qPH6A#!|M4?I55~YJR$^%%rXwPs9}$d&MgU6
znJxdesEr_0GjIR4sEO@PoxE7oE+)^l>TX^vY8~UwU9i6`YMx1#H(HuKFBUboC_oaF
z4;I*>=EOq48}VXMQ=2~q`^aeJDO8Q*UZxwCZqrvU7B%TJ_nE*KiyEl}Dm2)l_63nq
zo|}KT&Ui4SJ53_JL~c*6M5z`MyQIGKo1b`R2(hW<?$;WlY2I31)5N7lt3d1T_>JK6
zU~R(Hm61f8nNW8qq}^TzutiO+i9%ykNo=)0iZYRv0X*HH`a5f^B0DqhO(a}qz)16+
zXtw0b_cE2W)N6gO&^>i$Y~@rNZm=yKJ5p@4EY9#mnxJ=SvMw%+WN;jIX|~O(%9I=s
zcWtpx8ro4?%fKYPJ!SUvCI#7W{9i0;wCmu0AJ-_#8TKC*HSRP3iozcjH54%?Vt=yV
z7Bv;x9DAw)aKFz|L7NT*L8bMFMGcW`D~b_XD9@IJObN+Ew4gvdR`y0$4}8K7K9W?Y
z3(gmive?&GRPmsj0P`dNvZ(#*8pkL`oCXqd=J#~-*M7_E4Co-bH1N!>)s_7(i`q-S
zPcqyE;e%S(Mc>{WqnDo$Fcesr_Q}Dx=t~4|oJO965q(kdO(CGP{DJELx~ktL6B2oW
zce_j&c(7jDQ88#*g`QHPUf$QyXj0QjF>(ZQ>*al9bZwG(WGHA?;UlYBV&*n$gdqrp
zZGvEyJZYH9NY$u2fK)PXUDg4gus>N#R<>TO9v;va7L-=n?*1yxY==A@u;^~w4XNtB
z&uOW0gMMeW)`&U%+Cmkl7tgBy{Nt$gz{SI(wZ&-!vUM*->QTx7z5KG($f5cX>*%(*
z6uS%Kn%inO?|hln#KD&|w#n2TDGo<$(&zM1VFsq;F&R}uyP2tTDf`)Xn(gV6D(|@L
z=Le`!Zfv9?%ZX+T98+%W6f2)qhb%I~ZGKvENjGZitVv&txSXyy;<LgsH?5DmJ#(QW
zQ~hy`6D^Mg+%Poak^v<q2^%?ruW@8hi1?x+K0=NIv>pyhZ7Y}#mDQjhv5Q!8AC8&^
z&RMZxuKqq@|9vD0GZTRf82o+04nke<%EbFZ8TI=}k`J*t4Dd6M<<}h#Gg<ZFx-?Ha
zu>4JSGw198ZYKe7?~5nr^3Qj<DwmNxVAJ9M@r3>LU(2reqgk+Ae=NIVrkwfFN@XK{
z8|=YtIrC=?%SJX7>m^t^3*a98J>8HzoCW^ZHBRDS9}Vw$uxwb)?`xbAR!61LO>6@L
z5vG@ZpIwOpe}KE62RS;-=t`%-FR7nX2P4=bZ0l(BPMBxO+Wuo(E{S;JfWQL=lE_mo
znLS?Ldx99m<dzL`ykOtAyHU|mWf16;;^MC+e+0yj>hU`j4awY8#b*2@rxm^*{1Sty
z`-WqO?y*tmYeq~!g&Q^AH+)Iuo~ncfJ91{*p&s>%i;xaCY6d9$(XTf(NhxjAY_Z9M
z7|fT6RBkjJA8E&oeX3ICuE;pwFOH&GOec*$(XdO?$|$4CTked~z)ly-ATh6h{=47b
z-IwFgf;tl8rVfYh0^Ikd<2ZXWa5&idzyS9?o!vva?^<NFXwl*uB7FG*y$%A@i~tE4
zTta<JI6{ezX@y3_enefo&v|1-OCo&`5(;aV$!HHF@t#0FIf4TpO~6o^i*-8iqz;E!
z-&f-PPCnU1uSkT+gu$gnPGNJ3xV{Zj{+$a9GJibrxB3`KL$4X8aq`jwfN6Ze0c`0f
zoKnN@m=diagGfPdiNswFl`K;f!iK&QIp)jBS}z5>-NhmDWSaf5rZuP3Kv|WaW2(8L
zBKf@UQ}VNHMq$xJ90|J%02nMY;2K#Rce$y}LMb=m8EJeH&jLW<mz#VWS(>BhszzNZ
zL8e85irBYf(HryDKZR6{`<cLEYF_$A3W+p7j>9bEx`f;15OKHRld}|PkwMS6N;MzT
zu8Oxvi4lvn>BOZ`BxleZpSoe?6x{FQ>wMQ6c&xg}xouyAq5ssZvUt-H(|R_>vXPLY
zb`W#h@ql6#W=6nw!#vs!DZ}byO1`@G0ihc)f;G^Bd?niiuL~2r-(t1#B~L>s{%*D^
zh#?NC#$zFloTNH{a!C`83!#TTft5vXc@is<?faVuD;Af7pNiew0|+GjDr>K+NTGPT
z`h<$Z-v@6|QYPbrer|ieIoc+}%k2fhSjXeEh50Zy$4akWxXRD#lFBQO-e2z~|KK-3
zB}g7Sx4%r;Fk3a@FV?awxLltp(-+81oS?nA%-s2D_<q3I*O{{p6bf+H{Ya|f8|-iu
zj6bF)?wB~G)o_)8Kx`xphdP~tTw5r;Exp7hH<Jtd1y0)iKmkq3x6GoxR2~|r1bPFg
zEx3j?cNbIGa}mxO&#UxI&(`{8v(VQe3x|j9_2)ItBBGMlpZhHq)~*vR|K4x;?|xqq
z+3QdtGj$bpy|EM|ZR!2Eyh_4)SA-yF>F=7dapBNZ;J>XyF7a~;J@WQDb-J|^p%BCk
za`WJ0oEMvFG=!Bz^YAy+*Dk4T$Sm`Xqtuv}$;(gVZxeOKEypi29-sDv&|3bSZovC3
zBfAcpA`KZhLd7T_o>S!t*=Kp2uFVaI$5k6$css{;t4ym77pVAB8a1p-vfEQk@M;&?
z?;MQ#-A8N(v{o{mZ|V1*eOxsS*3zFGkzh%Zec#z^FgV@m(2xv<f|Yo__jg319zL<R
z`a8OA&Ikq`iK*YL_bBh2)dD>Fas##YO`TmZ3V(T*M%HC&o^~xvC{NW{W*s9P@Bd`C
zx=kmkKgEN8`c&w0hsfxWAE|j=8@Vz&*r+&QoBbrkp4o<7vvOI<@&=R1^0CKKFoSe5
zM@Qk^%p~5s9u@2y?KI7W{Yw1D<%!T+Qodg+EDq1zYp$ScJhNX^1xPod;^l?fKe(8{
zMSl~kSG0oHD+jNM7%xO4BxHDTR9bEHK}K-VUm@#VgX?jzN8Y&Z9ct%|k>EX4<4rGz
zM73agcgsrO<WoNB6QJjV7~s=~>B~lo$iXefnWV*y&&b>4n>gv~bL9((>({~NCvpe(
z=}uG(UrVBhL2ALzS%`K%;icbKTkv00w9vv2(BZbIuCmpX^H(&&{!trXw!r_&H^8_k
zfB-ts8fZr)6llMI<rwhZDJjqaAN!G-xDCoT^(K&dGH_o%$PuU>!VMWz<QWbh6p0)B
z>MV%xQ!qHOCOJVQz?-ESL8JqN^Lk_gt_6&7pXs55LMrNTAN)f~iX_SwLgHgWDvcxt
z^pUb@eSAKI)-TB9$O4*+LN$9r+mpnrX|;4dgnbti9|#K5$O#*P7ayOrRBND~#19YM
zMutWA9}b{~7vfpRkJ#jn*j9?zb&3d=S82+EMivTJbig$KhQ2N=c%>A1;}m%}D1hjX
zd`znwy%5Q}3)Uxw|5^wFD2K!DM~oYZ7!1O|C7X4^0;olz&|gJU^+g~mM`zGPp94A3
zilb9#qF-M{lkFQ(IEUhJMEz8X*`tm|c_l<O6yxF$LyH~DHe|qD`~lVrpuP|*h+vM0
z9`}JKPDDBGlXIL{a-0NRoVF9s+@Blo|2+|eBmFfI1b`<3@cCOD)QeZy`~m3HIaHH=
zstAt?_A1jVt<z=72K!<Z{q0q*{!#S)oGEp}=u?uuUB%j)rZnzX94CK!m0fH_p&`9r
zyvk6Yd`X2+Kcc>zzy0l1PC*Ng$Yl_62m#;c=W+Xk&)+<u%E&W+dzBNj>pG|`I(vk>
zd-1;akRU+*)2lp#2uCv5zq<BrojzxCXIB;ib{l;DcJk_Q_x$vV1_Cbj`Y*3CCU#LO
z-0z71YYu%-<gbmNxTuKrz8A0Zm3`$PbSU9(uksX(a1`~6S2@O~L5v9u%vP?Uc=0Op
zwk3Xk@hUH;Bfm@pipbP<d@o*QJkCt8SK0ofC?#zv*sE+u3-&6PcBsAF=cj&|C{YiM
zHB<y|{778UgC~M8asQtyBY4_N9bQnEtq)(o6TuD;JQ3W@FMuZkz6bC`utR0RV!9e8
z{08h*{=7|1*ivU4av)Qx5$;`uJy#{|8X=u}xwX{9BR@XIXS2K7MLvNlLv#k*9E3QP
z8CR<~)ELXHBxY{sU09y04OFjaf1Fuc?fsn3+~GEvh@%(9IU%SIfX$g}%zPK~`uR~1
zW^>IGd{vbH1oN+n;P3a2|F2%<oXO45*Z7ztVH^(-x(*{+xnQsI!9rK~917XX`P;uY
ze#Rm7?1cE~cHRJ}S;1cAsS8E0SGhSE@{jipgA|Cem;3w@aj(QTvqpRAUQ|L|5dZcn
zgWo%r3f=5v{PuFfHnR(<V~!~HnWAZiiAW&PS@#Q4RhE7dySN}y7TJa@Q4|+sED05m
zD0>-|VCL|4msTm#mTJ_;I5BuNhd7BAwC6OLR#Bo#ng#WfJZ@A%*Qr2&%7-bM80vm7
zJ2BMH(sMI5ED{WwHImUFF$Zi$m})og$_<v)Vq2v$yH9txT0muA&{wuxCGZ}$V|k36
z`U8J0Yjr`YrdoD4R4g6wo>2T$Z$m|Mt7^v}R6Fg!F)g*~N5>pJ_agBm(i)^VZDj7H
zMuN8<hSnIVX~fcfx)>y!a3dSyObxUh-#i|zb$l&<&+f{ACXhMuX|2(GN_2jd!$a^L
zvHFahCV}njG0ZXj+!D^1{rnrQCwnu=NEFU0gG5pLrMB`hP78}p>D0N2;q<h52g*RZ
z)l7|WhPChaNKJOuXcj6P0f7Ndo8(mMf86J*GIxP^ItjY&Fkt=uIDacft7_(P<i2-C
zOPjNJr1^*~3(to#DENrd2!>iweFVBjoOaHm>%V8E{tdPA^jX-)_}EUQYLo6RGru+I
zUViYNt?h2h@WbbOpeJN{z#1ur@!4r%ra0gj0H8a$fSa&JhX<_x3AJ)t;lcF!3u?uf
zb<{9WN1`lC;HoTiNt+Y~S0CxiD*Ks-c0q9I9LjI^UIT%$riax^*yaCaBKX&Re&gVO
zZT$TI^WKq1!}U+7)&FVZ2b0>fX_T6p)$0TE!A0WzmOhcUxYX4~b<!Y_Cee1%sKM$<
z#CRA@Vb-)Hlf-38jLR5nHQ1{>S)ICG=g&HgKW^iolV-?K$on2*z`i9G&;QF7-(IsM
z*VJXk4Aq{%ez7#i309`*(`(Kx(Kd;!+E5ZQ03_}|Hr^$Egs5DBa?sQlm{3hdaP9)L
zV7`kG>~mp3AOrGJl?+6+wdCSzV#8p_=%fV?#>f<G^Ks5TGd~1R<0aV@+8GT<^EC+;
z*Vkd4ZUNz;>8Co6bH7UY8-^IQ{6NZLErFGWS3GQ{NdL5nNsFRQTQ$tQ>#vZ-a&#cx
zS<>N@&{d$Sp7DN@{sS&?eF^<!x1s=>f@Ty;30F=Dx48-AD^@LtAn7t4ype@|-ka*E
z@FShss3=Hep_-&I@I(;mg)2B%`t@VBVI-T1-}6kWKzX<N`M~T!KIf<OkL55ACX$ty
z9A%a1-Cxw{XLEMvpi9jUE!D}Ct}z^%s$l5N<y}?UDCTobK|3OHnIk@%E;<b}#NOuJ
zCW7+@c+jmlhS~|L%fOJ^)~@h!+aIOs(6ou|OZt9h8w@_{20ATQ<&`e}scYzFw;l;V
z76kA%Dg@d>8(n;<H<#8*0kcx)o|}~$663~Qi-G};!I=kC+Qv=BThjbzCU4g%Z6w>K
zzT@vKA>==oa2~&PZ2Nx=OSPSe9OLF?vM=efP}3$^?ve;cc$46!Moiv%H^{PV0!i>)
zkMGTwA?XMk#*DC8YRUWIqAVMQ@~|CdxDO*zJ2i;|qj0Q93Zr^5m&Bt_pE*jCN6l6X
zQ`e4mxYumQ?fPrd_k;KNC7mZOk7_ehk%5kgE|cN(bs#>paNtKem-H};t8|j`aWTo3
zPjQ@u`78ptQi-<HX#p@;%A(+n_Y`{w`0LE*FbT@a?pg2{EUPzspt7YfH}T!R3Jekz
zfzNWz;s8{-62rqdOu_fi+>nP6A89izqmBO3tI2$Zg8)86z$taXfH&Ta0LpPNtN@7q
zKQ`WNdIRG`8tVVC@zZfT2HyC2Tmzsrb-~G;`4B#>!+&n-!5cpd;CtFYk8J9DEpr~C
z`m~8Z(bUg1ejefav_*#2JSZx25tI6~O?w*t417QULnH*m)p$nuHf&@}b%WV5?`cdt
z_EQ<&?D0-OPf&x7FO%TXv4kz{eni7x<*HKb2WdQDq@LJG2)R#kMK*2}Y1qT5txU*q
zQOuYAy5<jT57KpXS=@JXpeT3-ntIwU2j1Oe4XBUV;_0l|d)#vD2?V)jI<E~qIg-I<
z?D&$}Zg@I5wa~1Ngx+dz4IS8<fU<$}oT`A7zWZ_4UzgH|LXDzp<^UouosU%Q2j4!2
z!_+-qS4FlT2_)Ju8@JyC3_Y3JlP<uXcW`&!0wcL$w<-qe<@T(+!h$THavOy|^+qb4
zr+%K_+soFOE)<lvO?-kA@*G1Q>A1-yc*1leeS#4NK+S>QJ6b`{XOW#xd!IoM%b;I(
z6P>>{ET2CLByrk;rvON9FK8t%@VZY77NAiSYA+D(Va^LR$Pyjj`&tozCFXtQ;Ehjf
zNzmjing9uY?;yqZp#bV2qVs47k^R{<i-Wu7m49^2W33>qK^z_94Dc=G-(ZE#?ef!?
zO&YBL5dw~g!56RsZ>DViq$s)w_?FTkD%GWPy~;^<CS?M69;WcIb#0<Mw-kI!>7@8-
z{B%##+}+2*#uMB%2Y&PoGYqDK@eYrbwXus#N>1T(jmwZqrH;wW6ZOvqCri5Y{Jc_<
z+=`6C)WoW$W}NccI5gB2{F?Ug`tAWjD%7q)?Y6$KG2GrspZ*Y>(W&L&rJrl-@~azo
zjoW+RUGl>tmaSvw)07L(E_lG*e{iWp@KH!r`e&H*YE4i{JPwfP{CZ;5U|cFSG_n;d
z26&T(48&lAAYPL<<bcs?m1bK5?wU*FYSIv1x@JcXioPLm*Gxz02}VY71dRHAjHOo}
zCa1<Ikj-VArK>Obn)ANWWaUAwz%QP-IfS@W#vr0fZ@OfsAa)hpH8<*qOE#WV=XM?)
ztPl><NrRK+UN(JGl{TL(8iU4D?_p(O7^P%@wj$)xP!c=W3Q!TeORmT4OM*gRX*gB%
z<`E~o<yyO^Lf2P@vDHCuK+F7)S?&JxWX)w6l9V}#^L)!nno_gF;qB#~p0;r2_$>GJ
zp**$BV0b&<kJYmFP%b*Rw)^b4iPF;&;{AtP=Jejo&mNS|kFTe<);iG}ciNs{;G;nf
zAOs^ai5ub~GX4i9V3wMu|LwXTw&EXMGg$!bW)RiyuDPISGlcPf*d^!pu~muW6o=2#
zgT(%KvgF*~j+LPo>iVl|Rx$u@(x@pK3wZ})Ykhp%ZX~vwEXfb(f*7g$i~Iz>rJNi3
zA(H~g>Usey{Jy1p*`%Qt3NWGx@dE%B_Q75AoU%~r2h`$-oDf0uFL`MWU?9M|x$2mF
z0j-oG=&%}ulESivkk`c|$sxPY#ly`drA@;K3}Q7I;t;vkGA^bSeH|^OAKP_O<f=!f
zoEbs3QmhY3wKEO(jCGQEE}}*AOSnvcm419C$c>)6V~CD;*Ue^pg^~*2HII)FdZz*0
z6|L7AgUlWGGJ_VKwEaj{U5hb%XDy2r$tT?;zf2)Ik*8l*ab0~1+i1s)Y_jYp;~ll`
zMesDU?51!`V{JiC<j)+qERoviV=6qdam1f6+Z{q$20x?lY7*H@2r^(`Oum1eT|O!@
zJ$l(Ijs$-Rjl<=xIVN|?Sl1)=4TX3_h40yR9x(#x#)mMHm~37vrF?Z7q+i}(rqCI#
zxo9KVX1C&?8Gh@bb1Lw5+~N`Cc7+M4qHYz?V1Bpp39IRD$?Kg5$x@8&Ypb2z>+pM!
zlbxjp@s79aIQ}xDKXZ$Yb*7;DUWu;j+m>>9N9QBeSgFT@=(P@_ofgn1ms4IcvZsFn
z`4~C@6w<6woM)U0rta0zL@w}H39=Kt*XxbE#yG)@(OI{=ew7}1Ju#XdnDbemdmpZZ
z4}Lus46eyOKTSKo`*l98iTohi#r=Hh4uPG;hxoskdkeQJ_kHVoGU*VIE|KmMX_QuJ
zP(e!RE|Hvc!=$^rJEXfyx?7|qrICjD-sswUueHv3o)gbG*Y*Ap_jQlo_>S=zeQgG0
z<u0g7+UO*+B4EjIzWw@TtGb-_NvrZ-U<J_&QS5j&GFq|>!Z%wu1XtQ*^oz<!I?G~s
zd=#J}Xa=^eaViN~yFW3A3JonB^xpO*RCt-PfM_)5m)G2d10PryfGF{c{1nrY&5Z-2
z0ZD7iz5(~#XUTsn%j#NG?mv<=Us2d-=G#M8+o>nLM3A2^wS92Q7M*;P(Y1E*Bz#+B
z9Sb+F<K^FzH2+Cu`M;GVpFjDPq&fdG;&yeC26~V$f-F7iMRJ;sBKOxW<sZtDXej?B
zZ~xdoyOgG+jtn?4$QkL<9}I?K8lshn__mp}q~FTFuFU0gjpnlHe=E3Gl_%mmq2Mj8
zq!%F0&S@d{I?hxHon{K!3n_e)a5b*;wLbv`#pB;}DW{51I6O*;7|X&W?Jzz*qR>#7
z%;z7Pdh;n~B=N^pv+_E3G)Qq*T}x8g$Th3n&gpf@>M48|$vYB8yJAHhgyMELg^H-}
zNQO_*vzpa;a@i=_$X?0Jk0-u%`o;%LTLNBl!)rJ$G!`wyfU$1*vq$a*#vklxC&X5}
zYS~U$^rRZVb8gd!ZMP*%kwp|QQDZB+V9!Mj{7Jv!p%69@_U(y=0I_nz^#)5*X2hzZ
z(XX7bP1uMZA<fR<eciZba;yDME2LT{Edecbie=S29-3Ya=PehAo)&Py3n0C=mh-(b
z@t+Gy@J7q6yLMJ@DHgR+HMAQJst*x~Zm1E_qdV}YISPqbmiC~kU=++Uf4hO)%Tx%M
zLi36E_l2*7DxgkK&5@tRd%Z_l7xiK>pTv;KbRNG2utM0@j*jN6wCty?FMB{C;y?5-
zUa7&SHgm>KB~~(DzZlTQtc>rK-QY~R95j}%Oq_W(F~sH_cxQW(6onY_wto%|HT~%m
zSx2L1yY;dzu{No&A83N;iKD)lRj?%FkSzrwr?C*X?%CuUI9`Rov53?z#skrCdFQK%
zTNDqoS8}Ek6`xZE5yjxF`Zh{mlO!Oah~#Ej?YQ<hO)KVC3w;bRqu;s`Daaj$11aw4
zCdE!&{qTY#YWoZMNiZqs62l&&>g$fBO7sHpqwLzhcPanwHUD>%C6`n6gBJnoLIbE1
z&F{eGGB;l$lgQ*56!>xQK!R@?ZoXRv)(?`3*t}gL+q7A#?>9>o>Q96Ju*rE)-$!U<
zn@s)u`*U`K39Y+R%~vVnGO(UWIX1Hlde4nzB>CxTOj|+aM>8sq4ZtEpXElwFDA4$d
z7B}S`N(D;Okop>z&WF!iu5S-Ku$q?7<xd|Bm5b@Lj?KP`z96#7{Sp4{Bje-8j(us7
z$1%uPxz&BYlx2GFDr2YQ)p*j~X}&`9PMT6zkA|(1p{9$tfp8|upJ1JbAbvoy9sHJT
zD!I*kyF=F{nhc@(f0Arm$kUM0xT)r~mf!WiTna$4-9-=Q|6*aiVz9TFummJq{2PX(
z`}*IIW#fq6y92qhg@dI!w~@z~Bmk`QzWxW8f!@zusqqoO_u=OlcpS$Np#DeW9+RGt
znL>pa4!}C0aoHuMWh7~Zl~v_rc~$lK#Wl?>Ar%cB(EvWYvoD~jdvHjl{mYooFi!9I
zjK{#_!s5%(+3|(x<+1s%n_Jx9*85f?evEHypPVx99yaV>eE)fS$8df&G)`|7-{g*h
ztB#_Ijo<E9kI9t06-Ftch{awQDfwAXAczD;Z-BuVnAID#AQCCdWt~GC&C$pY;dq)W
zhsFJIXYmWJQBm@9Z$PqD<&QlS37eLjhZc<IDP{p?VD*j?wtNX-22P3PTBtP!KGL9K
z=_msvTeZhuSy+3RB8@c%^A2n(XtTSu<vQpd@KIzgb)U2<w?Gfr*6Jz@EF)31mImik
zyuT1%*ptf%NN=EGqKU8#HE>5w;Jj;0mD7+k#LhI^U3#!qxv|*fjm{3|Tz9m_W;yV3
zxT)TEVK_@>bD0$FaC`O@p+fVs#`E!o)}Y6jDIFIlO+|WQBX0IbXNPLcVG3G}S63Ij
z-(cabt@C?@m-N~&^_2(4>8js9I4paKe$Aus#-2ab^uZJ3*77AHSJw0+!>LYFdE|$J
z>+v<fSXTfsHJ|DQYU$Rh1ZE3EmN4$HF?HZn3}h{|)VyykY|@3V-CKkp05RYt-CWkk
ze8z1WMphxl9J(j+COPEXngz5(gqGXi3547j4e=l2@NXor%jQ!jn&%d1%9+(L=AlJC
z9PLhq+>L@jj%OyMX`e3{?<Je*Rz`Pxz!p&d3-rni#Y8sA_FC21&WWEM`;r}<O5K*1
z?gzj+vjGSXQ2z@o1S4=P|0Dc-U;is388uM|{ColeA@NcCDDNUL`|-JtuINWa=YIcN
zSlJKY!>F8mXI4@@ypO=jk3-RxVmjl;%vL$KQ^m@M3$kjf`%z<NUeB8nG=wl-y1U=J
z*1??7v@$Bl+5*xmI)L81^!BWUqc8r^hCsN8iL}GS^64{1*18oZ@uc8U4}O~MQ74gP
z<5AZm=hGt&GDs0g9d+XZN*?V;s|t=s5{sNIu1e)1px>}gWL5xrL1<A0QWz#H8RD%a
z-6EHJ6=Dv4LP{A>rQ9XuTh1c$h<i$z@ChpT?Rxf49EX}WA|M?N)_{gL$$LJF7R<KX
zi*{L#4ol{t7UY92NqneFp6-t4aK1tH4y%4LVmxb_n4x^@>g4i{-vhN>FJUomPb=!9
zBHe{@zGu>>@Tcc^??ZNSnZ@{aUqoU$|HvBw$dVg#EqYrGFb3xXUN+2|{UR)drrjt~
z;kASQMh2G?_Ek*2)4e14+rU9B_SKVlbWN9YdUY%}=v-JB<@tsYgX`5!Ys$0h&9pnA
z8@x;fVIQ||kA;t~R8-wy@D-0i@O1(s55hfe1ed+;@<eV>$~`e}$Po}}T2MFqJqe06
z_c*uGZay7)?O#)%;8L=F2q+hFPFg~h36J{~4@gD_g&X=xVQc%!942B$<&a2{Nj;=%
zr^K|E?9#hD^e@6*eHhr+rSs@vfFDXGj?rirozTNTA0p7#Tw^aL7$+d#@O<#<QQ+AL
z9tP_SA`$y*zog215~BBB4}HF_lh^M_sP%ieM|Q@qSXQ5eG0tYqT%mLegO3rsqDd$t
zjQhl6X(Qw`*0D&pC9_424I>x9%r&ZCY^|&<Q-B=?akZp`;K+Zs{#Oy3*F-Ce!2plH
zgF}bZ7W1qAH;!iRs_OCNzW&$K?*nJ5308XXtNxcUj_|Ag=Vl65KVa|$Eu1Ka(o1?H
z8et)yH_AG<5<BTI_t~Z+6QajfoaC5<oXfUP%*s<#7{-59vi-(iFvu1B34iftSm*y1
z{^GoUrse8qna6`-ZDg6*4wAF-znFo=`t&k${pvt`;@%8&e(N?*#Z7>{`GQ?aJ#eL}
zDj&b(Wn-+m<WjU*iLXAF3CY6qig&8qh$3M7frX{3v)Z-?!0>_0;ws5`T`MBN=i=qL
zTsDvDUDy-wJJUuMQ^nc_FLjaf*d#$7`DGA1N*SbAX6YaGzb|GTTFZWLyCDGnLPkqk
zU8*tng_w<R`8RJgQ0tJGmuVJw9#tq#_x8ci2RJhAJ4{t3ECMkfhc4|!5@;OuO&OeO
zj~XUfd?V_<neX}B3VLu|7iAGg;M2nuLtoXd1&hN#TB}uJ8Iex1nj-{t^A*B_>K>tK
zvk;47o&B8)xM!(S;l5;g=(~`<r#+v8Et1!_N{RZEERTKQG}akM>iT7dnWI~azf;T1
zeNphUba)+Xz`4oW&m_bdnL%pU6nfcjFnyFzOE$~&xW30_V;3qFyvml9(7%Yv1=EIO
z*?fdtG{*Z<B!yCLTUz64Jbt(;mv?CUUb5ZeFN$)vQZ*e+4`hAC6kLlDvgaw0OF%^-
z-*;5}b*C!n-j!H<Kz+ZduG+X!Er}E8fk^ZhSZCimkFng}uuiyioh+jYc~)WyP}ww(
zis<#8m47wHVM$rT%=2%gk#^%*)1ap7#3;ws$t5NZ1GS?^|4(M10uT=vK8|g?`OXnm
zKWHR>lDKfQ!8cMr>~J3sNY3js?;o+KIxo`-VxHYlYP&&EKV2Yst|qCHIF74+n)ej_
z{p+;3$%pE8MeH)%YQhQQG3KMC&aP@Yu-R#>L=a-#?VeRwBOuw%8y0T&A+3TnfMhc{
zK<rdl<+aDK0(CrIK7=YXtrCu0^a$P^g=;x6S8bhEYAp33Kk|U%8Tl>Qu$s4CDg0Bi
zi3%?~M!kDoBPsIDNa1>Z;qGh}iC)fcDgMn#>hrR+&;u+?-@ghuMnK5H{^q>_LQV?b
z@DK0J9YgyYr1ai<t4B6{iARjx26%7!ctDE{5OVTJA;tI9^?M;_R-K9B^%)RySpE0Z
z^*Eh{i>4Ox7rQVIosTZ}Le9#;Gbk9!VPp~<=?*U*dVke@6d09ip2UpkmX@REodIwh
zTvBq&J`~etmshLjSJXE&a+KDTH&Ilzme;idP*dWTuAF|-&Y_&1k*VqW!SSdW!m;_N
z$;H(*=-juUb=;-RpcR0+{%+%k`{C|s^wHI|(#ZwnjOx~`w=7*$5S|uMR`M{t)1U6<
z30b9;t`L;ysdWWPKGmyd`!KG+L58C&!Z5lSAF?mw>E4lywc$30ZSBqRnoFbRUrs1x
zlOHI85i2Y5#%zT@4M$tqY_XyWhDp1|acu}Dfm7TV1*(f?=()1gaR-8a%v2grB+3l{
zEw);#wSJ(*25=l8Cp%vUYRkU0dcdQT11+|dPAD$3=HNZY%$rp-RTjAF4#Ypb=a>QB
zTe^6wNO?NIG0T5jbU#(JJ5#O(pHI`k(^IUTgepQYSM$-e&IT8^?Pu*L157V;`j^*r
zHlO<A7UsWd^quTBWy+Mjc+_~VH(%RHrI~SceiCn!$r0Al{GILV*MS*~v|5C-lM`k?
zt@o|4j-9E~Z!nLbDV0ZV2z2pro@hKM6ol(3%ga74h)@b&qMmMTKeE;872ijGTlnr&
zu?#96W(oP3N~F?tt3l7JQPzTAMr=`q@EPjsgg!H+(F+qHKh+7BIM&mPklgXsjg*Z%
z$+DAs888_2<{j~1#JO5Q4x6Cmb`FaYAmr%8Lrv)DR8tG+sANjF=_nPvE;f=meWW&1
z-efb<r@EAm8l-s;=oqE@R45u|KuOSa+yi)aM3a*DwztInrPYbR@rH%l|KvC@<%4Ln
z?}c39A1$^5obuK5@PJxLFalBfKdI{g$Dxt@kSZXS%5b*?iEr5)28SuK`=bgFa(mVH
z9ETbXq<8~^0i<IQ@Q`%lUj0^XkYxp0E~;hS&)@-(s*yr~W41j$iwHVxZ}dk%9Sk~X
zL$E12Ah<EyIA{f-zd!6m*o1N@#jz&8LR=RsK5Bku8e!!`P^%-_b}ElvQcs$<s7LTv
zg^ZJd0AbmxpGyN>A08wTqwC3D<|*34jr@Es+x92GUmr?jIqi`cF{mOT2`@e!$KrKe
zozOL>;GQDUD50Fzu`1`DL3DmVII9zs!Zr6WX^&uD8zRElPhZ(wvhcCfH4>R~A%uO&
zV!OF^(d;^eZP^@^934eu#tc#e&C0nb;g-9FR7dz<yn?kQ@HW)rrqCB6*PDDMby{__
zVw-cy8@co!EWvH4hckjpZ~H6MROE+wuKYDZ?yk+{8Y;HdGxB8WZ@B#fQD2)*{9Kk|
zzE7dMJ_ne0?8@i%?pSUYJ&#|wU2Y10^8?fhOjdQ*#=`B|r3uqXMsQ8*bgOq)3U+hO
zy@iM^jX9>qNoFMs-e9-87Egz-1%zB;ffoT8F6b#FcZ^@h4riSr@|0fe$xx{eoow2v
zA_Fbf64Y0!g90OqrjwY*#G9u$5?z#`l}rHYBh*BR>D`x2=@$;g@m@xcfM$_!e%51i
z(TxaZ=#F8G@K=5oORgRFf*Dp=9;C>%jMHwM$>0_g%w$bPGGN@pZND32IZ1UYMAXV>
zjRLiorN%#DprSqt58E_Zdkh!wh#SXR%<tJcEkax0U%a=9NGzY!&v*%Fx{kj&4i7jy
zR;EO;DpvIwc2u5o>5o4sd{4{#m>2DBDh|!(MV~dpFWkoUIIc{@`fO<;&o!<0;@X~d
zb3E0N?WDw&XHui1OWdwC5__94Zi~RZXE>y9Nt-mkNH^E8J;cU=maK%m$!D?MlAL~m
zz4MGtaN&!uP0LfXqihm>tfL`k9I7;#1$yD3?Gbk{moa#VTofIcyri-P4lMNIq&td<
zw39H`v*dgXCeznY(^W>282DFj?Z-9^xU$)awtJ-2o8U08b0icCdfo&)h~N00!vj#)
z|6?JSD5?`UT4>W&_`XVds`QQyr1=~L9!2D@95XvYG^^hnvr;?v_s<`r;aGk7CFCsh
z6|Eos5^}*xBIKR8Y-~Dv&c#Km*hGyiy+S3P`q{-LEM{DTh7oj$_*h2HhC<03990X%
zdjq9L>W?$u2^2n1J5f&(pI>FD(D@l+VHB@Y`{N9!`O?DDH)-Ks$o0vUTE`76ZU~(J
zmE$l}YF|6>b>HbX$Kg*x?mx$I_<!b@E&QUchdK<dkzZf*ieOg!8>s2!7sXJZ#U}fm
zN#n9#br@)|4Sr{Hz8ugd$NqHwWP>A#zujQTI&tN*A!99ZGw1j3T%9DFKNEJrV-+1q
z-$ymXPcNTMG8v{kP)T_nq&*ssiwu*?rrnCbd<h2)smi8*po&=h0N#DrgPn0`yKQ`u
zq*$;GEFiZd<3ykkBABJY`E^vUyy2CrO)MhD9-Mm83Un)^x<t6#m>hX|oDwZan6%c6
zZkJ@F49WUiy6@&wndKSrMv)5lWYhO)YKG&9)s<;`<raFN`HHi%J~aA$G&1MuiL;}M
znK$NC-hwZ-_divyvFe-qCxQ3u9cl;UJRMGwz+HE|wOJoLpJ_R34o=rp-m+R4ja+{_
z<B@6ccd_(*`hFR%_M!z{{@_tr;~YA24WdBln*WL5Dw@_s4<*~NyAjzc^W&^IVYWl$
z_lw`#=q|(dSSdnqlfMgZI#j#Dgg()pmu%n~6OWfP|C3{uC;zkX7ssq&dPeEA#5tu0
zYX1&Qmxs9Jm*S~E(qTjTeEf6Xt?Y-*0I>FpUqTK|+w0zYYj&=Z7W~u(hmGygL3;Nm
zA$N#Q5j<SPaf$RuJ34;khF<QyBYszki1zchn;M6X=fQWvg8a>>Rx+#OLAr#6u!bLh
z2)VkE=6#2e>!s_v^ERxOLw^Ne#{qWHr_gd7H*)hQj>C=y>}qzT<*at(H^%|1^`ckd
z?l|dREw(>hb&C@2N`<ZOjLO|@t_hipjEvYVYgy0$?TJM4*@zf8@@{i_)V%Q+srJCA
zV@1RU9fCbkC7p1M**7}uk7$U%Rt^Bffrih^amIlm-b>)nq@RNn{?Lnq$eWYTn@iQ3
z2ja~a?+s)-feM=tgEz~TyKjW2SiZ&!6l$}Ff8vQ9gRlX(J|XyiGV?iA;k}{Q*!$)W
zLos)9vxQ?3!_49j9SV?WxQvN_bm6ZX@Rtl*frlc%4LJ7YZ=S9!D_-?hRpOw~>&e5q
zs0H8#eBpA(a&Z0A;-j0lm958px-bX}5zECVLM>R!D>6=jD>OP8=o>u?kI#}$7mv*@
zc<BeM|CB{%7G~olmGg$?S7sI0wzRfsRW!!6^EY%wHunJOLgvmdJ|oP1<K6?4^9wy=
zGp>u4@4oe~Y;4vpty^tTPw)Ef9iIg692%c0pU+<2-r1d<>3lht*N!!Z;V>cKj4tDP
zt&tUq)|F?zAbmi~>6!m&wHvqrKe2x=UbZYrhbLZm6MwY+FqG|c_Is(fIs@?>dSVG`
zl}0T|Y&JW|YnAyg(&>FMUzk*xh-Fj9uqk&;6igW@3QDI0X75auwO5!f_S@mlR<3kO
z(`ZaH&)4Qo3g{0^u`V_yuajg8PO&Yu2Ara~ENiEJY4N~izEgz&Iy9VGCRH}!wVq)d
zv)R%j)6;t$8bl88#Qv;9^#)Sq8f*3z>TGtGh8k-RzO{LyKbCI-48^`EW-Y)_JlP!0
zl1T#)P(OEPE6u)PPDeQGFTcPgQfO)VXWz*A48z<v4MwXw_W>2DFK@&hdV5_-BO(H$
zzQrf%at9Ssf#8vN`n;)8=;8xG2tPKLed*0{GJLYvjVS#nBFicLvrtrJpbViLQ~~iQ
z+9D{Ab7z+WSv19Tf;op(v$%jQ8LALLY2C~)3NW!g4I55DwwS^qFw1!PY=tsfsei32
zobO!$Er(nSWHnZsb3)%&Czf#|#x0>Bmr4b*ZX>D87IiZ@H#mV7pea!1xH+EHOD1Vu
zF>XDwMiSV{(3=GeMe`qDwz2|vp3r1Rzj<w(6OWc*oSS@AzM0b8O#v8+k%eubf9cTj
zp2EVo2{>trPp?dmKwxCP<=wJ2BtVD$G88fK6p8YCKlB&FEb2`uLEyf79Xg|4yKOZl
z&&gWeugkn&*UjXdl2vE#?29nrm&8(k*t5G^GBwAP+^}0Quv@m@zsp`R!sftebs<LC
zQG0t=RQ`G1VppRb>yhkU2j0^~jzqX#q|dliRN>`ik5w?(AvK1J^F4CW92R9Aek>Jr
zG=dS?8MPTr5&gKWEY=XrO~Vr$dY6H+Vc4+$zNK&+PF1f2`(RqL5PgUQ8Z++)E?4*&
zmY*_8o8~|J6b5AJEH!Mt{+u}?xL}+!;8hfF>}&`=YeEu}(^#-<ZT>i5gS)WYM(6K$
z{y^;fLy7krPSu5FA7@sFZ-hc{pel<^Q0)rAtKlx#I#=5J`tQzqLM%`@EAqPKG;g+s
zZ`thamtPBtTAa!m8sr`4p1&vmv4%eo-?dx$WLSL4C2LO*r_6bSf5{rJ#VNG!tu*wc
z=^V59VcS!I=H8UpQIX>?OLq`y|4gdug}3a&?G=^z$ldjVJLKxxAW*C0=G1%J?Ji~i
z8$ZlH@G<DAK`Y$5es?4vJTPv4^XaEBgbTg&NHjh#6fiXiwePQeBL)!aovtT3V;dYm
z$^T2=NYM|OPXsIr5kn4a^J)jp{Yb14C%+Q&z<;=kZTC)sddbTRRZVvS4I4y%Hj1?)
zlYtj7Ex`=y0Q+9fQV}*ox`nEC-S)7lalfecY#gD5Y$&dg%t0g`Ux|lO?NU8j)9-~@
zz=z>atdW24>~aJ}>UxpsGpFZEa(hOQem7e;CMSL+m6#hYT%{jFwEaqs94iRrFq`^X
zlKr(9YE<rGHhgbfKkMs?7zrm@mNH~%is4A3q9)oH{el5(*3sDJ;y8FuV%Z<i1HtZ_
zY-0LXgZlPh(BF7sp9?@@ISQYKpY=ZYgC~ZV?!kK-o@>>z8m{$rQ{elkyn{Vbs$A6O
zvo)O&tL3-)`{SEJ6N)2lZmVe$xLYE%+KQ4?rv_*r@?}Y`di?`gV3{~yQD0Q+j0MGF
zKO~>qdMcp)BzV;`o$3*z6rtgG6em~CkSe2$aDT3M8&@vpt%}S~uCXK%>O6s*?X*%w
z#WZqo{@r{5In;ELf{I&H`hzK5B3f{sm~wt}Jd?7kjxyv0KDNZ%4r_ySX_;3HqpmNa
zTCc%$<r`lP6T5Ep?x}aR_Ozu3$-C7%rYe=oKU1Ab2(+#RJS6Yz9(q<!Ywt<Jcajr4
z48Ui3N4P!H>qJ%2r~ZSI$xKaN`%E?QtNCj|biWaj0l79JRuiCagvVD??cm62m`tfL
z8#z)_H&kNj@NW#o|5%5@(sj)f`6cxQvH}Mw*r_H3B{4z|fAPeg^UbNCXt!JpmAUal
zT0%&q#M(VnsTi-mAt2Ui!)cdMp<|@OubH)-O)9pN6|<p`Mz^15Sk>C+FF)6<V<8Eh
z#xzSB#Im97s;{sTmV1Ve_gJd?O#kT3domiL#<xA<8AqXslB*g7NWFYxpF+$rG#Bx5
zdkZA2BYwg4|BpKKZ#Uq<4W7o!A*;~J<jvo3eaLWS>iOWN(Dmhr2WC||vfP#!>D4Gy
zz6zE}IJEUr@M<hP6wsmnuA%r3p00d#p~}$zB2V{UH{k2-YH0#6Jh<&Ih9ZnKd6Quf
zsGt5$7ix(xibs8PH_u%CfITS0MJeAwL;>Q)5%G5&FWX75e_z^M(sS^7)~EC58s+05
zP>s}YL$UX=<)z1`m{T$?;a5SB6d1U+n@nvO%wRt1U2Z!R+|(s_a57r<hT9RH_4{}E
ztER}G`-NHQ+e2qgC~a(e1Kk?C`mHsyjpTL^t=rv=mx4N}!#}FyDE9hm1eek*>}#37
z?pPQ(mw^;&aeq9Tv)*iI+>`g}e5`TsW8ZlO=62S`zI43j*0{2E=g@6Le)24=@%tk!
zhujGAdF!&9Wo37#Nd=7Eb@^vs<AyFqja*M7cyH$z59~+F8qZqYUFqCMoZD+t4`j2>
zf9yTj`~LKwJh4CPP_t_gh#}^pw+xQz?druGs|Rq9|4X{CRTxSKqwo9VPY-KG@&;Al
z{7M%Rfz};7P>A3iPv~k!l~*!Nw~&#B=@D`HknmNJH;`#l9nc9G9+67YKa}*;LsrQe
z^XxZZ6J2)&YDO%xUThct2OSEa6o`Dp_<ST(eO^L*B;x@rm=Dk~lE3g#B=UU&@WfPo
z-$8s;<NxRzX<qpL>Kpm#tNIy2{EPvfSRK$e^0U0~vm)|u((!^|d%e;2@9+g3eD-&l
z^>@4Q_aK70L#?t!{dJc?#IvXn6eQH&JY7|$fP5klwpvrAJ5462=p19Plj>&<F`Ne|
zlP@q^H82;#5tttzSXdWWoFBMftyNAGM0_gph9IB@>Vc*0-cT3RG#gZ<3w1{d?w|`6
zSw{J5ka7z|0T%uxqW?8Yk&lndm}+d8`;Q<cAflajh0a^j|A6w2At-shlgk6lT)M1j
zbe>;kt`&rtEy-rR(rM^UiYO2;bAhWo0Oeg0A|`MKuJYb+7_NYbW`}=p59PhT%E!h<
zm;~V<faC9xWbjEjxq0{@nMK7V`NSzD6_v5sWwmu?g;h<>_4uEgJ1S~gdwSnBb`E6p
zVYLsA#dQx)O^f%B&qofAE_@4}oLO7vo?Bk{n!2^T`u*ULar4L6&gr*(z|18*Iqy8X
zlNtcb+;-$Ugk!XPE8=!<>=jybh9JsrO)P5DCZ3~JrXX^dk-?(mv1)I4x=5xzcSZJq
z2EB^r8^)(f195yZ-NjM?bPBS(HfS%ZPK;>MUNR#->Q|B*%MJ|}i>azAnBq{#kWN7>
z07Ufr3Oaz!OEz0+-bF(DOGHae-u)KQ66?pmMYQ1Q^g8+!`*J4_!T?S3B*$v+6TC8g
z^T{Xc11vOI**6oM8zYol{_BGiPq!w>B%EnJOmOYY5GrZuvrcgTSisSLo83IlV>#PE
zdi-+xns;Xz&EKEJl8npRv;R5g$I#2m)-A%kxBlk0<o1E{wbc9aBkFSrs}n_9BdKZL
zXNPM8X$omq*H=ONYu`p%TixTXnsJt4?m%h(zgp4x_kxsXTWet=NR0oi=rBgpN#6%4
z8Hn2c5~Q@>{vL}YqP8lqi5d-plMPg(Ofa~!$xWoJnA>=c>Vs<JkJ!gg{~VRfn%>`O
z|I2WKiKQw-h$mX$a1s{Tm62$ud_;cc@+4|^mXHM6Om?)}1bwcku@hllilsP1K5nFX
zAy05<UE3c>vfof%ry?*a!e2ym8_uYIVUhG(dRV|vjr9iHKg`^{nnioFy^1lW(*o#9
zg>^3cR&Eh6N>TF*%A3Si_q`#&5c)IlSR`$WfC6xDk;&MbFOLh%v&adO$6F9kfKduC
zZt-Cz()+@du6S9i(pGGTA4g3V96_Jh*X;Q!Xz`M-kNUCc8Tt#zQr}A<GF6(Nw4$}R
z9QtvdOW1VsBH!+Nu`f7&8d+3TtQ?ii8tCyrZ2n>7CrMwzH7fVC8EFz}o5j>q`LVBO
zKbg@`g|~prp`E*qcxL;!VcCuL7{ROAGip+Evf4!(|2Lez4zFT(r=1<lYrma?$sx#A
zgycsn=~YZR%MT!<b!&VI`?avK@Y>t<@9~{QkoC9XlKd#?{!5m=nhxalC^rI%H9JL>
zp>^}d?3jWpz*d#>I)0o;)qdl^QsY6Z`|<gqLsq!Jo)UG7y>p)6$o0{Cg?JwCDUGn^
zhG!p#pC2u`r`>M#$GK^rGd|O*`!e1r>vk<N66)AdOO0`MbE*fU{MvDXb*-MxJLM^9
zy1VumeQ}1%r8`Un-WCqt_hsqLExi{`ljh<}B`y>u4(|-_*l&~mk1<-by^L^m)^Tbd
z_d5o{-Og(V)c6-7vzQuj)s0;0(zTGxm%r&x)C|Vn>Li`k_D9A*1i3K4QO|<{4zIg#
zd>Lry`$2)QC@Oq^{cdWQR73#YR%QgpX9*7Zwg3(DG1`9P9y;)AsaS12QunO_3aSDe
z>*Oq=Ac=ryJ4Yc>i9U~Es;~H7>W2Gp;bZoqpi0n1DhI8vQIlOt8eKAmuq3XNahJcM
z;`a(s1s3n0BuGhHMurAHqs<pE$yVfyh!MA@CDJL7rXQ<_^<&AtBM_B-@3j%@isAwC
z`zw?etu3yV=sP2Z$X}tn6ChL%LoPTIw39v7<kdk$jwx+n8>9y*+g;rPL(9X(_@LCI
zrtW9mqr*-W7-^R--9qi!&)i#{rmwlIuq|jS=EC7+<P#Yak}y^Ii=D#oaE8Dyu$*4o
zfh*#KX19h|uCfr~PqY7gmABh|`pE+m&Px6PRW-4c>*>(1QHt9Qkf9U2t&b5h|7~8x
zRf1Biofz`omiSxYnhEl5t3qC9CZ*a>N{_Uw^_0Jlsrcqjm0(H~>e;EPIz&$w<4hF~
zZkb}vGnH5GKuhIancw?Us*o+?YrneM?d{+3Ha@j0ee|MGTkz#<hXBpP3RxC3f&tZL
zfp<jyh~Xb>B-EhXJSZ+Ph5GmlYM!nHRYb&lFQs?OCo*FR5|sC*RY^H!T4ISRLQpKs
z%+#pbcxtidSli5*5h6h66dkvOpMn+wXUSDCzQAH;tP>j1HihES$9!jO3(TT+8|WJk
z=Gh#Cbv_)(<2CK$96<7PG+onqo12xz92U^S&TC|v#X&C|w>1#2E6`gn5z*Ygt$eeC
z<7=xXvf@W8E`_I#$GKK6$0bT;Ll%x_!U51UV+Jee4z!&!v*qvtKXfWR>PV>QJ_S&_
z=u&6%wY+b$3W_*deJbIF7m;!_!Bf0S<)Yf#lmD57+*6NYQ>;(ivJGTyzW$WLv5&=)
z(}bAi4>K1vs`3vr_kU1CH=t8ASLJ@H-NrraS7{cD{WVJAP12)-?I8t^ZTc1%rRaIH
zT_$Uyj|-K3?MkGkEVwdwKT0uViv*7Yx*w&OiQwuiL5wjAMihZZj>my(k=O$!G^K|b
zJgUloQ3@lIc?3R>uH&g60dUa>bX&!($)XFg2ikMaOtl@UDR9#b3urs`>U|t^2VP^O
z@WloWZRgKF10di+cwr=q-Vf~FGw3Th_>eBtQV#z(^wpFYNDreXN02}ITJ#j8k6(VD
zXG<L(70bGR3Ut8l_)MKbtGLfV{@5>xOz#Qdk3l=l6YJ(CHGbIcurF-s#Ol^X`GRb;
zKdi~t;N*H^BNjB1=oaKl_+0%JyYlFffNiOJ!VVbR=!0t|^f|3#N0Y~yf2#B~_h(mJ
zV_xgCrPRj_BeVPA-PZv>L#G4sz8)|kKa0B@R_u_OJ*>ociG3LMw&!H#=+wu>8K6z}
zJDh$aEPrN?@2>0gO7uhvdcDlAWjFeG=5&+xIW#2Banfw^=Vfuyq;eSA*vAKw@ahhX
zHRjk$4p;w!X6_#qo%0bG?Cu&UO8%*$gA(t7R_6f_c`+|MfPM~8)W=f=h`gQvkr(La
zkj;9MUwBdg{T#r|RrR8ScmZba|CER(gM9Sw@m0Sd)r7)t^%&@(Jl0|GL+>_NZ^wkU
z@{`sE!Hu%y(;1i<EA@f=t>gVv-ub__!+_K=+05#@K(QQ%{5?<%z5A4X<NdW_q4U@V
zVu$`Y$FePiG&G6<MZW0qe27U5cyQwZ@(jAXS?-wSYDZQuHZ7<C#<CwOIPjfc;F(IG
zSUY>c1^<_KL3(cmO6z>ep+S!D;&AIhDktQ{L_P!5!GxnheeuC<b-{WzLBn<I4MZU%
z6C9KITtoT(ebB&e6rWy5NIxWGye>$dfq#`D1WzPXiYRnBKIH4H_aY>8iy;iBEp$>c
z=+roL^@4W?>T^aEa*-d>K@_%m5pr%Eav2|jh#E577j_K|KPC!4=<`OX52HZ{#a0VP
zy9`gJvjaIsAkT$0#Ydc~M$#pO(kDbR)&C1grt&00STagf6$B3g3DieDn~M^<j1nQf
zFYOD~gHS}gZr^~U>!W4oqUA566^UUnZ}?;6_`RZ)c_`y8RSG^*sj4^3#FW!})NJZo
zXa^GHTju+4$x%g$w#5pGnD-LISv$(2bAap};{XhqQ+=GvT%6lwoX2*Y&PFVsXna_&
zqQojF-rvB_#3zI?Dx5eWl0P9@Eg{x1AwD4?u|6SrE+O?YA)PoelRq(AEfGMH<tHQ-
z)+Yknb^w5^oH(h1{~k$J<Cs*JkknA0)HIjWa+%adoDA^Dy3~?;9FzMJk^vss;2gjs
zOCBXo8Rt)#y!1vBiJnbJnXgY-oJ(1{Oqq9#9@rG~H;#h5OpP*5-3&;L#(}o=rtb06
z1W7$QEMVA2B@U}cn0(8V=4_qDts5(nn>qsmQN@CWGC`|nG+?I(cLgYR#PQf988}yQ
zZ==#^E7EavGeq(;xXLa6`jnalo>Gc`drC2cYKi`<lU5NhXUn#F6?D@4>nWvz;Q8ww
z0pw!lpW#@1@%tke0~vgz`YYf}5)SN}G_~jIAf7a7T9#hJJUpNCSUUUpYl(PCLZG4k
zu0i)tDPrHS1jpFm#MDm_$(dQ%FMZPT^>b*{3Q9FIiYh9rnB&XpY^%vj>dQViws&;m
z)wUFLku>+_w|yBI&FmRW9U~Z+OdOtG{AxEb7q)~myAryvw!I^^yy3t7ecx|u_vab=
z-m%kR$QAVT9E?U5F_K2+h6H=?zAs#&-RC2=*dly+Mt2YvePBfXC;9Fm3K+8Cj|+oj
zZwO7d3&xj<rM~F*d>u5E6*+Pr*^PEqH<sa~Q$AdsHc3rt4kvJWdKIWuZI@?pL^1i&
z>f}!pjrfVlG1{3D7i)Lod}ab@2S6^S@WX#P7xU{L@wZ&efAb!J?34b-Jz}`I@%-Q`
z9L=BZ5lhcJw}YFVq($01Zm%y+cJH53FxdGc&^MUwu_KNL941Y?HXPc&Xa|`2s-B6@
z!a?wO_FF6d6r7T=zP>u~0SItbDEFN-Nh)2sK<~^z)@fsEA9iwrENVP5$Xb~2hVg7D
zRH>XYT(W{eKR|*+w>?7YrCJ6{APb{Rl)QR)rWcj;_IGHuk_j!N>b|FE*aQ1Z+VJ!M
z6ODvx?QoEnnHztuwv}aMd#s%_aV`R?BIWOZb2@V3vZ00J@MpL*S1Q0A4H1f@vWn?x
zhf9n=sz=L7pt4^6nDMd;E;?nN&!iwBSh_v4^s|5;GH{+)&#O>375P~2cLbMhIxnzN
z*c{m3hE<ENF<xeC&G-XWUdQANEvlDVc!6RgbWQnrdSBF{;;ShoID1~Y&!W!JWq_f9
zI$UGldoxq8H)q*T2Ap>wKvdRbozI-qL_eAM(d+t{)W4xT7RjoO3loEmKAmLoptOqB
z1zdhf!19EQk&2YLk#Tufq&&s6>4@~M#_$Q+9H#m47yay}`F@7F>mLIgVU#weTr-P@
zLt`7o$jy%z7QFguR#~cu1e2z1(7<_xr{g*l!SfS}u=m!ZN_jFzgA}bEpR(UNJb2lQ
zOVdO=%><RTj!c%j{yC-7IeI*8Mmo-AY+j~anUeBl$mZ*ln>`~&tfyS8@V2CK@Z<i@
zbafLx1K4)a8FHySux~LMrQC}Fdb#z+u0e8Z3*4bKb-kVrLf#AJg{9|<X)%@#l~z$a
z4eN&P$8DR1OwX=U*!uM9f}))V_>NeJ6a+suK6UqcMv7G1I6tl-a(kSOndXYtV-t33
zR`l`C6=hh3L&$6_4Ga8p<Y2nxn%w7O^Z99zws5YKO&aWae|911@Vphv{J?E#e(LJZ
zLFA5B(G_vA?T)-$<m@Mw*TX@PD@|Hqu%V*YempMNpP&^>Q`@WMi4O={yW<LR)V*mQ
z9;Ch{W`kn&!7-llf#7J{{*b7@;JOIbTVPLZnuAQDh+=jXBth*p>R0tvcWr4@g5DJ5
zMolJ;Uy|QW2s3<wp|MVdq(~&r8h8YqOOL}-7Wd;|+fclxJLioyVWUC4BoMOnL0!N1
zO}N@X2#T+4nl^*pTV?5zZIshgwLOwe2qCBL>~nb17ZHZ>iiY+Q@daIO<Yk9GUBPE5
zdHeP#C|phrn^Yg6epYnuBA5v)tKT}H0y5}fz(UF)(>eJ@qqZxD-IjPjlVBrm1TB~2
zlc?-lk|>Toyjae-?Lb58;{@-3+>%_WAww4bxX3ZX!n!#*1=SM_&%`W&8B|2dfXcV)
zEJk$0CWv5+<-c~)jKRha1=L$A6^^1e`Sm|3Qap&xh&JC!#3@vi<WPcT@;EUBa9q&_
zzKf<J{LT=>Wl9+#{Uz)15d8Bn?eU0>{2VDU6X{FrH}Uq+Z1@VsaD9Qde8rO}0za|k
zS8yjukE-&x3QS&8a!qctRKI-nqEI^eY7&WCSwPv~wNg$4UZLR>oJz>BifEN`=^F!l
zJv&9!jHq{5F;l>dpP2@3)%50IjMzutA_6ycpGL2rIc_0}nm_wzJ}*|64x<)pYZM?o
z$FoOqdtq*ahn~^iFix#GRH&aIK8LJ!R*~LkuFTt*JS?zPneN)D=Zme@mdGQTFSkeZ
zj?`zmWvd!3u*AGmWPyCvKCA9Isvay|{SC(VTG|JtmO9}|^}{h${V>#0E7~U-V?t9Y
z{f{gua-DiAB^~NHmsuqmgZvImRj@w{(b<1OUm|wNs1;yfaCA-jAfJq1a#HQ(_~K#o
zO`t*R%~!C?ZBoots8|~U61oT0BIs!!Z##k7p(iqij*d%hN1h{xUrGMTga2^f@4u9b
zQTrmLofo^3A8KoPIp8Hg6OJX~@y|}${XK$sXq)0B>GwS%RES6P-NexpMHXhRiyM<S
zP5Dc_-THhgX=Ir99m|*mGJlaT0b(X8&HD2s{c-P5+rSk3NfDLm@w67(d{1+ekEfSo
zS^GT&QYogX(O11?_I5?iWM*c?B-53lJteO1%|4tv^|rEEmFi$1kRu2ZH|G8<_jUc+
zZY;p2E5P$4(p687opf$I76DAq_P2e%resNv`d|Bg&WkKvS%?)DI!?%$poaq!F{=0=
z$C2y#i5drr;|F=JafRP}?i?!RSgk~`n`Du&rqoI06$7tVR#XEaxpbI^I*JQ8L?0u2
zn7faBi{@ADQ1~NWF6BqEPfgH0_U(7*I(}B)l+WSLKf|PK!}qmmA~Up}!4O8Cl^VCb
zDKNx8?6Aa;rH8uBqbx8gBWjDw-z=qwY&&WvZ};v)ilo}dg2||1Th}tNcRIY=vss#F
zUTG=HCWPDb)k{C$xVpajw7Ip|y<`t<ZB}yZ-CCMjIuC|@SS1muxADb%Quf$wE#Lss
zOv?@})Z5yBg4QH~%zln+d$AhIjyO*}0x@=J!ii<a-jK__^t0AH@Fl!llahBTO-nv@
zyLk5clUC3~W8F_=*XCu%Mcl8*9T%RWLID|qXy13cFKG?$Vt{><Ki?zn_f7t<xtRZd
zKBa#1&;IZC2x~rnTUCF1h(AC+bE^B-J;I9*>ZAJa?fXd*jqn6~RSXdG2w>^~9%BKi
z7Xj%+fq&d1P+)-^cn^?0KzXx)0Mxm>4kT8CPa~>h2E5xmXu;_Lv@e4m=>(a21U2vl
z8GwULD1zm@ET?$jTJj(EK#}?+X&Q<2hxi_jK#<1jsQdHvrcfTv7$eRRQ7^>neT~Qd
z20>UcrdosQeK*G5G)CBlQi2s-nx;eV4nxC#f{s)vcI(_njRHcB!a)4t2x{RhJjUF8
zfoSF77<1v6m-pl|9R7&kbZ5)}5OO-hllY+K6GX6wTx>ofiAlIhmkh0bB-SX1GQfxx
zYNgU1NyQ&PvmMDK1*Z-IX}twC5kWZ_DW3B~IZfcf2~cje=)m|WBmjpt7s=}=MtKQ~
zrk@1SGRE))M4EI)yIn-x(Zz_X;lHboRB{AKnnW`c#0YIi>oCG`*2m&1Mp-h(3M9m6
zZbutm`fF`F>NrMQ7DPJ)#F^H|S`f!s&Bduo8M_zwzfXvFiH|cdfx0lp8_mUe*2le;
ziq{KBunCB_Lj{R2##2f~JM+heIYQl}5>ln&<4od7_&Fo%6Vd}f!E^o((m|xeamr7U
z-1C!M`;zJ|lRka|fk1{`{D`+3No<nQNNu3MJf+l9M&^87{gS_II|i!w@GU#PtyB8o
zl@i|LyG-n>SMA$9lOhR8UHRf1p_(YlkS2nde2SWU!H)nBf|1|MrQKaVf*U0V3#22c
zrz4RtAjUh<z=7J8K^(*$7k;!DB=6xNX}RHPAEYqm12V|wGsv$pC`dA?1TtyVGwGZ%
z84@#@8ZuetGuf^(IY_cN1+uu*vv{1c_<)~tL)NqTETO9`5t3{%fouu&?3Yg2l8M>U
z4cW5u+45J}iX=I21ag$rbKW`Ss0z4~Cgwc$1KFSDXp`jX3gqgm=NiTa!c>w?8*<I1
zli{m#rp_atj)h&)=W&SUT^Qvtdgh(y<<Yd~oo(hlg3JF&pHCv1e`=JE>zRL&myg|^
zf4rHG3Re(ioZ(|!@ScRsO4=(av0yO{1i~)N6e!GA=P%54D$GwTENmz&AW28QDlDHT
zuaNTC%8c@~EviGKAe}2H^DN+bU9`Gg)J|EPs!mGXQDlmO@Sk~2riuUSHOXZ-4S@*z
zPPPiql#~w;|0CTNM)j*MJ6rsw?T>UDThc%voDNWz1zwXb@<yap_w2kl?z?~0WuaIg
zWX!N|iSYZw9A;!#LR@mP>-}LaEf6@&<>!Jy(Mc&~F{R~|Z?f*$c~1*~wfF!mFiK)o
zcS%oGLqD*V`KWbttOchdw67|%VkTzz>(aN{@zu4q$&mSl?U`kOou{&XbnJmw6t}f=
z8GQiIwE0iKp+yw3X`=c-y6rtgEM44~ps-s&@)J%cz|MOI>5G{0Ri1{?trXSCXMKsf
z6DZ{JZBLbq#DCqNd})z0^n%r2$4e?QcO<Re5{))nlxieiB#P<#(<;X1%*{~p_tMo&
z&+_E>>yjC&<EP5B6SRj4m5o&FbS4T*p4jIjXR(iTsLRx{1=WZNd#p3fM15`b5M6FY
z)n)$Nk^*Md4Av<h!bWtUa_g?MHt1!3(U$UKred=-UO5!RZ+*NuVJGfDqr+EfGFjeP
zxB;Q!G?Mvjqmgop-M!HXwL@3wU(g9`?)AdblCP{2!7q_H*O$M|KJj3tlJQq-cJA3d
zQN4M$-|QlGc&r}YV$tF%eY*a>DwJlb+0_BK(DBOLwYVEyJ~-`wK^9_8zj+QIFvw%{
z)%)RjVXtPUb8$*IDESc0bLwzCHJ(xSqwuPrlz2piJ?=}Ho8Jp<oh&C0tf2sT1apG_
zO4CLPpa#PuJVZczRfqx~G*Q<VNQ+3vBaH>-;12`6csD8@Dcz%;^NMe_CxsPJ2^f-8
zwXg3=$R`p_7pjZ@vcacnT|oE1refWY+QkCbD0O}EOJ};nKG>Mwna+Qj)ta0nB;B{-
z`xd1X#CVj|K%PlHQT^qPSFWGA4%G{HuPfu&R40=i3Yn&Og@U3xunCfVZi8sC7sr#w
zR+VjmX6%($BKaj$H&;qUH#uuXp9`|pm|>qOITk!{KhkyPSG6FZv!ad*jZwHZYX-5F
zt6A1td>$0j$*8X35@2JRPrVkc-PytWPCd}#jFu<aKLFSKGqrD@VSlHQz3|QnRNnB~
zk+!tGscXTc14|@$sx<P`NqP4nRd{wi9(#6Typ6@+QG2J~%?INt)kE_}`l#!Qepv7#
zbO3jfO1k|?92G+!SI{6Q2={5H%}Agm*{LH7HHA6vE9w-KR@}j+DqiZO3%SWR)S0JK
zx3exDQ-ThxCrJ9<kA_EyvP%$W3?FB*j+$0RaZi4VO0xc{!|Mtf=Gc7nq{F4vpIFi(
zj`d=Bqu~QY(fpjW|A7^|W#3HL%;YI-q6SGoWHmu=@4P-$kX&Hh|67yAwsBgj_IlC8
z_NTnuZ}jW;Eeq#RZYBz%0gS%g%cTec?VF=M`m&qj!Cy3OK?M&`tKM1tp)Jn-w#DM(
zr><4gGniDnwhnW*mx(S|ciL$|X_UJKnPDwgyR~+%9i4<JtIfx6CERaS$H=!UfY8lp
znKKMt`|bX#Cl_N(V#w>7V0;EVB%W}OD)`q3AD@b%&3AbbE-GD5R*4SVj(Rh}>7e9z
z@}tC9anegrzEY~|c+1Tu!7d?-VX%cwGL22bdZU1OT_H}6)a5T6jgNvJpG4W81AQ5d
zj1v{l3fC|i@WE3T@5_@HOt760h*(#qQdQlHPqt%0O%x=U-4Hy^*e4`L64Xr4cP$(h
z59usj*4S4WUcJqK?d{M-{qu&Sb3$q@j2JDO;^-7x$d84@R6o-aPb%_RXnI6x(JVW5
z0HyT1uE;n%D7A9U7d*#tckk%QXD_AtHLY;G^0-hK>Z|)@<=bL%gL8xor3N77k%lI~
zaOPC|fM)1gTw8J$hkt#DF3DRGU^w$}+!tAWK43T#n#+ZM)X)6xgk+{Gm%XZ9PQn&f
z^qaXMQ<U~g4IaOwN!d-7jyY^TU^sIF7|zrZ9dX+KBt0P2#gA2`pm#cv)=aTEbzI-$
zHEffjOT77<+Y0JAKL*RV@iCTg%owGUv}W}y&v)mzQe>jB&8(&JkvtH8qe`ZPNcO@+
z8u9ZR_?jwQc3(y&fq5T9gyp}j#lJk^fF?F<=JI_g#I+AZ&!?ln<C>yZdK@u<pX`+<
zTVBWj&Ul#;Vp|luRj48ZH%$w*D|WxgQnLtrC!KFs5@1|}vxKISSCdy7Q^%}{l`%te
zXjkmUjitTEq#Q++SuV-P@(x!cwOd}S+=0?u`J<C^LQ7jkc$>K)I@}z!<a8wyh*gEu
z3{gCK8YS-qE1J?SXspJgD#^mc$e<BCKYv!^4Y9z~9awmH5nHW_vj6^EWN~#zq`DP$
zt3=@w<h>zKi!l1ak{~xpBXa+&frf9N0VMjBM3u0K4Eq2=dRYH`W2I?p%EPJG`T4mi
zT+2~4oUP4kO_F8aR!}Od5xgw!b?Qbdf;<QC&eD!1x_F9WS?=?5U>Q|I72#paq3_e;
z6;zwL&IflKP+XSPhsZ>QbpLiO{@=bPU)_ue;W_qk>9m1k2iNHY|B-Gppl@A6Mgob%
z{AyY7LnK?kbeXRJ!U?g{9nnd`%%CA>80(<YMZ3_%Gb28gjNu!G{FDP01qTGt5$9BJ
z>NmJ85n-LteTFJnMv}*tJ%iJj<(`c&`2&+qX@QZD(kc^nxh+{Ur@CbMsytzfB}GA}
z$?R0P!bZ_;r8t2UTb}BoTV^w>DyL~q)#|5~A!bBd4a80R)!3%DA=>Ckh^>ZxpTknr
zb)EI*1_?Nd=~I3flg`W)m)2CL30lbNIWMf-@|0IUu*3=%BphYqMH&A3^<$y)?AQIO
zx^EWyj_lN5Pvy&+V>}OB1{}UMY}K|h{;)KKcUdOTK4(P;Jw#(zB*6Fx8OB`NH<f<2
zctpV6&3<?IS|WLk)F0COQ0Vwe%;GnCSXXbJl|Cr135)sT#lR)D4gKWj?x#kU!*4CJ
z(SO`D3-gK%oWMv=uL(X(unP(hnBF14b1eT_i~ncK!ikL_{AZ~%uoYC>0B2ch`y?&}
z36;-#erEWr#+g#y^1d$1=7D%4xR!@`iN{n+iOSCea$v8kJ;Fq5QRqAH2fH8*4;wWX
z4ZMaTN3Wt<e)7h>!}U{9TtCT%2tG+glRY=yfUmmbms{El<#pUCK)kG`Z82rMZb~=6
z@*dmFJ2e+@?NBMRp2y1nNpj`9%q$FP$HlnVb!{GDFU4Q)RK6TgIKm`%L0srWJ~tY7
z9WG47##Q`=_RT%%<TI0tMwSin^ee2h)@)Y-XD#qbnb=i(r5kg#@XBCV-^B~1JJ^l5
zAuM~;{VtCXG>aT%?G7IgcjEBqXD<zKp?mz=LzWU4%!EVVB74wBg{A8Glfu*4%7bhc
zj!>11n2(B-$g6$XlUdA@A>ZBqjTdRA^O3(5bss4QA0<7J7dIa%Z$5<wuQy?>cj1^f
z9F;fgtS9@HQzWwct1T;LBp*2<-Pe7({CvIy?|k1e=l}sXv>M;{lG?z75=7vqOQZz^
z+?MV9jJMtc0k@_pKTD`O5OCw<_P6DG4Lm6Kqy3%YrGS82-ig0QJU{TD^nDBUQ{@E)
zGqo$B!F61~U?vxCKqL_-Fc^;tykr>I6YByN#sg9%S%3#+0cT(~5sWbx66g>aSU5`y
zptPBe1Ivl1D)@qk!4Pqypv?Rr2IZib*dRz>5Cme=(Z?Hw9NfJXXaE5XLO@7|!2m=X
z*aw<a4Vi|7%*Kbz*M%(3hAdr#05t8%zTmOhVE0b`*OD4LTM`C!q5G<0dl#X{48liz
zVP}2hx{$D|3lgomusaCB&x<hdCB=Kba3m?FOGr3cJ;QBXIA#F$YsGLZ{)m<Fa6HF|
zIP7qu`iKj#FK2HAMF6|3aS-`7`$1eV!(R_`ocvK-YEe9nQG5wee>=?mi>Cdz!<>>@
z%sa;z)r1)J`k41~F`Ab#+QhNC{IU9Kv4)PZ#tE^&W6^vr*77peia5@iKh74|2m0G#
zjyT?nKi)?z-p?@}nh+mYA0IpyA9@-8-#E<Kdj?C3BvpI?*ANrce=%<ifbUr|(pHLo
z&hgw<CAo(YgfNPQ3<CB3f6ToFQ(SGMuGv825`w!2*9ab*-~=aF&;)ma6B>ucCD3@|
z(73z1ySqEVf+w7Q-*<nr&$nxznW-~VHS-r%t*W)2`?>GyT1<1iHBjdVXiXVvz|a02
z3^UWIWphYVgA6nG!1qS!3q|P-bLs4t=_)iC?AZo{78&&Z8A@*H$M->JjkM>7z#{>=
z6ZB`lUjnqZi@^Iv+Q($j?;@J#K_G%4Es`JznT!Ut35X7(!94QCPN9AQ1HL4q!B6oe
z#Gocl0g|RrlMi`Qf~ly%Kw1oHdQZn!7*tH2Ko&3+8>=ISCnc8^kOzb6&62~rBMQD0
zBmqxKA<xuq>D&*3Nv}u^<vep01;ck1bE(gBby@PvBqHEuBn^x_-6m8d5a9E}|8$!4
z%(qC%w_?plI_J}RNW5(1@9IcGHxlp_d*`N8;JO45pGov=D(H&IQ@$?%9liC?CG;12
z=Z}%+cmAfcF)!GuKo_Y<KBh4Eq0k&XT_d(o)H65IN;(0I6zN%%<@pRu)P<c~7sUm@
zB3ue~{fkNjKXKp}!%vzOGR1*FG<R@u<4^%~sJP=*QO6RjOR%K%sJPgwr0M|{zLcBe
z88yUe(BxS(I+UA6RtnpK&BF5Pz@<~VC2NAZWho__Wb#Xb%*$4}<GN)5y#+HvWoSVq
z=P-B?znpoZ^yWd)Ii>tzNbFEPH`7z{NswzAqZCP@V%oD9^^ptKRPk%O5a$sK9aHe7
zm%{2pxz$A~Jou5Dt)zOaq&XHMb}Q}O28=OBF{f5d9{3^@GdlH&3P=GDLLE4~n6mb*
z{GkApVunKobaWClK|N-^aBE-O8s1|s<2k?w1qs=3Gx_G{YSz~^{dKuBw6*HPH7(}0
z8bTCWUbVu@H6Dw#Aw}kTdXVX)+9%z*uX>e&9d#I4b(Y6<PRIBpLiK&R^$ABV#`X2y
zkKYhB(m>=5_VWo63j`&A>e<{P8Jz~n3kK+JIBcLnVzVJJui*nrBcFI<_?JfMutwgj
zMo@2~s{#TJO_KzAeU6u5QM28NN)sfkshGUEN~pO;uer{vxgoW=skymjxw-AJxr4l=
zOQ@wsucgncWgxX>sJUfixn=CJWrDnQN~m>4uXWC=bs@ENskwD!xpnQab%VSu+^^n+
z{KpO^!Tw{Y)N8=Wa@*Ns+c|mrrBM5|Ui*z#`(5gD`$Kd4&(t)<#sXVfz~N&kK$u9<
zDjwOJM=7~O*|Fo@V29FX$6NGHN!rdga-9;!ov*_>`La5B20M8-JGs%j*l4@B<hodm
zyEwzTD6_ga2D>OWyV%jYU(j~5$#vt1zpr3x6JF^SX(2)?2@!wlmJ&vkdEH~81Bk&y
z+HCC6I|884REd%Tp7eUPynC-7>;0R1P2k?oOEgui1n;3<GetN3e!#bwKC6~KD;vO9
zWOUSx9=8GZkZ`v(RCFwwen;8<j1TC>Bk|t))}`nDf}{gU=ID<4$)zZ-<}8h6ZP=nI
zd=mK31KEvZOH9*M2BSR&G5gR_X?h(M5dN<-kp)7N`<SoN*_OxuGK`h|q<-Ybqft7z
zR0<VN<@v{-EGq^#jKQg|!==1!aO$ffj)DSWplPc}^LqU&cv)F==wChoKQBZi8(G)C
z7JqPmGL3(1oS9`b1pqS{ju3+{{@|HNPHq+wDpOG+ysWGgUlDIvScZ>`SlQUrWa(7f
z-qA_d+!KJ-)zCXM>>1cKUYa)rH;iQ>;EyaBB4Tw8E^jU&wN31~Afuup!!wbe=NEq&
z#%@lJ4}pk_TSG|ePw4D($7$kH!SGCEpyF?zK-Hp*@dhWTqeEwfxoD#^+WwgVOd(gr
zAPFWEQ0}@@$bok&(~1z~s>251J^@y#WIRTi#9I9aij)xj(Hun=Rs+E}^N-nHpe8(w
zT2_dTZ1tYeQ0=iq!N=0L*d_Rv6-HGH`>|PDs$F3`?oT^BRHC2#dj9C!X5CM<2FKkg
zgD<z7sySZx;pf97OdB00sCuk63+B4L5Wcr-ikCb)usCYfGOR17y=g-J;;4iBt4&bu
z&mr~@&!0!j*m})3q)U?r3*0Z~%OacIC03gaZ|ttg8{|v6Rmn5Y03J?J!=&%r#wJ}{
zmS@8C+U<BAvrkv}_I_vZx43_&rR!Gq)#iV!J#&mMH=1psyS~=hS$+1A*>zj~{v^I@
zNC!u3O@M&@W*b&$jQlhHp>GeMV%5^0HUiT$EsPzmY?(=HsYH-WLeKLYjKdhg$Od5Q
z(uU+vqH`3}2rY40Q*K_~VAH6f(*b&2l0OHsF%j5u46Yxj(8<8^WnH<3$|5?S6V$eX
z06#Q2J@WK)tXNdyzF92fiHZc@4?xW7NV-2*Ol9q*Y`GkKWpk+0+(Xv;8fgCI=G0Oy
z(|(YpTkPAI<34nA#Nr?|)ae%!in$Z|p^B}tu1sDct6+d=WY@(({&LCwAszJfH%pYQ
zgonPOLOb;Xm}|{LQsLV``eO2$xgo`Z2KlUFwQ?&XxcOKrY5zH?m(ImTd60E@q`dC~
zgz1CPhvDv;nM<qg+BG@}tNPs|K$+=Q)Z@n{S78Or7S$3j^;(J+1un|*?B<_XHz|Sk
zZ9PVMKckobJW6%E!d9%{L}A0~Zp35ibTB{Nb5QMdzGm}lrwDLxR427gQ|N)KSuXln
zkc6wGaJ(FxhV2;?uW-4lwW@F`q2A8u1k0Ds7y`#9DC{CHC=GMv3iRJf@kr9iP0Rbz
z-~ec})0d`kq&aG7G^|&}`2iK|u4wvht<HF{fj&1V%L%`4Oe`~Nc$fVe-t(1=47A>&
zep@z>S@RX0blU`>woR`pJ_R=558wT6Kml{vl~H?s6v=+(jI;hOzT409N1i&_Yi*n}
zJyjXuAlSY1HFaL`chsXQ-?0a>vi35Wld9>@k8}0=WkOUfw;2jYwd+yM2P!9jgw`r(
zxSB6#dDew5#wEGJu3_q2PnZkl<C51~s98_98_}~i_wN+DS`XLsxOzW{R*X9{{Pdy{
zWiur(dB(XjUH@}O9K7}8Bkuk53IP2M8HoxP7d>qSk@TPg^?}wuI+X^2%|cwn2-lHp
zhZ<F=FysYMl&3us2vO_b4P!(0-c(P9T65Z%RBAAQv_c1+Q=w$;UChUktrXmlPhE6^
zs*2Wtt%1Y=DPhRDy-WfP_X16C_%k60tjW+#m?_(r%Y5-tOMg|h>V}thip|!@Op0_U
zQQD$G)y6H5m_nPjuXX3b+_yxM=J?wO5wLN@7sVYd3`<#V05l4PG?&h@re7-%AvS)5
zL62lmY*74?6blW+EF<@yJ^>y1RuUtGl88KZb2$Zjo7i|@j~VxrBLJxo9)w`!|BVnM
zyMi2XgS1p)a180-K}ZDSYiuKc9Nwj+<4)#^2s$>Zi=*zGJ`j@xMT%zgwFlPp@W4oz
z65;GeHez*iVf#hpi&1rsW2^$DF@aXlVfD*DHc0OS7L=ZHr{Oa%llRqbAKiIp2!EJa
zNKgu@hF(@bdlA0dlDv0Oz58-4NnNWZ^NUz5rNkL3F#J^%iE%tm%_?hrnORl`Je5>L
zkn^^;Kv5cFdi``JSJa0^{Pb{&44Dut`NKk)rAdP=xxC=O2KFHwV<MI{28JR~BoR-h
zUXmeMOjHX4wp!s-1pg=&d1cKPt*cpBHuIU|2P+%hl4j#vPe}?Esa|!{d<)##_XWAc
zFz3}LLPFPyVnKGHQ}6;GY_=lW_9T};Pu)Q-(KKO|RiBHka^z;BIxWx4jJSDm;taEf
zg0j@oH*l%3&b9W$<21_*b9r-us3@<rwBBx6tM6z|rR59ov+r@yM%7S5Pvmh^Li5TF
z5oTl9GfA2AD$u~P$hE1i^~}6Be05rbPka5eEU+O}cO5)0xtSN>GM<`!J!af`5*g#Q
z30S{dGjF5qEcapaV&BtsZI_?=NqU62aguUN1LUl5893HOVY@5C$*>KiwwXb?`qo9z
z=3wW>yn(fS(=OOs5i)PJS?=oI)6d~(BpqQg<qs($x2ts1Ni!iFc8Bp~SVq~eP?53G
zbqe=gM6sQ0(<rzP==i`QBZWUR@GTB1CaU~Hp3t#bY59jd!M2zA8ONEfgZ=aCaDle3
z!ICNCPe2shjsLRv<0gptXYp58&0*g4)q(+v`Oo4n{Q$)~;P1s>JrsaZ(m0`rmZ<Nq
z%4P$>o*tjL*5Qw2{TT2-kxhhI#P{V$U6OuQOXpp#?x~d-RDLcX`&%h;EsOrP+<Y_6
zP^sVKp;3tELOXL^<vT)p!*cY6VMeSf>#P$C%;xzX&e~eN*S6XkUd!JO>t5AjpH+pX
z`c-q*H&&+GI2C)n-nTPrTF16`RbO7c{;J%<adGOMX})gJQ{VoK<REkHwL!}2PLC6H
z{+2~Q3emoy`}Fh_ZmCs$@xru>YYZB}=D$gSn%Iwza2W%S-83Ctlc2Vj%uote)+D@P
zy)z(cOByqe=+ubiT43snSNp<C0^@Ga0AS`L@PG&JVZzPG1wykbl`(cXwK#R1B<v$8
zpDBm~D~l@@Vm{WbN0=Ab`UOA+psBrh#O!N}t(rzXvHBN6?ESiBdo$`~*=^fT;?wVN
z>MQEUyMHH7T*O4T>@a=2AJY4C2^nwM<NI$BV%p;mbIpH#JvO<pnZ1CQ3z9q=>R+Os
zb^b%1DCqZSPk!7|4?#k})nY&se{3RqzV9>ML-#(H-j$(4sGs7vu8$@+te`=dGyH>w
z8G?A0YWR)<;CqKW8F`rT{5wMK`Js2+JG$%nk3sD76SCj$=LbW=XFwsrL%pvb4FD*n
zj{pG)@PL45Xr~1}7$klSognNx)DdkxJcu8jxF6vG>Tgs%G7^8BPCv>8R1`FSI*32I
zxc{pG)E6YWtRw-5c?d`I{>TuY@2>)Q2K;#&P^sN@1PlG)2#Qe$5PbSa2cP~yP`N@s
z!KZ)ZDgg=yApSzxk0k!`{6X&L0Rrwpr10tACln_BPw-?!l_YqW&mu)57!NJjLKa=~
zK+1;14?g`f?FiE14?%}twKJob^2@=m+RYb2P6~p*5QHKOganeH5JO}`(LmsaP$N)?
z(_QE-aah~{_6OMyiSA(mkT7J6P{En7^IK&Sn&%*>g`eYrcW#3Z1Omnu3qza%@7;nc
z?m})P!}ra@>zTn)dEsRTl7(pD8VA0fz=#PqV1aBzJWaS|P()vU_(*8DJaS}XK?E^(
z#K-}t&BCi48o68u?mLKl2Z-7{@GF*$iZqJaxA0Fbj4J!fob11f7JbYgT`>`QV}X7d
z8Z82edgMp_eGn~85)%PJ9F&QvQi(=kiNQ#Y1}w&WQ~{vh$56hE#Y+Y<aK{i02Es+k
z0w6?+#aQ==KpKJAb(y#d6-y=$6lO615^nr|lZjZy`!Sji&BRr_i<0`sF!ulFOys|o
zm05&P&g1_sD+44OKTvlAy5VJI^n^@4fXwUf%0>XfMq0ia_pw2GYErDJLHgMu_jywK
ziK5sS73n-v>7m+ybxXR<qSzfvx;-6t=9mm}6M_$mz*D*O(fc%O$LCC(%Zw1FOq{9=
zK@j2-Db2ZR=37)K0v%LX1$w=i8C(Fp?t}_$Ko1eJf|#-n#j^yBvR3@E0t>QMI<o{e
zvc?dy1DLYM#IyO0vOD~;{R^@?I<xsUvMUjC{Frho#dCO#a&rB0z8B==cILd>$oYYg
z>%){ASd}@wn0X(Tp6^cZ!HPr{<|c1N@+XH-os~ReAE2#EEp&~f$4acJ>n3)d=iiyT
zvY6^t>*1~a&OU|BMzFv|x4_l2z&)h^o`!fY6?}gv09o105ElkEApl|kp(%ynroxD&
z!l;MB7_y=`!J>qrLQIvkB)Qn0LcnoMGQB_$2B_%AeGwG=T!f~Zn5zrRBuXyAfYms_
z%obrV`Q$3W;y9h+I*eq#JdQ6NML~l6t-4C>OFW%cmfeD)z48|QR{X6GuwihC87^$x
z^X;HusVWF{%BpmJsbs0Cbdt4X6+>VaR<h}dv>=#J@ld>QRI&?}Twf~7xhgw{y*G&|
zy}}S%@hrc4C_NM`*|#crSP~grDi3TbD<-SRd0mFaR&m)>aW++fv&?o+R*5%U9$Jey
z(3nP6oc8mR+cWE1Yj+dKO(pP=ON{p$ib7e4tg`=YrAM#y#@m4J`&G#<RmL*a9wgOj
z8tyEZp>)mG`?^)TCe@B1)gPs5q>C$ld@@6uuV&SIj#SBaV`#2X_~5oM6r-}N4>p&+
zdJPtBwjE`yiT_n=B!to?U#q%Y^=qm2IiN<39L1cxz<#^V{t?+cHQYj`?g$0NZMjag
zqej@g-p2al!h&Sbu{-ueJ%NIoQ*%SqV?zviW1LW9f?i{yS0iLOWl9^90pM1n17OvV
z%ob|O)oaT4YAQ@^%F)Z08+47`R;sTqHa%<_0=*leZ#I!@?md^SA5Lsiz-l3HZX2fW
z92RUKPizktoN;b3U;z#e!%aCYJZde_?v}#EhU8}Axzzv6M7D(5cJ$izyxI;@+m4#s
z{+F4^({lTt$94ck2cmF?otzSicL!Qp2S!T=)=CG?QwJ_ZC!TO8K}&~CGN2}*ldPqa
zVx^PnsWYbrU{e&gL<2Cv^kNWZr%&q|>S&T3?BZzY;%>p@^iFuAi1kh}flsmfbxZgC
zLbu4uOEHR`6TTj)6VM0m9-i19`4fM|m7dY_9u@sKHR0X_m0qorkWXp7+As6I4)!W2
zwl64jm<c-^;8!Ap00Ji!Yq@<tn-SOE0<0-2f@%7HTBBJC_g_6Id91Wy_+@zNmth(A
z9}VOBjQn8Ie}(Nhpqo5^P&W|Rk`jf5ggz-P1{~OE1_qBv+X??5!Rmri43*?2HRb9L
zaZ2Gho%j2$45}`I02Me>1jAJnN{1@Sbx1EED?>opRxVc{{mVh+!y%z}co8cJT@-2z
zsv`;>BX5I%jIqOtgCjhN^)HME9VrIVnMQT35$KEuOVSdSR)#yO2Z|#`Q|pH{evNcc
zq?kULGFFZ)K8~zYj9=P}`NGC-RtoTpM<-TVS4Rf#OU7sQ$2N+`V#xm|I@3Aezpf!{
z|8_qnN@hfdY2`PyIkb2<{fo|omlTbHkLVlxH=QXJh+_Pg4gRmJ<`vf8Sq*0hdI;9V
zKt{>3K*)a#%fFA$;{zSIu>%5;{P++9|ITXuH7t)o1cs!hiTvGP@$pS(3J=a_rV2|c
zE3c@mst!a%vWJO%Xk^ZT)0y0mo$^{}!9{)ar8T2t;}h|94MVfDoePU?y>sM2FJ@NR
zx6&sQ>vn`#QPBP~t2tk~fAB;_x_yS@hP;gc`b`0IBbq~jxFI1va2tGDgE>jB01?NT
z^?+)!gk{RJ;9P?&+|U!xEE=Y-bC$yZU^mT8BXRCkOnK)_<w%O2KZego|A*qG#=%66
zpu5Or7=hGeq>_Me5LvAiR$c@|ca;0xx>lJ%tq-LF;xS#R8B5@3Vq&kZjqSGQ8zD5?
zmHN&dluk^=azjiP@&()B+obib;AhqhBUcCAo*W!WqS^*0)82SVxv`R}OOukQL8miz
zx3`w#zCVJgtW(DK<~&rqTpJ(QY~GjKFUQ*6o1T_7UF_h9gt*x|x0m9rm%0f!Z-WUL
z%a78=&UYuwB~z(tJumjwcFjc3BD|*0o27E7KV~F)<Q{j1n6H1Hd(62|*e{@7eZO~q
z>Ctca>{GtNH}gG^mLK~0&+j~_CtxmD4DsI#J+w3&y(SwUUsP$)$&h66$sjg{-erOi
zv<l+Et`&vgaGVeB^I_PNpF$$}i0-l@cm(-!qS?sk&7!!E3g{JN84qJ$(Nit%M13qH
z$fFRubdviaa8Z~BLA5;;OZu#Z_*Kcwb)He+Yj*M;gLU6EqqmzYK9hh8j-^@bLQrE~
znta=iIaK*G`Y!a4WQZX)Ou~vOCsIOfA8zPLEO_TdS2L5<V?Ydps^X=@&?i|XzY0tS
z&lD9z<{llv7^lE=dDy)eRu0*h@~m<Bmqno^l(zEOl|wB<lRC{ubH&fq?GGd+72opC
z*=^=c$T=dX)f7%jOXtWq8#?wFAiAIAQ=p~qw}z$~qyLZ=wZtdNo3w=H7ni|qsL%?_
zulB+%8!?Xt&mgEthjyKPG|i<QPk18^Rp`w+JZYF8OTgVWPHEv)WcJ=X8T8~U_5;*O
z-q3!!%!n!$cA1u+C7kUeawBh}m+eM*sr{WRMePxt#{Gb;)njPbN-pFdm{#9X$aDGh
zOdl3n<n^dYmR?rssgF3%HM#sgFQoLvu46Juimd7SnmLLzOHz>Tv}|__sOQ&;ru<z0
zZQY@M&{{j)as6oE{rQO4v{D1Muk#ZB5}1p#d;2r$=lmTm^|gxUJ&2n!;=Z$9M$JA}
zz*^OTX19#zW?{L_-BCq5)c-Jjg5>d3@uOJt1j|X3(1{2B+@ts5Z#!X}Hq7*=3kYgC
zSL=w(&)Z`Gdd}a!T2(ULj~Cp0J1=cUaN2IoiPv+^?_$gUJe<`3{PTF;&(*%aH*W8H
zbTjY!{O9TR=fArj6`_d41OK=mBcQ<l`!@K^=PufAGPRgsUMw1%y!vj6{Jf9_r0f?V
z?qam?i4qm}mUsdLhm89o^eCqjAw#T}^>6p1iTL;If839s6a&Peg-HN3kc9bl4B7lZ
zA1~uZ1Pu(GViNL!Z|Ne+P9H!@*d5UUk!JdSZ3?)#OA<keV*&~1>Y&KUwvwpDV#qNt
zcytYX=-Z8r4-95_Qxqew`<er?WA=uZMc%^wGTs#Z3(FVrAx+-xgu)dttHC{3Yf6o%
zBI1kYR}Te+g{q|TfjrLCE(Igyt)#x1K<*Ha1QSMlyaDe$hQz^<On&v0$WTUJTJce<
zy`7Y0jX>V+#ZWuXH;fw$=16@-%F>XlG&VUVfyKo!@fQ3H%2;#$L!EK2t!mnb6-Loz
zI3<*d0lGj@D2QpL;zXm7g7FGY30;Z|5qa~Ry_v==U2HsQX5x}cwpz#|Xf+aT@+OyV
z6j{#CQq3~^ZC?H-OD?^Kk)*B!{MW6ol;SO?Q>o|*YF3JPypG`ahqFH<kQr6Ohk|p;
zUKh3Mv#R@T%&1BHN>odSy@0U}6;Hh`*4;(W7C6+@_J3C*NMg-6+%#03O^9lh&Y-7o
zI9Dfp;pZ5%qc5$aUA013{!2K&5s?ku>d!mQ27Y#gE7(A*Q&lSRd59R}U%2-=DkR(-
za^8UjNkQKDJuHB+0UZEnQ5TSoy<^T~IR=bKtU*(;K~z8PpOvVpEf2Ca;gVhMSkQ`v
zgPIgf!gV*lI#=`=NIArlM^0rB1++fr4cotH)ZdfHsi`t3`G(H33a4{^FI%;94)gLm
zS>kH)l{#~MpPX?H<|E551$q1o`CQ_n9n;he@>+kyIvK0?{UyEQgVeo-d6LvV)^VnX
z{HX<rzJU}Y@uxrX!3HW{Knp&nQ4ohP=Kj}D-4whsfua;0*dd>Y=o7iacFni&hw0h~
z?tX&h=1qvZyV~FE8AjSZfeH2@y~0F1!F-RVH>dmq<s?qAt8QithF#qX-wor_y>VX2
zBzvppUrLm)Baj;2f6<w9dS#@z!}W%1#3b>9O{>k<>@0!NxO2zU=-aRSG7@7p8CReq
zn|)aao$-oo=S*sZFJjxu69KM)&uQ4F0#Zy(FT<(mpDxoRtoR=$BWawINI4o6Og&%n
z@43ub92|aRqnpYW(JN9iz+_Wzvd0RoEiqR*)?I#>YZ$97a~nPWYgpcaQ&$o4{)B^w
zhNAfEJK8@_B9V~8#ko|msvoN$iTxK#3&9ZNd?j0rdamV-;6#*$)l<=SPs>f^dP{yW
zJ1ai1>A26CP5bXjU7H{2vx2ExZ%2u}*7a!DZm8N(sfc`^^#+<>QFju5CJ3Njp%^)%
z>SoHo3lV*4I@hA^<@<~mZrIZPGKs2RCMw?1mtvjPoN7>8`3F|b<Idm&|FAhu5_Zee
zHU>Z6q{Y}(59DcwTD7Cz>si@F#hv0{47X{_R_i*yxo=NaJ9J`k{~CsgdZZfNH?wQ|
ztIT(QU&ps^?#tP)GV1pyl_bqw!*;GEIjy8t#Qe*p-*4)h>CW&ny=IT?+!Qt_y*$^O
zmmf23vQXO&yqTUD{(Nuk=6inujs|W^pSfpCid;rRysug9?>kM`eg^M9jc`4Ce6aYu
zn_VDqs8Aj{P0jTSb}M}RYSVMO^ZRvG=6eRK=jP>V?_cm|bLQRdv@!nquAW|GFml{;
zr(gM=ejflp6#KU|gt;gJ0yKuy@Ys7p+;^KYlus=b0JseK^MuLuQ`=(V&t#(SxATHK
zlcSFd&yVq(&-nca3jHY8``<NCK^FxiPsE@8$cUoJIy{<#^lw2=M1D87-w6us$f2U|
zDnY+yK<V**goPkHh!wLbBh`X3&4MsNkUtlVJe!68%u8Tv4iTKxluQutx=?UEM@UbN
zNubb?<y(M1Kn~6g9nYaFG6|F=c`fBm7~&GBG{7n%!LG_5gnt$I8dp{=G^pbuKwv}0
z;2>xQA=p@!*i<%n-#FMjln}0hzv~RP9l*Co3(*f?SXV=^vk1A)3UX%t<~=|KXEf;&
zhi>zP1~R(_Lnz@D7Ki%KiOJ9?e#~!ZVY8C-9)$>dDq)GToSJB;K?`Apv|&O3>@?<Q
zuuVWn2sE_t6KU=MlH5GFj5!1<i&?-N4!R0UGYW55U|)+3qZ12j4ds$2VW@Bj?`{xK
zMU0?VaUUe%KIn`Xy~7x|izvtm=WueHg9J|Uzk=3Brc_1DI-t*@MGetMZGS@FwTP0I
z40o3BI$`EqfJB{>L>q=ityZ|ho$xSOj^z4iwCU(S3uwn^F{0<-KG_%)OCCfW7L3Li
zhUplbMl@vf*b@3!d^t2i%UH*aDAGj$`Cx2(HSt{odnr?#8-FyT02*yr+-tv>0>rqZ
z{kR;Y_=2gpx99{6a`fFaks>tl0*jm?g>+<_@#2G_LWlHvx%f!#2?#xY%Kr?@|G(+4
z$cZQkq!??a=!B(+K~wxXQVb7Mcmb)Ug9%@FAythjN{*>oMXC8L#4R4ccDWxwkPLiS
zPSyo@(?|$!G4w5_^@YWY@&XzOoh^+4+3$26%_67nb!X&==I(VD?<1B4bXNt4*2B{G
z_%i}EGYlOw0tqt)3p4zBGxRny{E#!dnKOS$J!fheXZ{MzY%R<@?a9>K%sd4`8<?R-
zQczW6=usfFst~%<16A6D?f|n&nX@*fvSf|3HUqN?3$vDcvSc>1mVw#X%-IW4*^<WD
z3xV0`h1pX*+4?T&Ka(@2i-<W{mAI|KUOy<lh2aZ5D89!C6HQSRPr;W=QIu{9m9bKk
z)5TY?QdF`E{fMEcN`|kFp{Pj~s=cJ3GlZwNq+l=<V(6)0+=OT9sqn=r#9Us%k`>Qd
zUcnY4#QsR$ap|S=k^DDUuv?S7$Iwf!CV3zEU|(H%za`uNUHPD+pb%F1FbpQVio)!f
z!d8zW;m{&Z;1AEiB19QThHiX{AWW0=8MZI^A8Uw`C0H4J4MA264{B<3i|ag#8&Zm!
znu>h~0bkFHJIG4l<&_@Yl8zyO5J8%oWzH&5QL=~gauAL^w8Ueu<g5?3Rse=<R66g8
zxd<zoc=&uU0o!CP1B#V;>6Gma!H!tV)?f$+Ly4zHWiY|=y%dLR%ktxgQfN{6nLO~~
zA@PrVImDBZ3*UTysQ9-ZI&D_P_m}2BVJJA{gt$VLFTBjri%p312+_z*6^JUBft7&f
zN>kNJY8L=tBaPKd1_4mT5?H}$?S&#{^H#6ACef5~S$s^=giZ(vx29Uy%Y5uXRE)d^
zE4*A(NJKKBI`xCNbn~;x`{f$E>lzid8WO2mO|KfFz*-#z3v3~A{pDIPQ6&j(^?Up}
z6HH4<a#4%ax`-HbSuZi$<2vX~?bp<I&I<JfM3rvgcJhyMjK^XgLZ;ko4Zh*>ip^pH
z;nfnUC4icSh;VdkHn*i}qoCr-Xs?Fuga)6~pp@pu$l>zeNR0|a4aibWdEu4m$BjR%
zYd$N8ahx}<5!5m$5Y^o3*ESQzg*4Ba!9aChs1;3lNUwq+9xd=vi$aWLj8yjwVoYJn
zz%UJgN6Tbt3z=N&tTkb2NbBNoC3`YT+j1+<Me8P8+jcQv#kx%uA^iyR-RXbnuP8k8
zBg|m|9Blgc0Ds8;%4&f69sguC$Rm87jqPVV_E>32IKr3!KxeQ(=Z$e^P*^8jc4y#V
zXN5}V5mBc*dKdCmXMkl_8BN#Whc36GE<^t=fAnq*x^6$YZYz^+pCUwlMRaxwJ5K#1
zoQZCi?Ct@*w)<fgxt1PyP^0|Rqe9UO4{9{@|LU*6gBsnIUj3C`*_~b^ioR@x6cc^y
zF0Wp5{XVxafWbtc-BX_fMZc49zYA7BF+0FLt>3ey-+QJ1`%^!NV!&T`AW(lG*n7a6
zqUT$Y7y4I71eS5s(*R{+AAn_$lCc(KImn!t=2J9SX;fr$ILJrzJed7t29Ikn9fu0p
zv0*JkZgWFriWU_V!!f+WHCR@4-ov#q!%h0O%d&%@$>Az}NSE+Ppw0;RCZfX|VL*Sl
zXJw?}X=I{hcw+znK8c(@8QwSm%$0ne#u|Dpi{xaK{w{WOrX|wZ2r$1QAzKpc!kuO%
zoce8I^a2ZYY!9%bKi=ShdQ>v5u8!I*HvVS?$%AGB$(GM$!{*+5f-)KP_sGORHR?Im
zWCYTLtI-4jhftRaDrWj5ukqwl%NSL9f(Pyd-RWdDXp;Vvz#BT@L)h1LKEXCRmBT&x
zhJ(<@VSL4V3W*Zqc4d<9_j`dz)Yp_VuK-w#wlflu*sP<^KQL7KRVZgwY(IqR&uVcD
zi1=a3Dxr#v{?PtCYlJ<ANi%C^(2rsya<4L@KWHk7^?nYodC_Rv+Sb&z)Yfiuns{`Y
zXmIZSB~JVKG?#6pHwUU<DaR|L0I15sUCBJk;2hY8{B7&3lG2ZWNWmrUMKztpN!OXS
zjVYa?MY~qNCFq<w`jTrY!adD=p3=PS7NSGs{ME?9hQ(4=S5evOA_e6_w(PQ5z*5?8
zbg<G=iWUE2%#6Ixd?#q}P3!Do$+A}3Tov~85_Ac#X2fE5sT*n81-gQ5wrc-vIR~&H
z-inzGo$jVt+4fmP0{~7|*Uo;gol~w~zF)sKSikWxTE9zQe`sBQGFV45`awssM9Bl#
zI8j3QzVzN7fV|d>%4ru~m4-Q{h>f#&sxO2C*u)QB#kX5fF?k96W4zJ2`Rgl3Z(IUK
zo6!!(7X4=~XVB)G{H++rcY*H#Cy!$P=LIQS%4eg0ITk7ZDM+2px^u33jth4D2hA~e
zs`I=EWrDd=CFVSBY}sk})UI*^?54;VVz67&l**q<cFx~%`g!@M%ehbaSf;SIpR4V6
zI!6cRARYe*c`(0jWSmU&tN0}Oz#kMLVW}~YtW4glZ0#J<JeWjEA&FDj+v502p6Z%{
zT7r65X%j(cyG2)zV55*$uRu#)TQ9b=<`BFfHJ3AzH8#HjAB}CWEJBvyNc4llneC+A
zqrVDLpHAY>uKv<u)BcLPeS#xMNX8B6K|p-C7JCdz6Nm*5-3kXbCBY<bta43xaC;(Y
zo+ZH)ld<FdvCQf)_Qw6(p(Jjes+R57a4j~HIZhW`i!GIIZS_DQPe7saP9mJu0Cr-L
zlB<{_-@BK9HB<Dddag)t4>nhBB<}bHAC4dqHf?o(4@Z!M)|jmhr9UEaCe^xJjny_I
zm#?+kMI-zdHP8QZ1PN-S5d!Gnkm&VM8y!fNcpb$=?fQ}+$%DUWj%}@vx98j4F9981
z9vkR8e<4Vozdzilimg5SR1rF4_@XfuZhZgc!$jj(sY$E!9rG_Ob|?^S(-v7J6pkP{
zLN#*FmuuKWr3!{?v5z7lDG1zs%-a!f=Pb4(`S%KQ5LQqAp*e0NAZf+Wh0D^Ri^XQY
zq5;JtO0n$zA6o3ZA1a^m^WxFP8h0UPiOG48kHL)qR2jxYI3h8&-|Q=5izO4q{ECM;
zz*&AGKLhlzZ({ik1#FfPOh*a|Abm<c$oYvaD4zL)5Q8N&^fSg*HaS1+u;AbwGgV%^
z4u(}wa)vH#0i*6l5e&-9pHfso2eB$ebAojiH%J`O6~$?aTbDns%Ab61;`OvCjq~I^
zd9FGq#pLiFH0e05@#7?2s$QsKvaLVS^y;kLSR*w@?s(m2+j!tJ%;~w+^iY;RYE^gE
zg53~qk90xSSYBQwVzJnIbrf#jP7w209=8@Lc;0nLD$Lb|&x~~eMws@vpv7xfsLUj1
zdSLqsY+vSSrWQ4F9H5y~&>1|*(6<|6tH#Q%V_0T?)9`lr>7Wr&6veqw$ZffLJh%yK
zabklg@^n%bRoA}BmuIzfdRl_=TOBrPD`a-T1iN%j4=LqhN>Fe6&El7JfvO2h?P}gs
z+i-7JQ=^Y;H&r(Cww$w|UF_4f{+rYKbg_>qkd0wH<&w>i=Avuk2<l_^@)((no#&Z^
zex=csbgMtk^I&2vfy$)ql*R+OHQR;5*8I=MM<vyFH^&(tksiuwmrH5S*oSf0PFt%(
zo%cJ7ZQoq<nkq6hY3`SeoDK12)*O3wMirmKUfcVGrcLMhl&)kR{l0aGQ{K|w?$#A4
z+|Tj7`sq<ye)O2x$0ZtEU(NOV&2Y~0pE4QI#)Y36chd=fP(o=>DtAFp`HeiHfeuVs
z8qdLaJ%FUPxFic8fHs~cmwBNR*@xTfnI7d=iDs8rdc}7Zf<6p*z#`VF;?48ai?yrS
zEwnn}OZv2e;xR8N^m_s%Fw=|kTeF9ca*_l0DFKaIx{L8_Kg>2PJ3k*%2zW-zH_>vz
zC!&V*=(6(|8!Jwc3~wQDd<KUH!%WCFt3OmXyi{|*n#pb}tP-dyjQY~JopXuCEbvhI
z9yBwA4NPX1I0{oYELo)8jhC(9o>GZgi3c#<XUS*Ca>ecJcnROjH3h0AgtEUfRSp~a
z6{GgU&iD)4^p*UlD(S>(VJQw<OCtR}Je=m8FQ0I(hk?lI5JPbgB0OpPD)?7HD*tVP
z+^E&VrE0&_S1mw6I4gWuzBt3E)j*1A@2{TbL~H)8O`zN%`we5R+CF1X_n2GbRr<LZ
z!F7}Pxbv2?z(x^M^VwlM;=omAC9XvynjirR|8*8_WT6z(f1|}lW{H+3ei7s!o+Yvw
z4tFe~eTUTOF`uF<n9EPUZJ5dQD1xhbjzWD}2=sV%(LaXB&(N&Yr2DeK)Z9EZycoX~
zseG|iM}3$n)FtFpH?YtwAJQx^`<1JA3j3sUsR;@GR$}o^R>#kCuBPc7xplghisR*6
zQx$#LM9Q(!$&mKvjc+=hwQ`22#o%@-whA8F5)&@tPbRcPjNy?s3O-=<CfS=RFF0L?
z>Je|mv+hNaZ2!mIrMdAGUUc$LM;2GQOVdq>XcQ_iCV2;zv9g`ohCC^&a6!E#lj_<=
zA6pxbV*mA{R}BM%T@GPO%lPiN4TI0WPn<%QR`?oln<jftTs(9Qj*kZGSOz(r>YJy}
zJm*6f2<^=Vi`B0LiCg<Mx$GA8)NeDiBM*OY86PUBKd#+I-_P0`-V3Qe|IwD-kPZVG
zC>SM@-L(Rue){J%>+Q_}+VL_fT-g*2C}>zZ=_k2^-q9>mNbwiYt#OBi6(a#r`FkyF
z&*iE0S8)A4F>tq)L}<!ylet~?3Y;B9-A|cP8y@u0qF;Inj2Lhmp$*cgUYdm1B+->`
z42mT>X%t}*vl%W*sH}x1-VX0vW+05{P*tlnrV(*9cLZ8$y-{5hCgQ6GjFBc*>m7~|
z3au|f9OvGs53hU{1qhD&Q?Wf~7H{nn-!YAl$zAIapC){0ZxoFg3(dV%Ja`a6oc3F*
z(GXf)mp^Bk#zzP&Bz*5@n&6KAApTBTYxIavk7O<Z>s{$-92Qm!*}Tilud->0!<<i^
zC>OEcU?D!5Y-oG)IV8J|7wD%SWy!M=zf`iV<k;A7<t|NrjYhmXu$8u2jyO7WZA3@3
z(`ay7^%LN0n#{3tN6lSb&UY(6#U}FZmq>aN32(o`9s#9(*#MT;cV76Nd$W0OURt=b
zQ{gze%L)_il-;RtmR-y`tPqm^<Tu#ma9Z?k*~u3W7?R7m{1KkN%ZZ9TVtSUGJe~H2
zx4rSJQ`yy!Y&QUi)-)0FtbCnK{`)}oW7AZU@&zu?=%3M8)HUOE3+k3CD7kLzSDERc
z!si#w3!^(p#m*a0or`3^NE9;Cq4cSZHulPP6w-Mv7Q2;<(5fiZEq}!4XI`?`Izl_7
z9sl#&V9^$=vO|&GN}E$KHOdPTU(x;$tjpME1hRlap;Tj$D{iPTB1e1Wc)%Jm+$M6!
z_4Q%8oaUFB{`(%?pAQ5b-@~g6NlvYO{g>N$Zl9Ol|5VuU5=Qhj?4tgI1{NLI-e$WW
zdVz37e)!}eF8aXCy50Uh+Gp81b0g`e2u6PN;8FYW!&docw9#?S>w?VSv`nho^^b^`
zsI2j>PNKj0+P^<zi+q0`zV$id^#!0I-k>ty-7-FCgHQ{Z(3u60nSBsR?4F7J7KwcU
z8h%6r;=h@s;7rG(dY%^z0yG1DbOYaat3ZGSklSm2*=+yEet*|3|2lPlsTsfYTR+|b
zDSl>Oc+h4P=*KDr5*zSkI`G}p4it6|q=JLdNdn(P{NP}8ABMo!Qh^_t1MDRN*boD*
z3xe#rf>^hLexe4;(FJcv2B{1L!iQx#{C;!6LGl*CA^!dw62XTuA?*Ia967->ra^)X
zA<~5*Y+WJL{vlg3p{ypMPun4yBtepQ0Rd<s9ecsfvSIm*p<;!hv|XXZ{-LY=VGxs$
zRYdRt(=(WQD~!klJQ)He$p#a4frs|N#E9XTbm84H;Y23k82;e}OxQg=!6Fu67(DJC
zMiF#b;e`_5g{|;SP=qi-B##jd<jykX4s*%^VG;6jIrLjJbA;L_&v_#Nt!C679N!3u
zI)bQbOhmG9)6N#6g=u3UJIM9UP$Pl>D4OVxcOfzEL2<HJH|`;(+A%1DuaLMgro;fM
z6aR)F!S=w`NQzZpVi1#fc~*#2x)n-y9!sYa$LJCFzd0Jyp<oa|!ZCd&`M8*Hi2FkW
zJ{l`RP*46bSouTZ@W<p`AkZPkZ15Wp^a8a4@TD=)RL!-P5AYZlb7chRg!o&bCEd{_
zU5X`*yCpe>z3{g5`JS8v(n)gThg@YRUEo6YLm)r1A?F>C(|yPZV)9R#WLLQ$_hd-W
zVp7U|lCvcwPd0hiB>4!G9CDu=NScyyADDU%NoRq;29rxzQp?a&yjW63Wm7gxQVu~W
zIRdE_I;oK?X+KC)dp%N%lT%BJ0?R$pdIXaDbW#Rb(ud?yM=Vpv!cxPFQm3~fptor=
zr0K~X>D|fcgN^CKi|L~}fm@5IvpN~P14us?InYU+<~I;J8lO|A(KBDxXRhA^?&N%b
zg>l^8<M08X6L3S2JamOLd94xJVws5u&X_C8NLz%?L7~Hl8T$ACI|z~iV4}o72$Bax
zsgzu*!Q3yj*b2JXs^A<T2=EtzBn3Vi%hO-V`;XBWEDs3CQ-&c9g|gijel%b5(qaI#
zE#}k3<hLRgIK_FW%j3eEQV$Iu!AS*(l?C3gNGDG}OJG5pBLEE-@NWev-J+-_##R?u
z*CBEo6#%yr07~``g5>#c1PK_1;s7Z2B=YxUzeg*K%u+8KlCx$l28$ObTNOK!kvHiQ
zl{Z0=917ZW)oa1>l}80-7sbXeOV&Nahla>TFo?z;(py<e`<jZYYl^CQN)1&@M;8hh
zlS(^0qw94`-tNNaFR14|$<}o3PUK4pFUoW_6R*yxx8&7WWXgVjEx%=@n>c#M4tF^8
zmkrBTAhXeRgG&!#j(6bVi@6FM%nBP_vg?$JOTWS*$4U}%>J?b|yO0XP+looBGo4Ts
zfnJr6TNQI^<!MtDUbEAMU<D6bH2|}6PYeD_TuB^Qt=?HlX<m_qP$OPkap_4arB@^D
zRr7<#;(f?-c_6rk{n$yux=OvdnyR@%OUTMmrYeXGU*)*kP$=R&tCCfy4xgvmJiPAZ
zX01&)p2}k#OIDo|8=i|^J&kz1NqD`ZtQ>MrJ;6(BU(5!}RGR>W20Y`2Q0w{}mxl1=
zx|O|#=waMgp~i?~`8exFOj<jH?5vdH7m&xsq+$isjmGTZ7c~iu1;x16`Ax;CxVeu_
zNyUINwq_uLVy$&E(j=g!xH-GIzHK<V!mO!NuVqy?OKcz(J{l8na_dV)L@J^KaBKY;
zN|?lCn$gRd_j<FakhA<qJI$sw+nlhzEVe3?v+G5>xvaTeoN#DOdpxXpnws!akM_b#
z^D6u~;a4-wt+nR8SHfd4&2MteXX^xnG#Vr<O=SH9)Cd~%77a|r1nd*)7bO}mg%j{s
zs0sBoh}jcJN2tjaH7F?(s7Gk_*>YZ$P}2%)(3d!O48IuqqDgn(HC~MNR==A+t((rR
zn`^N9<z_c0I)F%^M@qj3-j0$@>ygKbedif%u+XEN7W|eBp1b8}tc0k0_eMhCxf@tz
zrML2~*Jvf&M7R%aD@)$8ul`e?)d;mkT7qpFjeSIdqj#T;em|90zdHpBJa;?g>6ba|
zf1d33U!jBNZU+bhAHoJaMtUQj`ah!eP@fNY>j%aO4<=v@YFGf2P!W?$2E~}MaU7lj
z=_BZwEmYtZH?f#RS@)rkm?0NpVD3s_83k&^in9tUFl{BcR+!p~A6QKh)#^QLBLhSM
z6#*89uf$sxw1J%zp+hIb8lM1?Vx!GiqmzmwU$sZ8B1V>pN3o%!+9AM_lJ3VC;JD4$
z6%BA^rKm}NC;~2~s0SVjQ(TUC={bz_I*#A9Apa^EJ1_#CQUK?$#sM5S^4t^8-V^KG
zD7zyQn_?)K*pqWH6Jp#GI1Zx(tJs#@ljH_iR?u;3gGsB6NqPfJ1JLAI$t05!mL+sz
zZDopt3F>w}@j7zK%V>(v;HBBb7|H0AkipARA~ZqD8NHWibha};CeWlypJ&3MD69q(
z%D>V4pc5#z*<;63%^fp5?`LH=(3IZCCs9~hZ%qF@nf=zE-$;XQ99gHcN?<a9CKow3
zykV{AGYjIIQ~fZlGCC?o8IMrW<Ntm^mI7eovGB=Bm_}uGHI2-Z5@$1FA&$cp0F6!b
zS(Gye(7GYptj=<h3QQMIwR}LdiJa#{UD8g)_~J8ZP8nZVTHQ8>;C8wcQr-1=_J!jp
zn)7H}`FnL5HWb&<1zV+{LXM?Rzfiq@Pe}t@u)-F{ey>bWu1>vQm3AX)9j#^Vuvv(7
zt4&|ZdN;H5e(8(jDq9fBrq9au>T1Pr)cyBFbERu-kt>a>YcdyW-%X#Fe{tYkDXqUT
zUjG)bE*87mIl6B4g=nW#tuAH-X!r8ZDlec6zp7$`a&qI#)yD79@zT0kyfQ5mob_D}
zBJ%IrYD><vpI`7b&b`9X77E=YE!$)f!R&stMf$UqcP__n=ZK-a9q|PliDrx`d;8tz
zNwkga;m$>|w(Z%8BFWDqGMwo5MLSYBv`TAe^qj!=RL;yIyWZzJ;uSle+SYY(bmcgK
zV6xpu;ces3C?7>8kT-S(3#=^d)aO8xr{25E6#G`nQ_>rIoaQ_3XUO`>KwG=L+lzfr
z*}gRQfuh}kA@|;iFwnKlNoVXp7Su9b0rZY?DiAv?3_6fe*^66KMNBKxi^@0vrXTY0
z9ZBOJL@Q5-;U2m~PV0k?DwPTKpa->4jx0*Yjmoof(5Z^GV~tarYUP72J8K2daeo{7
z;P<1xwv#H33F!_%eme30B4wPA)6V}}y!cnjs3!e4nkqHfj(yz4cAYokF9A4Hz~9c8
z4~PLBHiG{M!0}N2s`mX0P34B3mn2DR@ei8nZ)eQswS&Jv$JiKRLBTwT{{L3(OZtI;
zFGxUu0Qq}{=@S@ISVT)0miJG!FEWJ^y#_7-|BjIc>*&NUZRzdnAAqE^6E(m=$I%5{
zGhIEC3yVvYbtK$l%bSC3v%9eQt;3^Z|6z)alZ%S!y<cJnm-i2YtK^xF0P)Fc83)uh
z5E_2sQ2|0mS4ad3QJU;FO;0!pCC><e#;+ePUWBKNa(`F*IL_i_E5Bg=AT=GbshE6)
z2_V*4T9HHC8_9fOZFkgjg`^xR7|wdSfnTT&k`Ut2^V~e>&ef>awRotp7S2+y)vbWx
z7B7_Ox55aCf3c%hp^r9crnr_G*x2qnjTC9yuQr2XcTa^9xi+hPk=WMW-BlnppzR9g
zL)<IB=tRDd#9{Vu>Ksav<hp*E<F;(dR;M0Tbbr$^Rxs+Pr6i<&(kg3DoNmy}$1vw(
zP(CvnU;lGE9CS=r_Ja4qs4rIGImesx%6lv`Gj+@$*%f_$_sjElW>2@B+121^z6@{L
zt9_pW(dG;TuUpZL{_^*RHow2!Zq5fhe}62R%hY-<!iR!T2oGrJQNR8$62yG%j^y{^
zGZC#OK3F{~=$#Q{(}bLJ)|j8#pFbd!9z`o#jma)P8ys3=u^lemTR0l=w$02moc}V{
zlvnts0Wn+@j?GY(G*QouWuZyV)mB)VF?;(_!oxp7T|_faL0cj|FOlA1@s)~U9l_ok
z(>PN9Wb?5EMrrG)?XRp3eWcTA__JY(scxPz1sNn4Ix(6305WFO06dJ?EFi5_M0U8<
zL}3nwxK(s+uZk`UN|FgUCjXbiP<TP6-K!&)+!WIz&cb|F@xtP>X)A&9BfR30nz@wm
z(%GGq;j*HeqhswIbOp@HOfs*NXTc7&oD=pDt)r9bLn*eAnktRvgW84Q99!;{zAanm
zMsV?HLq~#8bcslAG3V#O6cjF;%P~ysW>~}HP@~&kF_-ACJy-hxB<oM-nyB<?++mnW
zv)pYj^!n^s|1=?1q#|mM4EGkA=@0dpxt>&V(ooaAW?`_lyd12_wHX-7slnPE<~AjA
z)W<i3Tp7G3mZ)atB@eqAF9%}xOk@$PZcoZa-%w5?{<1-uQH{>NexYHy^)?cThUR9$
zEXnp}(W0RAX33`h^k&(ipW}ALWjwNP=0>;lb}ii1XK<b<xVJvm|Knc$E6|IwyRFl`
z(Yx)KV^{ZAVKR32yRQ|M<(_vTZf64MDIdG;_j8lV#1G;k>>iHtbEv|OO8VCtk7GJG
zA5UYZIkC@LZr1|Nq882`&+(DgL(hAdxQZ`cviy9yqT_ByyPVLr&%Fk#*#EvEGT{on
zSqW)(Hrq-nZ@KjY+5dUS&3X~~aMHh?vVA!(D)jqiKU3(>!>wq;qc14)8Ksc%&&zYr
zEus+@?toY^%LD;-#6~9-e`ps=uRmVeCj@S0TBNV%0n7_fG#S}0yp;1mX2mQF?FMm-
z2mc`Mh%78~ehFNWF(9RQ7>?UOH&qnSIvN-BB1E=_F1Ux1*DOu4>INTy!O@ZN6CM5+
zIslHyg*su(7QvgX9=2!BGip7XY+~YqUT%rpaMK+<($PZPxB05})@Jk)D|dYvy{b`w
zEK^EyR~g|W$!M<@ZR+35FT_yPv;r6ygs?mYKE6_mJu)(*C;lZX3zm$FZ&826(TJ`1
zHBK>g$BY-AGBO9LB}~$MVexX2*AS8XQLLfLW)Oz;sc%Z6IyaBU#zO&NS1qY!;|tg7
zm4eZc1f=^(nI}>X(~R*-VAw35J?&m`RZ2aj0{Zoxsk4$zlSJw=gA!k>9EL-%^XqMf
z0_G8qvF=>;bf}TJ(Bq}D`)7%at2Bl8r#k4~dspm_JNpbz_a94v8qio83-KZ+l|U57
ztOgfmUIL8C?6+{xaRk&t+RaHdf>k1i{F|K2dor|`-~>AQSBKP!o>Tt08hJiOmI|jA
zYLFq9{Jp{=d3*4*)j>k8@M#hE_oGQD1|f-5Z=q^*3OHBZrAYC8pgJYSY$1^e46PKV
z=?l{Iv-(#2{(x1q9b=9%bT-3`;~0AkW4s1di(;c$ptmj<&=BWb<`U^=&>A-1QfE}Y
za8hij4fte<;ab7M%>L#@_yRuj93;Z_1dR%FWI&!5m@u37h3nC8WXh>Jtrb}@8ewU|
zuA{n)z0~pzNLK^qT1#wE%4~?aj6RSUUsGC&WM@6NGM88%bIoDX$-iWP=2qLGX-4?%
zIPMi>^WOyEldb-)$$GdXpB%H+cR6vpgg#z^-B9;N%{|A5*KV3_{}wOqE37{(-Tp0J
zyd7SLzr^hToC*-C;szr5|7!wpMJg@+w+Ki^eV(>hQZnd90AZ0hwaJb!S~%+uBHyvv
z5^I(pLolFuHmDpcoWTBOC|~`i>W4Aw7amMlgBVd&G9_Twl+t4~k=0JId*usP{k_f?
zEy={65$2rT9$HSHi!#GZ_QlE*#!U8{pBpY)zDjcm4*U<=-YP1thF!NT!9BRUTS!6@
z2o8bZ62$|A5L|;>;SPm66z&9v!rk57g1b9Z*Z1$e&-r(sbGpaqG5W4<*5$fbZ_Q^;
zm*MiPj!UCgDoNvktQTR=n~-X%yFPzil(=i^J?YQyaHDvu3q+I*zl0=B!5pd?$Ei)o
z?cV9<b)S~lq?)i<In7}HxIlFa)7L|H9W9TuXR=i~z@fU=2SHwkq(AcM_aw|u`SZtq
z3AHe0TIgExclZM@F_%|w7-qq9?2^Gfvc0w&9r7=$7a=`#XlNkZ7CmiLk=eHha9Uv-
zsBS(E3v#)??*Ig7G>bi&dHZ-T?K(IKukoz=A_iBPYi>qJm-WLC=4L0CPQ&6)x{)0?
zL5R3Ib`ZfaO7eptJNoH>h>Y#^aHGL%tK%WMIJ>JOVSN#?;}LWO>F-lKo$u1yM`PQu
zzqfdGbd+WeCpt(j=ap%+z62ajrN>@QSw5=Q7{k3<j*2V;Q(F!He3|7cJyZRiS}7_s
zOuME0uK>6!0Sq$2E7pv-J%;?h%`o$u!&Wd`ZijkC&Vi+Xo!d8ebTJ++=&hxD8D@~#
z1Q=4KP6aShxu0Kny82fD+{zUtunquj4XpX`1F+7zQI~@IBn@?Q`J4c|A(MF0lRgG)
zN*Uhdc|B3QTG8JZ^S!Mddy<NyGC1biSV(*3N%g_}$rtANa!*Y3-cKdvX2j-c;7`lx
z@$+@W71PFJxV|Tl!98lz69|L^FhHDrJ!kSf$9f<u+mMAB&x<@NtU7#@S#>lF0t{Jl
zvYQVCP9B5;9t=AkOm!Z_37({No?vxvgroOayf<#0H$J=1Gg%)Zbq^A95AHh18+LC2
zS#L38Z;3$ffA*N_J|6^p<Pv=7YrO79z1&Z|ZlPX*sD5|!el8MzejDEC7(NfRzHeuJ
zCE5MOW&LGte1&A)L;}5Zd%g5#y`^rvrOADaWPOc|155*b&GUU-dwtz^eChoCZef0Q
zZGNYEem>HHXL^B}r*0M)-gY;B_T>Ja0{&j={_#%!i3$Ebb^dc?L0@Lw?z;j{R}q04
z`XD4JhBf*x(J^@l(o0pP9#V4?3=j{#`x$%y3I3%9Kqm-o7YOZC5AAjeMFwN~WkapV
z{Ss!F8td?yZ$h)5h3)Z$O$ty<C*UCkRRQH;>!V@Ivt+B}c<Tb;c52}Z*5Nx&q<i_e
z2eaXtr{Qx15gCrpC%@rd1ma#{=pipc017DRU!r3)XDCJ@QcVTLk%I!P0ZQH0eq|A3
zqY;Q$?QQ^o5*9)(9yzKP`Q#T#;S9K3jT`|)J+eem%()P+>J;cj^+BQ@a-zEE0f5%1
zNkDWjee~TIK;|qBWkCc?R$mM=hM5EBoimPb!FT>3oVP(SQi2G5B{@xO>ljjKga|aI
zyDaARb*wTxQVbT`)f#)V8LMm(8$ch|C?0qHGp@G`zzvt!aR8gbvCU1sTgqvwB*v+6
z=sVxWy7dK+T*dz~!LTpDcGURpyBj003l2!c4wCyGA{T3%h~{>kP(_e<{yGujZ2ba~
zSP4r!>q_)XjCH5b&%TYb*^PP$NUESuI*m<onM-)Hnp6%*K4D2tm5a~A)UVe_s-8>6
zze*16OZJx2@03gYyk%H}iCuTA+Xqkn1_uq@VvX$Tj$x*xbEM$Kr50*{ik(4IyI3=G
zy32w{RxlOUA#GePb+1qFpdgi#FD*wk?SLe`s}FP`hrqgW*1ai6>0phdEKAQCO<%uE
zKkRd-5r<{!!4~~sXM!LcN-Vs7ZGyX09>I9<T^hDS#tugsb)g<@5{!;71E!i$|2p&8
z9*{K{ll@NXQ&l{}XlDFLW?4>V_2<}uL?FK@=9^$`ed3rj4xor8rkJUwz#R@gCP-Qy
z^8=-(+#QZJW}4kxcJxVh3Q10%UUXGo7DJMrW??q>T@D6muDoU<nO;s5Bq#o7uKaus
z5iB>dH8*NAS1TA`ET3)YqUZ1q&so#m)l|>@j?I%Z4=SD)_Buc4W4@QBUhq2(f?E^+
zJB+|!^@w?nP?waC1+rMs0*F9D%3eVNMxpN{qJXNfz=NVN@2;S?pinosFn_m@W-cGa
zp&*a3Fh#b|!?5sAe_^sFvP~L5YE)E4Sp3^bzq635TRy0lv&clg2pm`3QBiCis6SrM
zJ-HV;y;n@iR}ijR;A3Ah8C9Z@puaxPv!NNd))Dy<0%*K0J)!(_X6g#mdw=Ef=c?YU
z@m*0_q42>TsDU-R7N~uHSNvG71}w@riXqya58OKc!$IJPpAo6POM$Xbmd6ew`2xUH
zpeAc5e2Y;Y%UA($eFjpX)aWduclBVVl3*PzuUCt?@+v<70E!$d1(GY@VWVjRE5St-
zP4f<@GnK5^O5y{5B!#Ms)v9P+tI(1WRoCyU2y80yPRk{*t7D*Eq613G3nl7Q)e1t@
zG9kqL_tg+swW67l4ppAfg33ps@*l1wKNo6VT-IPoRIgXnxX9N=L23*Zstg+{+#1Xs
zk_nv5%3ZMYeXub-uxlY)NYzpu-IqEHo4TEtx@A-K7%GCeee$m%RZ+=m$=C#`4P{=g
z)frqEVXn0{TBJx;u*j^ggo^CXLQT0AypoEd+N`E_01h9ZXt=L#QmAjar)&$U?r6Zz
zQ6NtbF->ex&njx{Y9KVm1dm{Aj1}PzD5&U|fo8NckZ;UF5!sL#5Df+>;HuZ(uQPS6
zr?3WKLz|-;nv3u2N(X=^T!<DHlIAnM=DV1>!a$@s7QL^iX<~soR-=4dsMTJfrNXSG
z>K=G2)QZa8j2=qk84M)iZXsE0A>*dSEJj18Z{1yJJ6&zDRBNVE1!8NrKe)Ej4boB+
z1F5*-tlE_?ge#d<JA7O__95+n*gCyk026h+Xfd8RHz{W^+Pl$qk%x8xoVNO8knmuG
z>O+Sh4*jbG;Fr+GZ=szU#q?UmFca0zviq)GXeSy=CtYhhGk2pgH=bz<i9%z?saY3Z
zXv0UGM&8jbPRC9Y>Tcqf-LwR))+s&B4L#jd<w;welGwer+`Y7ty^O0p*Jyofd_6c_
z-RydOoBn+Zus#JfM2`h`yVZd;tQa@5m^gc|H(b%WAO*L`TrH&-lvZq79*SEzNK`Ti
zs--rCQ{y%as#Q}<66$rwQ}-lt_pwX%6^-`hahtW_;C7f3H7)iyKJ@id_YZP24L5>X
zgf%C)bAuI|Ucrod4^022;7oCU>{<j_7Mt%YX2$O~ixLb=R}U2~4hfwN%@z;eaSuEw
zGCwtf{IyNb-Ea;U31@IdMngw|B?I6?W>gyR&B2#vJcC4GEF>0VbK2UNsgYDXtTZB^
z9qJ+R*s)3Bar2Mkc#r)YVZEJN!x-E+WbWTMm4*+o;cp(tZn-DM6(-23anNZdK9^U2
zxgUNFYh@2ZjEP&cO5(O}Sx?N~Pm)qkz0}74T%sX3G|YXNS3p3zdocMSwMNWrWK$3D
zwQSmaY1;B}+L~s@R%FIzY3kwtF0Z67n_6ppsP7t9=e}fPG*s<1r0=OSBAjaL*)VZE
z;1J?I9mHejlRD|QWF4V28yRLDJv5VeI71c*z$Tc_6q(P~na_2f&rh8%Y??190pQ-w
zm(eVMf&e^1-;v~uEOep1X`yjx;R8WI_~8c$jfLb~S!{Qw+OV#c{MmM%h(bx(9t)>F
z-0opq<58WZ>7~V4ktMIjrS7mL^Q)z0_ocrjOH)Hjk=n~n#7lkw%LB#Bww=qq+slhM
zE9T6I6`v0)_vR}`zAN62rRA$DUOfQ76Be?tilVxjW4($|x|-Fx>iG?bNxQOY0Yvdw
znGK62qRl4p08-Ir(HyPeSz;3CI*|>(XVG<{3+Lx3U1#FO<T+YbBl_$83&fW8il6td
z0PVWa9)L^tg`lOASQ?*%rPJFdK55>K=cO2Or5obIe;N2T*2Xtd*nl5Oc|UtNee~eg
z(Ea<qe6xCdQ?q#kmwqe2akJTA>xby3Y8psSncXzp$%>ZEM%U?0>8d^NHfq|oPke-3
z8navJb`jxDV8GTd$sO+__Q13qmx`TGj~xqIu;cPhq%zo3mp<Hb`@2U$VyRQS2W@KU
zJ174q`i!GpAI-hoC#L+gJs!#O*yhQvN4Z7KPU%NfrB8d?io|FDK!rQB_GZ78_MmNe
zK7+?X`q}?}Dg58giH5gdSOflNf_fwP*llF*KN8ehBz}7TVRieL>0aIV$NxAdCij6>
zZT>Oc=g2cym;RHW_82+7zXVx(`}q1<V0!+C)hz<o%l{wKJ$E4VUsgB!sCcB+Et)Ga
zy`ZqD*exRmxfGVkFF~5_Oa4?MP4_RV;q4ur!3{0F$QQJ&3%L~j(K9eP)iN|TH{Ufe
zy}Xh&yYP3TXlZq4*Jpk6@F-$?@9bRq;Q0Ec^y2>E@)iNOyrhyn@oz$&6K#XOA+2r%
z=p^zFJtxR+8X2SV;!Y`JcLYA-wJkM#h^aRkEFGnNJILH0fBv~5g=3IqFnQH*e6avK
zPsRJ4GuETwd7he~L;&a1=ZpLa4Y_#vpOY5_Up}hknO=UnES!<os0|(>k{z0<ENc(f
zan0qLueF-2NabS1U2Mo9K$#t={j<^n0b~C=wD{sLsuL4c6w|-DY0r~~2H}<4BQUA|
zkKMF%<)(k{rmc2_(5W;x-k$#(w1`Ylw>1A-Hw}QszKVeS|CFFE*oad6Cqb<$^Ka1N
zW}G%MK^?E>&#{Gs7EQJijdKgOlFVy%x00>9Ikr=NPn&F~I&Bqfr@3A2Zl^=gG!sFX
z#HKqLfvkl)nW1m?cCw%{oV(dEU*~r~I1d~E9d1;;R@CG+I7c3r^Za&xb`&uHoY5a-
zTF6vVzg<*jYgmX{QYdFuLY0`rmE3UlF0$AWjjQ;5=d{T|Io6VV8=}&Rcfee7xc;3*
zUg9vvVKoK|7iVp%M=)2}sz0_x@<JRHw05IV%d}>v-mDZQCN;6N5%48>tLf&cqqOPK
zpn<goxSe(UN1afcPqZ1-c+z0Z`EVkF@aH(~JQmRU6HoTzAiP=6;lM_S#F68ycQdAO
zvyVO6jxV0OR#>@%dVu>R{>4ILSpV0p;>tIa=~_7>V!yy=vG2)fa7R9}mhkf{O6^`u
zj5G>wPJR}WIv>?op<eD5(_gZGq4u2PYPJ*QkqZ!4^IzvgOce3fFTb)x2FGBU;sML)
z%+_zwFvw!wuEJwP+ExM`8S6#`XqIny6w_bA*&^szZV{U$>S4gYDP~cE8*CP|cbr;g
z^fS9ZLum!~o7x-N_R1pGT-F{Fbnn@q_Tu+P`gKoHN3C{*5cC!@gx^UH*9uQlwh*-O
zT!)YDQM~ihaqnrf*>UgRy5s1k>k#Udy^D>vdQH-Q^AH~Z@XYk5owdA)=6iQ*&!&fS
z{HL+Un+2aIBQkNB#Ulm)H$5#{{yS7&19ucT7<j+673T!slVETO#nHbJm$TjFQo$cZ
zMAje6VAUIlk}f49EBPXUkBLX|J=%6#JGsZ2AE~%La5q4N%Cy8s^r8djkgT%`SRUvm
zKrdn%_?}u>JOGb+{cVCe64wI+t6ikuK-qD)5b_Zro&bh-`Q-1P8`yYrW;2l6=y$*N
zR}0yr&%$5Wkzu%d?pqGc!rfKx5tTh9BLP4_XmY)hlxNUD#cW2hzFwJkXOYm*Y-Zeo
z4?-v95pt7^wEN(9!8FgJ6Ae|_UR}wl9<4<@Qf&6fo5+g<z7Q{Drr^>_4B#hakK;&Y
z;W>r$Kdg@btY6%uabkykALdSIuabIx_(KuT;d!D1^^B|aj3SJID9K)Z%Vp9U@=A0)
zYF3zq`Y;O&riVqvH5v(wh!5^p_aNPHTQAb#%3{kF(d!Zt!eel8`{@as`G;^y<oBw_
z7BB_zdy{7AlNY%2)z>FQ<Na>95{SDM0do`2e{UuTx#rUYE*tvEyzN&A)<j1&(r5z$
zAY<3kG1-Q);?BQYA$Dhm*?iSLTF?njJAZzg=R+ps4w}^T#V`Q6xHw3&A0q{83g>6v
zHXx3ZBu|tCcR>v-?0F~UqI-$=UP&2v#X(x+VV}Ru0RYC7kyfT%V(YUg194iv*3?~=
z=meTsW3>X}Z1+l?mb`U6C%)xo^5#3ya9g=)a<!s;Er)YJKKgCWcFN=d>{2-^Iq$#r
z4x<%Br;`2}*_)dUt%fa99)45MN*c;1sb2kf_(ek~DNA`3U=|y1o-V&IsXkezAZ7k5
z^3yEj@N0e(OBnD$v+VB{KRg3bz+vsRJJo9NS|GG5fo#)6XUA5i;`3z!*)zVrv!v_B
z9i=}m6n#_DPTyX#r|$ihn*+MJ<bp5&y{^aJpn#fh90DlGW?!M-gC}Ls@k)w@8jV**
zhz02GFZ<PI-mSP{Znxb8mVNo!3P2?r3aM#35#euKTQ|b(tbTSXBzq8(^i*3yHf?48
z_0FK-%Hl2OQLkB)=3jX0$eWUW8zJ=r0-BgtRbf&#W{|Rv6v;9<_?szFYClN91h5`$
zlM>Y4emKhSm^U1o712skqgW&F0T_JZJ_;RxSw`PpR0$40DK-Fr8uHfd@+8?z0kEa3
z48YQhMVodb0TLZ$88!1FJVj2_xb5Tt*z}MLlZkI1gh0d7WrrxLWsC2B><>3&yinj%
z3X73%O-W-70>s?RePVKE$^QDm0deqC(h&`#Qq=C}UD4#{9?qeVu$L+ZhhgRZ*S5N(
zGnSpg=6wP&4e|=e9V?I0PKi;wB`sEYY{pj+CSIg_DAfe>EdbU0=Ryp-cCGtR<hu}|
z*D`)7nvcRHzoXl0>@MG|w_BKveg=%0mDjRNwtjPYs|-Nwz14IvJ+b@SIU1W=2||Ne
zkIG(;eeJt!1B;(hbr_*i{t9V*4qTpKSx7BhGy0?d+E(5?c6faGx8deMQ5+c~a-EV=
zC3aa9j9~u!Tr6$~6=9?4V1=^SFM5)jsAHE<HMc|LRRt?~w9y{A)szzRrnXhsMpaGT
z`#b!0@>Ap`<7e2&k8c>+EKSMId8r5FFHX}*S{>Te>em)I8wjHI_PK8!k0J4(r54NU
z2(3f_ShjJUY~-esX!XBY-2xhcZ~oKjhIo)>|9dX^O=}C2Q$+FebA1W;(`8vi)4{KQ
zJ136(ht&<g`6S@a@AZHtwBol<qO3Z>8(itQcovNp|Jh9&SGhZne=!YlbH1M<hg`Q=
z;huuC|89KuzeSurUa<XmyftpQ_XK*n^?E)v<s(FnA`l3T9R$t8jA!|Y=Mez}q>hC$
zi-+a}$$~;Q%OE&Tn0T^y$PjfbpVwbiFH!+a@;Y23wCFeLHGkqoFMz?AfQt-KTU&dN
zLA^P5(6}*hksD!i0-q5+AATp4H#;~22|m(gK3$_eH`{J30N+k}Ur}}x837#G8^-s6
zI4Z^<1$G>zUPiS9icbmHUlM$Up?-B`ew@fkGJz9Pb8qD2Uu5gYxawC6@aF_s{D=gY
z%3zoqV_POLS__Z{XZikp%N%$0;`pnNJ3F%{Mj-9Aj}JMs-wvK_op%rhbBJ*u-%X$x
zVNeu%;PwaRIE+Bk1fcyamSZ4ea&O@L2bA<)1XhL<W0q4;U_y{b9iOW#IIj+?z?iWp
z;l(<sUu8a4wK`+%4PKaWaLf)<OJGR*POvY#u2&$qApxsNma$9r#itqY&<*B@0OObw
zew%Dq$1Kwvdzh$dSekVh<5}41tlv^E6B1p_X9KU#Vs4N#?&pW)2!M}!F;6iV&wImP
zTSp{ABj_q39*iS)>zF_sVL96oNdPFVE%ahG0=0k%PZ0VX28FglX<kMW&w)s9G06KE
zC<UQcQ<32(kyM0H_?TekISkeU26lL)G<l@pSrnfjh^r5SCy{|a2ujTnEl?57kqCMV
z#}Eu+5Z8#N<BJJajUls*k(~p|Cn7KuO&F9pqUZ@?J^5luKE_JG{Y9Obv~Oe5ZergM
z#u+#R)pyY~<rs|mqQA+-y&jL#!Hl(*W3qLQ!-K}Tm&Fm;#{VjacWaF&T#vVe10is9
zZwdzAxmZ){1Q%!mK}Es?21<A$I`o!4$~intBmPxX;&mB--7hYMgDLG64@=yMNHx*P
zIuY+<(vfu%B`nFYHHm&Kh<q*S5Rm*MD754aWt|3IeGst11ih+{zC{kNjU%ZMGiWk8
zMe9vchJJGGTuMF%utNj=J8SA^xzutB0xSq%l_G6jFl|F4ZOb`rCoydgo^~*oc66Jz
zDM#5Oh&P;=G@bM5tS_~}8Ii6Un?C$0eY!8*VlBNN40GmyJ?<voaim~qqPcA2p2Km`
zTvB;1VABK{^L!b&g~l0P8FR1<DorvJO<`m`O;0alYBgg_HIsD@m0cc}6AKp^P{V$a
z+4?GrpAxeImim$)YXp+Tf0wx!7hnv|=HbjHBLMua%#J!sJ-Pj-o3@>3Dr1@{YYHqt
z1F+}epljqXxa1H)b6x-mbn7$pIDrP7_&V}VcQIMK{n#djcxI-K#PX8A_5e0Xcy{&a
zmW5fB(7c_pJe>JFZ`3?MMvkd`?vyjkcQ3C3kS~~#zciQch*hvcpHEiy(F$EC)+PVP
z9X{F~AZb1?^$vj_$e9;a4^-O9%}K(~E6gj{vq4g-#iseWcLlcug|&W;p!vd^lR_`b
zB5J<Euck$%!9_Q#DW|N30PF1TyP{qf{Q9JVs=J&K7yMSr0$6>1wp203UePRNNp4>W
z<!Z?TX6Z4sB%ZUFzO1mxrDT`0^p9L=g=Wb%)}JF-DM5cJgI;OeWnNlR{z4MyNnZ12
z9`DX2;~@z+uvdz>%Lj%Of(JmA^E&8Sc$mqV*hL_6)v{ju@(pM?Uwt{#YB`@@=`H6U
zxZIz|`C>HevRckEcz?yEz1CH~7QGN2V*^gY9*8wrl|7`46FY^U3nZqcA`wz96_O%7
zQ1*5UQN|ow#n4c7F;^wyT1mxH{Z65p(6pMWRjH9uS+fCGXds7qzfvDt=|>Un&tx1C
zA+Tylm7qe6c5;R;Hi*-&dcUe>ZnQ?$riRbDs;aYgY_)a<Q0J9gQ}VuURIjf2q(=6n
zinpQGZlK2gKEqL=%!Nxa^d2XC0UK$0*J~(v9ET5|z#9qb-_qCF8`gJ0>Q%k!_z7x5
zwBYWpaIPdcE40?stidm&;bmciu|oakdVMFLp#oMfj5MejHg-T7%VCW#M$4kj<cGO%
zMw3Y^Lck<i4ScS}FO!Sg8yaYe>Lh+Q!J$n#^i86zjW2wg>tN05<xK-xO_nGvwe*OV
zHSv}=tqtzJEj6%~%+_YtU(F7C4Pn@gV(*$?uQn5*w3g7f#*4Q;a>1`dTGNVJhxtlm
zMw_%z+KTDh;>6p8#H}+N+u2jvIUC!#7u$Is+WDxF8aHQhw|Yu#9BOXnxcWat1I$9j
zWg_Npo?#bB6f=tzmrJKGe-N&a3uRUqtbEvKQZcVla%28<P@}fU^zEVci#fBFTb+(J
z^Y@23jX|a#IQ2gpnSQ0zn-nvdQ8(x-GFzoITBI=9Q8(F#GC3AE*$6YcHa0uEF?kBN
zxEFUwQ5XABGy62Q1mQ4;2)BBfGerouMQSre3%AEAGR5PNCJHkpn`1FQFr^D4Ff+Kj
z0v>QtRr@vF`uFF1GY<-cIZ+B0`(8$w7IkOWHD)Vw<}?ltu>S0tWNLSoY-C~>bdnsT
z)*tL59Bd01q{<j{SRW(;4)wPWwz3ToN(}w>9>U5Pnl~6~=^4UY8=77h-k@e%4<*=s
z;MrOnTs?5zr6$;?<~d$;Jss??cN}>^HGDbfdWX~8{0)G>DQW#>d5GhNCZ4VHYQ!?i
zs=s5@O7dG5c<h<QXtmVXvyxG1pD_~mF<=Rh22F^1h?V}=Sjww$>!{H@pK%V0@vx5Z
zUlkM#?t*+v<NP9?oR8x-Y-9JiZZ8kVu@601a0Ol~u?dR2k+zr=FX5MKLa>U3O_KIb
ze4d!Jx1ChP_5Rp2CWSGsu=Mh?2%A*N6sPgj%kwFxs43kch>FE4qf|EI!xt8Z)09Kp
zHiy$XI(+uHY-YGKqU6)$(K9ZR(@sNvq$kslpjq3B86TxtKlhnU?^!p-*(1<g<l*d$
z<ec8n6wqhRX?-SoXqJk8E*^J2!(y(nea=2}cF}v@!(g_jeZE9w<`ZzC#9}^0a-pDP
zE{kTM5#1KK^KGSBY!_MV)LHCyU+hg?>~C5eR9fr`a!nxl2U?s&-V)uHW>c5uo0b;c
zm$Dz1uB-JAF_t%UmbcuOcT$)4nwI~Ur7+=tErpj>o*q{KPn7>B>aI_&=zmamh9>_r
z2#KWboJ#+p?*7NN*Y@AeWdBaxC6DY>xeP6navs<GOQ_f9NR2#`A*nm>kErNq0sk34
z_%ESeJk-@EIfWO9`!DM5pCIHvXR;C`b(ar9b|YPglTzy&$ZRmnTicLlvaW7eWp(4g
zU=wjm&)7flgRIJ-x%rXlf405(81RM7l+iULb=TELw6S&Sv~zHIb)9!)U32#M`{D+K
zWf(A&-sTJ@;#7Ql1nUq4kjbaahLegZozR+25=LhBM3f>fET{!@k!Lb?1rp}Ivyi?R
zKK(c5a?w8qlLe>(2h}U{qT&U8c!_Vr(?_yCK(KT;ty#wN#1iE%1&9i#80GU!b+(Vb
zjuq+I7%s_^Qje7x+lBHBOealLS(_DGC^%|P)j8=8mJHNpzRWVYIvE`JX|>YPHmuA4
zD#4npBao@ZWnW$E2OX5f%*g(FaI>FDbicO|{#!IemnE>Kf|8$PJom@<%ANWe^w|o#
zeU#DM>O;0V`|Ts)TmS&IH=67Fa3lQu-?qIOOnha`btkhzeHb^q&JsK;ZyTeZmk3<O
zo$fzNu7&7YJ=_<v2Y5xKAA^p*qh{zLJfognqk5u@=KvsefERk+0rse~zTfCE7_<-+
zr>lN$9MgV&)KRbLo>BSB#(QW(j5EJd;Hj+#TTtZt1@p;IWkOy{k}tao8aSo-h_KGm
z`l%uNgsMz$@~0zFGSwNP8DGj~YpW8n{~(e18Z_a35tPH?L1@4)9rwNa_g}o{aeXlX
zpP>at@^ax<MsCXTYg;L7sk<y``#P9iscs(GdAKHMl*ATa0jBKI=TqM#GeVX-w}^se
zIMq@L`v3(wd{cApb5b~e=VsBFQ<}<SFuRy4Yag9^7ZiCjLki26`SabYlUM--;*caW
z@r3oeBBM$J!Q#Y^Sgza#U1#$?h(81Kc3jwHGD5257Mj@G5r0gn7)qACiHj?VK2w#7
z%!WH#rhSakI;v;$#(pkc!fE0SKhKRWO})iRGRL~Px*uwm#yU_dV?!}7(>mkj-fOvj
z$4%1aDK9)$#l&uI!%zIF{xoM%=D|jpMhJM=JB?IyceCSvI?Lk`Gk=c3-GehYpqOHQ
z&VPwED={RbGHpFNE~(8q#<tezJ1k4*b7G<7nO#Mw_(2D!n+jl2%`IhBf;Ua!wtlIq
z6G5Y##h+X<Iw|+L#DP!cm!{XO6?*3zLdzMN0hlmFYwHRGo%d$dm(22JEszaK-G#nA
zs$0b_)~H!tzTmzd3}>K+Bg$hcqca-5nKVx>eb`tM<i>_F&Bo|;o%-)cMq2vr=Cz#B
z3BzhpTvaQ`BwP<mPp*=i8lr^-Po`1$gweYGP6|D1VQL9J8~DE5nBAiwhI=_+X6vpv
zg8!`PD&P8hlPSPFjpueX!BZ5ZNkr64@VD}N@O^ccggD@`=#?kIV`Vz~33?KU7y`t`
zfFUZ_#0>~WU!Wtg0peZ~v^T2c_=DI$!rnN<<(_w62eu#%l8?w7@TL!yMjMlCzp?M|
z5#!5v{OUx4)_Sa!qL9IFd=o<|gXS*^Ww>`jI)j+S1C=B)@N^{JClMnb6<@E8seAvG
zKa%;`MtW(!y7U)>_6yoNpG@LD89z|yGw1KW1A&?ORP>@nAw9A`1W}~gUnzHn377pi
z+%OIYD_e^=Eqc+a^z>Np0RX(rfA3azTH_jdBMC9H@jy_ByyjU{!eBP*+rB<!m$PUX
zP7X4DAg_p5LGGvB4MY=v%a?kLSu!ZcX|E6Xsw*4yCscyl=H-Bxu|ce6<4@k?vVr7_
zGrW`86^^#Iimb%1SbMTN_Hdkfe;WKrly_oP%;X4|6pr+H-Olnx12z<6U71V-g}ruu
zJIowI#IkKDMU4ZIWeuuK<#5`TTZj8gl9$V0cWz@|U=n(Gc(J|l-RMNo^aT-IFrf{#
z|HQNIc!?T=$Pl%YK_S5k4fJlam(ga^;0+!NZD#UDQYatVtN~~!=Ss{x1#(?=v9S*N
zvF00}6n|o&qXbWqzghBrNml(SZ9X%}0+W-}&9oph?gGM69P)8My+>6rHUsl;;ByvW
zD*b6RpAWY448L;9-w2XM9Xt4?9Nu5$4}FnP*(GLI{k2{3cWD$y5y4mFdd4MIq!?UO
z#0wZ~@sRrSA%9aUh;tTibr>l18rR^O6Zn;qR5%RPYo8oCF{}6$Bc-X>e9v^o(Ok7^
z_of&h4@23Cg}##ZBui^QW1i;yNyHi<U|!Gl>ta-14JY{^Ei_3Bm0*<=PL)Pm=t8$z
z0bwIXNFN%5`5-MPS0K@Y2s<@;RxHCAEfB19taKkh*i0<8;3x6bE*SuVegiW!sk&&<
zPusHqfat4owp^buK!Xm9=Q>`VIaJB_FIStI$i;sN60Z^o+q6v+0zi0;E9dUft%N3g
zm=%HgSF3L;<1sBF_}$>GqIDg~V~1YOE)+9kL|uTbJrulAO^e+)z;x{HuRvF3LOU2>
z5cQ9ZUGd*G<<$noGaIxAj33o#t97i%vvx9$8tY(X=4#Wiea8OETaG!<DegBwP31;w
zja^zz%0xU1K=B?=uhED$Pmg<mZ51zfXuJM-<g<s)^TI@Q$FF>`iKuU8K@{yyjOB<x
zJ8S^^w>sCo4PpbG59ws-W~4Yy7q@t~-|GjjtKz@52LDacsOmN?qR>CfDJa_ALv{Yr
zT4H6{6|#ysRWT8$W}$T$@|TY4H6HQhd4c|F8q<%tZcK9Vq6V_9AG`K5&S};qYXoz~
zmmlkLNv<kz9&~Nr^Vu5YN+?vj7i*BWLMFD*l{#`Z3Hj0Te8QodxkHnSynuc_^;+nu
zg<+Yl;IjKOh)v|a<-y%_H<qeH{g)q75XYUq=jxW9M=m!WcpDpg!ug6)*H-<%zndfb
z_3D9IH{S4Aqmn|pqPuT!!9WNwe_$k7@Nvo9Vu@@x#$J~9BxMs{?AvP(zj%QEzi)eo
zFHpFtQcuFKoc1fxyI#IzMjNAp2e7OuI&z@?Zg%04RY04LdU&7tq-eITYE>T5)Hwv(
zYGZ1IsFC^oVSpKhEe&H;(8Ww-I9TC04LTOvd5@EpUBC%F&PcdxPG)BPi|2Hf1hSA9
zGkm|5JScYT2L(W%$Gf*LpI7}%xIVCeAODDzzWZXnjJc5yuf|zSSnL9xXM2hqe5q`)
zPh2QpGJRZlYqO>RZZ*!VMJ<iYb>;GzUv@ZdI}4h2W8v29#p;PXxz|PSTv(r?Jbqm;
zQR#kkt>3ijZhI!h_Xzv)9eqdHty_%FCA~xpe7G`q@1+VsL@F$u2}3>KRC<b(sWsQq
zIDKH;+;*{3RS2xH5Je}ycI3xSz(NTGqY^l*q5{V9fJA{n5cw;z9X(oAi#HBd@&J5>
z*_TY@+AI#n`7;vsGfqXZuStx(y7V>euAMW{9F@zw*(ba+Y#b9oPL*-)UjV*LOuo$Q
zw(?HoE@-F}r@mAjzN{x`(c79<HK?DBUwjqt{aVY5yrKTbnanuBA6bJmuk-iL1M0B9
z_|6V$BlVeXm$KR6v%>&Y)Ve!4`Din#v8sC^&t$n}0hA{e4t2bK#(~+8KyrHHZ~<{@
zXaF`ih_uWxdNwdR-&y;;OUi7}yVIaVvf$J}L=Z_?;G;osbYL(sEcmuPID99V2oQ44
z7~(G*LZ}yV;vE9X55a2<2~`iuWXEb{4<-H(+7*bCjp5wv<kM3Z3OflUL1rOk!?2CR
z1_Hx2^TN7%!xpx~GBLv2*}_w0!%KdJC+CL_<cEg`hQnt<{m>&4x5NEqBcQ(`Ab}Bn
zc@b}WBiyzle0#&Y*rC`MP|IJ?%>bxD9@Ik?nz;jQ?}2_}i!AvN8EO~_!-&jdk8lf!
zw9byq>5VMeiL^wI(qWDomW`@3jxq>{`jQ=W-WvtqiTZ{ftx&}!co9amsyZ$ZEF>6C
z%?H3xjgk3(h#!12i4KjCpqsT&u??dpvwc=eF5w(5!V&kQAlAA{Qpdzt0}{ICAJ+hg
zU#>8+)p#dn67RSx<P48b6_20KjQ5Zea~DkT0VFsYCj@9D1Y=?ZnplKUU_`*Vy(to%
zI}_si(4%+F6L-;*1-WDA5(Q2YTL_afO~BcST)ECk{LrN8ilkx=aH*hqxdwVArdhQ~
zvh!RV98)A=F4@dFIS-WF+6QW<;Oy^6?xK)tfv5bkPKnw|85c~Q)JUCnPMu9mork9`
z&ZREjrv9JKWG58qXM*V$8tGTg={Je#cW^}d!(95)Z90-@1igcyXu{B3U>Hd-ta=#E
zJPhv+MnIWC_%4H3GlSG6gIpfmpO`^4W=hqc!F2kY7d`Xas{2nA&-cb!7Im4(>lkma
zKeE1y0i_12X1#IA5=hE=SDz(3pCxLVl|!7J_SyI))a#>{FSBV7XiOJy0|HxTD`92G
z*Jpdzdeoj|D|%(qzsvdjF7qWMN8trP?GC10pG~6<*5f2Lkk33mV^vH7n@|#)_2=TL
z=7LXiX?sC7Nkn%2xyTU0m*8Ag`8<0{c1-JBzOp=lu{=3bcBgmXU>BlLq_533Uo=0@
zM?TN9p5SmZM=!p>!;~ZLE(bP`$j`j<SJo_y>F0<D28I(Bym(PSU0*<antP90#K%xX
zAzxG-oX-X+;>ai>???VF<OCG6GZd4_7k9Z7FhPphGKxw2i@Wv;-0}-6@3^w=3N+s3
z;>nlLjuo;1O6VC%NU%!ROpEmsfg5+vFvJ1>P<QYCTxkA5Qg=7V8f5*Shk2xO`On2(
z5tUcz?p`s?Xen*mZ>)wgoP{#H`!WKmazeA;e>RCws7gVuWnz7yq(ZKHE+te8+^=oQ
z>0T7>c$KX=5i@I5gp-2UwZb_EEGejhsIX&1$}8v@N~JU^Tb)pm_#K^@;q&D17XxN!
z3P35U2pa6?3-y)AkDMw+sw%ziN>!@r56M-R>eXud1?tHWngdl73)PP|)nA2J45*-n
zS~X<WHJFJtCz$}Yo*LZU8Uym$&ka@B;9CCsDkn2OmxdZg*Gj_k+D`+u-uryMT0mQ^
z$lnc44rX;sLUn9C05K{q5i``-29~gypW{w&Id=H>Z@P&C9BKEIFtd+neD#qZ>p#Kj
z`6BDyx5H`XYC+%za{2}yxd!Av@#N6@O4mAP1s{^t1~_)32UlaAIJ}Dr9vIR{0%@3=
zty^nv$l$7PVQ*TNY@!lx94l(L&1|wkZF;}obPj5!qHoqvXtvsK{IyxH+Fq}{+03rr
zOx@Zfe@{vDPY_b;H}*;9Kk<Wy79H6Zk%Gp*4YC2YRocD8D1*Qqq1vC$MD3r@MB&7^
zjipz}g)=n~kv1B5u$czhMiAO6IM!x((uR87c-FvJb%VzItKC4gP12@~rLLWUF&Yf)
zFo3l4(6@6G#9hKV^jkYb%sbwJIuGbO^~5_zezsBsb?(DDdD~j)xk30ik^<ZW9}iF!
zQ$R_p9qKq;du3e_5?!wV-MBGbK#6WY{cf?mcCp4bzP4^`^R_SA$Vro^X(;}0b0P<G
zu(6`3s~f(13aSn_*o#}l#~j};6g7YvjBeQ3UfwGaiWb2QMiR#{DV=c#-LFo%qJ%XK
zQV@7y2bF1|;GjjpWa_TehaO5(V4|X6k#Kj3aEId{s9gJPrDA_IH8KAIsNmsE12tYw
zC_Jwb+-Cl!0|&3`0baTYjw}`#c)%SpuOB%8!w+6h9N<nZ*7t;ZEtB*Myl)p68~SM7
z*ULRj^RmBlaiG|CfJ+>2Zjpas5qFCkb!QNKuIPR+ICxYHmw^sGaQAT7jHp6KMCeEF
zt}|Fq+7WI<E#_bk6acZ#7^(XhdFmKt(-`&A813U2J<T|y$T;)TSb^jyyZ&hF>5y+y
zuwurzSns%4>uC5ztR!$k2{JlLosQ>@_D(02-yI}kfhN{8aU?iN%RRx<6!QELG5X@!
z7<up{Tk)g<&lHQq6pzJ}Q0SCz;gr<i)bG711)OPf&goBXLkfrE3SJY6s*}v7)7pyD
zR!ftjJTvrIGe1M8O>{zjD@{5KWjHN$yEM(T&CbY)%(~Ld+M5sfS^$F&dqS6H{}|7H
z3Y#@~ob`X0p$MJ}FP>9Vn)_xk_XT%ei)UU#Y5u##yiVBskCJ))q4{4lb5TQ+W`~o1
zut&)H=W-9`f8s9K3@zB{EZE~NIvy@K^DI=BEOaX_LM#@&!xp1T7Kd?`!g!XZ6_<Q1
zmX-$>lMfd|4hQNiGUnZf(^40fapzV=7TkCiJ%*Ojhn54vmV(@u6AzcSa1kr9JS*`^
zE2$PM>q9FIB`aBBD;Yeic}lA}7OO>Js|6*ie}+~|4p*CS*UFKXHl11Grv*aV#kUsN
zXcuerwCjwb>&&|AtRCy^y6cuYi&>Q|yie=c3oSt5zx?6;uNqddJEqAz67jPB3YCIK
z1$)FSC(yuv>0lIA%_YLWf2BOY61t;G;p1!V8*0l*3c8zn<A2qMpKCU6l1yysTE6^7
zyJdj4W!TLB!(+?Xa?3RQt;zD1<?xpEaJ;SP_WJpj!%?z*+BRL)wj1qxr>E`L38Egn
zJHp~S(v~|9j)qBfyq`;VnDhXv)6XODb{WN0K%aKwctL@9&y$*W%fBFW!z_8y@%HHG
zch5iW<sJdiM|YPq_lk~yrOJEdv?v3w_gX;v)!}W?%KHtvKCj;FcVzCj3<KNKxH@$Y
zGPrhClzaP?QSzI)`<@OcM)$^*52dXSGF~3eHsg!???<*DF6kPK>2j@$9uXNFZiOGs
zH6I;_PJ}KWOg<cqF7L<L9$n}H_l7xc(vC@Bhj!z~PagYc%D5nv<L~CjZnh^FD!_YM
zcAVp5V!(+e;pwfe{VE;{>GM-U)g$1@sqD##X~il1b09GtGxPIP6a*`W=jn3J3FY@Q
zBa#EA=jRI6XI$fF)Dfqs_}K5P&S^cF#jMU5SD2)%&ha4U1h$9^`j#{HhzsYFGfDhQ
zHI;K2l}i=a#dX`o%aQZf?U$eFE~r6QpIhYBov)13uhcoJ)vZt@maf)sudG+_ZN;t~
zR&2dguN_;i-BzwW5Z4g88*i~2-|sj6o;P7R*MTiJSI!$Z**846w;DY+F~|5(-)}t#
zr1_d}Q&w)%5V!Bi0NZG1dy1q=$;UZXce>lh1y*+e+uI^}!OW4nYP-9?%XjAb_p{;m
zaKv5hbCJr3qsDZXx0ZVyDi39zr3cY~=068L$0jf8cSlsn>go0;R35vmc4kx_hpZmy
zi60u8A6eoboq3=Bra$1AKC#R^#+5#OBzbf=divY4cP55Fz;qG&e_Bn$5y$vIWo6C7
zE)A>YM|3G0W`*<j6FerG*M2{obItC%?cBFrJyrNVOBswgy=RS8VA{X-mC5;JT202y
zSFL3^bB`L3@)c=SlKDV{CimvSzh~3#PQblq`*ISH{Dh7}OpQ{$AoO1GvpELiZ#Uo2
zi<jEPRgE#GF^d}q7Z<QjVj7lI4YPa2FFGtZJnnu?2S0L3svm8`rk18AvaK6%NojdE
zUW*=)6arW+9V~~X<I+6dxi@#0{&Wb;y?Sa+9HM3Wc8K;t#qpHK$`Sv!(6@Aik!MQ}
zJ{Jb;`1;pHw92YD4-kd=eS+$mq(3f=s4uzN`ukuKQl5{BP_@4@;WQ#1D7VjAf!-`i
zX@LL$!z~Ib7=RDp{<rqb=zl+zlNc42n(sGrVU55JW`757yB+tmAT^k7hs>c~|8*+w
zXSOEx{<nd8a#I-cRE{J{PwL#1<FUiL8a<wOl7Z~KynU>I6zrb=vpr)5a*K;kkc331
z*!epVVWwtfBTwbIv5Cl2IZIG}4lwX7S!Q`1a-g15Sc>cf6QKb>jnV1VH9dpK_DoFs
z_(TG@b~MbNYGxLBDvxNM{JSBHj*`3@JWsj!j|S6pee?2)6%7pRKJz}HIJ(26?hRdT
z^1+Z;8bxl=Q$5K+?^0xKVkCUYUop0QJY_%+qCpPSnSZNg$?1K-;$wgF5wG(n&yW6;
zPiNUf-%+s$^aLwMd(y;x-sC%18t2B+`!rWUKj(i6cpoM|^a&vGDMu{b^pM=XaE2E3
zOoybts(rS^xW)dl|H=<oWU>^KWBsOd$;fPBuL~O80W88j&P}9}FVnAfB`TWr;yuxC
zC)}e=OOY?%#Kp3r)@zNdpzOtCcBSRvINqEf!ot~6tOpv8mHc@AGVG3v2Ma~L$AhQg
zEysNIHKARjP|@+<NC^5hB`MHmt}#-<G26{q5(j5h+0nwS;aYsEgl_Sa>}q3YWnzNZ
zQ^VeSyLYT8{g_qw{%ayzib9^Q=p({p){zb&czg0T-4ig*whC#7wW@kAT7dPvv0n!E
zJxghu`R+(m_$|Y)$hYfL0EWZPQUJYX=0qTCobmc^_FUOmAhvM=EaW*OSyrgj=by`t
z0$V!^;lg+HaZn4CAVc%_q;gUYVzj+$Q9ZABv#~|z6SAT{hZ}9ia`8{+XnzXtV@_b$
z%T7*AkL}BiH#V?U4zr5l&`+&!r(i=(+|12MJb)0gq)G0=f0>d|w=!m!S@#)h`qKvQ
z;95Ou<h{Ydz1vZYq%{S{B)6{_=d0Lr?rJ4{OvDk-{%Ew9hSE4wn17q|j_X_0cv*T*
z1}9_=h=#&-P}WImc2M5ST69n`_-6kAQ8_BZbyzjAwKwfk+Z+i1p{ws7qSm?(kfpQT
zBpy<M0Id*|+o1iU21@d>EjSP)F5YmmRdkHYby{Blz~+NeG~birFye9D-LtpuQy!Fc
z$c`=e1AsW<mZ&IVZr{7%MjS7wNT^PLJ(Tf_%aL?{B3l7VNe30R`MJU){md=quUygf
zxXx=BR}Nk!8T1RsG`&WcR~aM^Df|IokgHydsj9H}n98RQl)Y5>P*SagGs?l=b<OE>
zI&HZBI%QOfqt$lKJpF)rp7_;h#q8f2i?=c`52f=Zw}r2?^SI_hjw`+^+0n(4RtqQD
zes4v?aZwMjt^vy54{kO$Hq2KMJ-c`wpe-0WQPm(IAk26=BX8J8UN^eAwFz9rD@4c0
zImq6TKT_I&iB(XQ->G-Z>lU$!2ZogBd>lMH87wl!UFEu7e7JZIOSzdp7*~3{3Q;3?
zwTKZq^mrq)lVS_nBUO32<1oait#>bfjxgBrz(qXVMDV=^mgFgxU)*BD&<#hQ*A?(M
zb`t3|(>uOHf9P@uElk+X_7X?+E)eW}H9_&FSK<|St2gTa)v6?jlE7gQxI&d7D{qYK
zwsU_a_{<=nJ}b#*!t4Jsh2gJh9UJ-~Q^3m%27G5<Df&XGKq*DFXJI$E%&ay)2$2Kz
zhP6&MOU2+%zA_{wy|mm2qcIAtjZFK-8)+k7wa_+(9~90uGW?k`VP=!kR7*}20^QHZ
z?6R{A4xB!G-cXBhUHd_&boxQOMjGnFEX{y>OY)wzf+)mr<1_WGtf6d$Y)r8sGoy1~
zrs2ovh*d*2i!(V@qaQKy{6B@?2g!%Ue2m>U&hgX59FQpc7>AMZlLu_0puH>=-*6H5
zyn%d>6)!rWD|`J#7kJPx*fjCSZ`L<1m`bMnpOWMXjVQ}+aZF7=k<V-xB{w@KSqHz8
z+^7l_?AjgrU2l-OXr3pe0aP*Xw@XXR&*MK18d2DpNPIY8qkBpmgkXKfN8!npz}NKk
zMYGGmq4Ab-#2gDm(??`h7w1d6L)6qwe`g8r<a3H)eWVPWjA7>Cz){BPk13o)<(|q`
z_}=fG@YOb#|BIIrUC=~Il3rfWL4k@KU{V6hKA(}@lrAFpGXeW$xS~ZNdKzU<zI-hB
zvrg8RKZRb!aW+NTU65}r7}I5%dc_*tMH(ECX^uks5;fsGiZ%K0nwO^~*40JNPV2um
zfg=AHU7FzmslK-LL(8;Z7h^qh{n8Z<E&oUZ0R5{yb5)TrRBZHiU~bsusuG4<V*Ej2
zemrU#>vs-Jnk!*`8gH~(ppDY}*8pfbbG)W%O2X1{U}5?0s<suk)H*<6ah>wIu2-ql
zHhy4n>)rK#8>r6?l{(Z8EFHOAH>~3Raq3Z6{x70*=6@Ne?{@Kc{4-ELiU*=#{O<?q
z*50UF-zi58?5c@d0T){O)P|#hlv~z**gi_Q5eaB?Mh1Z@58lK@P8~vqrx@A~2G6eJ
zyPwCMVp(hdph<@Gh+Lh9ZpvelV+*2)r)363;CM50&GjleObC8UX=3m2?KOv0#4>qr
z-l>}pXdj(*!f=cTLy$@X-pc5|`9EK$Q|Nr>wKHDE`9)RfIOL9;Hw=Yr3+LVTx?jCY
z03U9PoF@+R-&P_*F-3ac>?e$cg;z!}(3nUC#E-{@zwmsKx+~4(LZD#uB9CZyhsraF
zIk@{cpH9Q{OS<N>j5n7>Y8EC3rJB($&Bw@ry6Npv(oAxiJ(DKQ%6Ffr+2hw&<*rM*
zKc6o&59>OVq*Ga#jMUEe$h1}^h8+GP)0#~ofRNOLEm|fM0#?wjnMZNI+xZYKZHSgO
zyzV<PEOK4iZGOwVcew2QEox<G+L0OH@yqL2Xa(&TO54o-@dsY*CR~+`jtQz$31#Xg
zlH<Q!Bgv;imJg$tR-HWq3#S6%DUB@O|MvAHpS>)7Xn1LSOZMGk7aBs{Tvi5WG(OTH
z=B5XV<Nx0@n8O#jLXW!=R$L?c9*{z<$369t`srGv2GjL%Uk|Cl>``{mYbs&+6mUBo
zej=WjturkB&Q)<4&k?Op58#pGy43aRHN3(7csfdA!7J0T^;nw0BVBF{_d8Xi(9hG*
zUjulB>$7O$qGulylROAjoCfI>T~m%5w}1Y=?k`$9%X&-QAW26&nYYaB{mWgo{rV1=
zA$}!}2>_Tqr|rpO0fhX0w6*oVPutPG5#V}KBrbE^m@#@q81CU)@Us})xp13S!FN?V
z@_6KmxL?I@x#>}PI!i`8?5MQd&5S%<H6R{OB3d3I+#YY~JnX-qHEzB5h(MqW)3eEm
zqk;q=DC!VJJxz=RNGvJ<XBL8Y13|K+gaTf~H;}69R~Rq=B{_h4){FMWi=Nz@QNSC?
zlG0$<vnP0SI{lvS2BXp2VcYTZv6Ex*Ni2QBex7gj2gLZwiR|?bxZKuC$e2OInC!K&
zi3EnFR4=_WIhoiESdiUZL4aN<fm8*<?@Jx?Cnq|MI+AZUU^ypKtzKH4e3I`sU>sF{
z)|dY48UD&P{_5=hFB7D#Z#+o|{C;=)Pp|n)ss-rv1|Tv527rO$YXP1K0d@k?{^S9_
zSOeR<^f{{nLuY@6t5ZP*B%_=HV-f-tV}guj0~geS7zubE<3aHl2!S+#piggT=Re`Y
z>fGLtqX<C))|rFzY=VuWgCz+37Y#$0_`dG71OD4Uy)JYxA@pTlNW)EV(^`n!Yr;}C
z+!68+H}R0+_hAfx(BR0hme#PY-{^3|ur&d~Q2`V#HLs(af2uQQ0udML5y<Kcfs<E@
zZ+H+xc==TD0uk>eAp9{ueBKE&XI2gcPWH5eg;@Z7=!K%)>S7m=;r8j0%#o78bt(Et
zsS0#yZb|48bs2U^n1Xa!1WDMObvZalxJ-0;Oo*Rr=)TY(ekG^-+L`FBpst_^kr0Qj
zh%=!Wg|37Np%kXBbiuO^w>ol(&lGlbl!6e?ROWQlf(SnK>3ne}_y*U}aK_gv(9to$
z|DLF$zZ*=ntNT*}??;f1i5#ApvyO!zo|TD?jU29>hK{`;uA`ieb5Pi?IbC-S99Kad
zFA5wV4jn&CoB#@)pj+$^Or5Y@tcY9f$T_U&UG3ODtoS+YL^xJ*pLS{@W;$FuBM39A
zKs(17GcQrQzyz}>NV}vD{g1PDIUK#xM7z2Gy;egTo`~Kcr`@E1(jutcCWq3&q1`2j
z(nF!$$AL0{sXau2GIFamb_<@^)tcG`&&+Af&4CyCw3hn7D{!r~MDX84t<4|<&!EU>
zCXxGnk%tA5$Cy#4yOHN|QI{N1*FlJ=Ta&2!zNp87C<JCSa4!lhAC1ZxjUF70X&Q~)
zAB|fWjgJ-cZ14YK>@DA-diZ|rVdx&ZySoJ`N$Ex<1yMRgkVd+@yL0G<p_>7QMjA<_
zTTyzR@%mlY{oMCH_TI<-2iA-AYOT-lJ<l_lNHv9oGleWFg~Bd{YCMIeGKCH+mEkCb
zNi~&)GnFkWmBTKTYdn>wGL;W2P2eb1NHtA_Gfi|n?YR*?WEuZhxrp&oEW3a;BS8tf
zc*&t>33_CKYL@@gSPAh;v0Zzyvr4IxZRzLdgh=x-|7b8LZi=t!0UF~4jI*+K9c2zj
zsC7(VoGHtJi@v{}D=OT1m$4ChWO;k7djDK1FCy~~SS9ii_YSV~^v_ZZJ@N{_^SD|9
zyQYKPIV;qg!5QckHcAyQKU5@!R~Q`m=G~P9Rf4my;0ih8o`sZz<#wJGs{~b8o;5}U
zbyyzkpeka4DmUvYqQENWa6pN;f3J{S7nVm<Q58_2+S%jT^N{N1qbiu4KQXA9W3bvd
z40*Ux?yHf<c+|5MBac@M)id5mb6Gs!Iy{y*g?@B+tZ@n)c6e-x*KAiJ?NV}{8d)uh
z*Tw7B1+>*R71iDCSAVChqY0>U+o=olsI9T64};d-a@HfG)c-oFr<18SEvny8MZ$ow
zlTvx%+_O?qd7W1_5OM*Dvzh3ky(nO;Y|&mcYAjsQUJO-@OvXSKYzDq6e{$m{fJ;-}
zQX}6$Qyy898nC&zyy-}`+2U6MeNy8Ki6*WscoSw&Gi5>Z8cQ=PV~ZY_j6N6BO9>hS
zm^_Bwvp;s#aThH-%`I<$ElS7DF98kD?nw-0%3LJc5DrXt<2LBNnCTjo)f(P%3ZQ>U
zR9%AZ3yjmB3gTPb`nD>6Jq3`eC-%CtRfkebiYdXdsjXNC@{Uy#Gr-7Qs1;t={$`{-
z!bddtxFxNsP+<>Zqvnld6Hrgp*(lM8Y|ud(W$C46QnO}Zfd;8yi=E%@%tP<$zlX#q
zb<HQXRdia8Qg!8FdrneywMy8Ok95r3Bg7FNv&S?8Row%N-A=!|M_^q?WnBOcyFZKV
z+f`0mun%i$bc<A$=W28-Tpxa7_s&beE&fFJp4q!z-rI;<_jFd7++))pVfTrXiQOLC
zVN#3j9-E=!FkExl<5u^vk@geK_1uT{Q#|x_yzZyhYu~s3NM9{Dec#VgEr_i?z)_6`
zH#Vd0V)-29%#(vgsXi#;(BHz}*GV#{yaVCS8FUdCL}eRtbRJZ67;@O^lvFpCUT2Y6
zAF96|GA)WnDj#y9@8DA$=8YaSaPWE?Gi+3?Ya-eFu6pRbiLPY~vn`IUJvXysm(E9r
zMr((mPYyb+>&>UXhaH`v1gX$B#!$HvC=Ti<joc`@<tS0mD6n+&V<*(N3oS-ci+yWU
zC))MH>Ok^|W-9eq61CYUpSB`N_;`u>c-;8g2pNDz0HAqoy!K%n5uQ;EXy2?KJ7gaI
zlNeS$(MsMQoj(rqE`UW~O`vbXGF2yj(@%s%O~f-HjZjxiNaBrCgJ-#Mrn_JZ57_f3
z<tsQiOOg}c*0I*A%eU9DHoGQ%_!1Xj03avLg3eP?3;?d2DQW&G%?80=4wx5`L_Wx+
zw-1q@0v+J%$oJetSCTXRI8is%wivj`?AkK|v(vb-{zT@}p%&t4LbLpRfXsD5bei|4
z4*qB}vrM1*UXjjii_d*xn9VPq<t>;?7;xY{1ya+@{FI#6Qk!FJn0bns=K;*y^v_A3
z&d79=?4%LOe*=o(A}(@ly;O36iZvvxJjPlzK%GZox!l=TG{85f#K7(a=K8NTm$T-N
zbK*3Fl2QYf-;mg67UU8a>`j4AG{mK0b2FTaFTZ`=AzGs4Uy?~&yoWB)Z!Jk7ElKe#
zlgr?o>x@%12dR(&*tp;SpAI$uyB-n2GZWb%)~B!|uD^Oj&$wZ4#Gxkrm<%^%{3vr$
zAHCQ=dPJkTkih?6kC;7e1}rZELH@Nq{Y#JN_u}Kt-$P9V&m0yW;g5wb7fS_<OicRA
zGpA={W@QH>QIVh`<@{@X0!Lz_5y#b%BvdpuHMg{8<P}h2wsj-Q$6?qpHMOw~{bS>>
z2|pxB@~%n5p=JbD^+??4-$TuaJVF7^xvl+!?&wuH)b+!Q%kiCEioL6w+l;Cc+4DO9
za$Hf{c3xjF1{~-3&#u`(I7q^apS;0B(gDXuta<d3zTXtFK9w1#6F^@kvTuKBPH!v~
z@taX?6+3LSYDt}SIMQ#e&rl~5_P|07`w1K_RMva<z`<lQSKb(9B!<;;#G0gTZS>7Z
z?FgmPWDwCTO%2s+uwnB`1w5-UmXqQc;?CYaS?eVHvNr^4o6+rH0&tV7L+ZB&BZ#=(
zPCy!Vq5ni!1b-lr6||g2lX01YTwg@f;(7}0cYac-dOMkAYcpTI>FrdL-g>$wYYuh4
z7ZpC+><hNPsPXYwT^aa$s96a4)Qpj#mM{J7_Gdi+Y`^)mc6VK~(jHCsV)gz{<@Q*W
znc3XKZTaB}ET3=a(Wm6{@Obm%;M14F+e<bC&&+!BCtnkZ5WE#MNwfSW2<IhxVIW=y
zN?`~&q4K*>4%3Y7@H@xRLS@<@n;mb)xMiJ4w$@S8C{ClHqG(}N^!G6YlLotS1K%Qc
z<;AbqzdK4lMQA6;v$h*0zQhVCNz(Qk`H&2dqWF=DGtAGDdTS8*BRvkR9msA{gua(q
z>1b#r`L^h=46j2>W-m*n<#sPu90$<%AD)@>pdf_w-#l}kBOr3WI05(ufb2?3aafvB
zX%zr`Zgq56{(?f=R?a=h?x=#xfs?7Sx-|;9lsfh3sJgk5lB))?M;QcW7^^(4OBd|3
zt?MJj=B{R@ta7LsWbH((Pvuvu49#D??d-#QUR9l@j<%+lwyuT2c3XHV7|z<?sIDae
zkOQL6I_a>ClM!-j<nwM}_iV!M-#f>A5#P(cp7o+AfrC2kEnZ&?pj6V=sr~AJT@0<i
zD&SKkuzq<ta!gYnpn>elE$Bl#UBxd<7+-y5hX&y119H@HH#zdGg@StRC#stq(E;W{
zat!C(zdn+r;4}=#v&9-u^FgbB&94s4{G0|_a+7^E=w$8xDuSAOy<|zzeKsZ$;Mn?%
zNA%0@RhCcPPTkL&c-rus+P+_}d){mRf-3EwdVtjBaei)wEYY`22mRdoyd7h9D)SA<
zw{i2GG9uSmic+t(9gc3x)^oehEW=AUl^@`Ahf);%`Oje)v|VKLeG{()I`T3~!1pF0
z&48@0%zZLveP;DO8koO~jW6=?&y&tagX4hs<83JbB#0>7O?|d}sO!4jI$rm3-DCP*
zcrARo;}4^TS?g_z5Wk<$5#6-k?m;-p(?ha6Tw3VIt{LQMNGKit>`ian(8qu*E_$W2
zaG7zA8OBHZg0tUkG00^yL4K}g0D<uSUa5LUoRfle0HkX((%FeQB@du=APUshpeOyn
zuz_|l5D=mrX06u`U<b!w?C^)<EpMX<{gE#n?hBP?wjgjr!=)sg_EZzj2C0!Nwrl8w
zzWP8#nBF$P4fmUjgu%kd3d`haS>GeQM=?gNjUYrVA+T4fekZ+t^ODH|fbj0Wr|BPg
z8CPu?FL%s@f#lW7!<&#`J-ACxK+$4>Dae3nUP2jcGh(Qqn=}I6$leiC*08vGtC3PH
z%6qFK{rZX+$j-7l(>MOQ<0=)AJLV=xPtdPyB(VP;%<C}*dwX}4-WL+V^Kk_OB_c_)
zg}IC=CQ`iwM=w*x+)60)O5Ns8CTsqyibzcbvV)cD+x3_|f!>OE$FQGh8_fGXQ(lvw
zD)nghKCt1=-A*M8>E#I)SW7*3(emw($-l2we(^X43_#P*Kv680z{iRUWNk)4vpkrj
zH42VUZHC(s=kCk#+2Mv;38RqyuzCI>YdSXSGbJrc1-hKKu4m=1d{)OpLEXDK+<N`8
z!vb3kA!oguyx<fG7Fn$?N4V~&3n=m|b|MFE`XwX!6|M9%PLh}%C30?MRriG%;}#25
zXoKJ@`y<u-qgVPbt)J_czBY24S!moCu)8+kx-wx)ZtX}VHP4MR!M0xNEMu&r?$SUa
z1WXK2{;rSEaIioED3<+Ns4FwC{5(3Y6La#aI6=|&b+G)(__J2#_{kGi04!(9MOfsW
zX_>8JG{#(7T1zAdV8;iJof&8)Oj?+-<Ki0WIQ!iin84|n{Btducc+o3p2zvUgxDGJ
zpQ0wXWw=YaJ;oek8}oE3*x|)-)S<2isQne=r{3&{-d}^A-yegWbF(+>o!?*_Xz-ap
zlT8zges|DBoO`T<n)Q86FJ7aG6I+vry7-;W0Vk>OdZo5CJD?$r`T7D0ZvyFY<C(>@
zu~x|G{f3iM2Do;?IhcvS94(%_&3a)voMe3sDc_UuIP@Z#DKLlDfV}Z%>2#Eqw;BGl
zSZlWBbey8m&h@+B&;^Z8c8Ad)DBHx)MS1OGUafzi)Pm%`B1H*9uG;0UDjMXA5Y(5S
z$Y+2xkBWhWB2ugAg?2yplejgBmvhrUhc%C|T)V`ro&0DZ|5#(^#NjXWVP8neW9)rR
zBRr5v|3LHwMVUsKQ2xDo<Swn(i1AC|R1S?ud5LR87fZODBXIBgvn<tZ)Y*zitbMI~
zgSjGFH<k;@AQ|+}({x5Hx;`fMrd2jG!dER?YEtVDSe<gw(z6X;R_zja?_bojHdhP1
zJ0zUZZdjgbZEgFqyl3YvJN>(&TuSDhQL2yl_6SD<D)(#LlI)duCl8E`Ne6z|+P8Vy
zVaR#xxo^Dt=0gvlJJoI_z{h+GrB^T=mlrAIJd6CZB?Oro&!QyPIFp#JHHps;7E_fy
zN!S(uoyNIJ5MAFaRc;y6in{`)uYYGE`vsGy{h3_p`$L57YJw%t6>y%jE!BH4`3}C}
zl3quREW30zjhpv53@>+2aervui`EUD&UEY5($LqyylZub+(T37&=T^-ui&`cP0QZv
zxiQ+`YB}BCNa(rS_7Qr-{cVPi>3;yAzCS(p2%h<W)g%6~qG3MQh!v|PHf(7T%Gu@N
z1pMIgcQZ{KTx<#O-Ir>)g&O<)@?7OaRsHDwbzk+T6j}Fig908_Ko41Ces{Kk8EpRe
zNwe$x@mv-)Y75){Ch^X9)ivIig@W$fdf4~pSh4pqw$t61zqA6d59{!~zeEdP->J{d
zhjagYiB*5)+X;Wa%M!XIR)-fEQTe}LIGa5=5&AzqCIrAecj;8m!$H!&{B;nPiUvOv
zPnNJ0!ar@!m^O?v7qSGi{`fa6lnRO@<SfZ9s=fRH6c8p<`oOh)e>!C*Mz9}ZgW_=s
zoFnq*WM}3EOI<?!_-?4!GC;UDjv`<>g3-VpnLvqACV?9%Uh<Gk(U3#L?vD{D8UcC^
z3E`OwLC*-%9;H{dd7)|$O5qZUCLC;Z!=TF!dafL71{N9E4ekbnSd#PEcw*B+!f*#e
zu~R~wm-*k3gR~67aa_Uyg<;-c`hqP_a-t9ZqjYE(^1ok4{Ok|Ey9kSd(8Xln3;c>e
zZj^BMi2R%oo&t$PoM`6VL>7=o6^TWa7(|tM!lS?$Q3&^2_40qyBaSM>=|xX7dhM}t
z)GCE#?gvzEM<;~<!U_TZ)*~X;r{$QbgP0FYw15P_SA*C^&sc;QaTOA~z8t%F;HaeZ
zsfREIZzk+(TEr=99D5L`8O<GCAWm%{4vQ=<t%!Cn0`qj#{Tvd9o)~ZQCjR@U`1Gy#
zKV@;h+2f0?6ObYka?2BT84}WD60Y_Vc90UA!s09x6Zr-b-jpY<y-Q3DOVs$0xQdjN
zOrLm&k$^vz_zMz`z7o&qrO&KF!^(llo|(vLn8+RJ`n)}nKQlq<Hc>+5GjDssi<Jaf
z!z6i3H^ufOrIkb#6?n3mikn77vertH=0H5~Q!*1p>ViP3$(vN^_EZ51eWBabH)F{b
z94WRcDTcR6A23twD^eWCQa;+Ie2PqQ<w$i?N%c5P@xn~?iA)QOOhrP9w*{u1-K4)Z
z%&;5FcuxT`;YfaK%M?`+pD>mdcbFDlk(y+fCgGNrwvzrXGxKwMru#~!^KGV!ZI*9j
zmS07d=UA5aVOEGrc93m$F=lotM|MDDc9<bc9wsQ+HZ66GTEy0}<}f=JGbes5Cs8G*
zz)%m5BStDA=LhPi{*{R6xxa^+!GwSfv48Q*m~qo9x_|<de|YALOq6+*T!qk#*pzHR
z%ls4w+@FMicF{2KVTGfGyZ}^~AFo^xCs=SD8I7UJiPKSlb)<(@8G-AaQ)y5bJQhV>
znOy}boWYEy<;)?7(jzj8V5r1rxeI4oWx?kx<WVi+%gTpD<k}<_c|!u&EQ`H8Bj!tr
z&2A*Kl!~_kqlrL~COgHJqbiJ{CH|wumIEat38;<2rTRvthzQGTRVnGq{MJk5Yn0M=
zf}CGN?d2>=#DHbq?}>3+txZ-b#qLV8R^CpqF=*Z~+1w#>(w80n5OG|kl=as3Frwol
zb!25P!6>2$4z=Z<FNa)~tq_A{3(8%Nd{}kMseu(T=3p@w(U=a(x2kLzcgR_kOdrPK
zOjh1>g-6K6s+9*7!2~;C`=rXHOiNcvhP0^4Ppcn%#hLwAi`%0<gd8!J-%&SKB3Icl
zXQHvx+c6JkAw#38Q?MA@RI7WlEOW$}^C_7oqmZXpnM*sE2FEGZypg{h)zqw3lr&T`
z3D!O)ery@1pXaPyP_^ykWbPiX{<&)1PZ|0n3jf3i`Ei_OtdjZYjt;JhjKozxd&h8j
zM~W_ijA_ie#L2vJM~lyeOi)#SU`MshNlJDPq^N3m`I-sUhlcJL$WT>pHdnu#Soie0
zPST|g-KCKyq0zFjj%}{N$|cKGv|dHGv0S!^+q}vCsup{oQJbNeOQ!j=V1uMCyy0rR
z$?;DOGpxC{pc!?}z2B|YvZE+7poPV}<+DXIR!}owr_mI>i5{Z`FS^w*yot4_sdcyY
zV<#Bvpd|&+%1qxnuh5EO(Ml@U_D(56n6U|;5h4X^DdY6WScXKB&`=pS8Lb()Q?a0f
z@-wpA5zXVA`@Elqw8?7iW`ynO18wIDkkD-5G70M%af!;d>_Q(5=X-{dY?fJy&QO^a
zw6>1>uZl|0PUk4^zI#pYX!*e^%}qgXsG8<5mptrVV-hAeeGje`?e5|1f^cEZ`p7M=
zsjqR#eT!D#T$A0#u3X6OPUP<)*Y9cY?m39YIO38$xi2}p?+F9-;tIoimAu`&?0Ulk
zdNE3R^?`jqgAw)gUO$<>C#F7)qCV7#zMJu0LjKr2!+uiVe)61t%IbdF{XT^#By@g1
z@K!&aBwoeOLY5qA#vCkW$>>jvepN{W<2nF_99JIoXyLAbCg;Is@Sp_u-~iI#5OAnh
zXK+exs9AQfS$IfUol4pPTQVk!F9r~}Hq>u3v|%w^k~sL#UT@@J!K0I7MvWqOLOA(s
zgd%X52g%vy0gG*&z+rvl+i<=GH&hIOrEfyC_o`E{dW3@j>aISbwT_MGAIktBn=<yk
zG0`&jpqkcEh|L#XozXB!WCFG^`-k>ab>xT>T(_<<k(p7<1~|0f0V{VMH^pT9S-_Zo
z^;o3|P+S4Jjyl%NK7Mjz(;PEc{y>PBq`tqVs*WM7IDrY(!xk>ah9-cm>+#*GutbN6
zuly5Z>%e|)!a2!FW)RF<61MD%4C_jTtWT!p0B0m|m$;`sF_HaP$JvjWI^;$=p1>JB
znL2r0@>xCf*9mZen$S9D`c4ul*cbcf$u!LtbYLBZV)`7(5&JY}h6XeZo0-Pz29ngz
zwD8Xm;SP{$U`uUJuvGhtBvR69lz?h*2y<t9tI4ROu*pwnB+X|QCFeMB=8|J(*rkwI
za&g$c%=2#nxOlL6Cg=HS2x%tg?;hqW=;vNe0-w{saU{CGW)dMQ$70E9%<xGql-C0U
zA7>35v2bx0WIs=vp90l#2w%m{eViarlv-pe7<#Dq>c9guHO11JTolk*bo?+cn!89^
zxbVpl=xa(~hP&XZf#vqNL>92*RkCDLv&^tP>`$`{+J0%QQ9@$s?;Wztvb9W-xRNCW
zOgbf~y;~s#t$Hf2qNaYv)Lv1ZSOG??a+|N-0QBo=#A_YpTQp{+O<kLF*O;BxlEi$f
zHE0@R@x)O*gna>jdFF5H{}o~RH_!aIE}XMYRJNX*tPXCIr;_|P&;0e^6O`w5Xs+S0
zsUGLdhFB{i60_-d4c}0*-1G?Dlr7zK8s4O1S@4XmuHE0%eZ7VJ!~}S&hj#V~`$-qq
z?-hQnE`hWaMqFPA|2FfhZPn6ky5Vhl_igf8OT?{az}7Ye>dxTn9o92+c1<15S|{#}
z9lj@R0Y57tryY?zZPD7i=W%^N&~T05`pDuAF6jFW4tc7^cjUQUvX;E`H{V&O4C;={
z+m(eQ!?tCosMY;`kZpaxC;tAsaUl!pY2~*UZY^h8i-Z!e=k&DaM;0rYx+RqTy;Am5
zf(8{jHU2dHkKZtZwg@WET3R1G{PdD&b4^WSX+w;}{TiKv!<jYmgo734y@SPrkf+ri
z*+VJ2{pxMJ3~A5RHl)LYnSGL%`>Yasb#9=zDaw*3Jww{gF*TZCP1-s<yed=ioF3Nj
z$3t#5Pz`NN+Y@fm(+@B$)pCHKkmLbH8O@-yY8};PoW$u@zsQ3xd5?{IL<N8)a=^yZ
z=@#u7;zaZN+p|5VGv!^sw1%_jLiR&mr2o?x`9DwL{-MUphW{BO|8LZI8qu0}uer6T
zx>GFdpm~+V7-i${DcnC}<X>vs9SZ~99x+BTnF4WRV&ndc8vi>+=A-~ItRoO|MZD<T
ze^cYQ`GuuT&F{+V{+_~h#Wj#OwhRoawRJ-ga>a!F5W@bU**V1#*y7T1RqxFFw++dK
zm7U%1iEEn&hvM4^x#H3!Lar$ISFYH3`Rn14<@YTROaB^{-yci`z%v=W(3K4VF>yL5
zHx%({_c7Y3i_R87!|vhK&TGmp2GDqR)I6@S#x(>reqQ6CqPGmo5QBwQk2QUr%#mq2
zJyH2OGhLvZF2y}AJULsU9na&adJUTg8@OrY@;6p4F~4bwawBOxUTRWC$Q9K<#fHt!
zkzh-;^!W*h=ltTgYzLc-UirN%8j~@;twAXiqPGrsOgqp>3N^nLlExntQEc|L+*ghJ
z#F-*my!Y+GHnZTh5l{OLx3HNCicL3-PUMs2XxycZFWb+Y20Fa3MXx&{tW$#?_s^!t
zyj+%Gndd(y?!49y=8ltE@uWIEw4B=KN1k#|9WK+y(#@!-r7W(Gp{*WpGC$vjsl(kC
z{}=Xtk2aS}bnw^suh7l4fOzB!zUZ%03xc#Cm+1BI<ubnNqG>{OLP;4}3d2M`Ex*$S
zf)W@asN%p|Z0va~MNwi6%SCVa1~8IigmhmO$Fgr{FojBv?C-`aoRXI)$`g(yCo1Wt
zlq3lYtT4-K$&DqY=;7&?rZT_Fw3IP+sYpyW+aW5;03{mkNmv(oC1lyR&X;9B^--`r
zcbyxH&-I8(F3<aUvBLJuA6OYz5NxCeE<B*m0t-e99>o^NGZIyl%n{4jmUf#&*$QX7
zRN@2kX^G{*MSDB86$5~+qpJE5&SONO#qJm}MphozcKycc0|HRC7%Hk6KQq1(044O*
z4?p8lgg3$jk58I4*{K*BzFJ``@GritI&D+@e9Qy+z5!Cj!BOa>Z~f649Sk|{;Nrub
z8Hb*A-K2rAx==Q<&wE))?DKj7WDiKaPXrDZ1G$C)&I33~UHyX~J?HA7(!Aq<J|C98
zJ|XgO^#*?&6Ka>%YfYs-RMvc)gPx<g)II=Dr{w7<${bGPB-(D**0`k7iE9Yg618w{
zBXQp+Qz4Iczh=E_tpe)j4{@%$todbH++|$duDkR^m#&x2;t1TKug}$=K?HJYOjqfp
zyMLn@iT?S-xHu*yit04~%3{#RzMvts|JUT}dAm07pH>|;b1@%hbWO)a<NGgdOAOq#
zHSoQ4Dc;RxPUnr}gS{Tfz<mpbxLZtYjIF!ldMNMxN%NA^{b?P-(8h?t9B_Z$hfe1U
zRF(+n@K3A)38^Dp;H3b(7i+F?VC7#Q7%(KY_AgOLdE~FzO+PCCelDB;emj-UspVkH
zpV^P$J5(96dnm7YhjQxk>xuFb`r+x8IDvMFvroF<L<{$^lOP@PM~M3SG$XpYJW%iI
z#c*z|-+LX?9ixlBC<PEM(FsA~YMAT;bG$d&=eM^h%rd=!Qx<#&^or63VIaSfpeSP*
zSG0t{1&B--ZXpAO!vO(x5g33Wlgdf#`~nA%$RLM<OpsVog3O%AhwY4p)SE7M0=Lyt
zQP#KMBsLGAmi)w^gEC0WWif;{W&yBJK&7Br9=`lSp!)7RHc>Wvpb#E&teHV^^3aE2
zF?Yu3XBWjXfJ0Q-AQTO+br?0O2T&0$B+=NJIrRWVNh*!N`K^5>%g;a+9vc@1N0eO>
zmWpAzMFKw$1wDp_<?)47^OPHQOH$2>(jCP{-sJCFT(@Lunv_XI{U%7f=Y?wA7rHD7
zI6pW84FiUGe$q^K4G8r!R~Vk5CXQ3H0;4HfZ0A@qx$pZ#z9njKISA2J2$!*mE>kR4
zH_@C{4@gX=2)H&XBDFC0OTiMgI8XFgtFNp~``Q)VqV$5k3xDIAz8y1`CWeO)r0TP=
z7|s&lq)?;g4#=*AR0vd$<lC<l%kUWu#<&v!pzA2|@)xt8LiDki+>|6)L}vZng>y;4
z6=F`5p*iC!#_TjO=47;S>Bi3yypQ@w=9SO@CmHYxJtuKYW%5UwfXdBgPT~3}+#2b?
zDo+bz-Qgfj+=OdND>tAKv|-+&Muf}JZAY(^d?CpNwfd_t%(#YNiFIN@>-5e}T|_{y
zd#|KkU94Jr+<nQ@)UD3$<hYsBhaptQydD;CLddMfUX8T)w)KJA3b|s%mc!kg8c-vs
zP=zu#z+@&hJbso{xeBe+_Ji*@Xu2OSE<9^&nG`&<EtXry8GT044A%&9BzaZ8WL4T8
zH>~nGk>9lRLts4Gn4>l^$avR^uw4UC_aY>k@apYi+gp?EfwGQeB}g0OqNUikrr>Re
z0U5_1nkp}i$hXYD$QXAlX{9bjw@gXNF>%NPLfF)|v5ap9$fxSVL?^cKd~OEm@ft$Z
zY`U-Z$kOg>fa;;p9n#L5Vg9&JG0AgXiIQX#Yf^F^456r~C3b?gU6%qb4k0vuN}(^(
z)Dx&qCeZ2np(<}DlC;z(i1m=hb!aD2TJDYE49{Uk&jiwUu}!$lDJI-jT+|~>P?(I5
zU^bdf8B6PysBgC?KD~|3B2l;E+k8Il;&+~LZM?_1MKNQz;tG$vcd!;>%HoN_Gt1?`
z*jHlnp7LdF&Zlv-ZBSVKl1#dtFY(1zc0O}9g;u1Z_{#P%^e!y*t%$A>ZvPuHfyKs=
z>I9#DD@KSRCuHh6qrJiY?JsYP-ZTCB&|KRM@q*<}u~tyhWOT=~?U@NDcXzFt!<SUz
zYqDNu`~@}Gw&;PYcLvWOQZ8ouf`-|e&w#B<j)^E;{NQtU>#k`2kKUp~8&hYe1v(}N
zT=!HgfO9~*>pLg<0%NWtX-^r#+6&)f*G+|kwxLVe%P2jsoY#3lBcf+`K2$c_5Str(
z+S<y9<SuHOKY($wLKnJvYO+PEfl)JFyyR%}y;`srz7t%NBK;>dm4L?ql!4NP<K*E0
zcG0fH<D?yfzkR5!^m0xX@ar{3F1i9+^lXz~OpR;q5o1dSs9w|EG~@9^4QexA-1oax
zZ_kDGK%A?mC%C?iabFGG`OT04Kuf7{UbWSU_n>*xfZszRgl)ZUEbhUM@pPH%dH<CS
ze_{N^_Ep9U&856B&sXfy=rK!SyYe5&Xn8$<BG<X}D^7X0b-vBW*{|Bq1>CJ_F<uEM
zNN6t5hHTvDQT%zGcM+}XOHU5JiDiE{=4yYac?L(H4wt@Ad2^?qLyKO)HhNTuk2%Tp
z;!ozc$Ck0p$litI=mYDTJGZGP4P`jmHzh>?MjsshbPtCE$OHa4g+mhy5Eu3jeB+-9
z@V$WsB$wKOZhYGQ1Q02k5_$&4Z~0l31a71T(qdrOdYIpmc?XoEtXO-jl_Rr6c(G-m
za45U)h08JASka3Gp6$!i7zFpZ2jh79OV0$w{|QnC1xxM+$c_d}joOk$gs6Z+7M}S9
zLjz^#L-g1~9X<TfTOG9{Tn#eZxX4jn+juD4d;p0Bb1#P;?gdw;2P372*)6*`90ZXl
zqrA@uHB)xcv<d&j9<F}i<1-rm#o)7kJ>|<$2bl;I4`p{t0~FMRfR^-#D6xnT8&odV
z_Zb<HS%@(b9QjTxGUdi&Q$(&p1SL8H?iQ>3%vf2kkUc6X8I@`wsv;q(?jWLpJ=$F-
zx=i1!{bh6qI||!ybk$yTuNVrdb2Q`tG<;)<D7NI)#~6T+PkzJ<VZ`={#X=C1BsmI{
zJtm+mb`8Qac@WbBitAL4O9I60Wgzbd#Rh}pjz^KJ1meDu$4?x@>Y&B{HV}Wi8)piR
zzh{qs0*4@qEfO=a2N>9BUhxM83D_$hHwGMdw+TWsaRiy{L@J5T_~Xe|*eEIz_vGU3
zZW8Io(D;QDK*~uhhRB#`p`7hWzZjDwZ<6>869p-PgbkC00+MFZlf^NSQHGLx_LE<X
z0jVj%6%13XoRc{!QuLhB=9b}!l1V9=wkdMYLtc#~2xX=kMJAhg#l5{vohD4twPn!f
zNRx?7p!7_$p%7PJ33I$nVKYp7>`(iIiTvi)#oa5Ny&&znE#21(=%?ZrK#{?gkdFQ)
zBkUH5bj&ZR9pS)Ck;2S0x=7RhlaaE5)MyT1T+Gb7%_MRUD0-e%Vi<ttoCVIzs%+1y
zZqLeWN3F`hYq-s7Hq37I%7$cSceH1Btz`GyX7^F#3_Q;nGRztA${Eef8E?;-Sjm~X
z%>f8y?=a+!V8|;CDt$F1oJq)4C<vah<zJ`3{Ya3<+AdJ=FS#N~7~tPy<bSB~vqMBh
z1HftlNBaI8LCxmFD**osHI9shfuP3S69E5E<B3c8yfPM)7=Vy~!WS~>7J;VkoTCg!
z3WoqiOFs%BqDicGVW9y<9i?c@S(d<=qGmwx1WR$DO>yY~@fK^5Ie)RuNb$Ti_KV8m
zLWAPhmc&X~XmU|js^j^5t0guUC7-N{IE|3Sut;R?P!YqV+EMY!V(Ht9Qtj0u!#kjH
z7V(D;R4ebYcdBUiQN)gws2{P)bUDlQjnF)z%5i_7mN%Avm??KQ!l1mfamzvtF#`K{
zprX}-LlVITfC~B5LfaX+D%OfOG8L(nXsWK@H&G>+6klwj;Ak0kwpn(lIpbj43vgpv
z<*WKiKfBzw&XoaZRr>T*O{>Lk%&Q8IN{X}M6e!X1S8XBUs2!BnI;&u#df_(C%6>{r
z1Mi9gPEIH%>X>)crw-JftPe|+s4H34u&gqUnVO2L8f{SRj(BwdC*hP)(F|oxa$l{v
zd2MP?tyV#8guC3eQO%d2I?aN*=?=7EthzqVx->w&&PDAaWgP}r4euT5Z*Mj%7z!}k
znxwP->5he>3We;xDuTbka;`z;qCq|iqpH6?Sgx_)rv9f97NZ0Uw+{*{wv`Yzs(=r(
zs4<F&eSL{`ePm-(&_QDoeX~|UBhzuc!Wza)pJpm-IFklfn3{3(U_uioVaqGA7Laj^
z)*6GsJ+c&)rCBEm2UY7bf2)*v>x-~f4f7VzK&wPS>%KUylLWmpcDT_ohKE|Kn-86j
znvz#l+eSdMc2%?9eVh7B+mAp<BrzoD9yjWkCdL@qWv%`I)IKNBE<DqMS<#NRSDTuR
zoyUcY(N|FB(*e%zsO;>hUhBZ71aygYAP%vH89IL$QlbGOW!`nF$aF&bJFNf|)(M>h
z7+p$$W+scSPd{-wsEEgXP(qH|P`J9{=DViW@O!u@r`OW+5<8cE;IBwftgX=x-FI)n
z+Iy*l<HbmKk0T1~8BU{V9p58<n?T!C70-6z-Sz~%ps=1*<B}hOT{VNG57_UV0EHMi
zeOT-0ZU+3C^1T9-1gOpcVw3-jkzM`N>;1G3{q!;Y-#L31I>}ITMA?da-98Pla|`_F
zBzw5am2BwoMFKE!51v*I`0bL5O%RJa(EeH-q<Z%Zxr;2Aen@c^E%@D_vI+5v3EH?%
zgBslFTHJK9lEaj;X1<?>BAJE_91O(9hs@N8UVo*QlpG<HM8ZNHT8kQa)YgcwB``S|
zG2}-2WI|w}4yDo=nI{<brY5kTpndZI{RJAe7l3N3j6OI+i4&nwz98Rf8taGApZsWH
zF?7M|W19e|m^d^`9pAKX6n7gwnr||?y+r0`GXB$f>?v`qk{h==ha^J1s*W4CXaZDX
z0^0x~Cw2|Kt%k{gVA#5qy*Lx-UNG$Kv5^PdQAtqTNiIwhTT>pOwmvdzf{hYTj1=Ip
zq>f{4o++CMn9`p3HW9bwAVZ=!^}`o=WrB<rx$jsK>$Hn(je2^+dFnaC)Ne`LU`*Q=
zEz>X7_<v3auj9-V7X%|~kX@_8&`v8z0;a_Zr*V039;>YvC1>puX2M-Xk78!I3ue7v
z&(QK<foO;brRH83&rSTCX3s^#h%G)}p9{N~^KF>v;+&tonc@F3D~1c^bd-|(Hg61=
zqZpc%JDpKDwPpPBRiqg{uWpLL6G?*9H>X8|_9E6<&2+)cdEsnulBQ<C%MPlEyJ)^8
zJlUlztFfrtw?IoUZ|AtMnzQh+M&rHIQh@g&QX<UV6xFnEk!04%$25X;YYDesA+Y8p
zJ=StKPdYBq!glMjb2sS_@`}04GLh1X?$^ZR*cFd2iP@7Y#Rq`2N4$L8)u5VrokRcv
z9H$IeQiiTR|F&Ek8#v|#z|qcv<o>(WQq*pe9hQT<C6R0JSFQ;C!T@`|_AWDL;xsU$
zJ^ua0x_$e)Yu1NZns{rOZ)6$Y(8j)r*?fzGVQkPOY<)`^_u6>DzOie%aSz_`AKQpK
z-uR8N8OH(N3{=~^wAl=a-1Ms2JRaRl&fHjfd=GGn1N!-*)5c*+r##iPVE4r0(njL<
zG$+~Q5S<0(iR4g7hmQN^(By@hbglN1?|_&4rcAejcbE_aIj0{Rj$96FZF&>VbocXJ
zDv#~S$lb{HZIrlr0lXbPX_m{G9SrI3N=3UfW4kLOJ7N>x2U@E|b9XQ~e&9^zXiLXP
z_k35DW)z7UF?6!kb^3n(?FY!>hXM6oMC%VNr#-h7lMhedoOqdQ*Y{M6_T8W29O8!T
z^5VHqQocBCJ)_*Gq&O%F+Vgif$Z6cSmEIq@{GqpTz#F-rB%Pe{_E2o>!2Il>0_m`&
z`oLZgzE_EJWEON#s(xfxbm$#(q=L8KF>$2lbyziZ*v@d=^b}lKJ6eDC!+$E(wBgw5
z`9UgmgR0EIEZ~I8;<(xT<Sg*SE%Vsm;kX%Z=uOX<QQrxDz$xSQ$??0RpCE2*>NDR0
z029UwEc&y9Japr!)6MPEKp^pq6Y7%>eyL+lG|BlZ{_~RVoIi0GcW+%D@XntQ`l+`$
zkA4{N4Lnq>9Q2PEnE0+p`9wFGsQ6lV*e`N$KY~%{F2w{c^|UW{oi7J6FYN(WQqW6*
z?Mq$rs}=gIew8b`zN@;L9R7SXL4RCc{2Y;ZG|`W^&*9k;W@u7$ZtVC(oOG!2bvQ51
z;n}iUXe#+QYMa>_bZA<2Zi@MYO8BU+%-r9^6B@!%j5o1$rnB|%(cVpCzwgbqgri#b
zV%yeb+n=L4p1YgE3Czw>T=TI%=4XHEMfHlu_KDB_Qitjf#|re%4$emnJ;w_Fm>n69
z8jbJec23~2iIO;t6>F9q?~j_^i<POBoy~VnrS%gSe^H#DQ<#5V9-mX8by?+~Qv<)O
z`*>b@e$n*tqNVQgR`S+G@}g7gj_~}RVDg?s=T?2@w({b(j^dun{~jm*p5^?39RE>(
z?~zIC@!7{mzW7JUx<~QpN4fJy8T=<rz9)69C;g94y75m|bx$9rpB&Dg?C{|(d~mq4
z7ToV6+&3N`f{&!}4>g{({%>kr&&|^KA8P#7mdlrYf_sGEPts!c024utTg~5wEIPlm
z6WNWn(vi1civAil{N82dB+Gl@<%uE86zXB_@y!pq|Ix*-w#F>zn5ww|SrS2wtE)17
zPPs9zCh%nzP8pi`I^j@F9kcFR`0INoj+CMX$uV;(@+%DrM^mBDmhR!$ce$^8CTS3r
z>&i!-XU{fBTCb$sF<zH3I^~sZsE1iqk$R1=CM}}jLp#sT2t0V<;%3%uOj>^=_QUpX
zoO+?wC3P0kd7IPbe48>s{2NF^Gt<j2LPDvD*~xVnV}R&RRImGhI#h$vL_nJya^3Hk
z(KHNWLKX5`%4sNSS^5Ss#bYS+#v3u<OG{`*JJ!Srgm8bxnM7}7-e!Jt)|)<+FqBhM
z7Fel|Y%-kn>iBi7X}8~__||#=s^w&!V)pA(qgH#Qu28BsXT}YTjQ<Zbx|yugUPY}#
zTB|c6m(J5I=p=D>2A6rwrz}ApH(KH{rcX#70{&OuXt_F#|G>L<tKL(c_pi9sNZsHN
z12gcyP4I`f|G5YL+c$~=$}4bV#s23WI42j;5kv;&{iV^t6|ulXk>pB5->9iMtALGF
z9JQ$B?>%rtb&XJ6|KABdu+51Sr5J_~w+;*qFRZMtrA$I3Nl<6jzyD|&T;d<uJ2@T0
z7UAeR`*odqaG3P_{sD}MBkitutmI7B<IA~7Vlv7<+e^c@Cz1m>rI#bb;;`esaRxG5
z<H4Dos3RwK6bUF)DnBd<B#ox>TV_gPGFnb#&l{~CFo4Rn^o4A_>u;ODb^d(Lz9E-$
z;CUZ8EzlR$1-iayjVe1HV&S8(3gba5Z?O-DG1V3=?$=pJ4y$d^pWmKfik=v?lC3X(
zlTdc*i9o&;?~ZN@dfV@Y_(*2t<G08U!PXLcFmMQ{N}7GmN@3WDJf2;3r#PzTY7>>q
z5-jbgFAzG+OVhNN(Q$FKB1Y7F>Ci8H=GSt$@zkx`7Cq4zNrW@y4!MdQ@p@ly-$n0Q
zH&rDX!z;CpvbhQ~jn9&jls(((@JRt|bhTc}!8+T*pTh1o#`ax<we)(P+^@f-Z@}$O
zAIow4*>0`rpLbj`Z=s^{lH&xCaj?I8hBUBf8bbD4jzNypon0dU-=(iGLNL`vHiDf|
ze#e_LjA@)sc+qAzR&23hCj7R3nUSAwBqAu`klvgok?`i`J>P+C#P{Sx^7i#)Ro>@n
zVcG*3KSXqaN~NjSDD9<b@8y_f(;qG}G*ivX<_b_XE6J@hnTP|*WX)P_@zOpY$(7@K
ztQPNyI2@@&W%#pFDimDfsHzu+xiIeKM7_oW7XK1k#VSdRYsoGxc<IHQl;duvl3ZBU
zfn0WGL#a|x_H3ZMvU#A-PNJ3&$-X*@-srfFZGBv`R`z84nBk*0`bi@*hCLp<L5AFi
zo1sb2{<O51kmIyD@W%VJjY^E`ZQlB#AP3~Yik|oR%v1eo!$uhwAL{X$l2dy_f%th3
z`B&q_1dc9yyOsyilXD-1EPCgXOH#@6{*~tA!2$0i<%+=;Ig{9-OW&|M&atG(hW-^S
zOqn?L^6IN`?zVNMK_*z0fCzOqg=;>UiLVe?NK5bMlngqJ>-5|M_pe#yVzpm_FWF9i
z%{TLYq5rD?Mx*8Hn6TsZq6v1Sn~G^T&+i^Hy5j3)n{o}k6{1Q+-$*hY2a!u>8hgfX
zy@bf6PmWLi*$hx}`@`pjju5xv;hd>$M~L>c?a+$z-hLO6d5gW9VlCYY|Iut-d%JJ!
z>W6oL$fXA!aAeiq9f6@cw@3B(ryeKGq8sAebxXBA9c@)f_h)^^Yd)O4=pTJYn&|3$
zR|k<>9)5ll^&e-NdDH84wP=0b{Hsj6?(vVdtC{NMR=R(F?s9gWUq3QRLf`!bln?&!
zYw08W@n*2D@9yD!wJRKegUI73_W>y{0x;AIfMlb6XyO-vpqK&_HsyXSql+N&i2^jy
z(SAJdi(q=3!vB#=9~~g=xcDcRt~^M&dJ!fzQTVT1`rSpi3{DZ~Z!VqkGD2Csh%kM0
zh!vsg(~c=3E>|ArG`fs3m?$D`8y)6_dtXMI;}nxal}7}#E@N!eiz$~zN1k<D#yZCo
zQ|~K7#aA!mJSU22|BOPV?=Is5a7yUW|F?Z3HkGmet+;huH|r_|tX|6bX6)bhz@^;Q
zDlntft2D?&>3`h=<CO7-t4vr>{>&IvFB423o3Il9nK=_vCajhb1izfj67Js<Zo3UG
zNzu%%R{#J;RHj_Ae&!sgmy0irO}SXGzCyMsm)uvG_Qo@p@tKI10MR!ppcc??Y!yqd
z^=lbDCetHLTFYWlauQKD(;)%MDbUC9P`)$5U*Z2iXYa~XipmNuBu8bZmomaj2;(fi
zR|eCnsNy9DVU_;YwpAiC;>uW*FZ2AsA!=gBkv)f8?(y~TnWqs)eg`txow)K@L?wH1
zD{_UKzTLBoBdx?IoyvuRqx_t4Jn$Sr)z=x$T!<ZB-4sFfJjgzC)CjL>oS<e-`#57+
z6|ZfCpca;JoOUpd+c`i`H$G#ZcGH2|+e1)42I5Y^sKOoWAZQrXK1n9e#)Y;LG(r=&
zlh}=MVT}Y${WIK&Vrsb4wFJ$5pqd0_3EcTgf|g!w#~1@H+@&&t)}Dl#D4R~4wIYJH
z?it5O&nleFJOW4y=qxxQ8)sKDr3?+;!ioDx%=CRut{rH>EBJwP7Rz0fZZQ|t{k-_w
zdvHoI#{;itVO8Z7T5u=g%|7k@&s_SRC?KCv*V9tq?KOmqT<qI0R2gxHoo3V5!0zmU
z_kdl1XWq|b%b!G#gN>;cKG0LoA0}G#4yj4B1Y@BuR7pLN5Ib_P@`C@P%sMtflP4o@
z?OCK2rzyraa;SFDC(aKi6qHK?BQM@6$Gu|ypbs(>d|8H?l&qe>^1>6!clzlgxcWQ&
z`}T69+P<jvb$qTD;IVQ~mv=>y(HzMuv{s~`ER8~|u6jdKCqE&n9pC)t=|xix?XKKc
z)%)%jhEjg4sPKYrMjHcA$IPDCXAi>DNJXX6*-B60k}(F`L+uWtG*YZGy~0C{kHzy{
zx58|48p%4vMPJLN&?=>hk2LD<m}{j`tKVzH8mg5oW<jnMT^yrKe;QHt@Z!`9F*t;P
zI*CW5TLqJ1(=Fc@t=xJ(<0#^B{Ggr9v)F^uI$!9h<=nZ}f7AMAz%lZZS@C+Vm}rN8
z;TgETlkkict?N0%x!0ef4Y_tvmaA`3Up^LXK9!;N*)m?d1W6L2wS`6z)y9VAmu$y)
ziV-kAMMmm%QIhszjF1&x(mPWVAwXkpxwwQxuA=WUVz(^1wO9J}zTGH+xA-5NFte5(
zh()!+VMOpkSGtQXLTR`cN047^Ayd(TgqXLeWbLmH{JG?sFHpWZ(qF%1?mo(ecyl#6
zMbs=69LL;<FN-q#R!-;!S(PKLk`?}Lu`W7Q@RVTKkq&O>DmruTMcD{0_#=B^isq+<
zvW09G*^gX!5hUh|Ll_@1EYw2~hZz2l8NA4~pFnB74~&B6!IPo|KY4Dt807fw6cYT<
z%ao+B_02FA+nzvmZL%l!lvY?Vx4#=lzu>yleIvHs`qO9Dp6)v3v-=)!JJxo4b<c25
zGLr{tjqjlk(F*=n)i&A<kNf>zAi%EY2BwJn!e^xJ;k=XPQG<koxnSB)*V!L!=p&yD
zU&jylUGYxdS-QtXxX_X)2GzCi(;t5%_JBT}FPtC%FHztZ06v8|z}`8KJR=ZMHX?_h
z{-x0|f;9Mpn87I6%Np#;C~WM+59$2QS2A3q8iHcM!Un<5JcAKsBXLNu<Z`g|O|T4k
zh@4o6f<eg38%Z9|5LHj*1jHO~<A-M+h`}GKZxH(0Gt@vi^tw6JL|GHr9KZ(&VJ<*s
zo5RO+23SClkrM#zmzuWh$o3gjNWa76=#h4viTLHiX|=;15&-50=H8w_=K!LMtq?`>
zaDj#wfd=73&f#2z5z!cgC-1zY>tBQ^hj8#maBiC<9{4yY6JpLpiflzt5=0e|!?99q
zFv`G6=@G)L1(C!JQRSYb`C<f!XnN8CpacRcT#ouU8oq{D-j{(_+R=yal}JYe$N#wp
zW=CTi1br`75Mm7cdk=gdh$|4Q5(233e7_!{u#pk4i>$n>9G3@*Q~DftFp7C(qkzbz
zXI;c8631UfVE$58KrrcP3GwpH@ej(FPwWba2|k8DK~_Hj?GR({CYC!aL8c@D+ZNZK
zIg!W~19U4->XjIhkSN`pNX>ykyCP3dk%Y^iB&naoFoxA*pvXCv$lfl`=anc>Ausei
zQ6y7dv_0WD;;i2`VF0Z3Vk{o$?9Y3cfc-ipP&nn39YETWqHGA~Ra{9j7)rqerv!gU
zy$(+`q)6=&ObsnbT`f=1uTZqe^fjSKdrQG#drOIHn-mC0i};*Yw3HU6kRD^5Zkeg*
zY3rd`!EJ|`tkq8IGnQ_D%jBM^{H5ZvqhW?gbB4&D^yfn9;VTT9kzolanZ#`AnTDCz
zNg1&vnLk-G<DS1PT5(LL2#fig1!c`l9m;BWnU;o<oxPV8K#`S4L0b{2(p+Jk<E7HA
zVpX7`(ywA!f{=*czVAFttIN#peV3h`lEcKBoy(l7qM~0K`EoIm4|b@sHpbI?m^;-@
zF-VcSdrJ<bP~D{9`esYF;Faf#lv~uC=YSbdrjYN=n199r&$D03D+$SeO_*1TQV?OA
z^6}R7P(_tbrhsuLe}zIRATjoz3I5Jd6<<6?Lcx@BwUG9%5K%T_6fa^nDq{66V$Uk#
z?D&_s^{$AYvRF{OSlH-)id*lBWhhJJ#7h*6N?v-GC}))*WUW$Jh3ekfyrW8hdcZ&T
zzy?{RMjfRltEI270InFE$Xlf!jLHzRJN=Imr4)a5G@S`AC03A+-Kqd8J4QD|iKDN~
zHOljdOkcRA+yzQ-AF1?7Jixfc|BWU1JqtK;+;`YIjHwiCKMeL8DwA}lO*{hMg;&I?
zewjqC$Q{SW^8~uB!g(@}D&kke%Q-9aD=P~-@QYP}rK<qh=XzPIWwk~XN#bu(R+Z8a
z=f0IyZGWfsYH&xz@KIG~$D3|WZJ4;hWTo~XR`u9X^*okUe`WPjmfwn94K%9iUc2h~
zb#*jJ4VPkVvSn@SUCmHd)#`Zd*Q45v@yZIy+A6H78oRnWJNyQ5U=wGpUq{X5Qq3Gz
z-Lg>)s#@JBXB}pA-L)#+pYgg|tcH6d{6|h8oU(ybqTyXp!!PFshJ*%^`vz(?d_cDT
zL5JaycrDQQ6^c(Sj}Mryvla`xme{^pWUcltstK>NUgEy?IaS>Yi8?9!CK`#xd;P{U
z=SH2>#^M%uBa(gndQ?3>R|~RQi?DICxKEQzRf`;~MS-gU-=|rUt5q7i71zG?rF|o9
zcJq5!tFoH5DmJ|%SKG(VW;bIUR~Vt!y^c>O+ZSV9e`7rL`&XKsM%vMh0-azXSmW#C
zMuTIBtWQ0TaZ9p9OKNtDU1!UOwU+GrmRzb<DxbE`RBhgB9lrJ*e$gEPRUJXFju0vc
zj|c>Zu~R~^b6p!^?FMN|g=lm_l2;)*KJ9O^+mnu4QY4yfB|5CBI$&yz^~RmG5}mWz
zovjl35UQA^PW_cC+>ZO#U7f}~_K-eU)j$;_o~tQQqH8p|ecZnN)VS-ss(qrf)l;Io
z%^2Rj8r_RHYTM}S)?4T%2lg4V^etR;dyw=Diu53!FyY<Po81%B*>j-Qm0;hs1pw0&
z^e-@#KS}iAUUN}9aP(HP<NfHo{2Ger8y$TpSdszk3=If!50V}CPhz)iBmze=beV7n
z4}@5#%KBhGIwh#}Mv;eDTd7GqhCKVCq1ymOUp=K07O5Ddi|72697sA3dJMj-P%&HQ
zF%0$2VI`4a+biZb>m2Xb%l#RpOAt`N1V6RRh?eDuC*jb$buQP5k<U9LhY=%Q)le!K
zsHr712sj!TgJFN-Td@Pp1wbRKM|~zn3wK7(B1RKUFrrV&bbb!!rHxgJjpbCsIn%l@
z6L7}AGLBPPj>ZO!fgLJ?C!m(P<3A6^>$=9O*2k26{puXbD|2+Kb2wUK#vwQp9VaZF
z>#*iK*h}9D>zs*hlZi?7@w^<naU2+>%%~;FM2+A?0r#Zt$%IGF&^XSN3HMYu&Scxf
z#J2imXZ8CfhbhaLsTv%9TB7L_->I|zkGHpqYqL@JZ4)%OQ@prqOL3?DaA~19Emj<g
z7bm#8ySuvtcX#(fDGtFMPWsKc=9zPyz4qBxJNL=Wd-MMO8P6DDqwfs>wJApDIs=!i
zqe=z<{9Fg1?jZcy*flE<-DdJ#;^a!}WK#_tR@->B{E+R%IGqptv;63t(8R;zsJ6l6
z2H7;6@btFMH1_d#+%>gTohb){>EOp{M}nE2a|T4{l(*%KhyTok5AAF58U3Rff5h4C
zPxKsOv-D<-v*G@;M+Qu<FcKAYHI=P6_}&7A$YZ*T;Fr;7K0jgvtBgr^&*Hfhg74;d
z6{h&fnT@TYaN?(OR|lnV=M8V?A2sIE9p?!27n-W(#P%uivgSq8nd!wwk~z^m%Yl+>
z)2>c6h@7Qqi{wG!kpbm%uu{g}2O#!fFT1379vSkF&98asqOs)^NMHc4YPoD}x#H<h
zF1<#01yy;a!DHoL6MVbXiV4YTH~Fe|(*Jnd{_i;HSMdx})D-j78f#W{sO1KqI?SwC
z3dyvQhTXQ)s!WPw|Le9L79rBMa{hm}EEjMbLBeqiJVoV-AjI4CpAjNoKX1z)45+}+
zf8nHIs0jEDK}?|djLfWT&?{C~|9?h^FyK>CiQy{hzvfogFrqXxppq1{{fQ9u1h!Dt
z^%v(3@wJW?br9xHFDx!C>sL*@9$5i{n%AkPetOLkb?qIWoCfSrY(mY(&)E@ouS^eK
z9X-OKmIb13lzE$+5UW;WWfOT30$^svXpJs^!oAOzIoR950i-WfYEezqc|$6%gcT>7
zs&i%S8QOyK#NHH)rJ8+eH`1Kik;A5B8BbHjE1b&x>QM4aW@=XnOPmQaUKzjmbE>TH
zoAkX)robY+LV+UJ`lJ3bqDFzEgU|39fd)e<>7m%i67`^^hCV2vzD^5RVfkIqkF51J
z!h6g|(x$WCu3J<X*`MTN;2lP8feF&g_yvw*k!vF3y!btHB9Qnn%28)J{V1QCQLa$W
zJAb949-ynlbG$KXDcXaf#A~n)b%+1TF7Nzi>on~2!?Pm)#bJ5cq0fn;tM<W3nc?e5
zSqSUNajP5RhN95jjnC+JiAcpKmFvCLo{bGD5$gM&i#K>Lo<H{nHoQ%5e;|WbK)1Nw
zD?~w?euj*u$iB;bMYw*;($YTzzi4P62P~QH;RG%@gQ)$f`^Bkw=ned+d6+AL^g^v#
zofX2+#+((xdCmiAa0O(0a>Yet;f<o87%uOlN6CVfVn$hqXk8RZfcadXh9&d4)V>7k
zCVa5eluz7o*OX5(cq2uRV~p!tz-x}%W1QOA#{WL8XY@`!y=OI;!O9i2tB})^9=?dv
z2Qx$~Ta;{BE~kZcSuQui8mSm7W?7<`HQ^pkzJSGgS+cO+y+x*|UQgECu;3hA!cs!r
zUBXh)j;c|{Ke{Yi{$q7nwxVUcj|H>62Cj^}yGFwDrTQDWn`BKXtF}~asSsNE=jmm!
za_0Gd?{em4Yd6)#x9%%prpimI70rCvEWRy8ek=V=#jR)@YC%(OA#Ku|f@4Jw?F`@1
zp9$fhIB=Oc-@AOSEM~g@;?^1L>88y(>nHnhbT&X4$a+3Vn`n7H#8`O5MQ`sM&q;;<
zN}r30XoVU8;oD7{>J@<Ouy--6tzJxW3tgR4a^Z1ZP`+EB=H`EIh){1LB&FLm?ZbT>
zGO6~XO?B>zAlQ*otFha0(X<k&VZjjo6Az0?A={0M#g8>70kKs4n^pHnjmEhj4`<iR
zZZ}p<30_j<&aZt-Ki&R}l1ky53cZ+eW{#Aq;D4!!#nQc_NX(77`<+L#>N1g8igVAD
zn|LCCDuotviCtV+?MhYNQQ-!vMt%dquD^->A=BI;Qh(AG8tVi#Syhxi%YPmDxG(Vb
zd%%USSY+)bBs1#qb;paI2k|0WPMawRkoA0j)Oaca$NFQV>&DaXwCC0+?)BhZJdhCp
z&la1Bw6}o#a0T!(oP14r%fKa0OX&&M3jp5fiBV8Osd`pG@Hal$2o5wpuaY(?n3H_b
z0>r(&7WK5He|4eQoZ3*U!lPuL)uIo6pk#I+J_LZeQF|vTMoNDQSjI@^W^Z{5=XGLD
zarTfVVWTr%O5%8ZqQz>Tw2_mS#x}(56M2!hWhgP#$E`IDpkLk${<=r~y8ZUu01z5t
zM`K7l$_LLqOzTUapR1<f{T_Qb8r>nzo18SOUwDs;t-Q(r;e{_itY0t6U$uwobPJUW
z3F;Vz?@OZ#kP-T16ys-0f(1z&;<T(mOs}KD*)|OoIjM-#<D--GyN&!@P_7b^_C?+(
z*+&(Vi#{t%z8~|idR^-?+Gu%6&d{aM7hOC1s@6U(g&28mRu!ur8@m0Rp=h&&ycCnB
z-&P^fa;Bd+OxnxnI5lMyjXI-sS1kb?Kg36Z7ICdM><ak9gBu){?b93M0(kVD71QqQ
zX>ZU;+lGVtd}<D}xMhkK9={C*oWFgs#HI^*4@uxOX^-{A^iUASK~;7)H_SQ`8WIwH
zGaZzmn!TcDD#kI~kYIk9kB1RRC%XJsyz5)qjI<!WK-f15W@%aI#Q!R;`B+Mal~0DT
zZ*4iOn)X*c`5VU))kw*?YVLRDm!*53J(edb);TF9JuroYQeZF2V`X3ImJza-Yn|yG
z5#$^J@Dg1M?f0Kq9e1SE9E}%Dm@7)%K6c9=R?lP;sKE)P;~L<(&DKXuS8Jz_8_}e`
zU&QdM$YEkNp&R+|iD;fioQRDF@y+7%XNBrOHY=0lAuWSzRD*3`nYjrI9Dfag$yx7l
zXIaC_95q6n06x1tU_|@X=e+vAUQ|!)l2&x6t=^YW#<SZLY3ufyL2H)g*sYpYbor7I
zn%(eEokt+)u^QD)zdxT^4vu^oYJSzK8h7e`DEQjbU%ewGo5Snd&c@6q+|E=SD472h
z-bx8&6R2U;heLJq*I!Lss2Mgb%w%h5$n-rVJi5N5d-|PVzFxMVLSGfYPh4KCzIpO9
zFI}Akyq?9{H(#j2_YJm5W5xPt*Uvt?9&NAN@pVX4*hX)=#Sm=s4XII`$8^{l#p7r7
zDF<xDVSL`nFkWK(wEhMe+?oh*CuY(oyZ}IsaNv{fM)_oFQ|Jbbi;2a6HtoS_yREfk
zqW*~Jo%R{gL%S>YE*#br+%NCY#y07<S*Jn>W#17!Z3?{n8jns0F=ILwmV2R{Ob!S|
zLgxg3O1+;gQmijgA3IQk+|N}-)R&nk9I9^g4!r?86v^Su>Y^bm(CBqxIvgJ!T(&GC
zP>~cwlV=#d6?_-(4PTV0OKGAaNY>c^tgbAlwXhc?U7Ej6?a-zB9;;3AbG{*K!ivGZ
z7DBY&&{enL!SrJW!f(2A-B$bU)MJ5qoe|p!@$&e4;1y)E3~-B)5DxwMT=R2L*}0R8
z^Lx<S<4r;-lnqdZElO$4cGo`XfH-?=Wb7(+fZ^@X=fJc07x68jqNb6`h4bVK;BO(K
z=CM=L^K=trE4V`NxYY~hxW#rWGV_fKiABZbTQcF-_+Nj_pbT9W$Nt2Iejb`s`r=?N
zx`wQc?6Qz~tT;xOzW2GYg{b`*K6%3ZXiyCdba>?y)U&pL+IhO_BjVjc^LUaC3$;ur
z+I30^0FZ;e%ucP_*F&sMgfAc3FfvWLeyE+F7Ca`iiE4MR2p`KzwR+R+T~F|?pOyH!
z|KNJD8e>Slp!@|v(D1TaI3>D1x_WH4IyIQ$RbT$}BDkj>@c^6=IqBhOJ&<&FZ)ND%
z?pvrjnHY0J2o*WZL*q_hQuTQH>vex#Mg8Aq#YTZj6RZ21Lzai7oYz-(+Rq8qUxk~x
zMbX=DxSlqcS6%`)GNaB1%+@YEUy#9Yi;@V=UWY%x6|vx=A0FsL;+REFXhh!mZ@pF2
zy$PiSh>9Fwi&pB4w_u_dC8HSitrJkg2V(Ejo9M$_B*<Fi&JhH@-nEBep!6EP?{|Ip
zZUwkZZC@|?rd;@9yz-ME;(xDUL+k8!9_t4g@ReT#3otq<6Zya5^Cvd(Qv>lU4qEdz
z`6~qZf6(yP8}v5Nu+h>82%Pa>O$abI<+GHwlDiFncMiDx9pJFYOZ*LPU&_ikDbO7+
zu<tq$%*X4~WMQun#3KFqLER_3C`e__>jQkSomj9VV{p{BVCSr0{-EHr+u);k^(?*+
z?!DkV*ll~hv}sXOhzxB=*=>j<pJo+bs4HV=opb27Zy`-hp?2FLt+$~WhM}E&VbuAd
zz0P4sbYX){VWc@>qqkvs`5}{h;Tu20W}U+u48j+i!f$fIS8u~*x5GF2B9Lh#emO_*
zU;}ijB48^P8u*`PMJi~}rE_EsQ2Vwil20!ZCK~?mI}*Sjg+vvF;1UH&jzVpYLSKr4
zfuz{P(YXB4_?pqM6^kf2nxr|JY$=-JE*iFCQS-;pYR1sJ#4skuz(7*gr5N_R7*68Y
zH~g_Mkd((ImM=M0pgC4(DOThzR*V?Ni^jn~(*IqANCU=_HplBM#lu)qJ>mod{sbe<
z1Y?&3)8qv6<^;>71nav58{$Me{zM1OL>NfwoSf*|oanxk=y{h214(`Oll(N30$h@U
zl9ON{Y1mRy#9dMpadHfQa-3#zf=hBza&k&@a@x`#oHUC#<!_uc1(qNBCr-MQQgN43
zMVwm0pZXs-DX}=xQfg;%R0r`NoYa;xjm-@3FPwCeI2{%t8cTL&H+qLG_Rk0rGB}Ov
zPDB5#_3lpm*8aO+nz$%>8Od{m`!2di`)X<z850DVM(;9ssxx$5UNUqgGx4)Cb%ru8
zk~6P^Rn4|D@qk&{Oj#d&voN!>w1%?YZ)XjB&Z4tbrxwf3{FcpTn}yJldAv_RGOR_m
zj7LF&hn*6SE5J=dg3S~X&$9fMjah?k8K2?c%e!F$UabsD=1h$HY#>RF5?5|me6B@x
z?txjJi+3J$DfcEgL#!oB;vVlkDi()pJXguv&-a+>=JA>-Z?z9Fb+zKZhP>4e`7CQr
zB(IgJXr5(iU$DnnpsHDL1Xm~!Ul3be@Df~@m0gH3Tv-0I5DT@anW~6jx!{#~5ot&f
z`F+7hl5CZGTqhD0KP|El*_<%*oQRN|coOo&gPinb@=V#>Wb>EY)R5f#lH9`KT=9ck
zy!#?%l454AVg`beeXf!ZDJ4=ZB{C(Ya>Jzx%Oy(7nN=-jiZX>c;-yQJg%~Iq@xM!0
zwaRh>we<GNCIrghhl`2z;D%*s%zOc>acYIsr4&=;3pV+joYFwOa!D}YeQ!lNQu!Oy
zQo*bWeM7htRAs2S(RoS!v^g;k4q$^s9XX&}w4_`F4-YPs=Z=K??R?Q~a22s$CAwTy
z_H3ozeI=e)wf;<%>qS)xNp(?56+?9uxkYuiU$t>bbuLa7yv64)2}Pa51+*5p^oQ>#
z<b)_KN~lLl@D6JT&}#R;RaG)qy94VOSn7iEY8;1a418be_(E&y=xT*mO5bVY@~*t&
zFBKOoE%{7ZCR$p>aabkLUpI76M@CvNt6gP%U(Ze2KquJnTD##rY58AnK(o^NPZm0=
zX!$=<iIhtlE!?Ud1uMPW-g#TR(@vGrg_K%D3Q40HLm-XYMh)@$6>wJs!KCj(A7sKG
zN+TZ%qan@jXPPChn#~1jqulCAqhWhj6O(q+vuhK8r9oV-fpEUTQ?SOyqSmgo)}a*A
zD+?i&Ymqc;!KA7{Fm4X=ZXWF{iy3K-lT#hlHa4|r74~ffWw!><Lx|;C*(@M3p%8NV
z)}>*H6id6gT)Xt|HWsvYrP6kvk#;@RwiB1O^M{v~OVV0w2t*{c-PR3ap9=91Y~2fO
zTr7RNEQr0jV*1;y3K_lWj-{<iu>Q%S^Ch$sPp4(3RPCB2=a#f{Td;FSyK^_S3zxO~
zP_Fy<q4NW2R}iFYV5RH$s!NijyPc)8Q?B!sd$-yOMB@RXL)uD@-o;4P!z|Rns?%|@
zQU@h%Bh%?}U+MYlu?LXWL(|$rC*Q~6-dmsAdk^V-B&~V2=p#Yz$8YVBJnVKt>-iei
z$5PhErqioy+0TSNAj>)+KiVH~*x$#}vn1E!VA!J?(jyMbb&vKKg>^ZF^*WRFy9)IS
zY4_{7^#!K&1-JHv9`(e#_eZAn8?^Qx6u$uSbcPGuhl|pNOInA^R);HEhtCk&P}1I_
zg-I4^gN-Riz-662t6!VYK`mkZAItjX9!5N|M>B;+vvo%MN0A5Jhiub^>{mz4prhq1
zy<u{_vtdZ{Iye<*!_ln6EAB{Z@;Do1qd!MSx8=uEAR~3FBQMqC=E~!Ew&QPE`{G$9
zj)YoH!rs=0sWq}rTpnRxlMUX=x80|W9J7wz$d6j4P8xDff<8{Rx=&J|PZ?28!HZ9w
zT28$So5E?E99o?md7PwtLL_0sCOe*hwo)>XPd|=MA{|fqJxnvQO;4r`Ot%j3tO1zF
zv0290Uq-PogxG{JkVMC@#KT3{6khbDjuB;avE+1#C3Uer9J485%<*}Q1*MH0M$d_~
z&8>%xWvmb?M9qD~z)}e(`rM`##06ME{$}=sY0>t|>IqZb3LX)#ASJwTqP$>byKoY<
zz$*subuji^!vr4__^e_2=`PwT7zT%9hCbnk>#BOGal3m=$C6{lKj9^kV@7(wyOA$Z
z%rC7#mpE{iS2&mX^cE?@mzT4anY)&kH<v4|mO=C@OJXY&`YTJ|6~3ya`_Yxf%@rcx
z>LTT8p2F&(<>~@>6)k&pp>ws;W04MNZJKfoNqlWuZ>^ba(!grm$fHGVdv&aAZM1Xk
zc5`hMux`C6vG+7`V1<6f_JVa{g$_-JuTmJh(nY_~#k|u+e;C_nVbgh0KnI>+z$>C7
zX24%~c%g`(qdlWzh@fMwN8&`d;<2L>WT3xdM<*WNSY-P`zK-^~0*z{2-ras4(Rr&O
zYOAJdi)V(HRK$_<3)-7@6z&slGkEy?ColdJRKW<4aQnN!nGG_L^(&qAAvAvW6KBbF
z)DND>Qr0}t_S-zXJ7vl{PBuF>c>LlOPCD(VU%nvgDe|S}{!&o?t?vi0q1c5Lh#bD`
zI(hCoXY9Iq?v9sk<l*he?*1m{-TEtQhn8WFSZYrc@GD^5HptpG#2Ud;#6A+!Hky4O
zd7VCf-6rwNUa}`$YQ&38`WFPl6T9p$Ho5Gu_%l=C$@k)j{etmdL{A49?RMqu-|O1<
z&Y$*Q+a2B{9F}<Q)nHC_Vjf0_9HHnQ)o0kYD}EnVJP7x+9(%T)pg6+jJw8%9?vJop
z^t4`XKSEqM{&juaf~h&BXtnih^^1KUnDyr5`2<RFN{u%%STS)J;p?HO*iX`-<Z=2o
z>9lt;pA`U=-96=yh7ucU!DG!MaUeXjV1qW$Mg{gc)}SI#DE4WceAR)b@fju2Svj{E
zPS=^t@3U8#!EgxY^_^vSVrRV-QOsXuC^yfqF)v7zfZQG9^xwU?GNoBK32DC?2)_0f
zo{*x6x|kKZMAvw^EbTo1;CtC$c8NTAsqX-%969od1FV{fs@Q=kj-{tLVW#c%p2_Cw
z=GAo^&voJC6|vrRQQ&o0!L@(qwbjej7UGRR{f(d4O~E^W6Nj$zgo&#t$o=ch3fZka
z&n+f`qxFVEP^EFmYmk2>F#Oa$lEXL}Ym{g6=HvGZsN1Di2S;MZx8xV(*a=|#sa>w<
zw|uWr+ArYJ4x{o7<iZZ1JJJ0l?!yP3hw)YTVl2CsQ^VE{<oZf@QY^17FT)<u2~p@n
z)XAMED|}j|(-4;7$k#E+&Bq+fr!P8-O`?o*kp>GBV;{1fn#P~PS0lwvZ}&Ea#$KM(
zai6Jpo*(325a{)um)4)ZYd=H(g_Ewg5s>{IA^I0iy1Ut9pDt_eMMmrNj|h=)_E#8A
z3X2deD!5!-7IFAs!y-g|+bH&Ke-+MIq{Oq%*L+<2gOkdQ+IeogRN9Wng}~!ylgg{=
z^e(-HMTp|?jL4V~SZzQhzmAL?;?N1mud**6o7~?EeX~M@rwflyXXA35lkRiSXgj_d
z^Uf!rh^TuiAN+hJU~F9hqK`;0e(R*@x#}=)9FTGS98qH3uC~r|dW@w0H4(?;WQcZ0
zxUf>*WMD#+$wpK$=m$V~y44l&Vs$1_`D@45UliY{O_iyM{ZMP!N(}c#^l9OM2<`~P
zpMJq^vlKGkCx6-*jz(hn;>W~hSm{NL5Ya-6hYFV{;IWnJg0`-dLx&1wy{*~%B#nSA
z<WKVXK(*v^`IkNtNASlq`5)JpBx*+*HL6kbDq4SV(hu9|`7k%BPK)DGmoUS^$(MEy
zsh{s&Q5Syg_Qw!~YgOpn><K3qjfi2Y=AjRx`r4o7(r0Ai`pyeUmq^?v21P#euXL>|
z^Z9b!QcP?uo_5gxNg?SUT8Q>POe)M#TX8Bhgx(1&B>i#J=0#0f2>k7+^`Ikx?f4_d
zf0$IYk8FRKRM)ZQkPWDF+Gxef>1`{;uY`vePY1WZ9ku)(;LtE#BShS&puZipm?7b*
zVW?3tF-b5jM80xLTCtr^L3u@G6<bjW%!d4TAqlUxzC)+66}IEYwRa9-boavwN#=vY
z9ix*lErj6oOx@hl#^z7vmDS?)t-bvN;$J(dyN74zKaWq+FK+L)uCBpQn4@-UYk?yQ
z=BRbVVdZ1U?g`8%eB*wBmD3mMM5|cmU!6N3MDoJxS$qrI@hPZ22nY<->@dZbNVlZP
zsQ3fn`0Ni>hiVHaGR1rkxUowLrgEiYnF%x;if0NHQzg=6>r3WJHEPY*N+g&UD)o9o
z$mJT!mTFCBN_0mW%2yg~wujT@8Y|Wy&KC!3BaM|C9bkAg3i<zqqqb&eB<Zci`e<|Q
z?nIVkD1|~x-Tq9G3d~X4Qh&HmWjK<d0D(Dbo9qwQ#~_WTFh?!gYsJ>4v+cn@j@s7d
zi`~gwxlF~jmaD_XT8oYGHptECW>4sArS{gli@llBuM_QU4>!>5kxZqI_NRy2i^GkH
zjt<y0C=w&gQHwxmy6Fv~hdFBZUHUeCv9<6+d~t^1W&Ob)gR;MqSTiaHQv9w5188Ag
zq+rH^qOB0t1`Pu^kRPM6ET<U|90r`ypdsYlDvFE{yxyY`5u0cH6?Kk}G7~Lbk((zg
z&yzeJOZ|aqM?}!tU?+Z4xp^u<$9Q|^y<ULJSQ2`?89lctVczeQ@w%mnR2veSLSct_
znbGu<U&Ra@?g`twnW*2E2DAJyjTmWy=uzdeR=E#~SfUhZ_VWr<OGfjPVsgyhq&YDU
z7k2tFAJFAJ8ypnJ=V^_Ulqqg8vsLxG4wjY7np;pc733UN_+AbVRdyawl_m6@*d1jL
z5w<YCQ1<eqPSsAzmNM3RzPC6g8F|xkoV#fJaLlsCo^#w}5~t19k{rM?(0rtpeexRG
zFWA?*wJeC*etH0@gxJm=p5i?s331XR_E15)7=dM+Jqfgr{oUAyl+{G|>R~;7`mCLu
z|FPr4m{b~HMw$V=CPvs1(1PW~7!$QkXVjOjBj|(<2;9k_bB}&Gr2!%z3M?fK=bnbw
zxeW)Zs#{&nX_%D5nA9J~R||SDCUwy$(W+qy*<tT;MhvaZo)4~y?Pm2_D5q=L0m4!@
z(kh1gV;zh<jzW&V#dcdO>w9tYGmLjUIv_wW<J;^8EBoC}%nKg>%Wvl9^zfauK+LA!
zIf>6B>zGh-w7r5xOz!=PfpO`rl8)|{qb3eix0BW$ahHSf)%6D`-m&82nYQzD7<7=g
zGVE-eCejr;r9OdiIggd;{C3pjv`y5?edF=8&w=Cl&Ok4+{b(4^@cAD4J=^oKJok$r
z{prl>m&f}=ML~|c!`Jt>3}RDHC!TR2JzxjSnPE`j(X5;WU%t?ZB5Uo6Q<nu`DeCIC
z!g_^!M0w7~DA6B{MM%Z^6DnQQ-6=jvz+|a^qQThHx-{YRPUtm;JzwKXJ#~PP<r=0h
zV<UVDT+n;`HSE}+x>pf!!ScPUxVeiB*-ud+<Ehky<kwvcFV?nxKOeSs6oW*$aFs%h
z(G&4lfPLH%>|xeMs~8+p{e0sX;ZE;$!oViM0>979oFBJy!ji<qTiBxlR;NfXeh$1B
zK#z{_LqTGg8k7z|i%Gzjd4=_HNL~ajHe(e;j5al-Y>X0Dz&c2Mr97<KjSyc^H$a9m
zHLPKckkG&yh=u%dM28R|vHcekl_v2hueF|ih0Zr}SItp7KyC6+k`YA`%GhpKb;{>F
zI-aHLQLASIK<g#_bPJQ>XAouD&Lc7ZOmnb3H7Dw<(XL<xlahJ5J=R&-F7<rzgy?E)
z(o-IxC_G7^mtt&IW*&nCUGTX7iD?#QxTYjc32xA*x)(I0K1mS{0bGB(y4S>QJ%5Rk
zphw22CgKU3t;v^s`sO!_Ndt4#YB0~t<kuC<3(+gColSo`nN8+?Vq$O|4oGU4&0(fH
zAPFn^1gj+%o9i9Oq|1IPDiANB%|DPT4?!yPR4pajIUsHw{#f-zwal3E@WYtw$GQaZ
za{O-=@7J^toBmR*z|3bMI66>nb&_BNW0dJ3%V_|hjySIA-TF8O>h|>pfY7U51^;D?
zdK7j;MKFSqE}!Ob3Qdt%&k-IET2rqqRSi%V{0*K#iy>-0Al-umPUEkY<>l*!rm=Es
zC1b$kb6LHDGuxUxno`&CN7g|EYb?K&o<#{OGxe8fS-aPvTKw3rQ0L-%Y<u45s&J}X
zFL+2eZCB}5IW*#LeA9ML=lsGKcf+zv_rW!@VV%D22IF)`)?JEggI?gq^loj~^TX6e
z?p!1C4S^)M{*9hIev{P;;<8We^roE9tqJmPai1Pe{W8@>+*iL1{JiFWmby3LQXy#s
z{HW6BjJw4?ZS4tWiZ*BqU)1NQ7!G6jX!vfONRPkZeb`Ku;rmM>ZI*fQ&<^Zh#rSvF
zQVqM2YjZ{tWSf>q&ZHz6mO+d(*26zb&MEQ1wXeAJM-ubdP0q}8RPe>5Q1m*Z%sO`@
zoLxT3jCaMfQT`SNFpcla*8aF5<K{Fho#>Z^F{vZUCK9Vl$}auD>}IfOR1r1Mq(CAU
z`D~B%!#z^$x<vjNH1ETP+~gjHBcX^D{AUyW**6vb#n~&I^Ciu70R@C*g>)83lPxHz
z>ym{8$%iJe*LK71I((n<K>dZFxpy}22qVUjxW`BqixMj9vK8RXc)`o7pZe=vI*)|-
zQnM{F$(nMx!fmx#R}w&d&4TJjAIeh)SCx4htipqHMzv$FcxKzC(!PIPAh8+V>FVI^
zJ|=c{+w^81sNW^?v0D+ZUBPrtptMGkW=q+kuDT^B6p0QP+5A~v6xWVN)r7#fxx*RR
zJZhqNk+Smmn{T3dEZXdxD63WX$>s(<>Lqz3qi1s$M?Yv%mogaO%#%X0fiplX9G$QI
zbH9_*7431}IEzJi<}D+5ruqw7IRvnufg3!hLWz>IGMx@UB;#xQ;^^Cxb!^1pMnUU+
z?Nv-WPPt&VK1S>)Gyb$7fhm^!$}0yzBm~8eLIB2z-3@C$pC?VU{`M7H9C!OtrE$Hy
z-lGUVSlV^TDCVK3`V}~z+jB({+ID23^sv10eBCtBb^;TAuRlEBbYitb1C`uwJ1O`-
z@OzrYMLK`v%ru)w6u-RUqAHhvAzp}-y0)hber@^uu*m?o$T8)CkOV6vA%p+DkhCIt
zMM9|uydCHmznOq(A!ghkbHD%;&Oe1DBxf+Jkc8R<M%MrfOHdgi^8qJOL6m&P3veC`
zs5nWyD3h)V-tu^+s02;Mwu!t~Qi!C|yyT3|xO>JlK^FT+d}_1qu~9zucs@U9`1qtz
zIY8Q6rat9*zIJ$k(m5Y$Q*VD{JO(~Qi9sHgBwz1Z-`q*xo_IgzYQImDeo7a9M_Io3
zL4Kmryc$G^T0z`8K|sn|e_Chd142KxU2RMne;_D;jxoTRh|k0sXy)u^QS?z)9rc?t
zw~HyzO#@YRQAeMT*ARs04dV9I0QwL5It&K9aSjAu1mR-`tMCPTE(R1#28sFxw{7~n
zgM1x}UV;(^y=_38c0nkCpf75SxS_WQS$mv0jKCDWKo7=GUec)bAkM}llswa*w878}
zP|){5AD5YsL}<tXK`1F#s3J7<1UIaCFQgBo(#D56OT<3U7Z%eLy6ha*o)o5R>etH{
zA@U(&)igqv$lu&FBo5@4xffvyibySr_)s5CVjAfh6xqTUnXVCh6%<&y$3AL`GA{jf
zk`HHk5n(NeZ37gUzvo-X$cwcEk0Zl|7aZ}EF{)oWYS1)lSeh3_69sMmYj99>agh%)
zF*}0{3X_>0#t=5~5IpG}D|vI+nQ8QeX&|CYFh?*O7eC5d6n&N<9^Phn{$@r&vlwB`
z7k?QhZ8m;hB^Te1!9lNz<32O-s`LA4qJ*jhbITROE0{5U9pd>A43Y}gf2WE4Eg9Y<
zna=Ev+rkB8#bjWJqNls>Cn>}B!wlq7Z18;v%QhI^zL~}`nESm(^rz-{RpPi3jTnvn
zB(1yHBF1EPnPlN!XV{L<8ykMe7_%cCv&-jvteSLflf*;m^ei1zl#Kdn5RNzqC0LUt
zlsMIfGnHl23T_hoPc6j0RdaEwL1!xSrd6{;+91<Mx4SgG&9v#@k0p01vzqBc_UVH0
zur=R&HCP2^s>R4kW9m$6;Lg}E%U}d&ROe+Z4`ncHW>g?#&M{@ui)9uYy<|=YXVPV5
z7W8IL>}S#fva)Hj24%8n^s+MivRaC>s5`Tge`QspWK&UQC%n%tGRvj}XGiB{`wnEk
z-pr0b$Z=uFp%BXn_6v5F%0MK@c=s*GC@_aSD<_~g2NwWfzt5R!&efm{iLwC*9OUYY
z<&x>;`rwE0hveBB<&k#gxm*S*=mP>i<bB!9BLbi_2B+}J0#(iP=bMqyH=V9f;3QBB
zR`@~aRryARc?8P&rdk>PRRu8lg0(DA0ySU5FP}`T(D6Q(2AXd=Tu7z|FcQe7#6~qi
zE$~}*CEP5ubuD}aC=^*PdZmmXg<9}~nLxFq@V!xSgcdMaHZR8Y1?ba~o26A0=$cC*
zMiqLHQ!D_)d{e@%RYELQeCC2ucc0!60(6nhs9pv_w9?x`fQ7D^IeJART4m9^z{=&!
zSW1GPkhD?P(hMz$t`cApY(xKC?*1#kNh>>^vV3*;<GOj7WJ*>+R@t&<c|}Ua7PAo%
zXSvId3KHy!w+E<~A&%E6z>b#e%BsqYxk_T2vb%fKqmonv(h^K)nMPuH`F+ujtTLKg
z<pQ%9c4`qmW!2gpTv|w_XnZveO9@`75<w{tiA9xK8xCcqKz_FpT2f=pQ%N_X$S?w=
zWKm(UfFmpY#0vqwkks@{)~>a{GnLl%PS!|V)oLD;afQCrRf|<94b+iG)oRzHtq4@{
zLaSdr2n!0reS*{}+SIA9pv$tTsIHW?-`9N$MXS}S9gAyttyk}Yi19vD+3pZ1zS1ym
z(+G@jq!4Rxw7@WV_y{g7SA0<I$8HeOMs!$F`U-*5TxnA1tk>T`53^|cM%fgFhUtH(
z9Ozce>86$>SNp*YDKb?tS`gloMKPNN&W%*Lbfm>*CCf|?7RT^xfk0YUAngy3PSVzH
z!PZV~h)_Ic=895fY4u7WaujD0PXI=8XrrkZ_XeO%1PL=1qC7H!j|Xm(E@+Ds@cO0Q
z{@bm6FSUIqRDNv)IR8+-$N=1A`IfHViYrBU@$m9(LyT%H6!|*!`z=dK!db^LVduRD
zF#@YK5_(Khbm!1yJ1Dxt`8P2pIy$yHHZHmu{$q-EbXP`0R{=30g}mj}NS78@_XJY6
z1V15Tn04C6t`3_nxT)?-wQeeOLT+>$p4M)I=pOXK?%1UsxUf$8Gy)MFJF(Ve3HQ!8
zU{6g$r${leqCDCgGHj_)?Ala(6?Ze`$E4KizL5F8M5ewEVFc=BvND$O2CNAjI{oUl
z{gm<jUz+<TntH@pyCqk9tt|;`Smo@F5?Rv*VuAf>%6)*TfdPvF*{}h5p+Pqtf}pTZ
zA!YsEtAjD(gQ<Fh_t-<LQGL?hL*ZFNcbzXoGn+$Fz~L~;;ajm`_NxJH=>c^9A$y%6
zba&#SR#1r$RvEfu4f>#*&ItVDplbDq=I*dDXoPvGpZAfV*HWeJak!4GFWGhk95r%2
zIqG^dIzTq|MZSMzlweUFt-un0_7Qo$6%!GA{P%2!-N$iHoAJY}@fx#HpP*6h;<2mI
zv9Z2!o1f!$fQjDS30uHq55uGl)bCNpoltM`d#682`Q$i>D=ym<wlLzH6bMUqie&5+
zaog1S!4xI=G_~+Ft?o3v$24R5G;`ZD>)JH?(=;df%p2huZrvFkj~Tx78G*JLm=Hqb
zX-15ERzi68z3%K^9<$Qvv$Aco@@p=$icho3<a3{d=Tvp))I8=i(&x0==5*HPzC6w8
zk<S|l&l~B^8+*)~rq7$V&0DU`TR+X)kT2K?FF5EfIC(5Mr!Tm+Ex4~Ocs?zF$rpWu
z7h%JFfX8A``eI1iV%XYZ#M5FF`BIGVQk?Emg2z%)`cg{U(jE@*f4xTiw_*}~V1ebK
z`Qg76lb9$bjT!%}QEz1QurntAaUreIt@n>L>hB9_Q_i05QbvS-my|A$g8%J8Iv7qu
zl9eFrU&W-fWYj;&r1XDWNS9#1Me&sWeIXs6Nsdwvla#ill~-`L!`7(&MzUtuqa7>i
z?BYNipPieJ%VcC>8D3c5SeTq*-`x2<ikgipv9^11TD!H)3cb2686-Wvd3;JZzmUHr
zm5%x-g7JXLtP0|!4ED#Sq8N?h%;|H*AP;F8jNW*UPVgcaa+&avCMcS5%%c_iO}?BV
zor0^gOzg5O8k@yI8G#CYV7ge~T3XcGqA3#*IWk=Viz2@q`CQ|JWNzQt(!w+Wa7cYA
zb;)NAXY#`#c=Z_1=@Q-2hS!T#c!R_B-x^+n>He`segA?0ciZNFs8{jxgVw|sc(L1l
zaOVwDkFflmvH>LA0^gaH?_zW~3sLv?z~Tk^c(lR``k3ow8|>$@8W{Ll59b|a20Xb)
zx2;PX#UTyI4~@a=P;+$*cA*=KZPus`m5ex-ou5}BlCP=O$Q?81nG6F9J=}s$cH2kL
zy__E*=f6d>cws3}x1N)=uE-62&*poQHD2`>&)uVe4Wwsp_$*1d;SX8-NEAupJ{zn=
z%DzUz8j60nU&N?n9`*SW0yb?He<HjNz{?5JjlK;JW)O(Vc}F<jW1x=4C#4fcF{+^u
zzI~eufO}79_A6SNzW7&+JkS2GSmnQ%cH*RPvkaYtu91nYSkB*e3TOu0c^k}kI_E^r
z0*J#!zxps42S$SZmQsnb_QO)Ts$_OEKx0FN2u?h{g)FYmW_xO$&%}&xeI-8aWxK~{
zh9{G=x5(#83ZXKk$9$43_DkrV-4V939yZHy570s{5HmG5Pf8cK*!M2M?K!}zXdgB#
z8yg+|THdpIAX(9pG05_^y&t)Zqx)J6MwQ}HK;&zFv#rS03J9UGc}<f@9y`sS`&eNv
zTci1!tPx(YIs80%!;ZO=lG??ipD#Ds(qCUX0^#j_Fit~W7DR9F*oWC_uj81%*A<<Z
zak4$OPe*pU!$o!W5t)>o^`orz{ndssb7vz2T97=;SVPhSr+!8`LhFKrv&!|pyCpSj
zK`leK5o5oBv$uRRAW_SSCu#nD-0zB&U0a^_n48Qx9(`h{(8-5;kXQEIB{~nOcF3@X
z$=K}t8;3Rh3H67(y2XzJCOka_c~;ZQmW98arUEP28YLYTj#t*ckfft7+CO;UFLAVz
zbBeI2bk_d-i%Jo5J>Yt+bA3t!lmErzQ-|bLYKq}W$nR8^#b&|GP#J-r+fiQxg21uN
z&a64`KkpB@GdvX!s(9v{IUBb#3Qm4QGrmFVZ?IdTKDb{a&LH#M_t+zEy^1e3#k^|S
z)lcOmujVU5o_Lqt#-2_^!LL25w%t^oms)90;jj)Wy{sM<TCr}}XAU_-o~WaB(C`P?
zz7AF*vfRD~@NWez(pfsS@nxYjWOpKJ<q@n~paZv6I>e-_5XtK(hsaFdfbMg=-hr|~
z{sE#Ed*5yQ_SVsr0bl~H_bkavSuU!3;+JFJ;gE~6F$jFRH}-4<g^sc@Oq=qlTzdm2
z`KcXZh=QmiHgS*uVtDBwEEd?&jVZC;*S8`XKCE_A6sQ_K-UZ^#q8~qUE60grPuyb8
z6HtcfM<Wnv7POd0orPddQj?EF^9bPvgnN&qzH4QKqcXA$^>sj^@lx?F)T}YHdP9p`
zNhL{=#1-SIx{bh%k_c4Zk1KMR25f-@zCWHJh~ZN+CUXt>FP$TO=k8?@@9fp2$hFOD
z&F7Shl9QaBhS$K)<4_tL))%;N^RqNY6KNjR&6~2F7%jjEF(Wps(TkXiqqz4e9<%%O
ziwyGX8zmL7qH5ku8gw>LFd|qUU8p9#lroKHYe)&#<}FTo8t~m2G4IFo>P%1{qR=`@
zhz9N~{-u1;d)rS~0VQHDaKr9J^l$=G5yQ0<I95f%Z%aPP`OW6yJ{5|$Ci{3NIN&bO
zGRSThPseWo(m1~LUK$CgSk1@b<p11nmQGR8t*I+yd}1;%=KJJCNPvAW#Q4diMD@d}
z1o=CgeHEbXSfs*L>1RYnOf~RKInQR^R|QiI9Pb`!z1d={9aF8Y<;Vt}H}E&C%v!r4
zll5B0AT2sm`8!#S_bv#y-{|%f(Nfhq4sdY^D9zuo4Qn_HG+;ZW>#3X(f3{R3EKa0*
zZ;Z%1^3BOHE;Ij7KTvFb+Q+W4c*n#PnM;fK5;x8+oXzwQ)z7H=vtQL5n}Q2zRA+@v
zRrk)J<%itp-U^%Qp_k9c!sd`(N6hG&sdu|}!bBKSvQ8f91m;eG&AJu$y-lNn<*EaR
zQ|Dh4Y07o=Y^dng_gWHL4Eu_n>_*ntDxApL>(|{MEHt;&5ZfFjt%V4%!AOF)UDy#-
z|0yZe2fZXj`Po)%WR;G|rp(bN-&xOBX_w*UYS6DgRe|BM`aM!qBH8~6G(iUg0JpaT
zVwg2if%3noN$&=w6>DM=(~J;^W^19NXGAFS-*RN`h(3>>|EeI9WOLJ`g!Q@;2grOl
zLz72Mzl0}aB>m>G&>NGmtxaPCnD9)vj5|hbrk|ymSe$5%dt6^+u8^6YV5Cg?7a+cP
zVx=#?XGxhdb#hRlR4|qqF_?;DFUvPe+~@dCLa2W15HH$>DjzCPo~MQgr<lH@nri?=
zD&i<LIWSl0be+$waAY6^f7Yp0Ur6grEAt3f*0b1}|3c?v7aopc#FE-M+RzJ!2|d!0
zO2uiUaH<z{wX%HexRQC?@VOYnnmLpdXNJA8enLT8uLRO@MDJI-fpO}LY_NX$T;E0-
zb>g17vc7c9Teltl-8+(Z9hI`N3z_}IlOyft!tc`_#}(*zrPi7?_S?Q%H><$!t?T`m
zw*%r87U7XXE&YnOLksEVk(D|d6$!T^hT0af6YfiFjkjaOD|Y^;X}@9!?<VwLC>+wU
zbY~LO?xtRjO%pkuHX{=5W=PXbQ<Zd^KJ(tsp=g^Heox=_AiQ75{$f%ZnZD(ycE3bL
zVO&{BzGIPaztUr6Tsx8e+iKx{?QYr0+`{b?rCcl!S?RW$^cfnY<nAwwblX2ryAbi}
zWP?WOj!2>XJSlL-_3gx+sBZg37FOGyl+yil>hoohQrm(0#Qi+v`Kl`Ne_o>=w@6=Z
z2bJ2-6DJ;j3%=Y<Mz&uTDm@)&zuYfQwEzG2x_6ac?pI!(ZznpQ|6Zg1LsI&$HR|7c
z-5TD6&i}lS{*PYwtyiYH53JW6=;Q+&^kL>RMic`ia{u!}+NINist6N4>IY2|v18#6
z>_uOFdVrIO_j`>W?6+PrM1INz-U@quaz$PrHT(<$y+0TEktg{pHhCjOA?XnX81Mxc
z5d~=41ehiTsB9vjQ~DwB`J2uo4PE;<XaqVr2f|=d*QP-C#X!&7Krm5|4@^d?5ftDY
z6qFPc(i9XH6lk*;6onXU9RMIx2~Kbh{v#<RQjH;^Cs2hQUIQZ+gGHdhQ0$kGyuIKj
zY(Q~Q$Rjo&cQHg%FXR*)QsYcrw};u_9Euwgx?2_6I{3QX6tj~EmZ}TeQ4Z?|kq?3}
zVRzCUQ(+s>ut_4)={*csH>tojd?6})If;1H6l481+z%&Wjx*vH5#euXjJ>1?nd*q~
z$%qq1Jm?}itlCZTF>=%<@|Fnuz6t$tF>)Ik*^eCsM~sf3iH_tF1^e_?MWLf0VDh8G
z*wXw(ECRFWXWwWNlvjBBXv9m=ywK=2>=<fIc-kQ}7+d-_Dh5&&!+HnDUW^7~OW8PM
z>y=}9lHvGd&|qvS-DGSnG**lsPJ#&y#+Fjq#8pSd$=(6wQC`p#@8Za@<L@s0R9&JU
z!6DVs@oL4WD#`IA(0Jck7XveRG_bEZKXRFK0%$JY+Kl27_x~<c`oEQw{(~xo?NIYB
z>2Bvp7R~9aOMi+<Kd=*~0^v>&W#Js$cZg+n`Q3jte~+CMyI^oW83GZhdhPQ|LuI^f
zWL~5WHQgUv{(6#ee;N7!6mW+>c#p{Jjx6vVg~T1rToMD-9jiqG=iUvES%Toe?UlJW
z@v<9fix~N^+iO%YsunjIb5XhyH-;7wrW7|85)rl#Hx6@QE?2j=!$R-O-FTUW__f>w
zLj;9o-9+yN#0A_WwFEveyGgb1%aFLqq4F!Bx+$6SeY|&7IpF<#;Hs|0tGVo|J<Ov!
z?E00NN593@Fy-C15?2#f8nYBvi(zW35ZCX_)V8j!_90Y`=B_`MDP6Q&-IysoWL>>n
zUwgxP-NO|A%&vhX6u~5}q2}b_sIHO2WYNnmu_R>i!!C)gq{%5Rslz1cAugFDB-vUo
zF1e^A`LZsBTExX9E~T=><p<7{u0++#&b8)5^{CE`0<W4|en6OCwYmQ2kR_B!k?nUa
z8%!x1ZYdjGE|Y>2?hzoAVK%&20&EkNf8i>hD*;s%DX)Zpmha00u|ouX%XM)owzNPx
zcOUm<L3_&;J~rjhgNjG-@(ZTQ3ue%1O66@zCAg~cV!84ewF=5ybthYOY+iK{Qng=F
z1s$&1I;c8Et=?d+-j}UjF|Y33D<fN}rdX-wP$jrN$RN?iv?6w;fqbV!!(>2nWwQ9r
z@_@m%;=)1to$C<e?TWFD4E(zhYhE`Del%Y}ZFpffYf*@Fu6o^;Q{5bPT~gso-CBR$
z>}Fj&a{U5*eN0^4GYLpz1zlCnMUB)-S58g~Qa|rXr>okaE!Z#ut&e`yFxubHzu6Fh
z+}Kaw*eBK)ZqnEp(Ab;RXmKgY*w@(dyRiq*6rU5EAZ<wTp{d@ui2;ELRE2`V3E%>_
zEd6S#Kx%FSH`(z6VZ|i1EltS>(v(#5v=OunH_B`X3Y?yDzD0|%Tf@35R_Vy=a=B(D
zB&9+*^WqWF7;Ttg2>@#@)jmL4Y#?XRkTlNLr&&m5K<hMKYe5tMV$o{M(pHz%`n#(&
zU9SzsMy3|D)poY6{A}BhYkiFe(Wh!p_^Z7}uYJ<HeShT55lhWL=u3m+`?g|0dl8-d
z35yw&6z$xC>{1RD#v1{TOySYd5FbgA!#WS#I&M?j?gf<|A*kbr@@Q$M81C_bxLw_D
zZNI0x{I9!8pq&t^ZW<wZdNNZ+odl}1*n?0ld@>A<RTHi-RAw?#R-Lw7!Nkg#9+!rm
z!pWYJvz|FL$fQKCqj4{Ge3yt!cfnS#4N~7%nm!T!E`_v?dJ8OROA^^IRMOQx!pA<!
z{62n}z5s(hi-5j7?EVa{{-=?C_pN?oq=9tGfn@Q4C+!|RyB-1XfPTS1TIWFc&jByX
z4ljv89pk}N@StDzprcTr!`7fW(ohQJkd63Id@EBD>$jA&7nC$I!i>j(J{J1yG{f95
zlzbh6!q&mSnqhXH2&17M^T#MBGMYMfgJB~0ldEAFoDsd|5%TE~<GJBP%25&VQ9YEw
z2%13-@Tm5;kxesS{x>~aM7=L=)U%JOebO8V(CS}d05$3{{>@R6(O#kRu@4`@i_?q`
zTE`QQ`Vt;ZF3P%eR>!a1&F{)4N{;&Wgg(B=PiSt9huVyxwoRHRW5I_jBU()wH<N<O
zL8XKfkFTcg-J7qLu}ZH^u-HD5U`*ziQV^trUXxFc@lL~XNGrC}LC`6r!D*!MsSMyu
zAmxl(!SvJn8Bz~QJ}Z!b0$4<0`V42*pK}&oW408!(Lz3kCCdhuFYi+F!1_oIRw+ll
zLm`(|0I6euHPcav9x%Q>dFhAaOC3*voaYOx=K81Re3j>)2j&Yn=hrD0o}?D?^%fSu
z3q3|Nl7Vop3aIW@7@i)~Jg`%+@CmD0au{>!6E*FXgJ>iT_|>pz&$F1WoXJr>9~hIM
z;0s9dFiCkr%Pj{+k%I!)s1TR{RD$*d%F7jkQ!cc?Vhm8}T4;w}vm3)oigI3L`Ft=N
zJth+%$KywwDRKy8b#!cXGz}g#iz|e8?bY@2Tn%6`eQmjIZMAI;02tfG{vS54f4`(Q
zGW+iYmOHEx{$B)^-H_!!2&{6g%6}19|Fi<Sj#)$gtrGsPOX@$B@IO|-{~qQ^|8q(G
zhrs${1uQ8o`$J&;u>#gNH2xjt`C|p_`g2L$|Hldl+q}jnCZ}Llz&RL!1+xOK!YbjL
zKVe~>o!`4K0_*Syc1aCAJHNQRy1u!+yMK6mdVT@GqmoHiWp(+2@R)T5t6&5cHjQi=
zEX>mvO7zxzbr42iMN+;<hLFkB<PF6#e!!Pb{+3@I&raTJr1{O5E0wz(Uk{M=H-Uvp
zE?ZahH-V))Tvt2=<Znhd75gs&Yq-AjzX+^SK+(rqdA9!|u<~7b*b?gP|0b|b=W6+m
z-`EB(RQ{=io0PLS%j);RD&YYmO<ZvUu`mLwtiEQ4K8Zh+f{hqzGMT4R8lb}u-KWe}
zhY?uB#}>5JW{2zK^A}ds%`RxKBjzr@Z}!3nEXxPJqn*j@2d8x!=gY&=LX`!5a>&h8
zf8*)ib6e~0`7PTh-U*SK>&v(EjhT_R!tO-p`-i8b&+TE44~R*LFCNe3fGjX*UTxD0
zg{O$f8!g2K_Ah9}+*dy)d5xa|U$X;$qLA1zZmD5=-iim&6x^!Y)5m~wLO6MB^g}6I
ziE=~erh~l0c?*(qBM6|2+d-mmOx{tFA$+;fuPBpg11a8^dB-YQYtV+Ps%id=r#CL9
z^Ouv|-$}%@BmS9W#A9mgZCa4LnQ~LVPw%5|z`vWGzVw?Uz;26}GHvB*f7cT%z_6Ef
zKj%W96E@vv5E{rM@HM;g1GAZ1oTu@A{t*-EMnPH%0|4GBV0bSV4VDW3QB>2+oKt>Z
zcu=~~N5W9<xqQ!5;e3#?Ue?OITk712B)3}SO>#(IGfPm)`tp60<eoKoiemSuuI}^0
zO8w$+!Lik<Q|WSJe8>ZBbD_V*iRqqs%SqI+R>27*wQpsy_0rh5Qt$RR%Tl}3)ggxw
zK%KX<3&c<c?MCN4g7#q3$aeypK|(eLh!@aw0K%_sFx<aiQvYoQJUSntMe95uApOC*
zgM>1wqcX<3U1m=pBv-Y|ESdO8Y<&G&nIusBCJZ>e$W$&lqo@sVEa!F`u$@zSkw=`<
zQL=G#__PafTEq;)&|Tt7BX3w9srK+)(dl8coL{sG=RtI0U}(f}P+z;LcK%v;vyO`{
zvbymO;iPV>n@iDmTUZj)>gN=BMAOR-L`DRDhu6L$b@vUJJ%4Y>fIWRIsPOm-zu;}~
zy=C42HYB>%t@Pe5<uv`lyuQaqFsdUG0<mk$)pa-T>fmgR7>S*4MVpu*5{3*gBtEWG
z%6;?*T?pmzK-)+q5;57XRelcKT}TzSU0GQ3z&|uxY&YJoRQB?_Ied7wIm26h%&O`@
zy!!s;PDLDu=FsW&q{IhwUj<}ViM?=hzCn=}M?AF`_Yscb#VK1wNUsvVbx`IaelLzP
zV=ocrVZ%#>z6MIIk~piw=3){O$7r<g>G?H@Aeg6!g>lh?i!jA6c`1h@W7E4$Tg@Ry
z*3}PJ1^)k90ci+v#JC)UqB%a|clEuY0U+R)lbWo`kw{kkH5PS7W;;7VCax^SvtCW+
zGCD#bIw{2imld`R`lW-k?=5kE7QU#Qr$e*^lv>7#-i$KRVH^U=-Q&crPtxk}H3OAM
zaN}07ceJI8fhr<zV&5A1upEPA%!;Pj%0@d`MTv(s*!2@z<?}h>0i){H+X+@fbVwmC
zLxz}dQAW{?X)}ZUOf%k)4jP5N;m}hs)S^lKwp4)FA~RwEj%D2{1MuhbhucTcrQ>Tb
z2<HA&tnRdjJHMnCE_U&A=b1@(<n|HWT?%sz*vY^p+IyF+uUthr3q+k`cuR60|NroI
zmTyruYQLTt7-D8Xx)CHKrIkiRrBP6kZjtWp8M?c>ySo{>Tci<??ob-p^E_*<cfV`x
z_rw0O_i@bsaL@g_&+9w`Bx@g1$1)35*j*<FYw_a-CX7`C7AB|eY{=<0Au@7%kNMy6
zWxmzjeHjxqRaW{bzf^FS+q5_?W&PKyfLs>&pp%b5xIP7HrzT3oKR+1I60^x_nR?i>
zh8Acu7Jm>OkqXgMF428n;%{Q`%wlq;*qyl4KdYE?NH(q}JMN|FCRl@V^?SqFTfi%D
zpXR>lY+Imm#cOH_9qxsYwsz}E*LhPtG&b}ef?p*5b>0SHvY-1f^s0G@)t}Kp`9@rS
z<r;{hG|5}@<9qtGm28J!NW>8n@u0euk7Zwotks7>uj*^cET(Wn78@sCkXGjDSP`FV
zXrd>;yA|YZo|rAtFsL*&KZH?OWemq}es*k#&MVg|ZJFP?5pP)x<M>_;)o!;=AnDK3
zbs1&Tu2yhr(-k~spOTZf+I!nxoym!Fm_mBjC(%*8ajba<g#sQvAZ?$Vu)*Zz(QoV9
z%-kw`YO-}zxX6+TJ>~o~Y}QP_&OM|2`ZnP9dad5qnV6nr$B6*>&oEC_sFD0nip9h}
zp7XIF<*4;UQwsnF*1vCFp<lr6M*T%Q+)8zQLfoZafbadSml#Tu%bMaLs^6>Pk0rIc
ztB!`1tg90d`^%5{s<2G^aATF87<PWRhS{`_rM_MK8n!$S(~Cb(yzkrm)?*Dtd_RB4
z#8%lFQFeg^g^#5xC~f!sX@W)hkLBttZd11=VI^sg<;y7T4r?dFvObR$N-6Cvrc+F*
zp(u9Ylm@AgCo_X;b<FCAODaEvzV{ve`sPlJp-H&iz_oi+Dx<NFok<SqdmLW=x@y))
zqj{d^)$bT1{loWU^^0wNFY*x<Avsl$rL`C5<N#W@W6SOGNq9r+w!*RN;_WiPy8aoN
zINbC0_6OimBNB7P>M3RFzz)XiE{z7nms#DlVz@IQ!`Ml%#@#yEcw-;`*lD=i-A~#_
zO#@Qz&Z1N9HkjWx4XKQs`6{+<Ryw<Yzj#8EyG2M|kOs+-;Z>#I-ffFNa_zx;5dW1;
zdA}q5zIiHP>{mYJGK*q_5XhbgPEhj}Fj3>GR%t0(7UQ=s$TX<A$pWuT_;RqnA#~Mh
znN?cT#&7B67O>9YR5Q_b#Lz6fLYi~g_K<h%SrNQ2N_y4m)OO;|e=9xlZmhHB(W(1O
zk&Uu-=i9Qx)xQWV{_*QEw?C-OOB4yrNChml;@LgF-^Gl&nW_0BT<j!DtIl~l-`##u
zfBEjfW*l?jy#2D_LG;8y2cx%O>9Us}ak?pW$0hE5J<>mRl*Z{!NUO6pU;YQH9OdJ-
z{&5Y)>iGMTI)LW#2PPWmNb49K2DqU!_aw(ViHCN29iB0v-S0mrKD6XMKyOvN>g#PE
zw!y#wFAf_o-vloMYdBV+8mkIiYZZQnX-6;sCSry^b3$lDA|8<;I{CevetYurV?qKI
zo)miBO?vTKd;f^_#@Qha=(C|J1V3gb?OXGfRs>*9{JRy<*;hKzSGLhte$MyZ73wGX
zJQ2(v=);icVWS8TeBq+Z?Lo@rr>cnZ1Y&9o_~AqXZZ7<|m@)JNebBBj3<vzQjh~y5
zVOSXZ2^pi?2)Nj(0(G6iPJsc80~l^tF2*~&umS(0PH$Glz(A)!ij#oPc!74@K3`S?
z{V;>bX@iu-gW{b1Tz1eB$()nto(CB}1el`-`x^TzD+QZ62k$vO4pjx^>^PN62UKFg
zQ}lv#6hqvcLOfLisv1L73NhLPosa|kU4<d3dR~Usp$-Y5`Zb{#SdVM4KoiVPQ;7oK
z1Q5BMA?lG~Rt;h0F(EToVa3itrP9P313{lwgVf`~^=ZS+XTz5R5%V@-l;RQEMiE;(
zVe_Z{+Q<m??T9HSjFUvN^k^`;i35fUwZ}kc^;)RrL?okRI0WhW*Cn-!RVi`s^T^0Y
z*%2hVQ8bd_7__daOX@#;R^Wh0E`~^0Q@D||hboy57emCFbPO^PUO^ijvJ<1B8%-`5
z{t{c9VHfa5P)~9fBCbZkBl7^3+tr=IiXIBUc&|p$D-g3k7h4t?r*0C*!WD<L6;}#~
zR~L*GX@VMK$Kk1hzp&_jZGu>k$D1&NZ3cDhiXaXq37;bqF6t7BCK61p6U>UBzPs_(
zE{RQ%iFv2-ih#ru#>B$a#3Q{#t-*LopQKXhqypWf($1u>J4yL~<VSSLn$pR6y2+5B
z<d}lwTx9a^wPgRoB=y%R5ymMlJ}F6sDgNClxjQLIXsPwgsZ*~~JB(9XeNqPsQwO?J
zCwEd8(9#x|(@tKe{WMMk_@@0XOvCF*yHA9&JxNgqr-O@txK8mYO^HcCiTf;Zp@M;x
z;^}&Z>A3UOWnAgUf)C*6Chd(z06$6Q{|@uq=--nkAIv9_uM&jLD#Vc{otgxf3S_;n
z%v}8)sTr8{E;DPPH!Eg4O97DmjWIh?DqCJRd)zNOupnCwnLW6f?T48oOPkaEHV0vp
zBLmNA%ggcX&yiluX$0rGG382$=T<8R3*cvc_sw-B%RsE<PNL_%&CD$}bmijC<1@*7
z1J84*0<a6_|HBFhkYWvV&bmmV_}F0lY9T-OG{3qpAIFv2p2B>8C+{^N-!7`40-5K=
zT95-QoHZ;s*`@X`HV+)i_)%53Gn41bN)aif6U`d`WVOInsp$G`%yb_r5l)(Vqq9$j
zI>X>9O64vF_XX#>g0mo`#m%~3$pEIo#VPnDBz=Am#gckcsTT3P@^8hOLDY>ydXWWy
z0@e(rlVU5SQdM0~RA{Hn0Uc>7Q>z{o(QHYLZS~hO6CC0hP^yJ2wOlI|QgX1IEStY5
z+iY~|5-K~m0d6diY?*?0lFM@mDrVHB)`cSHO))NmD{l76TZ7AjT`_<u<tvb+mz5Q0
zH6?mn73NA6%8`{2w;1u&%ImZ8wyO$5-KwkLDzVI}<Ee`2;&@DGrE3(RH93I6jAK>^
zgFu6XNDfSUOR~p`&bj#Psc^(&ISl@g8YLGrVc};~C2FUpAYM6==fdDuArCd+VYIg;
z?4oQnFNHDQL+i-R9JtLe<b+8S*uZLRwGv5aABWlSLNIjLNc1Sd25hx-W@tuoY*M$O
zDr^{5C3O&ihLR6;Hp1mjlo&20bxty9?v$)rDHvvyBo<Jx541tZx-ntB!KkuPce3&Q
zNn>OPTJ$2bLrS_>N;M57IlEasNV3V4vQam)$y%xT&9F{TOK>){HfFNS5Q>(z&tw7(
zD82=kQj+eOI-*|v9oSlWf-94in)UcwE!P`l<j~@8i4*tHJJ?9ehbvi;tzQUQT7_Fw
zhsgyg(H2S=3l}ja_lc($(PxB7*KR>SZy7Rf8yxrBoP{Z7_d&<P4-A|87~6})yTj=F
zDWsRfpldh!r4+yWVd94tbRatt%GN=rh~%nnag0Q2oaT?WfN&0wcvPL;%B^;~o$6Ic
z*~(5(Y6Tl@C;fV>J#ClTt1cPcE++SC#>_4%TcpEkmnyJZnzoxNwXM3Y<H=nGc_~Qj
zuA5o6n~0#}EmhOvO^@P;r-(bclt{OXrn-bYCPz@drie8RF0J4WQa11XzO5$Uj&E>)
zY`6u=hSCy^;G2wej(_h1g1X4@`*}mZ+LzL>m*P9i_u(B_yNS>k9rO=Qwlfhp1h)=^
zE)9g=4M-yZgRBHzt<|qfN(TYWWJ-f<ly%Din5j#H86yvvS>}U!B10mIL-9+Ug{>IH
z>_Y`hLoZH-ve}32#D`t+-Kxxox!}VtS$VB6%=VG?PAbf9^R{005w`ddE9(*D@QCH=
zNEvk0f_79uZq!_NbT@dkyme$L6=PwEr1E;ya({HAw0ebmY+Jr<t99&0%Gi-e^9j}X
zaVYhk{5bd0*wq1eZG_~qbzE{{-0*bVq-uDkbR5tI1}TuBr%gyyP8dv1Fs~5+BQr@n
zCdtw!DYOiP+=&TB38>2yY0?Ouh$_;D5ilOUXYwFmNqf&`LGbL^drmC^?zVTl3Ixv;
z-tmhP2rerKKO+#eP<TmA@QPaDH4eesQF*C*d>O3=dAUP;1swVJ%lJxdavw+Wl||)L
z+VIs5Wl?!dEelzlG<>~78G|r<Lkk%r4}6nDX)_Ca3oU6YEqt40DP!Xa45e9zSS!Bl
zS<)DlXX~?nx@Lvw=8nBpVnW+4_2%|LfS|T=XKK9AXB;lX^O)T8a}sm%-t$A=Dzr1R
ze%o{V&GQJ%IsWeX*6evvpM?tVIX^Ro(l*v?h3-l%r+lsFRiiA$qtBa`nbVhr+D4hP
z%LYph9U8)3bRIIbwDAv$GL@Ijy_;UL<XNl;TcmMZLZ;~rk6KS@F?N*MEZ;M9j}A?S
z>CRc$tS!?odf4pZ(2pyuv|8wV!&wfTUSY9~Ss^$2L07%9ilhC5+V)24$xn-U=`yXW
zQ5)b2?cK5sHV5so!m4<h<~h!fB~eYxKQ=h!G*Hxb5zaz7wpRUom3ek;>vRpEtxhRs
z%aG3h4QGuZOpWkpon2Jz={s9CTxu3=TXg}|V-Hs>z@Yf!4GFOg364Qr4+zf+nM^w7
zi>eJmkByww4L55~B3#=KV$lDqfVK?r*J4@b=4z{dUP^WxTB2kKdVgO^(j#6O|FzTc
z4efyc-s$QXDgLY8;SAW1|Au1IIB08^uUb9FBRsa@2!y!@E!aCS$k>5H-0!b|wwhOP
ze7tWAMM7$jgH!TfI~@f_Tw0Nhd3auNg>?ohpk0?;SlMKdRM*^YP+gDO=`<TVnp$fI
z20D9DI~`B|Nbyk3O#9drYNw<8HlI3MzFxWbV|Q<9Z7X;q_o!lL|Mx}R;hFbI&P@>r
zfQR+(JDoSW`f^GmeMX1i-5aetrp$le={|Z>>H1|4Q<Cs^4U);CjEC#qGVX)CZ{<_J
z8k>SpI~^;K-Hr9P0nyLOe8n7)M6+Gd%%hh%kTeF=PRIMHA{Zx%c<-}}&UCRwrd{bG
z%rGTAthU}#rC9k#bC{Vu2SW=y%YR1B8T2FDlLoA<X>YC977+B5qo<MQotg_xM<~qR
zmS#B9Q0TjR9PhhvcZre<{^Z&Z)BH-uY6^>5X0s{e!{0x)IMvrTYIW5&2}d0N998{_
z`^TbjWZgMZZq^~?T4<Xxt0ig7L;J)2Wu?xymAsbgcZr=kv-iJR-QLd3$Ppe#h$LKI
z;rAvygtm*_YHTpAK79Id+K=nj1uN90LXxY7dYu6Zd%cPB5eYsM;ydBKYM*wp$Zz#j
zgZ;Ox1A7CQK_4>%>m!-NgH&>v>B)Ahq(egHkz_rgy#B^H3<95Xavq6XG_FT9&>G7{
zNpb{yp?Sr_yMZfzVT{TAUW|Z|=i{EDVa&U)yM6H;_DS6d3c=X9(QTP5IT5B5-CI1C
z?JkCiHW;t+Ilrze8YR0NRTXe}teh}qBG$Q$c@C+Q=~9FCDw)~+7FG-62v^B>VKMC=
zOmGssn~F%%)TfOLnI(i+3+(iL_EMzElV2AVxyyE!Bno8~l`>8&1eNiw1~XT1)v1S9
zM)b)Z@b&fius@Wxa6r8)ex}|W1nj(FI|P5z29?5Q>532QN$f*{>egHXiQ+fHb&rI1
z@-@~#hwUepbU*rND?)#zD^|3OUes^~-~Tb|Y75-B?Lwkc9(+Vna3AP(;-a-CcCkr|
z*z~qZXvXvreHb~def$V~=1muI0PMQ$ajSM?DH#C{`!wEFyKoPe0!QJxrCp<FTcx}h
zBEoUB6W7?H_Dzg-ete#?oC>cdZLd<hrWNIufiop@p}%dE%nkvwye{_+R(fU%^%S2|
ztS?+l<k}o5EILjdooqNo`6(P?toc{;eWv-;z1}BWPPk=EUSj!CKE4|BnVu1_4cJe0
zR{ZLgH}$ZU>U7j36{pN`zG=wL0Wy$g%(~etZ8*BwFXqhz7-W~o3z6psz?-Rmj`7^;
z*G0JBawN&Ujo|OVBoXQFu26FS^gKUCM0Z$a$(^jpr}9>GdQrKpd)6oF9&>SV+C%FH
zC6y=IPd7zR(d~-3KOOrGKRR#sdn&%){r>*Ys;lBnbNCoDVc_17yMN#R&s0~3<MpvI
zLWY)~<SGs$dLJPtp$j<Y7YEr6!-FSjFNJnGA-a_c_)D2W%sa$T%Y9#a*)=SLibTHF
zftNy5CZFmYF{v!nzdSnYT3YorHsDkhKB>p&%uGzfu^%`_kPR?VebWt(<e{UYBQ6oB
zXM6B`8uIbeW74pl-f!?IAB|EvBJk6<e8D!MW}&K-DyRTR->HFJtTwfovsBFHDW!a9
zFk#S)RKY#IiyOP%6Kp4G@Y5-ukXTK6rYmWX<QY6>Nsp1nX%O$LZBPnKld0-T#u%M|
z)n{XdxkGixD76|@E}dZ=og30`ono%ioMAVzlN8FI3^&{`d=_LgoV{WDsbxcf^Y_&-
z0SRqVpW0K}*DTM8#Ce4Z<=`(G21hMj&r?=m1p@stW7ZIOvMDs5hiN;-z_Qr0O@m3;
z?B|%YmYwkVn?<q~=PGAO-VBudJR5Y<<W2F3p>>#6T!ntZV+@&5t7&XZv8UK39s7_)
z9QXaL^6SaaaKjwJ-^^9wkmT^-Z>$V;p)&7_V`Kfp^Ga-4g!D}5lU~H+n^x~q+E6g3
zeTXOsIxD(_FMP}ziYRp9*;9&2{+P!TS)|}#3e94DTJ$-xSWTTq1`LPG>&?6ZivxkR
z%}M|&aTT3=e6)e)iSqpCa%Od`N`R^8h6Uzw+d6FVF;igR!f#fC(GvNQy_t^c0kAW1
zsmRhEXZPdpz#wJw=R13I;%`4!FVLDBq7kc(`~d;omrD)jU3vSe<!VhC%leo#fF0S6
z?BR{2Mr%20UQHKuuDb{3&y*Is);}v$FCS9L-!3YFRT@b^NQ)3?`cJwBnA?NlQMLW8
zCLjEB^OUWn1Eu)Vrar&G0x^df<?XUS@8>$NU`w+}^%VuBhUPX=3pc42t)ns2Ocb~8
ze7snGC#2kVcR%Y!?6wRL9_bJ}EJy77=_VYhv_o;fxtv3ED_r@z&d4hje-3NIE=k)!
zbmakp-&ftmoO>8Bs$5t@_2W#ObHJ9T6S8;w;9*rmzCQ~=obCpdA87lf4Y<`^mJCSR
z8f~ba+D3g`{LbixH$Wg<6_bat>4EJsq%O=er5|bt`h2ba;;4GAJ+y>6#KoA<GdXhK
zbt}unMOVhMCP8_L7=O6Q|BGWx?6IZ<24Hm@j$50FsjwqKc{36CuJ$3DbadyfUD9}D
zcx^6|f=PdM(^TS?Pc&~^kpf}gbn0iq!q*CWQDM#hgYi&(@#cHuSY5f(=)U&t%`6hP
zzA`}JK%eq<Zs1*gb;9VuSK-_FiSYW`0)<0UjoXE}vHJRk(L+nO+r?GfhQ@w{BioeQ
zrJZ*T&9kFN|Gv|$T#YrfUydIC*G~8D#GCSN73+Ot7wOoEzwq4}UPNOL)4S9Eai_E0
zN>%4&;%pkqO0$ik1OUUr|9L4%1%#;z;^0=o?Y!9mf>!3kOb@t#OfV84q=Ntkhu7vX
zEu&+oB4^=Zzk;New^h-Ed^0S8`5mLXn#af~O3aH&Big-#Z_V?Z*1uhfJr0RZnir#R
zowT@h0nXzsE0<%J?YH;G@JFqy;Fo^?WYY+Dv@c<w+D;=QS~r;9|JSADf9-VtVAB>C
z@gru{*gohS%Efs9o|?lxC=hj9`qXwYBZ&k#cDRAB{&gvdV$*(HvC3nDh6eAp(BP+l
zej(k1gD}7jJ@8e8m_gwWoP8adoBQ~7Ej$4F(hubA4WQ*Z;n|;N>kP`B_g)v*%YW)x
zbtq0dJc$=7Js<REb)H?4;#^;PY$#hjB#;2HaL^JxSDmaduZXd)U{GeS+Y7ihKBAWk
zaZ_MLqH1)Ri9ipuqGl#0lZMd_z%?2y>B)#01z=3lh>Ln}#Yyk36YrZ@EEWOFaeGA(
zXGK0^=nFD$L1{}L6<<kbU!MlA-*~>v(pLAEWb#-(`9|Ja2#<tIUjaP7Kal{OL`zj^
zP&pG^C(HArG*sOg-%7<l&)T09;UQ4ypM~_dnDetH!?q3dM-gg%)&a%>UanZ!?sNXH
zF8#d70`0B>92?2L1O~e422y4LLK_1@qX1EJnBjB&aRZnMjebdUfiZJIu9ZQvn87Zz
z!Dr$RLAg5^`8&9UiNTtc!CMo-<%Qr%W?WRgLsc<k9u@5%LvL2aX`KrZJ_#AY3++lo
z>j{MQIfrgv294~5j9rCxlZ8zMhN8f<(MGc2z%cH}(2mNmWywI_wXk+T_);NgqY%2~
z9R4&iys0vLF&_Zriuk1(f$DZ#B}UvdMxdy)KUWc`ZU@LDf@hBCq|gGarc-PkIUgSh
zna73&S)ja!33ySnFQSNwut-cSP~OA9%BY#|QIE;7Xk{!=-a|XZ=xN7jW^znc77LX3
z(DWpFk|c&F2!jvX0_8pY8W}TQA0r}zA+~Fd@*e7Q#g2ZCmBhx79yFJ2id7hV@RY-b
zDixW(H;GkFGFKswRSPoL7>ohZhL>N&@w<fR2bq3hiP3T~H<^z%GcmUaiXL*XwAqb<
zL<ao$oIpel$TGBaEsAt1vh-@wLa-!$biwvBNeoEBGAu|8A;&_v#8<sYY#~lMluSx@
zNQf3ROJq@VC$~ytQ4PAb%wkc=kx7og#w-X*E(*d3!%i-9!H5^M$}{;?Ba>1kgOR)o
zZ(_m7VDWCl#wd}os$==sEtA@YYG{+ERA8r;xujfwPNf8=O(rF`>{?AVDRx|2%_qGd
zQcL@IowjNcyDpfn8<apSoi5#wWKJIYt;mDlB@H~ArZbyx&Jwd3l=dv?A>&3c`ffgh
zd_EOZDntA{9YZRU(;yR5HtK8;W#i#q+_io*#PuL(P1wvyY?|d8l#cC`wMLMIrvi9<
z!%nVl4d9CW-}R2-i1Ge#9#@?M!T+P)q0aeS$n`ZvuB0jLTi0ARJb&2*9E?n7MT)!+
zLSU+e+|RXS0Np&cZZfsvJl^g+?VCJRihOTg)Kn*q3V6`O=9`*I=q}{HAR^O(6ns3-
zw|C96buDlh%6DoOvnwv}EG}?{ka;Z>I6?{oObgv*3lOY@cd-TG3x(dSMS;zQ*0M#x
zkfNC6!qB0jguNn*;G#6sqAbWmu_>zCAzNHvT5J?toL5|2HdOp&uNalqs9`P9lP#$-
zEolla(MF{^hDtj2O4K2!cj(ey*;3i4+_`!&Y+XClPB*n+jD>XGytKBzU=DIA!$~OP
zq07YGF8k4(-d<<D&PvZnVZ9w(uB>joFH}CVV16uAj>lhdu%~e<WPagV;S^cXSzqyM
z$QmG5u_SAaHe7-2REgzg4S`l*%~k@<tnorB!NXRBa#fqfR-}|wpoS{+l&b5kD(I~h
zopAO2=W1NJ>LTp&EB|WV>M~kND~{Xh?-Vu1FKT$Zs(<;{2+EbePP7z}tGOkqm7uKd
z#Kw@?uBeu*70IqS>U*da0oA;uv{a<5doEn}<8z(DV)=G{oyMY`tcIz!S>5@I`Y&uX
zQf?SBP^+&R4DU27Ei@Rq2XmK58f-Oc^yEw&_v@V(>r9}SW+j$x!weAFIxkAhT~`Yq
z4Mr2Jh5$B9D~*N-Hq6MKh8RldPJN>e9U#fADbcJcy#>pK%_LcaF%{aJ1*J<%Y1XZ3
zE`@59-!>!hTB<2A3d}6?h8Y_68|#Ey3Kv_<U$wNgv~0w;yp?GE`L$KVyLCOkRg|u^
zZn)JS+FB27t7dCk-D<VcZ>tDtQ%g}8C2e09Zr?}&&^Kc(-4c&u3Lh-CAKkWdI<*(y
zwm2vi?s5Unpbss-T1YMyahTy9Sh4NelO2-)bO6;W&=N8F5)NkS8*FxB=m-vuIqAy2
zg{M$6r6Pb(lazSLq7Q;Y*-Ap4%0$*mL~{pwQc6Nkg>AoR$fOBlNhM)}1#W6|zc^3;
zR=#3nry7!lao-X1mYNVmc6_Pixc${7Cg0O83}w#j(bw&<{?^@n(w$5XduQHKiq|^;
z=~j`a{~RiQVL&Y{(yK+)TCdorIP%tj9rnqcREO%7-W^$4WncY7U*CD33{gKbf1x9H
z!f)OF2?Hn{q)*jM_`^t_@seI1yicvPFJPpH05ISkRT0|SO}K_-uL+G#eeHLE!GRnA
zUkQL$xxy>)Iwwv#f;6E%uzuXPilSFTY3Dx4=IwMg-Ss2xKw21NLV<H(_^uG(Bq9EP
zHKP0rcG3p^LpSxKSMLs)i9phlp$`21hMjy7|4g8wbW<Pj)%q;|kwEo{G;aKN*y$Jq
z;4$_63wAOw_xdO7guo1nPe@EkrU{Au8+Nh-#1Z(U`~^D+r{(+wJK10rmi+}gF;>)~
zU?&emLn{h)YU1H(?;0B)iycJ4PDP^=^9$K|-%+rWaG}rK;?}lT{Td2(de*SHb9Qdq
zgWG$Af}N<qr@sK>GC!qIuoL6~#OnV2Fta=0hJYhgK#sa6ge+z)M!M=JliTG3PcW5B
zXik4j7)G?_AVGpmEY~HUxlGMgmJNY+-;zv!_GpIqG}5fQrtq=bl{c$aayN}qj^cLV
z7uh;i+%zT8vD%@!eQ2o~>CG?Mdh@`r_uWV6N#9Br8z_*)#Erx#-4yx8*bD{|u+rgW
zQ!dk@a*$aMCv>7#cYea%6HK4NSSgP958V_sMJK{A`fuIT@Am^=^jgxFKfL%`H&s*i
z|57&vd$EJkO-VAZ`4W9LUh^aSTDay<<+!sJK<m%E9{AsNQ#<P+Tz$+xL;sOL-75SU
zE^@K+GeR7LWh3%`I`I4S*<>?L^=r{)yrv_HbJF!^*-HEpZ?ctSoL{t+Y+k>+m15l&
zL}g|B-K2oqeg#`6-L<$=8~{RR-O2PNG2O`ud|JGd9r|LAIR_gL4$Sa~&r&hyz~Tbr
z#pQPb^b)6XiomIkuEd2|!K}OJdC8{T1x1bw$l~1Q;=a5pNRCNKeU~Djw8@pvw8B?_
zm|eCeT>@Cq;|Yg6RQ9LG9)L$)>;uauC2C6Q48&8ORik|ydIp>GOc|{m3cvMk*y{4N
z1kV%;tF}m5uyH~=vSm3NFUxfg+7%Vt<XZE^N;r{6QxL0;*~g)kEh#)Apq59olt*0z
z+nd(C+--8!c|>+pm0iPMMP4=0p?#?sJn>Jp{nTAO!aBr>$zVPBlS0$3@OWK>V^o-}
zmZzHov+VOo>7UlBNi`P{%Srk18M~=+5cTu7uP>92XC~<^_B%9b+<0ef_NW}|KNheR
z%oxd0+7u`@jGp(3bqv-o4Y1yw#@YN#GhKL6=F;#3?^tW|yD!?o?_^!3_TxEIACvl@
zSZJ14Q9d8XK0bUmyeM;-wU4<s+{z%`{1xBptSz*_;3IRhN0I`{->dW*Zi*{x)pkQ>
z*^vWAA}~1bP9h}Z#1nkjMWblJe8+d^6H=V_zrLwh-T$5l;DZBxXFqN{g92B_E|$Hn
zTa?xtUbpY+dRHjk9F%sr+$wf<gx{G>qW(E9)jZ_g0;_ZcPG-69iQmFkX){}31BB?F
zuMq?KtM90GaIj?Myt%V7pR+Tw!@A!1%&caXI!3_>l23e@<+C6v|DHf?Rs?!>q62^+
z3DZD4vzEE#H=xMZlUf`o?n&xV!D)98mN+>s-a1}LU?9VoLC~Oawt+Wuuipc@IE?JI
z5Ai1A?H6MuW6gtX3Dk)QcXm!_zd+8Yy%OO0yQ<*dKXtBc_4<XshrujGFsZ_xNX6w<
zMF6j}pMXrlU!7$~W(zUU0lm8=xNIrIm%t3$r*E|6ry?XrIvKCCr5;XCW3<t8$j%Gf
z|BQ~uplYa%Zw801ns~e_L-Qn9UHp~4(#JH<<%$To$ZC~G1sj|&^1+j!df7gSja*Ne
z=~d7Sd2(Yb*z@@ai-xFGr^!cp{CL51gBDXh2`i<W_m*l%WK~z{w0(hy%87!WZw>KJ
zK1@Ch;P?~AbBy1xK2f!(af^fVwEI{?GA%qsU6?&Fc&6`_O4LM9=JW#w&VBD|W&BAy
z6o7QDOD{enDDK#`;e0L+mj3C|6FQ}zQ?#?gOCmKH#~O<Ppfv$0u$HczPUl0L3LzNr
z(`fZM03I9+1$@Xi0}eiIh(IP@zU)k~`tM>?9PM*KFd$uMvS8ADPeD%?URd7iZ>&(F
zuC$}v4}V^&ul4igM^o?WJ_kE1zkMy1pb;XXoI<z5T|UtMH;Tl#O3UB#_*U?_H+0k1
zjuxduXUTGdL$9Ma$=-Z<#)jAYEFP9BYNQh&1Vs9O)`-2|F{ybnrI@{1S)y!es!X|P
zq<cY4IA?BQ#9cg|t=F*AShk~>sj(WYZ_`fgV>ABb8)>3rQ~HBA$Ma0H@b6=Q`fnaR
z9|}^mEL0Q99eORD?kly9!bvH*dK1ut-Bxm(Ur-&6O4`Y=A-4NwaW~8QJSK1FUPg<z
z-iE#Q{7tEAl$+3wt80azoLF>cpF`R$r+8noX<dn_lAT*1JdQQ=pgIC%KRkf&ap6@f
z_c`RfVW)46hCX42Dj8<}ac}}<&4&7V?<y4sM6pVbV%(8hfTRy(&9%N<KiB;#zc-RJ
zB$zy-z7tc1hs!?{jY*@v`zG>?v(WtK4F&12+V?Z|_@!7n{)>S_yz|6<ad<u5XCR$Y
z4SS)y!jjOcdlfMN#6!2OI-%Bf#RW(=D>0fE%pI@1vU|Y!gRUhy>p~Ow*e~0N)|lj2
z&|2%=o7}hDCS<VY$%OE;{8y8^B%hLd4A%M!W!iS$JIzjFsQqS=E%W|p=RBSy>02uL
z%8U@!HFM}!SL{R`r0oQFPF(4LfVQPD6HpTLJq6~xgzanQyuujwuZPBZteL)CXr2H1
zruHr1023-ax@Ota_!4<Yx<9{Qs4Ce!)8=hrcD=MloBodxrR9f`8b9Vj+83$r6d0ED
z|2U#pHOkE%m|@4ZtY-B^CJED7fB6Vs)&E*QkVR(=n{%69DW4c%nX-juwvKbZ6mb12
z7L}~B`ZKVv!Pohr9WSGTbSKKQVMI-gJGWb81D~#0!rk*+i_(2ZJ_6Cd{Y<w|Sb7g=
z;xbdCWt^6Pc>vh8|DZkQAkdTg%DAAvxnImGFGW<uCZoSOZOkEyiTU^}@Wpb-82le2
zO6xl5_*I|qpVQFeJ$3nMT4c`aLn2l2`=fTBT-KR=%<4PA>^2)UBoU#{$=&u^x&uzE
z7)imb?_S)HYfhwg!6SQKJW>W%yCqMrvZbFtG%^sg-E<d8iK1Lj)iYPDeqKuAw6g?Q
zx#5y|5e@YFp7AQ*W{Y<q=6dqHQ!B!b-*ep^QoTIow)U{h^g^`ipfqSS!3R3}x3#)r
zh=B~8hjXKodwe3VnFio5Ovr^1_Eo>eazEjp%U1yBSD+n_?*VSaxo+=j;lh(}W*c}=
zB)mG)3$4p*A``*Xi3nUpQ~|s}bl&6QW*w3U$}b2FA_PnTfh5J{fqPeGdIP(>$8^oX
zNT;=K7okj_9Hh^mCum~KUnpqNz*pE$ov|dHHOa^bIhcX(cd(U=u|ASPq_1e?$Y7=c
z5H)6O4OJ{HEQrny4dBGel1wBsfkSB({MUh>F&LdoeZ?B^76A6#LDwJ-lvt&GqY5fi
z3gmzXzKAplX66mQ3XCKRiWUfpRsGk2Ut>_}Tu}N|P$pS$wm@($7FC$^1E@eXSVR#G
zb>LSn@WclRa1scqodetb4qm18Jx0@Rl*Tb6!#0`=F+B;1M2#qovi#1WKg2^LbVG+!
zF-CT<P&>*Xy3aRb*yJ46v~yT(Z0J%VY<>W1@hXhWFl-|bx^{*6(>a_sGTbu~0K|(x
zo%a35i1Mot&@d3vwjORu#1bJL37!{%`9y-R-<M%A!qg&N3pwzUBA<SYB4Obsn~$Uj
zGQh@*eB{DFX(EN;!bvX^4Uu7Il8MGGidK&Y5Sp;E%}X(wJmZy#VVP&)mx%$Yu?P>w
z#AGwQ42t0hGJehylX4LSWn_9SD8seOs<8VID@e|y#1bdeWF|Y$q<k%-CMaiC9j7T6
zXAX+jb7A^2824=csnK8@chXZcwfIki4pK$&7PE1vas;i(Q>!95yWMz;OAHT}r*0<l
zjx3RyJc+*Z@sAl2^sirfv0x%to(484_z6CZL5Zez853lZ!ipGE29vaRlOjwo<BF0{
zBTBFfV+Qv7D3;^`ndCGX#*+E>c}a|@5hdh0*^)Gx$u{Mr)?aBoWeYtOuP6nMOnFL|
zy7(sbeRk?pPwKn%)IRhy1-i86H)-<vX;r>ya@lExJ!!J*X&LD0GIZ%NZ_=gp(*u3e
z=}c0u;!=(V(<QUhJs2|HN@O^G$#~=akYSpe@wzKRYa>Gfl=*=n^OZ!V#FtEQ@648*
z%$EdlCp!`UNT34o;&AuqmDC`Z6aSe&rDt`Sc1qkDc*7GY8NM4P%;?U}n$skeqfwpp
zXzmp^g-5+_PWf)mK6-Bbe74%JY`bqct4tpA-x!64a@V&}vx=m&skE%Cr(&|_2h$v4
z>0H&b+?UPSf<k#VpYo#Y^BxlNPK=T@DSWh>u?McHb%k>EDRSi~@)aO&?a`_2)IV66
zGI|K*I1E8-l7W6Vgb3FhpJa&GM3(neVWg0<7#=!}YvGHiLapY)6y5yPUk1I1BFo~U
zWMonI#zRpLu=vTF;_+H&@q*eEqFC%(@l8)L$$9Y?S?Ow1#adILd?BjJy=<>!>?T&F
zHdd+**WAuv>~2?%UJ9yy*}Oql?BQVb`i1-=in4gFGTxa|<Y}p4a9L1h*(9>8BP%D~
z6=ZUS-x91c!<xGa|FmArw%<&$u}8TQT(TOBb;_!7=vrW(Tu@qBF|1P2W>ZmS4c(>C
zI$z*MFQHUw0=zj1Kz%qM(x{SDM2BT&16m-U6c(HmN|?GZxjGtkiWf}?<rAndy&M|j
zum+PGB}<DCn=sn5TLh;ZCAWqUFBI*0iZ{P7rQofg@GVHR#pmTd#j6s**ZZKiZoX2B
z4-_(Tf^v%>1vkz2!xT#U0w0G#%KLsQEfi`g0vatKtrCBo5(+&z0fQ2d;Vr&V3Wdo&
zzgY^%f>O(hjoc=L-!25?AdKxqN$$eN@8$;bpu{%*T6(00>0<`+gJK8lmj=mUhG>Ao
zO0>L6$PkM!V&p(^`&bc+Wl?OzP$>63MYCmP6a7RJi%k<;3AL}hcyC`$oY@?D(zI#X
z40_RgM?l?tl~~9Is=dXmH>+secWmB&fjR>0pagZwX_rFDu-)`*5+S3)uyHfeLcBKM
zg(Fa-WE=sZpv-WXgv<<McHdHh@!BhjZ2Q?%zX2<bb_uJ6TUIov7v!`&6CR+OEtuOH
zcmc)j4*c!Sl^sWZ)Vp%Xz~1(LIMR8d;|NX|@7ht9hx>H4z1o)h97;q$rG9;Dk)z%*
z18j%EK7EXW(TD0lB5hC!RQ9DVe13qxWFa8cKGq0_35Esh)3s{s771mJzO^KGhfvC^
zp2^|xm)2x`7rC<U85e9DK=$MrP`qLX^0FH;YT_ue*TyoDS*!O7<Re!id)2AB(HZ+3
z-*oz$bQXSwRSWlE&vcrMRB?XpE}`uLGa>a3EbZMZwdM8PT5-R!*A#v3w=|c33mbUl
z=wQR{hbXOkcZU-O6aG*N^%&82PPO{n+AHLUjoI4fb$}aHTI~aSP|BiuVJy-cn_^q^
zy)SQs&pLF7W@0E>zAss~ALU^`q#gE_A1<00yt*B{%^da)9Xf$(1&loEVjoDX@6ov!
zxQ-mD2_1@)S5?u(n`j+AvM+DH`+_td&B?d#v>)xa9eVU+th+UK&}dBLXHVrwW6Sr^
zLVn<M>xY>GyuHxTA+B*N*f^%m_;xAGZ-lQOhX1E@B%pJ|2Hd|%Wf_wSy>U-#Y@PU0
zF!(qWYZ3NASA+oktU6~ziPD2$L!N-<*^s&X5b^IJGVZCm?(ult;coItmSsosG6<<h
z8haW(>*!<;)x-~;3AU(ds<shB^JzKYx0dON#*+yN=ro1LL-I&pZ(Zp(_2F*{hu^4i
z3SuaV{;8Y7L08lwluXMk(Hw4=9OLKu{=t5F6Y<?B^ZS?4VI9!ymoy?vtta*h-$Tq9
zUE01Ea6k2+o`r|CthNp+6U>3tzpH!CY4v>n*fkfVH5sARYJ~^T1<il>GH<6aZwddP
z?L9BCF|P$$XrW)wlvt=USkUlZsLWXi8J)*jT~O;<D4}0el~~L(SXA*|%*a`E$60Lm
zm_vHZcel-_QZIe#T1@s?it$+LIb7;fm>+q@IHVvrP0cuSC@_n|IG-l4c+U{E)V+Rh
zrFgphZfd~wVrH*x<#V2kq~3~x_sVPthNvUK$>;;a*&*)lL;TA&hU;bA+hzRwGKPmy
zT;Mx=v~&h=J1(XeK6W?*^f4|@JKiHt27Fvx!g4%fO9s+EIOLD<D76`=k8o&k@t(Y6
zptr<feD{b+jDbZPhfVC!GY$sMcR1V}k9Z$5JQu^^562b6We`q>iF)F`{6qgL9QN80
z_w5nAlqXE49Y=13UcnOfz8ptsjQ-;oR5=|-rJY`_9jbwgqg76?Qx4Vp12agcH%x~b
z9l=b(>CM8S7921uPkNgbh}~nDgC)Jw7{mn^=B7>W(GKzY14X=}_bG??y@Ljb(FdhN
zLd2k99P|<G*ijtNn8);S<=6?2p-H&(Dd{`dX}HjgKXh5)*g0a5yd$~-PwXNNNXZIa
znI(3`V@TB)-I>P(nfA)~Xt`4xunrf}&`wvAj@9`GyStpOHyo?~2zxM{ZcTJ$s@$se
z@pA9&0rS+dug@V<_MvC@;nVd)XS5?mx+B}yM-2K$7CuMx*+)j*M|A5)dT7T_=#DjC
zAJgg|tN0w#WFISaA3t6{mbVk>;CKS2J&_~?fL}hrqTvJlc!JZxi(Ps0hzAQ_hxbv(
z6U;|TdKQcjxC9Bs8J$%`uF~04t21ci8EeNG`;Rk@hchmkbDoSdfa3WJuX6#Nb1~xo
zxb&m}DS`m#4-^0W((|uoZgIK!KFYNpur)H{SbqGEOV0rw0Qx`2&%f+uZ(o%E>(bNu
zMJH|YU#@)%ZswkU+RdB=lSYqkAK;HMfiC~J^wf1jgrf*DQOl6HzsAq7=v36DCuMBX
zUzeVthMB1G6P{gw8b9Mw%21b{B0e>(ZS4+qxK9O|P?w%WJ%kk<s7p_k&H>c;IWjRf
zU-e~ZX5~le?848DM7QqM-My%m&7<SmqW$w<?&~L4*T}Qq_kYAMe_>Mv?qziPyZ{ks
z4&a6G`Qp+08_!l|_Zr{%%AhViM^i#*AK1hWq<ONtBAM61*axe%5iu+V@f!2hPX&T`
z?6%~@k@@2eTn><4$@2mw<>&GMvLPZJIA}Rs)*>!b4-QmCx%U5c>3Q$!n*}d2wo^95
z0xSW5U#Exi7Ag-L8f=8KQrMghC0bTaI7EgUteHB{fhvUZk(C8){$X^F3lk}RBEm(<
z=l)OEzQPUMx6t@0v{dA<8aa}dyoW)r3!t69F{ZC6d&FO`JkWwg3%G@yxOYY1j~i)z
zINMiue!+A`rDJa}eX1Pc+vZ-IPFlaegL~{&b#l`8n#ZdB68*R6T!&o-^pEg$#DogX
zgPqyVHm+CW)iy3X9LxCedy3xA2^!Wo`N2MqvYDP}5N-X&_WyldzotX2js*!s3r|!H
z3eyVIcfm{6(-p*8$<`HwVVvpvldbl5g>HN^9uC{sz#0gDvVw^o`4ej%67`ep8Z#R0
zh72ucL0}LPyCA)b87HE?3yPmNZh|DtJI`Y#if{<7X%W{u)1_?AU!o<=B^E)F=L!cg
z(^zicOnk21T}*tQ)j;DE5!j7<RtD9Le6|_;kTF=_bG48+(v_}=H?~;MB)Ve0(u6n7
z@yvubE1%mmZoiFOH8rv6iq#SCD{EI#NAA#IaYt=%Us-}S%f5c?%2&3k*?AVUhl=(q
zR_w}lEH{iA1jX=^)W@#g7FEy07ei{J6c<AP&7W_cg;MCdN&wf-Bsdth#^?Z`;qsK!
znq5}GPALZ4konfvJ5VzytcMNS8U76#0su6|S9A_+E_4AQ-5|iH|K7|M;Q<Z)Y2aof
z@{#k2#wLsf0RDFE3v8F3kBM9!oR9eu1z7RW)N2+5(joiACnTX*r_U5-=Z_%VQd&km
ziW(kTp`=Eo4(?dLgg0jgZ4NoGo_|ufP`nHly;x{D4Ut%o@1`c~vFxyL`Z&C4fmm?!
zL9gm*LT^v$Wle-vt&y&Iz<xF-Db&qIX4rC0Hhvo8f0zmquB_c^;BI}oWBy(g#0`(p
zX81l`C>FcH%6{Y;tEa--qF5Od`C_wSd$OLtZGXcYVvjk#H-x0*oVMl6EpOc{WqNRz
zZQ4JAA55pL3kb~jf2seGe!g-~l5i_Gdd2c=)f+n_$7*nTzmX>ThAorh&y~+O{Y&Xz
zK03gQ+jFhMU!=(32`di*Yi;1>iLfhs<rB;|ncI68;sWO52x10lbc0MJ%=U@b{mH8M
ziz`s?^0)(OX#f^jLIO7(&wi7Q7(*p6f+XJBn{Nbk2aE2eSU`G;qCa`$c7;nh_Dpov
zZEc0Z8IO*H8*_+Oe2AnF4!auHc*h=qZ&(Ruc_85erc&yY^jGyxza0R{4L%_=9FTMf
zjiNGiSK+}`jHjhL47PJMc(L9H5^|mN8R6Br`_<S_ZGReOc8B={n&iW`#~tN7GD?@#
zDaB@qjEJFn3}o63m30&+Pu%!I8zm41vOXhEXGfspx(s13e4u`6Y{>gzmt#)gLwsZp
z70;@&pZ3jJ0uq+b6+jNgatsG$#cmRBT;N~`oF`3$=JOTEjGC&SC(n)K|4op|#(1;4
zBY>(!^6a5!p;1u~B;OUtHh%hvp8WQw?}8GfOJ`{YcuEY{mG50X!_(L9HW>E<-=FnP
zXNUm{#f<0s_VH^oH+a)%@mcZxwtOD46787YG@Qr=FZ5)KwE~4$tjEJ_pCq7QG6``=
z#3%2wtf$Ij)XK61@nTWvKkp3W9p=hCr)r5`IABVu6iugXofkZRzJ(=g`i(P_sEAFu
zn1efVBtQ67jN)@?#kxjB0?AA<e%+VPGgZn0u9+AV;1V(+q3@otaiMiRfR8iHpFQ5y
zmCZPpyfEKUZeBnnIV%KclamM6-aN<M{$-+j&!uX9GFcfAhNeNfAJ+FF8qH1_8-RCG
zGv<0xlewt|Xip9+_~1wp|8^5Ymx3w=g^g8)l@0K%R|Zi3s_m1uV0tDFv&IN`+YrTU
zX_vLA7Ci-&?eX0KC@oqrJ2sj;FduOaB`(RaUp^Z3AhTCuQ(h55HcSA^tLxohyEpnF
zCqnUt(v*4I(Fs^vhhT>p4ay70-L|Gf%OZazEji8ENAq=5o+0=;+9OUHHGALTh+-Y+
zuLgpLLzH&EL06N=nFJG8)m!0{9tJN%Hyc4>s?bO<bQshVi*IEkeX!=2>HLB<A2&p9
zX%!;kjE}$7?JK8OMxN2xQ{{YW^;VOO#s@S|iD&B^B%)341{y3-taj38f6U|s8p@Bf
zbt|NzVSCxsN7PtFXFK9g9h2R!jRA_6%i6rRzJ6)4)srkUxrNr|^2#Q@Csj(xh+>&s
z$|bxfop*AZ_P$9P;otL+$*r{Wlv+qO$g?M#b8?4W^rk%uw<q_R(k_pdkV4XTzC<S4
ztv8V_IA0%wlV6MaD5zvlyWH4ksNQ3$aDu-3MnBIs9-UK?%lsB7P)G40ElBzN23-Fc
zy__a*Uxqs6(crtDYQY(EMbQ+TNl9OP1;D{;EJ_?OEh-P>aY+2-7LQ>`t^w!Nf;Ulo
zDS_6h>7%vfYk5lLnXfagIs5y^Q%(XG;NR_DOIDy#;YUDm_<s;&fo!y^fz5|V55;4N
z*eU=<g!vQw#?vSEB9Gjuke%2r6=;nO8&m><k6FoWqo%X?IRjiqZWR#8i%Z^Uijrdv
z4}adLC&&iB?AV*|e`gOHxWlde<TBNP?8%3&?K<ifju(`7XI>8Mi6C96ugH4ijPOcy
zRca<VD}U$4h#acu+=6q(eiwI(V(AxjD>6=8bg$nXeI2-^x)^h+$vHlD0=MF#b7FR-
z0Cqifn%5OLoNy+z${aIV7haBdxAzmBuFTxwlF<aTB`g;klioj)euUYjfjqx*Z`nK5
zzQ)yjoSl?$zi0LXIM+b%t2sh=TW|GN-c|Ipa~!zeyXwjyp`Em8;CjYcdB?@~60L!B
z6HxH}dTluK>K(e+Srd)Vp3mBi6W9y)<9pBWb8YlJ(yW8U4j0m6+S@lHqW8<k_YYJ(
zUWj!R)z$w_<izWi-gAlxPN3_l1NWr+?aoHz0h#l-*hag$6u;p|h$7+It8f}!_%tCL
zCl66};VJVGNNX%|AmvSI?9CeK-N5U`-spCJiAFjnN-p4|x9!aa@Zqv|7m`Mx3!sZ(
z31X4?@~I*uPMpb%e4_(=y9#{YSo_q(_$UgvitK>iHol+}_@JWd{d@<lfK-I-%1@Zg
z|4pTz61~sY0k02%7@v#<KF|4wB=~V>`eRJ{+0S_!J7YLsJ(Fq-uoUn$KMCleLwJ+<
z`Ko^P@8@4k2n<$z@1<+q^Xc#L^9o(u`9-8^fQK|X_FT|JFG6b-@eE}*`vniqP6Xx-
zfb$c-7B>bz=m%5__>?t*D^x>nolrNMA<c81t%>0FtB@tqP*twbo<#RPXYfE`Xmdj-
z&P3=~q3Z;5*mR-GjB{8?V%Wl5(9&F3&{f!KW5BvVxP@x?)|DShZKl{5en94XbQNAN
z9dgF(da4>hfr7{i;V6i#MLOb-v(r6U<OY8vx}XP2ZPu9(2@!NdWpgjEBJqms9tlPT
ztDwfuNP?s&w16loY)4c!SAjH|P9};{EqYusnz_jab?kZjJ(@$!5~Vg{af#+jGU0WJ
zsf~{jA~!{4bE7U$*<52(HrED)kL?;tC&j+2kCopwcz68}%T5yaVP5YCS%@;Z>ZhbQ
zG)VyQ<zLNQA|_2uHA_`;G$XaYnz_%T;>`tPQQ6%856#@&H!z#s_YH#R_4D>kF0c8p
z$=}STxUi%a853fP0}P^4|7zwA66;^5PLRiEJx}BJ0g!X!U{wMZiqaqxf7#7e$<tBz
z*oIpA)@~XwGJUTp{a`-*=sNv`Jmah=9a}Nu!X@J>DdVQ;A>*zIfB{JTHRWsYOSp#|
z4J7+!;gsye-$(CbCXaO{mTY{uZXhwA2<{CCFWGCB92@V-?R5?=d2l8rMdm~Rz&8f>
zNpNNg8TMLyHs)0z^TMZ@b1b6ZmuwU{3XA~yJuKSoY}no-G1hE<g4`kAfN$ctqUe&O
zHxAE)GV5w`h2Xg|!H*S(Bxz>@i9Y(T(&oLY%^@7hOD24+oQ$ShED7Vvw^PZtHO|J$
z%IC|?h3w^98{}%R+VTozsot=<N<XrdeJyl@EgFoVf#7@G<ZDx4K^J)JA=xsR1<_ov
zpkhvR)PufQ^3x5LfOXzcPTsv@(Y{k5d?M@ZO_uS^16sOiex5oos<^;hmY|?ml0Uep
zq?tKH{ZWN!QKn*!8bwL$kb@9<u_s<3w?HAIO^FPo6!5i_`9q2LUdeoCi5H+~Xpc5#
zfnXX1n$2M*6_>ac+fdt-Wh9rZHgo2h68<zTERqG*sMBz%6K>z+qlmM$_yWPsQj5J(
zZR>(NUzOcrjAM%O!P$yG!4>cPN{whMO)e{BC@M?>DvdKMKMHx9tXAq`R%s1o|1qxW
zm#x|=tbz_#t?pFe4+p_ns!5^M)5g{P!HKMkuYt&FbU93HKn-^ZCd+2Rvl2-@jT&pN
znt-GltL7RJN(?cxMDZ4hw;G93Y!WhZiE{f7uM~t6->1A%VoUs}@k*I8QRP-#O{4nt
zVvWRY-8DtMzT1Z{8ujxw^~U>nrY-g5-|Ed4>%5xkpbQNH`}JD74IVNLI_M41YQQLY
zqqlIQ4p93lv%$ToF4Yv8lt<thLcfv>4ZFn+Y)J^FY-;3cI#O(Mb!l47Y~np_eCyrR
z0BGJoHo5FJ{m^ax32$~TYF<G$FRV5@VYkfCw&XE3D@inmF5=aiCDhB|G|CY*FEX|+
zLb{<i9U2Lp!Z?Gsuwl7`(Gb}9K5SArVcHEgvk04IOPDu<E#5+xZ{vSxz}EJmKT$3V
zwx)KCRukLSQtS4%$ab@)_N2x3mu3$nCoPb(Vd$@t_zR8ZE3?|0+a|QqT5xMK=0Pns
zRST584#&Oak$D|Hdn;jS9q~ac=|P=ORY&neN6krxAvv;b7>{lwjv=&_Qlx=gzKzYj
zf!ZAT^nY=7*KKY8{g&txBuIk0wODZ|*5VX*C{l`BON+Z}ad&rjcbDMq?pE9>4lR@Z
z_I=Nu*|X2N&YTC3zjJ-p=e^eJq{CyoD+|zFW8JNh+<p1f?Y7dreB2WZ?%ibUO_1%~
zGwV$^!v_kbD?IlqLIBsMwGW|<q~bknr9G-cjljG<<)OZ(oxYDK{Z~}|a?<^0U;Cwl
z`ww#aC5HNUcKSt82G*zsgro<Sz77Zk56t8a@D2@3><n<B3=UHba!L>Oe;s5C9_-2;
zWEmQ4-x*{?8ET{&qLUt~{W|m}c&H+Gh;nGCWM}9#%FA#b)i9~_aMsshBA!00PvU{}
zC6-#ap3N0ahE;A$dCsMkK11bvZ$^AkMl{^h=}N=v_$8(RS$@GI??|YUkCNKT<o3yv
z-vLJ76O1Kjj4GyL^=L;9KidV_B}Wbndz+7h2E)%X<^F^uFQ)ZVwTuCm#y<Cr<~)o_
zX@SntqG!T}^}meeH;;#xjpd<C++U9s5RH@Uj%1jOKQfUc3#9zf=Ap8gV5FZ6rJksk
zp4dq%FHN3E>z$~3m^8$JV5i67hL=+5#Dmhs(Z*6xPsJF?Qpqh?vE);euxB>DOmVgY
z3ER0|rO)W?1NKP=Zck>&^=A?&r^P(rCFE%l(qCpV=*Hh(O)IQTTcnLEl$U_zn@`>6
zjOu3zeP*-;;P}Fs1<2-&dz>`naYZfW88+v%;3v(?`7AxS1#G5+lc$T#=WJjz{^|1+
zWeaX&K)ZAt4zfi%j>TEKVl({(B=1oPiQr_yzgzpCFacfy@Y2;*W9Ew}0-wX$^)uzs
zBFGlA$9$5>67$EFjyL0{mX<4iFISPR)S#uq>jQ|H6I07UhjTKh`YRq9S&A0#+66p|
zh*rDN@M=v~KksA?!H&&5Rtkz&HGi#E(yz^U<dm7LY4)sE6tB&kt}KzMz#5$yhiiJd
zfWh*Vz2EOv(^HN;);rRdQ6JVXPS^GGUjT~&DcADvPvujd<lpZwr@WwTZpyF6^K1e#
z*0X~*pLI4fhc*#ds*_N*u+UR*(KjE;lL^*0F$5ie8ObCau%B!!6K+#hY~q}i{q{(v
zLFbx~-=10AW;xr8qu*i4*orpUv98^YDc<3*OcwmJ!<CvOe6~&ZCrP|xhjTqin&l@e
zONcznPpOWEd$eRFOD=wepUzKPK`y&)J-Y#iyLu5je)M~8vAf?a`_ut@J|=tKJ$qh<
zdsb(}A3gnTUvbYP$2oO~fhrQ+EV-@{;(rJh>QwA$VjigS9B8W_1XwDBtskIy9Vizc
z7*ZX6ls?q^dMFossF`~xJ#_ea=jBiW<;d**Ae`k$RQgEX_sA9faK!K^VEjm+_(+24
zm{<BZ#5JiE?XbZ!wkadOs$#EQAvU13q32bs@@VF8$I0mW$@rg>$ycY-f~R*&m;<^o
z4jr^1rOQa(i=PHgL0hM~)~A~hrYpK<zsb*rz0VFk&rSp}j{XRrD_~qI2>wDpKl40)
zz-M}_K)>-k_??0NQXvZLJfBm(kZbsY9La>*aIqPEj{b6i_WBY9?h;q;66eR|$1j(}
zotH!#m&<=H$zRixez+24xT1Mse3N-qQgg-hff<&6QV$!jf4rj8`vv<vSQ<Zl$9l0>
z_v_&7SLOOXcjXE?`E|7Jb#x2_pdfUr@bUC5Nz(t*b?AS`Km3D{GFLc;o4K96Ko#Ep
zt=PWn*Z=nvo(20SbpQX!Kb%oU9SjRi8vlC=Z_S6ob>ci1&*?A!0C0sV4}P#IJb<T!
zS$J%mJzNy*I`o}ad`2diKma8(KQ1zrlQE{C+&8fpb{z`4m#=7YEF#To?yzgEV+ktj
z?6;`u9v(?<9O&=DXKbIC9A)jBYaUuyTNfT*Zki&R-QL+?TG}sIJv_f)**eMpNw{}?
zb4h*t5P$XrhkC*~u|bb<4|zp;pPeZp0U(kwRKM7wbR)plY~!x>?FsjJp>!mDsGuAa
zB4jq^501$Th-5krvX{1lIe_-c3hKceMq^-BxBldZTH}&bk*$L`C`Yk!F18P^IH>-J
zDNluj$zhVSbiPEn5W8LmA7#E+tM&UD16$cl^|u|LUz)VcI+==VH2#c@mEpAtr|a=O
z3E8^Y?!Or#fZWBKT_1ndct6uzZjUe#gFWP$<+r>8-8B2<T>bVk()fPh6B6$qOjik{
z^(UuX9eI_1?T8rT>p4lPr`T9eOx-<OAAIxtoyh&-!nyC`tB>n$4?}xSnT0AG&33+r
zvtPB4g3~K*ou-6+F!WrX`^!Vx+(0Yszg%yV*0kyxbG$U`K9noJe))E{)tKaoaakDS
z{tK^<%omaPfWQa!@Ke_h?<u5gKT=JhY+?HBi|h~k`LXK~C<jvpwp4qyc<`4liBP!z
z{W>&)ZCMf;Le?OKp#{+&+=THDQBZ&wezRc^KK0Vic=e9Uybz_&T;Gscztiu<pg@-1
z1WMHSPGK5E9Pa7ECAk#%nPiBLqjRf2>}4nj@D#>DH0gvhWUfq#-fMk<?q(u+CIb^K
zUNIC4e`7~2a$gqbJuF!6H95>*PcNh`%=@#wUueur440kXa3qr)n!}J$LSuY%R37$8
z#=8tOPd{#I4hlZ5a&jIvEAjU6GK%-dUO9Rx9+;Lct?^|)KB>2%ZZWH$qTDZi54F{2
zZ0I>^v1r`#(2@@(43o7i?ayJfs9_I#JgZe44rMBMTjgq1Ty@lHRV0o4RGHn<&%kPO
zB-nG-tV--&m3qmtdR#}v#OK|P6NysZM=-+&X~ec(y^LSJMPi2?Cj*LmX-AAIx*7H6
zFW4~LHZ4aHhBfR4pWzJHCwx7gIXt<vzWR2GiQ->O{Q{Boj?07NS!acC%0xjhmNacb
zoodY%Oq{q{ws1m7_TEkUCB}}Knva!p89$#NIA%67*YMVgk%48@{)xkG{Y$93*n)Sc
z3fq>yY<TZ#FjdOi9VIgzgqi5fUz{(y8l`(k+sU1#H0x<xrrela0lH(``LzNK3_0qh
zEyb~o>&+HYSzZq(1&d^jr?nY>dPdqB*|{$&z#B*heFWh5S3`UeC_l$Gvfp1Hc3AeF
z%^}tB+=gpaNCQWmHu~o_1J9dZ7pGbw9UmH1KJQjrxjP=f&A#e<Z2Fq>)G%ARKJ%&J
zgOy1nvZxRc9yiJh#Cze58J2}WE7gUndErAing!yZqn*aH7D0L@UlJSquoZOyd)3!s
zc?{^rPnhIk3Cr&I6ogK+e4);1j|jFJ6ixN73KR;<xc8Cj^)9arl4?swi5(Pskgg0?
zG@ro8l@c%gS%t?}mV>`#Bd+oS!yEKZBnWP>`q?#YLcYs=73#kaep_-GJ|;v(y6=qk
z-nBd2esl-xL>-0y=rU4hb4LUqEyXrm9ToJ`mz?%5Mp}ayYTrvm>k=obd=>Mfnwo}d
zh)~}4DmM9&noiP$SSjWzu7>RmgW4g9YRy&ru+1AL4I*g?PTPdIvNw{}L$X*0HJI&?
zJtR+_AT89|s9sz@wn&sg!v??P$?GVlTo-Ahb%W&DwA^<N(PPGzwJd9Xdt8^;3I-84
zguDEEJSedWb_%uWe%eN)RVW`>hdJ19(sl(lgeKfS+hkfE6n@B+0w54xXCccMi4Y7=
z2Jl{IBe%o#f<k049wT3J2*-*f@V-ukyI$v#qZLa@%1p<kT<6ir7t5#(Pbaio=d*?v
z%Nfbcq%2<-aE}!$I1SHaJYE+Hp_M2G%FN~v-xNv7mnbI=&ld3B6f1_8d@B6U>(IvG
zxeC{tQhl^i^#Pgrnv|Qezt^D)!}AR-H|5shrP}*43oXkx70zR&x_8419gjDa|ACP%
zb`#%L1<99vAsAWg=e@0t3NJIHm0cRvysb$ZEBnqhvh+_tidJqcDZ4zKa$8p<Uv8>4
zvOM4NPe5vJB)hV_H{Q?`Zz3sf1_01)HbT)VtOI3Nw~6nX2IVVk6GyanS%h+`U*^(*
z00ydq?gls{K-v?wwf~x<W6N1Byc5OV+As@in-j8^gBn=(x}dSu^A{6(&9Sa<7(qRr
zv6V+V(%Kcn`;W70v97<L)PJ8jVcwxJJHopcU1D=rg9I-qNtw{bB-Fb@70->{hHXK5
z8a>0)D;@dFH*S>QcS1T;eO|k(0b-l*;9)4Oo?I}3sACsrKcYVc-wvtTmw`@3^GFYE
z6f{1^K{1xAK*kd_EZQZ)_bf~yneJhD@bi721SP`!)3!^*n}^W3g%aCAhMkl=BfPp-
zV#luEId{4TJuGTdH_G<N3+IOH#s?Djd3X826`j_7HJQJwzqJgzOct=)ylB~k9R$WT
zmj_yM#?6g>DU#5f?)T!*dK-Qyx8O3S(PvjETw_#y>oQAQeWivNeiV!AT9#(%@J^;(
zRbqsgHgeCj%qpBt#>`=%Z9br&5%om>j`%}7jdIP`D)>iYH-@_L{ThQRpD!P@NT)0r
zPyyB!EeKh%FR=@CU#&YWXLhi63Zz>;s$1G+Qi<5`02=SiSQHBlXwUFRLR|UCufMNg
zoQ~feLHyuc?pE4w#t~2@n5_MwD+~Z`XOEZmKrgOULJY29Am-+d-&5ok!GvW0kLeX^
zNtZR+O_@O*-`Bn$9-Q5Ty!+H5LZfG>w>3WBV4<?2rI66_lO#475C3ZlPxAF`JDHFd
z1NZMk#mJV~LInpJ%*`Y9iI(}s@tX>_-^cm`Ex>+-+nUthC&nM1G8H?LMDJry2OI1x
z_Z9A1R(_xTmx}Gb`G?n~D<4NGnhKw55DB4hDY6ecpv`|U(tlTM2cAJN{sD;rAQSP!
zY{-`xfIzxgL$dF1tnyJUEtmI4nuANB*7?$$Y|BmMo%sogfZNov;6&5w^0T#3w+E5Y
zI}H|3BbzFpEftN&+uM^%kF*cVIF1jTmV##4AHQsN&Oeg%|1oRq-1s?y|9pn`!3@g)
zcoo=qzfQ|^Lu(Cq0r~xY0T6n@asS0gbq4^~Tuu)J1YkN1v?OOtLT_wtZ`^<L4;1lU
z!n5!gMc%G~fOsw+YIPqP=fC_zKO!ImU;WRPon@B2dp$e{mnl24`a5n@6xeI-yc&<O
zFY|#fD<KlspxTEZQ(9U-(IjT!BsIxJQ}H0RkI4S=#%d~3{y!Z2%Nu+Jq|`Kn{3V+F
z&hY}i(CHrEcuU>*H%i!8<Oek3`&;b>SgHG4s0a800?pq9w)OkV?R|C~G;>b+`~x}2
zKIpS=Q=k#-b~K66U;T3+p}Duz=Sbw>aJtX2Qo%M&K_B{kJr06WiVQ>UgJUs+bsd5i
z5?=gb=t44}0ova})+9nScS9=GgEiiS);fP~ShR3==F*Q3ZA=O&LH=4NrP^U^S=6N3
zXAG;=sty@jRt<)A9e^k9KaCw&&MbbKJFsk}b5e{CpKl72-3{MZ44JxzEF=Z&-b2a=
zBMyxtsuv>$qLAv5BMB2>7+hqhz8(LY2)M#XzP`wZy+~ffs56=<9`UHX?@`?TQELTJ
zTzydsdr|KZqbF#h--$=}e~;$$k1o55xNky(1*8>O(HwozHL#d;37sxECQ~Se{aZ}q
zUJM&zYz<8;t9Wer_t>}ov5keQ<O4Aj*{aAFR518K!X*xtj>5{dTvxGfKp#%)7fSr>
z*g)EN4B>cY{{ZYS@#sdXTLA*vCYb6P&IX4VU!|SD(c3EWz?-;On$g2s451tGINLl}
zS`ooJ6mvTTqlxU}+0i?@EYZ6?z<Kjn`!2!xKR|vEIR_I(1_md2B;$pmIEQOQMkd3>
zCr2g*Cr1}srE0(>AA(~aoU&13GKVnIAMjxnTaua-O2w3S`ze*lDIe)m$pNWUCaI0m
zsX^JPXkDo}TdA+SQp;IWJSEc@=+j8O((?7wJO<L3i_=C>(wJz|-wLO<7^E*Or7WZ1
zE<V_;9j31mWhh;yPYY+@1JW}#)7%R)Uc54JHZ$U&8E&+hu|k=yMw#JWFPScdnV7)L
zU09rYm>CMqbe7EW)6a4W%&G)rp+mETQL-?Jkx@;Za5S0FU9-<)v-gT$kuqd$6=$<w
zW?v~~JJ9AN2<5CB<k$!1*g<pb_H%3jxy^5KMYD5my>k(2FiaM51s`*Ti1S2v^Tags
zBwX{POaYqoqVG|WI8A|Mu5QRsyUf|V_-YI#hWsqUd}puxF9)7Uz4@Q8Ff>wP;j8j!
zsS7r?^1l^%M&=cK<OP1yj5V^BwjM5UOma6S{@^52kh$m)J6m|cT3ExCe~T>X^N8-J
zS!C5xWO`Uwf?VJiS9G{pRO3_-Bv!nkU+mvfIG9_!4lNGjEzT)<NsQ8ra4nI{T1Lxv
zEzZ#7Ep<gJUoH+T5w9MG)bf_t+n0_+l_sW0wv|9Sj!Nus%eq<1>K-NfWx#_ar6zS{
zwUcF?nx)bR<u&Bxy`~cL#Nb7l(n?K^l@!#qqcSbrid5E$8B~eA5|o3K@`mM#DVGwV
zV5ES@3UcC-U%a>un&QVPC>O)74_D<^)0IgVl>o*nc(bZs!G#Y;c>y6+10q#XSyg3?
zm2%Y8o<h|CusGog60utq!BaKja1|O~?v17x*$5J)R`py<4H`q`o2MKgi5Pt=5(~J7
z)2$X)riSe)2V+I_T_}imq(%t0PKvdT1Y9S@m&3YJ%kKSB%w<?7SyhJzu2!O~mk_EK
z8_Cn;%jG|=JJ0<<=T|R2SucGoVknF79UQDjFJeN1VAdL_?N(Wa+R)72_~x<RQ40yh
ztC6v!(TxwuV<eRNx<LrD(d?j+XSvQ>7RfiXA&9TQce&{{zlm?SDK3>c0Ze4W0E}++
zPX*I@r8Zk$G%*`CeYj|rB5ZM*YDUj$;T>$T-)gB^F)83{$dql(gU#?BC+4=cHl`Ld
zKegtOwE6S3CAGHh&$Px!w<VjkS%$X7mbUqfv}N$L&z3f``LzftwkCnvU-!22U;?Dn
z{)LeqnROU`X)htd_&NZ9MCDy;b>6~E2k=YYuU5cmYy0#Q+UF6HUo;$NTB+xl&?+`4
zyE3%h1v=aE9(9#yQ%h(&6&`uj5goHDj;-rSrAt4rOQ8qaH6%-}%}J@9-t?*4sjJKV
zv9l_#+rF#&aHmTPp+}dZXH&FC)38UwyGQ@9yRx@u(y@C<y8Ab{**;W8WR+G7l0om@
zTL|tgtLv5C>Y2>#Q5Ea^Jkz^x(hK?0m&wpqn%5@)?1%dHeG=<$>hF7X)Q51=DeW#}
zN{aK{oX?n4+-?-xVU^bjBJPrAYTkxbkt+B@&h))~7eA()e;6gZ-{4l=paYI*L>S`7
z=e|?UAzFl?h`p?oGE6sfz9fizx||k$8l>+h&#;fmZ~`Q&sLZJ3x&LBm`1)cfk$%MF
z*D!c=xPUaHp^OKkEd_CMWE&HZ9j4VCM%TpD)n~3Xz;8Cx)`ei0jwl2GK;!1qr~px8
z%WY$;X=7hV{>woc`G0ee_CM)?s?WXl78}lg57LanysiJ4G|RJ<HkA9``7drWKBw!{
zwez1zGdCcvvEx7Vfb%!Aij{MxI`@C*0djk1KYu@0?|<k4KHq@o7=xgQf7-Yoqhd2+
z;#2?91M2CS#m?CUf9V0nqLR9AW!11YZVN|keW!k7D~uk1Jq1FC(YpI#^nfig%74-W
z^T<;$dce#ybnhpO9$-2+fzboiXIFpe0h;TF{~z>#N{RMRP5wwC>(}8l=~~#N8Moch
z>QL=}Ll4XpD(1?h%ltR=K-p5Q@l1)%zv+Q=*+y6!_dmGJ%8gDhc<?K^rmDa60Hf|`
zQ}xaOj2_64Yp(e(ZCv@5y2F{Gf7-b9#|u?oVe~+2!#{1@^|AjCZCnM1*LUacV`PLM
zJK7$89n6&KO?0$B-Cb<CA?f7<;D94n#|v)(UEZ|U8f-l;9#442<jin@3q3D&h}VWU
zri8K74~XtomLK7FV<fm=s?NS17^bi`uI_bXR-gc;)OH9pjWcD)YkX^pP|gr3iZGs0
z^_>VJ+n}##<X3dm0W>00TalDS+&^QGQiAfpyzKP5o?L>(B5^9;lQSbfALZsH=rimX
zCQ`c-?IqVYNzou94iZwPSW_a8r@YoD+E354mNo(jZyy>lh|5@0$9#uzn|^;zUA)r+
z--k%XhsZ#Sa^ozy=|Vg{mmKB>pJ^NvWW{8EPqa`VJ}TB1ddw>>YB=)G;QoGeRAzv1
z1kIoKkU6eE3k#+!Z5uB!^@7m@jAa``rYAMp_mAl>6{8@&636@wqSN{wUA2??HcHv_
znpImf#)>{+5|-L=na0!R>2aR5mJ{ORQ`^n{5zCg5WY|?aD!bZg2O#mF!uA3*deYWC
zXI9m|gI##uy}u3C?!uHzEw{o|b7$^urZ2OBVlNc*_q^s<J>=ym683^)YJ|}PtOHEH
zM*nq?7WQjMEh*M!Xd4}Z0Ym`^Nc*_2GxSYJ*fG}eB4V!9(ei&ZP?%C7VfLCnfp|I0
zXAzRq;hDOlHS}wB!VX`IaM;Uvezxd4u7It`oLH1+m{F#+)z})>0fqA85M6kMo3(e(
z7S3%xu`2i5u>gI*HY**vOH(*W?9~f`nVzS8r>9$o)!x)kW>;!=y(%8`gv<`6!|}nz
zmg59vHonu=Zp+b~roeVrjK;gOlCxfWmgn`XyK;WCuGc>pE?bk%p8Z@EBSe19SfT#r
zN56ozT}W5Fe&5Aez7D<nNkZ9tLlc(yCwnjQs`c_bH=_;xY~kGKxm>F92Ssr$^jtlv
z^QABNM_yDq5Tnr-j^#oQnH2Hym3q((bEPdVf+_-+a3@6hT+BK)73p1lm)yOTpJi#r
zy`p-DHs-iDlRMs%AfSg36{fBxWualPHTRxQDsm(AJ}=((NUohDzGI>c^=S&iVVDY%
zPBp+*s{_EPUxuiU=HNFD_OZOUUc&MgN<a`Y4Gl=d`=cQ_=yDb!$7&H=HEBT1xY$Fa
zsUJdZy7OkeiIU?_wy&MoE999;!4HRQfrhg&ub(!1g_Nz#8KFBt=u604TPD#q&e>FE
zSRGhW%3{V<UrFy5DOCn-Vmm_fD71u!u?*P3qGG#m3mn>2Q`n<5T=PkY=|?8SqXQb4
z#2GE9Q8{n13Dd8kwC}`*Bp@oHE!sWwkq;<fO{-)gQyQv_<ZR<Fz^GX{l`D}&p!pZ6
z)X+_uXwI$?Yd9JI3<wSVEIoylX1Uv*y%AwdvbVbga(YOXk>3fAzsXT7K0dDZ2MUBq
zF=Sj3ggId*3{7%PxY(EQvfkY|$|GM#<xgpyZMpn!ij?SW?2-DPi@fipz5QPmWqUgt
z$EF=B$A@&K?2;DK8JcFr?g7%?=TCE^Xn3dKBNupWnuw<w&t}b|W)K^fct$-U<trbC
z-P@N0+|$oJE6!nj-i;J(Em4)ZW-Z}e6I1`SGeaC#S7z>!BE{x9B1`k-2SCW{zvL~@
z7*(P`ekRtA<-mHD+;Yyv*Feo^2(v$Sxjo*VRw9B1A+AtOoV=Nmcq+<3$YDidS{Xe<
zYJP9be0VCEvXKre{3M()PFXrO<!$z&9%}+d0b;+op8ksR&(AW7>Bs4wt$~~4*!4~?
z*j}dLPnsy#4fvz+zIHPRYw!w*xC7r}%sBWa7T2p<tz#^WheExNDLHc;(Zp=Jv~-Y~
z)bN(b@?BgwwFyR@aJO`(ofE+u2RQ`tM>-ZB=cysj-3G15ysQYF;7!DZ#u&`c;y<)5
z^pp^srQjoCeYQonu~WGPsdvi!dgAntYVP15f5hPICH|oY*lv3RG$svJH3=&wwQY##
zPqtpeyQE*qpSq&7d6V)v3@{#4(+D!<VZJ8H5&29V?eY9&SC?o+I^ry$(ER7y3C_`V
zothw?&7WB!8i>l{2=Ok4-#GN}#tzA9(?-nq`QRzXlahW#9IfsTeCJ7YMdy6U1X~#M
zQ*lovV%mozj~(pux^|le;N&xsZOPUWPA5chhQA*(5h8QV&2scB(hxgRKE9u&k$0f_
z+@ABf)zzx%dyKs}5t8P<k^^)5jfsH3Pq|$B<|v3)l|Q2x5`cI5Do--i;&Bg`pKsP#
z1`0q(3NR_HTc)LhdOFR1dF+>7!DCgfN*r4g%DWFJ*{vsWUmN>GAhdLHR)@JEZwXg-
z_#gDZzb4JNxZ97LEpl}Afe-U{9Rq8Uh=9%iLJthI>jWYUx`IIJ&K+GIZ$jRZtWmH6
zI;cGBBra0dT3-R-zbpJgdB=yw)maZ9eo^p=yCZe@u_zhfhVl#jq~}1=Y2}s9`hG#C
z(4Nu{T&h{JYr)dQ1-^+EGWCkcT^G578ihts7K@{jNzSokLkp^6g{?#^8A$dedsWNp
zrXh6ejMeKY_P5U8c}LX*p@F3_etXiY-xp)He$&MYQ|*PDhYm07n<i0CsG1!hkHF_W
zEvUn=%CBR7*5@tBA1<}vKS{fuUGA^mI?m5*-V{CaqaSoUs@Z3_w`>R>)LK3fZwiL<
zRQep{>OMQ>J>83&^Wz(T{Ixeh2H$zEbMe6scvQ(xu;jFMo6q_jq@{QJ)%Opw(ni4U
zk4{|pw)jVS!Y8^>!C$xnFKByK(3i`F0pR++>7x;Rg1y`yE)RZMbNHqo1x7+Qv`A;P
zUVT;0?|VHxF})lmVX848HILy+LTfGXM->-DaZ~Ai9^gwZ@~)Z*7}*CG3ZPDW2ZSPH
zsT(s(!Gkb;^>YDlr$KkL-mL)NGh6`uqB)`SH?Dg)k)n@uO~{Oc&Mi^CuiyEGD*8&%
zeK4g3Di<m9ANWxQxtHss%NnbQH6bM#`J#wP(MZY57x|z#8%oo`nF0{CiUi=S{||1H
zFbE8g_Ob>bKoS0On~Oma+yDdIzinJSL%_ed%_f+*$rnI}^ZLMt7As`c7q~9`5)vH~
z0=q*iTMVhV52+#yg^iijsfWU#&8DQ#mZnhHm{~_tNYQ<0H+NX?fwRvWTi7Yuu(OS=
zYS`hdSMSfTcxw7dLc?k9@U4Bjg#+XzWTBP8@VQ0#jRU!@Aj2I(#a;D}`}bj&^$~3G
z5%9Ya=!lW}G?A*}kw)Jm_5C9S@+0pSBmOLEKR0~>qG-b(8X*?z0g|JvCc~8nqEJor
zF(34i=s)8uMd1y7CJ2rOqY!ol;h+~gkSu{HT##&}fd26@uxm8fm>J7M4D1^1$2)*{
z5#Adf$Ka^w$FE9iHn9%YF*sSVe24l%Te05(agCI5FDma;4dT9e#i3`t#Jy1QXl%t<
zCfX~Z81mEOedYlv(#OBx2z{E0|B)E0*B_@SoKXKIK~Ez7D@p?PK9cpJ7wT0sdv-z)
z0kWNRqSaEgdsQOXFG1EjQSTx?Y%k%XaMGLZ1YIXFUzDWEf<z{%IF9Tj9sQ&<nj{H>
z<Y?OD{D35xuH^Raq*xb#V={J5aB@CPf@E|`o`z`(5pKm{ayKYNoGsN0kjzvUUsIgg
zB$0|LmCWFs`eQSd4L6lvIL&s+u0bQNzc{>k$&SS~g*-dW<06f%H$~7O{YSFHpbO4w
zGty$S=vXt(7Cq9AhId3U&OQ;+VR6RzVdA!n^M*^}d2lS0-f`FD1?Ln6>8@FH#w6p#
zC9YD#t$PXU_X7z2QS@dB8|4TDeiVHo!ogSuVWDOnOJ@^kCOpu)B86b#4TDIAvjmE=
zuYxn8oK)VK<X{t})2A>vXe3jmB(gl__&;RhVC9&x=E}@wQD^6BKyzg{v+00&>g0J-
ziP_>IdFdLt?;k(08sw=#^8_?=WL<O49`e3VhS5;ue-_G@5%ZsQ!PM16)YlY4u@=^m
z$uB9+{}NSzK3sr!RG=&5&!klF$-2OGAKRH1(X~a?+O^PjIop02(YpoPg8}h}sc0Z?
zn(tAb{}Ez%NJ^w;S~M{z)-|8mv^en*G1(P6m>4mXSTwWcr9k~CGySO8U9)&3xg?;a
zq_8Bb;<3brxD=DOR9ms+4OYnq))J<?(htKW3&EvmfHJDCQo+qqI>Rzb?=pd`GOFG(
zimft!K=~``@;UmlwcyglN37WvcrYelo44YpX2qUs1xy(@YN<F`t~h(FxFD|FMJ-r6
z!rCaoB~7xZYAH61u5?naL@p_}W-WNxtlV#?MDoK2foTCFSa&J7;7}U0RxAuzFDk5R
zBlc=yrD{p<YJ;3=qONL*t!jO^8ghmzec>9-FEs=dHR9Pd8r?PcTQy?9S{2G#JmFeV
zgIZ;uTHNefk*->~?OL9Y8a;|SS&=$yV4bjcooLQW9adMJ&{mxYTs<a5{RiQC{x9_y
z-t~gn^?cp+=v(yyz=n5}4QRp*{00r2J`IrU2EMKartJnWu#uOdkx`@()u55byOBDl
z5v8k<d#jNOt_hi<iA%VN@=KGUX`OC%6LEJF$h+x1u$hRm8Bw_Tok269PcuSxGiO&b
z_I5Kou!V!71xus_&Y*?ey9G0+1=!WXw$*|J*9xF$Wfg7(eQAC1YJHpCirC%yCo1JK
zvBs0K?e}IY3$X3UyX_eY08{~{`Pyf-+UMQc7gO7pTia(wlr_5A9=F=4On{rIuVKSx
zxQZPk)*T0oz@t(KY}o7^47m*L`1J(7;d|-0(*i&6#XQM^f44@zl%fLNqv6v~5&5H$
zn7*E-B7#p)P$1D5{3uwXQ8-K}cxh1tq$ot%Q6%QbWTa8AwUH@KBB|t%-;_nth9S|L
zM>4u2F*8NJHAiAQiQv$-MGHgZG6%hDi{R4+3AjgmkOK+xM~L!+#Gk_@p9^^05oN=Q
z<;@X4LO{}O;VNY%N^*#5OvM^yeFH0fDph@TsQn+v`<rF@mGt}jLi)cw_nEK4n`-wh
z5Dr*D1}wD)c!dU>(*~T{2Dq{YJf8<VNC!CqgMQkBzV3r>^#@`4K=A4y6Lc_&bSRR4
zh@N~X!F?z`ZHUHe2<8r?J`YiCz6|B?4`*xtt*R8I4HvczlVuH8JP((Xjt~Pz>a<5{
z-A4%YM_SrOnpZ~-pGKf39o_t+ZTzD+)}w<bfZ?#wG4s(r$mj&q*wpICjQQAH*~miK
z*pmCm%E{Q8+{gyg_!jBNj`{fR$?$&J_+i`d@yYmU*zh^i#HIG|FY}2Trs2D?iHGN*
zr;~}_qeCxDlfd*Lc#BCyiy@@)Nfd!0@aZHP+7Jfw6xP}xj>QyS`5;006p_au$>|iC
z{NQWmX$rDIDvRkirvtR*)Aa2FjHlDg;RA1(XV`QGI4ow~jrAj1&sezw((Y%3$Yw<Z
zW>byxN8D!_gsY@Z;br742Ib{lWz#wLG3P$%%zgHlQ%|4!R~z^DoIct77lC<0o%!z`
z^SZxh`>ugM^X5O+*!dDJ*a|Gz>nu151kvnAnjv$G?$7J62Xs?;>?1D@{POA>1fW_k
zgtRY)tu1;Upe<wpAe#$ySpPQ(l=Z(x_5W3g{8s|??~9-RH~g{?@96KS{@+R@?Bd7X
z$;t2E_$56A42=7y5}A_vw-T9^or#JNRZz$d0;2uz_+>K+q^P5lwxs1h@XHF6eCXIX
z38eJz9^8CmTj0dX#MA-|zZ@D_-R*Gd-iG0qHEnwrQHQ73H`_namoJ}wIIZ6T;6J+!
zRFY@?fWu*+Zjj6D3bfy2PLqnp7Y-uakt!Rkrebs_dJ(M<KB%T1FsD>Wp)jf06^ml{
zYAZ}TmOqx*Zg@0X1M@z-?n%!`TYB}zGNrutsE6xNM)DL7-<iwcNlz51FX)sF;|<Q0
z>GyP<$h;qzsWR@$W*TYeU#hb%54Vt2LmX>zK4&f;A?RCZ^NL11l_m6>f(BJuFpm;0
zPxVG2;$SW})%bNrbDS@mEwO(e%d!|dmAkh%n8_hhq*<HiJX)xgs6BHfXgD3KJ@)Jv
zYn|I%{e*G%O4p3dx}YMMG1E2e&~mpooJ;M2)Ybm`%vYL5OAm|NsFh}?fj?{d7MBNW
zHY}Z$uC522OLjPaIs};xuhRV+C(>R17@b`%ti8Ctuu*>Uf{SPjdJlqZ{vUgA#0oTB
zroyB(dOinR1A(GcF~*?)WcMbq5QbaH4D#zf?r;FSA>a!-@-lZ;s1NjjikaKA_A46t
z4L7wr#~%YBI9bh}98t+-a>F<|&;wz@V3o6QJO>kWHwK7cyPH(AX^aqOyi5lmmuX1e
z1L&_q3(}}NijjPswq2;;9OfqrGj9(yq!5j;i9-`bASK4G0ozJDxkI?gk%-;}n{@fB
z;vtebY29Dwqj=4UOKdYF43CQY<TQi}QffkUOKiOuju|UDO!v#v_Y4>-D~gtSN}wGQ
z$0RoRt#s-9n5E_~#sdXi`?bn&Exxt0-|;Po=q!^@*~0d`P8)+Q-1_r=Iu4a7R(Y~o
zws<AG^;cdrupi}fv}svsUnN}r?3hy~^6dcR&Ycrp<B!Tz;MT1GyHJfBV6(rHt6o){
zLgs9raDGIe^yjdrz8&0^;p^(8R_kGf5Er_u41Bgfwymd{2qPF(&obj^I{p$OGQyYW
z$AOQB<Wbo}1R%4Q6xH&+nr6^iu`V-tLq0sGZsbuvP5Mq=d`eM|>1LM3S_cd8<$%Kr
zVB*4zxM-l4_7(hH#jk<LtkI%>z-Ges?VRzNj>I}Bkj-LatIS<w4F^R5v}Mp7?l&3~
zigPw$%_9hU`Kd2m;Wr*HyHs0o_T3Y-j~xnhI%o<Bt3(cao7YTO^mW$-`(tfI#CBDG
z#pH>>?5nv`$+C*pqOTt@i_TGi7y%cgKMbBPDH1Js*J0C}h#RxVS6s-W;GfR~leFT`
z7=ccDk=w8QUQgcZ#zoFP@F`Yw2qY$E;6LjOzTo^80IdC<H=uVkfO-J7UK2d;;{a~;
zUE!%?j!XQ6+~};q5O)oHTLNLP3l@_F675?`Nlq&VYmXr+JVXZdNU$k|?|Yjp4LRrT
zo3U_sro2FKEkHDJ@B*}2YLKsu)crf%(l5PM1l>Of9M*2>PvK6AtwQTB3Ka(c6}|p5
zfr8``4oLO0vP6@i^6&6E2Km2g_!;PE4aJjH0^|t`1C{voUzu=;uV`$Alqh8oUNm)5
z6)TaMxA~CB!wnFRUPAmJr092qZG!0Mkrrmkgp@=HoXS@&31PZ;0F<GRB2z(&Gb?l}
z66CDb*i0E>`N*o${*ozM@fyMT)GEd8n%`^UYM8cJjFv{|7i%C*y&)`oE@GO*zY-fc
zcM;I(Bg8ZfqD6Z0x;PJIOk})LwyM74RUJl4Om8L`N`3#7fHLwOUj_Am)R#BAdtAFE
z)~|GxhBc60?)w#XX2+}%r*E;OkE5_fHfQF0s)4b$qa5@%pY{Y|lRgHV&Aen118BMN
zp<WUH`^68nxRA(x<K+0eSulpUj94-urrkJshVOL&Jg1C`QvIhdZ%;+!ez4DERGb$!
zfEfq^j$(6&>&f270~NT6RWbw}45Y|1lpCS5soXauts@Kr4JG~+%Rfu?<<r#1B<Gou
z=H3{~A9Ljp`xZOSWZ_pGsUD)jxANAN*xqbv?k{|1YO8-^gH|>Sdg|=f-KwIIF8gBD
zy9nZ)M~z|*Hl$t2XTXJ4vZ8I7UO#^7=m6A-jHOXL4rz?2-hQ(eqtVxrg)a18)Tj<J
z&1lvEr-|q4SgP{LQmv8JKL51M&9|^9t@4V0Ulsr3<&@NF=reHR7PpC+TgZ-?S8+xD
zF4#rYQoY<701!h5B1l!bE{v?-w%oN}gjc%ngY}5}S^bIdD$T0(b$|ODw-QbUI+%p$
z5Ud)s{viuUWdF8-(0GIz$O`ZwYoi3136cEFyU1x!)J0qH@gQx22c{iw;VErlq90lX
z+kD$X*H7wYREQ;@Y1@8w5qga{XdMi0gBzA2>@WX@8zLR`m3&}PSC>vG&?&8Li&wu_
zavU+zEb9x>3O6Ee13MwQ`Oo%-!J!rg+c^2OpCgk=4QgjL2{(M-NSHL5$t{6#157*2
zkYqU34D%EX>!5eJOAsT4;|wi*<PUZYW2_f8FIlo9D}0@RzJSk6IaXOe`8kLOxRN;1
zt3yDtI8A-rL3LSE&~FmHiPI05H@Xww_E-WfC%G{>(rMd$xfWQ*`6sWVO$6X2WuY@i
zz7FV*Cr6^K22%q#4d|#k=F+LcQ)3y)QL2PcjAG58wmsqe^G0^oPN4<jamU}DYXaZE
zTgzm)jTljA@9f~cm-rHV9dmV9oiK#waX&X=)M@c(zXh(EXZQlcTHgWzn*h}~K+8yb
z06Z3{J}46o*3qycS$){L0p0AE$)9WWWCOnBWOTl)UD{KDckns5yNjzX)a=0U@R9nx
z(v3FmNK1w|LOeq!ItZ!9E|Ai#yYkDICj_sN`fawLs_}e}3qQWBT?0|qNNK!Z$05Jg
zidkH0=Bn&-u{?G(ULHn-Sq>_>x(+%8MCTCK>=Vq|H<0{Y7M|YQ9nlzU>&Nq=Ub8v%
zUZx=nc2=abkzbRirlT0&-4n!(?=^^eFP6^x<SwwRw|o#hF)1vG$M}ID)wyQ;jmE8s
zr_!(2Zsn^-V)ITu;3nwM1HLr7Es*)+X)6Xf5N@#j%xU6j{pmkP_3!?KXly<uy?9!I
zChs05BRj4O-+BPt1t}^qShqww+^08EB~Uv%glb-IkL0Z%F*eE_F9~~QwkzD$c04w<
z3n(!VJI)N|cFN3muD;;x`##+hFs(1(J#*=*0)7CSSW6cO5S#Qqd3h;D1OC^GAL1r&
z(jr)YQt+w}2d(IHbG$T?wGYVJhoQ-bY0-z}-iMXYmz~>}(HJ1i=}D}HPlb$rdiSQN
z{u7A9ORn12?wgjNpVlX9&ugeVyRhHFq;Hal%-Zh9M>R|Zx;GN{5>niVGDV`Q#+YhN
z>Ug`#6Z8J3<lK6M7zR>kipIbXgQ~pZcxF->Uy(l%%qc+by?s;zr5yrq;{wMKK2B0=
zIp_Pj27S;Nl+vO@{2nCX#}*hL6C_d_q%;|1b{!Px{K>sY)ss%i>s~?WBH$Zdpgb@*
zz5XTm>s;`$U$8e}h;NcY9=Bg|lV6OwLY%W?wG?gvGE4m+XX8CWLXcD$a)=^%h-G}J
zXmx1+WB{Ii*qvICVRjfsK!|yM$Tepe;6@HkJm^`BU|I??Dg_+BS08M`*(lO)Uwqej
zfY7BbzbK^y?9*8dQgX0~SdWbusE?4JjM%!4xGfC7LJpmj@~TBvy_dp*%ZikPMs8yI
z&>KW5J4WF|N6jNE{W*}Fl~Tu}S0QkbCVKcViKpp*9lS&rv_cov6Blp+h?b|01`9{4
z1O>Wx#WZ3@B(g^&ed8^i!{?O#etDqG;DP{oKr`MkLs$ywyAQeg6hWyTb+R9W3Vew*
zR0N2+pcx;8D=hs`nbc4C=BxYgw-Wh<C&5r7;k!%1H;s4(JJFk@cn~)t<{(=?S0Zc-
z&haqeE-MOiD)zM_A|xweu^%GQ9qTOZqX3@-1CxZCWBiAFGj1r5pz*B|Vvry=Czs@;
zAvY8#PLPJBtH~>$UJU8!<QA%UL^$UmBTwLgSiMsU$kx|QJh|clY;&kz!<O1{k=RO;
zlpUPfp_po2kks)2ro&IJrA_TQgh1&{GLzF>SW|Ep(#BmVOEg@}mr`beQ4s;D`N3&R
zLuez?Dvb~6t68a|(hQ-}8LpTa!6r^e50F0kWcX`=^C66r!{i$c%t@CQo$2IEU#PQO
zZ%W}_=5AH`)soe^bQYpbrVU31swU>%kVRW?ItD5Rq=iEvE&~r0`BK9Yr6n8FCYx^|
zlRO3aX~~LOGY6!cZts*1Uy`%el|C$z$x4hvsreRNGnW!8`#pTDZ*eZWP3}@mwh#jj
z*%3RZW*#3!9`s9!ObHI{kt_XU-tth+&0Y?%On#((7HVvs<`HQg{VSfwe9^AljqTia
z=>qw#JZF(SQ)1F6m#oO`d@D^n^WisNH47y|=ujt<loOJ@h>JRqur*2wp^8NgUM6o%
zi{!nF>^6(Sh>K%*i{mtl6I_dvQi@Yriqn>hGaiexh)Z&KOY$^dN(x*{ic(5ST1v{6
zOJLbk6>({ejCQSNX~Qy7lxwLqaWTjX(D7IbMFn*8mi20u^}Ci0rj!k9mhm9x!eau+
z2+OB=%SoKMnvcNl($t2i=2%j8ttsW6wdK~;$qqJ1o0>+N!{yRSG}I`OpGqpEumB5>
z;QbZ@J=Dq%!WA5cg&*lERA-`d;wpAft56*(;a4hN?(^=Ca2}Tvq)_s}Za8S6@ffAK
zSY|jlvPpPaxdg}9L?ie&M=GGFN{ehX2mk<%s$poYVOpty&FQm})Uub>09Y$$rmC4Q
ztIZ8+>7lh_-nBH@wP8oKP+;8~in^BJR}#lqQmJ(t)h~5qQ*{b%wMb^gVyPsGZrCcv
zDH>W>%B}U{TJ`#juXSXx^!OUelp5Z8H#}rFfNdJg&4?^ZF|A1&!`T{9lo}ni2%Q-*
zU0WMHrW%ESO-mF_fXhZdS%LsFjG)ve^XjIX$)*Td{3u4eSds>6w`LQ@h7`ueG}!mq
zQ*+ixV-8=7w^mDm7D4<9dQ55yUv<mLWJ?7jPE{#h?FeCgDSC}tD}8k99kkVNtMv=8
ztuVE@cLl$@6n~(!rKq({KDuqAs&(89bF!3h=Ba7St-TT!LdmwSuC&9(`)q+7+7un|
z!X2sx9kb-^2P0@ld}y!)YT}|}hrClxxYNhrrBlqia{#mR@d^BF2Kn>US%eAgV}&A^
zqk={;QBK<XSD+Nt&>k-+<|;CF85mc)E7ZEHHLHuVtE(xh3${^49)?DhhV_Ptm^KWH
zUYnE=g2il(_4XN)jg*8#u6@I;2awjos}1E}?LmF+5qd^`cY-bo!4M|}Q@Z!MMD^Zv
z_3m!=R#x>Y${{J2K~&q&)J{k=_&Y^b`~0f<UIY8b$otWR`V3D%-^2P%MnPt){T&zm
z*6ygb`~y*n1CA%iummcsYQVh=8J0j%Klk~BA$e;L`dAMJL6Bhyl;`AN#3&LhfpTRX
ziZdVdb00EI8%jCphb2&^`a@ZyFG#Qi%1Uv#U=;*Qpv<a<%hEuw1j-0=q(&PAOQ615
zk2H~jU<s7o<VeRVB9wGgi*>X&4e|SE#en;8X4|Ny{^+<i;t=Ur>T{)<>=++lZ1LHd
z;Z4yxe<Ett*f#(8PwnwN_wj?Y@uRl!lhyIF=W&>PdBs0*tvzw;K5?Hm@z^%;ygKpc
zc>+K-2`4a#pfd^bm_$yWL~WmhtWBb?K^DRWvE)r3`KL^JCh&jTK9Ry4#;I4or}`5M
zPvijbAQJoKafsq{14Y(BSrNTJp32c++~xEJ<@ERoCN<hyTKRF#@)?$paRHsT3a;bA
z?Qj1WjPs=1zCIciUwg^_&_2RaJ`Kk{+r&SkoKF6}e2Cj)&ZTCyW_4ETakdFEKaD@5
zDmVY$Zni#c)^mR@F>GG8XF8O0j?!oz(|qnIcFwSE?$_bGJ7l4fX5JsNSSC8>J2sb{
zGw(Axzqq%cBe&Q^vnVOI;P!1{By_<fe}QUr!MlD&6tWbKHjqV@mEh5q%bf8lrY|h~
zdqjCxp^j#ZJT%VYTfTf#Qn^7&d3##>*K+30%5tOX-<_Qv#`S1TJ!_gF^3c+D_x97a
z0gH6Z=T-C1tMwt2L1etmr!6DtUf`M4V#c*C{MCX|j7<Tz*|8FItO6al=@XA+o34HZ
zx3y*fz*uAB*5hU4-XnpbzPgujqiHir5woVrr{j+Y81M%H?iCZlc%0?H22^Xa!Fp36
zYEw$015+1_y^er8ZnEjNRTs4-SG7e@y9vMa;W@+~e|%GgeEWTI@hd?vc?SZM!uHyr
zB>H&kTNW@|1p-IL_L~kNT9yE^itRFjpXO3K*G)VU3W1`3b_nZ!Mj!0F)0O7(Y~^_c
z=F313SpTVlE~6^gs)i2Mh(OR<Z#VdZ`qdNRTSdFk8LEjTf|+N##X72$E`p6<yWKdd
zg93unS)0o`z)cXrqoeJ|tAl;eZsFjrwB=6k!M@llL|@M~f88I1#Ru&4;(BK-v41|E
z4ev$1+6)?h303Ym__PkY@i|0(bp%(oGUIoIQ*pFOw_d^Ms-qxSbtW(-(^ltsXcD`b
zA>Vc+4?%JQJm{SCd!Fbv`#f3j)d;Rv+7>EFm%}QNvk~5tGTzv+R7Bw=N-17)$Zf3=
zKWxi8yVi47bW0~a?Z*^44$r>rSCnpfrb#?>5)gbP{B_o{eAd`-_Vd^}7pd=Zd|5~P
zOfBTxvGjbX|C}o9qLRjsgY=@B=UhPhJl#VSl-UG%y@1-egdcS&kaDaKxja1_M3`Xc
zR7k@+x|Cr~xv;*Z$+{xizrrk_Vr97UXJ%)|Xu*BGWMYaA@dAtxUyFRW7Sp?y_;D=}
z2>`)b`)@XAc68A(5$M5H*EVWE){o2^5y*lxh0b5fg^;`~$Z~#keE6jI9e46t^y>QJ
z5TKMvuA&EmSRX54k7G>TqEN#Aemn&}mIC{4=(%)wCJ@<&-vqG0^O@XucCxAD6b<v-
z1_^Jt=^;99<dI{bz+E$2y(9&_HjjTnj?KJHu0#xeYoQl#mB{wkrhL!AYJIx)Sn=`*
zr+7+62v}dkz_tb;XT4Kbk!ag^>i8hRLGs*<QCl1i|9?^7Y;9No{|E2kYde1q%~E{F
z^o0S@_b=}ej{q`|`B$9#2Ga3AjZ{~82``kQx$^@><g<Urxh}{Oe)jNiX#X4({$03>
z34ycoe~*M56#E}>?%#vLJX8p^6tJMY0FYRX9avGH4Ob(S(g0hygYh0{z+#*PLX_@d
zw5n!N#<~$`(>P7S)b!Hw%4#MM^k!(SVQfxVYH_Dvc8?=D_2}~ISLX&l&h~Zg?y2zM
zW9H(G>?L|umoM@gERyKA6ttf34$pST()ztvh>l9DgEs5km}oD2ygtsC{bJE^G6~$l
zHTkl-w@m7&4>8Fy!560QtDIv+h0}$6V;&tLnTn|b@_S`N9P|O1lDRVBe#48Pl(*8n
z-@35B&6MMCDv-&3o{~gY*D*zGwLKiEG+*mL6Z_|&Fc&?BmDXaU-dxfi4~5`F322Q<
z_rDwz64m(R0)84^gkoE7V*2voue&Be_wf_`6OKb4IMte&CHa`;yBvaNg#~0cnUot(
z(Xx4l6=a^cP*#OJew`hxa0hIX1l}>7@gvx#4{NC*p{<nK9jypxS0?K?IAc!I%XFgr
zc@DVL5MbJ0e0FyYJXURR$^>?3J}h4%X}>u6dC=m1fwSG*&;z6-W`XYB#OX;t3D9-<
zq`yl_^(PVwn)D-3HKqt?H%TH5oWP<>@fM~C%0Z-NH==ZWtGT%)OfEsa?aMaJMdk8N
z!8%u%2fgmAkAUT;^#EaBR%#*fTf00jY2~_~!SaH|ALCBthV<gmb)>&0FrW@lDzbo3
zzKeW;liu?-I*R)qZbmu#-QB8zkXEJOoyNYf)1O4z6t|AK!W5vc!z>(x^XMQqN`m1q
zFYdGHVSZf58>4KNv4`zU5Nu1d$d!0M-z^J{nxVMNaoEH>a5}jN^sC;K(X-MO@3^qm
z(($;`YFB2lg07%sq6A6<&acYB8p(dCz9ug{sk^i`886-!=8LSGb!-i<pVKGFXt=UI
zK5ZWMIu2`Ei6)6`KIlIVZE3F3N^d=aGM;x-OfrVHk8klsbUfqphjdm0%+sK2oE))T
zm>+w}tj8l38QHOnM#0^Qbk8I`tK^EG%83(6Q3m{-%}EBA)AEakSVMi-DZWXlu|*1F
zsjiH$-K`FdO0WuD1@@7bsKAjwlwDH`kqAR4#jr1WXJNI?8(5s%j==b?*&MH5Ht<wx
zW?$}tQxPSv{C3&A@$`1ZdVu+E)n>sxYJp6M*|FE~+^ZJ>ve?em0`9|tU-Ug+<HCH4
zoZi%rLf21#?E0bOd|N@ylINwA%_QM&&){oB52=ywtGDZVX3+XWfzVfVn`N>2c1mR3
zuUZ=`kjfuUB@-_i;k|$9+MXqYe=r`^>1E|#mSOAh|H{qr6oHJ0eoXi!j*HoLqk<>c
zEJvt1;qhtlSn!WhG)Y7>XeD#Q;(_N`vE}KlLxwAOd*<~?=&$3A=xe^O!oaKjPPn-u
z4@CRHlV=GiLP?=?gdMp^)GcIlNx`Su1U8QtDC|Q1)>ENHA89O47(F721Ynqj{E?0V
zO&Q?LG#YRRcP{`m)%Riy+p5t<Zd*IV#62vfpwPeXf#gVe3Nmd|pV0PFaw-N-d+EKC
zL+<+wV0C#1HNb1{5rw|&T8D<IXYte__aE3#!C^7&(9sb_qhczBYw_kH79mUed-<Y|
z7eR537g6bNeIwk>#ZU*D283S8MX<Z%Qj95c67$xW3)20hg!dT)=h?)B1ZnHz1`pY%
zV+E(n`3dNHiEBu)$Ke%Ig8-N^K#2bTAnq@};(F9|TePZh*Wm6NAc9K)!Gb0v1P=-B
z?(XjH?pC<Fy9Rf62<~<2H|JdYtabOjZGXA#oIjwxj%uTi=j|OXpADY)OB1??<WAh9
zESPrjovb=yPr@JY0HHmTmzG6ec+Yh{ofk10-^M#{l*UE*>m)gSVV~r&G>MO%MDnT%
zSII@a1<Va<pR{iEFxzSkI#^J~F$re4)4uJq?<6TWb7!Si81K{c$soIDKvJvd==kD?
z6d5sV!}bK_g-&IL7*Jxf8Q&KuN1=R4{xb+oMk=Qjh7%tP@yW@eLeG|>ulgdGpqEWc
zo{IR=)aO?MpU$>QBW;VVoc!62^{?Ea!drD^&V&z~LNA+g=GfmdQy8+k*jUg4Kf~oe
zUKhxS8h=hs@d-ToW}uW_fKWM%Tv8Fqq2Rx*7|Hy#f}y+gCq}8HWx(u7ah;bDeV4|^
zls`IaRu$KwrN|fR1CGrMg-5f;DEGqyRX+ZZIlM9?Y>kCn4+Afh&d`4yaIWogE{g(n
z;SRrQn^dA@{pWyF9S9))69BWss?@x8SC-UH8t_#uEj6hS1%#VB8H{|`x4W)y)GxL0
z>{-?)*>C9VGuH}qP1(vA<r{~#?EyF?R*%&0niJJmH4<1u>yNmb=j{|sYBr01BhWXD
z(zB`#koE;H%K5U5AcAL1$u3G}zahmi#DjLU9{GFP!;4PgzwM>m8_>RgrGM*cdZ>MK
za3@PBd-03#MCQ5vpsQ$F!IPd04d7VUb>C%GPcyoi=j4O~N&t8(>gpKJ7WTsNS$}2=
zW59_tRUr+i!q#(B!ImBDKc%UPknP@1pH@`>w<ksgy2+xV(e`1g{xwu@4I_O2(4p{}
zA1M;I<Hi0ke9H7LE}x8ug|%l`=gcaB-a${e>u$uj|6SUWSrLx_(>M#xRf6^Gu74Nt
zgh|Gg<=`j*%zHlO#a#r=G8Z?35b+ZQDO^X)KQ9SMjg8C2*o83*amb1nPf$M96ui+Y
z5#1-8Q6;fY;#&>n%3M;+QK=JAZR1k3M44p`tt)fPGURteoky6vsWAR*s?qq^T|_Yh
zv7ItirX`(o)ON^{9Xt3z%04sQ{;8()<;1j*f7ySb-jt**UJ8zOdLzKQQBmBYFzJc#
zK;h1mK*+*$gk|ZHqPtmS<}9yunegwpqsGCQh3ggSItZz|-Ffjm<GF<psCcg(suij`
ze;>^&-q;%~e=(ud`g4WcI`p>M+TXJ^a#F~d86F#e(D=N|8Tp?^>hm6NWz(>1m6t$5
z+PnZGLR>yHMN=ElxzG2?=jY=wc!W<JhNkqGCy=37fLFUOCEYyhuXp2oR)1X7%YR?5
z@D0LK%O5iJZA!!1u6iQns6zB?$@$EopO3jZVa#=H(TK9<?)!=Ty!YHP*FEeJh!4x9
zZuw^=6$(I3<uzN;#+98~Os+06g82LC6%{c>d(I{B!CQPH{L{<G*ZgvByYdq*?bz;T
zQI>5dq6ba~#vZqg11NjUT#qYH?ZrikI_I8>&n4}zB~?G&|H24!ld1N@NTU0dH>*pg
z6!h^3v;F2<<jYwp4eb(-_DP$f$M;(9{05GWM<n6tqe|$@N#()CrXrM-q9b;wvg6gg
z(;gZi><I-7dL|mmpAmW?4g%|txK<p!(4~QQg_7IzUbw2HC`=rOJl;gSUQZu9i5I-y
zEU=R;cq1)1Z6<O(F#6!~x?5d)G9`JlFey_n_~6}pmsfkeJMh_Pkic>BWnywH9`FS_
zxrn{-6;1N~K=kI5svn-T51XCO=LO%Fc~Q1|Kc0J^S7onn(*9BlxZFwp-|xK|YJ9bc
z{DcRE2zdk4?myVo1eh%ZSlkC#5e1@H*-ZupI5_>cL7|hTC$gVCQIMZ%P=HeqEY9?w
zLE--~@1Yt}-~<hU)lvTsgTnjJPNJ}X28F6&usZ5LgTltJ(S<Nr*kckFNaYQO1ybjn
z!WUqAyT)*s-fj)1w<C&x>Fsu4dON2GnBMLPrng&&fa&cni2lFiJ^s^3<%@z>i-PIx
zkdvcOVT;_wC|Dg8n>ZSmFB)Ghn!q_4R!1diiY8l(hFxz`5y!ylsB~&E49+pI>&^c@
zD165k`#~)hR!8Mcj^%HPh3V~toyA2CHAI`NVerkyDNeeW8}of!Vb^D|F2~dXXdK~Y
z+&+DLg=jo10I0GUCxrv>ZH(vjif@BUFr!ZR2#nWT#4~unHM@>CW(J!c;=1i8SQ>-i
zy#P+hi7rivZi|T?4~bsHNiGkc?bVV3k|XS#lR}!3!WNSv9+IMnlVkXj<J6K9U^q89
zIi)E%Z816HAvudUC5I2TAWSK6PAN)GDQQY6TTH2VNP!TiR`aFSs-@ODr#2?1Ha|oM
zH>D;{rj8<{wezL@U`Qi1PK)<TBW?nrV*_07V1~Q&>0qRT{8%qN!HT>z++a}Rj&Mb7
zEUQ&|a2@MXQ`D-ne<yd$8>)=`*!11vsQp9mx^e7Du?X^I2JnIB?;%v-usHfS`O{=<
zI{Q#MAVt+LIc8HWYh|1HJ~;A;*yV*d8agC(<{X2iE^(z6b5s23ZYZ_RI$Qsn_CS*;
zYKSOkI2!&)mN+CD<+In0b2L@6A`WU4o{8cclW49b8CL#i(vsYW-Ka;k938qGRJB}w
z`y9079D}-C#KoM3zAU8VTx^NF2bmmO$6N&F{8Ps)_{Ci1o7@+oycQ{x_bw5zg1P_~
z0Anfab4Wp4Xa3zmo<+!S4wFdrW`}R6k%s(*TKNU0CSi^t&T=G?+WZCNM-jh=3v0g@
z%rzE<xV$q7N&1Ob6vAJ0pjs5!j2A`{9tVTEB+gqw#ThOt(Js)4bQslTiQu3rDf(Qn
zqYA{DH<{rpog#i?gc2dP#EAqcZCxt;2j`NM{Tt_YmpD9K6;>scu3%edR#~kLmMw3T
zfxr7~evg<g!I&K;m|O~9bkSkeFTazBSU>u`iR!q<Vs=Ac0W^r%RoCDDY`%40VMtKv
z=Tm-EqH{1De(hp(+su4lVqM)=K}i5vxTRSgu6!^dMQI6tK{bXB<DWG{zBg22%2tg@
zK$y6zKu=T{rQukv7C0>;J0VpQB~|ZLs$pI)%G7XbG)vlJ7Q`oW<j`s%?wVm0TK3Rz
z4m2w+(@!j}5T@#y`Gp$nyBbaW+7AM?+@^Y;Q=v5<O{=I(tN*any_Kz7S*le+43RXo
zlQsn_9y5rF)y^%{?PQf%{)pc#(pvDY&oA_r0~T&J0#pTl8Hw3cer^yOp=M;rvRDq`
zz%H$@vQt-X3~+4>G6f8>kZ3+OlrX^|QZ*h&#l>kf+2J*u5;c{7*6=%QtYm^i$ZAMs
z)w*PAf~RjtHf`RVZMrOK%5_z7DlK%QZZ0<|KDrmc%WC%4Ybh^nvFdF(EfTJHDq=lq
z>LzOL4Q=ix4Qn6CE*gpKX>q-3Y9)IkQ|t22pwL+<Jrk$x2T99fg70-KApeon8r&j*
z)at~*=ULOZqN_R^+CpfPKha{Q5rjMS3ED=r(I%_j(SjJz@2mLe$}7;*A+^-FdEDOA
z+uZKouAJZ6!_ZFK+os(A{ixLB&Q&`#1r5<G7ro5bHmXapsjGUj3m&<BnxSjOE(<P9
zYEU5m70u{GgB0~yaU8cJVz#y0wkwyRTUWHp>{oYEZ%+(jClOsI>Wz??nRH)jr~EPd
z4q8d%ZfER=BKA?)kLVI$LF|F7o=EZDn7y9*>OS*0pcjH9YNz^fi(UGsewnWNC%<lJ
zYM%*y-&aA&XG4IMW*-e)vo&|m8}Pty`ySr90dcm06o&rUt^S0<flE37onzmA-r%ZF
z?|v^~0GUEingNTMyn|d@gkU}m9JJdfOeT!%E9qp~X~U4X<j|$fuumc|yLH$^P?P$(
z_ZQrVMAQ)X@G#2U5QYB0m*8O{&XFGoLox3ist^V-m4-9q2CK4$6^}+ncZZ2{N7U$m
z{U_>Cnj_8ny+?XOe%MH@Zh5m|(w!&jnPh0oX_|x2BjaSFbb_Ou%Hy&w<AQo)!oFiO
z%A>cVW6>vK4JQT9njom)SUuT<CjF?4A<C&)k-J<cLH8)Cxypqp+_YTly&xn*eG+^K
zz!EB4bsN9}jd#+I$4UW_*o#Qzo!@BL9m~N{mruo<fH>M5EHv?ng_>!F>KoZa3!mZM
z3zZ0wQ^376C*x<cY8A7WLzQ@h3eaDss#|A2uy<JB@pwPau-Q$KLuRB`zss99{5(b0
z3j>M2{1MWcnG=|c@|u1t_oq$(*~A@QF};|p4QM!qgQ}zMwmR?Ou1@ka-u``_Jp9);
zHYQ>B28F^ulDj}F45pu~WWR*44K%EmTo;|G@zrI-JCqlFNf+s^N!3Yvo^cY{rxJuW
z7R`{B4D`ry%S8*qaZ}|x-()RSb}nJ<EFp<4o#8CgSeLF}EoA#FH|8v}cQ5a6E|XiA
za_B7QL&|^4GudhZDp%=-$8b8$f#dS1lWlMGTyb(w`3P)QNuyUKtExelt2kd)Ma9<e
zf33BAX;>?-+p1fJghPczd>Dh-D+{~UK5ngH0@pDit54t+cD)rNpOsDE1`0JyZ-=^i
zihm@8{rW<KE-d;GzQ8ZLj{KGpwVj;M0~_=0I_~&pj`{jr_<E-A+B4VYi_#_&?iM1~
z7TX!c+ciwiaq4%N*dN*($i~(w0=G`fw~R!$7!0=Rqqn!^cLZx{-9mRNvUjkmw;w0B
z6<)XRT($<>*A<gD(cduvN_SDlcTF^QKCU^cxZ-`yp!%kOrGi-}m%7JNwFjEsySmu>
z-Lh$;jccd9B&WbCxrWDMf$6@s?0Lp&_-gNpxhD3y9vH#<<E%<)Z9Uv#GtvWyMS+Ur
zu@l<97EiIASOH!2_Q3Pi#_-Qr$@W+ietVd%u$fu0T}-ha+)kc<hF;jdk=PDO#zakh
zdk{;pqmi+t^*Yt^iUQ%BzXLSjnzlD!Zppn}>n>+Oe5Jl#!5hO2ayS#!&Y;#A#~(Zc
z%%71hQeYXkz8Bi)OA$V$(LObKJ(Bg%mUxe(J(j@t<NVg+{650AZw-aw6#ak#n^K#6
zdkq6c$9-Lw7ZGyaUi-yF3pgc=rNee%q$`)F2Xub<^Uy+0$U%)9)kp#TOJxawtHdDY
z09}pG1y7#8SY7)4YJ%zQOvEA0qnAV?6WeBgu@ol}ML;N#mon*U#8Fo*^J)y>tMcIs
zQ1#!)5a?Kk?zO+Xv+%~X!&uSRi9+3*Qz!Oo#<nZY$*bJbOS9}70`@O5h1Y>dx1wyf
z{QkE@N;ig<S2CNowga~YWw+Q8cVGOk$j5H@Hf~g~?ik-(%Tn5Wpt>V)XHs1U8FWl~
ziSVr$-=VGFdwaqMblk@Lyi<~A3$DD6qWp|-j_wgTlXy;&E+X?uahex$f9rR*pZ$2*
z`$(tsuqpW1LH#sAhEuO73yE}a@zlul#L2dNz`cdbhkoOUekzE(7vFm<kb9cBy6>L&
zC6Xo7_fui~Cup!kg#kf#^rx!ZPuwn%r(Bg6=%-trsh4melY{lI^H^|;m3^lZl%q1Q
zn6=O+@Wty2K9sEbbp;;SFRy;ur)H@wZz5(*Cwuit*<N4c&VSwSz~rgl*1gi_9tqK3
zJcqMugFc=lpz_{NGJmE&?5nCl-7?$UFRQP8x;Bf$67!HXgT<Es=(w@VY6LOzmaB&+
z{6#ZftI^ea!L*bX5<RnCYJg~58XGPV6S7_FQ`X7#w=c8!<aM1ilTUKrC2+u0Z{RiJ
z)6w1Q{`jT+iLYxdXI;T?D7|5?A9<rtaPn~vq!RF!#-d;j<ytIa?yP3CY;SXgATarr
z`$x-fFu9?lsn8D>i%iPotAK(1!Git7-{a>H1D{rp?P1_2qhCKo13tadmx)5Mt7!?1
z&qPNXthV|ovA8Ud2e=lyBKP3=l^DO$M>*2-5vfvv_vBJOny>XHEAK002)VzOC4&!?
zawG!Zg16rNVn76d1pP_AAAKwNUatK;>ie-ug;tvf0;x*b9D@E>hD55$sd~NnJV?5P
z9t5C%fJcA>U;)@J01JTse$L;pG1darVT#a8PEHS~C@b=@WQEapjlbpR-^QVxIwOp1
z5vWMMHpWz($p7?Z{-N(|zdHZxoIiEqH)u*#40-K8eVO~#*R_LxkE#C^*A4)gnt{X6
zQG#P)|2?LTLFEmnMFN0QVD!D9uqXkPQAUIm{f|DeHXaSBoFOZx?jQOdT-wwd)ip3U
zl#19Zg@imjH9ZsGGnUamyR=+~I*J)KF9cZG-5Z+Ql33h7J&R8}qG~z6xlK8|6sf#>
zdG&0#cFwx1%n}uOfR91m_gd`=+-qe%q1z<x4ZX!xND~DR^heG@=`2RUn0YehBvLL;
zJAd;=bWv?M%_J}K$9^(@PuOs*DXjG3XP&*5x&AhuMNLMa<??x_pNt^+^OzleF;c#A
z&2L=38Dty`gwH1Au0<t(FjR+1<na~t!?I1cQ-n;t4Od!%z100fe;ls_qtD!uqYoYq
z5`IB>$|udq-5T&kN5VjJKKkj;#%lVCS0gsB>BiI2+S-tRFzgZ?Ap8<-r_@!3B1?e$
zM*U<ejIXm@D5+FXGS1o8PROR=qTL(|4a5GK=5Me=s;L6`HL=(6LXGMAcw5We`9@DD
zWu*|HGH?QcBr)PS)o-F{yN1Z>Rma6SVzK6yy+Z`+ar~hn11bPw0<U=^GZbyu7d*sj
zV!cW%fV{9*85Mk?$XSxW{}I>D2|@+K$Dv+0(`RFoC<SSIBIwWo;5dAuXg=ZA9sG_E
z?4`<e|Ld(!8v%BJ(0)RuJETJqC()zkA|X4}^^_Hc?~K*-!PXa5{%TAM)Y6XH71c;6
z-b46lAiW)J`qipH)VSZ+F!j|hSvGu}+IT+=;g9itiqmbbA*-9pfnl20EA2s+K7q?b
zb{SpBT8=6A(L`>P4YRSN<t<8a!Hd;Wact(CcrjzbQebgP-kR=FF}UDyyd=DqWw%tn
z-(;e!w%v%;JDY`{MY0o-bQ5yAF&qG`(79a7ue_lvHS-+J*e?5Fh57kZU{0I#XZ@a;
z27E2?=aJopGe6e1x;qKFZ^Kq!gHKvy`bWlEMYB>1n-!~<BU<j&^Ut}T`M+}H-Vv~w
zxql^aJ**<cIe{o3<<eD^;*0D3?W5I~lkXO}H)ZNnKy@1*pi-o}{6L4)WL1FCz_vaz
z-P`Ir6q}QlH@pWis}bgv%B{f^G~9U~1x}>Bo;<=YAD!Z%D?gg%;~pEEQTj>yk)QN@
zsVYHh|Mug%Z_7G2<*FS;H{6<u=_88+d0IV7@b&DQ%S*lNJgjy|x;z+8Jf)6)Zpzzt
z>*4U2qZ{w>D^53G>4nF(!bmrHp$e~K=%!=IrL|2QQ4<@^m05x9QwMEv!o7zx1r^O=
zW%FD7XfcVhd<oSP3LkoP0?1Dnj2<c8U04h!wzRg47&d)KBJB`Atz8)h*&a}P_1~^I
zp1TtfJ;s8srr|_i*ybvA0Jo1-+`<yOc(yP}Kq-gHQ)(Nf$m!rdGd0uw2<5}=o$o_m
zjt9HWPXJP`2r>?Y7*P%Zqy}k!Ww&C(aN9Ts<+a{<>ADm4$|8PbibT%&?ZXbxLH_ej
z4EO7y5W|PzSo}t@g4#*{t)OgX6>IwVZ;*hm#=o$viJC$<H-e<)a&Qv|dl~ru1}lA|
zNdzPJ=Bz{oZ4uEBFlKeLK-YFcG**=TYJ>1eT>jFEq34p&UiZBBfe$kcqy4IS-SyP;
zm)a^W_edKonQr$t0&ysp0!fDOJ*b+(hc1uCce-DEi8eemEbn{K!Js4E*O(-~2y)h;
za9M-PSP&N-V=hoeDaD2+oGkx?p!2ZG-mou1Rvt@y*XJKg)o(o0^f^tON3>nU;+o?S
zINW7MY4YAB)iCLEB`%_>(Yz<<(JT1i95rH?LX$ExT7c<gEHBHXoVtPE&DG+JVis_f
zMxUk2#v`NfISDWQLR0kPa&nMk|5XOV27?gXFGaUUW%%utLaO$M37_%KWYF$D0AqO4
z8S*|G<G@gyaTw_C5DU%1A2UJ$Ehz+>e8@feWF$rSI2EI<lQDN)B=ds>7;5u1pG}Kd
z>U;21($Xv(O+K@X<*;&`$~&OmR<RPEQJ27+U6FKKr`!bcOr8&Z0-yeoLORR0Oi)$v
zH&|Tz|5bhB(rta?Sh<Dc$nx6b?f<S%T-oElYnp_HSJ)NG{)@gZj8!-^jI5ry+_h|A
zR5}gFu3e_wwI0a-&oQ;^`s31F`~6s@$KA;K>*HMq02AVcB)0(~z3)U;fcOxOZXgQW
zcVS0B{21jnQ8n(niN+xTJfoYKrZtfi0p5SXWWQ-*8he=#4e@`BZV|NH_i-A~y#0#q
zw>=ur|IuhX+?oyU@FZz~RVNZ;fUY-#vIt;Aw0ZK-)Wg|`9Fl(p0|LqP@!7D4zxQ_{
zRHf~r`bCXsC3K<|lNn&mPLj%;abkCA?y^)j4QbQaCbL`h^IR>2I~4pSzY6;e9(EoN
z{B)H@z9B7K+BA7~_zublUD=ah<R32i@FBpE*%<9OX3DYsL(C@G=x5pc<ct8wM=q@`
zi-6{?9YOo9>6HbC5|Sz%Y8oM#F*OxJvrM12KY7hwc(i}YW>prvp=8Vg!clE33@X%D
zCyt#M2s|xLM%339%AXpSQiq{nICK$VdwoXDlF{&EDt}LS9AK9k3nKEWTt}EfG}2I8
z$<S|}e>ryO5RiFK97Wh6f38#4f_0}Ii@Fs)YPo%}4q&W4LVg{!Yr)<Gc-Hn%Sf5#p
zYxrVEI*kO#1KnLofiD!_`afbuRCA?eATn+Y0x2$6;+}S%?CxJx)&h$iQ1(D=P7g+F
zfYkR4>zko`gN{%I+sqE5jW>Z#!{GzAx%<fb$catoDHUuXSFKq5Kgj?1%b%b+3GR!}
zyG)59+NW>`*=kg}42`+li%O?k8+-m(T+Xm>>U&ZDIl<epDST^ctaD~Ah1@7KQ(e%|
z$}58<NWF&nv4m2a(o+%E*{(dRAZ$PH8g|{dd%dq=!%9|YK;1~M37k%Sy)IG|BE#hb
zjQl)tg+Mb13>2T1<}*+lCtzdh4!?2nwL2I1R~3H|^)0N&`$5I_%fyN2Jpt&y$JB~1
zM;g$_g^BiCLn*0e63?e7t)4qev;>CU*XM&f?YjAi*ISN*m&K{IAKj*ZhB9dYxLB6o
zPBT%V2=~U%)pg&V15t%&wBLU8D!{ht`tFHLgm!<Y^)&BQv*Ec~M}oV6@$f?n%ig=)
zN*6$+jy~vJd*MYvr-j4h(+2jQ)%Rw)M`LMp7_akYCqhR(P$$9md4GULN94;lh>>2U
z$%1Y75(T*U;U}3ywbvy&7!N1L#2S?&p6?}=ln;s_WCHO3m84O>^7>;=`gL6TNg%L{
zzVU0Dp;zNY)ksp)R)q!5{l@A7Hl_pKfV8X@-rDfePJ9o9vkm+d6R3Z{{Hut??mke_
zCg7ek=uJ-`&URohFH?Z@o1g=(5F%LFH8_GOr~x-v&o<a%P}8OHU2Kxz_)V}VUdXF5
zG&t3XF-e-ONL4V6H?UlqvA~Ea<shVFA$UY0MB#mC?AOrh`w%DI5WgUn(gn75Bmd5Y
z!0v^h2ISBYqu?>3FiYOBhp%BvHenInp}+6LiisE_gHViv)S4SVE-?jF1%*u&h0P3x
ztr>;yf_!C}fZNDCyZ4xA7v3p1pb0#TDP7L917CV%zlW)CzstxaC9jD-0OBIg4G|9U
zpeCFeHgMA8ANpQwh6ah6vWnbsP{CRBB_DKW#E#PFwPyJnO~vOO84%ed3P8mMz|Q&q
zcls{S1jrtMLrsn$;*CM$iJY$TmCknlluXE`Mu+DGjq%Eh6Qz!qPe#GQ6_INK1F_>A
z@#3YO<J0~|W#<A_4yCnZ2*sHbRAmw_jBI`l#al3A8xAD|bVi5uVA~JLd@IItHBR)7
zinoa+K8;H-{F~?{V^hH+5XAR6fZ2s)(U;;tK!Y!S{UVNZGU-Qf;`9|Lg-_PqImX)A
z+lN^wUQH&lm<;zKnNQW%_jf|BvvlzTN%W$ZQb2MaPO1@K;$vqD*<iBoBCy?9KAR7>
zC)g{0@uQ!!ea&HFvy5$wcdCkY+RkhmOI5-rzT_I)lt0eNvJYv<NNMfc$s5FSeN8yC
zDCu;)=}&s;wZMe(q13MA4D8(uQtxy!r_|&gXvPh5<`Fm(n?7ThIc--)ai0$d5MoLb
z415l@x(&`kC^7ak6huj}#wx+SFLqjTj+2-1nKlN(E2ZY%W~+#1{C3Xj*aTSUc!F=h
z7{h7WYH+N>p6pA>m`d5+j@k2^xo}S3*spRz0&`rubCH9-<K`sd45z(1zhz;`LHV9b
z8b~0s<iL+giwDjlM9%m0&Baj7f0@qXg9%?)u)r+d6d_CqUinN$dAjhK!N$m9sPHCB
zKI)IT${}9bC2+R<zV;y;kcWbpsKR$gc|QgUF25A;5f%E?6jB)%oeu#uQ({6w1awl8
z+|?OIP>SNHilnUa{f2Wy?b)MUV6RM2P<%=8Z&XW1)EL9hyvC2k5+u2iF1e*F#j+%z
zFq7hJex{(5r2Hjd(_=y6Bb{eS@tvV<7iv*N31(YKacncN(xfZ^QZ~j}GQ9+t`0O;q
zQr`1OGv-pB_6S;bDPJX_{_a#>00Gb?g9<|`W`+T}DGCsE9zc}GtxKf=Byt!VAcb9i
zrmk51`1y*3x15LRof8%c7_|LZ>8@1qmkSc946)=BCyIv9Kp^PLkQNqd>`**hRx6|@
z>EjR}QEC+iDMWIzD(|Yw1eXl^R~74*YKCP<13xayGCx}>19hl08C3-jT9Q3UCDBFA
zpV%7x>Y9XW;JX$Klq`V46SP)|wC<}w-8YRo71ugdjk>xN)Q>E+q~O{E-C8Z5+A}~6
zBc#^K766OOm@U^^Jk`Ty)HVVQcBBnP0vNN8a5}OgzenixmN5+kviF;rD<8s3ys8Bu
z4M?*M_^vqKvQ8STXfHwd0mt%qrf))6MZ=EiJY6v(O@Yy*XtAXD@fsMf(M^oCO)}F>
zdlyYyoQ?Tk8;e-QU$|NX@|wZj&AS&(Z?Kz-Ih%=eTfR6ok9)W9<+P;l0NX=RJ6ZX=
zOZ|H_sQaI221ja#Wy9+(TaAd?4!GKIzqT!Pw%|ir3nyC#d_(QB+wM2oa6qt0bvquo
zy+EhEG`BrUwWSXY%6t~uFh3H35ZrF~t7BuZ{k5v2bhcx1Ap#KA^k52k6WR%1%#bgO
zvUv{#xuJv=)?lpwFEvoFkKYlNp{|%x!mm&w%6-N*3q?H%!&>fiu<5Ri>+VR32xX$A
z*2JJ^qvT9OzhI4ANTtOSM0s-p<dN&*Bcl`uLl;`{7kTDH3&WRS>y=6)m2pFtUFpiZ
z=z6~D6~*a`iRzMS=_2#$%gyQo;q?9#?Ed<$FYHTS3ti7aWA}6tsWuzBnWpsbR-j%P
zib1O=o7})#GDZt@bOTv<*EAG&O)>j0WbqYXs3w7<8-edL+K-i9T%Z2#tbQHbAr-D6
ze&m70q_B@CP@Bjy<TOo5XThq#FqB}jkNKL&;iJGxIp@bvoM#fuQa6<HH1Qfi<f`X7
z?^cEkGl7!Skp#$y_RNUIK4rgIZ{14U`>D}5uTkv0QSXZpbdxbpK)>#C8x_@9EO_iP
zcWjxAdR<)z*$P1Zwc+1mYAb=!P*Tta8_Jd-&rTRN?(g!p$y&9ie~qc#>u%&muFZx<
zVkT7YXr9eriu?iOQ_7^#!PmbaV*VNkTU93PI>>6GoO4QFlvc}eocUo=muzYwXA;9}
zjB;|4%6OXbv;((nnr(HO?8TCkd<NyY!_zH~Fno#_os!BN8CAzs5~lAppLLYQ@J)o$
z(Ybr`VU*)?&fYpYC~QsR68-sHI{hVa+{EV(T+yGCqe>$7UhOe@g0VkdboPvre*_5~
zb{*_!-DkS!=4dzOT;^vTKyyC~=TS@N2#^4%JWOtFHXd!*vKU3{+zXWtGiJoI{9f}Y
zZyZWW77ABtHmDX)^{lj?;QTSZ1g?UD-Qz)23z%1nT#k#B0D@et>BE&p(RaWIAzw4C
zcV?i4K=}DYQpTR!S*F4zngIVscS#kDcSTxOo#vo&cAxyQg?{;YApVj-&5D})+%Vtr
zuk@Pj!o?<x<*|+B%Y+qH0Ktm<iu~5<AJo+W>QxEwYRLRbyX}f&@7mALbCEC5C4J`Q
zo^V3@M2QBBq~`FovUl^(QtK)#E5FrN`jyurH>X%P);=39J?R1<0ydbT#Mo;Vp)cS!
z?KaLDaOi7faazLo8GnLU;da{A<GU80-n*DPZlXqS?!d3(t!;WE<^LUCVi6_^W#2&k
zwH-1KZj^ziZYKs>2-0Wx@>DM~hiv>RpD#e!`OsV?O}(A_Y5Q;N4l~Mjl;Lhf?It|k
zF2?=l2c;b+uC3|Z-8}a#@u)?CaeTIl_}}B+niW{u+7hY?Tefd~cq{Pug>8f=_WD_N
zlK!q^JMOgS?uCTY@+klf+VN2pl3mw)?cZWKt_eG5?8UAXeLLGvd`qs=4i!ml-!&74
zi?qNqirC3jh?CXMu@K(gU)?HQi;J(o%p504t~k;^MRGqQ*swZI#W~1nKlTJ4)EpgH
zo?!(E3xp_~$gUkIL|7<U2)?zbu6v8wIlhgXv0D>Sl72?8=s}oGA+jobkS`2>k#=^}
zes;2UW_P>|nmXw{bJ&0VwapCtBYckY=kNm4^s?gI*Xp$U``JMjfYA8@S<xKcvhT)2
z9W9c3O9<yuP6R_y9RWOpQ;ChoA-5i(Ndz4g1Zh#8cM{?NUMf^+q20x;n#>%7td*MV
z9HShWnp~A#5v-S8W>*}cSJP;hPQ6!aa+d;7&5xA*Jc`$Rme=CvP)&*TF{z1bne%Je
zbxry6hWF=xzgXTVD&DBAH!4qPem}nviM$r#xYotG(XYJJz`E6%X!_x)`Rn}FbmG#y
zquJ6@)7tXR7VFABv&HeJrt|rotKyZrXRD{8rnlw2Z{&^f`DG~9oxfsRponHL$3tY~
zT{N^UmP0eX@*xrHK6$-8l~OaE<1tfF^XSxpnDTQyx)!xI6$<53b%z<2W#9a*X5p(P
zvE60hcR&*~Pp|ta?B?luC%0eXnXs<ZI{ax!Shl4jX{b+Xuu>LOsW~I^`A>)D{JAuH
z^Ydcei{$seHSt@p+AnRX)`sWzEkzH^s8{N^m$6;AGfJ@D8B}9>{rP(0eD@=C8VC&L
z{TF>-dqEQa4}E7x%J$ZEE-?LvzVEw2kq`}WrLqUb7~*9OW*+<`$>09^<I)GC@6_Ut
z2!SyA{-DRE)MV<g{8E7vE@ivwF|dC_@^J-<gdTRa#QH(-liVk+BRo4dzgn8Fd1bY&
zWvMkrVJFwmVKP*`bnG96zE8=y0?q9)(po1!<(Jpx@4Ee2Z3}68LBQ-E-DT$<kIu!@
zHn6Cm6^@7?u&=0Z4-oTB*z=HA>Bl6bBwRcbj?82DX=pj2qbHGger?~-;h2%nnR#xg
zJV2<l@$UQcGx^C!pl`c326@c8Af=p07pxj~ZMHYoTm7U%M8DyQtD__%=zjt5lfUXy
znE#b)4}1S>d?5a#`DbdB8Oq^QA$LjdLS>`AOo{Nf-BHR+JQ-5y!t`Gzcfb05G8XGg
zx$*g0(h_8XK*|j_Ur{a?B9U4TTCBd7EcPd@*I%|+ujud7h-23R|Gat?B8lUuwDiJ&
z>NPrEbTkB#(^e>Xb@~9}*?;z@snvkS(}g?{$<?oort<|j!0GBYCUfOlxso~?TFJ=&
zzd1hd@qakJafZ>-8xvS3-mJ>zUs_&4X#oV^f3&<9u=)IdNm1z0|5qm-;`B^U<^t=)
zk6ARJ0z`EcDwogyYeoN02FU}6Zt<@b{W~@!Yyban{D7c{f21f`h=7!TIDWAYN?JBd
z%UflM_W=pH1g7O}@hz){t?0WcVp{tL28#kkdSIRSh|y@9p+9r;o`JQKE30d!xeHs{
zTkY%n2Z!ACJEv#Odq<a7*K~d7_Yd()uueP_%p^A>1<|Qj0pPL35sqi|1lqZAX-HT7
z<}_}gGMODP$?1!vf_kqmOXHG?L{cl4oO}pTA4(j&FHe(+rDsm!b?hr0sxc&W;PcH{
zI;<)BLP6`#l23P4G*kFCk6!EZ8zto;)tUk$)w)v3VD+Am7q6*OH6ikW60N6SM~fAV
zi^J&}*}Ka%KMs%LM{eGJ&vAvTL^%4vtkV@V(9GV-Ww|w=kl(B)H_f#(qV)7N0GXg>
zKUbf}*1+qs#yB@rq9N3^`Q}SY$(5Red`rRJ!ZzmontUwhnGLct+J5rmU4?#6Y-yZX
zD~ZkSq~V%HhOFcDF+f~7kdW-(9DiNOrS-pSdACP06+7Brp6+4$<%y0CC=`Imv;p;k
zCotOh7svNO=RWw~q$vM`<8K8s6%=iSu+<-Ig>v>YZHN8O3{oT*k$ETT6M^wgv@}EU
z4lILoxD%@+$-Eo)O~rUOUe%y@H$l_ka5qsWfO#)TFTr>(*{Gm+FU73>a4*%WpLsvc
zZq9f=-D$6QKf~?za6i)vk>w!EkHF+0JBXp=ASaCbf2`<XS=YmYG>4<Z!mI$6qoTY7
zlcVCIf|8?>vihT=Qb<3`aarx0$#Hq(UdeGq>+R8T%<hYeHl+Iu%qBlTFyadu<vu=v
z)=WyWp4QH)n4Z=xNXml2!_8G%R48W4<qhi~T#M@MIi<IaaCt5L&ECjV6)i%YXlJe0
zM>^+iY+0$5C{NX_-W|{gY^&CL0<xa2JC?GyJ$txdNDl>=jkE8qY8YofyU_~g0F%=w
zM*~$T)ny-E;z{QaX{p(}5u6q>&?xQ53UG{YxfM9hew+q`jaJ=&leC4JoKs9_LcnPu
z*0y&uTmmm2W<Ar6Km6f)3bUW#wj{Tk*OpqT9R0;uZnLQA8+JQyQptY1Xpy@7_P69Y
zk>ipLmsjVS+uiBix);*h`wc%ri~G$W%C}WIjx}QhaKI01UI64-t+*Xa4ecrD!i!kM
z!w#I$_{{$I3HD|&Jgz9fVOFLv-m%AEOTrOEQJYVz?hfaz%BWL@z;5IIc;FwkhqtW&
z+Zy`TvmxI-!0E_@ck3~g#6;kUqNrut>8wWW3q=doN$lTsxb+vYb>EJA8=yS}tSwDd
zN$_lxO!4)obcWLN;P+u>AnYnB`1X0A4T6o0wVEw`zUBx%r0#^3aKu3(V(rMo9IQBT
zR8NRWU30(keQlGdBzTd<hSMu4sLZ^O-+b-DUy9I6gxf^j?c$??ar`XT&!~n)n9rLR
zp3m=xF-66?Df`bIxK60BrmDcSXFw;J(GA>PYjMW8O&=j*nxl+F5mu-$SJ1~P8nl*!
zK1P~ohTrhgZ$_MuuCl)bTo?TU&JFf+b1Tvt%LQT`BL^L}VMaiiXeh^=x(#>!lF5_h
zQDr5?h?n?Agv`Pblp;x!*l@-8U+AJ3an}Fhy(IJL)jJtijaGDli^*wSgF|~jQ`XLN
z=ho9<dG9=cLquiWIGX<!C(7%8b>d}4f0JA#^`(u<79fWTjmO}o&~*WPF0nvNv2>&G
zl1!Pz9A5);QuvDZKJvtjDbdBGCg|iLcLw8G@8zXI!1Vl2s<K!RJchGg6hYB0AM<fr
z?5XEYp`S5|Nhf&tug{F&wjpotguJW~!F;wiAt*dcvCx!P$ew^dwUqN${H&W%FL4>r
zR1DcH#`v=lGpNKn+9EG+!B0}`J3k7ZLuWpTH#6T)K49eZhgd8#CdsGlFYf$3g(CU+
zN<GO_)+Rf7!AZtnS+iy0Ht=cq-H$j?!TrSrpiqjYBk^ifoTB<{fc7c^fQb{Qir=pc
zi;I<XGG$J)EWRAys#J922)n7myTbl^pB7ivywAlSDv$4QI&h&OUD{a?cs?^x+|+=+
zcXRj=bpX8^YBe7v0*r*VGKO~=-eY^YHIMgZSYoW|a#7rs;^k6bFq;3&Wo*^qak2|5
zrDFZL^s1{bhqs{5T6Vl3pltuBVkOI^iG)8-J^*!>vayGK4kpNHnlP8LTjg3M`!?U~
z+i78T$h90~gWp<Ve(1FSMLTwmpe+HLLpc~G%4#QUkBhPtNNt|F+T!UrO0P6KCY^tJ
zO~iieWAqF^T8E?M?R?6&^yJvuI2Kdw!ZqOZXC+%h!?WwEHRlWjMsHvl^7fKaa0LrJ
zD`BVd^l{>Ng&E4hw7mEIyyI07j-%V;`+2?W!hb`(|7ryyXSGBqbw;YmeI;!9(M!))
zEfN=oN5!Kys2E@!Co_Y^($hQ4VQ(XsEr-h-sz{;jfs$m)vX>s?Olwdfl_FbhP*$&2
zYB?8_thN}$7n?V(+g9U#g&xg2(=$N|yoPEZXz7TF^iE!ZYbEj9en{T^>D0)$jFD*8
zcCK|CRe$?F=Bd@V+d-W?)4{fAQ_w_GnuI2fyDT3k)cA{O^ROJ|`vg(>ois4XSiZ+e
z@l3RdV5Ry*xpr?UCGPRyxJz}N!A*Hbnko0W`k%J`p~^p1W`Q44YbI{ZYNLhBKmJ%A
zpXYX{*G)5%uv?~D7dCHH7B~}Y5WqQqE8XfSaK1M8G<D}7-i}gjxqVC81m(8rT;{ZL
z$0ut>O0?+4s6Ms(AV`TdZ_(Q%@YjbZW#SBz8@)z0;<R3O^UL3lG~hFn=tPHw111MG
zH49%FWwKq<Mqc4}+Lz&(WC2x>rU4D8sI7MkSv`n>!<*yO$UiZ4eBVQQijewB5>M>_
zUS>p472-wlPX=k<TItJgz`G<^25G)qWKY$<{>LV=Rix`m;cF1dq>#XBqk#Ql&fVO#
zmI-V+zwuugq<`T3#C^ZO>))uz)*Z%kMuiMw70<$FjCbcw<At49ga?UlrWGEi9e*Xl
zIQ|Bp^Kq`_^#&3t1ezPbQ^3^$E)KVyRlV{0?@|=f^}9hi7{~8$Lny<##-sxO2xsy_
zAj^tn-qZtPL+tt$rdtT3gegn0WK*o5oeLVi-;@_tBGI#+$}xVDpmVx&qXGbiszbM%
zmKxB6J@9kRH+P`l5By(f&xD$<JZNtKUd5k05~XnV3x7|?a$+rjj`t-_e_*j)c;Koc
zT}r*%7x#qPc|J5?Kh1kPV9PUp1EBLNf`Z&%tp2GYQNIB(P5IC^0(R%IaCm*0nci|5
zfe49Yhz~GGoxI2hghh>HZwi&@?y;nUuzvCQe^d4UnTQA60P#vIgH(Z&hHzgFFxMHe
zcz}2?phr>VFS6?ecEtR(fT>%Aseg}am;@3JQjkE#u$0EMPQtWR#kF?=(J-ki@?yF2
zV!8)mdP?JZ2L(7L`65F6R;+@yqJs7zL8MbbJ2)QlM5;TC!4u%%1)bn^uV9jFXfX9f
z5KDYuHx=w1J7i5KB<%~xH%Qz6AYe(wH!%sX=m2QasHr9GHNFut2MArI3dNcV)iwfl
z7-^Z^`?G_?{^*3Qc!gnRhmmB3*!P80QH2kI!zXpZ5xv8SltRfILS2$VU#TJxL?g5p
z!k{-k=E&%4LFgOz=qE|`*#p7C_rX_8Xg5yicL(SXgE$mf;az><S=dqioKa&+Q4bpt
zxH=K~2L7-Wy$X^3Jz>bv0v2{K7A{I8VimyV$A4Dz)&l^<EFSb^v@TwBjwUorK6J_l
zOx$AI^Q@?`PVX-TzGIxR%}TM|R<UPZ;U6Z0NB6LViw!2FL1HM-*k;v`R%r^n8$*%<
z%`d@dAnZ7DH7v<R*ze=k`r|Z;QMH(3f68F}lEFMv1^h@hGAK6JCe~FZ4*lK)wB|Fm
zCDyfn!2LvwZk|j^(h1T-v2;gCQse^}K74m{4s$LB1{PZe6YF~t>qn}EM<)YgWvt@W
z3=-80l8GZygMsOXR+%V<*(ip&!IAmSz`|hb;$p+nV#9Kos7hmCRg-Ovno*saQNu%2
zlNzw4DYoswsN=z?%Q&`22H1CqDaeN|Z=7smoOryDhIf&6ik;rgnVzMV?$wkg5uA>j
zmA=!N-nEflf|8NsoX(paOz|sY+bg3pE2DNOBc};NFA0i=N)<NlY<H-W*&du(R-9>b
zpYh2s1rUM>3Q6mM0FD}yxH*&NqX6_w$!IQ^7$$n-S+Q<R89p+Ba7NCM<m`1wHvT?3
z;zo9S5P;<&hm$0i<8$^<76zU-?j<wkHO%C4WUcWrnvFk%h%fKcl5SX17HL%O0wlM3
zG8aBNVcZHJ%A!s{0{ZNNAxDCyP=clOh^|bcio%&gX_Y@0l@EdBKTPJcJmzcblM{uQ
zzIYXUJ-}e)|NR%tsi%%%@Q7;jh-q?!j-UiEEBQ*G&f}bd?s|mk&Ju9IS%mtgAi=h1
zFsdjUQe<_H!KPGr@sX5*s(1igoTXFjmV}vN0@bouDrPvs$O#Eb`ivHl^7*?-mQzZ}
zSSNa^dT=y><}Y<`){9Il5~&9MkSnE<F#8g!jpBYlNhWq#r8HJ=ii%?hXmA*9co<ov
zv#gIu$_KSz-VrnkNrX70kuB*@k_2;rb5&U?5TpIAcK{QQU($}?@O1##B)X%HmG>!?
zLxEY)iwdY-S?YC3&YMc-{SrTyY!R@~>ykJ8h&g^;DYOWLCh!}h6cdkB2EbZ%6XJud
zfkQYVHKlF~rh<s*=Mvx)(aDPVhagg-X}@{0^Mx-qnXK-LC(LTJKTD~eyQ+Q%u6)B#
zgMx<pAytgH#hG6~R*=*eQA4WA#o3bwT5B9%i)LM$H&Yb?sFR_uL-VeCRIU}=s2S0(
zlkhHYQZ8TPum0F#Gnk_me#p(;hx^S`LcPTSU&)>x|C^Po8aHXx8!o^Ms=(1KvW`Z@
z0%LZ_B!@?-w6|%wHJX@hD8C+>h~+V|CaFwhDYk>DL}&|g{D@RyDt54dY?xgQTT4|W
zzn2tF^F(bElYc#`e)W4C6?0ReSk}hyRN>6!3cRSMkkE#J<tE<RhJaG!l4Cz7*`|U}
z8L(;AA`*O`?3c1s<Yku6O~+UW*iEwoN<Um%Aj)mR^DUWxR`{JZ>&FJ(56y1NaK0Ln
zzmM@Ij=xU{{HQpVfRuWgEvwg!K#{jvgmy}$>;+o(k6Y@GKXuFEox7_2T}C`c6B`*R
zrSxvx6Yv;VMxHrt<Q@33(9*n=iu@$Y|59pqz|-|O(k6G+b!FAL;olzG)X5UsEa}}{
z&(u9F&~dHYaiXja2$OjjX`(}a&#+R`lG+1g>ZC;%K@h~_JkdcJMPy48z({M?uxrD4
z{v!MQLkOKqq)du<B}!tcPn%8GtEtOkvWwoWtGlzsI0V2p6!UJW--0X`J*w58p=UW&
zK&=c@`6TI#Sl@26%Vvf5R0Cfu4aJ)ocgdj@SG_Anw?~p|@C`yvKp5W15sIGMJ4dr1
z(?xMiuZlUPz#f5UWC$Qf5Y~y;94>JC$H`mLI$XB$kCV5!43LWsSQTxi-W*I+8tmvC
z8n5!5J0i(EL1|1=h-w|#kzwqS``*Wf)~cE788bRrJ6bh4I!G053mW@KKL!Dh4d{&7
z_>6ttjUI3tOK#0Pe;D0$%i2F-+>k?V9v$6&9y>e<{7c4oivHDAF7UuCeXDic-DV;*
zZ>+L&tbb$dR&XLjb;1fX`Ilz00zBEOGl>>H*>W)9);)P0H{sPdu~|G7HaK;<IAMT1
z{lGl^I696mA5YN6Nc4hqE;xqz!oW^0fJu&uU5-bmmBr9D#WXgdLp)>gZpQs$dKrDz
zoMv`jc_zzh<{}C@Q-9dWA~Y?uIwhb*tbmb5kskb`JWb6#WJHzmgV*d&{MsXQJRtVy
zr*6=OiQbU!982e{!wn;Ta`2=2yhC~A?{XwM6eekV9n_6E>FN24e8Ah$c~h-le(X%T
z@8@aj=l!P@1BDjo)R}zT)q>lY;<bJxjxmK{Xh&cye2rNYxtWilS)$xs$R}Sku3L<(
zUT`*(C=z0hBG=5r=u0YJqU>8r`n{Btx12n^$a1ro-o0%9Z8=M9MSEvC!)HY@ZzXkW
zsY`1i``t3?_vNfMhS7A<ae0<Sckr?nOQ)7p_ZZ76hDiSl%Wj)c6$a~Jo8Wpl%Ov~S
zbhz_`?=prSbhTl6E%R!vDrY^sXT2I`Jo&KJvbAnxyVm}DLmO`6!F;{DXQLK(9Zq<?
zLu~cYcl|79LlADWEoYOnXS1DVBU5|>VSAIrcLQH{3mtB2HD~Lod#jsflU8AqNOv>F
zckA8u)+}%v+70t(yMifp#DsS~DX_mSahCR|&a_^YS=&)~-BF_0{VKfsO?y|xV^=j}
zSG|2#b8T1qbytUC@3-)tp7x%B$DUEfo=N+j+1j4P>z)<GzK!s{o%X(i$G%g>zDxVQ
z+uFXz>%JGofsgQkpY}n3$3alWK}h=nED|5_dJsi%7$bZbr+t{<(I}=nl4#)#yy(k#
zJ<Re*)V&<oN$&Qkd|?Ml9L4)Y@ruu)cpP2Cc)aa7`gG+@MH}N7>qU=wjDF=_Qo&Rk
z@p0kmxO4oN<o(fu&#@PpWPSR2zsI|ZHI}ZkdVD6f848~ISJvTnq2>(M`L}$l7Od+L
zeAN}K+pm0!7Ocw(;9>>V{q~cm0~Xus6C>rb7x{Bjalx0>!|b*5*R^v;Ejb|AH4^v#
z8G-Zv2dnfC2>dUBGtBt$A6EHa0_T5>AOEn*lG6VvaBgn-xACL<-vZ~M;gL}otDJ;w
zj{on3*cwdWytTcvy9Z;HFoE;w87v_NW0n6T#2y}>{{NB?GbgZuyl3pn5T-qaC#fx(
z(nF15(HgET{$B|(Wsnr@$A#g#()miAo)B``dRRhC2TzAS<s;5ggVpwMI;jf#a(&>z
z(dtNIr5DhN@P-_g5K{%J!qL7PZTzcK7jng)AxB)XI_Sq@x+Zwbu_u})9=aBiw7)Ns
zt85wIwiJ0ZABP997(=Q*?aweiZW?Q`GG29ZK|3EIaZ2ADywT<sW^A%;YDyk(R(LT#
zY?+?<wr)}H<iNes6B+-~7Jh%Flba~z+wMNUemv2bx!&pe%yqrb(ZRt0b-Q_X-&}`!
znj$c5c%3a8W)UDC@htmje7Ilt#r{oA?fu5UI@=>yU$rlQ?DzgJJSqj=EqwalOk2TH
zd4trUij4<UVRXX>6kdUlk6@7C?ZNi{V3omi03;pGIBM?S2hu<|WNdvKv@)i}_ygu7
zT9ArO@Cpb~kjB9E2}2A&$?&(D0j+sXAT9Ox{@^qK+J~W_^nI-#$nn1}`7{$;QAsiq
z-O&3AvUS@J336AWc?NT$Fpmxr;=l43lJg^`7+X3W8F$6HyET)$1<x5DC8;;pv)BjO
zd_FAgjt*un9~^@H&zQP|m|E5oTprs_ot6ZY^q>-!K!z9?JE8fufF-ts{xvRh8}!NS
zqRRP80yC;r%tUkYngBGm+WeG}<wkS6lCyMYe&Z$U^QHc`WYcpaEL4x(4wa+`am$qr
z2YXx)6KKxVahFB&u$2)?rT0lsR=);mUz$YOMK2MYMmZ_DWdRrQa=^-k1%ooT4Kb+D
zZMk8t`D9^OtC97}YD62%;>7b_@;%YRt>D4H5{lNsgf{$W`4k5sI?{|Eb$DO55|4@0
zA9tBHgaOs{1Y29J<NTXh&A^v;Q+i4A^9$eN%Ig2vw6YT}f3Ib0Fz57jyVJ1a`E|86
ztS)%eN|t2~zhQKPAu$;=Z_-E@o|@l?_gTuL+BqTeBOes^o1q0WiU6@!=Rsbg#p7X7
zVa4N7S!%`3F=PPqY5LT>{nKK`@@*Y5990k^ur||BV83zSgBzs{>)!QZ3q#RwxnCgh
z4pE5yeEkxR|EJ&TROU#_xgj9)<&CG~`N|poiJ<q*!>{wqTTxDnS6e@iPGR@6eIzJW
z{KUlSHF4v*+oe?I%WjtK>oO*Qg9?0yZ6%DjBl;H?nd6IbmiMW1mMe`@C(73-b+S$>
zmk+8f^?&_bDf2RC=8%Nn2c5gCfPbNWcj_WY*z|ua6$2*mi2tU}3K&MC#A@mhCB@GQ
zyaEESD;azL)?oyn!DxfIG$I*+QlOF<7C?or`wAL`EhJIag;V21!Th^0bn7AK0wOK>
zR~iS-2tAS{b-tdfK3c%CRhF#j{lJA^G@?VRuKnmBm?fes1Y0kc3aP30_9IS!q9z?}
zA<-v7OltwpG*K%0<TM_F>KL9@J^OdezVbFUycxBf6b&;{G%S~KgEIOEDr)H}zc1q<
z_z`T(VA-Puo4CeNdP|2PF(s8RakJF==yJ?*%h<}GHn(w(SmIHG?!9EppaR>12QvL`
zujILJ7~KCCX>Y+4SEIIFw&3n=0fK7+!7UKnVt9~1a0m&(t#Nm2+}+*X-QC^YwTC?C
zmG7LYshO(pFZ8bJu3r1P*Q$ymv*hndU<VlSO1)JS4|tid6mIj+%}GBBz3~lC+~Gdp
zYjx7*Ou5IS7a`vrkpOX}US`tbvhH;<=6)6gAwj;<$&LkRaKRXRofQRw9eRV3KPS7q
zr^mwMNDXG=ib9WW7w@0}gg-+vpE>hrh*4yGF><qvASSK`rb_Ya6WPygdBlHYDU+`!
za$s<#u3j1l>2$wRiCK&VF&$}MmSTAyz4no^G~VY|`{o(6<`Y!ye<=3A&cv!R#q12A
z$iTtNL-@+%(#nre9TQ$?!gWB>#6(|p-db$gSwMCrE7k17mGc^(g%bHds<M2tL;zrJ
zzew`6R`F{w%)JnUHc+aoJff_a%UlDS^z+CxPGt?=k-kjB=ZSlqs@5;8cDqan!<N3~
znpNhioSI*!38t#Xy;!+_I57=vw^m1bWe9WtMwap~v%6tkz~6bE3+4OQg`Gth79AYl
zf<bl(?MK=AMx;xme`ffmh7N3Q`WH%KW)OCcHthz8mqQIzKc5tdIqUQ3Y(jB0H&}~*
zrsR*trB`N;pqsjyl<IuBw&R6;81@h^{dA7OTL6E&=k6B2nx&|QfIhwD>5Z%R3tp{(
zGDOVJDRQ~3xTf^z=)k)tel5e2H;+8oEI_YxT`#1T=QY7_h=8&l5R<!%+w~xLBYtCW
zxVA`STOrKp?Pj}JtX0*A^51;-ilLy}=Fa@zsE*DF1nk#c!SEM%<yX9nVRLaGn}?!i
zY`#BM&kbojZ_0$mjWgg8cPTZSMKCvP4!paQ1XDp^>4ZbOk^=W*VIh^7^a^{@h*Tr_
zT5Lq|flEX*U)~x%v&4%Z>?wVwo6I4%F_p70?Mc0_$`4^J&>VuQBJxakByks^>YJUe
zYc!fJS7|#ctmrJL&a@w+mOW{%u+s?4z5JW=N?={%7f)atr{k<rAUibcc)cLHTpd<)
zbW{t`>|f7*Q#bGwV?DsP^ym0p!_d0r!lF7#qTxx}PSGLnLN=OEpWVgrk*CN-!_spz
z9e`l?)JNcP4J)*^lV0&GKuHi#K2Y23S^1uh=yBC3k7wffJ0v3Eag#x*u3vTdJf>lB
z^LsW$uS1emMj8q(WeT6VgyjXs59%F$Levp&nC*oeKxkK&*l{Gl(m#V{iCMOVc!GKD
zGROM${+k5;*ZG!L2)au@G;%sY^}?|wIV^{fyZ}JsqD@5t+L4Klz#O))@kpD{v9(m-
zg1D`n^yMZ%f5b`sdbzB*C+UcvUa%W&#IJ!!^w<M4aGkN+{=;D*edr6eG*kSO;t4v9
zhxKn#syMVLi5~f--0TvoILZnNUv1HCEB5A9Pk(-Yl(y2pk7?+XCJneuTX|}AbaU!O
zb&Z{pqdFs9v)>pYPXL83o)i9ZKsI>3B@umk%yxTd6%hfafm^SIlu%NQQx0dNL|X@Y
zo@5&-o+zwbx94?`7i*TlJ2e7#N@sSk6B?l>JS&%bLe#rhd#V>(T$sS6kt6=8s~92#
zcNF&=kr$QswU?*E`VE9y8G={qRs?W<i|CH83;_A@;@8^b@VJ-l0L{x>gRMQFtB^-J
z5292LL$D`Q*X^w_h)m6iVix7e&WbDd?d#ijyijBzsJZwqEwVk26a(@QqEl(57Y#4)
z9TK;av7@NF`=O*aQJ9z7t!D+m!}>MA(B8)w>SJ2_zs8T>yuPNl;!Mf_G!B4ct*`T}
zuj{QZgvif>_aEcOu5WaVUtl)?jvggg4J}lfrVYzKLe2kw5@Lz7{>iugsYC(kyaAd2
zVf<)D<mYxL7ZUT27Y(G>4eWsg%7`P?+Xo7q(%MS{eE((qnDs4+{KxoV{OiT|f$Iw(
zN92Gj1rXW<%V7il!}zgK`)iwl7O3kh+6su3v@IKFqo?(b`79zhii;Ko_(sq8`;=A}
z=>rN!@VnL!rJInSR^IBDp<+~F{8C|-RN{z?a3~H|XeJ1(yI}?rp~AX=+uolM<AE4k
zfF}kSq`HtJHOs=a@UOaIiChsPSmC4ZUfdu+0>%g|^@#TFKMXQ_Z~J7_BO=LD!~3#B
zZLlJyJ0pZwBT}l#go)vqh!rLCz}LpGNFaQqS!v`@CV)FG>U%B+jdAp}SGW)$>V7hO
z3>2Z@udLJumS&WvH$gPIGcl<Hn>omSk$LlmF|^$)8ksRV(JS(HJvwDNQj{v@kIbt-
zqERyhvHTpd2ANSdr!k}1P)S-~kiUdY90G*V+)*aN<4>HPa=1M)RIU%`h5W&wF4T}X
zKASF%S2^x^A|^C1zNkB%XElClBQC`uwr&QHFc;y>=gNN(Th3_iaR<)g6M63d4ZHhO
zNgUP^ClDfoI1tCYqn0$yN88ayJftogb(a|9nP3<emr5OssQeqzDtR|9dA~0Ca4z}y
zF8P!=W!D72ze~~N5Vh>jyJ`YMm?I`hIEN>erqt~N_Ym{tm>@p&5yST2flR6DaeSo?
zh{*NCsPpjX`IO?i33?SNoP25VAJep~(vGnK5~*olH)3sGKqW9;lPcZ#6CAwhyS_X`
zCRt*Ze0a9`*J|Byzj2eeNWS<mBJep<Aale^Oeg*9NHbH;i2RkI&XKtu4v^MOXUxcy
zL&-D(WcfzGan8R*oJW-3CsGW6*C1h(70trKO>@P{uEoyOQ_fy^l_dl5MX^e<b<DAk
zrv;Wqi`0LyL_x69Apgyu^CidiD^j+aDS|r+v#f6BsUMPgKasv8eBeEqXFVFLG*Y-J
zQKTt+^gdZ^0CB=TsT&F`6^xS~&YABumdEIjUzwKg*_Qw1G_TJ+KLA+Z@~YsoXhGe1
zzP|=SBR^R+2~q7nVOD=?@jOXaJz+f)d>a#4M*!hKKH*S*RG%Zsge>6{3jD}C>DWBM
z96#a0J={`1=}J8Q8VY%jY1+&^@g51`#y;GZBk7JK-U$lf**x5ZDe09d-i;~w0ZIB1
zQ+|sq!UGEFlLj6vfZ(nl4)K8mnG_Gzi2%I;4zqv+`v4c$i~zp?jxd4b_kJ!#S=o=V
zGMUq|46*cnjnX>*^7QaBKCyBGy>cmK02?U@(*Q1Y12&Ib8j^DI*4^*-0+kY)mG2iS
zDDy*dIFsz&`~I^zmh)Asub_P8*&stAD@XbP>I6Ei82^}(Hd95=NhUAwlj{LTRIkc<
zrs}b*N`<}}2&z^>tU>)$U1?iw?36ogRFl$Oy)wpRX;!T*K>d5b^3MRZvzdau8J<Z(
zZQW)~G*PXcKy8d#ZINv)bhp;7vNouo1|zi^3BHaVR4YB;8nxgbQ&5}p;2-}WmWWCg
z%v|9dTb0gG7vWWx39a|=YRI0gM<FVWf#%@?>MdyNQ>5!%>go$}8yGtqigp_mks33J
z8q^IMi-{mva)0`rniyxrhX<PQ08MHPO%n%ooduA}g@E1$mj%>j9cWYLO!IL9aQ(q{
z^PqWB0OqzQ&?17|a&q4EH~<`6;0BPjk}J17o!2KZG&(UisD5ukAWJ0CZFooDg6#}>
z4rKl&SCtEGD>x_Iw{D{jYoRgnB?}6`)3PUEX@6}62)J$MAnSM|*ujNn64cvXXVsq8
z+scdPCG=u%ChL4J*eRjaDe2rPo!BYc*eSo*srcBbO!ngL==!47rQ+PBme{4y*rm1D
zrTy5YOV<5eu-ibZ+t9h&II-KbvD<vH+w!s7imd0w-uy?a$JY68Kg_YQ$9eH@KMX?F
z>mm5JALirS>zDYq9~QLO8}j(K9~L3l7p3*L9|leA3x2fUob5|~e6ct8|7DeHxd6@{
ze}q%RwFp3tU_G`p5HT!;t)u^IZU<Bvk2bge<o&>2MyE-^z*YNza$>(7&0sZ)e}%nc
zIU2W0e@ka!N|Dy9kwxBi=gtZ9)G>21O(OR)bHOQdk{)MD^It>B7ei}<lr2Gtb1dYW
zWJ2A7Eq#wp1CL40{Y^)O!z|7tC3VBlv=QXXq1@V`{h6WQJN8$N9q34dUFM@ep+=M@
z9zapRvw8gC?_qW95h}hBp~*q6H)9rfV;Q?+c5vgV4C6_CBaE*`1;s`$42A{zsW%=+
zZx;t*p~Kmd<FUr$=IUcy9%C#DW@Jy~{N#$fF4W>piXW0*NiB^t1jDeIz5zrmBG4?x
zUSUtX-5K9K92JY5JSdwK9hz`6%RNsFy&5FbCXZ53z&3h{Fd@e_bFpAkn8G}p{Fr2?
zMoz5Klwemx^v<P9E12*n`tOrP0^y=DYr;u(>{-pFY4Dnx>H|KX+$?@+cxVzuP8n|0
zw>j-sfXeW>_#u1{)eO4(fDgGt;?NA<>RieaAjgFy|7ou1iMXU_t}K|i;@eymIdRR?
zY+VsigG*HtIZ;bfLR&Cl$52&L(|khGVn6!);L>8@)8f##MT=jHddy4x3QOvGOYu2N
zQf*7w!Ak{4OOn8452@u3ddtJ_`wy3vkAr{lyk6!~L7@1<1cAT?BokKdn^qo|RwSJO
z=|Xc*I)tmDZ(a~+lrNy10d9Xt$544SejL%<eKoMAg}n%jeyodm+^Xlk{DU#M!>)xd
zY>m2lO>7IXV%AF!++IR9OgsGD2(Z=(Lc+taMX`iqKh~#f{^F**p>DJ$6t?k$V1vwZ
z&S?~vYS@li5&Ry*NI+QC9x}kB=nmE$Q)pIFdZu(<-FV%&N+Z0gN42rj!HD0wrDojj
zX$@9=CefCL|9;HkP>L&~_($#;WX7hf?n+}DwtlF(#rnLJ6}_Y5jcDlV$wRTJi-GXd
zmEKNyw+eAnK6zKCbeA`S6^CPoS$l`cYA0`O`?Kg?KXnQ7^1;scBt;O#?&Y^lowYR`
zjx{9bbYEA(N+i6*VMX9GC>4XrdUcmQx01+WC*l~sZkROD<={IP5URMv_0-R*e2~7j
zr=%>D-#piiA-&JDWze~vd=QAcdYA@0`p9vp{du4B&Z&frhm=J!D_9#4t1$6Q@w4?{
zjHaG~81T{Q<hI!-Y#3gk-N(T+C!CcN<#ZV?G#J6{6gBJ=rR5ZD<rD*UibZ*biU}aY
z`!|Mp_To+80RiA(qkS?3P5-sG^zc>*G0rbGf7x69D?;a*<ah#WO|_E7Lka24{A(>v
zdGRLnOPtC!rrQqu^(H9m%d;hn{Ij=gSTP2!L;8IF*;~%E{u7}y0RjHF{Ij<d_IhEM
z5x+xXVxe*I_>nJrOEVQ*+l0RilP|TPFzL77Ki&lDqMBNFpHhLU7jFWzuA|c|njo|7
zg<)!Ujf@(o(5nqi&&-OBEp(RH%)Ky7rp2w=hK(17NwIxg*mHP(ad2{-nvT<V`S?_M
z1E6=fkSbkmfgmBL4U~?&>@D?hWbyDq-;4VZy)}*N#UABy!GN)ulF59M>WQ>Opl0qX
z-$IY#2qyn6Q;{7E<=vnvec4+ECW;PiqW;}miikz#3%)Q+&rD@PS8Lg5+R0o2Rh1?F
z^Zlt%i4VWY1xA=vv<dq1kBr{!4^~;BR(Fxqur1Un`vz1E5E3m{xPW~h4hSr~n-H*3
zyCtE;DnS8+GiHf30Pb{F8na3Bus5sP#7aa|qVcVe@!Zb^+C%kK2Q#Jm1Ig$KKqHT2
z)C&VFsv8L)*#2H6KAP@itp#~jBKZru47e#y4lgw^`%kJI_xqM-r`DtL#b2`ULnrpP
zdu<bjg6z$;_ka3OphhWSj&k?BZ7LTv<Sm_WQ|eokFxk1_@(|-ObhQ*a5Yz0K{nOwM
z)%#X%-nE~{(Xp%EcnE&jzVv)Oif&YNaH*27e{+r6RfR#Rz0uxZuK)a5M6(tI{CZ0v
z!mG%G_x5aQmPYhih$~Y9Eq7x*9GJ9=6^Zm38N)-_w&(lXuOQkVyzdPiLPKgD?uKLL
z{xD_>eYm&I7BJAR*o+78IS?i;RL%`1{Bb3w5ptMT-}Z6Yh9<l3!=VHxmBAtBrb#&V
zVq|ntp`ay)&C~2;L~m2?v3xNMSdK<?nD5W7gfi|6=n^<GF=zIF-_JkJjKe4_sEkL+
zs%*B-<E?Z3e!y6JO>&Uzi7e1plGSKh$d~usa0pf&K~><FK1#=<SQRE6C{sEcUva>_
zgz@r3l6)GdaucAWy|uv%1(tk6-|yJS4%ya^8y9<-*qbdT6Od{iV=ju`0B@L4Tj6))
zSlW;a)=nsH-Zd&z1Yn1?b`cpBo^_Mi9iH`2nV|tdw6W&reGEB;=lv`-hv)sMNV?M<
zn##;&RWxX$Dy)K7R28aREAFR5Ac1}NVMF+hi@}5_xytBQR7cU{B0Bh&gxDfOhpD8x
zudcp+dD|p2t?}0El1E1z|J`T;+PCUrBmFSjPiC4${tG`d>Pr^|z!h8z(6FSMWiM?G
zJ7pVj8yjp7%#i%wgya}s)@4}PB!Kn;&#z&?@SCTB6<dK%t?BU{c<k^II}#4cF^C^U
z_mqLDV*9*B7+(%V)DWCLm3w{x9&yek;~v+YP<%OYra!Wq3eY^SKjVA#vv#K$vfQ{k
zDkUOtRi&m=cQLm?+XUa*K`W@(`Ecrd`|?{Ua8qeN!hd^M)6#UF@)jm^eU-8)ynmYD
z{b(uG^89Pl4VQsZc9<~o@=DhQAqolfI<+;D1B(u05(r1*7lzEA>Oo#dCHn^IiT)dl
ziURJHl!QGF&U&jCeWer%m?02|Q3BzVSbNH@7A)fi`S5Y|pq;4-Jq?Ari8c0MIY31y
zBbfd92O%i*?d>78rwF26-??ItswrTgV_%J^HH?PYPIh6=pySo_`9>msj`WXy`da$L
z3-*!~%4;F^gBcW|qXgXJ!ND`u8((wv<KB~;hxy58QWN&|O7cg9XHF#JnGm6prepfb
z)}<5T=@N)gV}w268hqiJgI9Fyii`wrVSk8|(S@Ef<$g(GLiX$YSYICb>v4k&tS+Vb
zydGUPutjf2+^=1I9$TA8i``%(p;7*Z0Yvqh5Yi{0mmL8u;G*Nos)IMB7>O_M%zj(t
zPi|@2mLTf?<H*pVLxW<1a5u`}9I7Tk&qf`{>A%gYggk5$P?0pkvLmcFH?mrG5ple@
zE$W#k@Ay)Vn<&rV3&c`7!=HpXBU(_=;RndOzKaUF;@S{;T|a8-`X%I5)`oOb`bY@Q
zWoErRBfBbpuRl&&I_Jk6F_`}-WIHqKRDN4f>|QxsGAipGIY?12{d3Uymkeb5TsdO?
zFHr<vv!selWLl6X^!h8ITvtDog*2w1+BVth_-3pzrY*(V7X@=@2LdxplY6XhU5DTp
z_}t>Zyege?BmAZ-$yxg`FXSrg$JM@iTl{q0_<9MsNxp81>}>A2O~D>oAv~f$d%L!6
zKApm$CL!re_wUQnFI5HNXDDM5s}p}*&_M>6xpP>*tG$!)mCW5a7W}1cE254Hf7k@7
zJLJdY7INpC$)IQy2fRzPf|2KFDaompQ_SS|b?yIFmj!_B|J|Fw`jeJ*Uu8E!r9K;7
zws-qq-UQ@cW~Y>ck==cp`k&6-KP^bL7BP5Q>xfQKewuYHQWFuPWK(<cl`r5oUbhwc
zl}hAG>mlm%c2s?{awm0O#VmQ>fxLDq!BpshnlOvYAn6wnzPU!&!P|*L@yl1vd_%F5
zm+Gw|QsC#+bqcBV9su(1C{y!InhpC7Ty4(C1bHOd74beG@f(x?`5$6xa};XR<53M{
ze(WtYgEyn+NVW3YBG5VVhdwrqnuTqp#yQQ~p^D_2$FlII!x0F^pMhNn+sqU(p51UX
ztXZOFMjVrRtWx9h<LsgFJ5dsqh-2|IU(r3;g0=C2{y!i2k4(5A_g~Uq<TP>?KA!`b
zri2(pL2Bs8s!k}=LS;lnluw&hYw`5(qgTa1y#x8DdU`bIRq2}Yp)5J+T)(z0X*_zK
z(aa`Xd(1US?hu2SjsWf4bakH766;TK%|(;d>a;-@%Re>oi?iQvYRIuH?Fs~x&k<~!
zx?E0#x15&yY;TC}lXBc@NSEMpBHO-2c)MT<tXXN)HfOL}_?5`4BkELljd+~}oj7`&
zkNs@p7yjw%H17#d1nIr|aPDuG2#zsuSls{Z0dZ>tbEc>cxO}%(al*1;R-G9(fsI=Q
zsNU~nDBlhFP?$wV67S*l)|D7FLz4wa_CI1eHs)#DWYiEJh$<0H=(7TINQn<rl^t8V
zg-t6Khz^H;3slZ3+9Iko4Oo>xCWAlNWh^%JIlz*pou=#(@SYA>RT@U?*y29+lDE0n
zv@X*O-F7Rjp0I~BZX#0d_iJi{ps>>IzMeZ(r{=TS>-t^I#LIEghszYq>U~PV`*xw_
z%aj|@AtTDwc^%#Jk`WiA_b|y7(&4KEAEEt>;Rg;9O5y-Qm9-jbCtMNOO)q=xxi{wh
zHvQTC?9Rh=-A}ud9jwQm*ymg86vz1is-wA`+xt45r{#%MqwSuX$GH_3*uw_k7Q4o6
zQ_7j%%e4a6?duyC{a-IrP_Z#W=gpb#HH5+lwLrk`YZNs?xLFZ=V|OH8TH;)H6b=ts
zH4i%bzXQwviO|tQ-NNDFFrm)ayLe5n#YiR{vFtqwwlVpjSmeD}xE$`vI3B;SjV`df
z$hqJMkvu^5o(a=haolj+L=a(V1B5m&Ag5Qoo%eaHw^W<=M+rEkTWV<rpFvR{*-CgL
zHENSwpZ->#@0IYnP{>CH-%C;7lT~kWfE!AzuOkDdGgMLo;-<#y_wJ*g)h7JUU8-NX
zepB9R->iIvaQq{9QG?VlTx);C@X|n`{$-{9i=+OGx-c(XoPZY}RAw!DwtWC)FU5<&
zID0fe(+iOi5rA46*f<;5{O{J{W+VWDXdsJT;OJ?<t5V8PuK%_c^Lh{Zp${|Y>ZJxR
z5QT7#26q91*X=`~q9L8SA(|>!t9~I}RXV4<p&O|o9jzgk&`?L+P~_~;=iXqOt56Ve
zC?9tif=rmaO&H3Z8n7-5qYn8INe`1RJPRwl1`>)F7yd>!ya*Cbau?3p8cu}}K|6;?
z?eP6|T*Sj{7}H$DQfCAkailAJ<Qw%!A*%>K!$^KcO|H5~;kt04yU6#%5n_B%lKvoG
z6C<g*DE6=@p6)2+JQzrEPk$IET4fLTnGc!5AsSa5#91Nr5}}g|d!?lwBXJv2rypZl
z7h^sbV|f>2MI8H^@1F>rL+pQ8i#_<DUN6>S2dH1%zgvs@qK!?!(R^`Sx&S1A=U;0v
zG2lO}#c6#;FV<p;j36j7Lhh_SP?Ro~IH6wE_KmRta%oVrXMz?-0uceA897mpDiNrX
z&>e@^ODx%6m$;IfU^AUCT8B6kC*J9hFtrDo=@T2NOVSQQTbdJDK~8p5cB7L_+9pm8
z<xCzGPdw;LCa6uo{*rt)hj^UFckKX6*<nmF&U`@{NO$V*=7>{6I8r4lQV<*w*JV<&
zGE!0ZHIOto03>M+q9}f9DP1OMwMf<&`P^9jX`uTw9^7>5eT`>iA$-U5IF7WbPpK>#
zC~T%IbR-#0qp6trhVSk{yLa!H>oX?ClWFH!Pmwc4Hq+qpGbEY7Z#5XX>obQV(~&PS
zlmk!{=IJ>!vOrv!1?QO>vTQ9qS;^~JI{C;#By3+avST4>9~iQIK4qHDb4kl)%97;p
zS!Id8&$eaCx!le+8c&$7%dvyxFoJSC>d{_Y?ZtJuLG!sm`2ZWo+?yJjuO{{pD74Xz
zd2fhwFH*hYO;Hl>^Zwr>bo>RCFA+M&g4+0k`uhL07XMd-uD)<^zHs=yaFpb4gl<x!
zXxg!8Hoj=SzG!j2X!*Wqm85u`zj#xlc-ygfH@<kkzW8vy`1ro~l%(XGzvNP*<i(rt
zvbVgiFL|6VdA=_Jkd}f3O5rq15u8eq5=v1T{#p{o_DZn=(UVEa@CKsLN&)$CWh4z{
zWD8{!4`n%d0FT?ExJY_rth{Co(CY<y@J4a4J_9{z{s0r@K{PXKLNT)@BmF`#lV(Nt
zI_(?M!q=zeIpr1mvXuoODlybTJ~?Jd0a&q+(_5Z_B57t8PSRp7&3B)jiWD?il?sYJ
z3h;^s7KtBJ;9OMAXjJW|SI*8?U3gTFl2kMCm)GZ41FfrmnbqLQ)>Q3R8wHkYFx6ml
zRrhFAi^0`&<=1F*RQK%HIC$1F9soj^tDOV$0}goY9}3hTbT!QiA{zw4Gz&Ze^}Ngq
zd=~W6m<wVDgo6(13<GuZ8uBw143ZM^3kJmE4)PNYjH~4GQxYV~nDZ+J8m7uBw;k#m
z2pVG@8(@8Wx%UmFsI@+E@Ero?O`2KUH}zTBjqU@Dd+K$M$W6J-ue%$dwp7iH$jz&J
zO_c@BQ*{8)3<8iU*LB|nB-(N|07JNG$hp!qc`(a)IxvQj<^Y|I!G+oIT1JRk*~p8A
zsE=9b@`ji%_Z5pjaJ91V<$n;OWf3nLkTzzLn;TG?XTDn0r$NhnZLUw>n8En?o!LBt
z)%-g<SqA5$-rK=+?jSuLK@7N50M)}k43n%Am5Oo83CQ=TD=_$4Mvw|+H9@Kos6eJG
z7nFBY!{T!f|M^k!t2z34Sr^KAr*~wY2%uYUvTH~**I}M6mJ`m93>lfD^MzsN+;xXR
zx(7<#>!`amw4%&NY&|zIjbt-P>)~y+ezczY)4TVyoOV5e^0cjb8?R9V9;vXY`^Z3P
z-GO~SVtUJnn77*c$l75&8dUw3+kGrq7!PUPe<Hfx>-G=&^t%sYgvfJc$~OrC27Z=C
ziz)XpQDYX8F<j4e^QI11whnOJ_6@dUI6n4zYjwN6e7ujO`DBA(>-}|PL-8C#6F|zL
zM2;{rxNbp<ax(nA(;@VXzIPnMF)G8doEW<-oSBJ3(;rY5wJ2vw`w!7x&o&OvCnDd-
zzxs?bqGUY~wGVoDG&x37Sk)bBe>2!}2SQG=L=7hY@n%f>&B(LXNCnm?U&IIoI_nb|
zn8*d8_Yq8?K&vf38jm|ns^EWJIC%OUoh2#ba~tUOlVudk#N9X=H@X0c!Z<7lnepj$
za1imUCpMbk32_$~@`qr$e&vCm2BZ3dAii%1^haQ&V5a`C$w$zb!6Q&r0YQBUtcl*=
zdOC51J1IXjR&F&taER&|q$_7JrC@<<B{U(JF^#=B&dM<jRvi=BLUle$l4JovmH<DB
zzz$0jSrM}Z?bEhL(`BQxxSlBYT1GZUK>wy$KHa&o*4|pRSs95bY}PKjBcxPx^mL)z
zu%}UT=Xv7MIS*EfGSPWG+PTD}`QXy|k<t0Jy{Ybsxr(8Mpw)#gz@iq_ROR*zmFR*%
zQhzpN0W*8JOJUAgR!q=kuJ3$)KYd{aeS*AcDeb98HOR8_r8)bp6K!<)_-Xl+eC1qd
z<?`D<5xR?Dz~<1rq3qH-!+C?lC5?<lMTS)!@`X6lRSEG`vDFm?gysFDmhRH*cJvRO
zMXPc<f*6X1!@-?6#RzD};Q2sH)K(x78|SNK@PmROvhF&iHd1Wq`nPv2xlijxVe9-<
z8(*f^_14zjSt9TzgZY;YxQc=F%N$}MVDaGu#3O(dn{80_W~KTR?&&5C;f9DMg5WZi
zO0(_D@Y0}lLlR@#AZ(L|YU>@{_8R)Op(WV(`MYTd@Z0cj9mVZm#~TLA+uWzydwc5!
z%K%43u=BH?oh8sZgxy^j?5SAqn!IC!vF)u5^ewgyP2TcOhL3z^^JfDG4%d-!tglzY
z_BcoPN}VQpkJ_T2H^MEcLe)&uF~FG=x&_B9ImPXHmKz0%O;v0iHP7o6u0##R9Zey)
zzvO$mEf4*l4ibzuN}fSwY*<?2r~qApenm(2<wLg9!ziqy3XUV~k4Fd*zvqX=W|u)5
zu04xvsLQVSs~Cqn%OYFDpc7%F99+}`4E&?!!!yzoW{wlQ@Z)R6BeU$K2jRnP@M)ga
ziA?y3$*W^f&k57&Nj>B=H}&*<D&!URp$yy^Bh?v1`2?B$lx1|k+7g)phDfDzMm+)|
zp%f<z1<_+7GP<D<VB(>zpklCFu#12=VF+)3qHw3+@{C}yQi=(%gM?CW@RZIjm`9Ri
zT2>L1sN^s&6=0r}mzN9_SAl|8Sy-2y7+`JBD`m@bmaeOW)hkZUO9|-N_meFH5oyB`
zWMfQR(@<-R&|M7})vpv}>rfn<72pR<At_3b9VMbuD6)$i4(oG>-p`id&$m3u6dw!4
z{8zAnRtbDRTlJa{!!S47IPZj%@5s(>C`HdnG4HW;u5(Mk=_1(3kUO}N)^e9LoYA`<
zVN3-&;360$d*^jIJAbv#wyzs<!%u2e4)7!g;O=$I;L77L?D5lT?zkK0hh-#`RL-8{
zr!>a$3e0@C)WBY%=k<|5fb#RU+w-o@^CHE+QQ&{K=l=KAy-r!2!T(TT)(qR?p4;OW
z3Vb?4N@DHt-xRo9?7!M|M~(%+j$h6!5ib;&<kF&H<;9*`jLzY>T_qf~@}TPC=0Wi1
zpCzj;2E4mxC}Bw0%aWDI|Ahi4e9?<ZNlhb)NH<A*S+eRRXGLZfxs{Yk=2ul$1y+QD
zk^gDe{m+uM4}e(jRx>spS64p5We5gMEG}sRg2QJjm$$aH3O9`5krsANCIATT)B7x^
zw<mkoQb%{NDgwVe<<J!&2vXKuoBpV8wHFpQvf66lT9_ZvXI2!Wk3AhhR4{b+10vc?
z8Tkk4VcnhM%mJSBFZcE`){3%mtn#-nSNDOU$nd{hcV+(IgVQ*K3BGCkSQmX!T*`Ju
zpqe71%I3U*kEPH3imcJ`PS?AmKsM%kPJhNtw8DHI&w}ObUCf@6$8YgTZznEx-$EyU
z#ll@X3EjM}sQMNT_IuJ@j->3t2ZTiid7Q5>o3yw9Ywi5R)@+V5g;Qf69^NAa)#rR3
zBG<V2g3g^_JSR~X;CTeFQ<(qF`moH;?rGxMp#%CU$8$H{fEU8^$MtvJ*Xc<IjBS@!
zPSOX`WllSH&<C$G;<f?2kma+_7e_StCq(?uljDm=^oc7U8(rf|+HO{0B9B7)3lP&^
zUa?w8+n-Z~4!PAPHM(71zY@gEpIG$HY(o5^O_m(F#{KMlJ8l~vr#9?YAC<c<w}pTG
zork3wXDz7Cp_eLTe3D4kMNrmzB}8m~U7vxCz~K{wib;JS+>>mV)(}O~cOoiZRHiRj
z?OI}ufn1tL68J4WeT$YfMh5TCOP<<4J~6Rwz{1K@>Z7KODRmB&%(la)Ad1x0ZEV-?
z<vSEw1hUB?<Y>xYX#Tfd2Q_re1H+A~FY$^pF>Q)Y^U6jkC*j!alDGua(<THHc<1NP
z6~#*y6xU}aAZA~4733pi$1(pZzwDnVsSu($EVboybcdC3zZ!@v(qHXA^taRSk1piR
zif3V&)|SIfowH(&teKdvEvz*S4**tj$vkK>ACx<#_zJZ?L^N`JB$WVG&I?2Xkc?AH
z<Q|z+QQ|<92#~hze6QoibdJSSZA>GpQyJujO?E5-okx}K6G{2;&L=jOH{Dn%^A@dC
zF7loIHsOzjedK9{R$W}7i{&Nk-~sEA?{kes13T@B$^8<(KmNdzCQP2?i1QRpkMtls
z9fhixU2(yG^yRWClDBKZpB^(!vYawh^0RF;{XA&15Yp82bCIz^fycp?Cg^6^`sC=x
z3K{I^*PO@9<rSQsC)c%|A3X-m+9y&)o7D)VVoumF!Jc#Na$G`XEnKkCrTt*IFU9yS
zMpVeyo}6c~qhw(N1@<9P-=TPKh36N69drj*K8D5=A_%CLzU1+Ikmuy_VpNL#=|Wcj
zQeYfMm0f3_4LP-e61XW@Hyabl`Vg^lg8jUjpzl_Gjg^%mezr8w(tYn-gZXFty*@_j
zlWA+pdiPH4x!AEY-5G@<94{Lvei)J~t}BhlfQw*SY;Zh4{CM3Vbjhmhd_O<}tCkdO
z18|@dOh$us5Zh+&P9*3h#8F_C?F&^LcI5K9Xd@irV^dhvwF}8`V(-PGFRg4u<fXAT
zVmpwJ!_cHIzu{n)OJHDd(tMzm!876c0D*nMex>9Ed=gX>!}@OJHg}+d{0+C8#(d22
z+hY$Qa9olw=%X*C!3yyQs3eZ-dWhnn{_{1o8oT(&`wDjxAg<OcOz}H-K5qkSnJD}q
z?aamW@dbs>iAuH)h5hz4P$-|pmVMtD;oO-?$qJOFmi>g3Esw-Rn%6I78WEh>xH|M^
zwhrB+%)fXr3q{C*M|m4P+<+^c*v>%)-7q3LfhB_?E>6~{xE!abbDh}}OU`TXJTe4r
zi<O2^o&;y&XE$6T158zsGP%NP?~&}y8N-m+r^uM;%GX@K)JHzx;3QVz?FjeHjVL}>
zK-UDf`SoTMX`3s4pOG!|O4TV){lSG%tw<P);`4vBCHN96WoF2p;y+}}WF7yiXj{6Z
z?scT;uQ<l89oZ}OPcttiSKgsKMZ5lq<onAUQS^LemwpIbE1qfVTffsmo{?pTw=cCK
z8h6Ovq_Y8D67p9gsRBpY+;#DMjC3Z|m0w@&4ZkL%k~2#-p<tG-XQVUsW@`+6RPjsx
znhs7n_)IC=?DvMd$kAKs+k@jwizRod$BzSn#ei33)bA()gb?*tfT}pXS7qZw=D;V%
z*6i;wr136PMl`!Gw@2^Fx1oi8WM=akUNPPoHm`IwQPrC*V`$;k_JN4-Z{{QLtG3iI
zbDU+QB%`Kl^6f1oeER>f=ZeFoeDJdW+H+%(qsiNTggc>Zz2B_=YtQX+`n>yM&wXEo
zZ8xy?%@!E~*dA-Mohk6Y4mfB!8)^gYE}%bXqqf`?wYlDDE_mXgw*s}1-BF#D3SRNH
z397YvWUT2J3K6w)yeuF61lD-J*sBqCpQ56bu3_Y?chsSj`F#`pj++7MD*kj9plJm_
zZm`GYAczh!8U&$R-*&G6ER$^q^|3EgyF?WwLhwIqQtM=aq!r7hy|i-Z1n&B9bIYP~
z%ohUH@A_#^&ti5;H{ZJu57O5{fCQ)djInb{Mv~U4<!BI2CuqM_Kt-Z>>JNd2wIOkz
zlVl?*LlGyvUv#BOu%=7FT`nc6ejki-`1Um88<hGnNGTwbCfIunKXv@3i7Wf9g1fMF
z{e-;=Zidv8`}>r7l)|^IA6QvTRWwzG%w4$)d0HXrIknT(bX8!kLNlgPMNrebg?!H=
z;OCV4SsV_?M{+cC!-m$Wa39-B7mICE&4=mG;)@Dq33mg^*@cyD&+M)w3oK}Y;eg_e
zWx2V&I1LGS{8+tlYY1rmb8g~xyE=bt=qJl(-60Fhqb8}dW1pjj)eE}nq$(G8ANKfF
zELHc4NcmsfN}9TuBee*RN9!R4>Z^(<b-h*i7PjEI&2Cnn{=m%h=$^+_Hg-N#7L4yf
z3yZ5A#Wln3u;<;-iTfR{7YC`{GNQUK$sS8DxZPLS$Y<p71GleZ!mj)k!D-`yhEn}#
zEQO~tjQ>!E{mese8JN>EyJO6An>{md?LhOePuR~tKg40TIo$--p|oGrQT7Uc5Zb?e
z=NP>ve9KXg)ZnHQmVG8n)ztHCzs^T+y$Hjon}-69H|%!J8tXR7>G^_&<I#u)6I6jp
zaRqX1G*Mr1?62uLFKwv<OD9^jjcJ2FFbIWOg*v{ywQu~#o_kVFiR32P>FcsKCih~`
zrL0HO1pv)4HOy(7<;F&uqV3JFkKaNOfjysYMSdcj$HH=LxrQ&qD_ze<W*>9N+aE7n
z9bpe|Nnv=laK${%Pdjea2#}gnC#F?fIAe&iFQhsZlBx=PP<4Rcg+LKrj2H;`xs+GF
z?!avKKKM5)h%PTA*NM)9{+fNy*M{ED!#LZ6UD6{lhnf<}bMckuQWXL@F9naEXK9*e
zB9%K$wmtf}rzjHfdp~`rRtS!Vmy8;boSM#osQYI%JY^zphhN@MQ7^9@fDn}IWXn|p
z>UrAZL2={7uI5AC?JcX~9j*(Q<MI8Y=KJsMI^UEwA4Gc}E(Ql?Ngt0~FE6NH5QCAW
zACmU0Uj&19Ag_PStWUJPe>_wt)E+6k)<5<369axgrZGiQFYHGaG{BJeMVA|(3H2`~
z3Z(y`RIU~%{VTxx)W5nmFccE_CpEB<C}<xX*sd0oz8Yv?7}TGO(aV6?S{pRltI$al
zJc%Scp%y&r_kIQ%ytpg5FdMvT{BeaSWD^P=vNzg-h6r+n?9Ya<S%p}g1|9Q;5&=Rv
z#6oXt!PmD&ceA0~rJ)v7q0iExfID~)U)Zr)n6FP58nF$^96aJ&*w$^B7FIY8aR_O(
zGYOwIymdH5o@IqD$nQ3Ml_7%m|4+N_E>e^@>OEhSgnE>uLzHw}lx$s;{9KgcU6e90
zEcz2)^cVGL6^CfGxM+>KXsx+u?Yrm~3jCcf#y~yB&>_Y+?*EPg|KGIh>Jl2~5}NN4
zT8R_e`4T(T6T2M}d*c#c`0wCc;_%%+?K-}sN%f>@hosrKr1`p}#kr*AyQEd(<aNH}
zP4(n$hyPr%p7W(#s;68#5JX-l((J(u9vo6UMpNo#0LZ1`a2lxy`Oe53fT=i5$y`&g
zGQo)Y7tZX|F~(G(n^%L3X#|pKgC=P=SE)Wki6r~lWTtivdudcPKIMGr7^>-QeW~{d
z=|uAhEcI_dtLaVt={xT->eVw4eKKnEGQL@7d;p|I>}80fWNPljznA4vM~ai)&y<~y
z=inERsLw1S&hod;D4)yB2kT14Lp4bFwdUis_rIw2|4!%2Zu*?9yB=r6ucCAxYu^9W
zk}3Y{yoO1>Q-XSqwM~xId}=m)cG6ysAAD{caZY7bjvz^#&%L@|es*A9?jm=N<y~$d
ze^yXjj%am`UVaQzBQHJx8Z{5o^XiAD_3MN?LbDw8gZgtIarwB_`N8?IMNB_p=A+B^
zzgPChCTf^}S<U;yl-o63VDC_nXq)d;S72*cXzgEEf1Ur+1YwZG<i~y9N93Z`dBAXg
z47_N#Vl<$XB(}4@NRtZSpkBNk55F4_`@(`%M~m(5icjb9_B2W?s7i$Wi>O3PZu3iQ
z_DZf$N~sMah<i#XsY*{}OL_cDsZ&c2`b*ITij4tfFSVx4fD#=@nUzV|LVp>s`{kVi
zfL61d&Z(Rsp`59qoMoY$?V+55w1PblFr1D+fm%pKs-x#;GX!upu&U_NFhEEJ6rXb=
z2q1`(771>91&mj?hQTUJVk+W40>qtI<I)h7olHMz65HA7C^jIdClpe5R}Ov;f66b@
zF0FD9t6H5W($Oq4UVt}cCPWjhq_(ay!m6H**A);j_?eI*oLb}au14i!m4tpJo*dX?
z0UZbdggn%Sk=8{B)V;LpVw~!rnsq3nPTQij(qh%j7d7IgwM%vcYv-8B4HP~L-1Y+X
zhkmq)nizRz*bJjJRCM*CqV+pQ*f|N96${v@X55BO!1@Gr3<0<lf`;YO286ciIL`(F
z<whU_Zc`xU-~gsg0e=x`Z3!yM6e{LS0Y>$K)u?6xD^(M+AMVNn#+nm)fq;OYK*TPo
z`+h;=(r9x%7OZiE)Q^v&g;cufdI0^_jOIl1>w+fuS-=BuNMiA^!Q#PdixiC9=z&^D
z?vU1^_#+%w&=X%!7Cop9VX);*X`8@o8(^GZPQZ!#07NV3bv4kc!r81z(l$QUE^pjU
z|EbpYK=W(>^iJNJcTq?g*zSkl#&p^d$I)m|+PuTjTCCjaTGP%5>HK!vP7tK|O->i2
z+estZ^^>Sm&I4DX(28cUDW$bD$%#N;UQ^4ty3iQQn5BU!yq(9km3Fl&%(#nU5&MmE
zE>~iyp*ixe#>Uo$4of<WD@adrZV&w;mRaK;YBEqjPyj7w@6AG^^5f4>gTTndz@WsA
z)QGO>d002`XkW{1-+Ob+&_x?e(%xv@K2RaXFlu3@IWRjhNH<Y*-K@9Eu!q!YVA!u;
z&l%lCu%Jp1*cueV1RR)H?KBAMs|@NT3L89Q7_3ih!5pj)7aS^<M;>HBAC`yXl<F})
z7^q$xiaZ?}!y10CJXkB+Kj|D=Cn#157$TATbv77!Aul0PZt<%CUMq0~XfkxEh0^#q
zq5`l0HKD{UjAA^EVg=VFpmwBVwc64Zw*-x9v<{2tj_Lc1k(7@9o=2f*`a$)rpJb?*
z_9b&{HNH4FuF^UttUUf{d%P2Mg0pFyR{{Q=%do&u5r5N!&^I8pMUL1D|5X5f`1bWp
z6Aa9iWFQkfD1ttjbvh|ZFojb(Y3w-35j=&FI%Uy6#d0*IYmxOmY1}|)N}&j>;-YWz
zG+`DD_xWjBfPCiN=rr5*)SP^_QPJ3+;0fDrV0(-2Zs-&43SiGAJ@H_$Qxc!A5ZGTx
z&wFS*locG_q$?8)`tg+I5<KcyG@T?QHo!5T`E5SKWiH`#&We0qjVpg6%$j{|YAU~~
zFc^F39<B5UM;qNIft4?s9GshkTvLQv=YrEP#Ms2j+ky^m3r6k`LhZ7^>3J%EH7>G`
zF8ZG?mSQcv`nA{_vuL5e#0FXNOI<2zU7}iBT1gsTUjl8qAZ>p`*-gTZ3kJ?J!K%Mn
zeCFj`Axc{g5`Dql3)t8z>8&f+Yb&@M3o_HoET_vpqN{1Tt61)<$QaA_bgL^{^D|Uy
z$YN`_RxA45tIVsb-hj2#)-|NHHBsPtZNM6`-g*jT9gwz;|6IZrg2iEp{N@>xOM3&=
zX#)_x5nZ}*x4Poey55MgnOm?{tAHnjfd^1rxGN%;S6o!Y0HYM=%N{p;#aL1e*&=Y&
z(X?#(*1V*H0hTWA(#L52;ks<3Xm6sZLtPA_RYZKRh%6C;sT2ZKKi0HP2H6NB+6f~&
zU|>28@90tJn+-Qxu&w;0P`ystm9O4aSloqw-u;fZg{ruhWVVMLviD{bwgbJ|p~c$$
z&9NJ%ynAA`+eo+fwR^ApV2>VS|1H)|7|Ou_^8u&g0gvuM=!bn8-ThyX{m|6?oz{KG
z&i<<J!A-#d|L_49)xIhGAvM*ZmFS_T?%_7%@YVfVfAa4^w$@?c&CzC@_~Nb4!m=A7
zJ6qb|@#d*L45|ag-J|2<6=CPK<-v>O{VQ#7^YG*y#_)so;Zq1YjAHuCl^UFK1po6S
zo8<IBz5;>c3{U5b!0n7E<&31|jBMqMSj4t07~$l20jp&g(eWH^{*(`U4^{H$mF|&W
z*HMhkaZU26{*dQQvfXRUDMya;wWbTzCPc&*9yUx62c_B@N*i$)?BZSMwA<>1!skm$
zt4qh|OE$n2;qs*`x-UWL<wwj*OY+yCfO7+#>xtJyx+ydMxx+P7R}`XG)<3S8d#<Zj
zugL*7rmt_PrEaQpZ^$4w`dK%`JvaHQH>7}Dt=G3$Qnz`!w<M6;uUWV7J-4~5x5R+E
zwfbvl$+*VJT)fg)TIpQ{&E2EqU5@S@5!HRZ`2D%zeIn$ZF!esI<9=`ZJ^}DRK=lwO
z{;*>BfD?Z0^>nA|yeBgBFuncIzJ!AK@&(WC*L$*9n(7EMe;mAioD)Jd^O<aK>A5OA
zqHKB!7DOFzyBIEcXmdm#*D0B#G@sU4-Uxe2)_G1Hkqw@Q*`3xuS5H5mT3~Kq0u>bh
z4|{G!r`W&Rb^o&GBBpIV$h5+Hw|i`qp1%HT&)pM5&-!dS<@jMQSrZlOAs9c96&&Ft
znKNZ3i}&c$v&GKZu=jG3jsRJDvFA2gO}yB1GxKma+r(J}mDQpWGrv&(=^SMFQV3@<
z86~h!_L{Y*7Ea-7(K^@Etrk49byg9)MDWm5v`JMFWT}amRBr7;NYV#I+t6@N0l_lH
zL%z70t}S|6(M2+3nc&@<20HehUIZnPL*Zu?9qa{Co*Z^5x1Lb_8=H|7&SJvRc_BCW
zqQi=*5h^rO5cxg7nE9H7ia=sNW9IDpN%4?ukn|wY8>Ds(QPBV|&Vr48S-6kQUpRee
zS%LIA7@EMatzl7Q^LDuXL25pB5l?=G@vxmw@7O}qS>8<Gcju7CX$x(<^&ZQiMx@2U
zQZb)}``>om1j23rb#gZlc(~k^pn9U+>~g{cAX7WlZTCi}luYD31$76Li};YKpBwZ?
z6N6h5)h`SO!D<qK|8GsMj##pBd^~-@zh>K>#nCH`wKuK0=BgY-p)a#-8C|U8|H|E|
zwd?*f+b*^LXSNO8h<)`xxjXwht5Cf<QpjIT?mxiZ1I<|w2^8>us3&|;5pd0M!HJpi
z!8tgtVOfPyLAgwHEZ~Bo>YBfrTyzis5kn#mC!?`3tyIXZyS}84p`vQ=uX-XAK;AV|
zIFd84m>JZ&Oa>pi_A=XE1f;a#R~#m6Ij>&Clx$uR?cTxw;P2;|dI_R3k6w!c&|dX+
zoN*%AL?UH?hX)?M5L`LO29+-<jF0S8y4;}FoER-04KG4UDw0amkf^RaTS1F~Gq;d&
zqI)2M(@7)Mp(1xoo{#-di!rKODMBnkk;<_$e@a4zm4%z}Yxn2Sj}4!iWUI|R3-POC
z4oNo5x=TOx#3z~IvBFo;&b3>~VOxH#`vWeiWZutRCUmC1$45~s-3apXCl*emF6-<P
zA{AM7<|qd@QZTB9)Z$dg4<&xyxIp92Fvg1^j<@vJs5<&nNZ&$%{jho%R`nCLBxYgP
z5~m6Nd6~$$)>^wOkYY!HWczG;q+%t&)w<qq6BsMfS==P}E~vZ76M(7g{Qi7<Lx0`!
z^V9vlXvx4zC~niA2a3|0P?*zWYtM?i+T9E}gdE8a)BTFbZ`I3dv<KIdjF%VFYfD;s
z&DV%gjnaqIxEI5B*&b=#i{Q<NbOgF$&-J%V#rC>^T1~SEuF89=Q2-zV)xT+S>H0FH
zc#E@W5IFPS>c8P0rfKE<tb!%_jaqy52mIG;>(?ym<rP~{ZI8GJOLJLeLtdlwh;4qe
zZpOCQ4<F)UlYa}}#f0)~<<Y0`+!2$cVhr{vB;_pTg{1wWHjPX#=G@=q4tqy!!XH&`
zVxj>3)M=dIas44zAuWV&UstalX*YZNPk&F&TIKv!0bMlzSYD-y{sBep?~H?}#+c0l
ziPr4=Sy(<dd4Ya8E$e`Cg(Nz&MA?k=19g>hcl<`-ur|Vx>~aJWo58xQjAivsd=#6{
z!6$<wu~~vF3#>(rx9px*ihoK(@0Kgsv7S^e*dahUE-O*^g+Er9$e$}pUC`fNa)@Hj
zaB*VdD_NI065CB5r=0AQ{*<9{QY{xHg-!f2VUC<U|HF=m_g46=W{qa=;G(nEFyKf~
zY2@z7JZiK7`zdtnkZLJoT*NgoY@#5k(YPOB<`8?LL{A8F@<19rW`@|EHGcLmtSDs8
z^V7H7smIc$kcGY0qWs0e@o%9^`>W(3%OmIHMJro?kc8>D->jVTczFtO>-3zK`Pp0j
z2zM}v2ueu@ff!f-U!zY(U@cFI4h=7lSAu4JV~$8<J$Hf5ME!P21)0;E3S2_|ij0E9
zhM|UzaRKfsP3wlA338QN!hnW6+{9l9atdec01NpYM{*H`^C^}RtqZhYBQZCF5T)ST
zwQ#qvyKiYfgYG9vSCSt<$f*e6$D5NEQ!`pB08zRXM4}8i_Z&Vc#&0Y}ACbg@gL{JN
zwE)-HJ$N*znn`YJ5x-k~z~z#Jr~K1~*-!7)NVMi7YyAEq)rycw5F1r9H;Hhc+UHID
zEA$lo4z1NuS^mW}D@VUT%6LY<_l@Y-KlLQ|Uvc{9tEaQZ-{#W44}bf~93G$VN7suc
zmo9K=HMOUH_d^?`3{SHVpLjqz_HD#>qHmwz_p~#F-cfV~CrW3OP8;`>uZB}Vm>^f#
z?n3yJWugA#RBfHoZ!xLI`P?Quap+|FWHrtspo6qH#+*`PWar_fjuYeOqWz!Z&!ckX
z0ig2MewF(3=!rX8hUlzbb-MQeINm9HbBA_~^Kq=&$=4z%R0BFFgR$LY5**&dX$I3+
zal>$(Z{qfXK@3#!VP1w@Id!D!qu791JVjayFS*^1Z;=qxM0qXV4&(p2NF0&g;r~3L
zh}DFftX97**pjPYw2YgQ!_fu=gw?r3<frt#XmUyQKn^68!ARWM?+NF@)I<PSA||(-
zkO<eu0F_D*;;4~iN%=<<o5_rt_Fd_MPvgi*cv((XyRun1QE|&}Vma_Zd~Bu@!XGYU
z*@yP3CFUozpQ2*L@b{$<HAd5`k8-Q!^FKL^D%<c^X(%UUeaT@02j*Yq_Z*6wsnmZh
zw#CnsfG_A{)Ac9|sVp>XY7?E>FGa&^Eh6?d)3TuYTu-0?Mw5o<IJr+WA?W4k{6CDH
zWm_9;n{JcfuEpKm+Tu{4f?J^!3PoGAw3Hf7aCZwH+}(l)5AN>n?wU=XcV^GLGyB8-
z5%>LJ9p|+c?Vi>&7Z9E0DA4Ko7d*NAsX|+L+0T%|PlG*UJqtwyq?m;tp4U$^ib6|L
z-X(v0$vssNSzXENkD;!GBi`9cRH5d|`^8Kd*fSFQTO4d=Nk1z$e?W%*<DU0Kj$tN+
z>Jr9}lqs_RwM>co>`(Tf&sPjWiTUegXju`fjY(Bvdgbp)vhjYv*F|x|lU6w>s?;}k
zCHRNqx*D2yF^9k9!o7B>p4DI8^PvTX>)wB5YD7VQZ5CiNc!BOfAaPXWA?9K1pz8o5
zKs)l%44=cYNpFqAI~0H3uuP&b*%l4>?tiJcLR=z@Qt`TsRU7vMMj?43@9$$w7M@kb
zp{sJ-4fW7pck=@my2LN=4^ZzCH84oTpgC1L5l<pMv3ikrsksReHi&=b>XK^_#xHmD
zEnLTYHP!Hu>{ZP2l@~Sh^WM*)+8(1kEz|;f1$Lo7nAMUtp8r`I2xF;8Sxxhx7_A+6
zZVW_1Z#lMP-N9WyFDfwRf)Q^dW@zvQ>@#hLjELTg55`ScMHA36sZEkc$KqGTu-j>B
z*WHYlhMsdCTJFpSP7CMhoaaBi?=if+nS|qC6zMZs%~m^3C3RO7KQ~qjWU43aFfYz&
z%-#E3e>uHr)t>I7Yy0sqV|ue)*ykE*`F${JcEY!~_607E(husf?NAZ4i4aozRI2i$
z*qVlIDSF=piGZz%OY>{j0L#(Ii7PT#E5FPUWzbEl@>kJ<lSaFb%90)DQ^KeyhTkg;
z=eq8OU=o}Q$I9+B-B*o5cw&b3St*jl=zbpc-HIo%yVvW6#T(7c2>Zk~(oHO->&P6W
zlzl1=&6dBv*f(CuA5jx?Tk3Ca7^4qRmfz5LN%`H#WqrlW@0D4*?XH_R?mm}u_=t`^
zBu6zda8X@9zkf(^Ti$EPSUWqv@sqxN`f%XS{>I0CSAvEnB%OaF&cl&2t7JOSpo2Vj
z(^yEDOFaEIhi-j3XmoSKhH}z%zw^V)v-^fE<=N}uM8oo|7mYi$2{+^Q51VQ3jeCOh
zw~r~k_@d^<1NE5O`CCKnDrDnP^OL(}YI?Jd7fmOLv3Khd&CdPqO=mtMx7+%uH^a?M
z7s%NAedk4od1TYoWw@hV81haySNdkM`SW=N@;*SV@p@U^osdv_;%X52n!yl>d`O(w
zc_0U0J##;o0fQXCm=G{F42(Mk#=im+Qg{%HdXVaRkU4lzKs=~m9yC)PbXOh>6rN0?
z|Bu<W0EL&3sMj-HFJT8SQHYl~%u900OZv)7hQeD;)ccjL_ZtUq1&Fs2%v)v3TkXpG
z5z;><?jAL{Iu1U%5T6e)AA>0$!z&+S3SU!E-%q-}|4;SA{{;5`T|MF8?+@`0g!u<g
z`G;Qlhf_SRwF9F6Kh+b(SAnGzLFJ-BmAXOI4nZ(TP#x_5G22E!{!vd%1wX1MhA2YZ
z5g>GqkO_acam&DIO#QK`AT+!8s#W%wr6Jh}MPeTSJUqy2?JfDTYNZ0;m7g|BxN(s}
z$OeTP*)nKNH-OJBj9EDJTmiU?_yMR53x}Z`Dd?Q)hCM*u18M{Du64F@15vtd_Yv+;
zNVsv<i!(&P1x4u9RXBxJz&&Op(lXo|g7U;l{#rCL!aw|2^aIXz1W}$YZ*9PHJw39B
zPzWqi;a3DltsfPq5e=4k@Kpre?<l_b$aLe#4A#iNTx6tLydGMBzrgh8*N)MTY+WP3
zUq8T9BF|r1QAbA4|D~dJqd=6ho}WTMtS2;DmeQAXJJuT-?ZgrDQxB7uGS0vu#xXC>
z+A+>3KJIsbpVxJqNxYv~{0A~1flGjo#dTawW^5Rik1c0>Bp~jKXdFZl%O}9sVLCph
zG!ClBCdirKA0A_a8JZh_m1^bdH=W=Y4zYwm<R>8ZR=^0(#5m}S7%cBsgozD#m?hIb
zf3dw-go$OMWk8}4ED=$QMRT1ffdGYBM2!V_N!TR}ZztF&`aEL$SO$PGMas%{JToL&
zz&K?yK7K7Lg%mB76P~iKm~_CJ`bIwWJRX^_UYnXElhW1km;e3+_D)dD1SobL6n6%S
ze*-0?N+Spapo3Fcps5deaX_bJo>Lq-k2K1BmHN*B8Y(3rU^*ieCZJA_g-VTXhL|HE
zy;0)>F4(+t4WH}=D43AWUH4uULmLMkC6*7Aph}mr*5SR;i20KyG?Vy!T!U5Vt)w2o
z>x4A<eC_AfTBt1q?{-q(CuqG8H$8x7sfwp4P-PLm&iX8#U=Wk}{ycqfDC_n*i!>(d
zr%%TBy6i1ZZ4)IOS?g$LhMaT7oU65Luc}OHhTMI{+&<K-O0=91Xzm;o@a=tG?9K1v
zcN_wrA6b4@1UB1CY@Dw67aZfr9BQ%b)EzCS)`SElP2YS2e`{c5{s*v7{*&c=%MWzn
z*r*lQ236uQ4&@q2`9=;@sEs=k%{R<|&-p2=j|UUrr*?(CF@;4=Y9-<(Wjlb88>wK^
z0zgZy*-EZfb;0w}qV3TlxH#wLvqJfeJYnPFh1W%ea;kk!hE0Tj)~VcfmWz;pVlDfk
zk2;P=`7$R|ysfCEuEJSD0;TogMd$F6tECc_)?!P&LY#t<1z_0+d#-aXvjMKm-GH*u
zv@+{f4$R$H!>-aXpW>b#ww1tywLlP8A`ZSjJ_~i>ce%3U?c!6;@~-a{J3VZ)&X$){
z<@x#SGB{jc?90=w?4C*>jT91#m1bF0a4N7RK<f2IXhD1*(<=~GWxBf+^%0e|LaZ;j
z<LPm7>B6hFI?Bfb8Q<Mj32|4K$X0iHGV)WW3(f++D1Z4XQ9`j&b=zHGqg<12QZr8s
zs|_^E#Rj?dVn5%-^WWviC9b)>HVebCb+;+KFsXgGPTz>GohGZ|-KF)^&o)-h^i`&e
zDiGNDUhOpl8{z_{OMKPm=3iK@RsCR6<!qeTTh*0TpX*#zURUQgTu1hlRyaS$ybIXa
z`?aQ5XnqawRzDT1G<Hz`+px{kQO(AE$HoBbhL6KK3yH8U&88KsrhMnh@16}zqm6ys
zSUZWpX$ks8hvut9Wb;jZ^WALo!)-HQulWH0tM_P{7i*@_XpRd95YNEz@8EcM4#cx0
z=rqZgE<kLT#3SnFK)aTX-j<rm76ungIs+i(oEZrZ$&=tDRuv%oUKx{QtItp?$x*8@
z<)ecF^O;J$7_N%wTpPHwZ3esj*L9l=PrGnZ^qaXh1(kLtrzSNXOjVkWk;-<lM*&4r
zD{onATR?|qVFzPNN5gi98g3^wV`sTy=c_NB1RkA5d7UzSomk7AxmaCNJY9D(UFlX`
zV!>VK(5_kr0G7c2R8IurB4F??p}nqkKzB7X;fs(3D`PjaO80_scM-VTEFIa+($dYa
z*F6a6DP-vRDAz-`+#(j<PU73s4eiN-_h_y3P@446sPvW^_hy27#nXF98QXg$x^<F-
zJ;Zw6Xtwe(G<@Fa%?0!!Yx|1k`l`_g&>4DP#rH*+_16aXyLa}_v-ao6^p9W-wDAnM
zSHq^(`;#&T_~rUYhFf0%`gO1e2bc$0<OYcu+n<#7e=i(dZyTgo8N>w+)w~`ERvbDs
z8^ZM*!blr>0;u1#8VCUoBrx=y_6?Ym4IT8E;wQf##A6`lB_y>4f?Ru;KN7Lp(zDYN
za@qooH?w%}i};J^1n~&5X|c(qk|_EysFJa0<_GCiL07>^vW*xo_mK%=`?M1G1W!YN
z+>P1Fyr`=4iRx0cnjr*Qs+Pi?L&d*F@9W09hR08j#wVVP5Wk)vvYDv&nAn3(03c(z
zj^nc7<EvPcC5)51GLzc86T&`|GSJD4?#cA!$sNGd1nbnN^@$IjQ_*Qt+kh$Q{)t@l
zX=|owKiTPJ_>_R}bWHZNL+iBD^7I^FMqpzK`FbYGbmoi4%p`P1NoVxW{tOf}`;l>W
zLS}Y{b>{P{DJkQrl)TxuEwkfGv(`3~{Q<MJrgN$ub7RoCg2vndTb?0a(h(`Vu_D95
zM%BrA-syRg*?!!4*Xb3`IZ2thD2*`;*D)#hoG#_UgV2JICUT*3Xr5YQydiHv1ilb&
zwaDwS*Z^I8Za&+O*Wtso#3;K|Z@eUfK6X|lK$@>e=C(|cvh1rvLWn<6h(1TZwkQl(
zijQ|^b6d$oT@*Z@k1tx%o?E5?FP-kMXyUF~JO4`OTzM|DLSnv3!?1XhwfYRcioUV>
zVqoP9%i2?!wVTgt{A{ZtDywRHYl8SIY|od;?r<dlYdu+OLh!Yd*Xy+K#mtR$LBPf)
z>&B`|oH;&<<-$kng@`A%>n48dJUk=@#ZkW(I)pS)6$}lWr90(->mTX1tma6c?;!p|
zlY6kGY_|0+*deaF7EPr?mWKGiQg=<iuH<-Q^a*nF)kc#n^Y*VkhvB8|bl^@8>yG%F
zomsOT=SRWC0FLbgsPI9*_`tNP38$tQRI8?6Z)n<BjMJO~!k6BSc)#aCquhnt+SX*!
z7mCv*4dSx{ynWL?{9rulhBKZ5azWp(q}zK}NJq`rHcMwb@74_fSurOaTvi>V^)b-;
z9;_Dc)F$q)H0`ZPXV@j~Wj^wE*2983ri0=fkh&qNd#||tflb2EOx00~3KI|E0VnqH
z5bH7Wn&}C_k(TdqSJv@JK#k>-W`<^crsm-<Zx2<SPD*1=UeU6XeQUgYsMg*+rrS8l
zLOWf^W5;Mt6>rv)Jj?{I96cL6yeejXQi42ujE|x2l@lAEZSS7N(#f-?rpfZ_z5JHl
z+J3Sbf9_j#{-sCdsr#0~x6>S^b5FMm^~Li+x1BFW=byq(^UyAwSudPtay19fY!)3H
z78j1jj<x77;oK?~zv0?OSAg|%yTi--hy6Q^i=S4P-_I`(0^VAu#zlYAiKWL1N78)@
zi%lGSm;5bNEao~r^$HgBR{6!Yck@jl{rOKL?Ti=ivgljseqAN&-75XMz3YA#oO)9-
zD3qo|8R`D1fnU4nMWVCM4Wi^`r2hSjRP%0vY(ObsD)oM*`F?KkegS#EMDQS24!{n_
z>)@vv2s0h$ciiNsDmskarT6yazf+k;>Zcj4h4}9S5B;}MfpY%=>>F+6{*}9nQK7l?
z`M2Di&r8!`-KPxE|H|F{1@=3*g_ZhWYkr~r&D~AA`~~*aI72>N>x;kt$=x}-xnIWO
zkiJSgefpTY(>D0TgF@r&&GY4N?(U2mKIR;J7MwUoO3TXoylU@GdmLNpm#a@m46oA1
zDk-bv@%i=r=S7WpWZmby!qRV=P{{Dv)ZBbSV=wf~tAC{oOf0w+SL<|akkPZhIDfdn
z<$uiG$xF(|{Y=d%Iec7+Yu9WZUJ|s%eH(b;iH7%<WNL3o&KGZ<rJ-tY`BmU-HArra
zschv<XcwR9r*X|S1uJ^l{2_(6>q?qz>cpm$S{vMP{HmEr@mlQci4k@Os8r8X`%{?R
zuwN&fVGgG=hI08(Rbh-~t7jQ@h<jOU7U(sa&d*frzAsm5o1xLy;T@{rA1(IbuGsIc
z`Mw{Sgj4R5UGJJjh6oY_7&ZI!3y)jqejkAok`NlwIGV3||6(<&me*TaB@Y*LPtgSf
zz-U>jsc-(t-Q@!td};MBc7Z}n|DPy7KYe4T>1d|&r|qALf1!MaJ{caWFa%2^oI&)j
zfrabyowqKw8T_w-<uA&2ri`JHg@65Ld#_f~T;ZT(Grx8FkAdY8<-1!t3Ssz#gocHK
z0s<X@;g1Fu02NAnN~&+PgEI)4or4#Z&K{gw42djoh%KoKO%x|iu5R#sUoPU(*yfQB
zXDn*(!HaC}60GcPhf&mzv=7R)PBvN&Op|xdRhO|XF0l`<R*gB;?KW;n%^np8Y@Xn+
zoadBXKi|2Ex3*|WfNLSY3`tyd>$ckA-io<En2cYkpmI|*KmtsIeQ1!3s%IP~MhN)_
zh5S;7a?Ll`)cWFYw?UaIFPRk+8uU0=`+rK(HzpB2<w#5A`a;F)8{ImP1$Gg}Ya!lA
zO*<?kOK_6Qo6t5mcco={{>3lfs7#zgyxK#L$gpbT?CQ*Bx`t}V`d#mD9z(+KMFUy7
z?|0{$$<IEl&*~7G5_qKHyXj8tEO(KTzWh8#L1>O25vQi6OS!W?i2sa#eQuh-8ZRv*
z^x?hJ_V!?YNcq?Oi|4*mvKE^Kwr9c{bFzPGF7E3|zm*yUU_5`I5K~`IjyD1fXu%}6
zCG(i8-AJ6x_Q_z2XQB9as>kl#z0VfOT+z;jroDdflSmt0^A2yuAzew9CL`UZk0vAC
zzX2U0!A3;7&>szqSHYg_f|jvfjIy~g-oz9Rkv?6<6p_9r-w_dhIv!hKf5r&R-~gJ(
znbH%{joj5x$qR@XXz)3lNt>?~5fNNIM6niGgjcH_L0av*#-$`=_4z{*57y^!t-!bI
zF~&QwpTqT~Cs|pIeDln~X43D?eN3`yH<F0Nti}@Gb}DYB3{F#$rX(ll`6s!M^@OBK
z0%sslM?&kZjM2*O#B^K1K);M|^PbSmUJuK)*RkdvdD)rx?N+~2-caVIWK}y6rHg2a
z>*VSN@9Y%SBsm%88<Yp`maM|Lq6&?Mxx9<uY&ia<yhI90$dX}BZre=CvnPxt<~QQ|
z)x`qN#AWtYz5B3K2Wnz}G#9FfGFb-YgQ5+4)MDe6CYx`?<9v?rrn`&X!)5>m&k-Dz
zT(YzdSC44F5qDL;Kl1l0p5u1X_dGHnOi0>a14}T06`tQ0g$AY!CIIl8tE53U4}XD8
z?_AQ}ikm>2ihX}PLh^?&&XU1NzqGvP$pASBYCW_H3i-(_PJ*Wb#Gq(At5;H=A01MA
zL0dJh*xYx{t!g1<HfW@*|7%*)gtwYULpkK4#G-j#e#(X&3p@vV+?vk+(sC48DB8If
zUUYR<6kbZe4i#SZ$=DWN3F9&pUJc<kg)fFvb6q1Rqu(!ZY{VbdicKav)3xJb(9qo^
zW$1sb+fJ8ma)K18-;3{6c}m~LRPnn?9CYn8-9|Pt-%A|r=S#bU>pn5wKk=pslO)un
z$8**1z~H?<lQM8~O(ln%-d$S#NQEA)@n-{3WU}267aODCx|4&FYT)g;5iRn1Vsmf<
z9n~@w*;CV;j;EnQB>;TD-@>?ha)hpLw&WsQiUFh>@*t>`-C?<E#^*WmwC;t@-*m}3
z<aU7Q&*;%#>!KXSl&aBL%3|-<$dQdOc=D4Xl$(g)z=<JWAqX7(2O@0av$5~mEhC|c
zh7?l*A?njDM!c7>SIuJIY1!MsAl@q}R;11`nrOp{P&q{t;dde@!@G1GUye7Q!@s*)
z&=^vU!#vrlzf*kkHY3hckk^DAg*G6}C~3j%)BR;(T$s!Z_3uDa?Seo3Uaetn)F4!4
zkNv~E4OmzMKoUA5+MNETY`_{twQ`VaYJ)cervgIrAS5jNrvaC2Sr2N$_di*|tXNZ`
z%I_wi;SRl7eDX`(hT=Tva2gsOKPxe9svm?^Yhc`uigllbPJawaZm`hCi<uZc^_9ys
z5=J5FH!x<1AHQQmb}Bv^(<@}go~1k=cjUAP9Zg<(m2<eEI5?%ZmkPkkmDz_k&}j=m
z?)KQpu;E}|@v}6-kla`7e=X8y$aIQ+%UAEtxOlckEf%zMImNJFhINvdGd{^<QS2df
zF)WV>QqEPfum;A`wP$@;W83_sq~)bn0uUZw#!EWZjLoXdF~YSbs$l5($#iao(6W}Y
ztLsnq-OE)+OV>_?_<0>XEihJ9k$rD6?rieBkaCWT%tLeHPx6x@G;Nzw9YNLoW76WC
z=-o83{LzHQCnX!ByU%lPMsO;B>AR!touP8$wUz@?+!_l^{ko?F&CP;1V)j0n>FJ3W
zUc|l`-!m7R*0WAqErl!XS*pJOAlZXb!KAfs%{@6|C>o2N+Zgl3LLWAR9%;Kv4FLHn
z&#gT2dxUDSeO&K9+xt!=?W5gaLThnmrJ7x1TAdd9ac5+>F7{6TPowg}ad1_`);_0$
zk;nX5ok;PfYl%y9t>K%2%cj0Uey*9I#Rp-v=A5MxcMKk3fLA0O(=gq`Dt-xl)~;pU
zzSNr@(?lK9p_QUj)#YiQ$>2L(5?cH+KM|f4Vu}4W3c<3#3SU#B;;RlmYe5!1+*K;C
zmz{EDWuft2X0``cT}Vd3a6icyx_WPff?7m)RNtB(#WmrxujSE3M{5zP*F9Ky_KfMl
z>wG~nz58e7kT9URW$1NZI!6TqEO<lsJ=_u{q(X*hX+!*J6(_HNU-D(2*YU~q;LP#q
zXEeMmIqI7sf3?d0X^~dazZroHRA!6xZ>u@qj6(6Na^+Qb-X`9R<*HTXzwh7CssD@e
zs|qbtcR$SDOuz=JivRTQ{tM+-m-?yhnNr_QA=IkN<NEi^C2psOLaQrtRQDeT_cK!i
z)zvlq`(K@JXP5A6U|p&Q_KCN1TWU3Rll=$3>u=|eLTef}RS%tJZx^lxYML(l58ZBW
z7Xbt?IELDhC-vPDraG*Z{NF9o`gbc7gRoAKf#Xo;yHy5)T7<mX$-h~o@74vvYWpnI
zP7`MDHbe(&2mTD4rrh3b$`I5I`61QL(r@8gb=u&hxPdbdHsiXv*Eg7I`FW^>;30+g
zr=o>l)$(k>JDE;SlZ|e`Qa{=qV))H~h4DqHQSu(GW&P~(0I)VS`M~I#F6hAH5__sq
zTj#y=AQIn!3%hB<8$)u2-R>%$-SGGTe7lOX=#Z%1boBF^$Ami5?*^l$ch2fw!yY>o
za3u7EU8H66W5=(|8sqaqBbOl@_(j&Qlr85i$ibh%+lAXETvSn+ML+es6>8+wKim7k
zyA28C^-x&TS&sVS_8xg7F?t%Wnfmo0YVvjp-QBaJ`OE%~8mwmZ=9@nR^B48V`wlel
z-KIM7W)}HyHTdE_i~1W91)h=&4hNt>zdF8ANQ{#%s`-j*2R?`bZ&iZ<uwUt)Z6C-z
zb{W8C?`>ZI{xW?M3fsRxU%{<T2TVfvm+5Ox+CG7J-hn-q-vc?eJdc*ZGueP=2tuqS
zTU?Gepe0*moEL|QHH$w;mcv`+ROTrhfC+W~?<oKB(b&jNAn)((d*nsgt|2u=0V)OP
zVdCo}e1<c;@r?l{Q!E7EeJwdK4RvL{h)Mz&T&@9r-zlCDJo74e>FWsdTNUuzSoJG-
z>g!<X>q+tSR?Ba#&72YH7lgn)UiIJp;TI?x&@1DgQsHe2V*_aTMl%EiAp%Oxkp3Sl
z0RbF1nH>JvQ=)9f0Vt>ezj6W+{UysCWFUyZ>Rj9sUD4dF7iox~Mp4{mU6GbtxqKLQ
z5zMcPL%8-zu2T1Rhh=a!Nr+fwkmFGB_p9J7d(Tu%{`4u7Ie*^;(Wl*4a{jQ8@hP0m
zEgl<+P`FSCu|}xDRVb=w2skrD);O#r9Dq$2{<ykF)eA>=49AQQ$F2>>+zu-ShiyfK
z+CB@GTMEBLV?vRUi}eUT5#`;T3RAwIWDAcN1V%Kag;k&ikWm^_<V9oyLueKG?krKb
z9gQz!BO6R2-IoJ66(U45qHx(5MW?C6uPKP9mFX3u7z3zYPE)>)f4tQ~dOt&tCSr@`
zv!a&piX;<_;+Kgbn}}o$2o>xWlEy+Y#4^>PjAgKoCW1tNtc^|`jyA<)`k?5w|0|X=
zHdc(2@mIW;ft9yi0HysjnR*_v<aE&Ic#y-kDXI{}OcU~=C01-J7K|nBq!`^t6lB)@
z+`9_$6g}3to5q#X-<>kR<C-GWioB08-WdX6T8bC@9j~@cUAP_G>i{a<HtUN>@I9u=
z2!O<NQ=h@G8)_p`j}tp|6RIrZLmXo|%A%I0LTdy<9lMf5wv$FZD68~>qbdL71W<Hb
zM>?d%k90%m!xQD%5`SEiBlJ?-ph;tv$y-Dzx&h>~+bME#$!?d(WOv!r!E3V1fYkW_
z;1<?rXh6LAaLSdU8l47ICp*PE9-7D*T%Z8G3m|`pPd4%J!l5$WT!QNVhE`CLO--ly
zlzM6YL1UmYC%l1}Yo@b_V*&{sZ#h$EBGQ&yp0EKj1gS8A#%^S#>E;vZ`FR<VGa2sS
z^l{E4rn(e^@0kiS7#usea&_jaRB3Ohvf`nclp0yMN|}v{=^p~I46M_HZ>X5Dve-}3
z&7814Q>Ch4XLnv_+G1mUqso*`2S}IaxXk3Z?Vy&gW@@EnD>&sm|B$1|k?lW&>8k`Z
z#8wD*#Py!Z2oVQ{Imt(0<3>?s#C!+~O33|rljl2>hi`|>vyILxFU@09%Fo{M`ofjZ
zUYAs=L{=hR;0e#KRw@WgC;)OiN?2s7ZVDb##jSz)1<-ujz=Brn!uq<xp1Q*5slwKq
z!d~mbbZ{ZYcR{Su|7l=Z4lDx67Ijb+nu>ynP1SYMikq#AqQS-I#>`e0^helFPI?N?
z@-Z*439fF6Wk*VCZ%P~qOLqlIUti(g){&yy6krBnU`zNPC@~P&kP=B0kR+l#p?*pp
zM28k$CR<ikI#Z^5R5mG4N}*rcE?%;y1Yr!KW9cPf<Id;cM&;th<0&ZNO9ZkBq)C%j
zgo#zmXjX^}=WUl)BtR-;;mFD+%gR2FN+H>NT(qiUh05QIRZX&0yt4Uq;HvrDD&Ll>
zlI5x-@|U7iS!y__rn{l$K~$F1#J)~WHnSPFvnbzsaio+hUfcq4OKYA%Y9tw8RYNuM
zw>9*3HMB}F5o4G!NlmI?4Gpl`3JwD)RmU>cLS$>nO={zCYHjmsvs-GzmTQSjYGtTk
z?8<f3CUyQEb>a#jtH6q4eVWo+@^WXwd}?Wken_YdO1h0uZ4h~VVsYA8eIrG~bAg6?
zjfQXE8~9<MLj9aRWt0IMY=4QWz#veMM8G69$}|r4>}=J1;>X3rsu8XV2ByYyK;1}m
zlUaS!>)EDFXGJj$WTOIAlYl@|sz#HAbMtf+*~4!BS$);TEzMD)hZTFX9HN<D11^Tr
zXujO^To+}4xkU`Mg%8>i2Y}l@Vwl|)n)ViMnN|)#0A3;<nTv<y5}ebrl?&V&3TTbu
zZWRKw(Q>qL%CxDxY%v*b)wj?Pm#o7usOH`)6;-L{<^bMsCrbu{r0=9rAnkC5_PJ8{
ztake<X$QMN$4AU|1CNeLXvbkDiou<Vp$f=&jzl*X_5WI=?ReD8OgbwQI~5%3JBEKg
zTBL1h3iOWJt6`nY0*JiKu7v`G-&U7@4`OQ<F^}5)i>o`Tp&@oI8#1SGt=yei*=;t1
z>{jXPf^hYGQ0fs~s)tI7=F(*4Cw1>o=MPc!au_2N{1Hq;J%2v+hU^8G7~~Fyx11{X
z4mjy$7lyW|<oz6P_ipd)tmsR^#;>}Ck2K`>2X_tyKdqwy&APm9+5@#q!X}dnu{?U;
zeCZoaAm9z}<02(PJL*>>9S~TO#9}~PB@L30u*~CvPE=l<84OZAA42^&gzh>-<O7(U
z8>BxP6eAs4`69jFFtpwPC8QnJxg$Gp36hsAAfH#K-Vb_$Th!)c#HfmkyAQ;Gr*(Z9
zA+;q7j4q&8RcE&i`DOyZSsKE9HoBuddVomz#N#h{uPWVN<6kz?EIu}=J+>x*eDa=f
zG&O&$uYJs~AcGt{DimV$7^&%^98=&JZ>t<9up(3MAJHrt=f9`akm|84ip}*H6~C7<
zE>bqN6-wV8=M<eR)1JJC(kjq)+tMZsSpjXN`uX-JygmYT`@20tpj*fCrE^ovfs~*7
zC;WJ)E;OeO@+Py}Cueq<?0Ea)_NQC|CI{Q6lh&r!>YuuY^k+y-Hyw{<ODX5_D(2re
zUwlUkvK@}(&3%e8y{<Rw|8q7ad_+)V`igVT_0^nMg>ZsYK#!_?A0Eyxl9>_8dFyBM
z^m8Kc`Jk!$*E6(OKBF@oSM%>k7hXbKmjz~*=4N&C7syIyt1TCly%(PEA;so-#}4+>
z^}Oa16c%MZEkZwt4JLa5zP<!KNW;wLZ|-NBK8ju6kKcaGguPs_bXekvUiyd`v^&3a
znzbyYDOMNK#pl1wgt}sdkRnQ%B%#Y@qQf`0UE-C_nbTU@`?Nyoz49qy*r8>KRoZA=
zWoDyd1>nC*khyA)Samm9rnOu{dj_~H9K6|EgTJ2I<DEP~%Y2cx_Q`czjQ4Nx?n^0)
z_JXm&!^BbCKgByY0~6g1#P5wE$MtH!rnLNKmGP#O-zL)El^ecU4BeE(*ve(tl91oZ
zG2RmQ+scM+iFIv3m$pPPwo@6lMdY_rjJJjTw)J;5x!~KMc97egfSs>gI~+1QzpZ!J
z|L*FypLgwqF6}(S*bUC#VUgMOW7vJ_x0_+T%M9Q3-rHpW?0G|Xh2;Nk>;?VyYPj|o
z;d>s?JpqjU#+^NSnSDj;{mG{G8EN3u0mjIK{i5N>d=qeW0kC{vznOBtTXV2J06cg&
zpdvgx2?d@R9+KG|Ua0|ZnhuGF4j=H3ZuyR`)Q---9-V|99Tp$04;;-O9L?Y#Pw*WN
zs2#VeIsf17Jst9xVe$Au`h>;kgw6egBlU!<`GjZjgb#TlKz}Oq;`Eu(sj&O0XzHnW
z^Qq+GsWkFbhW<?M#n~&Pvp4Q%3aMvG&FE(;i#A063ypIAPdRny-<9(}X!Ng~I;4vH
z>tWgeQYOws;V&9x_K>ywM^3F&^a0DO@LzK3e^$=*n7$}E%>T7=cC`Cu^=~U@YZrcu
z!2cH5i+hBliO~3v3^!0(PIPbvS6FUwNoiSmMPRZkacX6ybb*X}U3q>ZGg}e73(?(E
zUQJQko6{E3JOs6F7@_MNpPOHp>nG(MT#TD`9$SwIp4y~Do85T~>?Ng~M;|n0Uq!Uu
z%-mqnC<r8>*`wky>LN<h+WZKam68<7R$c+HgskTfWf@&z49J&(YnA|Ge+MkBd;{}R
zP-~3W2_orHPThx|jf!gwugDopmGQ!+RjSNYk776B`lwXE>Jz7up+hVK$a_bLhRqWG
z7}#UYA%Qy4>ih4!BiJ7ZWG;;<oUH-FS3H&9hwD{2XptK0*L>5i#c#h^cM>_oYon&9
zr0s((HFkc&VU7*|eL{s5$Y@iHp?kCu6UiI20l%!+{+g_=j3-t1+;=43j9!^npVMX%
z#`&qZUxI9Zf%DrYT@y9zShYC}hg4cp<jeXHJ8PI)nB$MR!8{w0XRgj-yOSTuFV&<E
zR!<fSe2u~!1#kA}7hj?bN|#{KOs{i?mAs(5ze!)8G(vvkU0#|7SKeVjKd&+(5)II3
zwv2hO`9$@+Nb)<4e9N^h8BIa<xzoN(O)JZOzCOAu#w^7SJpmjWK50R2RSK(Y0-gSo
z!6L0_y5dslkr|<Yc@d95Stm3I5O5T=7PLcDOBbpB5YvXLqJxzceSVzFss&cG0|1Ox
zC|Ki`9rZSp)Q;sg65?<JHuSVx#WWx!!P}Y15eTu(cfU@$r!n-fXEx*A4Rf;7&b;&5
zAi-QK7U?>?R90dRAC5M%J~Jw9TfR{u<j5KS^Z^*<92ppulZr2rpWh8}ibwTnt+Oup
zSZ7fnQmzBYD~ehPjLxbDF&8Al%ee}F)RFZPBe9+GsrJg*9$z(gqoKxb*63Rt!m>$I
zWn8po`+~wpQ#$nl=d^h#XU2T`ta2{CZhbM^zA4x`^SEa>wDEGL4HSELGF{TVnM+*?
z=Zm&Es>KYN+-u$2$;wN^kWa#clfH~RL?51sFY6q!n-gTB|5j=n&m1Kg+{(@#dBW>R
zR`|J>?-KN*Z*JQ7G)i<67qyY?lm^j9vv>P>NG|Mc<*)+%o83Vvq4}T864bT}`1tHr
z=i@E{rSPdwakdxJmN`WiGhb@<FJ>*&`!;Y9I@iyqLbTu50t{XksYc1X48B~7I_8a8
zq$^Zeo%a@z_FC4NIpP>+5;}mbRaoPSAt50eDQW9*ekrXR%8dA)BYd8GH#<z>#nIa|
zOHfh2{EDy67{zU<5||%H`L6cihY`1PFO3>Z_gmQ2TaLK)-H4ZBki~arVVAu9dniom
zu19@2Yc3d3^3C^GFMg&DT{1g_rd+I5d~Gt@gr+o}?N2V&owp&1oBr(0x?kV^0Vy0V
zjJ`lV#|MLCjj)0zQ$bXAc9?s9Aa#c3^Wj4eiUt|fV?kMBQh@X9cVqO#>K55rW|tG9
zWy~Kst#6XE0IKByxE2a+R3j`vq;49%;83gMPYr$y1y4dhg?1*YV}At|CZesXHa0#2
zcQr{_oHMcxj0+9A7lr9$_kUjhLVnUj)t*bISRa3_5^@}DIVMBdeBANfgE!b}Zh^}2
zNtbx%_t4z347x6VdAq&iuy=cAc>qNOEjBTgEl(!X{V#+C?@7dkO{NerR=1LyQe;_q
zCR>i5;wKIJDCn3by9G(l+v2a$okCe$w0=q-UF>5@Y1FtAiF-d_+s0NnWbyt9pfC{f
zii5K-lX@xk>0FP9bf|2w`sMYR6K_LGhq9jLbYoZsD$|VhZ8#NfV_R9DCO%tY<H7~W
z+a-*$tQ1a(O>(9HpS2{v_s@~swDO58Jx#gl%aOk99_)>&_y>(*C=Gd1ok1~GbLGf;
zhW<Ai&3z-%GaTx4mcfAc2!NGFA`{LsIaKqM-aoE`>&~(SLh@8BltvR~&a(f9mc&nK
zES>5+S3x!ZZCuY-w)lCTMo7MPj?#Gkhx2^h{(PO9p7CO*^8#bM0^Kg9iSmT=LQB<x
z50gC;)ph4Zb|D1@n@W>)Gv~z){RM`XJ(Ep0=OtjgLSqc&saC3sQh(J#Q}W)aPVtMf
z@W*L0yYh6;hl_GZf1$ZZ@AQDvMFkYE$WmT;W+dUFGFP?8`hD-rMBPPIX-Lr*3+36F
znTu*zf6>=Jy|W897d3FaVmrTr33u#XSi9<h{4X%x8dnWS7b)uXGv`rD;_Cqza6LdD
zsii@sfr6&T52)63sDTU&4J$<e$KD{om+U{NyX*Y`$n64Qdt9TQqrB@=JEObw_x1Om
zOWZD<JpjFz%{|WroSSzILHaT+SHA=>7<iVj7^Z4SrR}^}_rSQff8dAbM}A@|K%)0o
zO6SkZd=+_sPxvVsP=9~-R^(YFvEXZGO*r%g8Ze!1yti&E`u@$uWqAhM5wVX}ZWo42
zLz{E;X5(|I4~aq5=?bhz0-rA`X7y7K;h)|vMj?M%>@XCF7`LTbMZ#p?hH(9Lzg=iW
z(q>W&igq@F1MmYf7_{k@-6H`k-F$b}uqh~VHV7U_LrP=zuS*}23<qS#Kci^0;B*#C
z4@a+r0_C=)B&bs3C(c4DhPUO^DM#_K!RdaQJ8vxX($d(%^2KZgq^T32WwGbktoL3z
z-12?70~*lz<y|9o$_|YFUykOgI|{$1(;ns2_%9kgOkcA12&h?B#x?G~(Y>9~@vRQ>
zRo%yTp`I(D+o~RJ+tW;v5Fh0GBk)K`-<>YaFI7L2+wMR3nxl_)g<jJT)P3mYOs$Ke
zYuU2f?+4amU!HM$TdyvK;wLW;EG-@>^)UXvW$d!lU;uMLxE`9ix-1$cIN*sF(*(;)
zu3zZL;=l@M<1!jlsEum7pEj{Yn)z&ui8+?<BQx#EA>j3{vg@G$x*sA;^P);3xd`^?
zAB{^(+wcG<*&H`aYNz{M<J17q-M*}*-sPU9di_k7%pgZJ>YA;OM9`+%W!>!kfx}?^
z!sR10zr8;M6ErMgs9&{GH$~bL7_KPSJA?{L$A{%mD>8?%^`vH?;p*0JWc31iMOp#m
zK=78l`prn<!&$C+<Bp>H-fn42D~c`{WUhWYGy8A>8*DuIqkapxdborWG#&j18f~Tz
zIEi~iqZojCQhMOfaYq)=u8|t#uZgG>#yO2`Z0|D|5-lDK*~`ELu5C7Drl^7nwOSKp
z1w78*pQeErWbP3|SnxJv8uD7c<8F5tgaLNDigRC{aJ#c$eCQ$tAn0b_gW*fA>`QJV
zny%X-^tHqIsF)rP!0$&fV4QNW@-Vpgk2?(vSNzzFLB=Bz;O@-eS-nhE!p=tR;Muce
z#sv3_Sn`wwcnQdQ)*gd}x9E#Df#O?&WD4%fnqDvcJ?SjH888{7F{xOmycfbf>FvC$
z!o87x)F6bnjwn5buC1mny;d%<3<s6m<LH^fl|aXL@4Ih{AdNA?cO2@jl4)oMqqBz)
zT8UD!S^6zT*geH`^K0|Lg;0}o_$P(~NUHsohy75G{rt=PAEn2k3ch|EtdXLG(f;I*
z1T@Y83wY$8sDNZihS3Cy1}=sNP(gi!y!@GAfrV3e#R#Kt2im+Tf>a23x^7UET@VEz
zh=Vyu(4V>)GdO}F7%euazbxo#D99n=(NcohcjcRt%RHn@Fp^6)rW@jK7vcm75iAcG
zmknBi;I3HuM|cG;LKwCnp<Sh+Br?H%a4#9-(9@w1i{sD}QOvU`(*aSM8xDdyhbIqL
zVIG9xw4G0Ij2~}+UJ;8$kUF9gVMRdW!byq4u*Gn2t-?N%|7H@4v>$qcVfBP6FPwfl
zf(Q}8gN4I=9XY=lDHMP$s25dg7pV{tiFAk(-NqKTB9`O~lfI7Pmy3FnhxIx>TGTUI
z#Su&S8W{~Cj0OlsZ&Sp)wZhWQBhbMLee{z=m&P0n#iSV<+Wz^gB{{AH7#znKb7Gk~
z;(x-zzF}v*eM<P~stzZNn-+)@J@FQ_j{`--ImKhTaN@b;Vf|8M@th`jbX9-cjCR9>
zaEw5%jv(QBWRYS4(btTzdIXU8c)_yxl&N^KllU`u_^3#rpBQdHJXTO1bFLUc8fSvX
zP(tHTf|gYRj!@!>Mq+gUNoFlg0~SM59)3P$QWQ9`0GjyyZPNMoq;)`2b$3$6Qql*k
z<UPjZBFn&@+PJpvpqW~_xoy1eM@30MaDiaTvSvy(0{F{6#oIVJ1e~nZk}|oRG6zS7
z6EUUwQl<?1r}n3%j>E%=2~!_9lXkA%LE<#1*m!+Y2AEu_XWbYVl(BdT)C6_7lm2)p
z4r#)=X^%Z7yZAI%Sy~T6Xg@3CI2LryGQHR%eFqct$l+Qz(`9AST|pT|j2Q^R@CIXd
z@q9N?Y}A)^ZU!qEr<iZ#9=FsxRPxpkNpUJAY+UpN6rTLJ*EcAdftY2K5ZeHd@CS%~
z56Z`xUs_yL@A7fpJE54}#D1<rv9QK8`VeoTl+kpOtw)(7ERgd#B0IJ$yK*Qy;|-<W
zO|;7g6gTlyusEgXPK3}Vz^NxXKnW#?iX<eEB8&^iJ0GYzlaA8^j<=>rq(b5(-{7Yv
z#K(xE#95PPB#>ueM+pq2rq|{R4dvHd=Q|J;l-T7T1r#Ki76<|gMbiqbTMCMo3aG>L
z?RL_~O$seM3WaMy(no2Zb_#DXi{3L9<v<Hd-W2px<um6N>9iE3Efw{0<+WQ2Oj(Do
z1(I%HV{cJOMCFIKVxzQEeKxQDcR4k6>G6zzWLu%4V+nt0F&5mJkh+XmqKwqpnL!Wp
z6kFPlD-3rRwCf~9xeGkU4yCOJ(a#Dp;z%<W1hW=^*p&r2gT6ewDwiE8=ai`cl2lBi
z8&cy03kQKjo%zM7C3bG2UO0nf>-k<5lq>3s?I$4Pm8m7LZA#Q};x!A(o;y~u3{_6r
zS26WgVWw9x1FAb#s#JO-O}Rmz>bcFiEAWkrw7HAbu*028(`n<Y8B43HN2-^!Drxkq
ze7b8a%gSH+*Dye9N||6wPpb+oVf0{Femcx@xPlQI=EPY`F9Rdog3$qLGd*j)c56*0
zs4f}n;y`su)#wSznX$LAxxF@}n-xM^fNW~clG&O9n`cSX5>>q%HPm%1lnt%=FTEqE
z$qU??3-E@k9Q$S)CaM6}3DoFz4IiQ!;9B83rS;o4&y1}aU(G(7x}|L^BOjxFx^Uab
zN5VKfOQW}17faf-2yINsr(VaY2>QgZ>x`tGON`!3ti#MeIdb-)gpr+dR~{xdL+ye4
zz0vpe;=o{6fKa2_3_Sf5zW$z`t+ZK4u_eu{<qwA&RbM2Hix^$72U$7%xmatcRx5{p
z%UMtg*PJMii<cmA>nlgN5`wPpbDLp6+sE8CYy)`eZd-r?3o%cEpo-|zJ^ELXEplJ#
zUr7eNm21+V?&w0Wa?G{GRJLDFw)4Bx>fCt+w6+C9+P&I3x)_?@$iolnJ1`C0W#<}A
zRD4qH+tsZ)9lSbu6*<*-VjOUVoeFWRdBi@=dAqwj_rMKnjqLDrKrG#M#$0y1*ha`j
zA)YGo`t*53Cq0dwV=O9fQ>S4`+(QZ_H$=G5ba6^{S#I(F=4s8B^xGQg;uq^-(drSq
zZjLu-EZOs;YC|M6^hR;;i!b$}DfCjA^|Gx9)#8@J_W~Y3JyO$s`4qjmg&pDEeKOO}
zig1HFX#}TuSmc;{d#3s^Py6MkpJ_`DjPwOLyzJ}S>l9NFYNP47ksWw29r&y$+PlYd
z!NY&061UaYnK3oEbuy?L|8xotzy`bE&i|t&p&f2vZ%5tdMK6M+SSVu@MDNms5LXRD
z92^7zBM^<@OJz+KycmCxdJfkdpXgzmJzwmYkyzuA`q!f|#-m;9J|sS)(a_P__0blN
z5dns=NWd8E^H{IK7(Wy_77iY(Ss$A~jPWsy2LQ&aKaVdfjB`WB{lMc@>*KzFN5|m=
zMejJ5@r1X`L`Bxb&!7p8r3p{?L^<mu4%X!N{SgOV&~H4<pS1d}^8j}|eGjRrl6O<i
zsv!U5DVL(j;C*1w{S-anV?6=*Sl6Srn}+Q3g*Hx8K&MmsWmHV2iqU4$RDs#9GsNLD
z`Ta9F`!i{Hvnjl@iK?>@+u4|q*~p^Vuty>F{;YE&ISvqjS?bj3I)_M}0~{6S&(G-q
zN6A*_Mr`GWq~--}=ckhAXBy|{=I0mg=a*;~R-_izJ}zvyE^H+)>@+U?4eb4!oSI_s
zD)~PGdk^=E0J<fR^b+cT_Wy=u8vhHHeX@FlW&bL<Id^<1`Q>`(@@+fR%S3^O_&-Z-
z8f(Unu&iY2KVTWR=Q04q?d5IU|DQX;*~6>fW`l>1J3?m=s<e-<BpL<)<neb$_@7Du
z2!IX)GdLcamY$Ir=H-{0ClHub^cR+8BtA<ie^dfQ=Hxdvu@~0;b@;kf(xaqy_Vq&=
znukXyEdqN7rlw~?5%krwOG`teYoq4G6U#fho%2<bd&jk_>*wb!C)YO>%xH_Z0OjEd
zd5sT10FZ>sWewlE+=q}Ck4HiCUHWUHr)*y^S5iB}+>vZLG>#m!h^QUWx7<%#=q016
zUPmT5zQmA*h$iM4D7Jha2otixuKIqOGi)H?_}0PUr^!&7#(R@5N>6k~a4a|+3KI^k
z#!9%XA!|y)W8(zLhOu~?PYU%(Ur+YL{JiiQtlgPunpa+7SZEI45!c3<f*3aW?}zgC
z!912iy{UJ_lVC!A9g)Y<hF0b_8{OVKK?gzj%bU%KF-kCJs<W+0)|Kkwgb!7y*%jY3
zef#TwuFZ+sm~|{s!r()VQQrt9#;-J&ErTQos`SOa*f^HkEDkhEC~W=CQg`>At8>If
z3(PedY-+r{JX-BdrGEjxq=t2A@w+#<t0S4FE{Tv1jQ%-`EaO0b2)-U?t_PTkC|4Gr
zm(qcO1xq}4*^$tkW!d{l>2DKO%CDBD-)P^QG5TBH37ayord;WG31wpr2W}B<t^~QY
zbF791Ov4C688SOo`R;&uEPj_ym{uYL*lO3JIfShg+%$YySYr$V*)ru`g&H%4N&mKD
zdu{Y}48^A)M9ehaqEk;T0q8R=tD|l{4M?)TxW-8aOgrYF>6&-vr240Wwxm7zaxzj}
zXcD$ErFinyGngr`@-m};i+g2V8_$F#4t(F)&f^0=a#t48n~m7q&iugq<5DG1UTr+r
zZZYdnPiT=BD2+3|^u&4(zo{5y4=T0nlz=SmdebXg&UrrqEf|&M-mfOtpdKiv8QKDX
zfYCMwwOiQ*2X%YZy9f10or%SuPj)sXxC@>rU%z0S{nw80%TWs^J54F<QrJbVX?Ab-
zsGT$sP$o?L{;}jX`l0)=<o15&JAx%HX$QfUQz(Q*ZV`3dBS1eZB+TFS<wxOD39Zw9
zNv(tmH7Shw)4{$yp0i<d;(7cLm7Kz#f^S54e}!<U+x}`(Cm}f>H@J*D7tsI1``g|K
zhvZ_)GEAqM&mw1E*wlvk{9-PrGemjz=cZKje9cnP<s$PjZ_px`{A<`!8R6Hfl@W%o
zPgcW`TUXqH@?UEiqw3#YBiECd^?z+bo6%)JnQ>olwsUieZ*~f6zTN=Ry4;?%l}~=X
z-G^-!ON>??9@LjLBKhu$TL`}09sj$-_iXI_xBK%ci<0|`xj%>ZmrH*94_9k(-yW{F
zavnP!do_m-w?|$4$h))2Z^-+r%@X9pzbgTbz?dpf5IF*lE`H=e7z{;aS7^chaO6qR
z2Spb_wBS1(c`@LoVahAC5+@vabEu?Yzelu^)gAc=1gHH2%Vv&zMf=k5{~+4vZjSt9
zaMS+_mZcNNA==r*j{`J<(@Ap_I=DU@2kQ2vlhq(P_>fM=LB_Zl6kQ6PLJ5zsOeKSA
z645DKcN}6DoI$gx&?P=|{7=d46451na~uZ7&1Aq(MEv)Xn@*u@#}5_^LMZrON`Oo@
zk?w9ar;{k?9t#LR{Be%V0E9pOz6z9zT26qNJcBH5z3^IZ9&mJp3Xmt6xz|AYi)4O#
z7QbR?@7r^G2ouM~&#!t)pA2Q<N5#zjldk(jy31qQyv?gK75i~5e@OQ2WurHV(R~e!
z0<Fzu3k(LRy^KFi+8$FEbzkap*x5|x>1NBk_^JAPM(ah(ryP_AN2ufPC@4m&1s@T%
zhEH8&8s0~X+tOMge===kI&VbgYm&g>aZ&pWqW;Yr4kx<E3qU3#ZC;X!HA=MMn9Jr8
zv9fyIAp9q(3l3)1e>i-jN}2tY2}p-d_AP}$nATFhO4@#34|5f00W7X9V>py&FJ`>B
z-VzDCd#8Oaca^k#R9QD}b+J;Q`kD0#LG{ia`n+h_%tm{VLFePd81Z}89ceW9xMjny
zS87=)20wfN%?t0CJYp7%e`INw(2<pi6fKxi&c36&i;;Ic&o!m*o$OgyDwo9GH5b#@
zE&Om%Hn_EU&SsO8nGLG^q{MToJNxJ;tj@|sdu^T}KRa<zMOf++`6X&nf02p_CeM{`
z{9_hl@&-`bjifDp6zFozCY+-U`HXzE=$)gxzo_Ox@I@<0%pAN4Y)I%Rc6^xzUN07T
z8xrH;5H_~3tw|1@Q2pkxm>6&q8`tc7!-u=k%ZxlBgZIBKaUwFnLV0=EL~eforkpdr
zeCwco-OquIdB=qDf}r&qaj9E?<FcZ|lp_QF@h^2fQ^h2hBd42|%l?e1LIb4!IoT`U
z-JWHlc?U;9H%*K8L#sIVx{k7B<(_&;X7V)gFx9UI!HP8NGLn>zifmfG@_imm^jke$
zy+ZM?ct-FY^j;XJe2r<WH+@<{NoYm4o0!$NCU(j=&`R<&I#OwpAjwhE;UPKYQpH?k
z_IiL!`X>@Bf3&%cI`hX%cr02(L-`r|hhd6NHV_&7-*<#{!|4uZ2TVmdjI-u%NCiUP
zXctN7)KE3z7T8FAN+$ZSIWSR_Qd!K|y6b;M^#_h$4fC}PGkv)>Rik`Sgagl>+=5Tz
zcvSCa&RcT|I!`hT|K5ic<*=Tj&tenR>>-j_f3%^`V`=``o03{Mg-bA;;L|pSt$iK#
zxgCK#ylj^L@eRC2{quHX82(!8$d#ty2bTMAEAObCt7Os-BKqNWZmnY%gFAc5=AllK
z(eI8fbM}lch7d$rCk{!H_MDT0J=Y`lzbh|iF$rMI=1p-4C9CV<LDvp9$iN@YWAM!#
zfcUDnG;NAJ8m0n)-v~MR>VfY4j_zO`E!#a6iudxav41NGu7<fs!u>z6Z1S%X;C|mO
ztbXpl!7`$EXQ&sB9IoX0OT+JN_dCYCy)I=}ddnO-l)*sbu!c4E7mld94=0eph7FOy
z>w!mcF9hS?V43paPpdC8qc1`l_nwr3O<BzWK)d9}9ij8WsHaKHgcu*{(UWX>xz<f|
zMUY(d6Kx!Nvi7jRW5M=cq1?^AgCa_2X+o}AU*eY-umBeosZsj`S+}8fUsqj;e%YZy
z{|vA<%LEcc??m0*Q2RIE$(y(#)1b{nh|8~6B5Jo7B=_<pNDStS|3lncK19Lp-M=$*
zNq2|RAV`BKsC0`;D<$119YZs8GjziY-3&uWcZ;-icS_3{?|biOKleW8cV3?J>iQS1
z^<8UyR<9H4whDSEF{UU9HWn6e+n%Ay>-rMJM&$RH-;b#ZBsdMC%=V?e!aJuRVVrSh
z)>e5!Nx}vpBE#~b5cT1qB%&21rk`QqxFSDjctj}=60!(*Y7ro@O)d$2^ip08ozP1f
zf-Ry=Bqnd(?-)266G&+Ycsvu>D-uXZ6oA*@&-@-$8ybXt5=crEbX-9DF7(j{2oNnM
z$P|l3f16YWi`;q}&lUp2Lq-W_Se&7RALShl-3&ZuLQV~X(fxwO3xfk7Kog75Jy0lG
zPAFwhr~oC3Jr>ygB;>Pp$S22;;g}Fw_0UxKqd1EPf&|LYDOWJ_acDv4qatkr*fv-L
z7&gQhMz<VR(T7*1jbCE{ruGY`ivc(Fg{M;z7Q6YD%A@3KM|6#auOEkN&V-(S0S<3R
z#5+a+Vk7Y25i3qXUNin<qK_tKXzDHSI<Qc>LL)niB5&IwnYJTY9U}L!ybqxS$58)M
z3lxNQbU9ztgnCqeL-ZYG)GcPrIAhF|OH_AE6ia2)Z&BX~E#Ec>5xyA8Ic4mmW3)m0
z`^jIij8t*RW7%V!I94RXS0@fn0gs}enLH+z+R~ronh03wA?zM6ni4N=>4Cw4&9f6n
zHWtnAj*WGVo1pFg@;XM6%0XraR}SW<0Dg#7f?24{;;LPPG{jJlpx>spSbc0<9ay5K
znE87cj+PF{2$t|k0sC_bj(MZ6B}bz5Y@&czawlQ3lmd{?GI@9-(Mt>mx#~tzndsZd
z=A#42CWKglA>KO45mdNg9Ldp^kSMW~a>5j2u@qY{jy;Dj@=_Mjm=ZFUvVNHot^>)n
z#L7?cF62n@O-T)^OdXw0^}lvA={Kz0L9OQSs?|xumxA!8q)Aq$iBG2$H70fRqjpg_
z^z5X5N=cWfOovRRXJ4nQv1NqGX8aIK7;{IRakrRrPp6*E5I)XuA<rD4id`2&ZI}(&
z-bwS^iP+;n#WT#b|CNc{g=-Rh$a)5dO;W(Q;>euo%i>oDSRQAU5oS}Sc(zRcg#@_C
zmQ%=nnvMD!oSl-LJ>k#Ohea-~o<+%tLru*?i-`Qx&WP`j&6JuGq2*%mHutEH0^K2p
zYd78>Gw<r^3x!mk&<z%g2e;@PSt2l3QXKoG6@|HRHf%dbVlLA{Ojz0@G|4DibvH#F
zkq<V?c|VY<g+r=&<Ms>NP;P)rgPMR8fy!Q-D?^QCg5df*fN#G0_&K7`mXph#8mu#y
zZ;gZXm72>H0dA4b_Z-0V4&(G4Apc|qbVlR`d2ohs;txm{1RyXYcR8Z1!uoRx;&ove
zPOv$`BIt3B(T#Sx;sZx!>Z5EcEK5Xz^@rkkr{c;P27!TMjm=^(O36q}aa0ksHr1p)
zj2%9QhuFpSr_TMh%hqlcky2a~F;~C~WsI{b9l;4eme|8@l6&Xa`mHGOnTsh?%bcpq
zy7@|5DvPmj${m@@N8OlfZnCyLSa-$o)>Cl=oytC4mzxn+bnsQItCt3WE1rfG0Nz%#
zAU*;HpWLKIN)eYmh?l*(Vo9B=G>)%4%YM8VR)#+xguAC<C7z6_^n`Ri>fJ=S%XO6|
zaWw*1HH1iFZF<bkg?pz<^qV@Kr{wWd8eD#Bd@hLuA>79z*3k-cRn)UJFHdVKVrtNd
zssz)jREgLqBpzy&aYGdbs?gJ(yy0Szy^Z!_tDSMHV~azA18Zd)^6;p0%slHY_Oj)6
z>R3_giD8ml?#UW@!K!KOKGHENYxVhz_0A*>9c}eLQgcz#Bz;P7LGxuEgT4!z@J0tX
zeg{BI$TRL%Q>g#*_f9x`8UB-#lpP@n@x)DSYGgcbtR_T&-XLNcUAaLBLl}aq4N+l;
z@I`A%-a&9mHDOydae$f%7@K^$ngGR3?0{wvM>CsLGqY7QE2ueVxyie$84PQF0%+mp
zY+;dVfh;$B1-2w-w|I87BrUgiptUA4wz|J*O)zYA3v89OYMEAwJPZf!Tj!nNqMXrS
z?|MGSUE*S2Tg%<<<y}~RJEm!?5^h7|20rXz-RsF=FJR#+%RL$@#9ROp4Hc0L0m<$#
z37*SQ?PJn#%h4@hGSJE~DMKlmflriSY^6Ys1;A=U$EgHp@6v_mu7l48$kXg4fafaY
z)kzW4`68log`$g03J@#NDBrAECfB9B(4~6UrB2)Z76}8;@BZM`t)1Sj+uW_c(EahQ
z+mN=$_<4`1evg?~k41WqRdbKcLXX{D&;R5IUA%hT(tACcd%YHVeeQaZIYR&E|BVEQ
zy6cOf?T>rjpP=8L<kb&J?@w*+PhaRqPB&)L4&*+s7|7QjDD)bDrVkW150owpl-~_h
z(hgQXAFS0MtXF<*nKp=M9)!LQZ%oi%GIt5A@ANihUzZvBnt<BgL)@n<CsfJNzM$eM
z^9AL-rq@>&*F<DdNZYGNHUGzuQ=sm&P2)WGNTsG*O_%=9edV7*rpwK;n?fU<wIAoa
z<d5n`mcPoQw|y$#R0K?ot}Dx9u^JscmxWszpdZMHOBn%L<aIB{2+Qc2BgBErgHK8S
zvBNYAU_?>-bHh3AS14%_O&)4`Fl3MV>xL6IvflhB@MOE>R(^ChQYtmkHi0<*f+yq9
zZ}TVcbnaY=yy4gg@f~>73cl)4;!PXf79<)%-f*6ldo-@p;^IFydH&~y<453t?1G9o
z`D@s@8HfG3;k+XaNlJDA$16E_rXhEjEM)?SAw|#+sk!WdnWf0UlM1Y^Ubv)&rQ8eA
z`mK$sp|i8G{hcd*RPWGmRo57-XQac>?P<m2+<f%-V#xP7p8P3(^x1`-T{D@bL;ICg
zvJL+2z00fcqg$Pm(=+>|4H|hqtZxB&7;z}uJs;ac2sxP2p`8pbJ`xF7?MqdeJPN0H
zkhqwWkIV0k=abr0+H7kBCG(jK{0Te_r-?f6E+~AL>i@#7QLNwpY`ZmUH{vZV!ZsaO
zcsjwSGoTj60lS0fmZ1p|e6W8X@AI_?Iq=J)(Tk7E^?|3hdXhZz>un-WgX5R*S-OOV
z!^I|V>-HzqGuxlCgVg9+Q)kvzo1$6HY?U>fYFv^^#6K%j8EuYc%k&>S=da!Q9<#2>
zdVqhy|D*h<{o}B>?*2Ude$p<ZslonPQ~Pgv)jI_T<L-E_PmXs}r(0tO39AeGj^}$b
zMK8<jB%3ZbiW^OCR9mlXPLc*nLZW_;-CPdLQ~0YbHG7F%oISKI$@+RfK`=^5KhW)4
z^fJ)=9-p3O$fJYE_#gB1EmPxv0Iqlv|8o2oB&QGm7#!;`6A-eSB9MfJ76;AsVJzP^
z_U372Hvzj3Tdai$Ekg5L`46{EoFsp<=i5u;TbkO)(8EkE6nJ;?O;uiSY<$vCwJb0b
z`v}`GdT+P$<c)z32dj}?q-CLkPA1Gu+NgYI)7r9?gU#^Euq9i@=SA4oXUD^xEpFT2
z98hLId@HD(H+`{%6_|IIoiXSIr=@9)iq%d5#H@Iy(C^*AP7#ee&MuS+thft<78dUo
zm)7s@mQ?m|?v>U~S?!g<H;ebmn}6-@RkUFsGss=!*85d`tR?%^L&AIe4>e=5TnDw2
zAFL1RX3R<s>K9!04jPt&xsZXNr2o3%a2++DPgx(eTy2&d{i6%|*A1uixC2jQ|G1M-
z?yoMW%}F<<Ir4@>>$;D;;e>FXB5yc0r~T|jrKbbj4g05qe7)RfLxR&bXTzdfrOqTA
zhx=!vRg>caV{tZog5x3>jBOLjA_wQ+)#Z3DCf{k<UQA-&foj>Y1(z?T4MTW-{X6jF
z?Sg_v+j7AIgz{W2e3`ZtnX&nHuQ2U;d2qS(g>Cse$OE@SWI2?r+znNSg1&zxT#om8
z!KUc|P939Ge*Lg%vgPg0nBvSUzUA+WFTb5v#OuCRc<G1Otz`S?z6a^GyWK?_%k0@}
zxU_TK3EbmFM+(%ZB6}U4(#<DB6+c~04Y-%?&NH^~?~f<Veeag1Uoy4)T4q_2Bv}fm
zxZhuUs?mBq>zVn2aIZ#9@|Z;Xw-4sY;LDb)%e0tpzlUElRP0~oJ^*9f4{4UovEWUp
z;(RvedrMe&S8b~&_F8z8@)%oE?Kn58Ao$#}+8c{te2+?3?Ajjy!nXh04JR<?;;~T&
z$s(^m0pm&$+VbnQ0(BxuZsUDkb}nYllK_cY5Mf$O7h5rYph_(>>H9zly$3Ok@RtiK
zq<J;sho6Ze*oS^n=I{~czlj2u-7r(zx^|(poVZuTt<fe^%Dk){k92*$M&H@jEt1L~
zS~9W5Xrv|g(5zuy{&t<YVy1VweJjd3A>lDw3PN_XDBN*<om>Mg=UMRE1j{%1A@u#l
zD!EQyGVj(`D@8fATHk)D$|qpg_&lf=R~{E7n9pgwGpG?4npm{^nO|h9Ul|`WKL73J
zGoj=`C5$-8cjYG>2kgq~3Ib{IgJ}XeB#r2XB<X?NrmFzKH(#jFUWJ>m6}9e+7<4#i
zY?ZRn`B4ph>vz^XpWG69%BQ*nILu1Lfl8V8tLfZ4%1L><{fca>)t|igA?rGwogqYL
zph<f2El&(o_VcuQ$izWjGVzW)k=F2~Tdna5H;i{Lcp|v_iws-Kj0(Tu_`*<GA^!Xh
z=LW`P_F;9==sP`)NNV}~kEFIrpE+MUdelP|6LX){70#A=ypJo6x6wb~RN}G}j1NZo
z8gUSHuI0&j(0d6QJ?mqvcK~$#17zUI`s3@94>3RAS-edL0Nq|815d(i0n(kwx9Xcu
zjsO7Ets}>(g%`tG9d}P{@*_+Fg`AZK@)><bcu>a_c}&hBE1Q<ro9o8z!;kqPgQ`70
z*VXc?Hd4Ws+d@yT?dMc=RpK&^{$T7fjuv{@Z5dI7=K|?WJskRA%S%XDq>r=l0rCA_
z?<<v)!9M=9{d|U!@t3`yBp?dJPoAevN92nK`C2U_b$XsKP0G`bX|z+BBe$cppN+%G
z!WSF%zCV5~4dS@9S#a?=OaGYS=~rnVm*n#w#8|mh6m2yxIre$_+^EV@v@Or7GUZw6
zCqjWMO|x4E!~Jj$RQOdlUsP3ux$+wI{8bPC6hV+uv#~lIAOdZ91c=r)T?K<b<*uKM
zuA^Mv#nT~`-Q<t+#xrFip&BqMvC}oG+ECz`4O6ijiGP19g!Zm@aO38bq|+;%KfVz-
zAmfafEPW%4**k2ySe`yCv&B5;F5>o~EM>)toKs+Sp!&zzL(9#6=gVo<F+G!WY`S4;
zc@~uk`g}o4ZWTdgE%omiD}rOs@1@i=WhY;<)S;^Uq<nX)`~%bUtFeBIfHtc7R8UUc
zh)vl`eN5SDv9-E8FBOXC02=cSGlr@&r~Ndl?17JsXNlfS#`aI<y`)tK^NPwEtOM+4
zzgW6FE*>sJantjhB|l?8S3bOHyrn;&*J*YXu*d&DcR`P)GR4%7e0dfW9(~j3s<?1a
z61Q44f{8N9Lmgj@Yhj}ENqrC~1jQvk2e7L(4rq;>CN=%(g1QfoNd46X6_isZ!$1BM
z+4!C6kvIxH&O^*PJhz7D19B@1Zp$8FzrH2@&3_{0kgX^lZPzW%W7Npw9BSgX?Q`HU
z<(h4asr=JK+g_18*U2TSz<}0n*}Zp>o<bJ%b9?y>V$6EXC1RXz+qy`4iRYK=3!+zt
zJ`@sTz`Nikl8+}2M`3svOY_D(-RKc=xOnUYRUN2{grQlGt(R({D59-ZG2iZbOVoc+
zIAj{-RY*v(e)}@HWxy1IC0Sih51x^0B`gy803?+9s*cP)r51Ug_<gon?Ona<OKzUE
zetNg_^b_$|^lzFkFH48dUJ%YszhDU);c^!J*4OZ<H#m+Uz`D6r>lx+m3o@eLpGvdt
z`Ip52zebT*$6F*^mlA{`3PRHcVYq>Q7YRPk_3BCXAYfu%<O7_UGsItdJFEMeVEVxr
z{cuH5PaClRARa@pX(4pNZO$Y!m`v>cEN)m&Lg_?~eS9nZxo7+XkNv0pP#4&+{vaN=
zF+?fpgbB&E<b3hr#BCP=yb%9Rpp#5rzz!y>0yI#hFYq=8^_d&jJ8dlKK6;7DfTrpo
zhq0j1aa4vYE@P~~5Au&CLH=!V!8TIC%Z_L|7F-TcbSFv%33I<Hrx4_9k(6;T-*I4#
zldn%7DoEb1R4%mII5Y%;3YMqUQ4gs*4Go0{x8$H3Lb;NlsIfDF7VV+wGhmTpuom<I
zoD1Q~w?HlI3pSJj*H(uKj)kSnV5C9Aswq)xAv6=oVHK;P`S5T!5Yt>6tO*b6aH9#4
z^KOj`$B&7ScXIQ>;%dZ-EH}dH#`5h81$RO`TcJVieUU%0Jcgi=Nfwb%N9=}Bu8h#A
zB1fz@>`{3r5ysn5g^oD0+M&IW;9qXh5I}g)cF29-<D$x_Wvmd?YpMef_BF&Ix5~p|
zIT*hm2ci+PVG%*61x6Q(q>hihgzL|UhMtPX#+*hk$wwx<rLQ!K_4pCTdmYE8AhZ*J
zgUP2I^7XG94i!mrq5$qrgpHI>@>#r83i>M@Q8G*H=`jy#w}e8?1l{F_1ihNLHq4Or
z%NI;3!EdjH-|3J#z!S?*6W;@pU`_x$hkx!c!IEg}$c+0@O~IUYj*sLa?q4}jUEMjo
zjlP=4BzRk*`ZjWa$T-^6AtDZtGYEyh4u(NLgnt>5O>C<eOJ49QB@xD@oRUHTj7zsn
z$;yQcwWaV$rKTIFwo4@h!BW#YQp>PorLfadnbUrm<9O{v)TeO3-BTlG(;%m5Am&tc
zj`ZYL>A|k)dD?6R#_7$o>F)kdhQQ$?VA67q@ILIfk-0>(3SskN90TsD2%WSE7`Z-i
z#*|pb6aJJ8%FMWDnIA7hkFVKJuc^m&LN0b5*e`bi^x#?H6Il<(nOpA69F1v;SlMCB
z*~K9gH#*rqu~g^SIoc<bhu2x8oMewV(D8~raHxWRHs+K`r3EwPsuEJNTG5KF#&YOl
zk7lRwc;xbn=LzcO2~%@-QN)Ym#7kP{Wx+^Aicu_2@)C(s0GQ0O1NPlLxkA(sa*F&u
zhYWRH6gouCd&M{{@mQVR7`;>ngD{6r9u7uU4ko$|pA{X<#T_g;9jvJxY(4Us#0%aQ
z<~S)9IO-PNQs%f(quAfrd+*x&&e{7F=er_`7J@Q^2a1AHp^vFaA-zy|5Hv=-NNOOT
zUmSWH47(|WUH8D^Z(!Nf#ku0e`MM9qg&xJw)Z$`9ap_!f`Au;pbxE~&Nv&>4y+;W=
zwFH4c7C}o|Z%W#zOFP6%yL3x?JWBgg|Fl4d=1NCyO2??nCdA7ob<3ta%4Sl_<`Dng
z1?`Q?Zx1W)C@#;6VctgwZ4oA)idUTLR{Zj)uyzMvG`v;(Di7$bxL0%l&{Q7v*rS%b
zyP<Z#RH~fMx5pi<y#G~6*kn%}Uite&6-l@~Wm?s*`YOWPa>2DK@-%zq+bW6=)wEoO
z$SJ1Fx@s2BYTh(qoaG80nwn=yHM^f{Skr36xoWTnKS?&#%#hV`d+NW@t0n$Y`*hDh
zF}(KZ`$Mg&#0zz<+Dm~tB`*CBN_B73>O|)C^=ax5XLVX>FN|^P3pMM_JjE<Z>b8ox
za`ON$OBfjSp4wZ>I^!06#g$BprE(wSmUM3DrlPi|Y1ktYVV-|mInl7E0SNYl$E??<
z3)CEI$SkAD)#buBq#F}&;f>GWASJ?7y+)Q~cx-shI1wW4HowNdan=t3D^bkaGb~V|
zFTX`Joz_=1;n#5?TA0PtJrQrxgc`Y6)6bg5s+zV<8*8h@dTwd^(wc`o8{<h@x~qVr
zY0Y`JoZoNhrg2+ZXv8M<T7K@e#PT=y0$LZW>js(-VI-~H{H=$No5PJ@A>*w(X?3Sf
z0$idE-|jq}3rlFRvYl8(+R*gdFudBZ(%X>vB;2t-SVuzIcH-ylr26f+AizTj%Ksq?
z^7kEKZ}>lV1Y{OOwVP`cDlqqDWDfpk&)ET4oO&Ad?>*-)$Sg=s@84OF{E|QO5Z%kQ
z9>^?+WOJ{(YQ=oUQM1qJ(UzMlavtKXPjE;mIE*+jGRi;vPZmTrIvHY`n3nF&pCOf!
zo2QLrN<pEZ{L(xaG7AzSSyl(BM$SWglys{97TAQ$g1l&HZR`KiJv2NbF);pl6gdw;
zH!-U<z3_8kZaHXiEgcJcYa2Nav43!Qbi9LVy>g+lewFZR-ca=R_8NuvMk^?@EdcA5
zFh6%wTO<UVrCLX{oAC{pQUE`Py*#G}S)2-Th#;=cSI}os%FyqR(;Q&qF&Ut}I$az}
z6TO(MO+gl?o=T+L(JG$Hk3Erz=M-`g?4Kx7&k>4LtlNz&q$socIe^7AU11nY_eg1q
zbE@?7_nYS>^|o*8?bgaKI2#UC;4Wv?T_p|n@~u9oCTQI7W9g1ylK8do4^?ZuF)T`%
z%8k_<gAf60{0X;J<Q?I4IK2u2c}IY1mV6vW)a^}Inha*DG}Rx>!=3jQhnpIXmf8Yv
z8C09$Cu@DkJHkkF<Js0&o>G=-3*usLrshu;r0Mc#xig$Wt+o03Z2No3f3hHI-&*f)
zug><CM!$VSejhN{mmffA<QB_*Sgg=xe>~ys<p4ri_LV@=4;CvylxEPCU|N^$l@P{Y
z_SMkGNfxVM_Cn}t7<c{lYB*mH`&xwHl*L-)znD_nYtd2|9RGVBg2!hfBA!&L|1k|e
zX{FS2Z8O+LlD-)X1XNcP+n`ou9cxRmD1>dM+SKoCraAO*u%!d})cqhP)kd4?UcYv>
zvOu{yTd409LFSo;`&8Sx5yErk01U#gZTc|rKX-&z;v5AKmtBs$0J|I6f~+K~-L#yr
z;w@NdJ)*FXg0{GrFdt!M4Xf<n<D#fr+_f%rk!>s?Z~1LylNUhFxl<`a>WRD~fUG#V
zYNSMQ59+)&70ZaGjQ4ml+U@4|8`giP6vJziO6=-md%_O!ewK6Dqt5Z(mgAj_G#xhn
zTAY8?dQ+UXU;X_?0;LU@%vIKY#kzl7a`0>)rGvnCu%e4YUB9Y<;%wWreZh|VSqsq;
zxC)Cp+RL_u@$!Sk;JfY<sR7Q{gHMN=Ibx&$5@!n=qf(eWg5p3lkQ9yJ^xb}2)^d6p
zK=Bh-+jCO`#IcjQ+@mr87HzgH%A~e|lar41J@@p-kk4P?rfEDE<L~w6_#HntdGAlM
zT0arSQ0@KD@UthEr*zRN`e%cUFY0fu=>exYm&LXx<?ssqy<PZ%3#TXi!8%UOhilPM
z!lTY1!_%&0*^1(${!U@jfZKLoHJ$sOee#9qPOXwk-NuK5175q*twqk=V7m>8qc+?J
zm$e=f{A=5Gu2HLv?oYfPn`mrL@28pq>Ml27GT-iDUA|wN?N+1hclThQM)huXlNG&h
ztBx>y@3Q=(p1<FkcX|0clat}f%!vb#O#m9)qgbIX0HHEFSUYGMzNh`s28`PDCD>2+
z-P{YsP#m+T^3t0VrDP|tdKzf{8iej#%}$burFq7Zlcj&vp=5g;pavv;WNpC#6s}N{
zSkKA(*zgJkWn6|Y!jQ<s>CNN0O3%$SO+w9tE+SceRn7d|NAIyDL>@kCgiA(b<ISJT
z@Zl4MDd}UU4_NfbUOV{N7@N>g$#n4-DnvQ!Pu@-R5kFhR3RbUOq;q`N%_|Iu=2B#4
zND=L$ed36!iUR`t&pgE6S&*BY*eEY%d=5SU8syJBL;<H(|6lVEm3VDzqk(<oWW;gi
zmi|C<9VI=x@i60o0$u_~c?O^pYKLhD@1t=gHeJOCdHF)(B==`j`Z%esafPTj%K)nn
zXXvBpNy72V!}f?ajhWIm(I(3gT0zbXQf+gw`B@a%c4w5+{2~d|ucPG_&Y3r+z?ZRN
zsvwLn=%C#q?KsP^fZ}B}oZ+I^mdiz<<X;|gZ`0#t9>C)fJ(hVBHWqT4*&6;%U-C)s
zp$f0V-bUAB=i}MJl%~-%jl$j)vb$-jIJ;}6XSS(GNGhor)$|QDzr&}BfvRa1v%(GD
zz?3q8DkuF|Ua#te(E*@;6sP9iXFWP7wHSWOkh)8#t4}I|SxEz&+6hFVl>%7H#J?gT
z)oK_P!d}R?CO#A&#Mmd3_7<W6qHt+HA#_O!dH=@T*hH(5)354__dXkob#|B4K}F<O
z?vD){vrs?bTKqBY8pV>@@4+AHI*o0I_2;!`4i)P;^U4fuCAb!%lp9j$c<Q{ko-LQh
zHxx4;_C!diu7@c$l0BG|3uiQOY`;)OOynQtm+tZHvuZYluG)1pb15HhDl`LG?0JVJ
zSkHHrTFi}(5*8$$UKz`@D(6--@6VIo@hW`VTRqaaD|rkkQEHQBa)`sz=S4eu(=Kn!
z*GQ{Rg2kZFv6OqP#BK8!&r_+BW5pr%c?1t(^qVdXm8vkUp;hvxf7}s7N2;P+ht}wC
z;g8~fzSi(nULQbf?1N)Hj>|F%V0wDpKP_5Kk&d^)sdqh~JyM<2Ftowzc|B-|Ujyk?
z-h7sJJ+u+)^a^?x>E;1)AKM8^Wf0gB?2E9!HBrqFsxjyJvT5QdYb)8~l8iw41xS~S
zddTkN2du0H;$T=5I((?IFhr{#cTRbgU#4mK*@5Icc)LcUxN>Lri!N2Ra3HkC0Ufn(
zVzTJBOfkbxD+L0!sd~uQ9P9h^`qfl2L?$+sBAt23Z(Y*%Bn2w{;T;om=2`wK6f?Ru
zn_bb{*{DS!GRi>}W3DaOv<q6T9&@lI5-&B5cgfh(lFX%?Hdj$!k3erfOq^U<7*BC!
z-1R1wSe6iLof4tDvW=6t^AxiqyQ0GS7$@~kZxQDyYUhI!hI6l;IFU$am-H)4JI(p2
zMxbj?MdeBKWcvamfjdG@H7L${eO<-v>WlVA^knlcB1~8O;UdGc_T}droLXDR;@H?(
zsJaKC7$&?bWF#<`#yiJ9Myw}g@!STvaz}12{3Cw(JZ-6cP2pRe_`SkKx#v%O_UY?^
zkn(k9*XNrQay3tUcwJw9Z#m4fdoy$L8#BE(<0$=Foa7h&75U@41JFJE2W|yw>C+ql
zh7>@DP3?L>519oy;+#3>xGLj1%g(g#Qokp=k&ehbFZkBEqmktyUYdDPCepb#{`G1m
z+~`+j!#$Zpmgi4Rzsr_OZ&DD0*NTMS6&(DW`%iI7B5T;5?>A|TZ(25=3*`jEZ>RJ?
zN*&V&?8$~ldf5c)1-@AsBkm$H<)0$Xo-*Cl?fCF6sEvI59z=B>^3ry_0{7u^&sX?v
z+IQ*Fx0(oq!tRYmNrSv5bR>f+t3Zq9K2=+w3ZNgJg(vAYH4-RQmh4wn<wvXSLElG>
z9Er#j@h{QvXO;iT4yERV`@f#{hn@KI$vZy_r52?0Gwt>NB|-*d@|P4PM<MbMaibPv
z$77=mlx}x>wH2TY50Ho@{9VZ+H}m=ZjPF{d6_cy)>unY-Xu!+UAl)8v-K#)Zqu_Y;
z;P=8o7FXo9(BPc0V7p)}2lkKyBLJQhzyluQH520V?|BGMd5a(sAG1)3^(_-)$Y-yr
z(C1U3+N@wLS?~uluytRMawu562duUUR>BCAXAP5)4SQqu5cV=SECLFSC<>F@42$gx
z3t<ljVTMbXg^LG=ixq~8_JoUUh6`gv2(d;8%0>v7MLY|R;QJ8b0w;3r!yH16M6gHN
z5k^j4p*p!l&cP!WW+E4_B9|$nRz;)MwWBuOqL5{&U3k>~Ow{33)G=lBsc7`Mb~N&Q
za0Q9Jfk)rXL?fG00IL6HO5x4M;9tiOQpNr$PU*ywyT?+d#8NlL($2=xU&p>lG$+8e
z5W@h+8OB|N#xd?Z&6xb_jzAUv46LA^Z^DkojsgI%pqW2)i5G>%Gw&E9TT`<FCa?R|
zICq}PUB`cTY@*bkAoS}Y;f;dHTX2G`PNHvIyo8t{Pf((|jwIJ+;+t7PZq}p^90_JA
ziBhx1me+|!vq@I{Ne(IM3XL4jJ4w&QG+e>SqIJn8*hwrK$>y`k{;(t!DoBteBrpZy
z6Bi%e4<UP>tbmf@#gQWYD#goP9dezl-_M6%nGyg?$%a9)MUcy9(bt-Rw%VLRDbcXT
z#H86rRo56bI@A?Z2}h7r8Ei6l1^KLrRCOT0Qs~c~Gd2Ja`!+4tF-?OA-~$7+q|gps
zlPUzf!Zi#X%1Kk#$Y4Kz^1VHEU=|O#5HZt8`(1~0Z8l>ZOuHpUx?`C^M3R}7lW_{e
zJyOVAx=y>We8__AWK6`SKB>uqIb?}oXI#Uit#?S!JmRO_v-!{fC^)#dy4f2r+5%<?
z5&j&~-Rxxl9D$r1bVO$F3I{zW3FAQa$u(`p+gyIfT$-CKx*HPSo7{1tJRGZ3E8}dw
zId<+jVu9WGM~J-ei9GI;ycauJLIdn?5X7<``DC0KuQ~HX6=j*NXf-_YGzVCv=Tf?e
z*p)npRXh^pap*v&1*}Ac#y9!<J8WjU#1@=|M8#A#oCP{Jta^%tUK52(CxuF4g`DDS
z9yr8ExRlim(6N{tq*(M7A^ScR7{ZByY)Uy1LmBv?YK;YHBrsbdwuEA$q?-gE99UR3
zEbiukH6xWM3#T~9s=&^vm@>9FTd_D{y!e?SeyLMYFeebrFunN(f8_Gd9ia^Y2v5ea
zT`iVva7W@<b8djBh9ViVfNrZ&YyZ+xE6(9L;OMUKIP$EJ%8EQI6c}fF*OZxkFZ0S~
zUEwUx@`uqImg@$T?}V}L4U}ibl~DmIG*~Lm<^UH~6&d~&6xkJuofT&{6@YLK@#3;E
zUCRkYWvsNyWdD-uxytZgmG1eKL5h_^CY7(wIZ(KOv?b5zZ>uhK`B)^LJ+ZFNcvY2e
zDzcF8vldvz-BH>vR!PofA!v<NT})jXmrWK^&0JIMHC6+2<iv4+FsIezyaz~l@?*({
zQ_mFF5-`@%u++?Tsi^HKT`Ja1h{qe!)Td2a;$@feRRb*2>aD`-AtC^E;(xgDGe|f7
zuSUiHvx*+!`j;E;brcZwmx@M?ELLBI-v4W4QD+dTq91+yo6PKt*cPNV`>RpWoL4>{
zd-g{~Umk+|eEu3)r0@&-8v3VEVHh579h-zCGe1p8*GWaX@wwoP0=YaWtT?i;>`e*M
zjdv)oQ>{U&XpQ>vrf+TSf-PkoJ-vO*U4{L_BcsHF1!G7RJ&kNs%p>t5OUo;(YwH`E
z|54FM2mbux*X7mq&F$U&Z{)}#4y}A;c6$I838()5!jI&3hf@mtFZ>9tLUn$BJUbFU
z(qCOL_)j;!|9{~}#`EOkISmGCVc(0?^As}_>xzGrXxAWBbX^HjMR$hLDb<(G)>wQm
zHW;ign{RMf8^};<DF4~ycDDO-u%Tk<8weGbUKw7w(iuv^^>GOPUn+WWsIg}2|4l_Z
z;4V)@-jetM+X4urr2e6zyD^Us?=3w1G5(>V2|fb+cP430T2=pURG5fFzwl=Hb&6Ec
zON-6k@>eHpe^hkl<&rlVE7Z{EoX$-igo{+su8+j!u>wiVpgF$8ljb?JlveDyfm`lZ
zMzl;(NPB#f&S90Fqnv%shpZKAHA0lNFDH_Hb9)Vhae5^i@seEZW8|wO>HJvbx0I%F
zrrfjZ3G)XQ%n6$E3L8l?iJ_k<b)6JGhkx=XDuie<>zE~3)bIR^vaa6QOrMveVk0%5
zu*^?&{S{M`DRT;&Ol%^&kt6X%xyegZ$uZx4-q2T_m8?t_0|NZz#;3dN?i6JQbM8X(
zov7FIj<)5@G*Q^ap8znkaiWV|Sbr3kDB}P?!27WQ&T^IAUFMhZ1G~uCmqTpO%UbF|
zl85SkYHVanVoH&;cAOW%Rd>qoVO!s>s#NNe;Dc*dKIlZVRJ@rvm=C`d)FZ7wyn%96
ztht1@HD3fv*fg(;E0MI^Z$i0he&BGEw4-lfRlGPw>2~N8SS;c7T09iw?|z2k$?vsc
zHRK4#+PkgjV-dM_ctMnxUR`~KQfjY8^Q}3z_j<tGRz+yObhVwKiEUe1^0st!;HuU}
zb6hsu!f}N1$XXLmS)_$&;&NXEp!!}fgK13tTM@tt#n@KO$0Qz^>N1K?uAeJTHBj@i
z?;JKn*oJ5|{Jid0iJmDtxvU*pJIF{~_8I-2xe`)gP`y~0=>2SPmA{;NmH#!K`-4rW
zTBaZpi5`5lwh+WC?h76~%Rq^hZFSj9NVe14l1`(CuQ5db6yJh+X4bjXHw8B$+Ht?t
zADNqIHJ>=LG(SJPDWF$F9eusTGfz5+DTVTnMnx;Y{hj?i;`@|HhF}>fBif?(2d1kj
zvTRJ>JL$2fy@&9X=*iPdz|Z{(^53^heynwVs0e1ii#&gy<76OaJ&He3`YRudP#|t9
zN&r=Y{|NPVyDEq;P$QH8Q$gdEVme`vI)DmWPZUhiag2SWlY?%t-9Z!FE-79LAh6!<
zWQb!6C8b<tw$bilpmhvZY(^zX+YUHkB*M@@>mr5Cpq@PF^Hb|2FjGWcWjqyTig1}(
zrE~|-3*_=gT0drSUAU4Jg7Qa69OKjNg$7HkYGD4HWnpMs?tQsw7^O~|PmW_LPdmv$
zr2TH4oKlB4sO*h|f5JL3I~B1K;<1FC;1Cey-y@5EtLRK8U}Z!Bx4FWg?%Zh-e5ioe
z8Qd!Rg##QZ25Q2}?w6p=PHq)kGs5E=GM-z3sF-dxhEkzji^b!PJx2qaRSrYsN%SY1
zS*feVLhP6~(`IpsM619<G`Rx0yZS}seLEv&1MwN-wOf)~v#OM>0y-xP=EU1OYTh{S
zu+d~zUiy)Z1yD2PFzK_GQ}3!XO9?&%5Pv0;;o=Mom*vX~n`4)wTOPmhBUNYKuu!=D
z@>a5-HkYeKQ)%b?ZAg!xsz8RO3W3LWp^Zru2{H?{!SnCJ=wGv5-@nxu|1#;xN~WYl
zrm4Ac{f=EGQAyLl{C)hFA3UGmr|Xds?{6E8MBn6;MtXH>TgHBPC2ClPW5dO;%&GNd
ztgd_$&h@cBXSyXUufhi%(-3tpvYj}ICRnmmn7BmShOfSA%8lC;#x&diBCk5h7Q;*+
zJYv{siZb)whVK>E+^3lOT7)Q%m1EA_kAd8}@*s2@lajF6339UfmNIsy5<T_f`i9gi
z9tVD=g%#agcux?TQ~X}&#xn|{kq7T`rd%!qJh!(vlNp0w72*uyNS6W2k1E`Hl@?D^
zFPpbjDm*R-0T+nNmgC5$9$RBSqbALPn}bN^$l#}wi?c^4+Z7;8<>e!EP-`TP)WGR+
z^+SD5E91CIE}(lkL2L$(5Whe0;@wKD0UVF2z5<Q(c{RTCe&_lOuY|BN8;K@fH<$we
z7Ta76ZolFq{&-AF&5cR+sl9hwJ34Bk&7_yKP5kw*f}kIMQy#~gA|2rBgd*j?RdkXQ
zJyzR)RP@kiRLJ$vU-*&I%`cSd@={Y~U$>OE#F5<zw~?C6%b~3ox7VW}{Mu|x6(pIN
znuOn?`r#`9-85?g<47LpONw32w#mDjXw~gEK#WR&Y=aRoG9CF$QUzU=6cnF71!OFp
z)c`Dr{%Fqb0_qzS|4nATC?p*OqnchLM;4J}W=Wfi$Z^tAdKk0%!E1G{Cek6hdRSIj
zs3vCp*B^z#Y`GcIidp=G{ZsXn*x|MkeNPuwgIO9~;aFda(qgi_U2z+SW!ybu7I|X7
zNbDa-c}=G+9iNHd4L))(#=7IZ@d;?awL31_zF8q0eTVW!+9CK;<=fkQ(I%eX?S-b#
z$!U*7HDBPL#@NrVU3LZady1YWlz43n$~HbX(r|=KuPpO2HFA>MIe&dBvn4@cJbLiJ
ze)e_1*!8s<>WCi7x&Gr8TqSdb?-{?(WylTEd!QcVxvg=qy;pmR%Lv70Rp*?5pIF9f
z*t3K5k@i{MSeA1AbF=t84W0M9(|A1v<^rzTu45ZMm?+DrM}Dm&FTepWy_nC+-NYZa
zp7>^oty3Hg^=r05lBPjY0xv^bZhxMoKgHZukn~_rc!9)^Nahd`o=olCv=v9^kDDyz
zc%HJZ__%<Yp3LT;6uwx4AJqU2=<i<8w4U^8d7Tn`^Xd?Jc|7`Xx2D11t*!O)$28mh
z`RgoiHP@{1rI%l>9!dUwm7F!U#qi|@z2&!51H;(SgY%v9H}8?rrK^h~Nxh5FkcaPQ
z4-b>ezJPzb@&BKWEJDqz-+EcU3DW4p{1B=&R`suu#nE;^i=0&3h7f8Tz!)M)5)))%
z8f*>;{;?5kKjUdbDd!{_GVwLU4GR29`3k9}z2#+m;US$up@H(j1)oDhMCtsrUxr-;
zM{d844h=yNfr$jcA=|nT2$<Xu{HhuZg6n4YfwP3d^0yy6V?Kw4!-HYaFckmbOgL+~
zJQymfQ{xsE_B9+X8vL~&JZC1XwU5D~Pp922tO`PpuO3m-7j9b+5rY*m0%z#l_Uyf4
z7>9>5LKwgIh0sGI9ke6AIe6}@L|!pQO<6=70it50qpbQO=(ZzwA-KS0k3TA!($Ha>
zbYB~M+-B?nk5rRp1k6T{Qv$AMNca09H<qJ)En-S3qp4$K2*Egb*CD9=q}V(7WR|f@
z(CBS=%rt}!ADfIyC!E9*n?@`Y!#$1`7<~{E7vL7FR25x^6~_dldnOh?gN4s$8Onl`
z=p4b^U~I{qcsj8JGL1N7-(o&CULhwEE#?7V1{OLWnn1x6)7KfVyhHbLCl=KyW{oc~
z8XoufI#GxN-}pLI6-;X8j&BJ|G6cuo#s+@?GwNZ}8-Qb+!T9!K;FtZ;idD&W?#ZiF
zNpd+1j#T*GVDS5$#G_b<t^#B=HrWZAA?Er~cq7;pJ0ZG1IZlB-*pf79CnZaa9!VNG
za7<Z@Ny(E>5m%ruo_$n0n<{smx=NI`z?YWimih*mmamg~Fb?s+riV8^LRf~CQ$bcV
z(&zXb+bbE<b|637)9V}KTdwIQbuua-8PY3s3$S$TxO6)8WR#T*17JoScIMnk#vDh)
zzB>S|4PYvqb*_{3OU&#Nl67(QfU(e?dB71#Czgr2%zGybs4zp{!zSP6Ktc83ZPL=%
zGRt;|$&PZ##39b08_QmPn~fQkJ+qS4NtLjsBSoFcL#t@|2$0KUl|i7MJMNU5?3~lR
zliQDi1TrHLm`s8=+`=At%m|=F7?<R3-l*FX>0Qp(iuov~$>a|CVR8A20}KXWdQ}{D
zb?SoKDuAqF_Al0)=GTlkpy%(4*|a>wQHcvF`3k?hEi@Zou<!s{iL=?v72cc_stgpI
zZWh!sF}mmi9d}us2dM2h3*Bz)JalPp$BRghi)@LZ4J-^{NPt8bYt#+&m<UG92Qz*P
zOWLJ}>;h5;o}|yg?3^E-H4ql-Jwy8PV)1KeP{k)mTRwYDjQ_Y;lenaMmku(Q8<c7n
zV#N^t8oK3QvX@s<mI`a(w9{~B4vJ6Y?<<ax&RoOxJjfOq;S8vm3n+0e3uP*kel59R
zMF~_lT-PmMtN|E8%6AdvT`TFI$LN~o$_U1Uj8OnbW-606<?}=pVCf2d;|j#3-F0!r
zY<orMN`)Ru<>_X*E#UczE+v-I6P#N+y!pz3v&ulCstRNKXTiA`)|BYkRh*snWP2FP
zoFI3m>Z1;O)LV=ma!O7vp2vHbi#MdrL^U$Gl?1!$PiS5-dGeBQ*(JS_!7(%}|57WT
zR$Ka*?w7EYEg|q9s#p}rh_VIzE2Dmm(<1uETh2BM`d^%Z(euxdO3eFSNB{Dcy~PdM
z)UE#w<$Mng{tuKh8a1NikGH&ZELs>Ngyak~`-CU`y;o!n^hA2g?%2wKe{lx<SkQyR
zAStQ3O7WS0R58!jw8A1cZ?e2nBxfMH09sRPSX_xz#ZBtfb>F^4I5&57_w-V>whclv
z`bNjbD+h*tq&7?-Rk8o%)Dn1R0jY{L7ngTDIyRBsGVk{8najvAQWaC5p5L2WmYieL
zT0~`i3;5JUq~CX(A{|KBP?^V<o6{Zsgmb{1l0R260tw{|UY#MzeHF`Yo3FnHLg|mg
zQY%kaa2{5IV6siUfjOEdBwhaUI_IcnYo&1lb&%kUv5)(q=l(+#b4`KNKJz^a*8r$O
zUiWusPlx8td6|tSy#tIL=#jmeU;II#Wha;7sS)uAZ~Ez6y*zdnW$Bf{r%w6{Vbyk*
z>ZaZprU`WG#y5*28+_(bIuy0$lEvw%!mJ+W?X@M6d{K|e>a2Y;-hCfY*V#BUsJFkI
z-@m;K8tu`+mD3Y%44xfvM*pNb`f+ueINQWkDC6e&%zVw$I9i`~u1CAVdoEGU&r6Ud
zGqC4{TZ`wb<Fx?PZw9yC3fDWADi3xK;E)hi;u)=F8X%6vBS)9<5Ndba)h$M6vKuWX
zMtngxBcUlr@{C}bo0XN2q2uW#w<q`$OksR5EkjS9sjD`ov&c|gP2r@_&@l1MSd-|L
z`@TT`o(tLa;7}=1U|jYAuq{q#btc`@gI(%#xa<oKW=}VZ#)4?kx7v$z#!>z2OwWFY
zuqIgfH<|>S<x{a`2rg=EW#}hee~vYo>EH5K`G{Tg*%V8hJ?F6^WpHjdV#nOym-X5r
z-+L3bMG<3+*rB)enUg8X3`-qIH209Ug2AljcF9YsakkCX=@rQ-ss<3uQ0T~<R5{|1
z)3kzU0>ip8MOAbttc{r_|DifjcDl62$!xZyY|?CgET2X@_n?8}D@O+^kk$yv8OX#v
zL})Vl0}7}JL2duYsM7$N052W;ng(Aiw;?$L|H-KDw<Q3z^aJS8>>2;gsJEjl+nn?n
zZ^SwVGW^M?Gso{&<FdLgOZ9P2+thS0Y2KZVxczi|R=~2reLlu>W>afub{7F0SFR~N
z8&?l844I%7vc2e4lPmj*sW9kuF->gVaxv2!n{$qCSae@GW7?q7PHC>0{c8cY=AeGw
z!BgdO(PimpJ*A^s<>j*Xt%?h!pAw(wQn1MHdI~U2^VLF-MC%1bteR@$!$#8U@`lY%
zS|g292B!GpGr4l!87q1apPL`BX!@^v7J10MA|Dea57Z;h0#V-9!5893N_)i3$9=eV
z4yQTV4pN9QIbSpsR6@ghz&|(xt-sLl7y)M^bc75*f$v_PbE6@|VmH~8mA`L2d(|H7
zf93VQ`0f0C>9@uAmq&L5pks+80JhspG*$;cyz?wn2CViUq%q={>DfQfwA)AY9mJ?6
z8NZ9pwD)_di!za}jLB=i>P|lv=6JU<tUc4w);uP}pI|g>q21ZE;2<bAxia83^SbVi
zPe7W~cpy}}tCE)JnZmo=UdYUw+~?zb8VSt3Q0?xF2mSG<I+M9w@EMs@FAZKJQkJeh
z?ViN+6K>0Qd7U#evI)&ZY>o*mo!i=SF`~;+eEoU!WIeqvjL~AA5Un#3xd2{MkH^MD
z<UjUxZdTAeje`vRhckdzz%HjS@HX|I-ts?Hv1|X}$D7mSHoQW<5QQOQ>N7~6a^bV&
z{vk8*vy`!jLct=1VJqFU)S00|;fDTUJCC!p<>pbqjm(Hs>RI~r4Fx+fXv76^mT_rZ
zh(7S7#bYiW>k*a=>S6z=&o4&cNV9_3Id+~muQM7-5T3MAew&Ha<D6g}_Au(OAsVU4
zho{8%F(_X{2EzxQ<WUd<<eYcLYe19Ir0>lX9G%_*3j|ZRf)tc4&fc2#)IJu7R8xs|
z{~onYDk&jkrp9urd4yI6c^xFL0dsz5%u2?jWT2`Uay=RF=DnyUnc4e$#~<^iLJ++J
zIV}Sgkm9ZrpgT@Vdxw8&+>0z(RcG({Txv?gjcI;t8&?P~qt@3kvS%&_1*ib(5sp%P
z3XiWEMzH0?zoDFADdh8nzDOwNi|oZKVI-6@xFR;;^K0pDK0pl5Tlbu@4vS88-OC;R
zI%{nnN=1p9?;XEzs_$P}Q@B@d{H!-<JV3EED3P7~O^#F3R{D}mtbOfm&J(kTpEAZJ
zga%uM`G~3Ea+ij|pNAfoP5-5erw12*{ZYl<Xf80pr7K=&D@uEXH?E*T*$KH3-u2M|
zM)n9Xj`p`T(4n6YMbkKNqm5kWc%6FRu>anbu|1w|#RF?4+yY`pnq&|ndACv<G}DgK
zdgv-gyK+)J6MZdJdHj*qkfKQR@v}niNNf~?lf#+L#rqSV2Bvi;mQGh0VJE@3(sgsb
z#{OPyz627lH4bZ*-VY;AHa8`Isp9VCXOJIGGyI*ehRj%TQ4$8t7)eEkC+hg@S8O8K
zkp7BGs{s3Hskz#5<7nKKKsFQ8wzNd<Sg?!6Ln6sfoHqigufu%=Gg)|cBsCEeKCOa<
zsAW4UB#7^sF9e~l%eHaj#lIK65Gv9v+f}PU{K)kYDpiu)(iwD}tPc*zbCwJ;IJ;qk
z|E{Y%3fvHV?l$AYUSH)MzMsh6H2ciW<!$!=?|VgJ&&JZ7QU@1Mg^!$3T>fjXh~|D<
zN^TEcOt+wd1prF+yJw{xenA5XmwlrL{wP^ID3dVQnfvAOBQFjJ3((m&iJqz$AGs(v
zOFj5>G&Q$U4la`Op7~O7^P}bbSM#*DPvtMqg&dx%Dv9oW6<)77qKePm4K4e{E_cgJ
zYF7P4bbD#_&5O93mcuW7rZTg<mR~=(Ry+HQNip58vQ*rB8@wMcqwse8P>$6!+PYEK
zaI<5Xg=7KUiMC+g9@$TNLK%K1L||$k4%(!ze-gN?h#r1oyaYl!hKANr{63KQK24zW
zNoa&%=Cpwz_0U(ImJIvbY4|r+x3ZqQMYa!^ISh1Hy$lwTLq7Mg2lR)%WXJ1XbE;n<
z%)cpkb}xC>TtPQ{AhbRJ&i1o&Irp%3(4#Bgb_#DlX+N@U7gRwXh${s(+|R4Xr6b<+
zK+gXSkw5dy8zOC=J1q?KJ}=yS-@+V!zPF(F>wYL#{$_*$lzq=x`@Eme1mMrej9r4(
z4FmFm0=Q>9<t8W<;elQLfpfW7r*h;P>_OeqL9=mKT9o8E&>&eitWQ^@M(n}QX8b&3
zF!Z61%-Ms*pqQT_{;%PfFZ%qXAeheEB=&IKC6Qp)$`B!b?XPZF%AwwV@PHtT5KV1q
zuqc%`L@xy56J>$nuT2um4o-%Im{x)b^RZvd1TVkE$h-olI6Q=2i(ptX+HRwUO|$ux
zv11fygCWNuj#wBq^5J2iFd<Tm5(|a$tAO)>@NWVN?UYQpq1>Nh!k>JJXn><5z2%}l
zmVWIZeZt5I?eLjx(dik5UMLN)Pi$;kp&ZIc)(!w>1OCff-Vyz`w@evr&x);E8OgIA
z!N3PN(J&^^1fUUWJB|U6Zu9r605mW?MkC*0d`!cW7{eSQq8&Pt9X@ifd3Indb!F`2
zcr0E(3=UXj>5A=fBQ0w`9|LwA({&8(SX{?R94<-xw<mF=hVc!4@i=+$5(@ED%kkyF
z1Z<Xs*I;a12Y+J2ggn281gyLSr4%fj<pcsiVhU3t=Ig}w{jA!s#F+L({N=<?DNl@a
zV)QMO%&Ax{Iby9-;+7{L7c(UVODEa5>l=#2S#cz~!;&rflO1-FopiMQbP~M53BEh}
z?hc9m{jrV;AMLIoPpDGjEHR_NkN_AYh)NfNq<Jbpw%)U;?f_hNDBNaKVDB+fz`!C7
z3RucVFiL77M`|?(Mj3}l=Ot~le_~!+Sm2n+!H={ick1E^pAMb$&jOsSu=Hjy*YHmI
zAPhYUJH3h&AfKEu*O(#M060F+Sia5(B*Px-S7sw70!SsTDP&GkWwZ*SY+)1a^e681
zXa0aGpMVL^bk6leb+XoHQ>S(muiXi6!3n>qup7b3sJjH{I0=|@rsS2`_hZ@j*k;6v
z1f(}{1UR25#0jXZ;%Mef>5B0g=3<$OO<7X$pNPk@S($R+;B#5U@Q9l}y?Mm1Yb=2H
zBxLnS<i<$M>XU@-BgtZ;m(-u62k>5V8p+^%l0)DrAPkjmKC0m0sd*S`?0(d|!F|tZ
zs5SRdM;BM`=99s|$4`p5Mgw{#h>xGeam^9(mc<{f!*FcH<?TH_@(>jj@fCTzE7}e!
zD$Fi&>MGjWC`toBtsX-+WuU2sP~$-8MgcUX4XS(o8K_7uwE|uI0P_REYzY4$1lf^7
z5b$?dSuEynA!xY$sMqv=fOG$2k3PU&WlR5AXZSm0tPIS3%mMfx;M_4MkOx^-{-R+;
z_OIdEt>E2eAA52@sjZ9uU-oE_saJSJ<QvV<zkzd{=wVT5>E1DZ$$x-z1rn(luwn(9
z!au;dd}v8siBEPlqN%y%Q*C{FMocSG2=+Z|>lli7i)q`~|9$dD`QY%ZN7)q89!;E?
zTeE-@Oe`Zq#^2Tty}I_1_UMb%qbrrstqY_*%5%6u(}x2T2Vs#^lgL-Dq`t&qQB>|7
z%jtF_5!e--iDse2BzTZ|0kx=Fsj;9&+M^u(@p4IgCd9-#6$D+$&$L$c8w6BQe9ieb
zhhU7Lf7+w(#SLGL@-oxiq3N0}{m8*WPoP!$znFXLw<y5BTX*OVkp}5*1tgV5KtKfP
z?hff@=%ITUy1TnWLP|=dySuyhsNeEE@7d>vz0bAxU-4Y`v)1Qc;=&UZdJc`U%t|aX
zRrAyKRUs;DZyIdhf2~WQWx#7EI@zpaKsd(#Fjh<`&)`}qRugvT%uT4SZ`eo2s9DzP
z&n7hTz-CC-NKlK}kuMfSr^(BW)svxJ^1RKRVtu;WvUK=O%WKQwR%=(x$B6nP&%BU6
z;j;PUleKFNo(x~Y4M)S#td15hubcJe1u?$<@`VMR<LWm#SVAG5ZuSE+1$u0{Q`c7=
zdo92=9U;oA>j($UC!Za!EpnDC1Y`m`q;w7~f9!N;Nl%RL1S^5fav(qu-KPS=V2XML
zd1cB&{M8Va_-+c{%%b4cFowc@17Blg1nO|6^!}v?!N}{CK)O><P7r7FWo9({pjtK&
z4HaK5JwG@L823hgnkHEBQEDSr1fPfqSINdLCzj&v%e+K`O)z!h`+%g)IPDmaiLo35
z$5sj#v6@MWs|pcKv`piSX)Lj1NI<54_BM5j1VwUTmb=ByQdZP05o6FhUJb^a4^qL#
zIVl>by}*punE<&gCYklv<oxEXjAzNa#f51$3`Hm|gFkmm^S-*l@{1lbvFIAvyxy-0
zi(!;2?|+RZ|HKDRIJB=&$Un!7tD27utefw0l&oi<;Fy3OE2B-QEaZEr5iO@LcS418
z|2|gU0|0g}OAuOEx0!zp*OIb#Jkp`V*TazfI##AGJ?^RC8!tz}HZ84c$5GmUiHXnC
zdeTqRF?Z6(@MEl}_j&yO=~wy!7EW~8N|rA}yh5aB-vkQ^1BNL#Sk5~IuB;rxr7O|D
zkI8Ono{uZMkFM>PQ)NB+@lh;7yoF2s;NpvVaD?MC8kM=zDP2R>`f*7>g!8OrA1n8>
z<?P$~DT|?D&IOkFh=xUbo=nFvZ_YHHWzNJh(G@xJNY_CvA-18~5m;;8>3D}2z9-F?
z_ck&x2mp%P?SBjB@{poC_bU6??)Gc{2<N<87{MuWp+}sW`T%cuUIpMuxQ7=IkoWUN
z>{cGG9pGf3qs{Yd?CjOOM=!Z<+r(7ds^?{%m9Eao67y*5_4=McyYqH|uG4jn+G0EH
zkr+Y8z3dP6(1)uW@yEy-p+}TqpDchLfcB;E67Cp~S8SOUw^3M}tMWBgK;{sQ849Y(
z7&d{H93r>WD@>Ixe{vde<aeB+I5yt`;)V555voML)s6)c`LECz@pkk79DB*rv(oLz
zfI@a@hbcrViydgjK_%G*dKWH+b5<=*hx0821T?^1SOzjawdaMZ;1c3vW%aU#ehD*z
zF(f?WmK2L057!f3Q~TNY)uXNo+ctojK$xm8cC0G$;`aT+IYXyv>z=S1O)iyjbiV|D
zH9~}EF3m^m0VoK<B(&zza283wv#*W|y{BQgU>N+ETos=mPQ|1&)2&?nDzMzs7{QQn
z2=Kice9%J6R#Pyf?OvYP?n%nwkJ6}*qh#|{aC0`c=v(E>nxu~&bX-w%!{(Qz$&<2L
zujN99t+Pv07S9QJyZNd<$8zd#3YvC&FB);Is!5x7rx#@A8GScclit@%|28mh)N7<T
z<53n*7_Pa<7w7yV;+ySEoMHt*bsGmgVBse5E?Q8&*i-hiJO;V~-*Hw)t{jXybr|$c
z;D1?XKx2>q==@n{VBrQrmmK^Mke3UDF^U!bwa&16E1C6YodJ)jS#%JVk^vbduaOA{
zETfDc-NU0kQT(j2SRux{?zKLirMgYsXjt7!X^C`+#(=wmoiA*8PE3g!0svGVDN-gr
zR-&>aqma3R$LZI`qz`AI*7=&E3RR<2hy+coA5p5>8Utj=8b<zYHLluXW8Xti^TSxE
za_t7?fuLN8@=uF*b;m{r%Gzizrt6jJQL_&|Tb0PqBT6;2uN?3pxlDg)?5gUb-2&V;
z|3J_|cO8Ce>v^a8s(m|I6sC0O4+ye#YAs_NDP<@4<r!l&_t@{_AnE~sgJ493=hpkB
z+u5r&Uw}4X9F6dzoFMwVnvMPbjuSBYzO#kG?mIdQJN%yL7fnOER#Fx;WO97~P7pz$
zq5ev}@pUwbw?y#3rT$|O1cy3bGvtHkJg(t&H_K~@P=tn6!Z?Gk>?4&Cw)?BZOICde
zomEkC=tcs_L|-M^dt#hYjo!1UcgZ>1N5znCNDC%?QJ%z#skui?v*)w$3m*e_pd&`p
zBz{|90>F-ZOL>_?#QatBEX5xwYiH!Yk4OKT;o7zs1^BMv`1b86&NeAohgo9hMZW@}
z;Vgx?WE^BE;ZM-v+T5?_KT$-;;M?dq)TncNa_YIc?aC~H$IVlZ*W8tRl>7RlIn!TF
zkgDU#B8@poNJqTud9qopEfrd3TP|PLcYHpurp}pLe2v)HeGv9JE`^|D<f7@F{-M)Q
z_QIj$SoE4#xT8?iVq0fj^NAOV>zO9*-DAW5zr(dq5S04R{2e-6n=kONqY%~nvq1i$
zSo61VZn9wn+AM~yGhnq$_sL&Yr#$>qI0sH?K4|o7nOb7IY7P^D|HnE5HV1HnbFo`i
z$tJK9?eU0_=bj7)cpb;=eS)6p(May&I$)b}8qCADNonh5ZcBDb^W?cH!FD_D-+G=Y
z^k(;>^Lhl%<09dTcVDjKWX2(Vt^PyXSBDRGVQ1}Ecu#GItZesl&pWQ&Aw_$P5uVF)
z3j!8q4`-aX4_^fYmzSj4FAA_8xX{z@eh$E`O*Gw$SG_$Yh+Tx49DV#XTzeeV@z3Gf
z!z-y9^1O$qhr90L{zSk!p2RExWpAD<EQkbE>h0E+&xIWjnHTuZ(HjHS_nDa_!Ztay
zWQ^7*Or%Cm((en;;5|3>0(z#*ybQGc4m|zrN8pOh1fqZFBV!}<eYwp<?)rlJ+OI=V
zgr(4bxDOtsQ34k^K%@~~jMvZN*lW1TKb|Lmr;(A5kQBOLi!&`IAw{Ze7RZJj_$fB9
z6`GSG`(MTR>olSnm<5`uF)Bfb&3S{~Z2Qs>2E8*wl;-taB{0c634*u;t3i-_8iJ}j
zp&_Y`-!wfCLK2_`B7`8)_7jEmgIMiAhJJ`qYD6*pAfxHG;6f127bIAz5Re&SqErA>
zR>Rsv5h^7b8Vet)$}4895E{|%UI7tRpa`pB@D2h6%K^ih2)*jAMdX*mIv|MNgz)J7
z@I7kbX3@YDNVrTVU|JQr%Mi*;7;)tcB|qS#6tj3`xO;6xzAL;BPXr82q>LK;vXs>7
zbcC)M{9b=#0VM2%A*yyduyG|4DLb;RHewX=X2~qFQY}JUE%Jdks)!Jtw=NnzL<y(U
z<lqE=ePg^03di99TxZ$Bi2<Ig8{>t*S_5N_vSMJnV}d3lnJHp7L}G6ZV)H4YcaX!Q
z<6~Gt*xB4-&mgf}>T#F$alCF(OqsE>U*fJ-<AjosP&0!Gn&QOy*d^WK&7+^<MF!&K
zh}b`%B$!epFjB;ieM~sFPf%l|l?jplw3C1d0PCC6g@{NS?<7EH8k}B%wcJQe7};%6
z60NBct<@8tJ!9$21S`H+Clq$Coy4T<L_a===}e3#9at#|;;#+~Mx+BZ#fCOPlJdb(
z=1HN9NuW)5pc|~i4oPB2QYwC83SWHUPEyEMcnx*d9Cebsf#fnG20!uVRZYY-0}wxx
z6n5A+-^;{LfYdONRDWj%AN|xHE|3m$E6M2iK@@KXLncE;>$&QvpKb=llNQi!v2Y!f
zrqfsX(%03~H{H^=lhSva(s%fjW$=?R5h;vd07s&hIy>o!mCWO`PZ@?H8Hpho(<*>_
zb)3f{2!P32g(DOHW2V1b=0tub=9f$pB9?V<<`HF<$xddxLfSAw7KU%u)s79B3^s*E
z0`aXCH9t1(Y&`v-6=O0MvrIf|vK4zM*2}>-P75pUTTC8}I6i(WfnCfugRw%WRw6Q(
zVluH3vzG7pF{O)R-WOZS6=QrTw*6>fsg#VN9BQeGYN<YpuBl<5?QWqvh^~LDZzyA7
z%!F>5tZ#m6Zb^)8&7^NTX#Uv(&0$c_DcRgb1I^7s&qK!Cs~Ob?Rqs2I{kU6UZ**bk
zY~lBT!bswxSpK4TjUupn5hS@Nxw#0Mil+bjSXucW$I2h`qduAH2rm1S78iR_m%#A=
z{_C;wZb{K*TF<P74q{P|%CBQ(32p#wZ~Cue<>d7KP_u9DW#0x}Y4J<Op8rLfgizAN
z{!N-~R8TF}@5oW|ugDRq#iA-d`V%?w2owI3G{*`ZIFix-kmjmnptvFQoON{j_c`kn
zY|oeX70}4hll}PcSLA5)Sy|cr*EwsL8m@sKREy;uKoArTjT}=_36-Pbprna`oR|hJ
z;+E({=2lb!6H06A>Kk5XR<*R6)qoqnK+jpRn%nx@KL0vrE$$omUS+R03N7O5jQ?23
z?wExZaRufVw_-X9)}iOD6r0<p)%l%A(8%%R?B46*1_0MQH&sEA>H`Z^n@f&mc5^N>
zm1;`8?CEhK2;`OOJRGhLrFhadLYJ-%?0}n;Dc<L>r^Sps5TtUHRx%z+W|=SSZc-Eh
z{&NTL4{7q_etCg(ZKTsYaFzxPR$D=@RJ;fhD%L*H9+tsh{Z`2dy_4gsFP(e&Z0hTn
zn+mL2)5vVQ(_IX+4#BG@rk^bhrNA=WL)1;XR~xI&0cdfwxz{I%b>K1?Hc}o=)aF3J
zu&`D>OWkosj`!kT5sv1i!RjT~OqwZsQ&?-?imXMsk4zdq3+&&wz-^-^gwdn2&Fd|#
z7s4^Ke{FU9G96Mt;-dupI@g>iyUMxu@*r8=_!vkqisj{w(%06ZI+|Yd<A&Jtu6I<(
zDP#IUTUZlX#4Q&NAw}pS(Dg%)wWDyXV>N>bz_4&xwt$gQT?yLU37Gc2=B6VLreR{h
z3(Ve8H3-3a-AED2{OC;SfBS`y+A`isg4*TvBEy;w^e8qviVb$g&;$zWE8!F)Jh`z5
zn`XT+J{MWk@g#4h^7L#OfV3g3hmApry7v7>@m8))#z|mlMiXMA>Ll9emMoNlR6Sz#
zb)wI!O*GMjmo5bvCXZJu$(C8;^jRK$L4{hLuadXoC}XP%b8XXIGNQo-{6)bYI=hSo
zuO_6I39}<DOk-i7Zmc3;JCkK-kPY%gX;Ssep`6A`nGxUoOP7+0++A@%Re$zIUqTn%
z9K#dICthY&d0P&FgF4zK{eu83Ky>F{S}bNj{r(7oH4<jeze%%%y&a(+O}GUBSO2v>
zXy5Xe+FZ-F1M{BbxVxsP>Hq;%6{^KL=SM&J+Lrh7r7B@COZ69G2dh`eWVXUz`dJzT
zZ3pQ4zD*O6&uyFzQ+KnRjS!BZvyTXCmU51Yr|?P+D<G6Pc8L+lITG<>T7LQdDQ^FK
z0zdjo=}(+b2N!K}hHYo#+J@2RQ)YL}m$MjJZY4j>`(9kmI=Z~znRS?IyIgSHgKDvW
zNRMO{egrnxD*#%=&ed?9!|SzZs1|EIUVu!v8DjcNi<R0Pz-x*4lLrw7^L&V7$(+3M
za4Q=RyLme|C$f3BH0RRY3qF<2W4B}~edb`lx7}mD_U^G|8v|KLaJHA^iST%pv7>cr
zSb&}Id{SEI&BTOe6v5@Nc}Ls#1&<E=>#h)?w__VA<oLIZMNkdaL5nWleZ_!~&(OtO
z)bq!@@uf$}Nuj54cwox2Wq_E9FkCsjZ|uiqSoTR_q}U!9Y?g3%dNn9%VABwaFCy|m
zIIz6!D7Aiwf0svoiC%picqB#ne^PC3o&-m@{5x`_mmc_|HeZM3dIpsJr8Y<3pdFR+
zg>u<n=d4D?u<*xaN)}YVi?}XLgBqw50COvlE0?bzH!{#pf(1Yx>V|0W>N%AhY7R%)
z+BZ{hmWv_j7p@c~Im<3u$RdpxPg}_FD;p)=wOSLt0ay9?+_R)TQbPgVGkKG*O5tZL
za&N-iK9~nNpx=q>2z`N!4#R(PgpJM;dU6}PEq$M*Gv6;nGNy2ee*P4OkRU73>oCq{
z6A;5LyeT7&s)#9qYe_$BAoKp#7r?Uo_YUBWTvFGM^xIDiec5U&D%X$@OxbuTISYmw
zF-0+AWdj;6!uRIKpQ0q3bd}`ZE1Nqjdl@SuYHnDlo?Ixq1S(q^(pswP+Nl)gUFcXE
zTWUsKs(AD&>p8p-*4}ecjr&$-?UARd>u{>thNz<B&#j=36*k>-OJ5N#u`lytuBKNK
zT%A$HV))X-uLJh7I(7J+Q7~S`*uQoFHRK?bbvvH{u>7cV=eU`Gnle`Zb#B1yt_t7T
z?tv{F7yJCJb7M7QT5EXN{1-ePovtTq8@EF|?Hzd}-KIJ=yQ5yMgGZAlw32cc^&0k*
z$SKad-9y`C4JmI{o|diQ@HWRjj<c^<?8wYOuZ^(zfTFAR>tS|Jm{xFHI+Z|@I*~75
z=OTi@^%v~O$^d%V6;#dZF2a$@Af9h4m>$>N6qr?@ce1Mya`kBRY%j4DOILy6;9l0R
zUuJ|!)>vB`VL8fA&}~W$Njxa~-e6Wo2g|Ngk=*o4$ydiFep{y#xEWB0{C5%ezddLD
zuRDPM??v4IhBW1NWHfKTLq=-zd4~U1o8SH{l&>p>lBP<_Ej-5LA;3f%o^kqivT>vi
z*KF7l{@5J={RJ?keFi`bknHcKdktqlwhBw5Iph2Nq=q&Is25fE^+(WUbWPa-g+t5S
zJk?1<k+rpXlmJdIW<%p>#Gx@Yeb4@(bE!Uwt^GTao(se)&{>(S>siaf(dKc-LEDip
z-2EcaYuAnnZT-L@&7Z!7ue%u0*R9~G7V_E~TcpcQfDZht8)Qy>^yM%5Je}6lrLbTf
z2mffXg59D^gHPT3X>z)qM^}X9?KhSMXD%w6Y89R$GcvY3H%F*%J;Ku+0PxJozDoSv
zmfhz$Em2!%Mf_v7b7zHcuxm;M&D{|pj%(6y_LIils}YtR&n7(iEp$D!ErOj2!{`o2
z(*^cM*e<K~iuc>s1T2pqt?Grex7+vyR=Y*6yKF-@fzhs?iG{3{NIi~pml_wIMBVy?
z(hieMFAey0uj@UI4qUG8$Q^AOo7vxz<c`)a3emfM>G7Uz{_L@-i{&wa)OE~Q;I+*|
z4xTf;<C2cL-#R({=quiJs*R*Y!F41gwf=bSlj(hd0OPrTC2}|S^sxVI3+Xsm2zzbm
zhUA;i;{+VpxwW3p9izUxQ%MHKX@*Z}Yemr0{oWIEBE9E>so3O|HzX19(NuU+)n_0W
z5v33~pXgn-1>`&TYz=0?Rr7t;=m{%@h-D^%=IV;Xi%5>__srFa>>7Yq;Nb`GGNb2Z
zoEAgq_g$X?(7K9JZaedU{GYk{4pjR+^-)tb_=;V7SSLO!&-nyR8spE65Vm39fP(B`
z4tP5)FC$-4?7(c!KqMuAGO{A4tF49_xt1%3E^^SDLKwq-GUGz_2m2s1LS)oRPfG?e
z>qd4v!eAecU<-yo7YMssVX#+cFp)y=<Vi5lEYJ@gIRFF`G))QuvHPkidPoI(6NX&8
z3W?_hfg1y%b=*)XsnqFUXyka7{S?A7L7OHOl<yjvr6y%F1|m2Hb&ZFX^Qu`>gy9Q^
zHR^|*`h}_|(3SKDwQmDD3BxUfLE;yH)@$Nkv+xR#)BrCM<InKClkh%Q`_Nb6&T8Q^
zg%Ktk!LN)WQhX!E3#B{_n1n&*D}*e2uI9#>VHKAEu&BTOx<3s-R{lHS)HN!#hy30w
z>dZ{CLnRu~EgCr~8nr3979Y@h{_C8z`KK0cC7CS@V6-r5*f_?<H>P)+ufI3OcqOKu
z5Ha;QQl2K(NF=r%Ikr15R{cwC*>-FPLYx|9T)tFXvvC}jZ(K%UTwQM*=1Lp{IlhuM
z9#JGd#w@-pFdiW*9@PI7U%C<h07&p*NGOp=xYtW?0VNdYC7g98SZ^m3A%IUQz{XPG
zLSyhY5Uf=QF6aesErXSi6Z2^k7ljkqO%k&L6BjZQb9xg~HxhpUAThKMhy>)j9wa;v
z5}yYd=!67sKq3*6`YDopB}^FjqIK$%(l?V*8HtB^v@(g3^WBmQlah;@lA-<E@|)yJ
zqLgaB6sXR;-YumuDW$n7rFABy{U)W8D7B04*Ews&*XaJF)WN1y^bkM|P0SckS|P4I
zJ7e0UTUsL*0KPH}N}7w%?LVU5q&bt8hZ1Q@3!vr_nY>WlEfVmUNO#Cfj|q(OTu<NQ
z6GErf%&?Zo;0n^Z=F_-OO26R~h9g#aY*PP@m-)n}g<hOFe32RKl&P7J`Mf#vOg-~X
zEKAuqD=8%Fp(yLDJL|(n)(J{BJX7XYQYaB>hLc3L<OP6=|7}@Qw%FeqViYKEk^kl`
zyqn^GBzynR5dWEy8eI`zay8!iSH&~9CCC1chWM90sA77bsp!BRdiZ!f^rB#J6Utll
z`1m1>o=|<zuZrjBC=$9gR38)|go5#lx5EE1B^3jM9{7v5D1+mFRXlS-z__VU-m*&1
zg(iEMD8LdZZ>g3+d8^H*vGYrpM04BMzU=(&p>M<Nz5V0gqXx}JpuB}Q_G4kO2FhF0
z^NX9~9c#OL#hCaTTPN*_`xloild{LB_m%lKSFou20K5KnZ{&BrB>mCiA|_Z~jUF7I
zA-RqioEG5>G%z(`=TBUr-#S044Upjpsbss@=Qe}u^j4+ZSig%V5+iNT|8@A7L76f3
z2?d2(J_r^^CL#gY`Gb_ALNsk~LU}?-!_X*!2w&}IxtW+3t3Wp$YyI9xewu(et9m0b
zTYE2wJljG?)TG}=7!|X=wKoj2&bd?9LN^w=P>>+Q$?6aWypsHivjgW4guwDrOO$;_
zKU0iZKKlF|xx3spPX(j#^Zpbw($XeZ%H`5{i;yE`dU1novvY_CN112b$(jSg2Rif?
zx2&zPAG7Hrs?`@qZx~>ZeDry5&bWFsC8B)!?ylH+8ccLwv_Et?mDv}hdptdy?LH6?
zJ<;%>nCT(I>`JD4AibUz@k8}i&G5$sCz2yPR&8hpl43FpxNav+Q3hjo^(}*N2d|cb
z7+w?V1=-0>XZzA7OD*g0e`{O~d?uqdpu@2{{UYkkYx<n%%Qm%K`*&0~IuRchx7U3Y
zf(TInN{Z@Jo+@v%g~1x$g}Sjienk0ldkb6ri6-Cs4WsqTW;T=H^HH{xBP#g{fHI3W
zxYW9Ab@X21u_2&z|3ilSYz%0!m#oROyPXr1-IN;>p(tajXFkhQl>eFysv#B&g=&aD
z<KL!d7P3K>Fum)UESZ=_EG#AC(SahR4VV1=G|h**dzEWaIHicKI3-quF{CXbPk<pw
z%W>)v8B1%q$WJLE09ePrG{jT+VI<VE1{?s`|4jBu*lTw$TS!~Tcqx7*d;ii93jp&v
zux$Z$NEp9(i}3lqT@R@yM5=|r=$D3AVE$wPp8>WSfwp14x{D-d{-h80^YQ60Zwd?N
zAgEMJWJEZT^lXF_n!`zm&_|q%iSxXu{;t6Dt@g)b^{vBCHF`nr331bdx-XgzUeyA+
ziL7?h<8;iII4TvxpXc;D4=$k^VvN9fXP%FpFrL3O#6Tpr>*WA~#|D4bt+D`^8E#SF
zOf*4j1HhlA-1S*FPkaB<8YV8b+d7hhH=j|GWjgX!hCkcwc0huSJ6vIbjq`RX`DXJ@
z)zBmNLEV{C%VyJFI`>gq_l3vW7c_G2lioxpPv-&V3a+zZ%L_rr@%Q9h7ZXBG51(f&
zGdQmnTF%>SSHgTaZ#Kdl-&*gK9KE_bFg<U#I2qD?^>Bf<KJt(?knt$_wd3()s1;&7
zcmt=u)0yl4+?3R3c?$tUN~>r|?&cH!N(&8=C09m%s*s2;Noz<;c@@8>q)G`o+M|KO
z#HZ1q+{9;1PUVvPr!mpEs&Ejz-@LVaD)kKOl;5O{4X1>Jie7GO;KN(0cu~^4O&Rk+
z$;?-vVk=T+%_fj4>`U-W5-sa<{UP#I9RB8cV>tJnZe22ZNDGY#R>Tg8(RalpK_fcr
z)EODG5p0a_pD?)P%!f<1$7v7yP0Z?V25j>8QeFxRzeuU?#0P(YNp{o_c;_cCK=wKP
zvK0UewUxk<Za{a}w}tNbfbe>!naB^|%F`yl0RHo=NO55ydYSQ1jq|5$!eQv{y2dyh
z2QFgQeGdT9wJNHeBDaaEs8^PlJf8S{9-g5&n%1o%<dtkbOQv~^mAg`Ev2Z~&A>#+U
z%^w-C+?ryv79UR>J~`8J>%TX)P*T496d-W{ujFK*jO9G>-6)}0lT}T%?RFwPP`T7l
zTU9;KUBx#KkHq?g+VJts<bUq2&(@`TTT8)=;ZJYkb^_2iO!c*Y@b$3azkw3~=#vjk
z`(l8rmlz2R@WRyFk-s^>I#`*yz|HzeJJ+^|Op_>(qy$)l>vE;1^$7r)qb&Qib%E&J
zY$=*uT>Euxy<t{JbhFFg4ZS>CLYs&oa8MbzY52*Q&@RgZZwo)MnW{*t7aXP?lxsva
zl4j-dK)=uvdBxa`!D>B<CO_~Zyk)<xPm$?z{@SFWHI;Tke3eLiuY5`aSeEHbf~af!
z<t%uqZMMs`rE~-%7KE2_SVkv2MZ#2CJ5`sU$qWF#b^RA_;iO#mP<wMwqJ!uALkT`T
zH~*{!)et8j8nkoY2?sK^teL2>c3xuq-^yDPm63I&rgD3K4j=2vm*9+Kj{w=7n6E3N
z5I3q%MFGgi4B!Z_eIw1xDNkeP8fhG3bMlnw_w~*-32%(8ZBqsp)14c-+t6V2=K9wk
zovVIm+n8=K%<bFo)Wwh<Sqe2R?gsI+8~R$=(7P?Is=VqvD6>>JZ&}XZy>9WJH&iCn
zN<&Mi`!c$)8+<o6iLa`UlWCnFjAjM^AUE~DlRu43xnKXMhB(m^fUtaBNcTwoS%zfh
zS*%;iE6fZ4Iw{U(y33;LQ~St|>G@gIqqIKi^3)vag$0=pyuI3M=LM=!+sj4#-%Ik&
zMD!Q<HGFP+k$yPQv%c9A`oR0s@|{C%K^hLPs=`do`NeX;!rbO&*StWvv(3>0zDwWT
zth&pkX&>FOANk$JtUPHC+T*U5?fu-lXXj}5FJztQBi6dp9J@Wdtpf{g*QLkZy54*7
zq|m#}581g<8b5LzleRIRj+{3?Yr6=P@@jrB)I3J8aGAaQu=?Stb6Kp_wc?0uqiON3
zpELT@pZ;#1EYd?!ME4|=llOf(dFTY1*KNkK;sdziYUP9I{Tk2P%V2MB6rB#YgN)1*
zN-UIf61$r^q(|y~AD^cSpN`uXiaz+~-u+w1_kCXP``n!kfrR4TH%Q)L!dMul-UAIl
z=)5F6p;L$*5Sz>AxWSh+zz00#iP7o%V%tX+2}q;p#~0+wQ0Pdv?Y)5X8CC7`7bFL)
zLJJ}(OM!lWPLL(lwOhv(Jd>K*8&?=~pn(jp0ozmnG|*FEut$y7)q?k$<N%a?G9(ZK
ze43WX&ICNx!>O6cXqdg!>Q~SOc^O_yr&Ajmt8tiuf-(U?&{}cDSrEqaV0$SPM>Rxe
zGk({84)^Pio`qIg$HB>KLB6~k{*A#gW5Gl~P(%#~^#>?&o7Msn7!TqAyN0;Mh8Q)5
zApHml0ELiHJcZ0qhUQEM8o{GD7Qz%FzbH22$W;r?a1Bl74GZrNHLj)0yq0d3;;8Fa
z1fGVu5Qf8YhSMpBHxh>S7lscNB3BTGG!cf65k>@8d$*WS{%|FKUMM+p%{g~Xv4Bjz
z#QRGhw7>EJb|UhS5I3C0>U3KH68HiF1L$YqxW`kwbR~j%gqSu}9~udtK;d@`(fOaE
zzqm$waYu({MK=>hV<bi2xa#>D!(pNjV)KQe52zB|5RepwzGzY<mnNWO45cnorR5`_
zZwg^dQe{rUXO#|N4^e#?g3s9m;&xNznZe^D0tuL_z8Sz13JDfbR~6&Kleh_bccUWB
zi1%LoDM&6!<wFwo$D%+bJ{9E<Y*lqb^%-T&87ysSL*1rNTmAUPMUfUWewH&}=+L?y
zQKCIxqN94Evs)r`KFYl*(Q_uz`z8@c1c3&6(4qApHwY*R0?qNlXCRR`kZ5SRlP@Vg
zNmK%amRKbIzA-744+#c45K3C~1rct&R<IPpw{RNq#>s`!iY4Y&1w|m~i)3S`WG=}R
zUE>tapcM7Il+V2>N*gKG2&r<ksiqRC?~GIR15<_bQZ;*1`8QIP5z@G5(>_R~u^Fe;
z+^ChhrOczGl<^5qhbYeSeOe<@#KKNLRZ22-2Jf45I_#t$&AdhL40FZ>gv4juCXHsm
zj3qsWAR+5vAaDRKZzQ|9qLAGc0G$Bz+22!A#927}S-2WmnC^g=CT;_2nallFhDAao
zm0?b_*5u9U#KIi#w<<Kms>OVMQfKOn{3^`5X+(M)FWr?nn^VxPvKa=m4B~S-+_I4z
zawHIPyBTv?By)L<bNfPa#ddRadUA($a!b^5$!7WZ2f^q$x%Fx)w8d{J`L*Cs^E7I+
ztIg9tC3C<>gLQBLHoN(#*ai0d1&$g8&h7=S$p!9A1!!Xh-nRw7;&ciNm}dY0<qbRn
z8~_WzatwfhG9LY(_U36}>+ekMpHnmcU_5B1mL;L?`p+}IC~>ksjJGY#D5p~VXD&GJ
zXT>i?tR<@NpEJH+j5h=qRP#%2^Bm(B;|2a!#D;~3qM&>KYHz*=M*Pmy{Gt+mF&-Tz
zRz6l@T1jbH5(=VzZcS~ScVSUEw7r>LMNnN2&D7M2+xiD8qI;oo8~MJ$A3uXo;8n+<
zavP4uriqnR-^vB3+=l-9+J67W&hg19=H9_&^VBI+Zqp6Qcz_*5rmLig^yxr{%5AXG
zM9JVuUWG#<v&9LYDz)buDSi8(ideDGf5~k~L-a&nN4|d59^m$|vn{0`TP=47mhwa7
z>(8i8w17_E3?!^Ju|baQv4XTvGGh%fI^{t5EQ?{9%nfDYCx{mY#HmDGlD}`zwGga3
zQ)7oEZ5{T}yerAEsV!p2WlXEpO)dZf-PU%gTN|Yzx=HCXYj-eKfm3Q1{f2ck^;yE~
zwLRicdYbVhX@l9;7(r>a4y(jRgGp+{?(_wtaidwX>D5KKp1O~VFC5_z<pqO|iVEJ8
zu#L1@WKRt%G53N6n=i2HOM(%-+U`QvX4xIC<aLf604u#8*hd!yskSGL8#1t{JX}`J
z&n$Vpm)OJ~0B<{&p6pr%2=svEZcZ-@k*Es$t;Zv#D7=<g&87k{+k<s{Cd~r$y;0oh
zmoUk}rWt{g>mR8Cx8(4a0+~m6^xOl82&vsD?bVQlxfTm`sIXttXGO7FxC%#clfeRF
z_HTlWVgngEjp9Zb)z&E#<;_?9KOo}gfj<!!8N#W1!<huIHq+!%C?>nnB_FAyn1XFr
z`;C1ZCm9XGw7*N_r|S>atvEqjmnM|QM8(_6^w6mpMYy+2jIuHE7Up8*7<N1P5V}{w
z8L2@QVFlS>CTyzY<l^18!Dgtt#g*~~QpF?+*utfa_)5rSO_$9Wl&!E1U&`9?1%@cT
z7zm3HJ9GV-ni(NxKJfOXVP=7WGx}?4rbphg9EdTtYXXB=`+F|<Po`GUw$J8v*tFwq
zchmtuV&Q1JJ+wSVFv0wF#@DTR`~}J92Xrp@>5iiZJ4F$C#@FHT@+*-G%d1{;f2-qu
z22QQ&fvx=g>Q3ew!Gj^LC6bzN(5acTk>^DNXQOHiCro4FEeb$bDf+VW|1vc*A%~{m
zsDl_?j|{^d%z6x?VY{F*r9%(<y2YSDj(x@?Bdvbcs>Pb8)voUi{;UHD?BxQmC8c3e
z^<;sE(gz6>N_(8f*DHQB<&6vBJdZ!tqIoE8p4P2ZZTRFMV(ole`W}yb(Bt&C{5xDJ
z-nSA(S8e=zY%P!OVpXGW1P&PHyzh>f8&O)by8iE&3!V<ls*1*9(-KA3MNT35Zig;N
z2mm<$Jr_*ZiH^eXXD%4^qx_kYDBx8eGN(e!GvhhkH|4y@%un_wd=GQ01SHG7FNvwb
zZlA9a44FxaX1?^XfW{ef3?QCKEWFRHtE4;A0D(pJs893MFCNT<giYk5t!a!N&{6or
zlRw6s8yYR0cfRYGKaPcXW?*m*NUy>#Lo>DiIOC&bs`@&pqA16bR{DXK;3bfH<`nQt
zZu8GGzI$Vs*C<`;->bEq*0ehf7-0>W3;=^hkV?n^jHx?QG8#2DH?5xBCw(P-<hf16
z=9yw!Oxe^X%B}KmjFn264yn8F_yUQHzN;TO(@#^kIu_OCJW*kjZ(9k3R(3`m5k6(E
zkeZ2<I4O8woM&N26pH`Fc>EuiKF4!l5&~$1k_nJ-g>z{zBBWmk17q^fnfuX;-s=v=
zCnV$Mabd`|+9m&}?<oPW9u$4p=vB&64Aha}-u<xc^gW4bg5nBwSIO;E$yM5^nDj<f
zv1%5(j6b2|zH>_X3sa1TbwVlX%RSX`cTBD2y;7^d;N$G($;RxQ;v?b`ZM5vkw*0yZ
z??8(-pvF|E4P0dq2C~6(608PH{POU?uUZFrQ~j^;bq0*g^;tE;d+lGp(0M3*+taK*
zKHF83j|cNI4LB<eqeojAQD$ZOer|U5vc7THS{fArweJ;Pb(lq=T`(GNeTYHzMe%+P
zXlQ=(d$@MbQ)fv_Jc-tp##J-vUTGV!gns|m8DF@KB@6;oZquMMlDU^V0zKn<YuIXQ
zQQ<kvJaYhkEsT>=;axF@zNAuD6ggV~Oc6j|A3-a8_bL93(vThwOXL4MQ~Sku4D$a|
zMeKE-@c*7nEj(+&Z)Suj4>rBw8}Ki=&7VvyQyUjr)E9+evZ&3`gfU0?a69fIeUL})
zm5XRg{3HF5EAOn*G&Gd>XZ{=Rg1RPE<(%Z2a&IRi!-yS4q4>$vdTyc5tb3iO#6O!4
zY1q6MEO`w@Vcwx!#zeg^=i^Kn**1XBO=#Pfq)3^S^nUGzsRy)ydSRELL0X^Op?%8T
z{I<MHW1Mxpsi7uitf14|)%=6K9?eDgv9r<0;lu5DlBH_b2Jr51Dy(eGbO?k8`otcu
z-fK>vR8F>+rI{}alCF}?5_cf9M}-+`*<vh3^a;t^hO*CdQU^EoxZ$79<fg6<CO6jJ
z$)zNA3&N3_Dh{a{IzYDWWd*S0MwOp1?L(hZNyIwb#$O-W2ULiz5cBX^#U5G|vM;Q^
zb3vRaX+KRvcyLOtydA*$dQ{~@`{fqd<EvqLO+|+M!4LT4IU$0}@`i=&0e_DH({v~K
zowfzVtC@pGGADDMIaeq4=9Rm4#xAtCrhO)!Yr0jJjce%7D+L#qXpeFvjdac`Dh1XF
zU{FSM2T#PQ+s+i&uf#py9>uG+QtDuN$ck%S24s32kWf1R@Y%+0UV1~_^XM8xKy}@v
z8_?y|k-gT!=^nD=K@nXcI62e`^RvQx|0><<V6OeN?5O?9js13rKHk01^f9cg!W-ZA
zad<qc=3+|Fhg+cifo&4L`t#!ElkC0^94i7VbZW*a(+nzyh01NbziN|xawg#b7;@>k
zIqBjVS*PJUU|&ll)#?7^7Uk@NA?laF0m;7D_6<GuA;$Jo<?=gF^rHhIGeBUNq$F4h
z)w$x4pG@gEA$;81el+m@;XyD0$b4_4e2E>A@3!c~TzMrx(m~k%qJ+LI+x~R8v?8uB
z@27d>AkqPVKsAOyYN<f_09sWB7<FDA&3<XCS9mxMLFREm7E*M^*8rPs?l+Bc_Q=)@
z$9nF(D8&ATp1h{M)4`)tNdB${!G&*8gn{AHAgfAfhc6_SHzZyy1d4XhC@r}$BnjmF
zjGH(Y25?yId$19LjqntjOc{#P&$a>k5djz)lNCyB7K()s7VJyLA{7Q_9Oji33PnEL
z-Y`$!uo}W}-Sse>>Cgh#aPGpedz$dilwmmA;YaWhc9aotk`dcR5vINou=x?IJrO1=
z5qAiYb2O2fB9XVokv{_>HL@bldLzHBM=HQXozg~CiAR0VkLr{HJvPE#Uq`|6MN?r%
z!#Bx=xc<u2{^yF=zvhCIVwsv^S!RAKVrPu6d4xIn5ZLl<e$53p#Vx9MlW&5AiQ=82
z0mz*p(8i`zQAmb?1p+Ogg<4B?=jns|j+WE&gln#ZY2$>GfP{PQk7&IKlX(fd@Zb?z
z@VYn{eltPtCLY5Wybu8XwgH}mPwb&h91&0KHctE+kf=}uRvZ9ZGk(-Xfxt{eqY%ZR
zJ3~NF##2Z8a{dp-Ys(GStpt2wh)-@xisEHUze$2J9%3ehXWcCOI!u8G5nV6Zuu<Wj
z5JJ2RC~<=>;AxYNv7zfFB^o8yH^CgfN=Y+H-uFv};g<b;#nw3xShu6y5RzI-BnqAW
zY)4^lDoRDTNJg4SJyHY=xcLtyCH&wEZM;c+feQ`SQqC097Twa?Leh7NQpyI>zwe~a
z-K4B1iEPd!oF~PkU%83g5P?_J*%yd19s|+>i85hPGpNopj6*VIxie{N6$<Rqag;vz
zbEmr_bL>i+5*KG`zgE3t)W$|NC7#Xrbg4%>_=cy3^F{L;OaMTVm-DGBjm}-*zyQEe
z%yaFRHSLhYT+GSp{>JYthwpjrgrO2UaZYdcOM=0iA2o_r{y8#CtddM`PV512otoeO
zR*>F66{PIHDNR~E|4$O9i|}U<^xu?*`;X?M0zL7+ZtN6PUj9zv{tS66ADb{a#|%N6
zj|=cLi^u;=;vUO6Dxu9sKOPi}e^A=*BrXcZ+y9q>lmHV8GcfiSrR4_0pc9xTLn%!?
zBd@BuCM&+Yp|R;xWo=t~hgUO{(gad*S~~`Za_W1bvK5wrZxfRd1<#AW&o6xcIkmDn
zvItd>HidoJhBhC8Ve3a{=QMNpR~IZNh1a)FF9?zUR*?E90B%79AG0OU5#T{{{U-{3
z-dInk+KyS}tNk&=0>$Wwa{m2sv<zK>N%nbiCak8j%LQ_#ZQ(rrY(qN^LEo}(El{=j
z_Y5NwrQXGd%Y0z`QIZQ%q%D$KoODpB3Ps4{hWlB8<9aK`%(_3_5S6OJJEYP*-aJp*
z7&zn-qtwcr4{I~ma13qqA$c^GG=3(qD%|FmpTo;tAAtDtGNmNJt&L=+@ZJjW)M`uY
z$(G1h6P;L~XXp++!pw9V7h8CYEP5F_u1B|$_h8Cv1s$!%KhKjKxtG{`SrW{X5t)5?
z@U^Kzso;^c>HJ`sfQJghvtjvoTf~w5@lBftTAhFyd$K^^-CbATQ@U=$8}IWzx8UR_
z>8FJT9fRT<RSMV1D%B(#w0svmJ5<SOEnr>}PiEk?Tz`t}{bw@`PtpKhB`>NV7p)*-
zI;yA;MuP%!hppaziV)<;X*}Q8@>3L_87^HZBXJKI)+55Bk*IA#0d_R8BK58y*gnC5
z7u2bFILY=ZqD3IB4e27`L>;=*M1PEM=}l)c(MIFsw9)}Oa0g6LeyZyCf%!DoTV86r
z_m_-?T-KNt+fw3W#f9Pv2+i9$4ZN=ax$%!b`g0RZWJakV7Q2iBsoqRX{GpEgyG8Rf
z2291Jq7MDVgz#g#rKPRO)Mbt32FRsNml`D%otuiZk}$}6e-DBpGFyjWp#wYr8U#)0
ztX(%*?rhr5FF9=9um4SHd%(DjOa6Vj)8B)j+3#)J*6qI^L6bN^_D%o^l+unK!zwG3
zUqJ^!k%U;vI&n?4D!cLL=0d(woDF^MYg!};8ld?-2%55H1|0;o1JwQ=1cgOE9vcz7
z+OH9YN5<yVKqN#&g`uRkKK>@=qg*>4Ls54A^ZwNWm+}X(2hdLhg#+$Z72SwWlNvl!
z7gJ^pB=ys8W3(@+Oa;cAW*sYrFJ)~y(xm1cudJ^Y=r_u)C_S&zE|-A1G}p@*xHi{Q
zAbPg(Reym;-U%eBU(H9RoNqT<Os<&!d1F`FaCrOIja~WOVe8f5-BBkJ`~7hbf$jZC
zKYhjh={KIE`?Ilk><{NZRc#+G{*tXcUau$GKHh8>R6O49Hyl0Q9rv+6-Jeg{K0RD-
zRXjc3UmZcWWY9AKNK&1!#K%Bn&tPO7a3|tpu&)>}6Psqc^P9q$GeM6MBJ(r^qumA-
z9yt;Dom3Z&^LrH?DIkh!e;2+*nCf?C{1FqWZep?$7+o_UhD*O#as-;kvK}e5J%hM3
zG6qN@9R69{HHcb=9V9E*gOk&bOfPAxrjWaeTT}?8G!^!+kMmRn&sHS1l~KZFan}ej
zK1y!s$N1ZY=a4=vf8nDOF-7dpA-n4D`<=w0=Tacuyqj{&ioDv(q9Rb|gvb87`511r
zxzCW!En@&k)Kr_A>>5CG#leMR5T4q^AM{PAhAX%?VkW@PS51Bejs|S7V3-VHEWb)@
zSvO|qJRW+t{R&b}N@o@7#%P4YB0rc4;7r;1<}Gms{=uTmUFIgIY89uu&=a`bg;EN=
zvE$qnEa0CS_$^yG4lfYgk{)%pkw{>uEifR}1H9d-VcRkQ3O(H<G+o4H0wfY)PD2!m
z3->ZHoC=%aiN^~o(VnvLCZt>NlRrk-IA*>`0JSg>e~)QJ%b`U;{>nBu7Qbtlw<lWk
ze(Q6%ON?Va(*uLNL-RQJFg~CEVdwpvlTuduS}p}Q6aReg$Gr449a*_zrJ<LKMe=nd
zAKNSh<ad?I+^I`+w3$AZ5l<RW)RlfXVARNgnaC{1D>3xiQ(d@a5WkEpN#13;>U3vl
zL98hDY6I$A4XTRB>BEG}mKqQYO@HMF2MM(zC?SOv*g|D15Q!-!)$z%&*aX=mj54zr
zM)Xc7VHC<)F9m&66Dhi^tCS<Qr1vPChEiHBjilv9z}(`kitZSTwU+kX+$yoE_9*Y3
z<_|{oIyTjY>!;IFt(C#@Y<Zq0N3Y#a3r+x7^yUADY(+pvh@&C5k9(e>n|P^qc({b4
z>}YDNc&S#~r6}!q&j+d?g(bP}M3%4gBlxzA`2W>>{NF)oP3EwhqTq^e8`zFb2%0+f
zkdAOAf@G+I^mPs8RI*&E+Gd%xb4^Msv8hRF$gq<RBIIl7H^HH#QLoE0g-JnWk-4NX
z8Se9^tf68vzB&5w2(t53C5=2O_S<5x4p&%z_%QkBWJvH$t?8<t*+;R}k?h0Tbh5PF
z`%<Ja9A76~qlf~f#AF_1WMH|=@Se`y?H>iH+`a+H+!SDWe9#JmVI3C`kz|8YwgDev
zCEN01EYg_@P&tsLd^cG!P+$KnX20a++{`K&56RF%tpfr5!tU#yevQim=@P`n6B|Io
z@Cyr-3dE%wlZFOqIZ|MsCSbnZIT6xk{)13(8AI2(5RWV(7^!vcWyzHl3z?m9$+v~4
zkp>p*!;^U5`4y^+-d6Se6Ago)HO3{Emb(M{F<;STBKpSNaL92|Md4;fi(8M-)7#IE
zl9!}BeZ1c^BAZhZQ;q0(UW{feRuv{5ZW<W!_cA6pdh^J<7fFO4Ni0A6d2$cX6vFBM
z@yL(`x3JD-+dQ2hf7FfsW<Q3|V*$?SQYw0WZ!PO?qBs5G9Wcc~`-+bmGs?9}X~7^;
z&vT8^*RGcN?X%bnK^lOaOCdYeS+Y;SH>Aj$X}%Z7L4Y@lDTOXzYSD`l0<RS%^7$#+
z^z+JwrnQ?i=#WSI*5YB?5zo>M+fw^P`QrT=`Q>8TUE4**SN_vHJ{O;wH$CzlZ$l$M
z0Oi<Iv{{z|8e9rjB{9GIAHk#4V?u#V_xlgW@A~1w@sMu?>>f7A0R(qL<xiR1W6!n|
zVQ$|^+&8d2UipM$0|_~RA3p(i?SaT3;+qB^Ob{D3p)V*CNYDwC{p5>3Er~?qi(|)5
z3K1uBWg~F)A>#FgclBc|^b5-L#aHl?aP-4G_Tymie=h7VYUIyb=*Q0hBiPUT7TNEr
zz*qTIfWK0}lq0%KA&)Gf{D<q;Zz0~N@X7{bo+=;|jmAKo>%ci*0DvRNNG-_3HOLGS
zWYHL8r4|HJi3DvsLgk}QdI9yd1nzJEdnMmdXL;A_*QqXk?_A`3)Luh%q?o**@lPNP
z2N0Q*dPNUNVGV>=2pXgbkrWHLpW=>IlYy8KCaVF#ys{Z;gjxMhJ~`9x^QH+3rge*4
zgFpQYy}byHAq;yh6_#!m=C>W(yzSfAFJ014P_3rhVfO9|GC?<?F8O4jULj(tLb!cT
z_;4Y@cV4fFYxAjTiy08Y81MhWkVljJit6v?qq-gv%G>>m-$NcKI>^z0D5n_MN>7J?
z7*aP*xM=A=lr{$v_M-!U{WZ26V;T80n0HJWLNwWvOkbL7VxYWbF^{7q^5d9^&E}4C
zQi-cai2qC%UnLQ5Z4&>ENS@D4Qz}VL=H^M`1E1W-A`P@1BLTMrjT^i)H3XifgvK~%
z4+3nY4mNT7_aLZc5ugwMR}$Ac>9uZTHXteWD~V&2LIS?hRe$5!BqKHu?*|TtaPydA
zLw@=vw&lUR!h07vAXAwKgQ=%&w+?w#M1pvsj+mPyZ;roZ4@j35&QymG+OcUrPa;$^
z1rce0lh{hlV}oxXo2LqSD8dCz@sGkuIY}vxH7N;hDK8OH@2OK2rBnC(k`Mw?Rf<wW
z-Pmdvg-42FtD4vx#F7cY38H$hj;fQtnj4?IO3QwozM^iN90=OUPQ#(&(6(cH4t%wF
z6L`{<I$Ov#KJZ~HWQBi0jSV{K(WnH2K9)hi>30a5-sIp9Pt0*FnqJCDfa=bDW-fr=
zn2G&7qqr!2yDPmmjt!0}3!^zB;|z%J{_@x$qtp;cOUyEzly%D|@X(Nr?T`r|77(Y+
zX;f6=+Re=Wk^O9z>-jGKktl%If}Qe~|5!Aa<M~UX-4x8utP-UR35{3plCw{;bA{cr
zsZg_3`SbWfGuQ@mQsdawh&i8bay9w6Zcnq`TVx*iWfnhYcTmbVDbD*SldmJgEW)3C
z5|X7on{Oin*+I$6TuUdXX16NN$7r_CsmTw&W%xUryM|I9$DeHOpVYUk{9o_gQfngq
zna$NB0{=bV7(s;zK^^V?-M@6*MCKa#bMLlv+<4Cl(34pEH9T==iihIxJDW3e()9V=
zztl%C0VRMF0|8+%scBHfCZ!)FH!t7RIja~-eclK;1=TeHPA=uY6q~IE=ApPaDQ&+L
zoBf0q&iv{Fqs850KbnUczI^{VYlsT-*YLzD++12mk?Y}^8v<<Y^^HI5!OXea@%;ly
z|3-SdKk^i^Fhw*4#2Dj+%(*^CmP7y=wLF)Bbxt28-V=LhPs8yVnd_8naqctw+##iV
zl}HrAeP78WUhZ1Yf#*t+Xv6lHRro)<<g)l&F113p=@r>toRE51RByj~O<QCyi#u94
zS@Ef=-a`+M1vA;?N04&A0xLGi<_DNNq|SPt?Bmhyg__HedO70*YC65M9Y*czKq8&g
z(nD}l_<QVO4({rWcaiKZ{b6!7rYc@S6~a5RwL2dI2hv~ry4G2KNYaf1GPk_Wovwdl
zH!^%jGq>0b14oXju%fm~gdJ5F-pYqIU!3xR?Vz<8V|&7d-o&QuE_iHFdgx4^Owyvi
zQ!`PQ9InM-c7LtIj{S|C>dmz>@QCeg$J6toz&^Yutf2=}3Z$_t(>cer7u(Bl=adC$
z_*g298BPxqpH}?0PI#7sD0HwXKOYAouY$VGO|$(8Oz7uB>4{a--8sl0%N~~qDr-Ir
z`H6_IsE35QVZ7;Cz-SU@P*#i--2lEz!ONN4zz?xgoiPgX(yO-XFN$arEPBp2AZXQ2
za?wWlJE~C@^^Aln@HCs7sWDZbNs}EnZzhNz81lC=T#8-_gMs*i1jGl+=G)n?C<nK5
zEYd!c=EetcgR>J%ig)t=V|W70ZwkoIPezADt=-)%sr<^cS6Vx1u~&vtSX=@x!MD6u
z(TT{sU)h6ixnK1af0-H3@>&4qsd`M3`JlE3zq7PvSn*djhv>mtU+m0$*f<Uyo+!d(
zcn_t%M~lOzJRJU@*5gUbqqb`cLu<VI%e|xLFf@PnFPT#-%n&&OQD6>KtWGMBkdG@(
zpS`z2=_LqmwfRb7Ia$>Q0<xSA&c|w18`I}lfd*NoSjvXjIq_@01&mppjecECt<e`a
z6AT^|rhid7CWfX`JO23>^+AUxrhX`NP+t6$-ZQ(H(hFw2oPMPzb2(#Hun;(7(Qt4%
zXV=Gi1?^u#Sr6K^yjuLv{w4I@4Mbml{h#-4sx~(p|G0N^IlS4*42HHY|7}+JU!p!S
zQCq^{%HeBdbZou9sLx|S8gTrZ`Wi-o+o;IPe^Vc{UkdGCBJv;m!hBQSW{BZ_-<j{1
zh~0UGn#hJ~aEwiGucsu~=dT8;#HJL~r^Ib+%7!QeIzaE;wxH@I*402xPdEnq#;C&>
z8~?ZHRNJ_fKq}%Bkd*A7Y>xjVL{2Lhw?L}bu16X)u(Co66=twKxu1mTq300xNqv2l
zd=iGxwF+O`C{eC18!@P7NQ=1qHS`80(mvJj#T-J<#>TT}j-RH;dJ*0|dl<)dB&BIW
zHTM;xQj7`1CBGn52Z@VTYliPfD$^uM%U?6`r=hF<w~9^UXT@~yhj0Nf+@*QOq;>$U
zT}93gVqrEPK0-Z|I7m3mBx`WUw-%P+#NqRy%19zPQ=G8miSVIHaFU$mqm26ee!hAa
zkDN(p9Mcrn7GKQiu&t;=njVn~`vl5|)ZCi%6Bhcn9o54whjD3xvWY@ZNpT)HxS3sD
zn<580%pyS!S?FGLZz!3b`71g;(c-t6DF<9AM0nGvEt3|$qmLbriT#v8cOfM}!t^~J
zQ#_s3iSdmL(~tkb+*`O++4o(ao8BNLAl(w1l#~z=MWqD+X{1vcq=ij)*QUF>OS&6H
zy1TnWm=mw-zAwF>XWp54k9m%nzhNK0V}IAV*7_{h;fk!|jrG@-Xc(brHrWDFol+j+
zL8&;E*%+VcWkOWYVXU9UbHWqfSH2#UP&v(0B8#cJ0{iE>Fyw1u<SV7V!A{I$P#+@B
zR~cti@VTf+mt*v&oD?6g+bd0j{A85b=^bx`-_1b%!suHgPOs-yRv@OAs~KDOAe&>1
z?Bf?^_M*v>-h0(IP@rEdsw9uI4KhG4G!&7T`X2W*Fi|~Iqs6hyqv$LzS8w%Gq4D=g
zMvkh&id{<eylMX4ifXk86J@V!*(Kuhnz&^es~EtW<3Fz*z6&a{$(ESi0=&72|4YQ?
zzsV{<$?bl4V*d8(ya|L^az8xr->E)yt(ng6t$2eLC~TxbaSDgO`fgp8Z(?MRs8J!M
zV$#kJT`YK`n9U9|xQLhWV_>fy6teq&kbF<pchQk?QW|K)tQ!D^b|JDH1v?e!KE@Jn
zBTH!uWJ1&(`nK3<g{BsDcjAp_4(`I8v`WfgUh|1kmX@_0j(usjddHUHyyjtjyLR7q
ztNnruvTm#kTsd7R>50Z3>FW+met}SjBSNln7q_ajA^f<tkMC2t_SjA2+h<qU?t@1S
z7o-#t8dKP@bA+jV%bU{0Z0{m%N78!ajOB3QzkApUrz!6m!_dWt;%yNM3P-k7_Lq5c
z-;Lztk9^V?DH*y@skHVtHR0P)`BBzsRl?J{qu)g}GIEQP9b;;$%A_(TO&4sHYH2Fp
zRfmz9rAnIglTB=XcdB~Krf9l(Zz|A<*b3XGsuE-Gi)-G@{M+-$^(r&nA(D5AVI*H0
z$_&&=ZcH!9?aQu%c%awu^YBBeEeOE}{%tKCHC5wPyZDwEQfdnX`*_WdG0cM6Qs?OR
z?LRG6SwsZPERx^Vv}2hiL|XSQtz(7`G2K;KMyF4MSm~|1w@<x)Vmz0lO}-qMEP2sT
zD6nCaQ#Yz{Ymrr)x^;f5GLVT`Tzt;5rDPy9(Sdvtu199^=0!Dt*gS@3ZrH&XuA3je
zJt1EGVxj0`MJmE-FU(kffFpEmi`I117{IgVtD!Ud_=y8Ar1_J3wZIzZzIWfJ=EK?D
zn>D^6<RLl10Asf2$mme$SpDs3Nl3$vf%Ns%H2GQFK*OG$E89-t%TofvW-2!(7I@|}
z``q)mgF9ZuC4#<-MrnitmXaF*ehQW0A#&oZ7j9d9hgaRbjc3I+P$|LYYZJt~()Qvn
zdlI0ZD)LRG6Z_YF=UYG9VqTPP6u-T@IF`A)wsRg`cI88awzaxWS-T?g3L`_9!S;^W
zgcK=0aPJ?v0ZbKM88<>vvgJ%XPDD`lBX??EcP*Niu`6zD8K{1GP`YkWNX{$JFtp{n
zyVr?3J)Q^01rrxo<SFD8FU$k8#KZW92gQj8AH-AXwI`vjCx@@+s|?Ra?VcDLo-Yx-
zlplLB6N)Q<xs||B`3+%JLoW3kSB;71THTyF5LdnK=LQf?qa2q{hH9VIQLHaiNhaVv
z+xvuJ`#9SB@B>U0LSJ`YUjV4$ZSU&~^YyRs1-!Z73*S(}|Mcb(Cj5Y!TMD6n8t=X5
zmSunEp9AyHtMM<G@W*)SmIw|gq6sMKMyU{$tcHo-l?8mA2zXxtf@^bXt#J|^7fbHM
zqJafI=C$jzHxkKGO|=PB)lvMm5jdixIJ#jtWT-l6Z#d1XItw<Ozff76&|R)kS<TU1
z_YIDv2^yXV3_b&mcPnIt1ytssoIxar?L%xLd>qR{5<^3F7DISTLFTr9_uc;X<}O3w
zKrey$M$`%rJP|)WFyGh{_Q1jbP<@D+AjDXKtTS&Lq>y0m@RNz)<j(L<9d0w$;SFzy
zUcQdl_l3h!dd}MuL}UR1Q9|i1!?|Mt@dbKW`}{d-uzj<vxL72g!yN!XkNjq5#6}cB
z2x1muh-@#9TrrGP5sMN)jS`HFqVxidK8kYUX4Xbk=a&h8TOy^3s<)^Uoje+yt;lTa
z6a5V-M$LlRo{yJ^FZ63GQwK+kgAvTGCkpK>+Oa1F9}Eku)pP{lnh3G$N71$n(r%kP
zn8UH>X))EWdA}mYol(cSFEa_nKKU$$?_(5azx<9??n44!tU(0po_2i75^U5x);U5c
zx|Tg>lBdRxy#)11ltY3!Cp;5GCfh;DUpc<1R<<uKK9xGI(SfJfD6!s%xp(vF%VXAV
zWmr)y%)y#Dogv{H19J-l&)1&!wS4iblhW(TEP0oS6C4S9xue9>c+oSL3_X|00J?J^
zHfdQIe~}>tODFm8l4C+S88wdcN|~p-Ebiia+{3)Yjo8E?zT_RhWW)3rjJgzZ$7oyO
zc)<^GXuS-$Qy~XN2~2eiaK!P5D(T2^vBSz~w_@o}R1$GiSa`%!yS^tCY$mc3#|bkg
z@e-2}Ii`^?CiA1E3rwX`<}vN}yeGYS3L%zZyh`tI2elDqY4c|xr`xrCOYY?3I#UMq
zPGp%~W#z2KOzEcgMrPKh#SY<Q3SGP%ZAlT_N};aHUQQF+-~$~k)BUORjsc~|{io7X
z|1bWY{a^l`rZmmJ7@BjwgE_yNc1ox^&3`Gqd$NfxJXhcSn1XWJ%fFj;``35Q@Zi^&
zmiPXiIi@xA*O-Eh`zOp#{;_dvuz03K(Vz%`p&1O1fbZp%1dJ(^Ku}9*Y!N(DDgdQN
zNnI;c&_Mn<s;w)@uor0B4H}^1G`|e&CX4hKoAQCr0+gN;>bGgr$lTRUli9`Hy{zST
zty}n2BPSPcclK|71|MGL;E}W&e{A*;I=fWu#+HVM2WM-R+dN5oLx4tNtP4J%j<C+V
zBPTo&J$lm_1i5@3sc_`mfEuIHYr@WvCTxYpIGDjMvp$$C#LnwU$kpARCK_Q}lludu
zJ4+@4GbnGFb~K+eR=e_B`NCK+INN=7vKhvhtTR&eJrBQA4mE$Omn`ei?hLxZo2iDr
zbByVRFBB)}lDyFqt@Odv9}E0gmLHl^NCaEkA64>KGk<z&m%Y4}iQC{pzMH|Z`M_Tb
zUT}cldwC3py30#y8c<mI*K0w__2<D&B`DYAgKahkWs|;4U58h^d8@;<b7zS>b)N|a
zl<mBn8l2FU3+37dcE32-?&^KBELLu87#>{do}Xoz|7o$X*fBld1SjBFeuLyoaOZrU
zNx$H>KUpekK1u~yaL6#F5BGq(vWs)sc~3~@`H&bq;z?XZukgic7eDRGMXHY)98D5$
zoEI7KNLoOg<wcqgR~j#w$7k%Qbf>3g3O?{J_UtACjktw$!}u9}<xC|wP*;Lw75tP!
z74$D3MXT5nJtB{#;#2Vci0?~;q?c7otFN86NhfH~$guvwCWmJ|QJgyzE!O^Qb3GXv
zO{tRN`L^94)t4@BBQ5YLP_hes%eeUvPSTixIqKuR(la}I07CV=pBRib-pb7ZpeA|n
zHvG8=|0unhHOEhIrSJ=R8Fjyu-rUx9aVUQNPFeq;BQv1%6f8HAP2W1TSJ;)o<lZsc
z{<~=xTwhojO&l8j43P`)_Xfy^8S9*L>&<v~Tl4oDYkQ~Bs!nb-_Z#L{`u1DE&ldKZ
zVnH`+&4}^Z7Oi+q^%l)mFG<-Ma20n-%LsG|qB}{XzXJ?S6p}K4Y_f9%_<PL9{lEOZ
zUnxw$-#Z=>LSZ=>eobI{^6kG%VJaCEo{p*6?f$LwbYo2Km0sc5l*#{#N-tV5zjo_w
zNwDK+k@;;ORjJ&^XV}&Iq4gNAcWxb38?i99@_zYyS%cf&pzeErFGIh#3PM|rAaZ&G
z(NH=NFMaj=Y+en^<=IsJ&z~2Wz9F|ft3w@MWNQ157^g=Qf<bV9`g?agP(<(o6fBtn
zPw<!0!<I}zCiRA(J*9Og>`y`F>25)oGlx>5r-Bjep=e)+EVgyJL9z<$ABo!C6C@U2
zDRjT`Kisk-1<)OaO2Yn&B`^3_P_UeQODKSB&>kW6!%Mw(D`s}B8KX2jIFvR9{49S3
z0Yv=r?vDRZdVz+L>BQsq74Xc^AYTS39R9E%Zxxb)b%l<G8cgK*;2Q<AlXNwGJrL55
z_o4EsA1EH8;wv5cD+cJUDC$2F6?-bH5LTf}t%KCVV~oS(f3iYf{7US7FbAV2*9yaX
zF;TgqGDv=nCo|`zct&Jdw2Togs|Pi@5I;1!ent%95gVzBgBuN#UuAdY=+_&hi4M8R
zWJ;XG(UColg(a+UV||x+CvF|jVMNC(p*>*fNE7A5MK9Q%`_9b&b#$W1Iv-rFltU3`
z{8_&U5835_vz1(oI{#t_Vy~x_zF&%haP|v?)<G}+!^CfhS&?Xz&l$gu+=+uniG>0x
zkl_WE(<w1>MMcEF0}M@cLGdm@1LYx#=ZC+@Cf0g6K?+7$yaT!Kl<gmSuv*J-2SvRm
zGY<0hHVpXeK_?OG`6J`#I0oG}Pd;0GH1A&N4df|Q_l_1RoPrFk=nB<pM#^NZaHYP;
zsTh?G8OEI!mT}OltzZ49L<=vnkD~v$PTXO+cUt(G)=wQF-?s(ltOSLF`7eL(tTZ&J
zK$l)(@?T1i2N+XuJS$HD{JmdF?+ozw3XK)}rpD?3fA9AcW}%r~AK>quRX1Z4S@=lI
z+$+6qsiOZ-dg{Zcm<e<Oil2co1t~lz8U0Ib@j5t4YkwXu5S!4mp?X0$5U5~H@5$9n
z{=3U8Y`BAg4XoXOkEh;Iup85Tr)nZiINX}%?KX3}PpLj9tb`m67EhchBm==O0$O8w
zJlrb-77-U)TJF@}*|KM&pgLuPymwOk75kU)U$B9Yhs~qJowc?Tuv$pOpsom2J{Z%4
zT@N2LM+{e@V2iAG3XS=OzInTh`UIs%%nTeDYqCfo606CdRpxyxK?>1`rIP4W3bX59
z9J9addw|Lr!m_h6mq0Xd3oC==&*<@rF!x!{9a+qoth?mIe$;uZLUAjp`}9E^meohj
zJMs-DL(9<GVMkWZVdUq!pOE<5U!+$=?`tllV_bcU&MMEogc`hAZs~e6Vw3a&-8eOO
z>WA${#W%r*O{H;|;TH&Z%4vxf5$D!u{h&t}?JTFJaNGz2`6)RLnTakv%Xp!;LddiL
zmyVCh#J41_G$yh_Ivy3Qe!;53WT`EaJL4(*gU@LNv%ARg(*`@yRbKPzCa*{0<+$jo
z(?6M_nAJN@-(-0--8JmEC6izwV-XiBvRGujtRF*{Dd<}YDsXugw1i?V)M{yJ&KM!Q
zg!_aif+xusT8_TL*2e2iFt-S|TffSR!qY=gV1;&0HOVG2K#nK0oABT*mcY3~|Lz^O
zO{$Z<=yM)^a(@@M$<mjz;a?F(;)`rDhP<}~Me2~jpoSu+M0qgyPljfaEhuBe+6Kmt
zgp9q~L>>q-_qqPzCv;8|F}k<k`i$TjbEOX6MHva(86P!dxounGP(fF~oeb+qxAglX
zq%7x!<6!=N6s6<6vafj0hct$HBu?HEu=L6eU5!~Aw-=2=;TzvMZ7_g9HA8^X8@ism
zzCCZoYCLcoa`@pj-UwoQUcM63vE0XV>8jXRgx2iLpwN7|Bh`2k@ZtTo&fQm#@9mlO
zho1~C8egX<no4?~bR0is2Zj(IUB_?SQntRht%+-TxLw?KcfCBXaCI(xLoW=NdlfiP
zUM}c{9&{x}8QqsD4oSY0#|>bb07{P#<_2sikWRRfU${{c-YY#CC3iY|cL>a#vBsTw
z!kzWPosH0ggV%#g$>XWL2O#kHYdnAr1;GmsAwthryq>R>Jm1=Tio#T6=*1*po<XCY
z@4A&LdA#K98BOfGlwe*aC|=GZ245&a^uiA6D_(Bc-oZS8%crexZx6V90af16ac?ui
zPZoxDfXf#t<Kv1%E$8Wzkmch9%ngFQr?XX{qKfZ-DLua7FA*IA9|-;A?VYrEobOYZ
z8&2oxED9?=b}~?H*qbCnloWgKG~PRZ8ySBSd;gpqe@kCDH3$zN{FY<jN(p(&CqPAp
zK3^&|%4-6gd_Olu1T+)+5;cRs7kuqX0nRX7%;wKI<$+#?0Yk7r_LG1S7+k5lV-Y<Q
zlCB#RF{qS4qKrCtmRDg0VpGKd>JZVY3b!Bg)vDGG7Oa*n4-Y<7Vw$%P-XIKlYaKw(
z5prwD_5Rh9ecupKIXL76-?6gbU0$wG`A`gpPy`09l2#BpDhoU+cWEmKhlr)dJ@k!-
z7*TH6l~S01aIpPJ7^O1P!30-@dl+?jn1mb?IbQ@TL%5I*(*p;qtBcTQ)=XZW?Delg
z9y>5`h(%UuN51A%AnOV5#<>d@^5d*OlAtAuqW9yf<%krY3{ml85+h>c0`vth6VGH+
zWJUy^9Cpq32wpL!9nt8#;b@slrZ;}!ESy-5sL_g>j5<VIPMZ=0$}ui{A#x6!A2y>6
zH-qerI90`9UYk)O5lmV}p%RlY4!P(ut7z@m2p>L96NbnyM6u;KG5CBjuTWzXtYQSy
zV{(j`qWoB0Ya@!46%!cZy)UC!jiLlmV_;&OA(zocm+@nu&@I63tBs4{3ukkS%*#!v
zOpBIBB`}Rm7<LE&hx!3y3IN$8#uv1umoSA56Sz!>b7xu&zh`LfOeXEsCgmGQP<=}f
zHA-B+gfbl4E#<1nRx(I<)WR-eIeNojXAa45{v3S|6F`nBGLb3H3<*Hrt}QiI8a4G{
z?`s6{#I(tHg1RR};>quNqRKAck!__`F2+$BM<6k(uMkB5z)son_!27+IP~$Ka_bO~
zTRgwy)}u?q{}yb*#W(u5+)A<Ft>^O<4O-S0``32eoBsS?+jT^14}XCqxh@PfYXD>I
zZ?MTMTTkA7oKoY@I3*yhTs(j{Wn8=pMr3qCY8t5-qGR?wNb)lxa=LpGf_O<~Dt!38
zvDOfZimp>-n1q<p*6m)?2*|A=3^;VMt{&OsM@X$>GX{Obz@od~_i3qFg|g9&9TlYc
z<-?=?=3R}lvrDz@t4F@4H&;{)3Y00$9^eSd@aSQ*DsSw^i~{Y$DeYuitj06GhcXQ&
zq<3BmeVVMmqC54ilrWJeC9vo&%&b=1qTP>!RXICDWSxZ^FCe0eE*_cLo5uT=TD|TN
zB9p~|MCgQ8xy6>Ope4}X%bhHpr_PCvArU?OK2%Qv(jdc8I4xl?pBIIuP^8YL^l5H3
zw0w82N$==mPW)%)g*Kxl>a`NvQk}2l*$?R?ERL4@ULfi;mV7QZVAOc=f{nTE<h3xx
z&~vk!=Hkt9vB&YYsP(oI{#>s7d!Op7F$eOnBF?0oy|sr50+?JE<!x41hhvvrX8Gzq
z<E6g9Y8rf=X;J}GuHSp-a$>h`)0d9|=X|gyKG|8kjyc2eWA}KSVm?8j$z}4)@-*Sj
z6|u@k`7>fs44D;}PU)i>oI;eECnjr^hP~{Ejbyi$-O&{9@liWvS4tJTMc>E@g(VMA
zTFkWniIhPcJX>D1W)N@V=@1j&S<W(5`2|E*SqRez2tpt_tc2q*_N+umkWo=Y$|q&W
zMJY9M=|!vAZmz~?dNZuSbfb;dVhyu$*Wyg7HrL`UIvET&ToBpT6OCki*OP>3n%9#x
zm?@i6Jn@Y;{w22<K`A=Hi_LJz^2VE)|17#c5F%c~aHK2E%mL)qD>&r-<veNxwu8-k
zV=ccBT_7*-LqX$KJ{2M_<=@6yH{HG5qH}`Y71b+@ZWR|JPw(8vDGSSx1V{=$jL1F<
zsgyAJ1Z>yg1L{jMx_9q>vcRkUXly&F;o?`E5-`^8OK*RGO?d7n3q*i8CEhQvi9x|%
z+jU)(KKEdg7?YzO$geo%|Cro*m^@WA`)Rlkwc)v0TlHA@ty}dYmz$sioEWuBpCtpz
zqNP3%4J81Q{Kr^}M**1<!HbfE)_)mm5g|#SpparU-<lF0A<3N**P`m~(y}xlPASc4
zh!l(r#3_9QHS1^E@8guMkA<3lk5h`cHt$y0VSTDw@OfggZRuq0626q}y4PTlY<>&c
z>Ix}bl&|0aLVL76#C%yD^2!z6V|!i|9`aY5@;A8^n1V<z+JdHX0LU%MZnS283<a+b
zWG9-Dq|H!l|4>L92NYGh23N~S*o*l!RjDRnTT0C^99IFABu!N7qpeU{&XYwfX`FVd
zIZq{8E^6_NA93W2>~stjBe-rG?F@0R#iyE6u?rz#R(D2W0j~?F3HfB(*~2ZB#JF@`
z!<61~8`JokIj0jY!?2mrn0#zZd<hO=BAykcAub7zDUsaUSunp7o8YZbox*j!!I2FM
z-ti`DA{2Y89~Khzx{CssED*KgAo9AQ;lXhb5%w>`4-!~~JkJ$>FNqUT_<EIAN{kZT
zyC*tzV#VK+sv~XF>dhUeGQ{$S&&M(bm_q~(6O(6Oe5S1MG$9B+>%VT-p=a}Ui49tX
zbBcDG%y5kAVE(K<PP~s(j>dFwSLsKWzNQg8_CwbuqjW^*P7*>9A9g4HkplPGizFnf
z!-4-tqUF~`Vfw3goZ;aB*yNFh@MGfSKu0d;!^NEEd{dGxaVHrNsa$cz-tW<MCx3z@
zbKlwZ0wBqgKPL<FWMg{&nk)$VFLKNA^p~;LB|cUbcUoX51sH3+V^wvdI-6X=Y6QHB
zTqlc#begZ!%j*;i&ptrmzy+Ep5)-Y&XC=N;f5j<@qd{LPl6CFEsQ3YBe0VqNb)@g)
zpdj@doyc$lkv`wvxG+F&c^b9ArpAbugkRV|ciwtnPqM&Q*z1KDQ^ikX%|ur>>^7S&
zj(9e?^wnU>BAV4&D;6*i)O@>p4?4~Qj5UrYpyC{4s|P1D+lbATNm8JYr_Zt%&3GWi
z2v78h!Wmcjb9pyE?CVVi<n6Jp*B|XN+fIMdxLD))y6hF{&|>{Dxc$5-BJ&9fS^~xS
z6+z2Yl;jsXi39{;rLyZ&kjJAR8WX(Dtpruc_HE7Ca6APMzfT<alkTwLHGyTwJ`(yP
zpf3|L6+C>LRATIxKkiX`fxuYxEtukLnetP2Cu%%<=<<mwH79k~N>qd&(VF&S3WshM
zeNT5J$wlTT)NN_TWigN7^jP;{^6xPxLb#drn3I+Ia4@Z7=5O?fw~^mzXK}_FnXKL=
zIP|Y*3MEHu>oc|~e-M2Oy9@su=sVhb(PPV6>V%@6#VwaU5ahBSgeA3!F)%s&`6EYC
z{j?GLB5Wx9wmb<zeG3_@c2u*hB7ua==*_3vF?$uyl*F&T9OHx!pSYaFcm%;IF`-P{
z;8syHrs-%i#go<`hs0wp?ilR*wmWgWt}F~9(b<+CYw2iCYh%F|jZj5c5VWi7nFWJP
z_GgwpdctEa?3y!a&wW?0qdveew|VS7e_B;dbumk2i*+;Gu~+?qSjeIwr+#q{wMNQ_
zVLXW#1R@-&>Esza40gI%ro_7Jd@llkO=fJWNrZf{4!;HBEZCdNUG|a;TLm_%nR943
z3@|tz*YZ)WQ_WqzcDfVfNzqW+z@n|23B=UOcqYGTsl)G{C@8(rS(stm!H-ulr%<HP
zvW<2g#%`SljQ}PKBITgn<AY~a^*?t((97usI4uxY<ksFv#N0-(CTQV#l4J7pGyT2u
zrY7qh%jIj=2j=!akzCCDhn_5xBsVe(k~?^2e_b{waJYQ;@p!ZTW;%G-;naovWD)oI
zj5yZZNV=eU9#D8|F+-Zt0mAWqKWBeHohJX5TRze^OC)y}-O`OmF+(?N&+aaVLmE%A
zrGIXz-d#-$HJ()u{oHf9yI#O*y6BR=J&M1(*^q9!8vkRmAYRP*>Rej$HmvmS?n<uk
z4hgVr{$tU-1{!<{1yYork4#NCt-lJPR)@P08!|N*aN~<AuN*mcwLYhSJ&>hx?|J1;
zONdJE>;5>0hY6-kwc*~D=FZNG$|>qWro_zyMrFzI;NEb(ms=O|sUEhXFwcZ^TMGbe
z0<mg=hcb<Lgf2L8fj#6mz%F)n{Jvhw-C(aSFIJej>9N-?vS-JVmp%-v!0T;O?j11f
z4axDgFa%pc+-;P6>@FM~z&=jhJ_9J9o5oqdly+J?3|<iDc6Siqt$7ogePLrp3H2@G
z5%az9ZJ~WH(d-*F@w(%c-?~1cHm@ISLbc=7oo^;gwX4-Hs>VOJh7FH^eri}I!=4=(
zYVXX!TmkmS^$@Os1$?aV!+*?-eh^^q&iob3ZipA~DNV6cHUJCPZwQeg8ytkm3D;p2
zkXPo9qr=<*W9+{02c=7P90lca1cbu^(L9)^d>QLt!AlcQRt%YUH-cM~Km|3yNgF|(
z_VkMzZ2P>D&P#z?X~8}^%ujxV+=?>ifJ1k3LakeaFddlJAdGhtY(27JY3{+T+CdK@
zm`_E6;x@vzFG8p7LoP4Ey3@j-R$=J4p?zQo;-)k*A6sj)Orw2xooF};XUHTt%!)dU
zur^!>m7X;>98WpYqBSgrH|!)Q(hUACLck%k3n!d<Qs&}<jR-Z$)GCseD6qXd(3m6Q
zASdJzG(urA9Gx!;X*q(kJxbk(nc*_(1{_?p5xEME>B0*%F=C_4jWMQ<;@*s*Gm25-
zi$N`qvSo-7pMVADdiJkr0U1XQKEke73?#teUke~4z1l1yz_Aele%=%xq^lOAM{=Sw
zl&w2bVP`dQ1!AQ4I7z?veTOmp%JH~JWHo$ob$rr2wsEgx<C{>W$KfI(9k{1UJk;Uh
zvLSH?-f?z_Faz%RpV47}t^1eUn%hi_d-}RZ7W?<ff_u4jnY5*B!F`gTt(0)26DPM4
zacV@8e1)5^L=<<U{2u>N%5es6zp~JvSjr&{_;<Z@2s#E)z;pd&Pl^2v-v1XQB(Gzu
z(Tu4LfQ0;8FNyxkp1Rjdk$xbhe^0!XC_RJ40pR^BMQpBr>Sr!52(ZThz2xDEZ|3|9
z1Zj=x`iR9VA`%E9dYZ!{gySZ{e$~%-<MfiTFf;GBzDuy;LQ4S<<eU5&YV(l#rsfvb
zx>oXRq}+~sdx|W3@Z0y1f$|>!2(q}rwH>SH9=tEx6}Gamxg|QBJGTu$LfFQR&(1Fx
zW-f1j-V%2;|0EH$Aggc(<L2dOm!!6Ry8eplELyr$g&Z#{RncAgILr3Y-JAme3Bhg)
zhseE~$}Y?7<A&4dO}Jd49Ej%)O6cz?Uk~=hdwNAGj^|mM@+N{211{XXJ5wgTw^dXk
zZ!{lQNqd%&n{K>V%+#H1+nRo|oXgGeRiDD@w@TCHU=#ku+?jgRfu&iA_e}FmSPk&x
zfildCZFeWsA5ElLmb;FF(Yz#ys5?3EcNFG!3O+tSiQo&sU$d()GB%ga-;?A%*&45$
zLmx)3uPQ`_nQqSw)K~A%H+wvwc=xr&QlTP*Nn`M9?eY3>x<vB3hPu=3iSkeLgAMiP
z`wMLW6vb2Am&Y5@Kz^aI;rjewxi49|>Gm2C{%CuCsHq7^fgwW{?x1j4Ji%~5G&w1x
zh`b969@uXoi=KE2hKpW=3iePCvbV>AJLS{wn%*?ghD&|~W)oUZd&JnO{n<Jp%bq9&
z-DyF*Yd^GuWp}&N?F4TjE1@$;Vi~q?$#Yl2C7*7tM992lSdEldFj|dL($8J}U+Sgx
z1e-CV^+bDM!#m0Ompz5dxbcTx`rDq$h*bDPFQs_@VNVrQ{Sid0S<Bll`g#VKQhx^#
zxBVSDix5EY{ZH>9A-{r%KNLQ(RHFV431O}N(BS{j?N|K_0kip!iMP&xogAvOZF92n
z0mwnKnE%y&3kr(lK`VrA+aeO_1?jtXoON0DS9lu#p_c@X8tJmpNqZTqXGnZledIv!
zY+cS$aG0bZp@FAz5uEVPHI5hh1yBb14N|_DoN)1OtDSuBC|Fv66B1Sre1^$rdODhy
z6MizHio$t1s73M9da|EalxwP$vf=5p>AK|8nHp@)&!aZu?v)5C>xI><#^<|s%+NlJ
zvxQ==AfBZvL>J!Wj2af+6+e=9wM@3jUmWfjoTM8aAiNR_7wg@AW_+84kYN5bjbifJ
zar1gX@e%7j7qK<@X&15ekZp3&jS{E5XH;I#o(n+oC_;KRdgZ7c_6LezK0Em)?RLF1
zn&0Ad<_;PXIEUhCJiBQ6^sbR|J~_Gbcq_(S;Awb?z|QGZ_Y3CzowfV=*#jlko;mAK
zIOM<UXaDFWa6wp~jT@)8@_{=67cpQ@y(BVa(b;_r4;H=%e`wY3Su8{a)X!e!=ahJ{
z1*ZNFg7<l|EGG|x?fZfH*+$`AWj`GFK?dc+Qq*(|00dbe{FYhsg*Gh!f@Ie1qk-!Y
zr<M&5;)<r_VGtE7dXE`!^OpFfUo3&(!$=pd#|*%i#p{}*sFM4wZ&V6o-S1B`Bs*DH
z!a?t@tX?L04l<^GcmH^M1PcVOS$o&^1tWrDhvhvfvN-!Q1vuj-W`rSLL_RW4Bd9z3
zvv~JYB-hbLA~8|ddB-PxUWmdcCcMm){n0b%$f(aZN{aS;S9!>^)ta+bcSQ<EGuD~4
zJigWvhb)VMOrNm=3-vjKv{ww*U0>%eHNg<_YI&R{P!=~e%_&D<-e}M)>qzv$^IR+R
zUYbDLrQ|5o4L;wM_d)NtfT^x^5pza2bKC5!Z(5t-YQ}OsHh5{zo`WSzBV^y(7V;f=
z%E|>e#zG!)XUNRv2pRdy=gG>8$zd>xCdSF7a&#3yymF*JJRYeuM#-63*_7)umd$2;
z#POb%N$K;}=u8dwGsQ$E!OAO|8u1@&Hi<dnAsz}vPoqn9SPE2thSM%#Rfbj6j%cal
zm>F?OnfYqI(qc1+0qLwL#822rYI^irQFNulDjkB%r^zw2@`{w7o4T38s(Wfxfm)9W
z2tAxSNAj#N(Lxs>tD$NQ<OG;KcLRku%fo8xg4MO(6U`9vwmWwj$Ai#Pbj*`^Kk~Dd
zewC#0hU;tww!V2Dz%8WTPrM-_E;LU1k1`@ROFy?cXyTv-ol17h-!8#5g9XE&r>dF=
z)2Z&L!E9a@RSQbo6D>BNAWt6VRCxJ|58EvzWW16~seB7<Yf|@+5N*qfm+dwn5Qo0x
zGV%09C+}csuwDN$nJSlp57d$rlv0IbT?2aI{UOxr2Kk=Bk12YTAKkA@FMQF18eNv3
z!>miM<ItvJ_9#YcXZ48)Z+`)Cxo@9|K4QAV2jfn*`01N@9%0M|76qcD9<6l&JIf&#
z%!(8gsf|}8|J&gG{{%q-^|Jw%g@5X2*Aw0E&PpFy%<Dh9o*WLYs>lYmzJ;ej<=R&6
zH=ve#NC;B@UV6nW_{FgD+h$IJS^}*->vYkXU=^NvjTJLoJ=HlsL%W9ESwY8r65)nu
z)UWY`pjYSu@6jlstptMy-p_6pu|sOw>EBuUp`^GH?k5KVfP-KsH6c(=4FH0)@+X11
zZ*}ree|27URqU?IlXak8+p&7kBfiE|?BHh>eEb~v$#It)hK}zJtW!ipH-wvnzXjb=
zX3#faN*L5xAYd{JJ^r@E)XYB`<Gu7$*0fpYhG?SgA_Xq+X8<;S5)swODHnCnt}%VO
zXaC$=aL2o#H)c*mnF<6o$%&#i=E1W?q!$cd==R!rNIkKKXi6p4dmTe?zEeLTt=H?^
zmv@(0Oyo=*c#+%feErN~XYhjRjqlM=kJF|r4b=|<pZzSS(Cw(#R6`U72XO=qZge(w
ztB~85`9lwb+@Fwk<IcZr8*eaTroidPMLjDG3EhnuaaeT~p~2&Ku@E)?c}(NVpSLgQ
z&?x=0HtFLvSzg11qQ`Yvv4+4`ktQ>j<jQj&pPOO!#-Cw7Ztjlv@7Vj-@dn53KXTgL
z*%6PT&`#Px^IE>3O*kH{lPsP?Z@Wl`72T3!pzewUo?Xy4-?bhpk(>}X;_*U<Qe7*?
zUFmARe71BbBXD1);wFYUA}hHEth@E`aIx{aVEcNcv%3-bx-}ZOFxAj(bvcm2oSwo2
zg$ci$R(l2$kU{Ke_Mxs(<L-=vUWoRd!|WbXWzdCc`%~`w`Wb-ht9p&6AnH+uVrF*X
z4b;z2Y%Fd{yo*IVCC|;pTfFdLo(>ykfOewX@CZG0VmbFA@#b`!z_Nwd`x@#hW_c^y
z^LT;@;ULfuUp*Nr4{lzDWVc6}u(v^kw$GJb&<LwgA%{NsD~MQh;eYII%6869mZcRd
zs_lOvQf+TWE9XUL>st@jtj#gVv(N*;`*)*qxSoO1_+0&ly2K}eq*YwsYqaFX1IBaE
zRTP<~4PVcSewyEa|NY!P0387K#9y?Bp8q_z0op@a2h%@`%FQVjzs_x4NS4X{xm~dg
z!^~Iu%bxg1chBT2^!&AR^_M+SkAZjSaNqlZ$M}uO7ZmJ`ithUB+<pd}tg!puPbyv<
zy5k4OG{BxH5W@(=%_#(!d{vyq=pRa}0op?|Nd^v5c1u@xPhp!w@8HmIL@j37x3TdF
zh1$uP**Wq4`K9F*-i$1)(bespU83psJz!BeJ*@ul^y+%Pzhm<T9xV``6*x}8U!>$>
zfOA{^fLuHQl1JGQK$vOzs*5eXD@5jw+7?l)j3(S@Kr&Cws6Ck-SX4eM;g!uAh=<@W
z&Gd}CX-^XJ2rq$D<b1OuVfZT0E1v_T!Gh9O9#w9=ivblHM~PYID@OA-`Kw=A7bu6m
z9?HwKe`hpSX@MmeBtft!@A3I~tW8C(Si@ZX4o#oHwq)_M9v0JHwNa^#r749(Co&cg
zC+fk`nL{_3U^Pw<o)>4TJK<0=m&#Wd)r78&mgw{)N!3^FPS;rfd2SyrcSro^xh-<7
zeSdCej?W$Ye<K%kL`Mkup05Ga;NAW{w;O+6UmQ;xP^Nt4IJ!l;KerL_4Hw*ig{lR2
z^rsttoZI?2i{7NR8;d@a-jF5VU*|R?D`&}{xoTr6;QrhW<Qg+v2F~rA<zRucjpYy_
zWQLW{*Z4*&K;`HE&2t-K3nF)vN>gLY+fWI%<pUx7d2VMR3Q#uxmIf<`j+4$%s`|V4
zlLMYe1<vgvOK8Fl643kc7FcL5{mY*C>)d7}K`01O__X^6?E&chtVG}26Is_Z_FGl;
z#PxffBr0%75XyaaOhO<7)~K2Kr0FN|^^@kG<Rwp9$`>MlNZ5FpMO(S=AzORujfXfK
zvRnb0AiHEiDgBoHjV0qPhX6+pQ8KB2D?+}cRUfMzHG4n%ot7mMVZ7Qg4e0{_%;)4O
z$vGSqDS1MVnc>Vu%Y66sgo66TY*+s~39?Svc8KXI(Q}c8Q-W8DKTiqYhG0~V=|_CC
znR2louqDK;`B{a>v+i~_qiXY<Ywo@0K=qX1o%-AF+7E8qr@TF=?3Scu2JGjRvaQdT
zr8d-gS6^KO)!seQGatNM>5;jnUrLfLwQuh9-o9`>_^4_}j();;zo<NiOuphyu=_Xd
zfhT~Vx~$^k)&BtP0XVlG(DJ|G9{z%*M$u64u;t~W1-ZY|V3@aP>XMYv0PW$G2n1xe
z$(V|!SksD|7jS=Wm#D$wc7BBNaP+5QlB7bhjC0&$s1Pv_Ag}R=i|K_<gmKvA+H*)3
z{A2>t?t4FsDu@0`{b~5sq8+q%MN7U-*lAcH;ZU-;!$4H<Bg?q%NRFh#AU;VQ%Lzj~
zp4P))=E!AYl$XL!sM~|>(P>amc}dyF-iP{<u7G5hNciEALj3}1oWKmE{O;^Rp)xvD
zm%gtO)XMN<6CP7^`9>h}BH#qfq*Hn;^%{774+*i<^>~%ri+u9!WyQ=2qgW56JVzN%
z*^V9+gospP&<Yk;KtumHQbKPpJhn|Tlht&xM+fIsaEXm18^Mo$ZPsIN@D`l~Ix3Zh
zY-ZTJb11K?j-=K{&e%CMJ?>dPuy(L@<nY%lu0*i`=P^$CNwxl`k1F2T^jh1aGD6r6
zl?M%PaeOx0X*u3F$e=ox-3g$18NM0i`=)X>oa`>zEVw*5<lTsyK+M7*BE9u~21%Ze
zXcmJ{QDx{$qdXgel%Ys=kNBtCh&0*;1}p765-PMuS(t^i^paO2=}Yq10C!z<(P1b@
z{PdB$UN$R4cku3ErHe+U23=R%3t?xx)Y{sdcSLAHR{W2gOlZ?s95zSGSwo@5mB99P
zwc^!jl&g6|zGixtXLDI|$rg2UA%5S4^5+8}4aS^>Je<sfAr#(@mZT4)!SopL-^Fwk
zl<)(+pR2v{=tsMTQa~Eav8oL2rO6rEv=<0Hn#XnYl^JT4>Ig;#2-UE_!bdd^X=1OY
zJJW;Va#+=o%kF*Joh*wJXklur3ctn@&C_O7cvf5Kygs3lC845zRz!y2>&EDg)%@$Z
zqo+$>H-pUg$F{T1>g*mKL>0RvztMR5oCkc3QBq!Yra_Nq{{_WX(cQf7e}eYlYf@dU
zyUTs)DE;weWJDm@Po>LVrNJ_nw{@ILj+cF9;zC8?68ii#bnniCQbAzKg{?Hc0cJJp
zc=c<2-h7!sYyDkwhe(6x0fxOA$`%{)@P@@;ej+u=in}y|0Yiv?jG<<5MTS%*6i(@n
zoh#Vbn^Zep1AN=+p-eBiTt%3MytTq;KC4!~dZDsXm!oHS7WaYdc$R7e+j!ksV&RwP
z%sNQ*WB7VAspcgnjQ8hu)j&?V)GiHsN)wz-bL9hjW@G{W>Df-(yYNa=xNy~(3(hyy
zO^JIoaEQvQRoEc+$L#j$*DnFQmC1;TfPMM1SC`-IEN|3Pb%-?Q+WC0ALO+8%QBWS7
zB@LH;Wja`dkS@$&Tr^TNnxWF>gHX-~IsyxKogRy-V4z?cG80=O6A7za&heUE%^sqB
zW>!Xtxikmwr3^_5EFhTkHAdY<SuF|)%z#AjJ3i0F2MGHTclSCBSN_~boK@ST+8^ll
znmZ05nB`%jcjz%?warm<=Hbfb_bf6yC?{!HlfH8pV;MX}X4&3mByjp#e|rq0|GH;8
zRP*Dm$QGqEk=R<~*`R2nUA@!nqEs=@cMOd)?V9I2M(1Z!eS-FN1cG}q(gI!dFHUq9
zzpOj*T)GLm6!h(r9<UO8-PX8sKqez!2^}986B|1BOLpPWva8!=+P9n2ZQN2=zu9TQ
zJpWE0e8T9{;J%mSRFW;Y`9(v}EE6lxNCRQZ)WC5hzA0r|*mW%+*?w95);>ytd<79y
z`L9LgxTI_;GY#j24#kxHE_^5gKAz9GgE>7ET*EAqY9qw+8TA4>V2l03fE4=zD%s-r
zbN$6awxz>4`a^qcpK<700(522BRd`-`10SR!5Hj~YPG+ZX$cR8TRxgFm|Oj#gX8{!
z5Xw(z_yz`jr9>wNgKmBIgx@e*hxclUHj(T8)GXsZichO@@jxB+?3ph*g+0Qb2P+jk
zCHy%Egm`!G+rjFHv>Irb_isFz;(FoV!>pprD&m;#zYPT?qon`J(=3EM9*6vEm=!o!
zRkZ9^TJMK~_N_^+enF%^*|_`~3gX734SuQTixn0Y4&-ToqB^4<oN_WyRL{<FiA1)`
zEpi1vD7!yc0X*4#o~E%1tPCq|56s7H>*$5^2J$rC@L=Me-Z8bV@hQ~d*|~XRFl=;c
zRW&tzt$k);cW(e5w28B_b@pQNJZESB=dH!z+9nBvhN49p4%3YHu~e$CGX|r&qi7f&
zvE?Jq??Tz7>Ga-5cN-3*vDzP)!XY1GQ6U_e5}21;4GBh`RPGUYy5D~oT4WDd8?Z$W
zUyeNPN)ru$;)!x?wk5qw-&10YqWh7jq&Lxj#WDT5NK;YGggAQPTbbd@LUbbr(>D=j
z%ibwd3Pr6j+hgq#Kit?kE5*B8vgzo81$hH3imYwL(yHd*WsYDIOb)#Y)hGGKQ?k~|
ztw|I-*pH@I)!Q<8TBH)sxV9DTHLO?T;VMl8qs{4Q1>~!9+Z*%W6_F&!?JYg?dAx7q
z>@XfRlAs!>lwD-HDedvGs|bbneC3mf>D`_lx5I&+63&Yz$kXe{3id!(tWunx>-wHW
zO-)_TT+<gnu+87O3UY}oyzC`|`M9BNMJRjJydVD##ZH4)@p=$UhwY77+qp=v_QhTi
zdhMqa;Ynu;R@Y!)^wJK{H&P@Fq(>H_3QDH&U8ccc)9ea9-vH~n31Sk_*t|8f)Cmti
z=v;{iFZ@6jDer<j8~#DRCxQr#6q*^WnMWALrWIW~4b#u^`vD6p$ytks)S~|SKAeqc
zHTQq|eOUY<P4M0~)r`osL)wR^mORZb5{MTzvw!<O9LEm@nd|${W+hy4cK%gV|Lgnk
zoJw;6Vu?zwdP(QiyW(F5YXgqO#9e0FEr^9MqL<qg8>xnvB?W<UVfVLT)&*qB=6~VI
zenF%q_N%N=HFutY*zWT*+i{>qGrpAl#@!PV03yx#jIG6pEbxE_jRzPCsu4uDRK}5>
zk?J7y2`ud-vDPc;!V4%k>Y(+BTGxA0{Z*$wK9u=*;Qv?kg`Di7tF3>E>h>d&PKH(U
zMap}1`z_6X;K^KXKv)yo0G@0-z+nH|J)Ugnu|>z(jNQ=d%8GPm7X*0hlB3Hi+o#tT
zkeHC$%ceC8)BTh2p*QdwzrGKjhX{dC!T;dNfP)pqH*BsHOAn+8&5jfS@-)N10AR}v
z>$y;f+s>Eu_>UL-z9m@hGI}rS$WSE+n{bN)U6^KKP}RFR<|d!uK9&ED5mw$pc6Hz*
zgr0`&BijB~QJs3$DyKb<P)Jp4TPxP30|arD^4CvGdsOfJhV7231rE7H8TY{&lrdN;
zFp$`Ts13hBE7vkW`Fb>OMhVL1j)7w>DX&p+!L6D4P=?;9gQWJXgT3N?2mzt)xc&#I
z0KWLUrn1N5hNGfd@5RGZ^B=+8=0GHkr6QsOBk7ByJ=nY1BZJ*NX~g*8#QBe8oR}Yz
z#(U$cn&L$Bvbix6h~*1Y=RHaHRAJfG>{Y}>3)ftsVPRPimw(C#`|!+-F6y#R{asni
zpkz9Cxq`STZ!>JD;4ycit&hI#5xjGT3QM-11n!1aP;C1eUu>;ZE=EMy0y-XtB46ca
ze9rg)_bh(DO%a~4i1?#|NTF*#dh<2Tl%*AYrbASjmmN5FNoN@bPr7Qeg&M7+w<I^7
z;5x`?aYO*4?%B@aM%=DTrD=}LMqH@IqQQc)SuBroA(p)|+DYNTHwi|<cYM-thml6C
zg}LHyCS(Gs@s!w*Xv7kYzpKgG<cetK%6t}+_af&u{yvlQGFMzYG3zM*1NSOVI+{db
zxTjwx&{ujWHiTfmUt~X!|FKktdWD7?^=U(d$n@*B)<)@<Da?7Ss)iGtPYVK&o^7g8
z_`%gMA~^3`8i~unD_?t!hD<yF>I(r48-bQcmHa|^3V+oXice)Vq^I4?_|K}C<5^6(
zDHVY=R;_vrI5t-aHCLo+qz);wvS6l}gq1StOf+3H>r5xkK1V9}e>N5lK~%ts-syk-
zJ=zW$CINqs%t{p&35_@`zwFalV7O(Fj=9sfbEWVEn-}<=^Vg1Efh~W^*U;XQ`|mkJ
zENqUmuSpq=tDN_|M)ofp1d8!$E}`~FV7Py6Ec~K(`nfu}=}AWGxZp^_Vw1(-Fo1R+
z@b`HCJqNH)v*AHeDV0@>@aom|uTV<>`?R$!*Y#^xH?@m-&j5R4J7AxF2O$qmOycz=
zOwCcE&a-8d^<!}*Ep0i(Z}08%r<Y-2a#b8$Xw`l`zr4N6gk)Ze$RwAd{zPNMQ|u*f
z^}-IY2-sjIeS@_Eg4K6hiqyX&yAyVa;E~7>Bf5T<*N$(o+#A!2*_wcwx5ypG`%ID)
zR=yq=xHf!wGHI6cjgMw?^4Sz;W{9U``kbLdaJGCDF2%>$tF|nKBBpY8vOWaJWGqE}
zqWZHUH|87@RQ@0dJEYM%>W-yZl2#^-;AeMeYno#y4J~*6)E@(>jGngz9uEA(abO>X
zS6~Vld7yZ#(6lblHo~N0vG_gxVa`C{6?4yEq1`~xz&Wew=M3{Mq{3;{g}Hh$<PQ&S
zU`tCa>(4QRNGEmI23|zq5I!eb-})}X=NUMwu($VK+9Rg$s^s!eQX_qx+v&^IChM%h
z73&N7{i|q~<$VX0joW8kKf99eR6&rAM5vVj3W+<YMe&h`y&6iYcnS;eBG!pIVYoeU
zS=g8ZnVD#c7uDJDM?dOdYFvMP-R`AV=M6bM{v5LHT0zK*kZ>J-<5r;%(n;i%(5Md4
zl`z*Z50IZ|R<laPUSL`?T;xk5T6NjRmX#>A)*sE0>fU1G5!%s4c(MAw;-+a({rkA-
z|I$81n~Sz`Im}Aa7BHsAK&R3CJ#HEcPx*VhuOKfEs!7X6?ES`9d#$<fcl&gj2`;e5
z7_so1m_MvcmulfR`*gSR8!~9CYUaM(hYAL5YQoFt6tRK8zv!JLCUD(H+B<~(DzdK{
zB%dqn)!sC61k?j@(~{!DVAb))pL7M{bqG8=CG|)o{~yLp|93bpSWov!;dYMr;?wOu
z+HYjirm)lie~*q?Q^+Mk`4!`4&+;=L$2!@goeK^iAPO)$*H^h4@_$2}DFW!7BSp>I
z!y?Je;ohC%q#qj%D1x|=ZT5ej198(|^v=d}6z1yd*{Ny@^tQIHroFYj@%`ePiw90O
z{FmqR+o#tLfWJpW0f63VdBLx#j+66?<AVK9+!R4gBgRk&WU0l*szC@v3F;K$pUwB6
zi4<yw_abskDKVtA*Gh#!i5`*<z#%9trl4sG6XHWb{CIenA`mV$xQDXBq*D!Mw8FxZ
zc|LF2KVafMVuBzKC}8rY;nIh`p}s>N@O_CcPf*;A`q(i{=DaLzFw`QS*!!W3fWY!l
zv+rwe_@H2aaqWkjEwA~|w)|XHl#8-_a~P4W43vIor<$<6O<N4}m)arX?-zaJIPuWH
zqyPnT{vw;VHPkQRB!WB&+{;hSVIX0$k_y@sW$?C=_NGyx*6^c$`}Qa}vwxZ8p>n67
zf>q?#3?UL8R0ioPj(`f!RoX9S-LF`!4RU8zDa=nL4eQFnJMpHN6?@(oofX9T$Yu`F
zZT7uVIf~@$%OD9*mik0J5}E95KtAnPZkSdsT|h(29pRU)glQVDy5h-$6e}S*7oop`
zw~ju<H;9HF5$e~gkGD$n&8<!j*l?{de14fT9BYV8&Z`E6fBUQ5_j}xw4yieWl}prx
zHADQ8u^G<xzr;-iS(+b+gGr%j-vlUVi3l@AfOa3Z+z*5Ya<io$W@%19>ksmke#K3>
zoe#CN6dSf=?rKj9uT-}Y**)IWOq~`EUoL?6dKK&OWr}sfn101gk!4E0`TaHvL<#7*
zdmG|E6rFd+{a+Tp@pj`QrXCB^dFhui_WR})$rcktl)>HqMvv8zlKM{Uctsi71Jkd+
z{<1bIRG5Vf=gk4^A5ciQKLZWY(_KO7KAH-+0flrG3{yovppecQU={`>euzDsuwKHF
zl6^fQ6H+p>zC>i_<tyhF6qj(vl~z>Jr+HP?)e}Y3er;|pYH6=8&*<nWNyAO-9ZCVv
zV_5)aI;Lx4I;v)7KD2RRIn{J!9ojXxvGcs2bNBGY*wN|Jle0_4sjHt1bGPtw)HEe2
zU}t39k22XMi>+GQq;#(#rBogM$d_6+V2kwEmgILY;vV!^e#`QuIc^Y+mR;zGW)x{<
z&au>Q3V!<2tv^?ePWlVCYi}DvMN+ZGn`v&DVMy-#tak`$f&6BSqxnkZ#<RVZ`Qyc!
zZT@5uRRxpfh9i0EeN~0iX|x56>a=!6jL7!KTeE%D#q&*2gnbOkl#<0ZUtFe-{WYb_
zT|s`R-NLmTgdj|t4U6X5^7Ww<;Q(@}x{A#qSDQnaNi8>dfA+lvF>Pa9U%8d^J&2*4
zBSY8i7$>;C=D)Kb{z&{tH+}^YKO^}XL;oaxepwKIB!2#HSP-?(t*4p3x)Fjcn*+fL
zAcTrPEC_BK<jH#rf)E5LEAtHjEC?Fi2jHyx#E%ga{iVY4RHS?`oT{mkz5}sUtP#+V
zNTiZW^ZPFiiAm{5gkXksI|T4T3IceeM^pa`osy`&!)=dpsyFhL0h~Xpk`NpKl59(L
zK_h%<5Hu$CQY}ycZGoQ|d&|f@@~Q7;4jA5l%Pr)s@j?b>%@qT3c4Hj_eWJ1P%bd`n
zE8~Jje5LKQShOjo+yRipLZ&nFw1zi!0{%8dPEBuIUYQ@iszDKYRo-qzkII8R{DCR{
zmlgAKB853w+Vu-1`&Qc<rMcemMRgU?Ogn{nTg1YZ=eLT+Raw39p^0a{jw`L`JkB%%
z;Btg*ICMf8%Lu~zhJ=KQ2^5Zx*Je{+Ga6_}q<b-kaYBIU*B+ZS-1q(EZ@)^ZRlWX?
zr@8;%Jk7tZNt10sz#XiR?+o!6zh7m3FC_F&7*9qQ`mjKySV`sa%K=9Rw_^Jru;8H$
zo06Fi04rjoiVS#~k$f&guI1NIw~wywUf$0g*?a;5869bZ!on#$BcfvnqG0hcehJCp
zNh#?*aT(drtekv1zh?y{E^2(Gl`i^KwMKb$4T@=vEgza&JA7+8dj!7r4lorBej6$e
z{XRz5KR!h|IXxF!KEFiLzPyGryFRzMH8s4u7ILt@bNub}Y+&_r{QBnm#qFa95VnbW
zcTg_Xj*kgdvo~hqWdLM{@{NwkNA-5Yx65xm9^7HdUyGIj<t6U7X=*({7%zrRr#C^Y
z9B>DDt+)PJWsZ}k{q~kT1Q{(fC3hrSCS5#HyfSYz8x7m=x2LIK0w2#G_)ff6beFm+
zx)q{MqlhyjWJbRll&cfzQD=?tfLyZX_oo^9SRzTXwrsTz#`$Tk|M#akk|US@aiFep
zd;I^AI|w{Y=`Yo*bF=V8{uK956Y)WBp2koTv)jHGaW@dg``6RdcmYEBD~$K|)8wVZ
zJXrjZXokd9Gwm_`;XaJ_n>)xG<5~T_W*WYeECp(bTp*f&zyi;M6Ud6}<KfRd1|bc4
za>T2K&O62XGO*?4(z1mJnxar>`$NBsh&Oboq@ny*RS1!dM1Glps<&0TQ7xZiGhtuh
zMAtmA*fv)~HKUE%V(Z2DGUHlXa^n+}mnKP~#LH@z<4uE!Hj-?-`3z%im-N?Cv9o#%
z{ao--4J{pUu5!%$7~?ig*{DIyzkh7GXGNsr$b@1dwf~C>`1dub@_(@RmTh&WTf64O
zHCT`tAV?s%I|K*>*B~LmHMqOO#NC6t1b26L*Wm8%Zat~0RV%gL<K4UW-hK3!ZurIz
z;2HNA*L9x8C}c(xvFzwiq8V&mu*L(_{q5Z=P^7;vApzhY2=Ffe8uCQw-;b~VZ~XZb
z{11T;{LTK4@Acn;h!kms#=jD}Bg4$8e?|sgzSra0e*t9v)cF1Ry>@>U{99z8hFa!D
z<5%M8Mi24;Yy5m1{r*(7Qw3l|hJ(M?ags2MKjL2^1GId}881)F*D^oz!3o{4BJlUR
zTC1W4yn&VXY63qoMO!++sL;>Yb$#FsEK}0x#N-r4*00&Q?!x({<;KC4^^NGY&7IxA
zuD!z}zk}nmbG;wi7dN-EiKy3i&wwyZB+*i$C^OjCR4i-e=^cI~xSx_lBLo@)fy{Qb
zxn-F>3Ior)fe*c(*LtI#VKY=Y(TN9Q(WKgw#H7iF5?46Z7G|Z%M^ae@Am1t%la6I>
ze0isqF!X*R=a<Q+<U4Wj_d4H2d(lXOdb&iRE%5D@?aTLiL|N+Pdma0*)L-PSS*%uX
zf6kU)P*XzO>;`oWK~rn-rrr0o7k^>xDRy@#iHZkJofT$(3^R3GVVyPlaEib+fVQ3m
zWjtHHg|Dc-3h`I5PArJFfen7H+S<Ie2(L#uztI^f70spgWUZToC+-xF>THAI4k7N}
z3Ef35$PX_G-Bhwc>m4$D7ILPQ(L3Vpu~-NCtR~_+-nD@+_-@{euKQb%#xv>@IujA<
z9SnTC#|KOxycZWZs|$y=wUS1NmBO})@@C0Gi}39n(W)<=w_=B%OPpwjKdD~Y8WP3P
zX$BHawL@DlZD%fAD9xk+3Bh9>+)5bhNv&t-C9>ECl5jrg`x~k3mG#I+XvfsZFXd?O
z5kE(kZ6e6i-Tp*S3uW9gQL48fL(mN@+k)4^xXp$)UGvmUpd5VjDOq#J5idnq`F0t{
z@@Z!q&c)3#7tUv{)&MTR>68L4q?%(FHp0#_4>mfo)(|${>XZ^T*^FZkCf&?3ALgfY
ztr1L~(J2*75f#TibeW!I0dy5??LJhU_Nj5n{Uh!HRtIFgXW1u={K97|4SZvv@{x?z
zgXrO}cxshHPW*)~(<pmI)$>lordX4a5}#^em-3E0J*yKB8{U=Pr!`#IY0~@NY^i8B
zUJvin`vA_VPg?O0khELimlaRi;n)w>Iw+ZF7-0~<;h%PWik~;dS<Z+p3&yrqeP1&Z
zYJAp75rlNsPve{frpSC)C~u^iM&1~L*e+xi<;DY3WXJ~&m~e;%*v~@WTQ}N7;!QuW
z{E*V%u8LKVaH)z{VsETUR3mw)N|x>5woBDQb*auUyl<$^GTpwf&bFNRP?Kxh;#`yO
zSkO>Y=o)ojQ|w{<p|;fLn=?mwz{iH0$`I;%j`|2FE>5gn3^ki)oNaA&&Xm~C5u9V`
z5{!2vKSeC-hx0y^)lXtZsb2LLv7gq@mND}*^i|QLPmktqqp+S7_T2Bcc*odI7dDX-
z4;>90BRh<uIXgG%bl|2vf;X^#KQV)z`JjFmM3lIxNskrRX;0H<Jn$!WxV32A-Y<Uy
zHyT~gN<kMKM39^5tuXbO9w=Ynph^5g5#$&sa4Lgfm~TQ}Sy|u_fKj1>H!*0D;kabn
z#4K{TpY%&hefk`Tk;8~P-k@aqvO)VgS#iWXo?1}wKBR*;u!2+&TAV_S;>ezHg0(E@
zl!ZWOlvE%#6^d@)*O$n^Oa#d@Q$)~PrFTFNj_yQ3bRFFX1ndd;0M_!;5U?PEt&yT9
z-oGqVx-(OB7@mbEqcg<qK#2%WtoIY7PpI!j@7vdT5%f%F9#P?IB&?9VVxB{haf4Z8
zP@cU~T;C&7zW9>}?7rfa_WXgAM@ofW)Bm;p%%G%_pIoO8?HedE<_4&XSK=}7PAC!*
zh64Zr%QvWvdmh&-navd2H>k&T9zQCW4LDDec%1U&Oei3uahx46b2?94`K!^GaGtay
z`CkMPbLS~HgE_p{eIssn=U`QP?w^gui!^wt+)p_DqrPBO`+w2+^^b)*UHk@+`TL3a
zOFr=eL`nQT5If-$Tq0YSIJH%Ot319ekXaNY<0n3ufqR)ND)p~MW9~Q}0wCotfDG#%
zBr*}Qf~O_`v|{)f5`YAQpH`q&22$)npH!p(6*MUpurE8wl#hEBM?w_9Zs6ioC~x7o
z482l+e=e^%Zd@9Fx+imzKV!5Loe0HjteGws+}96VMu!EZ$Bg7VM7C81EHyEDP=3=Y
zj9u(4l!1&AG}p-%TowvZWME7(JDxwKk+NxmV^uIud-9bbt*O;SLSSwZ7rUm&R#J<c
zL3QE*+r8x3$5<zicz&87txhnH#>%;1cEc(bY2;GE!d#+wO}M*qzN*M>8A}}i=2eE|
z(X|^HFRYheH6&lsxmAp+HwD{QZSoYD9y)7WMt)O!#2U15gq*+eovNRCPXa<})HvCz
zY5yvEqIQ9+H63o(hUQA`Pa-~z{&Bti36c+uD_Co>w6^P=Dr2y|OEAvF4HR4Rsj!WS
z5B|AB$;WKZFfSU_cM@8?!ekba(V&g@1;6?veanxt@O7zPcYwF`hh&HOVcOhbNK$6s
zpUYb}T|^n-5k)H!rU$p!8g7RyLMxKCUr?d9!wzQF@db=ffQ{P`Q1&?#Bsih_S{a}T
zU-4Y^kg?;$>NKXUcud6;2NJZd8P~Y+fg&i1m%{O#_z24yCRC&&w>&e+B77OF@Ji=v
z&CC?g*Vae3Nke&k`qy$7tG(@_iu(Sq=_D9CJ)c84?V8CM8lfxk=ps42oXJ@VpDVGS
zrgBEHlXIk9SE5z4a%O&$^F%P$B3*~FR`!z%_(IphQ$@0N`jd-5pKGB_Q(32PlS`Og
z*MgU{vTh=i%V;n+0x(B1p6rt=$U--tu!?1T$tPFgeQx;Qo5=*?Os+w9-SDx}$%Mj9
zt^;6hKMEavj=Y}Oco4khRVe-(vpunS<9*AcYxX&z1#<whtq$Ep`g6+2#P%697lrrp
zus@Hv#||6IDRX$SDswn1KqjnyGDrF{U*&O6aisoN-V+D_yxaG|E@i_gy(|Ye8V#1Y
zW~NiNpRqUU;rtsGwxzG@=O2$8Mx2+tDD7HQV~?Fs8&}}yZ#18znZ%E~F5`~;JK=Or
z1GQY%ZKZGfRlp(qk;X0dk=tSCr}H$_rX7*bcjM$VOew|jV^|L$C{igl<km{9#+kZT
zUCoS+xsTq!QYYbWyO%$2VUAxj!%wS7LDqbvAB;4=!$c;$Zd9H<CxLRA>IB{Tr0ZQu
zM8O^Oe7kEJ8KAEwOyHM%o_NjBJkj|1VRNAQmYk!-nUL>kvR8xg5@+agdF1Zdct`#F
z>sGf^7`H<a>Q_2$tK@FGvF>-|pdE782RL_93-`w!PzJw;ua-x0nfs{iD_ny&i#Q%o
z228+Q5Uf7~JkSxT_X7$AFfs>~mcoNj#?uu7hH&N$3lPW-?}>`$HMZ`q{2KJm0QihU
z#L0oPZV$q=@D{E0+-LWu+i_z8x+CP`u!({q%e<o7JOa{P`TbpF;8hiGK%ME{5Q;u_
z5b%5Yth_ro$_8&tXK;jS2_<uJ;KS`4;{3om2&EhVOB(>O)$aurT5D_8gXC(D7|@FW
z5^?wo6-r@0z2ZP%;n4F<hzlBNz!n2hKY;xQJpByRr59qF144k(D$Ae{?En8X_{;G9
z|HuRA1n~00fQ5K@UvT~hF=b8)ybrXX8DWuF=Fp#a1TP&l1IcM{**i1A?~4@tf1j`#
zsyJHsieL7Dc`FykgJumQdpC#Rec;bCmxJNsic64yo0qpTmY7F?s84W+Ltr>TXjE`S
zOwf;buh^u76xXEK)J(hdh^$<*?C`uI_X1FHxvpQSWks!awN+h{QbSF1`?pq&jvj+9
zsoqSO%KlF<z~RB%NtEfnQDGQp_+>CLWqkuIpaVAmx1r!H=0A>~FhRl}=~bPxpWV@4
zPR}A=;>GO{@_NEU5W{njrFXEvqVgv7lCCia0z(wNA;T5B!-Sr(o1w&*db)kp#q%%7
zBT4$B8I+g~Fe<WxVlYhi@Ga%0hg07<SwV<jbo7OO4Wv2*MGcPU;CPP<LQiFP#S;`z
zMc+y6Ph?9sVQkJR(8!c44u--6RU%?kF}9)j+`l&cTF+Y2+=(|)tkTT2IS#$>%|fZ2
z;gR=~Du?DgMKF}kBVOI<LVt`JSy$5ZiT1E1xd4Re6tluOQC$Yzp#w|H6g5nT9@r(M
zoiuDR;afOQHoVl}F@ZhIMH~U$$%CAGl8^?q(U&PP9hK(sdjk+pl3teQkA0v9;j>4V
z_u1b1K<tPc^uz7VxpN8qTJzI0;0(v}*&Tq*kqRP0Gg$H5A-?hOL>9hD_9Eb;SoN8c
zo$>Gi+EJwV;#ush`VjeYtOd+O=X&^4(B*2w(o`$11OYoK*4<guHP=IKHx=7Lxe0bi
z!uh+m*P#Tl<Ch}Ds2rCfz<`c_GyoB0w5>(VpvYKsj1;%%^b_7}aT^x@Nlf`4p0Iug
zRQ@kC0Q0vEtLFl#X&QXT3*I+<m4^j1P!Jsm;o^UQEvp6=6h42B<4%OBDCM9o;u}*p
zhN%LF?GM%7xCFt}WIIrsnXaa&z|^J370{W_Htz!(l4_}s5zoZ=kKbQ42bnj^92kqW
z>^&iswnm`26t~^JLk?(PW1=bP2;_Sx>O7W9^6#3{E-dc$uy85r+4e;C?;Ve%DeiMh
zdnoK*E>H3s=x;A98nha9DIA(!!}l9*x3d62{1Z?K*#NzAG5O`2>E$?_O(`Ju4?v}&
zlVK1*^94|;02{u~f`^%AS2$GFm%m{Azp5hW+Op)!F<yMltzWZU2X1Wc=H`T^%!tJm
zg9UUQNAKSi_n6%uatE5e14ohx8jh&%=pIhQAyG-dk>rmVr>s<9KqV|w2?<z0N0@r?
zQMu&tYDp`M6nw&323=PLnY-<6q?SCL@0J|%o*uT)e>^@NF>g7*TPk_pzdSy64}ZK*
z1;}EyLg1naz;J^Bm7Uy<KoG=lC#-)(lATVxUI3LsaS)E9AzySNyAkB8KFL?1nUy+8
zLI1W+JpsT&{O39~XPEqDbD|koY%<`3aWHJN$ocPXbLE?`-oW5qaM?me-AdfHEn}vT
zjVnT-Wo6n<l5W3!$EJJGOlQiX)>)dc`*@|^t)=5W%EiN3T+QA0y=Q=pUocHzm}y9)
ze|YqFpQw1_m?Y(d)WqZrnY5oonYq&0*?C2h1!=|QpS&4M9V+TR)<o4e%QXhKba2MC
zS$6jIxcBuB*n^iRM&SFr*3>UliD}{4xkb=&=c>Z`xcVmZ_R8M=!Nw8W$>ABr#pTtH
zn~tjaJHneys2%<lK2JR43<02w7Ps%Kw^v?@GHU{XxHJS=il8=77}2vpAh_EMUZ+yX
z=W~mtfr#997qD6lJ^>(OQ7nF?D`{;>rVyCy4c5KRmBoOBC1tX!H1vfKxIB5-W!V{u
zRjANL3sfkWMi7g2dwUNs`c|$~he3<`npUQYBO}K0p7nsJUSkNms{pGQui3U_7((^i
zu4cRAW+*>CFh`p%xarPyfz(QiEv9ErElH_-g*F+_8f9_1lzcqkbLJ6s98>sIhIK70
zY{Nz3Twdx*sG4KV_H3nV4y&5Co+s?@Weam6LuOjf-O$f}belIKCx`WRgzm4;cg8*^
z96)6tpYN^@_@(rjp#?Imj4Y2lM_m#eNu?2jSy0*60UB-mESet3c5sNE`oQTG@8xK1
z4NqiR(N*7}qBBAiZo}SH|K6f^>WmnXxocLXlGtm33^6nBEKSi#wS!;5R?G%*<O741
zxvx0Z7*$~?H+%=Yg`z!0P;QYSgxTUVE#wy{e!6`5>iFJAiA-xVX3y5KGgkAf!%!rA
zgi^MbHg5V>!hF>(SrT-=VMn5ku)h8)hppR%6qbu!eLqk=(M}o-_FQ|qzh@2wQZSqN
zVkWiV9L3LQaa^)&GQ~iO9C8OPiri!)CxX29{(I#4q`3*?1tefoL*Y9>_&<;H)PN$w
zG%*^1Zi0a^=svrNLNI!l?ec(m;?ur-C71;TmaP06z58d`;*aC}A8O4%vTHArmH#0N
z3LpX9%7Uoq?a_&;;sVh<@}=;U5=CmEtV`Xy^^}R=L+4~)Pgdb*7qLDK`XFLJ@L7*|
zC->PP-o6X-2zDuc@Br+XN%#=$I`Y{VQ^A7ukW|Y9%fyEdZ!1T{ppuy<6(n3)r$4GR
zu}*0@^HlSRq88cUC>9i5jvI)mT})cq^IT7V*QaG$c*q(;8iRbJW<P76x>&Q|G2vRf
z7_iP$yQFs>61H3e7!F$rdc9P;z8Xd1R=1YS{8YCdFQ8t#aUp{ew0WaRP`{OFol?JD
z<i*>tQx)}8znhr(6e68pk^z!vRq*mCY9o75Yo2o*FhjDus5SR-TcM^t74lHPsJ1*_
z`+Y}!f?o^!pQtrI)_go&dOFj|hs2c;9jWkvhO_`5=fedc6(c1Ghzj78PdpF``C#aK
z+aOV>$?y)+;L)-85eGXVpcMlUU(}lQCqD0qLI3DBa|l4){FPm!==6;?hxvUb{<CBT
z_s2x{TW0s~jdA_(ze;AN_~-vBnf-m?{g+bs?NdGY!i#Jh2WC1r4ZR@8Ym=mk=Z|mZ
zT)-u>XERg{NASkj4-53NG4>A&kI)VQGaWo$GP}~TDXGyIUP<6k5=&ZMzFUT8PDyDQ
zNkL_mc{w<<i&Ndytl!YqUeeN4-O<|@(LGq%KQd}JG?51`nJG`s#m+1)$<D9-C|cg!
zQeWE*EXv$II%e2AD?GWp;yJ%{zJ7Qly#s9C;EBozw0c<}Qho6+)k^e1yXQ=bBg^P=
z!py+}2p(mKm>@hu`~Ura@8ygn5rxE7ACc#~*ptX{Ov7+Oo->lFgL#q#SD7nI{mGd?
zO+25E1%_oz(6zTRe~RP-r}|>Qt%zKPT1TKOu}wbTH=T)mT8PUKC1$qi{^SB;YQ=ho
zbLpEokrIt2m)nQ8+%-iBHLM8K*v8jKYdw-s$6k_kMoLbHRK`yRwXfD{69qI(z@ae1
zVS)P;^|!KT_`gcA>|$`qs}J3>B$k&RhcA_uT8GrW@(^2}theix+y*z+RV|bxOMKgE
zxVqTylSg6;ZTdjDsfPx2F3pR5;k`MLnlG);<SgA$)RLNt;DVcQaW28tBHZ#Ua*%$y
z{0#DihR5-MU(+IVLts;cbBE)i&;lO3`7y@$IuJV*6d+?k?7N_Q6YGk}(KYM`v?I;X
z9yJAN(^C7A#Rt*119fygPUTcX*p}dx^xrGD>ICxA>EVP36w8t7iV??WMM}_-O+t~K
zon?g(3+K&53+m<lR9C%HjE{X**wu>D=KY!pcvbn2iOw!iE1SX~yKXbcWR3EL=@6(-
z;EHie9_WGl!gLr9Fvu9@tJcek)4QX1qbHZYqY-NaW;)nzX|?`|9RC;7fw};hK@(Jj
z;y+EO?B*lBSJJvvmO}}N%oinD?*vbl*2*T4|E$+V5VWM(%w<fQl?40x@J)T_G<C(a
z@4mrX1z1oJ0D6OKwmdj+pDx`o&bhd3_0jiR)$!Jc9K(6xSe)iN*n=&@uKfLDRR9wH
ziP28JFqu38brQYtBW{w3rJ)c_SwpG9!eNJkVWVYjnInxx_eyA^Mc=O5AaVa;exp_2
z1ul1y;=6%`12e2t{IA1Y&;2TGbk6e%kiR3xn^*wwU%)tre<R1$;HE7MiQGB6O1Y;^
z7|E!l{i|o$;#>y4ns*chFIY1x)GXT9G!}b1pSudQ2qBr(BJ(V}+^kWeJ+iNdM=@M|
z*A+3lg|gCExO(19QUTdJC;Jt*ZKnm9alyR8dAqt>sH1MZT2zyALmS;=R<nLJM|Zcu
zyHDV>)o|y=wM&m=&UIRV*V3?zI#t{_>kaq(aB4)(_ILs{qxx_;Fww@dAMcLZJck!R
z|KWCPVA$nun`GeWX0zp^Tk)CK2q5}$yQC$?<M?l-um?1>lmT>S5CkemK6Jh=8q)W)
zY<!Lw`c5KGj806LZO=AjZDTKvL_Rnk4mvcuE;tMzF#?kAr>a~FA1@;<Wp(%tfj$`;
zmO`x*Ghht<o{Stf_Z;dgEJ0!vbakPHK-4h!98#)?07jb(g&6oQHZe;|GDJQsQwO2U
zXAWHmdIYdsY9^8n`=@w?I2buz+YJ+UN-n*-jHgS{!#Q^vDwC^&b>T1Keo__&LMBB^
zBJcf#E6423O^S+<*DK5wi8*^dc}3tDDk?sX95VL~l42KHLY*l}VS$u9enm{o6C*GK
z|0jm{Zk{|7V|2bCBsJw`KS?`NjBuQ8h7o6{%336R{lRN`_niR^MB+FD+-#H}LrEec
zX373SV&=p;FMTV@1coFsR%^{6YAtJ@xrMD)^|x8(kqk*|g%F%k-=$GAn3I_mx5MY+
z+w9xVVa_(tdEOh0I9C&;@(pBvbOen4FtkdWYTS5p)z|9wjs+&>i`roI48V`~;u(6%
z_`T5l_pzWDKBGU8<8oQDuS{MTcujU65gx`e8~oR?)Db5V)UzPid_tfK<0ht%3v;p^
zU&{zhbf$+=N(&bSCq*L0yD};;^11A3h`(28IVjC{sC)gjB7dr=Ur0t>O#-un3Y#>t
zikgO-`kR05uYw<?MUu0as$p^fDmvR@VPcS4MBsD=gJy});r{0*s&8#uSpaX>0xc5l
z43533(x4_W?O9x<KFF`R(N#3xnT;cQsA4M6<4u(LjnT&vqAT4BL54knb3P6+<wXj;
zMr{cng{dHXRN`rIlD)_PCj1btYg2D+<`tHF`)ZT{bO|V@b7SvvYFeIO9TEFGPpw=a
z)G5iB#S!qU<rBcw_ep&rxSCwdg@kLIeN}8)G`cWx1ly!IN*7BitDbWP+x#v3IGRaz
zxuN;Gc1(@Vo&J7eeg%hed`Qq)sX!j!_pLQyhh9U+dWCA|S}ZHvLNmH->HU{DL>%cz
z(q4&`5OEVg)Eb7}dZMN@%}nQ;K>`9^ZXYz%T})ixvQ`;x9k`rpaVAHhP}?MWg5^~)
z79~qJ71coE*Gj6w)liU-e4A7%f0WE(Y6dsyoRt77XrS00$t|Wt#{o0%uAtP$G72w`
zY#$q@#Kg@l_RoCkEkDka#1yt?Qb3)~1WKuO0DXaC&QX~oo%nQwbbUbqqfs|A{>-<g
z6rv&tFj3hTX*908Soq4|;-F2ALb##KwAf^(G=H8HE%}!mWoVGzWr^zJ-fI`-U(v;v
zufB#DEAP)iH|kZDxT`_J0#?9GhwAd!p@YAf4nqeq!(|=u6rk#wp~DxZ!wO1GZI9HE
zRU+QPxS|csl$42m=?9uQGyAON5PzPrd#c~3l~Vu$1R><{f9BEto>o%+o>r>XpZ}g#
z%4-8oQ~umPy&ot9H;iyg{>Y=LG=Zm;Lzb6mg?ku0t#s7As4x{AJUmTsOx?kPlt68-
zkWl5Ih{&iPoMGVmcJxcb2tPhOgEti%p$^K-kCn;=-?!xpDniP@4I}Q#29G*$C7!ae
z!>;W`h1oe^?9(?gS~56c0G?KIC+Aeb)5?$e)$rwwO_#MDv7)VmL%H1(jid96FQ?az
z;7UBl%@ZHE5)bwfrlljm!BMFiv}y8#iM@IjH!>MQ0hq7U7jhYNx&rXQ5$f|B*(@<T
zQi&ARS=yiCF$}47F1JKlgNdbj<DGpIF~i9`UMY8Zvbkd>g3m=C`Y~nY(xfuET=T!=
zPks4PpuV_APA!$F+M#}ms8Bdt_WcwSP<}N$Tl0M!#fTcdSd9v%5r%{BdThJ_^o>fh
zl}&V6&*L@TTYT}d^%O*8WKPxXvduUMQhh7CI_u6}W6J9@Nhh7}a2Y~5ltapEhJ>aH
z>`?RdS6~I$;@r~P6IPRsXh)>!?FQ_a)!tdG=Llycn7O`8^7(zy`b(=c*|6r}xAVJ`
z1*!IgVT1N2o&6hhd1Aa=X59To`6Heu4)=3isO;n!T2CBT*N4?f&$w8?wPp8F7=u~R
zoTWU`C%EF+G|yOBkzPUcaX2EMBHfy0^he!XV!vuv_E{%jAUwYHM-$O^##@hU+QfvB
zLO8mPO^Wl*>Wbm(Q1H-1|E$F4k%9xVkSpF?DbdS;a_SX)KbWcwG@@e}bG>09@JaOW
zzIYn`)Kk=>Yzxy(==+IAmv0#F^Xymw`kvuxn4?3GAvzpm_Jlx@N<MBlY@A*dx25z3
zVYKxh`=@?GAR}AcNQO1;mQq&AOX#IAn+i5ev{rz^{fY+{E5GQ4K$RG3sjHRM%eAd_
z34sk&+(=enQt&+qVf2|>9~&w5buS&b5+5Jarm1mBAw$Jit*k&>y`gOkn^HMmk&`>(
zJ1|+h*_~L3=Ru`BQkaP=5s`Iv^?|<0AMuogCpb`fTjk`gptQi;yZ)>BG82wsJJPp8
zL;O;wKGfzbIcn@KY(LdJ{BLp$rKL2y&L;{)K{RLh1C*FWsVY?m<>29&y{!*gL^7~}
zd)DQ=-Fc;NwBEJYWxrW~orjW;fZ))&l#u!GV$?P1Dqb(-NwrGgLH)3tFrto)bwmz<
z)~*iU3SY2{&phjDZmXK-V4ek!m3{FSohREzX6m<<Q!d{MGix5Y-i|N%Jm2>$BN8Wv
ztzk1R-4tuq7o9yfcxx<`B*09(zmbY@9;VsRXIH4-EqKbS>n4a=;@scB4Wut~tf=HV
zOu@b5Tls-h`QbSAF4Tdb4V8ua6zBd4v=K<wGIBPkv)2e+B2W8aW@_5ibtiO9(Dj-`
zgTCz)QbJ?oX5*tN?-eiVu<Lz)^T)PB+>TDS`>W4r6*m=`8pU_pEpmM$L|U)Yis2nT
z3cf8RLin<>3%uc`<2fNj|Dm~0;lSH>A_yP?@1I0O+c6SOyeTAC;n5jDFR!%U2vn>a
zL@<q)fZp8`zd$~Kv<rtIQNp0VXc9E~RAnbA7dn}g%e#Ox3?a&YRpS3skiv*9E!z5K
z`o<GT%IDRjt>Zj*BFv#D5xUM91HEU^Be5#W?{c7X`!tinhdA!)-H7rQ)i6(xDiYF{
zJBy@89wdrr6*>M!5dh>Al~mRT0N{WALxq_q{J9<jO2Gw8pz2FhY;TLH9Q;W);6I>t
zcNW`<oXy}T_FwMX!PzW1{~-2i=a(ds-jQ*Lu>dZ=m%4r$T;$l6k*-UMa@kcSe>WE&
zV{b>Fa`phl)2BVMx5}LAI+OG5uCLJ@(gqcB2$4TPf7GjdBFVxeS71F{CZFcVvpq)g
z4j$FrkDzh7Ok7qdk*GD<Umh%3-+`2};zspR8DEg89uXvXw#Q>ViL<%lcQ=iU<f&I|
z$hb`LKRb*2q}G$>`ruK?{?wfOK@@E+u11BKARd`BPMa^c38BEFJyoT}TEI24_mps@
zP`buf2qBoGB#$WjD#o^mm2dxn^yX{rFkdlzumSJeQGjc8bTL4P^wV>GYdu?(9K`!V
zz^j2l>3)b3v`J%LygayGZJF}*U=KpVJ?X*X38ydxnnz&6;D`3M@~55r8PS5lEz>WR
zM#+W7LWn93uxz1~hlMKUK`PaI*rnyPDdzjTvzAOI$hlp9MkU>I-}8-XAD(IGIM{){
z8%sKM(#CX5N-z_1OHnl=FkXl~5=&<Z*NsHqiBYBpmagVT0p@oH(D4Qf5Ob`YaqFV=
zU8T$8Th~I5rZgpN7%TVHX>PF9L**E%iOr0)EYnU5hK=N_J(I=l*v$;SuV0tEf)hxR
z3IE2#Z<0LXb50Jp@q&yzgL7Z(;iLG<81$G{iX$LOPDwT&d=GvOqrdM_nr9?Lj_tu4
zf$o)geMVq$wFcaequ8?%=uJ3?C?<A9rT*2|aVG<cjp%uAQ)e}7v=R1EalCW74+&yn
z;N`yUW4R{)xdgs%uZIKNHCxGY29qHv08Jn;feOaLpC3%1qWGd??C~>ApWgWfD=73+
z=Iz5y_C_y2AG^$UEqDl0GNCV;PADtq#PFRT7uC<B)4W7aLun=}K!M&xikhj2Vow6x
z7fIG47=wKk0siR*GK~_~NAIt2D)Ro)YzU{^M%wOat%BU}0m-JJdT<oKRk%(73=rT%
z{C~SGsYbzS`8NS`gys(<PgW$h^=}ofU-bu0;CvlN4K29g%wo^<qq6747_gjoeAD=(
z2Huu{Jn)^t+Y)&k7f<lEB=n<SM5I&LOTLaiDlthPH4r?1WX2_D=P0BGWPvMO*12Wn
z0?cV8;D$4AMPp7qxWZ-E)EUKuRoxCIV48G|_zjIuOk$5t`xH#gFBH!#|5#jGFI?Gj
z$luu858gg9*zG+yztB3q)-^G^e0UVQ0aSsvC8h8n7({Fe)m|`?#}AD}JV~@HL&z5j
zAG0^-Sh4M8OKgS~J{H^y-V&=5?e-<~$1=Rf)FcPA35POT?_~u5)XS6kyq>fj<<l}!
z&*zA+`hQ^cWk{#Jo5T6sH7;AJ%C>lypFK&#kOY&|RYg;pfNS|x4Nu#oBvfxb@?Cz6
z&wP#5IoI2h%fRYt?c@G&3B@1Zq8OmhwN+}%h$>Txwc{wY_&xs-x_!cL<-_dBeLJ?;
z4y4>ffJlJR4F46-Gg-UK9Wst1F4Ff}eIWbr-u!4?1BC=TzSYKbV{|+1P->HH3aPyy
zx;UA&-k!byCdFUM^lJBbr|n$L?Cm|rxzNPGw~Qp#{;eF3k>z8^a<Ru_&TDA!mKYM9
zKvCotY8hmKwL|o(fuBFw^b17pTT5i4%N1YBNqs`=;l<8Xf3z!>bj(Ag-a)%lHIcQT
z_xS!o;#*j7>mg)<H(Jh@G@`_ze1R*(iq{ARiGlphI~u&AW);aHV#1tq!sIFTkzwLu
zdAcxM!kakata=n9F|sJPx)JJZV%c630V0`(v`p1x;Y?qrS46<05qZ2?HsovY_t20m
z&?wX^)!YX*a4FKR`ywkYFh=ZWDkp@KewKJKIdPV|b}o5XT)ClqCf8dk?Ofdie{C5W
zy*P^e+P>Z|DJAVrs;N>+M%1AMX0|(^s-wM`NL8M@yi$^K8=8X3E=uy}^7F%(WSL5B
zG@444DH}f3Y`P#*kI!9GdtuXV1=E#$3dTqEJZuA$4JUTz`w^$V=0nOh=L(KVVlt?I
zXv@Kmwzfj!n4Gl1lNW*;&g_FH&2PRW((?dBh)X;E$it%uB=Of+DVQ+!ych#I2y{mG
zD)<5(I=jewXqbB_MS`_@={^9?2f444EQZ*Oy(<Pj+?!O6@VT4tsdMhTTug|Phd=-%
zw^dmt6{Bcu&7?GvFQ<X#Au7|Fu|;Jwc@d^pa}=42adRd;uBG!w(J(a&4(xo_^Ix|Q
zua|rl583BIugPv!^l;qFmi>E*YE@x~{%H(|CMRnBhl<;+ekm+*(|o^l;FRm_k0FAF
z9&p1MYz(*_4ujgbrF%gCBoW?v(n}q|xBi*D<ruu+KICqMk-_G>82>zSBniV8#xpWE
zjR)G>hy`zn(<%s_>S54YZ|_ff=s#|?m6$(2{!`Ef_g@H@|NZ^z@A(6a<oR<;{M-D&
z0Y>uJ_jVBcXT$k#759H4dH$F`BJkcD&S5uR@%R$A3Ta^S1H0m2m||qL^aXWrKb8u!
zskeog3o7DoD|&Lxl_7#*m~B@aj8u20Ve;@<L<n}>pT3@g={&RV@Tx_4LjjQyF0-VR
zhJCzx<A{Mt-`{^gfRuD&`VoZxo{~qiUot~3JYV%aobsE#Z(EEp<&ywfbi)DmHKthL
z%qF3;Qnv==1Y~<931f@?ppG0-ywrRzQ`xknzBnL3J4x?iIIclQ``jWCKZ}(!4Rjk1
z&ewTs0E9b+?dmI-q2Px(yxKrc|H#*+EGCg#<&%$kQZc5v8bFeu;lhcmwWg11?*NI6
z;OcUZpDlkFej>}ef`f69%a8!h9P#$cess8qqCtXc6Rwx#OJa$#@)l^*jFtU>{WHte
zArF`iIZg^ZuuJVUd~0*p^CAx@#pC0O?f)`7Rf2+G05%3F*TscGXa(Xy-c^GIZM@lF
zV}S8qsQwp{hrzUBiUOq(M2<jM3oTO~t@+NaUjXbhEt?|aw2L{<&~z;7&=qQkse0)4
zY{63Zzl;G~|Hp#1479RlA0dlr2vskmi>S!aQIm)P1Xs-KlEG)wqc~NSpdDP2nqQ01
zb`=GS$lN$_3(-eEzu+xxovk+1(U{xw+bUlMeoHU3Eph0PP`)j`uDWV6H$E@$rFsw5
zq_IJd`*2SQIG1fzA+m7$fuszLIwN&)S?IN#C^sZsi;TGS!=uh&mF7E8JiE!?Uqo^Z
zBk_h9TC~GLEdqpDFw;P7Cm2*GAN#7O76##ltQ6?7&Nt{l@@C6242E$Xr=Y!CK)Nk#
zm2r{uwNj6$9aE^<0tTf@Mz3UbO!Q;v29=8KfOT&f?hJ-5gR^EIzgc;Fy7(qlhy9T2
z4wG{;@-~A%=YZ{%W#WFMKHYKr$iZR7ncTxFBof!4jGOhdH)=98%X!^ka5ErgQFT?6
zkbgL=x)OMFpexm*H4eI}Onx536%DF~j9VJZJ4D`8a8DRzNr@=v0T{uL;3DV6Tox(u
zY^%Aa|1v(g%odZP(pty;rO(7xVq0_|oAZ->$QP=VAOBE;#93i#iG{3!)>PZNVP5|B
zs<e#uNLS?N!it-x)>sG>O~r>rCa_F*llIWGYjpBL9lE*iJ|NqN**OSny#)eA%>%Vj
zKbZBVO&{CBhn`yx;rhBm7yC3xDrxOi%}v+mua>c<N$YQ}Z+awtSw@5;Z4k5H_8G>U
z1r{Z32HM^XJmOjhjBuO0qQ77_ODT(NNZMxkTv)I0jB-(jt-3DcXFLEAW0RRV1^5!e
z_3(r0SH4QJ3(io@ubSb@V&}(wP1Ju1+Ws^KScLtSuWMMk9=>kAe>?`g<m*1)wBtRU
z_<wF(!x_2h{_u1f9@e-){`nvIx-g4n6*yNzA@kKU48Fuc9X_2Y=evl4rR_1(#~zIq
zo2`Dg^~w@Q2Xpt+1*FA`T=S&kuwk{O&n`Cxx~?baelF{f%a;Z2PY0PT_nWB2w=fF4
z7h2}d`}eQzA*Y@$>cUjlKjJ@}2isoPXxyJUe>C4A%(=0A2HDzMJ~idIoi2y5Kf}(n
z1j*rm<lq3uUqG-NxDu~Tp-w&{&wx;FKq>a07#RRc*AAG99&+dI=#$Vm{vO-qif?y3
zt|H&!Qt%T~c=~Pwz`6jR8c!My2e6~f0|zYOwg)@fT<yI$YVE;}Hpgi%UI%-yqs^Ax
zTad#Z>}a!$^%mc;gK71as<mT=@R9Ym`@!#{5NEgLXYFPW05C{_z;8EACeXIecX$U4
ze=GZI+#jnxn*R0^?|k)Vd~|YsZLYZtb6MTDeeHVft!Dh3^?gCL_Kxt@c0Ilrt>E09
zFZPLF(2Tw3jlZ>@pSh@C^o)I|fxin*Ktiv*Pc5UPpFe7ve=<ivh~kD{B+x%sG0;LJ
zz$?x^3qH_2HlSS8&w9r`b;ibv1OSbuoB<4~k7IA7P`0cMZ1ZRDh*M5-2)679%Gwqz
z?hPKA2^ujFYNZI#hzc$c3Yv*yovT$Im<f?N4=IceS~FnT5LIq52;J^w-pvionF;-T
z9=c)>d`7{1AsYOqHS}7P=~gl9!9Mi4Hsoq144*mt(jc7ND|{0eKHeLC0yNL;4MVJB
zKzkE`*&2e?$AA;B%#0q2m&fonFHGLrmdr8oTP)xdP6b92KzADn7HTtbMzJVGu{lO@
z#7A*)M!h!>`hD?u0uTTX{+s{J;4l40@a<*r=lwXm_wU7{SsyqaQknH9yTJsjA8clx
z`?Cm}x@13OHb44@D$IG|hI@YaW$+ht^73YbVdD09Ig@(O`}sshMbKgKgubASgrlR<
zoKhK+U)T-r(hGbtjq*y%%99Zw|3(|Vup8<DvT+r?;A}`X08VxgoDG?@1i+#c_e_CV
zoXdQW!ygn2w`5j!_kz}D!)XIVW-+%frA}YZ@83V@tkY)Fy^+-^SqTxqKqNirDNT<t
z9_5yWUy%ZMh+;5M+VqyKqg&2AFEq8X3oh3{Lop;=^p<Z1+I{#6D;oz;g@lYz-CM|8
zBg}Zm)PMkg8<;beNk|kaz}5avI9n!D4p8@H5AMh3A|uwhqp1F(w`P!}V%UYVw!Bc|
zA5^q<CPMIL`xSC7wpEd&SG$6oYv@_?-_gS824O8}w)jW23EIpQDmDd>$e)XepUJdE
zGBX#ba9S;OCkR+WE^u0Djb_NR@7)y}to0yXrhk=6lvV~p9@kGH)l?q~Ct0dA=YCs1
zUIzi-l1wjclr~29X~?=%_ty8uDuU8!7MRDj=Q<J*c&!}1p6-l<ADMBz-?%vGDYZMD
zVi|TUU*9jWYH(?8Zg_JIc-FYba)5T^bQH!XgT&n-LhoPoefwot>So1<Sdu*b`?S`M
z7W%?%?2N9jtHBy7e6!z-K6!O+yVJYotrQ=+UleUFfINSo$@ejXb)QEqwhRb!+KcrF
z+^n5-S(+oCjVK4oO>sS}Plmcb6lnA0{l3|W@%v{)>?Fi~g^g8?`mSD=Vl@0SPmd8H
zuv^E??AOf*C?Cdv)WbFfKEhmzZDu=w==6<pwAT|wE1<_Ro+1+QO+tL!3XfAp*4D1U
zZgyy0&u)%Y0L)&l9zrYN?=xvyOmX+W+jfDNh4okY{`?x?IlZ(K+xXyLEY60)=aMmq
zeV@|dKUkbxNQaitV)xKhv%X*!XTRA%QH=~p;;8;W`-RHMmTuN?@hj+{p`~lTv+?Rm
z<(QIn_1?c(@?`(GZNsX)pj8P?m7yK2V!*<vjI+?I4PC$RurmV-t@U?RSWsar<Uh>J
z%tOgLSPVVfALR^3_@*O3-GX>{7x;1Swp&Mq*cU-XV%GSe2`R#&f=`IZnP4+BoQ`b?
zG8)m<%x`99>XXZPiykS#Nvr9h*Nb-BMb}F%*N4~3AUL|46>l7~n^k}E;+wT#_M@Bi
za1pwHsKS!$k8b}l`2PcK1ZFqfAJ%UFG58<d{{wCG5)XMXGmnbA#6w=tMl<^0;M;G-
znwP=<-^ChH8f5p9GjQ<D4oa~QuKP<^P^<fO2jA0$AKcR=z3Ma43M`m{&jvgJ&4?4B
z?rrnHvRS-B^-ilI&E<noAN9aBiG`-5z`{`P^CUd@1S>E@gR(^if|?XYj4l0yO*i24
zF_TbRhC_fHGtHMx5*zX)2H`bss2|T{8?hTu@Yz-d3PCjfPZlR5fPDa5tZ}H2e^zVt
z{|X?Hs3z{_!XlE>e=#%ncC*#L6l+M(hZMT`htOa7iff|)(%@ls7~!hc2MEnud-!fF
z!_9Mb*5SQ-fnPGhK_{8WDzg3y#C#Ah#Txd$K53`3s5IoC6!uqe5dLRBawUIKeMIP+
zm)!^`6>NJef8DPbC=yW}+)q;hVpm1UdfhPi^Z(Z3@&B+`gSS246PTWkLMtMe2{9I+
zJo!w6)wF}jR6i)3(vd>&NWmj;CmV_#mGv%!TwEfd!?Kv==aCDg#5|>ZTyaG<n-saU
zwbO9&FlI9ECMBm=zg*N@Snj7+<Z|wN<3AHJbEI93I5QKzn8`)wEj1b`ROC%%=v5WS
zJ(4Mw^-q=gPUY+I6tGRyD;SnX7f!kutE5tXEBRVcY^_VCzA8T51iq@eJyNqkeee?V
zBrf)*Js?sx8tmM<%nEhgi~I3Lsf*68G&;JF`PKfn;iI<rZ^(a`nSU(8Vd6Hm+bVnc
zO)6{2raTrJ=af?X+S8(~VD%LG>M_57p;hJ4=VksAFfVgqSIeJkYJwW1x|m{zG4#v>
zX<<D%x3gy_99?;2YdQ~m=(bT;b6JcIYEXUae@!w|bmSP6rn*`@UAO9Lj-HLDO5Tgp
zv<b7}S|dS7e{kKf_;~ElmZ)(B?*QL*dF)Z6vNBEsY+I>1_JX7FI@=r0ofRwfCLh$;
z+hex}4qJGC9MnRzuAzFbXYOPPY6xd5Gx}~oA7Hq>hJ#at+`xK#Xk?-j67SJGXHX{M
zEXi_N2<)m@XN(~B^_{z#rmK=ai$sO>!=L8s4N0=<T;o%RB6sXn7LLPbIas0B=N$Y(
zVEyFTsKbz1r(siC9;-{f$zCI2K+?_h?hsjjw{S*OZ;3heSr?AHC!pJmpz^u%CVc&U
z_3dDwItw8e=HS>A=lCksPiHFAT|pgX)xJK$l#GMj&-&D80%PYyQppV3>IqX*o-|on
zhjia!6Mo_0Z53EP(x{9iOxIy=6??eSYak`ev<+{TMySy!5hl(y{kkklH)YW&NtheM
zzN#$aq0!e!obQUcDru9VF@KI&Sp9WXJ7#LelX0(jD81HDKzpP=q7sLv#8$Pw*x|^Y
z7zfJ-YK4<N@x*&rf&X0Fj-!48&G9ev{b``e!y2&VW<qZ8FI89_7<~^`g*|Lge6H*N
zHhdP-@UY1cRyU|GeV#D?u*ES_H*7zAo^t=N&4*e)>h~;tk%9NPBbsX9A2obYLDRHL
z?ap<cD-Ix{n+^I!W;CT0a_K~3yI*)zUmuHTCm*CXD@%Ky^M>ehQ+9Drkhg($dDyml
zIP6Hv++=PQyuR+iIM$nPke>=QZ0W!_F~;GZy*1P6_=tY$^X*~!&9iooJ=$4Bbt5EW
ziNO$D__^2B!z15_{urU{v2Bgoya=Duhr}nF0)3vnb7>us%BP_ckwpL-ivN5j=XK6J
z&++5RJp<ITO*`St3gvR=daU$K$F{&})q%@6f6KgU+|!Q&R4z$X!h5^XrzwSJ(6NX+
z%39cmqe1s4j;xmB4gHTdn<r1*B_HQ4a@{wNHRzr%MtDzZNZdDt-JfF}AmU7P(G+0#
z9O8QnGe|%eda!rXE)UZ*x8Fb!_MkF5SOV-X$TN;uwI1IYJoq<+P;NNU;%IaMfd4cz
zi+Ul+D0Ag{!J&D+o56w71pH=Z_7<=87L5Bqnd`}S?fp1yEyv;W;hT?4uQgcC%vIy_
z)xlc*#)lQhSJl88OuuKb_tgek8`b*KPx~6cTZ8HMbnJd+wN`cxew49(Hn~<VGkz4;
zeojCuOJaX7cq=?De~_pZSQYl}+Cwti3Jw4mj5Un(2Sh6xli}dNfB@1HR&h50k)i<^
zaaM3>dV%bAR!KVn48H!jpui_Ree5yGsJMVKMV1QDpi+k*`Iw--%D_gTUh|G*12CAL
zEx1xNu-ibVH#exdHu!QpxP=2E89qd60~2g!?lK5@BncU|2~>L>y2cT@p%~g04p{ic
z`_Iu^6g+yb{5PYw$^O4@{?3EX41ZzpGwA!0XcGVGoMe;#K^0~4`-?&Il29C5d9n0L
zEWJ=gzs<i`dih*muxX6SUf`X37+wJQ=C3ar6#f<_J}LQ4bXvL}DsQ59Vs;8JFTW@S
z0kZ6Os%RAwjIMOCLR&{xXJ3C25^TG`=eCTAv~g{mxPiHOyP=U;mO>Z+!k?WJFb4nV
z_+%FX;e2Uj;pWx~@@iWA4g(Wk6Q(q+jjlE2Eha|mER;Mnj(Cz{R_e#V50Ln^{$-gW
z1lZ5Vt|sZN@x2ig@-Zv=XUde(^w4)42w>0!5<(ZS!P;6#Ae7k|@$DTEscb49;~01U
zWSZ=EDX||Lz^XmbnD2!N;dxd2y-7Nafj74@p9IScYIvmP`AHP2Ex<;?M6Er!dWSb!
zukM-XVTxrQ5r?7e^flW)rb53R1dc9rn?<vwsBZ77mDo`l!&Y9?>a->bOhD|vDHHI|
zkS8%wnlt}CRr-xODT%ZCkSZA~-W2)f>~NV2k^a<_mC>iGH44gc@TLl8tv@rfRB}G+
zV*itsA8bgIvxRZdd8E)`(*yFBS8}2TJyg@m+`)Ru=#ssK`Rz@P3NtcK{;AI6W=+bo
zbMbqh5D>f--&^xv?|0JR=1jX6y)gColtEp|)ha&t(tK$Suyzy~euY|!SS}=1z*RH-
zHd~EAd_;Rmr&nh-z~D1i|5&G<RSHc}GB%%#Foa^!S#Loycx)zq0@fv8u`T`2VNs{R
z%`lXoY#Y&MWnW?pM6D>vlwVbGY{e@WekV)VEaC)0njr4zfvr<4`pFLMHv0c_>l7tR
ztR5mPYZ4a`AJlJD(d>Mq{DiHkU6$11KSu9*qXLH}D)GYV7wc5cns{t+`UxU<^!`Of
zqY{Xw67XEsCroXc7eZQEh<W;AojL&ggDSd{G9ZeKAh}OhI*qN&2RQy^Y}_b(Ksg84
z{ln7hZcN)Oup^-q1>K@qii!037XubN`K<-!YjfE$EF5xGnQmNr7qlLN|F<l?|2x<;
z`=h!+boUg49dG}m0JH3AMo>jzEJRULX-E7WR6&i|{eI~*wew!p{4m#1T|>i%U9an-
z4`r=z^oK{x>Ihak-Gt9ZXZ_>@E({~g{M^}~@5kshU~F3R2Z&g6w-#i<caOL$O%Qze
zh?OmF#N!U`=LyirX<+Nr^<N1^D1QI|+rk~fUjP!e_YZ6u>W?3f;b{O3MX;rJql=fR
zw+%&`0b+iA9NHd)h=i%BS%D-7?=I6mh)(KEi;2kp^#&5xsmqu0e{1J{8l;H~PAH0Y
zGl4Pq27is-T(A7>K$&<A4EW6bmMFQ@>kn5qupiD&!%T>DDga`l67c2W{z<QZulssS
z{mUZ4T}Vms-gJuzp9RG<e#c?v?31#Jj8uKdBCDY2msKzOkzM$XN}f~bwg@9!(d9jL
zI)#M(VNTc=8ZT<&cz-omrr1X4pP1;SAQ+0Ye{|YkZvOF-(4<1B)-K)vwAN;p@8{_7
zfH3-@lObVv06+|Vn|^@O-&&m+^#H$<tp~)z-6@Z@y3xS{wK{C+WS#16k;4mN<mZ^*
z77P6-z`GkT;62Qrh9a|#i!To6uO0QAaleu+{m$rfaJN=E&gBlyT^(G6XIsVzOCAn#
z0<3rbBofhPE}r@vjKBCKD$63I_=kiE>e9-TSBHjJ+WqqBavoX4tb3StxL<w>d;B!8
z$dk`OlXutC&6g{sd{Y=WRhVI&W`98C&C)Mh;44xnNMwXJdiTX9VJbpP*BCA?P#(QY
z!BB<=%E7{BI!oa))ymYEt0up<mC2*nr)qz}jcTF*Hzt1_Ur>YHmOU#{9<6OsVF`_T
zcCdMm&tjl}L}5p1Xzf+j_{}(>xUn)`pJ`6Au4xY2y@E(68gBU`P4pVu$fPz~O;OeS
zCmkeJ>BXHYjrV4jd1Xo*i!ty6&#%nRi@n+<g<=)q;tvq>o%8l#zct7JNvY-)n$DK?
zG?%7m`HaNW&+DhZB#4#Rv=uactG;f!d8Od8Nxf*=d)9p0b?kQgLFMk(bTfqX2?)Vt
z!R3Ly4dPcY1exS2qRLG>aJbZ$eQ*`U`KAL1yQiEg5DX`v*h;f6a&Oo7>UHW&(+|fZ
zBJs1YX`~%p^mNAq2ji0%Bpf|kK1vUAT#J$`z}~i?H{ri_14&5U*o8zek~(n9Lm{>G
zeJ-9J%;jDqd*&FZ%bX1lQr=iD#%R@a`!@8YP=X^Da=<VqW~g@XJM}VP*i!n}&<^+5
z#8h1PMSn%i^@Bd`j3cZAHp_FPMfC=+z`L=)tLWjI13!TYO#qA_D4Ts~SK9e*A`PV~
zSEOhc;BYdTyR|Y*@oGj`bT&Ze=+u%h5sK~gukcDX$b!X#In`&)>Dnt+bZwrAMZ^yr
z@AuBiJOCzE%5$Yd(g)?Xd?vb|@knWv7)wH2P2UL4mn|-})vR*uTl8d&F0k1<N51XV
zAFy3`vS3$Pr9E!_IzP5oY+F5#eB`peGXJ#2UkOELQH<dN7ea8@W?j1PgOs$WZ+lZ$
zLu-jYQ_qW40|9Q9SQuI-!FE1zRAbSdxliYAAdg`5=cye>gGX;Ghs!}_6zflY3wl+-
zl?`%n*2$lZ?Rc&oD?!h666ph+w*2gOW&Tg%Klk743fbR{r!U#$(a+h4)!a4ZHj5WM
z2kxp}JC(GCikF2Y@9VNRl#i;5SCzcom$h#w>|L^}8%aLQsJvfXRkv-bpt6M)ty<v}
z1^vg)Jw#u92#f6&f1%MlwglX1{~SAL&5M@u+&EE7eP`<JwwaiAI}0GvV8K&^p#1LY
zq(*;nGbDYr^s{Niba{Vh^{Kvon)6seqk36{{U&0oX*ak<b%R>@HbckFGMV0B$6fla
z^`~1((J|-2_SbvMEw}APdX<wLrH3SvkH$l&dKdT2m+JN{Tay~fSNcj%@tH09htJ=i
zJr<hF2Cxji>O1G?v){!kJ@|cpisga>N+Q62N2+zfvvoPO2jow=p5)k~16|*6fUq4r
zlA-`vY@Vcwo@5T5@C>Ny6`nLeY2PjY1JH|!!wbA{XLIo4hyyR*J$`OO!rU-Hj(X9a
zP=4YdOvAwYsL0+Z=ly;Ks=M8r3_vR*3R%MJ^A7akD?DUtln)vPjcP5#<hc(nAI~cy
zUm%~au7NKW$k#9zyiE5s1uJ@ie%c&<HoZRJ(fcd7)(-Cj9=*Y6eGQ;PWVa90i62PO
z37ly0G4O%m19<j&7xMY*$NB^-2Jldz#Mas>!3TsG`26S%_*xra&h8WB|Lh+v;PN&t
z@ZE`jgrawpf1oc#(1(t|{q%s!9pP#Y$Q1toRuYYL3fo;Mgf>xX4ya&%`0pL?2w4Wf
z9I@(Mxi$kg@HsaDX;2}3aXJ&CAx#v4j9$U&H6dPTLBDR8R&s6EdV}i>LT7-X@t~m1
zUZ!mW+ub;XMa4i`=CJlS<gr@&+nLavT;w4R>VqA%M+%$EUWBQgAj-@z>DX{Y$1t~8
zokBl#*!U27*oaWR(ANmxk1K+NVZ$$aUqQ`A++OlxJF3C$TI1G5V3vlH#cNV<zCoc3
zxh0BV+*N0u1+p62(B>gh$4Ax4M?^7d!2z^I<9~=FXp3-ay$=W%1Mb6oru<P_5f#k%
ze^K|AVOj5cx9?4N2$BK<(%mVFs7OevlprbH-Q0Ayz)jzDcXxMp3({TEx&JulTGP4K
z^PGLHbDn+e>%95D{J$Q*@g3tc?3H4p%E&#i$D_VnMm^z-`gqBrp!~LwFM8rbv;`<)
z<Va+`Ib2^k3fvq$`Y1|)Jlev6$&l#nAtXkJ9~myp&rd7nBRJAECkE``Wsm#KSDDd?
zAIUujV&@qXOwSl9t{hGeF@=ka+G30$LW-r2wXup$+=}(*XRwBg$q;Ac6o)Wk$6a~z
zeyfQ~JC4-=#iye1x`@Z;X~nB9!BrE*+rjy(C?|CKzlzX9YN1cC9s4GEnJ`S0II67q
z92vQ<C&5%q&@Cnr$2>8$HF4JAi|J-!Hh&VlLDC?dkGtM0RYI7*$YqBhS>XLM{kQi|
z%pc9vKUWn<eAs!X?4>szK!4E8LvzB=zZjg#(<p-NdA2$W51AuV2>=_tnMuW%WIZ>>
z3%q}((0;8dJY<f588A0dV+{pNc(`BKXyE<xkU5Hi_p|*q1ICVm_%1bz9~Svj_QUF~
z4GemwNkR#Ct}>TpHIR93At|fSs%m9~g=^>rYN<sq8KT3(a9tBKvvV5h9eBL+skO_%
z`-i{mlVJa*?dtTy4A|rL@zbo{z02FX+0pkM*R<=zEuP4E4pwYzDFl|7&m_DuFc;sj
zV>_tLcb5zZxsu*H?V^d7u116LrBK<k0nne^n4`B-4=g1B`V;@C6T^vE56pn6T+oeg
zl%|S#rlOCq<se5(r`4)Xe>6mjS17Zc&%t{uimld0NyQM|-d(DX#UdpL%P?2<6Tg=U
zRuOix*1p36A-<}0s1ckOj<I`A_oHoKQo&^hzeHR0<I_1c>Kcx>h&v2!8Adf$SuG($
zj%0fVCTpGPAF9FwHP`3ra<$!N`eF~&XR0f}qD%r+2jl_NX?Id2?{s>K0~y_3337cM
zB#)6iD84p7*qZ(T!EfZNJ4erFt=5gdsk_vKFpIu(x~_M^m@s+bD)aL7VOQJE&da;%
zde^IgqqBs2(R&y%Ns0Oa#U;17A6=q$XgFQO7}&OJ>RyWr+OaG<n%N}miE0}^97e0<
zh+v+vOjD@7`3TW6Wo)F=R$?F2*Oq1Z{-4f(g(845>2}gJ*JDM2V?dm7<zEdg@ePO>
zyVrV>ezw6zG8mB|J8@>*Zv*e^aZdJQSImcoR<AO~BhcTm(NNT39T?behTH!<Juu`V
z>rn0hs|o@=DF#F;zJ)fAS{Mt3*r@u8varztO03F}nMk@>c9`zPTVF8ll>@80|J@AO
zf7(pNe)oS68*M|!?>e>HUT7n<Iz`P~wmGBEOT0B3P6^oc{@t%_=kuXod1f7#O)_VV
z&zb39_codBQ>8#lfv_I0UtP?Y#n?zu{5n0@AMTy6+0+)iy3c^xKAaxRt^z?RF{W2r
zv525^$)d`ApmX2##W25e(o~Qd339Qvz5hLRV@$1I?c1Tq(IEHdPN#^Q$^Yo|0A!Bt
zZ%(HEgUnG<kUf6?Qki|kOLW9GPhxZm6r6XhIJrMuY2K%x@`6MPat^&|(uL6yk=lr9
zLRk4eCS%z7@m?JPnP-j>bT#C5%2aVz(f7--OIhtSN$&pAzzmp@*b90Uc2th{i+EL=
zUL^OJj|^4OS8%3jf$3}Q=RY{ph?~SJxC<Y-n0|alvZ5r)U>X`?Ilgdy2zmF`IyBVb
z@l)~vx;F<H9AQq+sVHl*y5D{;3AY&sJ#j)5e<RJIAGNEEpA#egPNgW)3%-w<9t9X7
zDEekrPsSib)bJ^;l)K+5gZeXlpX`-|k-v&6a}QLqQ_3tR^UbqKutDY*RB6Xfs?5hJ
zzF-g^!1Vfi<~hS33|BAf^%5Hd%7*fq!@_{RKNsORPw$d@fem8!PvLhUAGFRKhTXS@
z@-@ZEpr(FEqz2NROP5ma%g`h?E`65H950*9S1J4#w8DKTawOPX_fR~wY@yKD5pS*X
zH106{@AwF#ew|}6)TjPpa@*)%SxS;OXZ2o(B4fm`u=`dhPfL&nbm&cgOT@3!$2Pk9
zz^R6w^7_<3F4&Mg_Be-FvcW)huV)OG(vv{$tD&q+0AjZ8r@Y6n8I<CWK6TiX<e*E5
ze0p?(#sgX^Fb~dC-H@27ojv`vs&Fnb1sD7%iw$8)x(^h*=Kl-^UUr9<j^-n$Jsphe
zr&dweKo5AoxA|T!##*uF<K?<%CE-%Aoo`eo2q<jR#r%-Talti{wYE~$`o=OJ;Fa@m
zbi(po3QVs>k@`h6MYG;Af4(l6T_EO_w=rkHaWqJqwZt#BykF5a4V7FFw$UmcLNL|u
zvkqHUIIr`nWl_AJogdCTd-@%r$Z=&AWig_vCf>zNXteJ8Rp}OP@4$X=0^_2?@Koa|
z27&=~U)tDqMD-{_vBz7Axu5vc^?^2BZg}Y5E%L`(5Wep&ug7bkB2BkmxfFl$tO`bP
zg47mNvwan6TYUYdnuO*>iG`ZQNI!f|M{1P0@7EhOMGafAmOWNpt^Sp%Mv<D}I(9GL
zJPb;Lnu?Mz{cv=qRgt}m9?lR;`XDcD^q7lYrAcO%kM8M9rb;Bzn4D%u6Kk9vE4dm9
zoZo(WYwx=fg^op)8J$n)(zFo`IpT9BuSjYX!3qpJtt;LqE2?^OJ)4!gOSMe-OuX@~
zXiq(mW;=y>j~5*4Fxr;OmGu;_`2Fj1yb!X}WO#)Qf)&b%+`_Tu_qVU)x@K$3Xskor
zVRk-C256L@y)AOVp!F1YoGPm1F8OM*OU-!&-}c2e9{bFIwN9%*p}(vgCaU<wHSC<+
z_*rF}<lf$kI{4O4Y1LgWwB9!SSp^^+&~&ho-Hyui7RyTQ*1#8^AAB?M>vnawiPN<m
zurR+)5C2%*y=a94*9Ls9Urx1zSQSxa`X=&Z6p9J&N1z{nAgo-ad)eLd;a^S<^S<E6
z7r8||Vu_J;hC=6;%~|(6o(X6!(rsK<BiAMsP}YX&=ZaTj3*W3?NRw_W2!dcLf6pA*
z7WM7#>dVyS5rbNy7D*6HeP7QnvUo7{C+-t9)Xg7ZA~yW|d*)~(deOvopF}Bo%D<~+
z8SCX`9QO;##sFa8N&Q0Y<3L&AJZ~0W8250I{7JL|XhT!i@nh=UNN$sJw~Bi2)H9V+
zr8FTrlc)Og>Qd*4s|`smX5349@)wpgcN^~h&fJX2hMh$^Kih6@a^60T80)e;&9J={
z)xGbT3spJCyS%0JeQLP!Qs>ga`7SHtY1OD{)7bZ?CVNG9Ur!Wyb`K6p?{AQ9CXc7M
z?%uuIq1A@z=7J-9hhVRTRLzC5DT=nKiIL5PRW15ROcNKvg_mu5)aAxp=B{h)jvDO_
z6KNsW=}bz<Zs>tVo^3{t%<gLGQAgzg67>L$(G?GSXua_~`|5e0%2NdO)NJ=WUGuzM
z206dhrmHp<oo0=W)RGi4mg;7WZnMoI_fmc1wZrXwE$^*Bry;j#q?*kN93Yax-k;OG
zx4C^T<$ZMR)ija8&(7I^`CS{Zk7BydlD88XAB&B?uNBx={v*ioLJgJ87xSktcpA}z
z?ya|yns2s;pq;M;p^>wg@4Tpg9hcdAKR=8#zjM6Lz93W73lFL+z}+VdFb@McPXqv~
zyT!<gsKrv{N`aNgQbX?k9<BI@!-0(#fxy^qD_>B%Qc&kbVA6$u7!8$+K1+_6&Fj%1
zS7iFQE|{SU8d1vN@0P*SO2LH9!3&$gt|hu^DZ$imAxg9%Sm2PY&EVbXkht@ZLx}w`
zU#PEQ=$VrJ1tiq7D)h#lrP+(JiQI{7DfC{61;!xkv;))#4g1l}f<kYC&aX>1$?~Yi
z7+pMUQb`TJMiPE0Y@0j01QdaU!a^W!Oo@U<r5y3yGNLg$yyVai%YcQ&!HE766`nkD
z7&(lrCSt-SvWN{Nz;CiaX(8(H?cx37Z%#1v4NniWcvcGH&-t>EYOCN7rFRa3YX+&#
zJiLE2h@!Rlqji*{zZis2gONWdYdU8|zs?C@NC~HS_U$A6Oa0hrg5qeQGutj`jAE9d
z51f$eWlS_aWcYQASC4_u*7G-P5Py2TK!3@{OOR0iui^BuxWchfJ=!r25VM+C4=p~s
z91fSuSm-5fVk~!tL)=@MxG8NA$ULyrArMtIzS1GSIySzxCcb_qzR@5a4LhNgKcSsI
ztQGrj&lox288h|pj46J8ncKj(Gf;Q0(JiNC@UVVkywjNQL7d8XQD5jsfhYVwtDBbo
z@Pzii&Nvb_lT6Z?2nfXgoDy&h#%ID@csS$ek^KIQam7=$B}OrRIOBwAp#qc3{xOi)
zICk$}&lo2J`}oXwO;mHiEZ`ZVh>G(2I9yW|az?ygv8AS2Cs3Uj7{r2wYm4g``p}&>
zIXgGMzzd6vH1U0vOe1n_YkOyHX?gb$KgV1t|LFYUQenv<`f6c%_ZFy5Km+y1&<)YD
zAF2~1^TD3kyCfMzu=IxW)zZrpA;tIWn!uWII<G5=R4Q!bdw^Hok1g$G;7b8KW7r+~
z{d*{fl7%aF(FNY=G&sJAWH<$nx;JHfgr)SBs4zr~RVbM5@2y}gH|K0<JyfPon=a$C
z^LZO6lCE57uE`TD82y!})_zUmbG%~vWFz<$CPsn>(~q{tNYBokLXv!P0-q&6_SwkM
z!IWn;8uYdK>D!d_x(beQRu#_rD@Dwg1qtRIG}BK_Neu=pd#F&eofi|zcKZv>HW7%X
zeAN~|4s4&eIM+KwXGSaP*-8sZAIvr78HJ`oY>zhQ+MbdODq0yIZCXrsn({VWn>qPc
zxydxWJ)h~=+2OTFK0QV+-8(0{w>I<UNdzNv;3ZrBq~6qc)5h*cEDH0&FUjaTH&28&
zNnwm89J2)-B^TP&<dPr$*~X%Q%r{>x$MYI7$Y<6Ue)8_A-tNM|q|x0;upGy9NdbBE
z<T}1T2x(u3y)z_`ij)<lU;D<uF1{9}q?@xAt!fKQ326AxuS5QAO5k7CZ(=i}%rHUC
z0BFK+GsTbQ7dk8s6c5f7cc=TNAb<>t5Ooyyu3|O-#^EBCL7DmylnmL~_>{s_0BFLH
za2LF>LGzf)a0ghwK?UK~Kb&#iaW#izmUX^jD!4M=4l3<qQZ~Mi>wgjdv3!<<@&6ak
z7$8Aqw|6?FVW(YyH}0r#W~}%6Z8ONYYVQn4P%)p+17{pN&^(pK9|@{?_$7UFB~)aM
zza^;9nx){v6-_VKAkXfy?{y4}*v>E#^-|#w0_zR0wu((XueLKK@A&0%I$5rF3cn3r
z?S;M%x!w;(78aCs8ennG$U8QDP6(`6wxrwM4SoQjz4;?S<#JN1TjY|0Mz;j4-!Pir
zUOZGMF3>@n&M_%w>rAB!<u842ipfP@vIiE(NKOCqjPrlFI`LngaegJJ(nvPMx|s1^
zyX`b<lb%l_2yqODIzMkeL=^89&Mpq~d#^+GoL1zm08Tgohzj&nyysO?aRekG5rwly
z{G&-}B((e+0##3wY+Qu=v*#HMuSU8*)ka_k^)E5%@%xFHhDBGyw<B5g0K2BeG0mzv
zNS@;F--K}(bx^G{M-ug;<1c{_{r<JOX{zvnB+>6HIWLqq>*U8rr{Xm}!7vcef=g^v
z)kB^&7!>KYO4>)?5PBsmEfZv!yh;UnjsPQzH9VHAEs$A{X*eXv*AD6LU+uVZkbZp=
zc~2STPe;QJm9=3nf9gXeF3K&@<G=nPnS_F#T54j%&ZRt>T#lZWmbl*M1vDd`FIn2|
zkM$c`W(4V}i9vUta!FS1E!xI!<MHyl8SplnQJ4%2ad$1*cH{CNSg+W!wLU?_@UqFi
z1q>H&|8Twb*p?d*PzaP8&wR}-Ex!_1m>L}=`Ps!#R&y&ObM#czaDw{7PvuWllh%*%
zzcMPl1fnKBCq>OAJ6g2(N-YeN^g0#v+9lr<d&%%KV_cqo?Ff*s-{&riTZm9UbyOS+
z8P9bk)Q1S5DO>RKBxyt#OHe7ySO;vS=}#z{(F!UpD(n{c-|iV0eP&r$wtb&?zqa=!
zSTb`W<P1wcb=&lr&-`0N#W&?^`_@yds^g|rwXbej8dHsE&Uh*_P2zSe#CK@UZMl=p
zN?G_Jf#i;@;&nF_ufPb_F&9Y+iSvZTuBgTu)~32v&2nau;P`h`vv!*3g9nx!qVjX3
z2W>%NEH-%)n%MCWj46{Ho{!r<aO)uG`6hWDubY<%<_J642kHE|XP2KeO&54cnftr!
zYL^O35OdQU2eYp);$bQGywok#4!hBzORm<&i57_{aQ<3s65B_PITzF7{G44ew!f2;
zGjxPRmo+(dp!$Q=8z*$V$)4C)>q5@${e=GKJ2TdrlEUkVQk&h(V342muQlUMQNgQ`
zFksD?LQR$(pS+Ky-CFUG=Z%!2fPYe@ME1+XrJ}Rrp}G|-4!OkbqF8~LbPbz?rc61x
zo-5nJ=&gdi8*aFpy{YEA&ndoA##(5B<NpepklHi+d_6loSov?DiR<}I>8jePfqmP$
z>xILRs`?G71IM}R?-zsT$nP4uh>V68X_n4O5TxIM^{`uK$?XRR>xex=(Lo%0Udd)A
zRK>5JFMC0%^YNgEacU$h9>aWj{H7LRSR$+0g%?vVOpjkeZ-%JU9s1yoEQPvmx>d9<
z`!8jG3M|$e2`tu-Io@M#BwI0Wigdw^%ov{(PzY^FzOx#$N;-M*Cb9p+(CnDEs|}kT
zsnO>}hpC#I(>!mNb?qw4nF8Ch=q%D+qau|#sXJThu0%sCB!>lm=kuI~7SOO)ChtRa
z!iw`yecFadWV}KPs7^$E7A^*=6V*Z~D|GGkjd|IZJho)I5qV=9BNYtrAzz+#v?)zo
z3WJyFUD46`giux8N+u3cPK#(?UxlG#uq*YSIX1iOcZ9u|iD`x@M0(u;PDc8H^%T8s
zO7uADCHwkH%jHmLBc~3V%l12Tm?f;Hi!PbF<M{iVO_`>v5iF2K_5JN(Rma;TcV|v9
z^y7=6m&;^qpx1~O_xB(|Ff1P!UI~n74+d3J3=X^Gd@upp6Juv!Y-AGza(CPdW8iu-
z5baLvXZ*O?9jH!_6MCf6pjANO4RHRZD<uG3IseNZZ=lTkQ&-ac6A1z!X?@2};H3)x
zF*=Nnip(u;*$E``f9XnBoQ?-1$Tp7W?C39hyj&&tw06<l#H08DU{>GwJp{1FVG$oH
zxd0Lb&jlPDqWVrd;Fmp49TXa$Agmz)0V=ua_Lx{%IB|*j1y(pY8Kq?mStaH4l@e9P
z1&vLx=+$lQR0#DQr6@g=FT?R8`bSf{$LK~TeP1L)XTC2kPAvJ)S+8tF0`B{-c+e4G
zkDs2MUmUh>etY3@1A+^YD3*a%k`19Vs4D4)@c9^3Vr(Loq;_z?KmEe>0dukwsN^Qr
z$3Yo&h};mQa#eFY$mvk0l{k)k;p6(_`FQ#2q3l^`{&-qfB!(PmgsCzDlxhK1RAcGL
zNJ5D!T-2Y4xV!;?nHlXAp|FWFDH_|e83GBXBsD?fRrZg@GSDDN-gwC;Y&#*{h98O+
z<-agy-!f9<E4BKu6J<ako}-;%%>2Q-Ey*8yA&(XYb_q452BD|$m@X9g3ZvN>5GfN1
z=A9{>`DiL30w5k__cKYfpLcU_@x5qU#)9XZ=2Evh(+jdIi{p*nftgD5hT6b^VyDlG
zt|In^WAkmHN{J2CH7(0yePq%J?}|?jU#)fqstEqPIPy-rH?rq--RZmRiobWb$Mb8^
zDU#D$^1#xFf$G6>Koaau@d$jp5F*aWv5M-wDV%rqy3{{Dz2jB?vbP5XX;WKfse3b&
zPNmwzly<fSa4!2og9Vl#+O7&m)8NpT9%5j>;5A{L@NIUmj@D}q14`1z&$p%`<VW>C
zc`4iWJof(L;}Gqm6)hg^shin@7hw3CJ#Mg(Xutl~=x_jWj0ZkL04yxk-;lJhgoaxP
z=-AM$%mmx*e~b=mIT$2M@<9P4Nagl+Uh%JFz5u8>$D2lOrx4JUjCobdhFk1S_(u69
zEvTP2OZs^}8{L=oB5v=NkHbFME1l4tV=AAz%Gs;xwgu#<Z@S1Pk%CH`X>1w2C5z5p
zgi{xNyN6Lx9_&pj>!ai4ntk>AGe&b<7_54^7Q{a)xx0sL|3~fdf9OhI=D#KLf7g}g
z3-<q2GXM42K3U*Y5E%AflKC7_$k0EM`D^oJ!EKG#DjovcQDlkj40%?mj=RlNYH+*d
zf*el!`N+fe1Jyt8y7pVmMr%h~2(XZjdU-9KM|*e=5PptcA30kh7d>`4{VY3l`y@)2
zb^XAgz5Mq4t*S@k>FNg69VwYsYu~j+Rg>=W(sXEH{Z+gdC<g?O2giZe46G`CKneQ@
zi~mPF=vO6oy4nA5Rpn$3Io|KlOZ1aal&TBzmi+KnH2&CbbbvknKUK;7-{?vK0AL36
zaLLZQyIuf2Trhh2ugMGIV?bA?Qxfz50JG!pu%L7*TJatUmE&KN7r!O*---9i$NiDa
zSL}J1yof3e0+1l$eJZoZ(befI4Yoa!DlR1e5@bDBhl-E^^(UmET^Pm8uV43jAmo#E
zCRbBMhk;6&ib{PZPnLIwiQ`YDh5RYrF6BJj@8%$o*uPC)R9b<Mz!Qkk{AjL)vLIw^
z+PrT$IBur-AQ)tS5aJR@%m0Jg@Hmk$f<(TmE9f42>5M1Y-6N;?2m@N+m@O_KF{+7a
zl9G#){pwnIG{Th&TFgPqOeZ!LH+z!FH;^Mml*<qb!brOsZ<hE`HXM-j7^Z}BGcmw$
z^m-LNBM&F%txf>iH(T>;;&^>Ar)}D7tqE=634O)3=1(c^-#*DN;C^`GD4&#jBJ;&1
zN8*EkLZmBq9&&f~J8zY&YBKH|0#yd(K8cAChl&)qf}KxpnV-s|qhwsUjlOu!W>qv=
z=Sh9q(Lh7v$Zo7C485g)uil}IetB9*gtqgA6Fj^3hDToyFAqWGNm4~;YPs^7fduYn
zWgnJFz2IO&{nHbbk?o34=A^q{N#m85O)CrP?%%TL8^q6!)S_0Q3oskgGJeh&%&87~
z%kVXje%kR8vAXuHu~lN=^o&nTYTE#=y?fungor|o+gDTPK1s#0+KI+EHCC66-pTK?
zHg#QVdoBp`Wz!ON`RiZ9-;8~h+g|R<ttu{V_n2E;<$&nrPMEth#V;mloxe5`I_iWv
z=3MgFmu?_@3w#v>Qf*LZhfuLMFgeOCE<>~!?nZ*FY{7(2dP`r1D1}+Ie~h@u@17E&
z50yL&rH|L>Q5Y=!1u%P-kx?PAcr|}0!Zs$+ue~o4JHW)ql~v=!tn)K}{$`yiUwN=7
z)hh9FP2_o-#E=udNb+sMhA{8)pw}0?dnm>&oGR6fCQ?v&Iu;>FLiuVGGRT!dy!6%l
zc^rIl2v)Rm#BitAEac(|w;awMgD6(0bZ)dr{;O_7g_^4gy;vJGYnMosxvNPFa|*a!
z@m;Ma@rf{Ee+QV6nlMd=PbC7na>s8kz}o3AfZ2bqE2|pM2M%1XuNOgB)qhLo|HB@y
zZl{(0Bbh%`-N`%nkjys)9om%ey+c88jyIwps42o{7K%((F``%GFH-vcJhF~$odb)r
z_>=W<!H?$~R^J^$9lJ2Cpa%i#y=4w)Zl)(M(bU9A-&2gm?=z$m$ZS<QTpDFc+bAST
zZz>%`PX;~$!9#$_3z@pvsXr^Zc1|E`iSybiF6f(~xXg!2?z?RmIP~8txi?EGyW<~%
z)ifNsbXH^SAHRA3f<P@459avvggk@oXWT~pu=kOD-Xp%B@otWA&qG^BYVJ;p@8@A3
z3-8U&-JOl=I#VENfZ#}$&YQ6s4}E2BmY>{Tbe=aHynNBoCsTStYTnpF`8OyxAE532
zz^(jK+mRytuI+~Y!mTVxQ~hJ(@Vnoib7o2?Tzx?6a;X?kg${^5{0XP6Qg{z+9Il8{
zk8J)KeR$Az-mq|=?E%j)oaZs6^DoaZ-UTHn0t#q5n&<>z&MYR0FgP86(`shsR#aBP
zqT?5qHZ(R#l~=X3#|FNsZw5R={??A+5zi#bo`I?98M>j-g#}pnSzvB}YX19XN6p&q
z-rmO6QFZeE=~>_5@m2Qt`Q3fd@!pec{|N*m5H3SGWf-*W%?<;(s#wYLBP1s>!#6hX
zQ#$}{$12eb0X<1|bri`}?Ky_0G-n1j4s(8Fu*C6M6*`N{0B~B6%o)5yIURpWK@fx5
zRo^;Grfh>okctN_M{a+n)`A1_T6;klDigBs@AIQo<|CBZP`rHKm>;`WIK?HbnQtBQ
z$N~rn@ztCBke>0$5_(N^hPj+PD(169N>OJv`oiw8zaFQCM0NW<&I+zMgO%?TQd`kC
z7WE<8^?6st-lIe!?fg0-tG&5q);3oGC-d)1-QH>Iw+=SP8$<$nEbpJx+Mv{!T{pTm
zaGIwh)gUD^sa!9`H+95k^(*mgZI4ax4mJv&o?RU0VCmg{x4+w14PK4Ax4L&hdg5yP
zNfBx?!%j%-fksoE?CC@JIK?wtE*sgApmLJjOOAe8(`{EsR^0-R19sW(y+fC}m1k6!
zmPH?i{r8|VQvD<fR6yJL6Jw?}2fScd(+YDxQKAawn5A2dc-bksD(^*yLhT=wIISL`
zC@MZ5?WQzC9mMU3><7_4%hV3j&&*Nwl;#=EjE^SWT1~JP#fLhevc+U26<6?PgxlYt
z5V_FIu4koO$(>QBg~^w1q=qXvhFVAK)?z2b*&2o>Ci(OZCZ$F@j>lzY8p=Z-%jRz9
zrH5Um!orUK@(cmo+b_=$wwWQ{5W~LG9R{5$Z@09cXXhV_+1{8&h9#_{Yt4Uya-)GO
zHc|cLhzP#@f^zSez|1Gb?>7*4=N&ZOI2y4wf{f-4n&Bg_&6+_30B&W0Ea<QS{hexY
z8&(?QQOAwE>QOPF9Z6B=leX=n?sXq@_8vM<v{C@q6Ls8&QD)5E&sM}_)yLIj{Bt0x
zw)f|d_yzjOFy$kYlab%xv{u0EATmhfcQ~ygQdslvt;?zg+i_Lu%pMTtaQx4OIYhMc
zcbMG`C=2tm!RLLB2WlfweiRd+bvfi^|9`J_dDvxkyCOCGG~zaWh1Kg0zobs^-VGLd
zQ%Na21k@Fg-ve_4e`!0(V+0s6Ao|@8MSMaCLfGxM#W?y**-S2?3eW0A%>|G00TR%9
ziRsNm(vGU#jY4pS>B9xzj&7wNgnKNDD|kck#+j~N628RGr<mfvoUZ*DWjMCPJSnc*
zW;-n^Wk78_C03sPTj6^Rb~}}R3WB;#U)E)oATE+;L^7}2xlu)eb<m@ib$mMsTT23U
z>q!xiE)w{UOSoORK9S#x0dQJC+Xc;jtdwnL#E_>B=4yTRl|bAC9%TGS>rx!lz6P`|
z*OXh?#V>0tOcBL07=F`sipt`zqvYj>LD4LBHIlICA)3V5)Mw=<uo6rypQ?6Y9!G4w
z(4{&4*XTo4&%po3*5!XZXI6WX!4{kY0AK#0?f&5z3S;E{`<z*hY%qXZ`E$-}AXlLZ
zz^yo*0=Shw7qd_E^`-KhH!HC9GJnRHQ!9zANGQ6Z{EW95*a6V*{qEbRMF)li!aIo5
ztpRyZWF@c`LEm)e@3@u8l0cLMjR`}TUVBMl-nzUoZ1QT8wLUT*sR9F&uB7G~JVH3X
z0%JYNx!KvX%IbjvQ@g&o@3WJjJeTopl{#i^*f-^x$RIcm$(SjJ=wh3D2WI+oLDaP*
z<QlnWdwR^m3ycV$>Z)ffRd?=c>{OuYg@FWnhsZB<%2Qv<oc8T;ZCH0qq4g4Drd86{
zxd(-Lw##1`n+JDjZy1=H_g_spu@8Ug7Me1hmx^&A;1|3dtg2}{HnZofTZBoAsUXp1
zapA02z37#0%rhyri*Zt)QdVjwREYAyxG4waRZGGTf`Y?+mPj}BTH;L>JY$`-pGxrw
z6*;jx6=Y~)Kh>zapfnGst@=)mhSvSTlq5ikNfRGwtRqA1V>AJmHpo}0Sq||)-^+O&
zp0lPM-IfJ5KysBuy{c8S($a0hc%9acZ-C85E$Z3L`r|IUK~l1x_d&bYYm@Y`O&o|t
zp|QFv;5GY!{2lgY@OyopG5%WH%!BmEvrXx?+#VO7<A(Iz)t8>p?LIHqQ#bPT@!3_n
zG!$$Ko_*AvEr@B|s<pOP<=vEOQy$8Febg4RtNRYkbjJD2MpwIj8!J9`_M(+TkKcU9
z#A*&Sad?J^Gt6KS|8Lrk8CQ40X9p&$y`3k;$joA5Bw%K@s_yRgjR|UkD*U_D7OedP
z=N-ZL#^48SHwQXAUM3u}?<`WT64-V8PN8{GO=8*({>hE`(7GHM=8Xu&US$h)pnS>V
zDK`aOIjF4Z|F2q?GPR>IgD07Sw_E=*XZ9cCR@AJWPCTIbD4=jG^j4$YM*|g#_H9pJ
z{J@eEcEWdS=oD;J53>`ifErx(9WefcCmQw3nQ<8ELpy;BcjkcugD2|%Z5P_Gt0!~)
zpzSIM;^%CKuD_QBmkWd@bv|gjsco1siN@oYp_?<VC+Od3&6=f}SYb&r14&A0U@C`h
z_nq#q|KS;iK85L&d3l5Zl{&4vzpZs_2KCF_U(Ge$a0k1Noeqs7E#03m)ZqTj_hSIG
z;oTpxSbp%IzTYN=@5lFl#$uU%(}o%hBXq?7jKyYxWE~S^6;poI0)cxn(;!aTgEnMA
z#a1o_?#Y1f=gjJA3TQ(EkcEZggYO3rIb7TUZAe8E^bm^$?#UtHNy&yEki6p`h#Wa0
ziO_;VNwf6ahkJ5%eo<|mXVpV2*1o2$qaae@0mV1K+uk`6mikR;5YUE=!=npsC9}X3
zRrUAv<ObZ*RlxVtn%_7!=-xR1?#Y5jKX0W|&rVQC#LPWBQEqPNKf)G5+kCNbSrY82
zNZSJmJ4oM%m1uu+BmxFo&@02!x+33aQ<w1ou~;c;>QvR~!;FD=h{TI9eyfy@C_Ycr
z0xQ|9Mjmos1~rCE{Z~AoSYZDe5Ah@4r!vEW+4YUdA`NxQ0vtAA>h=OEpOcAMFjuu(
z80{@t#Zp%2wY$B*Xw3Av5e%0nFDL=*UuUjTHuBh6NY;lulYFsCu({d?X~DiT;s>Vb
z`5$|VQbRX-K!~DM;CY49jL}RX28|`hw`-jh2hAZ1k8JiIds*BUmc{eFMac1$#4b>k
zvsl4(;niCp8L`?#(^G6xQya3`MTHy2XK}F7J6>?&yTJVZ)N(L4HjB0BO|9j2;s(+e
z4-yxh{VV25uX~p^1cD_uiF)1z;-w2as4^Ul-P0#ugy;y}%9*PXVeticmh5qJQ^202
zJ{{_oRK%4&u+)x9$zBMV>{@}aH2T5;zCB`Tf#TQ~Pl%cJm9%kCeKy~OiBRJIu$3W?
z)d@k-)u(ckIrj6izwDUuiu{zT|I9hfWF{l(-38<cu4;%wN-&?JczT=;v8JvGN-L4x
zqqm**Z{lqC&nY8C4`*mK2w`WzP|xF2&1lW#*v&-WRKjPeq5Bo9*54Fzr~FL}x9MNS
zFzAhEdAW*j=e+WEgo8yb|EKRa31~wUXf7j$_p&S)t{IVW_n$-#CQu#EleYWR&D*QI
z(qFOIc8;Ch%Dh+!vdSeNMwa3+!@j+m=3DwUyp_rwmWuUM#sj#7&gT8Pi}ju6qNBmU
z!d$jZ#>2YXE2n*bPW1fZYJ?~K%+1V9Oh*+Mg7wU;w9}kNoqa0CZ0!u@Or<4wPP<I4
zEJ69D#nkchyEr5sHOKwTb@h2T>_wbEd%5TGjd0lC)&J}kx(;H%c~!>7H6rR}{AQGq
ziP>^QD*5UJP2TFg%|trBdvi9OPQ%fps@p7R9BY&6tX(H2cz+hBYL6#JW5|S;p&9kV
z`NDrg<lxIm?0s~(^6lZC?2QJ!ykGx|$dUMrtr?i2`isbMR||rmO?<(DYZl_%t5~rX
z#Hra~IWDR{Hyt~82hUpH-SOlA=U9}k>85i)@FmX4Td|i7?GvA$;+$dVH#M{_INcA6
zE(N}9Y+j3ZTl&5qkL7m5JSYR8_|#3^{;CE3AG#-#($KbFvVlQj?|(<};S!m@LDcER
zSq=w?91kcyX*n-c^2A@YKp$y5-G^G>W{s+M80|C>`h~_(3uE&m0m}q!oLS!%-1!kc
zhw+t17m${h$24Ic)^Lw7^t-3YIl{f#HJ(ZR6niCl>=C&uPJL=Gj;3o#6Q7_>%XlIF
z%?rmlEnS0N#!_N8!_p(~M2s=zTmq%D^jX=PFU-&EB?DHE?drTVSZR;@<`Ash*~M2M
z1<a7a?8-#-a=~)8SoOni>p;+AX>1cNJN5Bj#Sf<}aGGolAcDvECYVwMrg{Jr-_OLu
zpseQ`;zR#H@vYT#yTqj?-=XWH&4>+q;E!9EN&-{2sDdak-xAl1J+3D8@_idQ?^EAH
z=-vi?9kJE2Mj>9<ELIwpd+PcTg#yo@7``_z5>_Uo7xgo0r?^ZEteFZMH@>8v#@OoG
zV`V|=ZkbT(>WKBw%wvvi<%CqE3?Az2eRGEYtu|Dd>Yc2tJ^i;>Z0}U#)oBqJBVPka
za=MlHtk~~=48?bKR@IDAXznXHzf62y-7QsU8PhkvE^uBmd>>qBoh7-jt#V#FJy2*{
z)wi(kcwV=J@c`ZXg#zA`Dsp^40e^wZ*$+1Rv=sj(Ygn<-x53QCm*Kf5Rdmy>P=YHh
z+|n8|J_tpu*n^;d2~qH(1v>=5Z~(PHUP2I}QjR=oLWMg0fIAv?wA=Yw#3|uPJDs$}
zrsWiVj)Ex+(RV*-Rbw>bxn+z`+2ldo=rn%Q)%bjsP>^jxRXn;qi5Z`zF6>eS_Rnf#
zSd9_{cGcAy1b!`as?vyfn>FSYvu^gY(!z+FABX}qy>Blq0#j8Zg5HMpa_IUG6y~q6
z_08y6Cy_&v`?)zjANFgB;>EKfZ`7^v>nK;2-A9E#+Pv7S>6N`xi7jK&LP?*|_ssN)
zBU0QfUzpMHjfO_Q+$)uReK-<K6P0YEYEbpH)+6zYbx2yY{tLx|K1Z_C)Sc+<?=X(-
z@%zI7$go9vh;Xbs`)8!58s&$V*b}y&xe?q<zS6e|boxm16cA(^DRK%-1)T8|y_(;a
zT$!0|cZHUSo3QJ>ES?K8tg56&-cwT#n=P#5LD1gYQ+^gV_anp_&vCE85zc$bFrxDP
z!2I@PKheUGD0vg<mu-hYfu(-@$_^QfgBOxlLl_5TjkJ6gq1V^T$mfqkR!CZSW#?Du
z7YjieTrH6+b_hI8HK-h9YDqi46FC}u*v~zln8cr?0orhJt+=>Yyr%&F?RIl&Elpj(
zY5w`gIJLK6<WA|cQY&E?7_q;6zXuc_*|{|bC7OKE9v-2_j|UVVI!_&d;<Lx1YfjJ=
zw_|p0^u}dVW(!J|Sxss5>>116vTv@(W>&`@_<V4bvG#oJVd^&i?j&2LVOw$N>R+^B
z^-#mU9iR=b?|%3Fx@CT8!*#*?%i++*lPsCr?a%jD(?gACRe#rp=h14#3*DoE`<I>Z
z_qSGfLg+BVHs%HkgiMBRSX=7%!A1*Bgq+I;5DGV5sM~q7+pQuq3|I&?%<5AVsIU}N
z#o-Qc`0$n7tz+DYtKF@5LGaaZDEiFs!mPv3s70+nh+!T`#U8&CIXEC5%7^Yl*dQ>H
zra_hG3nkzS@&-73N))Buo>bhth=ec2E}lqj!pcCNco%z}w!NZ$<sI_@^mlLtHlR=m
zVIRg)dx+wy|42O28AeC3efX7l1jbVTaxbB>pTek!|0-?~OJN7JJzS<A+)MlUR<fK2
zg(|Jm^NSfbchF$vG<1-Ki-@IU|Hoz8-qX<)a4%_bJOlnvsJOvlNy$cL@oB)cRu-U7
z^YUd<JpfpAS$TYJL3Itdq8@NB&4GtsUPN;jz>MQ=Z66F*>;sr_O#?&IE=3Q_xR|M#
zW#hVUi@;c__K%f4{m%7m;4&?^yMOTs9)LyPahxBc7#}lyZ}LPQLLliLmV$a=KXd&&
zU7W)1PsmA`rWBrn=Sd7GRH}}Wm1dJ?A9CUKO20-4lPmTn&}XIhIUnk8&x?1iOF7dy
zpppu-Z^+mo_%o>Gwr!5s)<Gl^1=_a8EC_N87YtW(6?sRh1ELI1jVhtQw3ZY;%KB{8
zGt!$tFIfEfI_xz{XD|Gs#irPc{doB5V$C-uSd3qSd|6hy!hRr!5Y?2fk$JEheGiH)
z`aB4I-DPg9SiUue!;$vIMa9NoviKQoh}0a%)~t2EoI=(0vCe!mQ5~i<qNLgK0?yNS
zEVeafjW&s#$<o$*r!1pIGFFLdbwRL5t$|Nv8h?$Y=BW=gx;U&<=s6L{3xkytuq<Ay
zu)Pety}p2#CAc>ap&M3nW4l3u3c})S_`)KirYw2v!H20ky9g6fVB^aBO?a1ot)}oL
zTOR|;2dGm%KF`jEHT{<p#K@m8RaUnJvgvA5Fwy5$iw5(ogSA7Z-()O?zB*>33LomW
zry>@nF=&f;FR()8^YINmHO5B;@%|7_-I|QBFUtfZ-?SOHJEDXbc)X(xM$6a1GB05C
z5;zOC6yi-qEohTCq%^6brEgF+C9DLLHd72GEWY|l5%y+FI9j&oC51~sr_u#cP${uv
zdV9Rm6EeTi1wb34Cvi}XRTyNlEK{11%O?%<3exCaZ36{&l{eXpY-}Ky-<fgoyZ4|r
z9Bko2@!j4$u_VhMe|Il;KyKqa!`l@T{1RE%>zxmig0_Jy^xLI#`j12JWDlA^NY4B8
zliN?^GhQPD?&Zq&&jEReb_^ZRI}YQc4$OBXI{99E=0{y<de2eYiFev9u*kE}i@T|-
zHuG|MvzdO@GgUp;s(jI(Z&kxRSO24jf0xO+TIiaDVwfGPfUD~5lVI{z0VZafG3j$(
zt6_OYDVvF(iMy(kDpo=?qa0wNlSwV7^W!PqgCN`4Sv9HGbEa)Vm32JB1wZF()!*5o
zIS%#PEsnn;eZ9niC4FJdhoyzR%)r>lXXTa!a_Eha2~oXYi~DkCu^z|RdyvIof9J4i
z_s$)Jo~a$=xGj@^C$fX@d3O~n+r1ClQ!?%91d-Yt^iZu&UcNrCVWD`=;Yb?#JVk=(
z<*TDozWe9ty>R=1s*~zZpWu$tjy0SYf0Y@ySS`bM;oi(@Qo+gla3FcTpXT%CqI+1~
z&FJE3+WlRAxH|J4Qu7$HIT+zRIU#a(Ga^T^JBl+oJPh3{1fYA5mjJ!yAWT3rJVYab
zha$P)i_DL2C;*pfWbCE<KgKG4fZ%0gacHmrfJx$@J|WSQ(M%9qZwltu&ez=+Y&^nD
z;n=>AQpy+We#PRczR}(7q5R?OvO2+!>ECoP+^g&c1okW&R#rn<94$08J_ZrWy%r@&
z8VTTLQhsuv-N}o{6zr?KVz90s4IHV}?YV-;q}sZQE{;M^P<1pB>ElEk*TVe1#Zbbu
zbr16$GXO{G8k)-(36J#%nVxi-p07kQmbzX~S3T%?Jta~|!Xhl+Q`0Eq#47Y!BA3?(
zF`E&2sjBG4)Ze(XGQ#z1oM}M9=`-2w!0)^1tYZ1~*R_*S2A+sTvXAHMVieXuj18?2
z=RXGVHW7K6lj$a`I=k~@cn(@uY9x9aWC<#QWSW7*BYpOU`o6ym%H|mB&F;p_BOF<0
z%o7%b1z8cdVp--FMJd93bgJZ618(vk?~$4WI^G8RBl!1frE!C{tl#v)g%*0JH^16q
zpW#Q1qC|p0^ZUDd83+DArIGc^y$tvOU;Pc?9fq{Bie&%?wR@z$ST0J8VMM0D1Z-v)
zgK75cqdWn;T)$yMlWLVmMbRkvzSxW=-Lu$bjwl5_vPQ<!z1UR>D23i(jK-S+*mWG@
zAj=6xqYDP?CLEL^FYH}I<an&Mb>xyjdot~#A4-I;&M*Vs4(Ke%&ETj_V#W#$=+2EO
zW4Tmfrf?7Fcgd-sCi3t`G#DBYoXqm4D{$rEbs58a{LDYk!&NiTX?id=$9IFz)zZ;v
zJ|M5kM-s!?bMMk=*)%%8+&-Bzb}C`hbvQrpW{PO0q1U!!SZ%;LhVX|=uYH^B_r3%>
z!Y!d*$ClwQef7KqN4GuBO|px<^8^H!4Lz<6!;5XgyG;ei#gd3Yi96BaEzFw586>;Z
z$nkGlKhv4N3{TVSsJCom-z@fh)erY5l91wQ$d12*!7`rUct?&gd(b)G3RZ7*XLS1!
zyji}s!dbQZ^SdL~lAb_vb;fdp7lq;K6*}*^F1xA<4kB%C=IGIC2*esKO*lS-S)M}s
zG%(8`zoxY=`}L)*ARQmj7@ta%Fa(t)tObGeXD$cr2g{Pq`!`-(6Ad8^b6`Gp`b6h9
z8tBmobDx5?=k;2VeS}AeD=l_OpGHI=JsV<;%OKP)IVL<BCk>lrv$;hC78u7M<ld9G
zO?;oGGM=`JpZ9uqTQN&uaz2h5U7FPJQ<d}->rzFgi-~|no$z!dP31<AnvY78%1n$l
zk9;DK3V3bmIJ&PiEAMQ;%j!Mnf5xNOtfp<D7f(-gn^@yrx^KnlJr8YAt6LCy+|cht
zdnj5^`?MMSUtFe<Ou;^azcJ(Hf9&_z+oOh=IZkD+6b$Be{l8+y{m;3Ve=lzRKf<D&
z?tVhC8aDq273zys?e1UhB|BAOC6PM(X9BUC<`(X0K534yzP1|#M*<7v!;P!C`@4&w
zrn{fc-uIB|`zMEXu2{m)+u511DL^9Sf`mtI6JhWGt=XRj1YgYDmi7o;3}b@QO~nWN
zm{5Sok3`7(5wg9Rq#X0+xi*Qtd(ko&5rjj9OhR(u@mkY^!=9AB8kT{OmTS}C8K0n*
zwg)!EvyaOI6NDoIp<?ng@t|=hRT41&>HZu7Ci8<wg}N(FdS=6U$xVAjwt28jYqLYV
zKTdmmo_4h@^NjKFo^9h676VK2fk^bcUi!gf*?YCLd(~_EiirU&FCAV!@9j}vI%MCX
zG;aes@3<B3flO^pWIt44AKz~8I7=UGCC~8`AG~fKZ9=a{$i8o@eLh8cMOJ&^LVRVq
z?|n1QeEt0b<n;ZEOZ~sn`Cw>JsCWDE0~1Ui{7W{yva(sikPRSyo>rTI2^T&V$N|#N
z0<gsbBKQK@l)Q8N{M5PweEkAz#DeOo1IjJ}-++9o=mJCagWFRABp^Kc$U$D&;5e}$
z(`xr5I^P{7-$zOTu@^xeo52Iqys}Ec-pGOB*}mXqFu<4_t>zOq551rxAmI&0-U_Z7
z1JSXCkyM(^Duz1|==bS|19S?KnQ*epaB`vuO8y9-uLZ!O>0%=o42a=C&k(W6SaU2M
zVA0}atTX1ET=?4?AUqA%xv>c9(#R7L5aA@2rh=DY^f!r`Z`$i1<jl_%(0c;mEea8S
z);BeHAbKQaaU{z}9&RO3k6@!2`J*?<!)?f;NhWl=WZ}OMIq8c>n-j%Y^2b;!$Jjc=
z*vG~=*2Fl^!~m5oFcHLqAL6A9@o|9o#X<sVAVD*bkV{AyQEUW%>^J4uXopxxY;0Uj
zY{E=z642Koic95>OIMD|bcoB2jmxcx%b$rWyo@U*iZA7lFIWDpxaDt`Qeoaql+a3)
z0CxzovQ1#H_V_^Y6>B&eAgBP~3eskgCB?+aSW^`k&|ItQCw>;09wdY^lyzU<YTal7
zC}=V^X?sQlhCFc}1r`KGFhfCHQ4Xl)!9R#i?yjK)?aU;zetWv!6UBV$?~<l8ox}fg
z<|#@Xn@bsV>oF7?CS~l$zr39`LFBN)f4rT<f2DezSik%&)jMRZ=5G6Esuz=%NyV@8
zk6B`7sy}$!f4-d#E5XRW%@RK`#|GT}=Y0Q?{IGU>Xp6ldclQ7Fc5+2S1l)aS3e~qb
z;O!KRW`iZ43P3OH)3X70KM1#=q^`a}rmV81H6}2x5qLYjZEhPF^h(I@9UGru>mQn#
z%^jWmzPLm(J-a$k{bO@$X=QD%qN5ggI~DKlpJ$DnT;HUgU4S?(b|#CUuLSR58S<?|
zmRfwV3#e4Z<mB4?2ss5}l}gf}`bYO%0VFw|fV&^R?M2m7`V}pbPVS4fc$qFLgk7k$
ztfy=PIe{O5Uy7G!BLKg`R5d8y5=$3n<k8tK-+q-XM}S|}TR}aUkM_!zH1LQ~$$LIK
zLalB;e@>WlrdLYujJYw<>St=65y7Ht132$!&&kYSsjV9k*OnKrWW_NM#mwdXWz=%_
zUc16~k}ZyPO9TEu)74APn(DL<PV^=MPrghP*A<&4?wRe*DdIebN&#!eCVAt_WZ&Cb
zcuj)+840v*F3NiP(l!<*#j8(t7~_25_Oa{EGrNObo|=twlkTjJX{Q%93d!t`4%a0Y
zu{^)Mel~#AHFQsLy?={9hjs4^i!T<+gACGN^7yWk2J*zt{Mqk${8m4OZt%JN51$FH
zGzwpG8qR)Sis<P;HmbO6N~V_d>gB+c>1E0wE>ZcuAnx^PWM;nY%@xw@69DI|kw8fm
zE@r9O8_uc#S;fs@Q>KIkeKh!cTP$`BgsPS0|Bb|h9AvhSESwpc`_+TS&!}`JB>tx+
z2d%Hota3=ad8a{7(v!0-T7G+mNBS>4F%33TW~o%#QxQIiY<h=^Y!k-@Tz%`#z}L;)
zvVxN(_RjJJ6Q^XS33z7Z&@BmPKpx&sF||_RxoHKJmzj?+;eT`YcS|vuWWDbxaz(lg
ziw4AcNy>iBu_M6m?3Q`G>02rv$Ar^=G?xiLFWOzv3dxsQ#7t{im9F6ccfT*c?f@3Y
z%pJ2|(v0m4KkJ|c8LiK($@S(lv>9$r{ty#IG5-MA-B~IIW52tR&N)|MDy=2tthWG@
zI=%19Lk!*JsH8r3vUH=*3qtLC+>~Ed%HAZ%>Bc?h+}qBzYkX27<e8UZ%Z12XPQS5j
zelp%hbGtiq&K@jH^QKGqbV@<d{WLPfd>{uy{R62jo=T)i@C<*t(CMscmM%{|akmTC
zf=wtQ?{|Vt6Rt&<z_TiJkAwI2KN4Dk?Uz|u2QPH(oG@zoB4obA-mkE#hSaR<YK@+v
zB!wpMZ+^2F6xpIo4!P2fDjIa`C~VrF{=v{MUALEl`_l-umR42pz%NJI@em11=0>yR
zX{d8!FY8mt5!G|Il9Ptd90Ev_uR~qVqKuR6&UZ!cg)|1tnz=65lCfMV`ShUN*E?|s
zjbExaZow8Ok<Rzme%R^=S1~Ntw`KyVaIr|p)y!~Y<}Bk*P<Tn~78I3XxCFR)gcv=Z
zBjZC);w54jVX;;W9m-eK?|&e$xr^Y{n#0EE|3FjMM<E&<_Kqt4f$<4~OuEnJ?RWSC
zOVS>h0yEsphi&=MD<x!VmLpFu^JQFKK4g07BM*<_Wjtm=WafKQ3lH$&G6D64FMg#-
zknFA};mCzBcd3OhhSJItpe+Wh>!1+VuV@Rif&Z53#R)^f2LC<PD=xk*M}z<!01;*v
z!6Gk3ba(3*@$`s0JK%il!p<-dQ|`4%#EEK<UDFerDNr!X0~L8uGYOMR_7{&v&tIjp
z*p2jc-{3%Ide_+0<@!5FaAW)B*E!yfyl;Ju8`m4L&h<)epivb!zI$|?M`%Q<&KWnM
z6K8{uLT<1s0XMN-enWtCM7pXTH>ovZ<N2xVP}w|gGUo8ci=$zg;v3v#Ski1#)VL_m
zR?ZYu47k^6%d*xYT=%K!5Pf+D)WJZlakMyieID=25m9|EI+BjecapW<VF6qTOc`0)
z$J03wGM`NAc6u-CUYw-ak2s-+^qyV;PgC!}$nbpW@-e;RnV1|P4P@|#hvWyWrPtTd
za5*Qi7wF^hujB`ja(YP|ko>?CE}XCY1bv~wgGWD_EhYgZ{a^|ohv#K(UQyNEfr`*Z
z7}GD}sG6=o#i);VQ;-9x+Ri{FFmn0HgpyQU$DmSBczz<CAXVQ!sO(~xDW328*-*63
z$J8|p0~eiH67U&WPR4*?#kT)c?X${)Sd$PHBe=OrxT?$%lVJPLaEsA!)ya=og8d}n
zRwCePAop@CK@dT>4MVuv@Nm;e!@ybAa)~;|)I#+9c#K^Z#CirCGxY9j^q&%$X4?&-
zcCQ2!FDw;5?C+sDN<CgAD4rs^tmt!<99Ji}sUm`L?E}C5xD?Z0g|=8>rbm{ael=Op
z!o+vThO--u;ECMEI9$xe=Zue)wbd9#$*%Oio&q~hxV=TzLP5!yf*`FKhON>&C=GxU
z&JZH-7j}e1j;<izUckTF54L0OS9tu?u=^GLu{4Ed0#zDpFMs&4?2{HQ#$?z&_DAbP
z$~!tQ-HE7S39Ss=u4<pf2oD$+2E?zB#Pg3SbK5rl)IZMG8$7&pHP19jrhdLjLohq+
zyKi)#x>KwFmbbPf)W<qqP|!d^F|I!b-#XK`Zfn6dZY(*;H2ba4_F=$}p$tU0T(dC4
zr2N_mNhJ`huGG#$l(%}YqR?(&=gWZrOfzO>v9A=6>b(YLiO-7Nkaozq$P0!;DwUC%
z!GCXy%~l)RJ~ED$U-fsIXGo)Fb8y&y8ulc1!LX`qEO_9cfw=X=XZ?|^otd*!{(Q?E
zSTRHDpS*3Gv4iOKC$agN&62d3GALZn(GDi75DmqTLgsLuV<BZ;J(oU~_qbU+B~$NF
zlx~WAhrU$%guhSER44`ueZ4HcnaE(!$|{C-_32a%g5$lk_2f*#7e3zF-oQcY2GRyq
zan{8CcxjtlptmD;K0lr}Xp^Ycps3t5KUpVj8|c#TNz*r>-S^8`W&G_1-Bk6>y!5%J
z!;j_MoVxEv6B`ZJLTVbr#{qZJ_QozPFv!^T{-{G2ItvRhNMbj~#4?v!q-4ht8)|F3
zPxJebj6eY!*c-eDml|KmY|@Hu){KZQhd<Muep7EKRta^S=4?D^gB98|c5`AS-#PJK
zart5Kl4+Jx`ofFW^~n8zXZ2p~vVGKLG2y^&6F2ZuJoWB-!P8+4qGaRQDJOypg25T>
z`*%MU8xKmTZ+Ej6_vU#gFAc^M&fDB>XRcmc?JfQ<+TJp#%|>7M4o+})x1xp87KhT7
z;!vP1#Y>?Sr&y8T?hrf#OVHqM!L7JM3GPlQZE<LG@;qzpz1P}jpZA^f;e5|bCNuZU
zo&P1j>jHhntbtabbOI^*-_3s>RiX*f*8{5J5gX8w@_(XW2%?huTiy2xVu1Xm?z5nR
z*slJnig8K(6Z*#w2^MVrH+BC%p?{c_9XV8p!c_=nW#_-~wlz_qm>;3T5Qc$mzc#=y
zw!<*6ZKLKe6I2+6bz#mBZXp$pfo*^E3b%oTV_@43sBjGH0z>?B#Ss4tA~3{1FAVXo
zIRZoc^S_D+WQYuwiVQV~4EKtRghXOs+p(y~_^U`TLsXJfREj}VnpYGA5(RCJ%0fk9
zpcNR-MV?f2fkAYU7djdNi7su9E=T<hy<mu`m5Qmi3F6=&Xokcfn`7D-2n?*k+s+;p
zasWEL!ZGNJ!e_W%)<FZ2v4(SDV^XpG{NeX#<NOt4Kib3%Hph-4;-FxD@<HY0$om9T
zgs5iCjeUt==lJO<5td8e>ALtK2yrhQK;)TlrK(1x!}`M}eiUCFI0;16#m^9`V|4+x
znx%IQ!0GPbgDak&5HK$l0DB=J5D;HY1HQFP4Csolb_df9JSA??B$EdJ;SZdUQl=5W
zB3HwFIO$VCBA<66Nr?)FbTX@9vghk07VkKsvqV~fB>Eu%krpK;!<6UGz&t|$PBl4o
zX-zo+bPB6<f>uj1c2tVO&m<}!m-s@m-+Cg#J=yHqLB>`^_aNmSF!gCv+Vi0##swe-
z49E>k)dVJg{*{7sPiv!297ciP3ZyF7rrXS>241IH8LC(qLO!&lxCo>_Z%O5-O_E}S
zFh{AYNT-?Gf<FT@W*(+{4*}vzxP8?UB(BpPq*H^Xl|#Lu^Ij156iB%(Bvv}(-F5Q&
zmNcJ(1Si`J=ctV41#o5w<g;2jJcBzZ5In<^(GTPf6w4Z^hqf#b47O-hGiGZJWl#g5
zd<R*x*O^r_faMmgNy8X%XRuUt*0wDcZ&WrYDCZR}0JW8Kz-Udtk^9R#SJoMD9EHxk
zTgd%$oeN-sVGlFnI}721V9j|BL`WFPB8&{FFKGb4QDlCk0;sf(As2&J=(@64!(|Zg
zB3(E=D2U^R@!?wl8#IJBn(;dZWgQ(N#Kg#T1FxUTW4p`?Fo2uZ<oXd}_trkidJWKd
z97RL{AO{twLLIPR0K&xrZIBQ*QTVY0Oj5b9i#qD!Kp*RcmHuL(*-fE2Q;~&C(FdcV
zkDwwOXptSV$YHU_>88k;sn}Jf*xjhu161q<Ee0WreHV-UZ;At%5WzBtP$NV*2oVWI
zL?aQgi-`Ce1emELNv0&ls3Z+k0)du5ktJD+C79iE7*lB;GE$BR7O7tgcnK{n1(m+3
z1+-t4RuAK^N{0w;@!>m{HABmg$g;M@vW}awE@+t{GN?fvAXpgEPo!0d)EW}>ltPtL
zM3l2Vj}^Fl)jNzcDd?*2QqdLsgzXpLOX;U&CbF$)$`N(C9XnD0Ku1DG7;oJw5(Z%V
z5CSyEKZj!8^Hs!l1;DO?vYV=R;?ES2KB?Zm@4KG(NR(EjRo-=1YtZ~#Bn^c*T6O;Q
zXl+HCVf|}e;nn8y*Z(+Log;yS@&9G`she_<_5I^$EmX49{EO81&$>b#AjoI7`)|a_
z44Z`uhSV4q?gDrm?f*C8MBs5y#9v3N&08wZzmHZBS4svZlIG}UkoOm<QK7J;z5(Hu
zU4z6Nt&D#itr1Zjn05N9uHMnH(##>uNEB!U6G{6}Hj6R*o_t-{9BU5v%kbmD7=AtO
zSw9XjRaA`OS3lWu{`=1~#_$`h|CZYwGKEcMVo<`;6G34q@Ikdkrv`JhDnkuwxU+))
zGW<q+r}EV#I8;haqzkr((rs9VEip$cNxGO@T9CDM(O9mcnp9Uw-F^p5HMx`~U9V)O
zn2LpAl#jY}uI#MOv~Re<Ua}OYEt)k(GYi}Q!%XS#P_6F8Cg-Q7Zp=-UrccKAS64=w
zG|cM#aEQNlYkptvjdUY<nAKckN!P>hBuA4`X?qy*(5IT$5EDsjkO^Rm%Sf}CMzCgT
zkI6hNovE-SR=_iE{MKG%x3)?uDfxY^PV@j@+qe7_bL$#0<+Mr9?u_S`$@iIn+;E9%
z?bpWJTQ4zR62qQr9s@u8>OJq$)zN-?dAc={`?9mckAS$D=2>n|a|re&9{)Nz5Vtlx
z*E{rde(e*U#Qu87mG^_lVB*F`worzTQfoo}{ZHSA)kMKIB6*ar!Xh~I4K|}GTu~d$
z>_s-5F^{PB^Fp2a_$}=oUofo4N!7x);uYTPZY7>!F%~dAFXC6!J>ho-m>Y7~^7^WG
z4DuxM$pNioi5Os5snRC4ML~Y$Q#_Go{?ghII&e#G#>bD|7EJc~sG`h|Q9%6cw~O9;
zjNbQ~@8vGw28LzH1MCW68fm&VAUu|68)JX%u6>etF5m&|gC;bmFnv7rfG(TuS^z=H
z&q15c4K}hfE7s4jODGE#Ed5+Nz8ITlvK%eMlhi?UM9_X?1i`X#ga)IlAMX-<VQ^yf
z5hfTCY&EEmzXpiJO>4K7xi8o;Gd4Z(9kFOOf9+F2umfc#sUAndPNI)HZq?d;y6W4v
z^Di4)bOap6ICkph$rg8UQ#qV+-*K@(d#uFE;l1RNR5g9|fXvE%MvJT(c4oIMb;wu`
zz;%%OQm=NX%7yrpK**Bcb;PHQ<e?)?naQsZ$*ru2aoNmgRb)?aMC$J=(Psm*cH6-9
zAx}krznIas#BLycC27zwXKJ3^;4EJ?`8nuaNP8H{(s;9m#Ci$QDCE#&3LIt}m3z93
zQzS1*`FTkzd-UV4-&<=i1LCO}tIWS(CphUtQzCNyxoe5+U%b$Gpzn^}eh_N~)b0f6
z&vkenwF+{JCM)N|VX5WM3!q+0yv%Wu{g}flE6QK?q_d*3grMq%?cIJCfr`h^(W3{~
zdHejUa-VuUWq+SPeVy?8LeXa8_ob{H`JXF!u^e&CNEFO(@1W^P(B;X%r{JsO5z&D2
z^QD&xcQ==vSm-~*Fg)=f02UJ%2g1LOg&7~z;0Fg$6a?}TK{^RttEgz|bMWZBA_<%(
zgTqhP3AhaiDdQ=EL&Y|Lj8cTOmEaH;=M7?VhF->a3NrC}IMy2YIV;g5sr=b{z!HTL
z=S>3Xi$@mduV5wK!<VF5?s>nbDP9PyekXZTZ*f<R=x0Ws6vRj%UekWTkm|YC|C3bz
zkC7-AJVjyg50tU&Qi>&n=52sCf>a*9foG?PVC>_Xgv)Dg4rXVSXRe9~>6_ev6w>T3
zuxk_JS!OuV&xfvPx{@+933w<U1GGJ+lif)QWt4~RDdgxWz+Uf28XWMw)&80KEow(d
zsSAL8^>6F+eaF053={wzT);o-3Wl2azCGZ?K3+jTc%V4wSEdy%p45PvHvgj;YLrrn
zP{RS6X-_b}Xd-cs9%GbyV^a2amtt`Wz6t*+YO0HJUWKLWm!@66cz&n6eacEXDO%wM
zyK(P-s+FYU285x5pW5)JutiTqHd^Gdl^`1F7763%!t#&L5d4aZl!<~d1+ii!+B&6L
zso}wev@Ru8=7$6syP-wR^#c6P>Xg~z(ZznJ0-Aw0>Tv&H1jz%t67VoVVMl05v3uz~
z7?PsIEV|UE`cSQUQLVx$G}j?x@3ExxBxa!!VRIhZw+bbwfrgf+JQCt*mZ7NPimvpk
zE>k&;R&7@ZuEPEylnWrn@Ae3-_Ip&$O_537kBq8$=j`x;!(MJkBDnUd`Z!(e2yaX;
zw65cqFt_3n+0?VB`fhQN=Q{SXb2mW^-<%zF&F!hN!T3#ElNH)t#?))^_|2OXPTG+g
z)LZ`eEemL!`<jpusx2}qx_Liq6Z(S*)erNO<L4yqHJmHyI-a~6bE95Wx~s`qZ+Q>K
zMnTzAX31@yJU{wJeKU36B`m+?xvm)X&zM?^zmw#_DjE%p&|QyaG2jN~j0T5InMcb>
zaZ~z_hKA_A4>w`Jkmg6j9j7+Je5JTJokk<=bvJ{u7`OzqN26`0EP~puI3FmF#=g?s
z@?B=&lvWsx*PXKTy}ROg$~Fpqsr$i`Wr0JDZZt`2YTHBZnq8M{H07c0j*H0xyJ2HY
zO=E1-{fE3F?{|qaMBjfbg<Ur-RaklsCG8^H?8ee;9!l(AnHJA7-nWeZ#l6c!TXW|v
z^0mhe&HD_lFXK}*Q9IiY=k{w?dxi8)>u~=mUSYfJf}AP2eS~;;?@*V!a<(Xkx%3rj
z<C{8=ZKeO?aSM^7#3|%g^47<d=Y>b6@5<&o!fC5Rv<lu+8!LZNkcdpGIL3R>x^Unv
zQD4aY%~rN}@vAmjW1VT1<5EGzdd^~|3iXL=mBVuGgC-<i_=!r@?Mjbb)5mqK@7hDM
z56{OhGfv_d{cf4n?j)u=3AFPAUxlv|iY9j7OFj*^<`>zCZSKnj1Eh^GBT?y=3oPR<
z1cil;h3+e-!jnIe$oID_g?2>Po3N5wmlgOYj0RuM|4d(!Q+VLHILc1IL8`yLtLXW1
zJO(Whm|ACo^YrD-q^E>ie(u;_g@(*zI$2$|apkUFlk}X{$Mbw^jw8u6nE|AeRC&nC
zwnaL_!u7|CI#0Q8gvLJ0izgltz3uN@17xO;%zn0x2z@urmtCVg@pQv7TlQgZTN%Q3
zT>_f@K;Lg`B+IQIcy6|q^p<WX;N$hkyzH-zMc*-*@7`V^{`z@OJU2Diy}uMM|G<ny
z?V5_Zp#n@VDkR5`Ua<Kr&-frfbgGAM60p{8Z>h=5KN{Ij_&hc1x~jW$`Z*zBoxRj?
zHHmJ!x0ru-NWJo7VXWh#aDoj#W#Cqfdiz}MzW>apHThk%+3gD2|K!yZG4S~FZ`Dr%
z(4V>46;>`K!CwQ8E&>2v{xi=5|D*>5V6y|L0!u7Ki1q`v>Deg=<){su#tDGuE<xCY
z3MBh@7nA`*)WN0h>^y^x`dexMuK+<5rpg#3Y9oe|6#Vc?4Etx`eXo#tJr41~5T$93
zCxoE_n;a6Vp|U?YR3bw;l0rlVL)8d5pA&|S!8tWl!={2bWg^3VKj3;b7}m8BCQBIp
z9^tPa8TbLh!s8ld%MgyY>HZEC-pCp5y3ek=5oTi$;btR4Q5yy_U~#{S`13x@l0UMh
zCfwU5vNk9(dXVGORcKr@a}YyRxvrd-Dm7Q2Zi<bBZzQM76$R#cRY>N{wV}|XL`Ub@
zh=xL<E8v{ukVwX$=<-2qKf(ZI3aaA=F(7cjbR8i*M@$VM78%Kixmdq=#STJZhcU+~
zDt7!Tc9J1(S}JbVAnvPI910S**c`Wvid(&kTW9#^NYt)Z{5~Z9usI%sX*{`#KV?Y3
zU>eU15-z+FFqp=h=7c*`!k?=I03#S%8jNcQ#`gvjW`K!Wz$6P`vTHDA6qZUlk;X8Q
z&O4DI<Ns{<wIm5IB>fNTur0}Q3&{%C$%>3A&!kh73{(C|YHUf-Tu9NrPSIgRr|L<k
zzBWw7kQ(p3jx~_RHfl*_1xGPw0RBO0{OFyAfil{)q&Y04IeDkOAoxrrAQjF5c>g}}
zv10n?A!-bk__KGq-$8nqc{;rSB!CeTu14qqOry+zL`WxMJij=`j1VA%TrDGDA@y5i
zM$!Tp<M{yvXmf#3{FVTQ4g45^bTc4hsd+{jBM#yKT6K+G!wBW3%!Ib2Hb`fRS7$=u
znzJ;2lNuSdzCL<UQNoBv0mx^huFX(rE`dJ#n)P7AQD8GO;VIE<6h6>An<F?|?-72<
zko0YG)`9@l=5<yJP-v>;#iknI=vr+3K<T?c_S(Z-^^}|+wrH^{Tcrcr;4$j#+ZOrr
zs4V^;S$`G)*z4J})49(Ia$WRt2#Ayqu4AZ>_*=FwzDvWtZ^9H_=dyr=*-D>NfL>59
zzChc;7?{#IW#sYf@`TjkM8hy*@jQvwdAe@7y9YT$r8)Ga_>4?B4;S-}Tk@G?@-Muf
zDhn1oT~v^ec`iVduQ*Jt1eFs-zR*z5RV~d^T$IvT%+J;-{Jnuc5S1ry2j7~(x3ViD
z7A%tO!M7hS>ewloFTr;iE^-klv~n)?B7%)3<NFF0zjVhB5=59R0>Yw;-{0g%MHkx;
zDfobFneAY4g89VI0^Ddsc6k0teo5wHzW;EhpmX5~HM-OYRFZdtlV!v+Z&|8&nEx}~
zE*V<76H?%Amr9GoYAQ{c?IDs@FRS;aV^+l?0RX;$$_Jt4!^rZ{#q#l+@*yU`v`odU
zQN>qK1qxcRh^$yHt*A!C6+ZwJ>N(+_T9q3BHbDa0c9kiSI0w=EM@;c|r<J}`RU1;O
zXNP<j(ec+eytknE-$cA<yLc>P8XV(zyfSJ6jd)-tHL+|wDKRy<P(0-=6*Y4_tq&Fb
zZCoW$IqzhR305teY^@(hEsJd}PiC!YV69+`LQp;}zB2${td2mZPQs^7Dzi?ewN7rS
zPT{srg1K%DRF&!~0MK!I?o%b2Nvgu^q?U<Jk{_rQk!^T=MD&HL;Z0_PQEP+AQiIuT
zgE@1fg>2&o<HnCZjW(H$cCC#LON~yqjn2$XuCh(;#!VhRO<tKzpw=eer6&K|ra<QA
zVA<wS<K}Rm=E%(E=+@@grRMnCW-xP0QdwiHbj$PVGLRG-w6!H`sU@csKr~sACyOjt
zs_2N0x2%IbY(<tYAuDf@)y%E6vaJt{>+k~`#v#ahs|QDj)+6iqjwN42=40ZU)*Xhn
zN5%1jx6<tzZLK3>V@Hqrh1&L-+ujzpjoY_v+q9cWwoTu*9ZRIFm)!@&v>MuXq-Ay-
z%C-=70Zwi^PMJG@%66U^cV75(UfC;mDvP<?G2<BrwR}KzV#~P@>tx~kcHug=_JZ0h
zXX<-maCV5|9k;qheWHIl0|>h+OAY}H<=t%yY&h%PRYPomU^Qdr|37IV2j_p27R=~C
ze~mymt7b|6r?g;$rISL)gu+M*jym3RfA3HCPGO`455b-lFJG6xC|AB_vnRJ`RXn^;
z7Ovq2?x4T+r{nn^2PP%khK5DBC1Ccavps!N;BY+EG-rruR8CoWMdgFMnv?>J&|pMt
zUWJhsI%sRVlN!>SNJ~30`_u6~<9>aOO@pIzU*~Nm7E?ce89=RXY)UWfyqxNX%x+=Y
zZk)S6)b}kBN8himzyG{bIXjOyIbc?uG<xEXp0*Mktlp>%`AH?X%{2+{kICftl1wN@
z`z3(^?H*K~KgBW-WhfYLGNh+D<a$rn-~L*cM>+F@nNv)Z9<P?KQ~+}JI@Vf6iQJiR
zj6MZkS!5YWHy3JO^2Sf6PL1^A8DgSrg9evD<KIXK)|4Muk#F?p<KJ~#v~E^lvc!Q{
z#0=HNl`Gm0&o{T2n`^cPf_KJwEw03h`=VDKgpan=S&LwA>qD0FUCUdo==jIvoPO=i
zS93oB^oBf=o`LHm4~>8_j!<18>`Zdd`zP;nye_pbjGKS$89XBvbjwOQc`%%QYe&{D
z>wG}vu!K-JKr+lN8vDFM%RT!1GjKFwD94}P^WsXHI)MnCa3^>+w>OOTyQW1!+&70N
za|4Ee3}iw0%KP+QG(62c!Txt|l>*5svEiW{tD9_&byz{1k4Qbd#v(WyZ3g|R4In*H
zjy9^e5rVEgc`<UXLF*KcYTs{BNbMqq;^p}mvu$|)P;4_jC(<oQjOQr%kaPn4QNW~&
z|A03&*1+2;K}@E_ipCWC2QMT#QkpN}$&E7~RG{`cCi4?g^?j`JsJC{u$3?Jpjz~O%
zS+dyGwe>xFe9!<aG~9qMPn7=<9~R$%ZCk+cWudrGqu}~^enw7>KrxjbKerrgJjAx7
zJS*BR)X;y?PN1siFsi(cNy@gciI20Cyx>p<zp9;X{~&gRWa&A&=1X{xL+$l9@BOeg
zsWP1UDY^$D4Ofgto28>RnK(@=WIsfjkF}78cI^;*9OMCh&HdIR5g+Wf%0XG2_VYi^
zq8+Ox!{APF0E;s@4)wBWh2Uu`QO^VZHfJ(YS(25i8y%96e)<V;&6jU#`rrZ4Ko-}c
zZbOX&DgIX2&*AvSSjFUq7HT)*hchfTBcX2)Zj}o3V?kpx8+8wf<(bF$rsr$x&WN;R
zNuzWm_8vA6y)o9}om8j(c8;Ru5TR<xcF2A<|6z}?0ng@1o&=FYQ-#G>y%@))74zQm
z%T>ot((&bcv!q@T66~k0bph<!9&0EHr{IlvS%&2?7ke&mG%)4ueGX?y^3~=&%K<vj
zc7F27V~65*b<)7>GP5=N3gcflgf$~MtJV!~-DC+{jw-XQ+tV|Vr~01ya$B)nqO#T_
zmw6-K*>S($xq@HhlAN;{1o(YQutfu~iBkS;e;VkO)OGv!2*hy=+V63^?K?$mo|)i#
z*od&JZxgI>QEcP@)h>LJ>L60Fb*v>y$f|r;5U#H|4mG$1Sc@%2<O{&ZK|IA)pA0#^
z()i*2;8{|tSl~US4XHb>4m!KzFrFAVN&i$j(=&<)rWrW5YJD%YS8oI<ZeDMwfs!)=
zP86dO32w$djO=iSPKO6hBZ&eEp(S*&5rcWeO*TFEvHx9Kcx?%wQpEV-|3bM+OaOI-
zGJH~1X7JbqTyZH@=Q#tgaHlCk+#ysz<rgnFl1!sbwyBBM2UWgsCgEoCbO>S^slh_Y
zPzUUL^qd4bn;I#{TvlwFY9g<TT!CdDtmsXK?i&Paq<O)tY8|{sc((P@jcr)l9QcQx
z?Vf_8g!!oBqeg|7H7&UA;15FxwKUbK)3Y6v#3j2%b)4LyR^)ahQx&z8ZGzI*fATg2
zdK0|Ah=!~=6wB5)%lN1MO5H2?AY<R6Z5jTH@{XriLiAyO5Lq28NQ(d2hMI^sUkp0O
zqk6CWR6xt`WHYy&WS^fE^fHpIJHHBGEBAs)BgtvDfK0JO=(Uk<+Mnq{#HP&yt3^VG
z=|_fi-)NPOU{hH=DaEnty?FkMWw3EOgf+ilu{%hkpfb3m&Q-7!W`|#*99>#cUwTJ}
z1QIG!6u*)$Rq_sc^V&A`m5E5mTOgjkR&)ck<Ib!xH|<;T(Z?@8n{Jy*C(f&WOV#mX
z?R~dKgEA-epbq1meg7-P;DNA*W?cK6<zvbPIjsw=RMK9ns+0wN#|z4AzZvTRnnl4_
zeYHZoIa}7m#RnA^>J=hA_Q^EH8e@%=4eis8sVT->$BioOZ)QI+Qkw9RN~-mvS$kZ(
zQ%s(Scv6mOO}qKfm~v{)znIIO`AnO*!seK+vO?P9X-u>FFzzk+&d!v#X^I&~xunv!
zm1&<}6z}NAnqHj$?)H0{vUcwqJ^63PsetD+=IkT}&+y2mgT8~;DMT2QNKd*$xM|)q
zX`#qy@u$LgQ{J;WpcGjZ66q;5^-CX}#k>X9getSZsrD3I#MnY&xs@z&78tluj~3%e
zXSc9_d*Mrcd;vDD+14j%QG78zk;wckumEr}bR8w`UzD}=!JP4l(MR%h*6Hn-sP&O!
z;4jdZyI>yA7D5}d1ZaEjNBZXLF|R-SoWDk`<=r;N{m34DxD?)h_PlYF@iB&;YOAsT
zLKfN?=U-nip|eK^08K+GpA{N9A87i>5N4V^Eq<b9#~Nycmw&&Z)YAEorT{co{qbp;
z?&+by(hY8%!qbXRWA+r=i@2>P4b?-82k$)rSj7L0a`i9t)C$Mncrz$A1gYkLUzSCP
zG0wKOr&Zq9Nb_9dl~caq=yo3`{r=lkf(M@M*F0Fhx2^0qtCw)qAK!!1x!19C1H0+}
zkc8fo6Cg?O5@yM9jxx@oqM^U)m;4hE`#p1u!#ZT(i1lZZ%KPo_5-r0Sfv(ONms!oG
zrRKf1TLyXNu2@q`waXvZ>`UmL(4}-$5W3P8z6RarlSEb|nz<GZKo2-QWy;}Xt|bwi
zwj<7x_YmVQWwK0yCTq>}RpTTT);z~_?6M_OITuelEmosEUg)6iyEGIR13u2<Xz#PR
zv=VRvmdV=IamdsE8o~Qm@^kZM>@w_@mGEO~FMvexdf52SPsjvj1aIPc+*rYy!KQ6%
zMZp?K+NH-#(caCD4jCNSIEz+qKSYm#*qb|ut1pv}trNa4Uanu54F1l-KoPud%?P^I
zf=?%u?l#MAucTEw=+Zh1cV%;zC!2!K>J)$9GeqBrjr}2MOb9z6IJjMpKwMcV{=tXj
zD(}BU%gnQfTy&z9ex!FkIv~eE-{!Ne+(<gzU1I;C_rYLPF@MwU>jWY_0|^auh)~!h
zQodwYfon8D!eT+AZ!xtuO@?M{CIdf=F<x>OBuEjwDjCevtjY($=J)c)7~@UT!ThJe
zr}QD>go2N3l(szs7?J{{Z2~jFp4R3eR}mpkQGqggAj-`UV(d`0<{-u(fIY9a{8a!W
zMHqAz_~1ntNrRs@ik*CbSXB)020^HN6=Hcsq-Gv|A3xlnIb2=YnQT2Q9vuFXKcZaG
z+1DoG7B}J<A|j^?*Xb%^nm+uLGg4hS(i%njmLW3Q%R_TL!aFd+f+5NTp`PMJkOql_
zG=F}n6X`V>wfzHQjH9FDyl93ZA`5Mzq3gKr%~6HnHkCFkLC$*jcw>T|#WdK^+H*v=
zGsJe~;dk-dCUV3^PvRqOc-kUkA5G!oRmZ-bj-B0z4V%Kpj88A3umZqwOILC9fH+l-
zxOKvK`>u!<Nc0XOE_prfs5vfWJ^uTCEL<`E7b+&-JmJzNx`rd+b}->LA|8#1%omHt
z2n?=Lz<pF0K@^yLkL1rj*z$^mQXrA(lH|rFQDBc`3I%3raa+<!WcPOCJV@mBcJHBx
z!6b@b(i0OeBnnF>@-ilqW8%c#Ze7)+jNZwwib=(Wl6kC?6{C`OIFg=A#|YShRSsP5
zN5zn|q&&QbPSKHe=e$<INDCOR8>1^kOQw=yiB2dw6Rdk<Mj-wnEkGhZn_W|~qSA!l
z2RTbq!6*XV82^eB3niw5)Y5;>r+WeY18phI1t1|U>GPhDpdp`VwRDOBNL&=8jy@x1
z!3z^7cK6JHM0r5fAaop{?3Rqz^w7K^_ksgRhBq{6=yRzdRBj$xY3Nqn0#%jF%*jYD
zvdyf&hGKRgq^zyl57LwfvM}3sZEA7-(qxM1S%~Y*zM(8UIL$aPyGh`|U=-=RT6TC^
z_TobJ>UH)yW6q{@&bDFBu6NEpCQICsbG(pqa-DO^nEO*Y_slT&!aMgWBlo7|U;S_y
z7_Jcv<A)PMVgK~QZ(tNma4H!%jS-v<1ZRN4nUHXnML63HoP#NkOD2!UD31@6#}CaD
zMCJ)E=H0)^6JyF3m&t!*lrI6wmxAWYAoJxG^A&FL6`2Y!Ee$230_DH_@B(#YfhNWe
zzbVjRD%6uHd~H;y4=OZ(78)T7P5#vnSAY0zj{)Fp>l~41eaJv;4$xdIBB%ufHWu*-
z7TX{TyrPSohd(_-7CS8#D-$8yKmZR=UMRFU1d51DETVTtunr@F)C-b~5YD~%silag
z&=Oz4N3z2u$v62hBaB;)F3Dd+<bg`#N{b$smcmQ(EA2}9ALQ4RmRK3-2Ven$kzRts
z*#c+upFm~r_DQi7iwgzIkJHNrqs#m^5b4PBEW+|uq6!-+PWPMg*~7>&XoWtiycJZw
zJRIUrS-x?o)@N6~V-z(Etvp;TFSipW4D|XbQ*~xk<?<dNfmNA|&#;XY!_p};RK!a-
zj1JH(|7<7hQuJW_FgB308tYdTfVp~R*eMZJy%t?fnTdy8U3~+!y_2b_PO9dqtD!ND
z!HcP!;;O}}uO38IALP{v5f`%_*^=H?&Rp5g71SW3D{`-DexdMqVyGXs+T8Q09#y4w
z0T(?#syVueSBpVc$r;zQfNE53sTEu6c$ey?Z|W4dsx?}xzS<$Qm+*vzV(*VMm{ixj
z6S58L23&eIP`5UQUC?7R2Gdq4S7sZ3-6oIBMvIZ^)h>W{tKCbXdR%)F-_``@qhdZE
z;;6D_&yg~t7+?Z%i+@=hLZ>CI70-^iIULrKSytz=)a(jC!kJm$Q8YwfwQy(D2Q1aP
zm?O~!&80$-H6uwenGFyWUac(nZCPt_CSLnd>j#Zc@+Q1qjW%1Mx|}7zP+1!+s3FHL
zy5~0Q-gRrZM*FyIN~LVG(rp`=T5H{K<*pzyR-<DMiN_<<vd>(RzJ!HT1YnE(hqRE1
z?!0O3ytD7bIqd|nbYaVN;hJ<|qy@sPE`qk?v+Md}V=SCN(Jj7C9BAu|Jr?EYeRl&L
z8k26%%ytUlZn3#;w&SLP#O`(RZXv_mO`mS^z@AwPy#mD^T)XaY;@+XW9>SZ}q?q1z
zu3j?5Uc5sj(|T`RUN7*li^04P5!|PC%&i&R&E=r?%ok<~188;kWo`Bm4dW3_+8VJ4
zm@M}jo%a8x>p2$x@*x(_fCOKi@=Ivm7kh^<^nd|xu7MAl1A19sxZ8RFivWYRzE>o=
zZ;oL;mpvh)-Tvh;k2^lE<&L*9p5Qw|u8p!}-=QZP?U1&itmUDcyCE3MaGo$ahmb<0
z$aff#HSAWOig{`)eN|%0Vcc6R0CUZw(7Ge(ksjR<v9OW-Asi$NOG8`to6opd>+o(8
zmNo~yj;x#^7G{9r=-TY){`F{e%_!a*z`!#6>m3tHcnqpECMp=nYB!YcJ05R2zTY-}
zygYt#H-5@8@l$T%%w*!icj78*;-+olZh7L*-2{Mj5?g)}*K`u!Z;~*3lBj)>WMz`<
z_ap`D6qWoGjp-Df-xLFD4%B4g_tF&G?<o$}X>2fn5Z1-#H_e~jb!gJNbPphKLB%|l
zv%NQc6BffJGb8Fpf$KRVl0CzO)kYOPGko4fDL4y;z?CaPnW3{ZgJ`&>NSMaTj0*z(
zQY2VgWKJax{w6#4t%%>F>^XYmoEU0u=yFb7YtF#$t7`UFJJzobq;ubhzcR|t?+*bs
zN5{#`=iOOBPkrb2VsSz3^AD16ao6YJ$0<SW^V24%;NK86Fv@KOH&$dSdlwh%2m?AR
z6N87dRu*#NhArM#<%v{H{lZOl?B6afvujx_Z}%oJ&wlB=z$@(6Mlyc-G{V<$F`O0p
zEn-Y7F0-b63A(T(!w^4HfLkmA>yw`&D#ow<mODcF)d9SWW?WI{&vrOnzO`L(*1~aA
zTmi=6_`_Ck{9@zfS9(_959DJV6<0Sz@CLJ2nUJfguB+oBxNDY7|KGxx{ek&^D~dR_
zj#qs5oe&Sj2xG!bVIlu0iu{Ft&t~#PrCTPN0(n|0y)@H+O#hL&`D<2a1}~)6f8zTs
z+Q8c5ugpzEB&ioQdm!k2d}2~^AbW5W1_PD($ty0!G#AF0mtRyYn4X0Z#yoNma^M<F
zQG~a&5|g=!X_Bbx?CEW4X&V@Xb_f>sjZaJ#eHoga3&|PdTWG-SOD|8Q%zWM6ajM?H
z%nEgG?SB6rv&Qmkz4QF|TIS^R_t&4~rw^u8C{ntDWv{M{BOMqqnHz5Cd(|lxnJ79k
zi{&3rx4tkCp@pJ9>{R1o1NdKI5TO_hRJxeuu%@|C5C;G5cIX?mZkZ0|4iOxAxcLej
z9_7HPr8JZOQdA?qv4<{CHz;2ZC@`iTx%-M;u_ZdrO&9lTjay@0_SU&jLbd%?5tfa<
z6H9}~3Xk(49o}-AJr<E1u@~uTkKN)0-UWRPDv5<q*2&qc_H9Ru%A=gDhGYDpcp+K+
ztc))o$Mra^0dWS8ET#)BzgMe161RI)N!*(@){6fPR8G8y-`3jngQ4@uT9JvpcgW^I
zep9t7$9m&>V8mY7{dONBw}uDi6J;y+J-_d3q%fa4wypehohZ&_4>oy8da~1#Ae7sI
zCjA=f`4sK%@~uff0L|<5^f9)P;<^!jUKlKxMq5!UgjOz6Kh#po;C<MTxoS|jr3-&r
z1iM~jY$P?9KP}1x4#^81sOArfG3kb+#y;d5jEN&(hor{q{XlI6v;qVQUMneEZ72RY
z$lG?+x_{1-a@Hcg<M@W_GjH0jhFV@bQ=)TT$U%)bpS2bKXFlkDMeXhf$M`e8tW_6r
zYnw3<&wDv5j<weIeybPvVAHnZ2<Nao5B|I<t6Ce6IM)mQf`Rwq0^X@c;Q~cb4mW1S
z`7R+{|GAEe!M~S6yD;mh|Ah!e9?^f`;41Ym=up<c!Ure^;`|FD^e+rlJpn-W3uiB#
zLAg@{Pv(5>e4719%f5bQ1zWf~@kUc$SeXOz?5n+K<08IBWGiz|Yj)e#s?cfIL1pVe
z$FR#ml{aAN#r<vy6_$!_f~D?HQN#oD)h6T`$1Z&|Z#4({ML&+NeR27G_ha}nT)38n
zXV2zm5Pwyn_=r^g(a#a*KDq5ts;{wM$E4{Uzm3baZahp@^yEJ?P+}H2@4LRia_jjZ
z;kP+s@k0K5ew1rWg+)W<O|feF2}fnGc@t>`%Cb}ULeKhbN+X%Q+wsNf`?sW#%La8N
zpJPqjb{?-u_pU@t2hB)d#fMpcmf94?H0_yjaFaRFsR{IqEw7Vb{i)eWFVoH3ed?+m
z<L0>r_8iU&(E=UVjK;lQp=ogHJ(3vsbADXEbf4yg<iHH)`}13c$EStF>@+`!8DHZ3
z)DaSW{40Gg=q9dopyy^!H_YjG7fRGAv#0D9_(yLuVXbzp$fnci65;!j_}sKLSL!Zb
z3ImS%170OLwU+w5QSR$^nyU&xkz)-91|~f;-?<_n!qX28I(0TD;UJU&R+0qyR&%@%
zyCNg)2@KizwZ6}<3ZxVd4c!&nAl4aFpaqeH`Z#YqGdCb(L<WYd+UAmugguwvpJbQg
zi6A!yD8UI`B2_Fmc;ZnBJVusL!ZsE<IfO6l(6luquR|kf%Yyo8ZCrRvj`Qj}RKvwO
zEMsT+^NGg!lOC1+aMVk|4QHxpe|hbK<6a)g`h8zmB0lJa-(9|p*u!u|y$|5f<4h5z
z6xA1{+yt@5!Q714L#j-AB$2)V0Jh@)5&vGB1~7O>!EIah(gW)`c)d_80$8Id;cC_=
zmo8cdzzABuGIpm6so~xgRu=G#+0i124BjyjC+c^}%UzNK2cu4TiCJDG#rTs$<EqfQ
z_-_trkNpD2ycS=DeW%%$-&+U)t^UeA8QJ5$%otF;qJ|O1nKlcnfkXJt;6BFu&t;th
zjiqSNc?{W5rF+Pr=+cKcjHCi6iQy>{uX;Lq+7fkn<>@4|^@4iU19fYe>NI3Mwpd)4
zrtR=6(85^}^`L;D$Kp(0+EKBhU!cy*r?2y6J{zgx9qMh}8!t9`487Di)DSV6D+8q(
z>9!xdzMY?|f}R_`|9oH|Wbm~P`M84D)Sh_hP`|DxHQzOx%k=1Qu2uU{6=+%LUB%(s
zaO|(JVAk?i#P&nIGI=G@g#wne2L_6Y6176v$LvD45hE7*1<-SD>)-1O6CWSd=Q25B
zQ`;|Q<k7t<CFQg?E}NczCfF#QCF1zp&RA*VYb0_-MA?TJu@?NGxyO&+<;RC*2`<SN
zLbU1qEU3@m-m}Zx=@-<WpW3b*Ek0~DUpx_QJzDVyrq|fC;`1Jf8UOW6pncv%)Mwye
zmAgAV=V$hJiKC_b+lz;tH)DJO*4yvcQY5<0FjQ2R;knOTUd=>i&N|E_(*)1my95MJ
z$;ceuW2qSQs27Ui%akvZYZ&y(tcykEMs1M8ukZ!UT*Qq{;PguzU&Pt?;sicyF|A7t
zv@O>JgET|r+;IjkX<UON<wDrGujAFzy0I-@><AiP4;!!*RyB_9+`lZ9A@diP&5vc-
ztH&ZI5mSURcI`^EUXMA)*JbT#?n##|2y)Z?f@qmMdDz71HY%tH?k(TL9oQstJ|;lJ
zxCQpr>5%Qd3Sqfuxh?J|i<1aN_r2{}oA=mP(^s+e0(@~TjMPlCvpf$;RNKR~$&o#X
zi&OZgZo8Qbrmr>OMWyd_jvh5HW*3j2S3J}@GLu}N5523e9%!<sXShZ6c68N#7CF?F
zV_wi9yQqJsb*$8jvt;-BqLJ3fQO87fk&ZzUsRBPZJ7-!p#XZ0g1X_qSEctv1m!vt;
zq5$1)tor$1BCo%Z1mIvuSmT#nKqs}(1fz|<6p3Ei184i^CIeKGSA9=jySTkuo?#ZX
z9T0FiiHv9~!27H;gxTv1rvqRKpnHd(uDWW-tOLY6JuA-T`=AdWIY^UVjnkt~+~lN%
z_Q~m+hhk1ttlQ;wk8h-!GRR7-H&_mD^kha#%+9UlS2m4`rROPmMG7=5FfV)Atb+4%
zH5e<(j)0~f*EF!K)%4Ig;dZgc$|GY-egPzjoX_Ol@0f|7lWTgvj`y;n@mBuW_MLA+
zsqGcwxx)9PCweU`>`fy$3cqw@-tIJ=d-B_}oUKaJ?~R;ZOyv73XL>5GsN{xywZ1*a
zRFS^<ncq5xU|rHi`@vYNeb~+vR;i`rPpw{6&CPe5b-exaGvl3TYqI?2bgsX{$&T+g
zpU$I8!9SM+PrQRZ=icp4`2Di_^!u#!-EVAr^zB|Q#|d@Ll|gamAA0T@^snz|^eln+
zCP5(XJ~jJR03IZexmz3u5lDt07Y+#|mkK&|4m_R@q=5wWfu$G_L2L%ZbW*;oS3x{d
zM9SPjypUi%n@2y3gYSD0y$T5yl?w3%NN}r$NbTd8bB9QyLgXnz=pg|LQlSslB}7z1
zRhw}X`GcQ9LbbiHeR@M)N`>h(ORA`b84P0UdW9IG!WQ`+<8T1}hoXpAxcP3FM7poj
zD^Gmq|Dh=2W25PM#r_@~={sZd_H(3Usy(JFqSqVw&MGny!j<sV22&TIsf`TnkGlWa
z7RDb1l8C0JMQdUtv4E6Fb8vL2fu6-hbOFQ?(-jfYkAV|@Xts%=Ym8}&H1F_=c1OMM
zMyQrced5uN?Hn}2#BNsSV#f(hCm}IdjjA&Y#B*M8zpA4K;O`b8lvG`DUxK1{Xi4L$
z0cL6cmANsa1CRs?3`o5@tmc`xVET3CHbF=l7npF3V0K}M&z(-#0D!U7SZ;0Hrd3G_
z1Hr%+R^pauQg1LNV<J#2k*3A?(kqcc8qCJw$&x`vagewRPuxT?Z`&BL+9m-r63?!D
z22n;L2T54K<hv`w$F|AW5CBI;(o}a6&rmW$NupMSp{!cUM0oO-$du<LDWbOM6uc4x
zHDKzO-Q)s}B;Plw`V01&YG7r_*iYvvrrybVK)&<lRE$C<@13@8{nmacP2)QG6)>Gn
zAYIosw!$WTQYXoak=@BVu4z3zV2C|P08+0A3G?RQP{UG;f=Iw1F#??Yz>FyAj2E^U
zog5jE1<r_)jHIrNY;P`iAT)&on$O6cYYX)cgqE~$mkmLE)}d8~JT(HD9~3hi4tV0E
zDVh!OG4hzcUPh;MW=}>&|209kcb1uJ=1>dH$WYctJ?KOR-jqPL(`MG38qR!Fwntv}
z5+lyaLADJ}&c*@umRgR-Os2VajyO2yFhjQQAZM8|cTg=?29SGUh?d)p%H@US-ZIM1
z9^{GuU|39wztvzI<}iXqMPMmx9mPco%B3)ZQQstX7{d9xVD!+Z<fU-#X*eY#fCGum
zBAEB!b>6+x1b$GmpgMM*4&HwXV>-^b{}jfIa6=giJO@9B3VJ6P{@(~=|4)k|GNlDZ
z=+YukDFRazL6(*;mR8=BRx_17a4x82Vy!nSYc5qKs{W6n2vd2FOnIMCIVN+{HJsA|
z!cLA#ZCWgaWB`t9%7rE~I!?<=WT4ov@>wG6lBm=bJM1cf3KXccL5+69h<$Ik;=m58
z2Uz)S7;8YS@&^&efOo|?l4G=`;yM}&1+4mQ$BCAyz!JjRj;j1!nsaAV{R3EiZkKxo
zt-6h>`o;t!X09SQtX^4!Q8HIjM^}%4;Pe_5tfe&#f_bdQ)$bnAd@HGChm#y1))LkL
z`Go4I;6MTUI)(={csi9bJ{}ojwNIESA2HWGA0d;{s8-Raf2u*F(2A~)@FaXj+<>cF
z|9Yez0<L?TNiKI=Z#)8eYG40OgG67p@l7U>a*48Izd>-YRwRZ$ud8u&GFB`T{*jr~
zN><l3hR7!~SS`jHj14%I`YUtOhz;Pr7vpp*a8HoVWU`4DK@#P|6DLF$DI1r03O}O+
zWVZm4%c3)2Ex&YI5;j^qT4Nv_$b+Xy%Wk}R2w`aqTe&P<I&ljdVXOb6)`}RL#<HLY
ziq=(lYvD+%yD?$c5^K*AvN#4A>fAP+*wz};GM3poYKxpUCKzXCos^}+HgCs*$9jO<
z2Wr}FHjwi|1e^9Ot~~CabXxmm2@YaH+|1kCGlNbuTfLv5>CSFDK2iJ?!x@Q*aar#~
z3lXdmcQ`9{NlSI+j*vV;byk&iLOsgPjj?G>n4G!*3wx37<{gtLe4^zL_w|m4&fS&-
zJ-_%MBzKLYnfRP?p{|qdeYejI^m`>@t->>V!<Rw}BJh7Tcc-JevC2tt01Q87ZE(AK
zE!KOW3*Ds4SnN7|-alTd#eO0^?NM#+xzEw>@w8vPO~fFppGvNetE=C2qu)cYPsIF-
zOVAfvIRc(oY=<^FC*NYDEH$@Sy3d-#iY74++B*5b1C})dpB%bAv|$Ac(}kK0x;S_7
zfCo)#20a|QUYcNmvuKm#hMYNiBOI{Og=sTJ2c6f^-Bu2Lm#_Q%WqRJiD05k8;jzV@
zB-j;gG*u)cmUrzeVk4@$Bhcl+>^lHbn5J!cB>%3Zn}w#=VI)qjWk8N<sC+bgeUN@~
zl<UW6-yMFzGRdq7<yYS^Cyp_i>M@$BvB}sm+I!<9PsewBKN13(sRPG};p3~L_(WoF
zPLIhk3Yi@YkV}zY<nR*FhH&nhpaB3cm&sq>AwDTidM?ouJN6h&PL3|(-z^VNv67vU
zOwo@$BypU=Gc2)(0jQd$m}@4OR#@3c5jI_uJlTw-UDG1pCb?K=9%TpJGo7(=o{`eR
z7iga$JD72T&nU{zDrKkEE9SkZz`j>Qt+|4pm4*YFXy)`-=iap;il0&fPG72$mcAXM
zF!XzQBwK9SPVvt1<$IB0%WvdXT2Wi>UtOSIf9rhxvHjJVX#SLA{+rVLC%gIYf%C@&
z^G?I_yX*7&xF|<K)Q%!*`vb}$8nq2WIf|6VJCcHbYsIz~C7Y6_wrizV6lG|UW>#or
zXP3!m&lZse_3A7JQsC$NEmn#USBZF&O)fT+F4p)hHD@m&+n3r_mO6efb+In@$S?Pq
zE`RY`9*n#9Yz2EHdwKl#^5ja$80$*Ux7n|LE2wNLELiVyoKPxD$(L|~XELkXtObpx
zh>aDs4(`$eEqBP`s>Wr>Y5V6KnKg^I=(YC7iW9$*3s&#U#Wl!$3E%{?vTlFFx`sDy
zN1(liowIhR<ph&iZ@RZe*0Gi*xY0qsK^wnL>a<RNU&c^o<tK83WW0nS-k0fQgN|&P
z$A9e&)1-d+I=i;C5eQR{n=^IZy!9w#$85xcHDpxmh)*_OGud2rcO*+}{}Cx1cimDw
zu~ye!*O&2?h~ENut)5*AKXKYQ@r>0URx$J37LDB5y9Qp)3u~{2d@##)Sh0Dd9U@)5
zyCg00M0=%7UPRP-&);0cwsOyE(o1rF&;LIDeC<w%0)7a+h`0Z~>AJfcW*~KZp9{7h
z^=CKfKJlL3UV3Hde(ioH8Oa$JdOz1JG@ETdv7?A9p7NEIXt=^5zq4MRvxtM1m&Ix^
zuo^H3JwkRIwT+j(`hC<CsyZirl)`@qx^aj!ULEc@4&(Qk=JU07I`EA?uDz!joMw%k
zk9pJ_;45wu3Sv3_$IE8gC<U=EX2rAG?(0s6o2&LKm0s^4_bVzV#($i^^|9)74x`PE
z+@U8dW|Ka)B7I~BXB{jTCr`OeCrjTR?ENYFW45{DFS@8uO#X7a`HSD($>~<driFkQ
zX=f2_=QjOI(O|xBDkDFxw8egP)VrF63c$X*rT?fj3#<LJZ{vR$!bT$Y#P?X?mk{6q
z_4i-=I-265XWSGI*gu_dRBNB`CB%q)4^brFwr`!o%-d<dJu4an)c+3H6+ayd2CT4N
zSab?8X?mC|0*rJ0WjaqoB7{f(TsX5|215=fCxwjy;`;m2=l8bsazp=}WBR|<8q1FU
zl2|inKbBT<3>%%a_PaX1J;O+>kjpOE$vxp(lD}(>;y{w%zgax<!IuBzm}=gSA;#UZ
z>T+sbb8dQ1O@YEJZ2m2=24dUEkp8`}`FHj(AsiSYi4Vrq8o{_2a^GJp9&`NQWa^9<
zoCjr8Km=xmiL^+fwy`NbiCn3kE48_+Dl@OI|I7P=cB&?vRwca3?&-#1(V6)g<eWe!
zYBj2tEPG&k$I@tMu5paXnehARe=KZX-`rw2rf2{G2L(UHx~!*dV+Q}^x6EGr-Y*%M
zs)-shpKDM8AG(j8^(W+_C8B8-PT@_?9IujEBY&hSv$QHN>Zm=86{ly_*iMOp7Yy0+
z+Y_Dl)mjy$Q!AWiNx$BoE)MbilR{TtGN)T8ft-cW2m%Y=+A8cHp4%Ie>J?*`F*Q0)
zIU>M0sZ$a=%dHaArS1KVm2*wb4~9||=|l-TIR==_9G-nQGxVb*#$!QIP4~o-Yve#$
za6b0Nv-d`~8S?H7C*XV1=`JoG&a*s=QGS6uADBTfmxQ->dq}Uc(R8NCGrw|NqjuTT
zo?~wLwKo|<D#~{3b!IV~evfJS9EqtlKJm@b$U+vK($v{M>B|<oxjf~4DLEneXSm$#
zvt-jmXXnb?&eVJ)`tu(@c+Ruf<6W~L5($1&Yb>H>!XPpkXO7@#ekuJh77rWhK&ofE
zoQ(7qk&)rtMf;rZGhQ%oanZ;a<VA(U5SwwN<Ck2HQcRI+ruR<fx4@?d&G{}$MrYjM
z$3z+1$@7ff1-uU=r1Dj@T=90&rqrZ&xZj9-@urcY26r+#ysvixb>gF}9vYhm?q*e#
zwCsjD-UqVaxnD#<vOR;7?|s@5+24a}VKHI8m~OvF^&^*Hi2=v`L)H90@}T*GtkMER
zAq6S2I4e6%eX2OkVllVKE#vU;Q)+PZUUGTP`C$e5GkziN(w}eb4V&?aiArNG?AEHx
zfMpJhefV|`Xy3tS4afEDhsZLni5~iIuVy`#UetMhyj^Y7@V39-Y#$xN)*_d2B!YZb
z%FNa(-m)ap_G*}zt(|*8Lj*IYcFWqybuBB>B};V7+Re<^Cfp+`=*!wmBwa4t$EnW3
z+P`EVEc}Jaj)Zk!&WlBO5Ig#gWoQ@@D>Qsoa?CQ)-s~$hx;qrhGFFeeJG2Xn7p%v1
zBXJCxsAQ@*L%a}m<eyHK5qTW=>J#DP;y2cDZ)ddMt(1H<PwzjUHnU{CSdfdWa9_~P
z|8}8l$2`_p@M+#uYx(&^9Ad>cGq`CI#E!|VDBsE3t@~3|N>PM=kMhcmQK@{s)g`Z8
zybT#qlt#nT@-wdY1RcnX_i{p<ZV2-_m2WbNo5-FWDpqwA9@Xc+X*jN%uk^vI_6(Oz
zX(f1h_O0`tfbVI$wSL==fukHb%Mt2@wqJcJ30r3kPdXvz@)j>!FTz~{+Ak|Y64I|E
zlivBC?^hu@4t75+{)znFi*ea#zmkLQDmK^Pe{#2SEA9q30ZHcfe5g382_a8#ZaC~o
zTG(-ZZz&E5=x{#TAIEij{gjMlJ%ob<PN<^VLj^qz#c)i4qF&S@j@61i2kUs)PkWgb
zPs1OvsIqtr_OjiaMm)iosQ#zV$neL4=6m`9Qjj379-VMTRj!8+!WT2FH6eN?1O$`@
z7}CD_{TMC_F#P~RR_x0&>&Kk=Ovct<rgU85oMTOx!+v~`TCDlxww=iEeNaVimr~8=
zIG<zXLPb%*1ssWM%qbeAtj_y0@s%-8>LKBfdc1nl9<YE{vIX<5iAu^M;kA_W7SM_Q
znc~LDoB1eeSieXwwN9o$$U1}Fz+xn&esl+9zM%T@;Ac8_&5np6P*dFXM{3Upn)@+B
znw&h;$|DXR3CJk`D7jY|eJLO5MP851naohM-z7-I9RTp%A3j_YR+6HAs4ec=ot3R-
zji_B1C$qz1T@;Izo4-y3#ZM9AOWiZOVAKle_)dH}Yb|qaNExE9%k`aR-;hxKWyB#l
zn(<ng_=T0NE+8+EnhMCD+%Yuy>T`XFr7A+1-e@veqKcS8Bv2h*t4oBO4Kfb2p(g?B
z=FHYVk?gl+R8oJHrvC^r^Q%wO>gTIJ9JGPvleW^l>U>F!XC)0dcrVkZU*DQH_`d_I
zVm(uzGcBzx$ht1QQL1@emqb-jsVj6nOfl0am|ylI@yKL?BfP?{AHgzLb{hNibrXoH
zvYP5xBkujY+IoX(v}rkG!J@%qxeNKkRN?nNGLa*B_v!|Ig&GWj-gYh0)VF4;T7|4H
zoWdl$`Vsbq*|tWo4*mZ{+grZ1{qNhG2@XMvYoWM9f#Ocl;-$qMiWV*I4#A4MyF0<%
zwYa-GrBFPR?>_sS-<du0V4lqXkk57Hy<ThGw`*SP3BmKq@`}K1lUAjyQPi~dRX;Z5
z%k!`m>b6exyTu=S(3~?HSCzF(A;MP1?enLDhkj=L#qUEz=Ssz^?LlOJ+a@YT90R}U
zALTZ~+K9F<E1-tI=HK77!bDOrG6qjYt_*#d`o1qZpUNv1f56jSv8%t+yQJ0ZX+a0O
z1phTenR-LB(}?1(^VJB{T*rp|sv9coHJUq|+)Km8q4-<SXeBCzbLh{vNPPNK!0Gov
z{hnHJ2glZlpryiJvBj~7IT1bDg*`tp>SFih_Q;NwY%4j%#L*>S5o^mRyy3Q5Li?Wc
z8{#I#5sps|^Qfpo{6m#Tj>%n-tEe05R=Qtqc+<(&TElJ)?UQcOz+~}zA+%k+0$ln#
z6^AhF*?11~4s;Gh@95i1Dx6T!HHdKiNEk$76EW#jnEZT1CI5XUZR1ZYj}!z$O?xhb
z?nf!Ao7Lx-#~E!C!*aa|Q;|Mxs|rk>N^6YcryaY6w!8P)!s~|``B+OmSvNJJyrQP`
ztJ7m_E}Q+cBHu(;f0bo5-B);@n^FikuGg;ohOFBfxuh*GP`kF+J{;+|vU;58^RjfE
zUo=MPEdC~FipOEKTpJMFEE8(3eu=X4WA@xEB=~#sYHP3NL%I%Pck9db-Yj4sb3o6A
z&?82-z@D(bNd7ieQoTYVL&@U*Q1A`X`Z(H9w{Jx2JPhf4Kc*P-vZO3-Y01ZMlF)0n
zp<8UBc?;_v=G5yRy{qN}9}qYfu*dCYo9oPG>JPiblUb=3KfYDpaHuxZJ9Wo%D~LL;
zuMYH%Rzc=ni1E40r1r9(lZM^GH>C4i*Ug=Z+lbFGUBSDV=N{i&8!j(u+mR_Ezp%IV
zp!?pl)U_NsG7D{yieB1SdtS#Ew=?}E{V_hJdn0im6y^I`H6BP2kLo8>^)hfjdnx}1
z)u6Ra`_e<DC+q6(d+&3oo9Ei@!%dsA`K7ln=Q?s%RNvR<kw{-J4!Z1nb`zhQ!h5g6
zQ=Y@wDU(}umY1_GpPHJ&j=!!A-iU#PPrJ>ZA1Y%s&Wc6Br-z-t)}XI6g9fh>`Mxh*
zF}~2wV_#^~qVFrRU$C<;+%PFr#?Rl_5BZ)1wZzZ5*AHWf7z@Q;{hdGVFcH3m|6a1c
zg(N@>?|-p)?va3gUKA+e#dz>&-2tq8fi&2G=0X14ngk3v9=G*@ACA2EOSpxO#JH~l
zuLxlgD^Ob2TW%?cum<q{D9F)CUd1g??Z{uSHt5bZm}?lM?Z(PC987z|eWVVUzz#On
z<iD2$pykk0i@h~U2@#eI8SBFaY=zJoQaCV#^7IM6{}DRQL+UvkDxpHO5QyYA3_rjb
z7Q}~Akgtve07S|H1D3+_`#!iHAeyHD+}z;vIKz`P!^-=x;Q<juS5TrNq6py}-q<hz
zDH4L`PZ*a6zJLqx!%(w_5?t>FpVSAi)zrYs1-EI!>pLmy*aK{q!W*t|VG~Do4ql5I
zz^JA+=C8;}2%JqHV1`c>7PKBpvicFIqZmdpPDgDli5|omyyuC|-^18*i#9OgLh6pb
z4#K!ZiK#GpkIWH03sIYeu}e#c2_yl{C}fMUh;;;r=>%w6ia|>RqcXDI8HXTRa?kk1
z;w(#L!dY-6M*c)VhfN$Qwpo#5!!+RI-Yv6*8AqC4g<`tPHDkvyj?j<w0_fa7aPr5$
z^fI>c#Jrb_s=106;Aec$hzOzvN$|(Vz0*)jO5lz|Rbqt3Rn^6)K71`vNyL$(Q7hCj
znUBr6LDNi)6*>m9Tk?J_jYkZmJ~=`hhD0^MCt56XD90I4v<RkPCjrChb`9g*MxtV;
zldojyKOYMx0a6a#=+ONEX6^#M#L4*ev?8ctF@`A{Zqx#e;b1MnmaP=>S?a%1v8k5H
zk+Fb{fm9(5n&JD1)kc&A_b4lVKo_5Mg=HFR{yS4tnTS}AhGj1D08HK%>2R?$Nk}@$
zF{O!Fe6FP!Y*z`&G3!4j#t+B{rvU(CvHKn}SmN+7)Bu0@Wasz+$T@hhtd&BAG9^_O
z)enGl#kwq)B^Jvl9iFv?igaO#&}j^gNysw6hicqvA>0Aej!<F6V5FIa?0(tM#oVY7
zEpa%?95O~sq){+8Dg`n&VhmnZ8lU-&N*d1pPu;@^*<JU4bq_s)+58ayH;d;prIcPo
z{Am&FkzQ!sioq6Z_Z_X+Ap%@-Q1onG>}sV2AOu*g6f4ZydoY#Ab2$WCl}O|}gqM{d
zl{)yHlw{&LMlqG%%9c)Amil-&1`D{Poy5=+mS(pSNqmKM57Ek4zm*j~;wcrEm5+W_
zqA#l+E&F^}Rv%G}^sT&k1@vvP^tq{g%*~|^twK8YN2`3r#~jz8h>Dt$iqz2xGJCf^
zw8{|=w=wxj9x?aDh)R|m_fGAcwUx>=-pXxlP)>8@{$ogSXw@+qT;ovHc`L9@rs_H^
zv<<oX)(SWjTK(XG_N2|7wNkxzgZ+o8ru+fp*{a6w7#p>`#-_h!>ZHc!4+bK0?d%OU
zhIMUrU@cC0tzBQO=Sl5^WQ{*l-4c8qok9vWsEScXnt8R3@Dv-^UCbd^g4qLL(W$R;
zs^>1RCpgC7JFTY%V~8`ucI6Gyr1di@4RXvvv)#}JMN%OJ(nfhtkcvWMo@Jw^PGhZo
zqt0nv-BzPPd8(0MlWsbyvCc=*B{SG!mT0=3W}(rcp~+^f!JgT#CbmgMs@dkr`05_b
zgISU}#SRr40t`nB(GmA5H@6*2wGeE^_zLMti%W@xU^YM;7a-B@s7cmhDd{blr%_4R
zt&cY?si#eZ_RR!Hs0BKrMWEI&q-J;y86}mrCeJoVdRwb!8+=X9{0d6tlSs8EtPIv>
z+dzx3)z;O9(o-(d2WsmuY&Q>TA8l(7pKjl~Y42A6&48p;0+8mdJ3{?BHu5{B73$a1
zKh6oNM2K}RnRKoSq8u}SJRR!{+v=Q!hjvYuBi*D+-CB2r_;uwLcCC(qgcrLOe|G`a
z0B~MH2wt81%<w4f%xLJ{7%W0qWL@GMJ#}h5ci?)mlh$waEfU>5IXgXPo;_SBNj~Lp
zbT*6(LMlw{y<dqNB=38{Z~8Xp(|Vi}S#{y~$QT5K3dH&Q@UZ(`-}g(6_QtPTiwVid
zxA*gqwY@<fP>E|-8SUrw>$iS0pe8i%p?kn!XW(PmfQDE5SF%n4w4@K?aK=KkrZxrU
z?QnKpG!D9hHqUTB+NoVxhD6r-`xh|3Jkw~}6uOh)3N#I|&kV^34AJBaQ}qt}pbsiX
z4hB^Wik%Eo0Y=`u8<F)G<{BJ<+kuW`KMzq;j{XrJjq(~!7aEpR8@4VRK=SIZ`b1Mh
zHfGo!7+^C}9XaBLp6CM}J;)uE*X}2$9G?>(S123l!I7u(D$McXHgBux7Ml2`lOk<1
zVUvc6rc$?((U_bAFu9$O0i*7Gn%pOw+=!esd_q|tpOieEECWr&pP*cRno?q(x+j|g
z+fP1aOh#-?K{KX+!c*`Qq>+@<$gGXwInyAF$>6PNto2C@%3rvO6F9chgi+JP-uk2+
zH3Toe?1*RHO-Q2|I?#3ql4Q<A_sx(_g!AFezQ;fT#Rh!vo~0Y^lVSqE^sqX4X-g4s
zLblQ(nd(w-b87-~hM(t@^PsbmWpi5nb8<U#5@_>kpXac&sXmhze94po#Lkn|&5Nzf
zFTR_Xdbc1dztCp9AQ`YAQnpanyCA%?AdI${^KOw(Vo}IyF)3h?H*ZmJbP>F>$ON|}
zz_jEqvBYS+#2>NbnzuyVyTo_0WDU1W@ot${e%ZiynLJ?mL)o%=@3N6?ZH_lhUgdnj
z`mD~*G8;KU#rjGO`ReYU@jAWLrp#9D`kBpfz<)-pifa=bv!fkrZaKB%u!xl$<v6@(
zPH+92{Ob6LS=dKRg7S6#yj9hcb(#699dgYV?TzBXnj>2s%(jiL`3<M0^`YtYYj2IE
z6X?by;${fl=AhW-lkMhQ#HKrKEgYuS<GICiCi98j=5A&cVzd^*<kmrEHP)*Z&g&+I
zeii<OHevJ@pfm4-blID%4c;<D(LoLB$qoKiM0(6}B9U$G6;##_Y7|-9>???@-xGN-
zcezdw`J>BqlDGQ1^HGB51TJhP*wCaz%+aUQNWbd}k|2pvRIn@U@TTRmeBTob-+Nn?
zXJojet+X%reg6ZA2Engn<?ni`N=WM8#pFa-6ebUhd{+HTkZhF>lb7Q5|E#zvG0F2B
zdQ%8`WbOM?SZ4zcg4x8q8g;z%j|S`y!#l<L0mnZlStAjT64`$C8}3B;tnP~)r?Nql
z(<xMQC;7K|GzzN(iYJdsF9h*`CzTgr_`uUzwusT-<3_eqyq@D05iv^f(~c_mx3$R-
zinH=z!;<f3w*f}qs?IP1bE@^vCMWT@foHQ-K#2t06WVis^7W0^b2pV)KH&>mz8qa~
zkAv>h?Mx-jiQN^g^R?*w-_9$lGv9Xo&w^eHZZ0S#gNRLY--KNhJYg=}Zj3WTT|UxY
zohe-*vd1zRopZEazGcJ1&R)f)yZ+$AebqUBHhD>n?K-}(H?VfChk0K9ooXTTH&fSd
z7IwttDnp{ni*v24f%;aO&8=6F+&cJ;D!dz0Hu{P78wba0UiO=5M!^qI#XlQR+NrQV
zQq_MblnD#s|138AnHDEJV*8<NaI4CGn<RNVWqLd1KSO1IY0!0Rw0T=WHE~(RE6gUn
zq<FWi<tVIgFm!RZLdNHS04N%9w%-GI#UxSs@;I1MeP_IvZkBFq1ZW)}S{L7UrY76i
z{mv?u&H&s;P0=SzdH8mzhl(aRE<R*UrRG-OBfYtgesC?qLW*R+*Yah{v!l$ePM}l2
z_nv=@6OAJ<c_L}mDe+B-hdyHAK6S)A7!&`&?0YgX1k`88jVM1iD?es*Jxbm_g<(C-
z*&#uy6MB8Qrj_4KuqQ5ED&=)Qr&eFLB)@<!o?5COYz@3Nq5FD<FWqn7ksZH<Ze5NU
z6aD>)0#s7cJ|<SS+jv2ibf8hVky8I*){Fw6dO$#g2VenMt^ofN8&8k?7s9;_`tN4$
z3cl58Cnf0L`YVXd^FNbyvNuFQ|7zxDzRyZfqeQRzXR`i}{;I-A{vR6N`}`hQZ2T|%
zRTuGbrnn)jnd=Ad{;y{48*4w<WZf-{%QGrI!8suIpJpyiL}GT18;fcNbzDwKd~zXd
zvL2RITIU;6P|aLi-}<BcA3^Jf+O~fCm>!Cjfiato;i>6g<bC4<Lo-C9^Zk=c8=J#(
ztF4P$xGTH$>j!7&X*<WI`)5bjC8rk;kM37@**6C#59L92FdClVBSr=Sc1Cw_6xzEC
z+3R45FffUaXBel-Knx|6)kUiC7wOPXZ<-L;WWDcWf{VPdAnL5zSUMkXdj-Et5qFx<
zZppYD-ri)+;2rSeiMhqEVw9Now$wQ=8lGmo)%s{-`C_#mE+vZOKa+K28*x1a)swmA
z@r=4m1=k22h}#bw6`khl%^-L9Cu&NV<)+UU7rBiYa!u3Qh0UDx46fZB^QA<N|J1@o
zKb9gn`-^P3-qIlFW4VvyW5ekpv08Q3IxL7@t@~D9<=xhNyw)mtbEl}wd9{@sN@$?}
zm+$xBXsSZ!$+P>`(QN&0#dmUcm-8)2$II6{&-)wPq4;lB6dj)4CyU6o(9X`5``^|x
z%~J*>ug?tUi<?kCFpweJ4}tD})ECJ(C?^2hXMxfkOWJ~p2APH<_XocIkr5TT1;ogn
z+{eP0getm3C!D^iBqWR}VlWTPeLyK0!HM>DH#$s86%frY@PRr;Y5`yxyNF-9M<w$P
zbum^!x>O=wsg8a>k)c<!Fj3RxVJAslTn^=%elG!HqG2?Rd8&<LH(Z*fM1y&HdhGII
zs`lV9rJ&2qgHDzQCU-H_M?9;e+%USbqrAuuCrA0QB-7vY^7*dla{LFmEU3Ip)3O05
zWGZACS?}u^sWOvVDN2YwjS`fWT{xalmJY6D!kpMEgcVIi@2x2s?;gpj3XUG}vU=HW
ztVw$4NXeijgK8&$>d6mvEF=?O1WC)Asmd#>&rF{xtsrbN=MWcN&k)E_h;&72(xB(}
zHpdccq_#i$NM$Ac6Y15YcS-)2T~Q9!;td}k6zscA(LdD~?h`De_ddKA3hu)~zPms`
zIoz`ybkbx&9HiVuth7r`(zSyy*@4CE-Zqbi3=74w+<eCQ3uYYVzBIg<_+)#gUC6k(
zRu7}$Ma^~QU$k?K$;UtaMkGI!s;!qfjCGz9-`C~&p){M$gQ?>*5kGyMMsU+-vZ>Ov
z%#(?J(_j>{+Js@(hY{a%MW@!><hmH!yuq-4wmM&iq|~<+6cg06a!v43y~D+^;U@Fx
z^tl1bpJWh?v-uek;+B)pH{EiG?Jj)1*_8C!dtAaEbhpS_iNQBl3#M~zc5Xgx1=Spi
zU>`{;b37(>HDkA5y%Ke{u0yykF8~d@QqGsnPHZn$sc)mZ|89k{zuxa9|Mz5lFDCcp
zPOVwHJ)4{bt4p|SHe2pCcFEUQsD3uv<@s-y^V#HwXXZCR5Fh5w?YXAq(;yr%1mjSg
zEdZ{e8-Y<XYG@*c4OI#sxrML{UFlmOwJB1$ghg*&4s1(OV+gXnksu<Fv|!0Fl7)G8
zjLB3&tG11>Tx%sLJEg-U=Yr9r_=suf90(LlcMLM_rL<_oB8qa2@l_o@vOry=!8*@U
zgdI!$93keBrk~J>Ciqafi+-_Nn^IG+-4C|*t490fn2;Yj$_PD*$9U>0ynV4i7DM{Y
z7)V1yj_xj-N2B)B(a@CI;kT@8uXtR%jT|lOG14b<N80o~8d9MLx!54JgaQ_`k4hsW
zpUWKIRWuYZ8@R`6N;oDpaEG$ml*;NJynowHQ^4-K9BugMkkX%k#26VaV@ju<nq-{G
zfV?yQ%{UOa1Z(Ctk4$`r(eSp=i(xdpNyoICj5YLbn=;D@mk2T7sdKTA6JTn-#wqK5
zTufNQY0B#{9_|TGQ55<x<(Ks{2SwOloRe!hXwoS+*|J1(9aVKm))|^t-S82}w2}fg
z=1xZB1Hh#aBggn~$9fTq!O3dR#J47xAfNygs2^tHDf|FvDaT}=wAI<8jRE|$SjwIe
zAK?*x2usqQpo3HZ@R4|8avEjH=r`1WBkmZrAH_fbrQ*62Pr0*%*w?@tjT)EZqLWBf
zt%*@;H6lZR<-{-TW%&ZQ?%T4Q6lOhZJoR=*hicD?G6VJ8uidSopENYP4J$1)+241U
zr83!=U@>!|+We@Xjyp5`MI9Jh#{DI2oyCKQazQ`%OT(;@zbq%X0M-=dcS$U**L~97
zB=ZB-RT9`*gVNyvKWbl>SnZSp)wk4~AZ%(Nc)WD>?RQ_blc0`e4xBq{hXJt-6&e~p
zD%+CAl5E=6Xyt+O<?pXTnrV6UO2@}N^<&$4s!naIozI*XOKQJ%des5oqpb{JuXfFt
z%<uXarv?@!`$e&|Wd5MDsC_g@KDs`pdUixBq6{CA-Nc0}yH_#3;a3lW1AFE#pe}5%
z+oxJpyKv=Csp-E7eSn77+V?v<$fD&z{0W>Nq*a3n?UVr^*{o<)A%A#|zrJD{W3h)b
zpV2mz0cbFiG*jDNI7g!fkc~3ITg@y2lGv_{3Ak<5Z9^LtEBtWB1V{7nAl-QZ*cogW
zj=a_R!MC5|(kw@_%H~__=LnPAkM98|Ylr9enjSD43^Z>4t3?pXmob2$pQ+=Tg(Myr
zAmdX92hlzLM(LuBidi2k_yX52<=-z$z?Cbvj;a3irSC5Befig&&zkUx092xz9`o~P
zb>AjG<J9-n9cy0=sm1Wx2DfTlpYzv5+$R$B@94ZdEe?S0^D}o1$PwlH3^IbNsY_OA
z&4mEHK+mC(@4q46aLtUe1xdoF&Ra(k0mJu4>wf?@FZ}`McDp)gA`$29h^+^{r_>$r
zu7nL37tunJE1S%QZWxniXK$EEcHVWnB|q&M%Cc+kY~8CCZ6oi;1d^p`pzw^~+DD0I
zKNH6^-cBG;n!9$9Z9Il>W|q3#e1+UDq9cH(L!nB4Dj9MP$x3dyOTo@&3StHL1|Ih5
zKK{lEna7`f1)8fjaBz7)py?cXEY@EDQo)%urpots?QGhOfqduRWKdUmPhAcsyz71t
zZmg50|6My@uknsq-vpB0qxA`2m`r(W3-jK0u)R7)6`$^s61o>JI{!vnX!^`q-8`C}
zcw=wfKFEdYQIFAyrY!qEg4WWZCTIDn#vU$N9-!e304MuiXN}@-9Xsav6F5zC-{)_8
zXxO<ezMp#}1y$eImEWmvpI4>cTFe%UBzii%q?;K$k?s2YPBb9?#<MxjO$L?d+$`VK
z5doiwe!ni?_qiV0q&Oq|@-piSg}Ut-KqrxXUy?DQ#lG`0#Os6xH@s{Yf4v5{{SY*L
z&g*<J8N{*qFcB?$_Er36V*Oa-{SOXB$igrvH1*%4us?<R5kfF1Wqpw?WSBKESY>^I
zON6u#BiQ1ck?$ktFgjNWD@KX5Fa#Y2#0&Zm&}kn?sU9Q-@psM*BJK;4hIrcmgR!WC
z)lp<5HPK-pcMeE!+jOvEicK^^h>=?WZ+&2xX-F$&$mW|M6{BE;-4HvsAh!OHda+Qu
zqo9PK(8$C<RrpYTs!(WNDEfUs(O#$pa+q#@2#a{wL~w|`lh0AJWW@c~NQ)2ADPhSB
z(s3oc0T$tzny4XR0WQPP@cbp|Y+1epBA@bvhy;}g=$i;UVECVR;QFwzM?>&=0Jz1%
z48I$E<oHq60<Nprznc%(%g2VQ5;=%s^6uW}7d%*VKa%>2`fq)B<pE&qo>k8@ij#vC
znjb|)4_q%{ok$6{RC7K%!bii7LNWrNV>A924KK_Q@E<h1$KlWars0*w&K#K)B1D@e
zW3dtbf2QG$e8DbNz`=`Wf1tqCiZ8S$FzXQ!g3<7ZMF80UhlVE}4#*FQe}gR;IGB(U
z3l#*ZeB&NTXmNr8s8Gh?0a}(QGdBr(smQBbiAJeNqS8rbmPmj55-qimpzukyBk+hp
zNf^Y*OgU!GmdU(g;x?tpo+HVvN6EAt67GyCY#b7rmMQE2N$=7W*O3(e;}o)KNoTD@
zs%6P=#?(N5si@M_cUMvw2dM-Am;nn8X27DdPb+x<!VFmC(`i*LK$roGm?OQx9oXca
zjvt%e$`5Q`PRG1T?_kVmmCI<h%xDPDs4dN?8p+r)Po><-C}GSjl*`Ps%*+bUtd|Cy
zFJ*2V;|u(2vMzZ1H5c_ed=4p6PiDPCmK0(pZfsV4ZPo$5?lfa|xp?-uCG_ppGIfYw
zc3EzA`F7T2I4XdN1g?w(;gRG;ix8QF1eJ*d^eDy^f`S!6j6*_#Yej+rW03zpC+kdk
zw5GWyEm&v#IY&k=OmP;m_PNPFb5m+_v&8c`XYxL4BJrIN33w0-tq_ZlP}?6zNId2}
zV&|g?<R8UZsGCPgt`L1ZA(D|NmLsA5Adm8uiAZaONJoHJFO3=n@Y9Hd$b^Z=tc>Ve
z8nuEIl64xPEeVlb8j-_EAwZ>2Q6QT`JNvM<*o&k<P^H+-q1gRrv9EZE1*{DaR$`x9
z;?`3F8<;z;*a=XU+KHFi8<l$dmwKHPhn_$S9sq@Jm<lOx3e~$y)wfISfMq|Z%EaS}
zDy_;c{K`nm%9yx{`L@bF0n62?%ALi_#U%<qX~TC%;PsB;^$QTfin=!84r3&E6A^e*
zqXfSqXvDOW=~OC(94f_sR$A9q%I=i&BUJHFRSAh#sTftw$d_^CRB`lF@oZNq1FL5q
zVSmptTU+znNqCydDqco0p;iSzQl8EgxIYnZ?$B`WwecQLXojsyXs2tauWJ}^YNa@9
z@dPW`{c6c`YpHu``L}B|W-8~Y>xjhb$c^gw{OdFVsy4N24(w~R(`xM1Yd1!LEFc^<
zFb;<&?t2~DiZnRUHf(Vaj^yf_k8My|crcutAhtpqw&K_u<u+OnGo1P<mWCkq*S0rW
z)(zfi6_nGBcUO(C*iBTNO{Uhh<bF-pIZb!nO_bYBDxgv-%I0IS=4->|xBkuA<)seR
z^;>@Rre*cDef3qn&AVI8#{dXE6-39e;hQyN(+~2!4AP6+_;w4j3TWA-Y{3(6v8-z(
z2DHvowyuh`;u^IY_CiF!EgLy4Zlf&=NOkp~5@n{6ZD5<jOeIN9>v(tT{8lRpu-ze`
z6;G@k7Hf|CwIk=YpK3OlGXp1e(5KtbXRNX3bUND7v;AAM16L%)$_SPf&{wT7AUa~o
zscH>ijHb4dbFgXFYWp=a6yrvx^!7;<&5-E04Ror2zTSqlNy-2P1A!GF_;wIt1r~Az
zJ*pQFBm~0vg!$qrifaSJX8{okfv_^LaLDLMb%Ep=Xm43SRA-pf8FaLfUG1J_ogfNU
zbUJpj><3ber>9b4bWz^O4t{hDL9%k;c45&o0DUAHBMa6?7Gar;{+ybAnqU3nH~r$z
z=#oMepIL;ykoC0)^sT7&>C6o5thVhvwaG~h0tGtXYj;W(45Ew<s-6rABMf0P4VB6d
zeJ~v&iWqA1pm0o*@XE;dL9gkY&LO89)ObHEr9F&NKE%;Kta&obuS3#>JxonAVk|!r
z-bUP+Gpv+1VlxUIN%tIvzlw)V)(>$3sMDiW&!e!kxK3!SL3galYpn6?Yo1MUfmd4>
z%(1tOnKO>mmQm92sjEwfloCA5;5QPjIv(#a{+vEujx&D7F^&P4$Yh!j`ZQ5yG;!cJ
zvGQED_Njk^g=7mIa|gZqYb3hXSw%Nsd}HkU+1bD=+F%vs6w;?Dw6)2etH~vjsZpV+
za?Z&f?MZE~$=siln>CX!LfIhV|DLR~{sIVB!RbvPRFWWdaBu#T8Alt7XTc`xTG;51
z=snM$dgN#T3j9$iJ<}Uo(`>?098na^ti7xgJ?!MOLZRq_6TQN=y`q(~@Euc#dQ&N=
z(77#+xnA8lj<vb&?r{>p{36RdU*xQktv^}i9L2=khlJTf|M~5Td9m?%*_U~ijyWvF
zd9%zpTk-`v;RU^O4D-rKnCnr7e9>lN_Ph72JvoK@`m`s;z>35|5bL6!;$nd9qV>xJ
zIV;KA4v4E_K&0ZF|M{%d`C=T#LIUdoN5RsT>Jm@oJd5Abyu`}z-(@HAl^?<@$?N{9
z<n!s|K4s@D6`ABkQ5YZ2BU&<9+PoziGv}KXfkRIGeZrmt-U~x80<CU-Jvl}PD+Ua_
zgn+$HTDLZ?y8g?4oiKJyP;h;EYkeB9@hNScv44HcXk*H6W4m%4(7VyQxaRQ!T_eib
zz?0hS-`*GoY+TcAmP>3*ZEg10uV>_L%1UoZ*lvbIZL(2qE%a=58f|q0Hi^68&|Xc@
zt7b5LR<NsZ-@LMrcmAqcU#fWl8uIR}s_mc&&&HFJ$OvJuD6z3+1--pk_3W_axnSe<
z0TH}{i1fp+ZEZzg(ZpXz1bsU2Yqql_x9?nc($1IYDL0^S`wPjt3mtnDIoraRoHAKc
z+OO-nm~dY<*fb}7)xNKO)`w$$-80%ilk)*dZlD@q5?W%CI=!O(P=ZsM<Z<_rGV$3k
z%i3m?=JThJ3VhuNrkEqXI&3C5tf)Dxnm!zKJJh2-E)+YiG(4u++Bc7f9u@Z-S8N?8
zV;-eVq88|*6=gZ#0*+~^Pv9U2gX;&<0msqtC+RgO8Pg{)RU{VmX;#l^`qn8<DDay;
zQ}63X@atyO#y%<F?4j<A>3&f?YX{Z;v@icOP3$bq@QfaCQagE`x^<okxL}MubC5VU
zGd;J7KL7ChWaYcqUNq`KH0qHE?Tx<p?S|-t&(@R({7mP{OEk(~Ow<PoIG_^8Srrj-
z3<_%X&aci(-p^N|S689f*Q_}gLsr)ze%B#6*Nl`G>heTiq86b(+dyA<GWPYKQInj}
z#9W>5b|P#T>_Hd$r&p6$c-d$i-oF{LZzgR|-8rtZ;%3E^S0#L*n^MX*p-NZmUDKSt
z#9Vgp8RFVy8MoS9w?ZvWSr|7tth;hku8zWY)RdDSTpcMz=`56gSSzD^u)VXny$hVa
zQ<V8@(G54bMx+6?bIV3@iE;Kx1juULhxp!yW#31LCR9X@MMLjn?Z*B-IUZVI1%||=
zOfgti-^oeMwrV|GZ#^`lJ|0s(Hpo5h8a~#BKd$CHR*gK)Z#|ZyK8;g8mB>Af89o(;
zKMmwO<&8Y`Z#`w9KDSXmr^!9H8a~H`KiB6xM~^($Z9PYzzLZkFgvh;=7`_CAzvSe+
z_>8<{Z@su^0k#ZKckGh)l~E7hCLfEUo^B=ySCd|5ClN<M1#aFZm9D>n?V)C<K(m4`
z=L1^*j*VHn#bL3r&fj1Y_af`3K_~A+Pbe~y9)kRcn-pE5!i3y?kaVHC)x5{R9SWTJ
z;u9iirk3Nfmvr&`36S?WWT<WT$GXqZ;q6>N0Ru8R-dfHomypz_&+SZZR3t%>3Cy|`
z4ekBok;`#se{}Qa@W^Rdg{_?}o^;JHP<eu*5;Nzotvd!f+zR*4ZwtN0@%7hVctoW2
z_sGnnS(HMelcd#cn~=P+7B&u$PSPQmzGJX2OjJhP7L~vb`D18Iva7RGGhzDFBCkwk
zC)Bl3d8^y92|#fs7QH1AlD|Y1WRbTm6;TUK`WRVKvm+ht_G~0nQoAb~XWID!d{8!(
zOJembF}da_Y)fRb-T33+VBVI-=lz=St9oP7Uf7@FV{0$vFKg*|k&jIAr5wd7m5+1$
zJYVO__4It^Jiz5&>&TTu*0sN|s-!R%<ehW7oUeszZOg|ge7zLObrs!TC*|8z>xu<{
zq{%LAxA{VGML&E?<|G@6WwnDBbYC-@B%8AOzNW=(Aj2T;TPmb|%RW+^SfEcX_{CsR
z-*9ZuHp2d#rr8PVVv)uxvNf>XNI@}u@92~ok8CrhD^NEzCBqjkqUTw978Qm9c&q>H
z_IrOKTP9oo#p7-dhi|x3Pox?i>1=ZdKidH6^ZN1vMdlC#-U=Fuz+(x~!~N%_K=~hU
z&j0OFU?A>zP+E1C(qzwKaB0)ltas@358PHsje`T_-`*UReM9+5?P}PiK#-CwXiH8)
z?0<Q4+*-w}VQ}03Dwul%jRLulL4IN3u!4C6f>aPcJ6zO1-W=GaAj3D{XAV7GNM>PC
zYD}&qZbC84n^Rktm|fOHDu@(X-(FkV%v;&f2P>FIG<J`2<F*b>C3TIlA|m!qFD<VW
zkIZi17p(5M!_90mFYcb4p1H3d9)3iJd2{am-v7H`euwVmKlDzoEfA%#gL=3ow=Xo7
z4qZ&FHg5n-#AUTMT$?`xyA()9khyb;ONfA|{>|`Ugv(fq|6Mqd&i8SDZCU)_ldDi5
z8o7MK5n{IJ<sA2DgQZZhpdzKB_BY14e=Y@4oQYQO<vM*4<O&PoU&{=~%Jjxu4wnlo
zS4T4yc;}+g?0g3+$6%KN4LoCy#`?e2+kIimWJHFJ9GSi0)CyTb{(f+Q7L3*#<IDa)
zKuU+i#iv&8&$u7O1d*&-8?9>*QA+eD9vjbBS*?%0Bjs?OuRsDpp(A{MF01?EnOz}n
z;|>X9`3lJ9hGH9sLB-aan1ihjXBsWww_V1_fry(uq4ZOo9U<h1lf_@VHacFO{LQ9{
z4c>M^_gxjcyP-DE!1pV@D3ADtNXV31I{rv>3{-wdd??%Rkd;b|^jtOWw}Qh=A=_cL
z9n)K(lp(S^5g9nx-9C(PLpzaVO7?zWjzI?MD50c8IIE3gi|{aE0@Pn1&>L}phlIXF
z!B3Sc=S3jG2RVfVP3d4@96Duee&VzlW049w`aNxmQFLih0+CzT0iALc<2P(Mg1>Yb
zP6wrGPOdI*inILg?2WSvpNWrhnT|emn*|X>9OVmBh6CYYHv@)(6f_)z#3V;!i=v$G
zEqke%biXZ2QWp%(ORHgA+bj?P2Sa&frxi2mM|3f!N}`REQ{?ZzNx<b@qgsBMy_h;@
zm9;x5XHb@YHii7}$Q)NY_3cv3wlQFh2-b$xNBQHbO-$m8^6XsAs=7ntG?JFnFYmhH
z&>KLO$ybA8VE~|Pd_jliWLY)K^E(a|DS$E<R0ls42Y^GOv0*`+*k9#%hl-BvV2Gk1
zWWu(f$1>Je>ycp=`>rbv0JwFrd7pI6nOesTSMyvw#vVgdKfraP$^}2aS8-4z^tU1u
zfMzr9fW!;3HE5Mi@4W;d3uYE}tJ=M91S;xu7@_r;Psj~wu%9=E@C32C(7~BT*2C*%
zdv6*qR#lFS>W)Pf*1LTB%`xpE>29*_ZSec%yMH}VdUNnto8JsUe<sA`U}O!_j+Vmp
z09~|K5HtJbJ#{*8AiU$*Li-%8BoHo|=Ho$ai$!^S0_`cjI}LA$^4n`zb**rMu>a=R
z>#!UCb_GTOI9xN&M0x!N*gUgejw3ho9l6kp+1=hxuu<+#Jy8kVt|^DElx@TJvcsDt
zD^qx39wm1^zQkR=IyX=GIs@wLmLFbr`El+R21R#1V*0HT2Uq?1iwv|lW4n{wvi?2P
zEqGMr{f10wG5R9}?ZC(lBis-vTMc-BH4*43D+ULb(@W5L70eNti~dcvkFZW97=_44
zeP>o2&sYZg-CQoK54XRnrn#TUT1Zn65!wR{js)ydK$&wV#UTHSj_w})O*vmQ15_Ue
z<zy$%qy7HlTN~BL9ZC~ocYA4WCetW3%Y4$>Txq@)v1lhRY4URhc%g$|M4o%p=+E~u
z#t3S$h>UwgIH))hOz(9fy~3#9GJ++g;}GHtXjoX><#0^Z;;Xhy>BX<)RMI38^8bi2
zDjpYq?lnoQ=#OXa0*+~#!zI?wiLu%q7wCGJB)7N6u_pt^4d25h_ce%dMukV3GMS`~
zfBwm32b{3*Fix9mIFO4CS494-o^E+!PSc61By5kHzQ;mOG08vST*f81gAgpZ`H<o^
z8lQD)Sj=@Or|eA^pMCk~kONqz<o_6#v(Ih8hJ&UQJQ<g};#|T^Wu+Ki6bH@w)o{eX
zIr=HeB`$yP&k?OS$)}&vaRu$%jMS=D3W@LH3TvH9DUC+uQ-A*~DrzVtcR-WR?EP7s
z_UD+yUtTUZ>1Rm{_X*+8GTB1?pQXXhC(xxgQWIjgF=}Qz8aF8#RNsF@OYr!?4azUn
z{Udu-EZ1HfU1)0kQ3;w}bL>2k&V4VYiE6Rzd=w$wMyCMqh{7}&I9lwwQ?9xHEMpYE
z-vqy5UZbmfX0R_XzaZ8W5%*$k80@r6Z=O^ex^H9Lb|2SPRbHD%Uin6$oV^>fxL)p=
zrD^o1_Pn`d)6%G>#uJ=h^W$A}H%66xsKVL~$zMp{dZxlBL5{h!iLAd+ql<3cvB;6L
z4@Qd`!Oq2PTBD|ft;9>;og~YN=P0k*46!fW3<C9!%97i*Xwja({N6ZLBj7x@{p!=F
zvUz>M+nIiR=|K+KI!0OQd}X$G#zZ$jj0x>|{lVc%DP)LB3UQcgyb55K(ZOI3?IoP8
z42_51!N$sIrDjtMXHVLGQ<TEZZ0_J{P+`0mo-$Y&UOSut-km(sG-bVT@S9yUqQc_$
z=Kb*7)JKSmqDyha(dhSh#F;U};>S_-tlGqffPK1n*D+n`-1r`$WVXL7!=}-WZ%Q)`
zno^c6<i6i%Z=fIIe$|@P$*uo2{cIqFD>dc0P?uc`cO*PkH5K?;4<)@3(2%0nCJz4a
zC;#S58d*u3`KL&ICcAgyCuR5943~&vb@O8tNwYaIq{h;y04suWk9jG}AARx|)?dCp
z&NpI4R1||xbuUd9E6*FN9pKK~et9glcJkDPs-68H_gv<;bZN=LI8T>-(wVFJVErq_
z*0y<Xr5?YjSp)9k+YisRy)PeHZPmW_Ri&?=__!)K*ZO&^K5g7jHh2D=xb%5?+HBx&
zZf}NH_s8<8F6X@O+1@@9$J1Q{$yAu&QC#l{weRe;@C^>+Uq|5zZDap+vln1<JdSPO
zb3)`F#SyuVtzP4y_jR}JkZ?#%raSoHTQTbNx{`V0wI>2?nbd)@Ip^SZ97(?YH1U&-
zID@N$OUd`qJdf?is7l9)B9_1czte3cbrFnAg1*#ukz5;}$!;zxs5evP(o)lLZsRVv
zHvjH#OMKyl3n6IZrZchQMwr<L`lJEJ?pBQ5dG(23Xa}5kKY&$u9gT&yN8J@aqE11d
z)YY!|zWRaBs^i8LDs*(q_W0{>$Dg7p`EI=|k0OLMG7P(y_xf)=mzDbv2&+5J!&9$5
zANl-+HH^tZE<+I32=9x<UtfHxpAQ6~57RN7e~Oh~PIRD;OH-Y9%~LNIp3tW)EKvf7
zUa!-~m3BW%#RvCjpKJDSoVsCM&xgvs%(}E-a-iSq-zg~c^$7}vF>T?Ne2KU%hklcu
z%AnMWtNX!Q!(Wk(5Q?IwSYyeOYS#KSsIsGmDdIy&w8R0pn%3k;L~n@#Fj4$9fdRy_
z{tRyTOc0WQI}2()B3ekmyQKh?>wsvS!0-=&`l^8(!vO>^)Ca^$L>6BR5-4%xFJ%!(
z&lkj|88lPtU+oYi_cJK4Cy)ez_RBr4<`KR&5t%dq``@xxBJ8W_V6N-n&p06v9O;WY
z3>&vM-&64H-AEnzw4B2Nm2v~M7$`i4HHQdMf23f$-s8GkkOrb?f3^UIhGB>E;ezi;
zqWD6)vBQx$!|7GSs~p0;Qo?<f@cd9h0+yg$gY*$9DS>JX<T>{&4(4I`!+3@FA;k=q
zWjW#J-QlR);g#1B^%`NKIpDKyFv>Q#2pHKy8!0Rnd1@Gm>>pW}8`(18!MhcC0*E@N
zj4BY1+NJ}S--lKbk#7)12Khzp=0u%!M`fx;kMW@#F<_oRFwcgGFEpdN2xC?`Vop?I
z(j8(p84w;zFrN7^UrUGqmeJxIvCAs4JNB^&KVvUZ5YWRhFk3LN`HA0XMd9&-rB%Uh
zZs6*AXL^;N)Am1CVt>Zf{#+W2WHOAK@{3!}iTl|Tw;2~91c)D^j9(Iq4>yYEeK6z9
zi688apWccO112n)M^T9-3>YR%`9Tvxa}!wIqbRiSC`-fM5sUCK!Yj$4tGJ`9SrUEL
zVl%mm`znX0B^RzEXZmRbXuywdWQlI_KxlSs!?p}`SOz(1q5n80bamHuZvlFafV}0<
zeU}OS-L)kc;ez==q5SCKBZS~%8#{Mk3?u00GALe)FflxtIX1PnCbfM!)%iL#AUtVX
zHewe-Rx*-8o0=q9o0PefBq9}uN10Y5mR4_==5(Dl_#x#DRl0<DdWS{2++5<@ob>AM
z^t!EdM_|U|8*q?ZhPYA2P*{etRNVM6+9WY(dYND*+>l~Av-m2r20P1!Gizc$?!Xf5
z=mG7dh2Tufh~z4(5Iehy1Db86n%$0+yfA{hL>#p;V%r%CykACrbVqyEB6wZq7)1>S
zw&KFKMj^IZyvC*Drs3kZMiZV$qhWKuX-#WbN*le-A<PFD*b}0TqJpf@FysjsRye34
za!4a^$>n3-Mo2SR<<mU=q)Q{?65!y8Nagjw<zI;rWRm_UkoSowSgC|uvW#6(8_3#<
z%C3#ZDL|l3!md%4D;kj~E<mQ&%4Q&tVN{l6!bE1K&GwB6__YjGYXwz@iNN-e)$Rn~
zkcR3siu!|uz%_!^y|p-Hx;Xu+SO=$M>U~KUr{BM2uaCYUY`}lWUQ?~a_AKNh(V+5}
zrhxxoc$7Vwn#z}fBue&Bao2K7M%2pEK4Zp&G4J)1_wJM@^qW&iR<s*e!~|8m$**YW
zt%%sGK!vZYcvl%LRS7VuEDWghEvWp3Q$b}2x3<E#ktVZ6QpKWLmE>6Elu%_O?*)U~
z+I7FTbgRBk3ptBGzR<SpMRjTb0<;{+>3>xtjXD6+@t-`9k(i~gB1jivYcy+XT&8Pu
z|I|Rl)!_td8;oi-f@<Y>iAX*1@pO<W+A^V5T5lBU$UV!85bBz8YtdHgL>|i-tx4XG
z)s{QdS-aHpHrJ`B);V|AHy_s*{H$kbt7o$=lLq||JB8v&tOBIK5*$w?vZM{%o<KSI
zM#Zro%By&)>BZS5^(bv5)Zj+>F-m>M3O&Ie24i?eg2E`>O=hP=-$0F8<v{E7N?U6U
zJ8L|LF`&s)rMLADUmZMuW{BrgRj?rOS8%gsx}g+D^U(@K>su2SX$wUS1k<|Z=QYGI
zy_uW?lBv`DF1;oCXR#GXhhDW20B#XTZzcUBiYV4Xc-jK{?b$Q8UaA5!bQ+3I@m)z<
z(@5b8K<#U}ZGK~Il+%<IW0+Otbv5Y?b?FREV~sru_<e0{0}60m<)Xj9^`Q!Q;pK2c
zpiaosk6l5$ee2FmQjzVa`dM((JadJpW5*3Hv`eO~Q{q?WyBhdQQlZDwh8s}JEeQS)
zECheni1?`;IkFq*B>*~W!Wi$sLWgfm?>hD*8U;hfLGU=be7I-L`0efMr0}TYMx-n*
z&!l*-%<z-t-OSH~<exg<W-v5>yO=UM<Z3(Uyn5!g+NK22scj&%XFc>b@Qm#rKAu5X
z$8p)c;5pm-U?G?w&H!(0&*x_c8Jj-2ad;{rGcH}1FB!O+8Sn~T<|b=|Jma0b<M8U^
z{nn8#W|6qxSm2L}2OP)yM7R57(fi{l`#p6B^v(tip5ZNptetcTZP&W&B8QF0GQ5Ov
zea;5_Di{UOO~LIhKfG{V$q;_(CI;C+n@a?V%9s(tg>2J>2&2w=V<Ja$$s%+=jn-O^
zlBNu$vcS-^t&L~+#n12nq5hQV{$z!*IqR{p*wJ2z@$A)+57#4s*h8&CW9?q!oh((f
z31bIMqu&q5*?|*Aek7P`k}!b6f!E|w#^fFuAgm0(5`Cb$!q46bP^bOhaNF^+B{G6b
zuYv1v{x+8OLazyxnW@*a2{z#5Z!e<rVsfa>ATa71j_nXG>o@%K5yEwI;+JvKOmp&=
ziMNX8R2|dQ80NI=Z_uNDp;gY%cbGADRI%Hdady06p7_PeIve_I!BhE$7h{Isc9sjn
zOc(=4RB=Z9d{(m3^y3Q@TPA8o&UQ}0)>QEvTNz_k^?Xj9)l_30`>W!tmhHUGx{2Nd
zwm*0p7k>dkyoy}MFJ4+bCa?^>X3AM_(Iu)3AsrjEwID=p|L1Yh?`6>eA2CR8Da3n8
z9-9-(+p^bYoW*|u*-Rb|v<zBYny)BNyj_Tk@=8*i?p|D88Cy<&S<dh9%vtZt!;nv0
zb1z;WDy@_&uXL|e9H~~6tMzuT_kPo?=-!fv-A3--5ry4#?$+at-PhqZu#Pzt<u)>b
zIi}|}(SbRY>B@+`e!{WtTRh<uv_5wZ$oMU@rno-(EVVu1`q_AOvUq3<!+VoedY{#8
zS5N#BV-rxb@v9iRaiQpaelB?v<#tUj@^Zd;o4Gk3y7?UC{ZuImyl{iQ2!JNH;C;51
zzipvSdZR`QVJW#|Z156SZR6-~ugh!`VfqmI@RL`$lTz@|NAJ89+1aMwp}X+euw75D
z*~v-Xd1tcAyRpN`wriiiZk)ec^mRv?dM`h8_u6<*W^&g$e=i?-_v6Jbq1Ybb?p{&o
z-jwnF*U3HM{QV;2eGRsK60!Z$o&D0#{R-oQZ<G5N`3I%Q2WD&s<YEUSI|r4a2SLV%
zu9FA*d54wAhd<a3Da8&8cMj`94-Jive0?_H^N;EX-`)})$B7&#=pUayAKud*rRfX$
zavG$+9_LU9oaBj|6zHE6`J9wwos@N+RBW77y`I!ioYsk)Ht3%=`J6(s{>AXvIPH8r
z?WQ>E6*=qIKeNI4e@6oUN1T{tQC4Mh+G)=+RVTOU*17UuuB>EiqL}}q;cm6j{3lNQ
zSMm6YmxJXW4Yva2e;1Ee_e~pNyb6%5jqATO+@WEnLjTfmlY{-k68?!3-C|*`tXR7E
z)V%zH!hndZ(z0^N+@gQtME8oure^l4I+!afqyf^?+eg;gIW#<C)ZITZ**iEoGdnUq
zwYZe^3#Q?&URd7V@m}3HI85ByJw2;Dy1Y6*zxgA+e|`U8djivNv;6&oN|qA5*%gQ)
zjzBZ4lHC)8O|7lDRI}3-`i4uQz@pZKHxj1de%w8(EqEXMPQ8iRvd)Y>fypGq<hYKG
zCFQ-7K)z-DAwz~hAkyw}eF<%jM10*ltA=CtLX}$1AM&@DWhI({_$k_r<wX^S4ywfe
z<H~CLBEHmYzk8uY)67QQ>T+|k-WGT%-tGer<p65dz~V$)X8rMhTv@TOIPp_U-Tqh#
z7c5R}foZsNB*7GltqsSsCF<q+6RnM>i!~-=S&D5<=c^E>(~XI?=F83QK+s#IcF6Va
za6GfYWcxq7ihPA^C32~4kHvE9uc_W`&Pb@e;J3=1?GHCcv*iX;`Y(XXD`xDg){g-H
z`}@P$#dn5c{ulS0#hXwctv|?yek1rCl>VB3LJfa_-n#{RV<{2l27MvYq;e)SUh)fh
zLk2OjBlker2^&qc*zsm4Ix-@pZ_><&U>{`2x948C--znp*Q5puAsyyNze8eNjg?YT
zDfn4Vl}Z!e#{WQ_pxSv967_kK4puxiM_o<Qy*MgN`qC@Dog$NDS>$WsQ+kjl#Ijsu
zZrHiJpHVn(NgwN$S5%y7bLYO2?KjG3VHO1EVUcCG;Bb(aOS^KE8EZ^;T;MNYXi*rZ
z7jayaL3eOm;1%MrT#}t;WtktOQf6gRQg^ado-n{<UD_aEUS5%UfW}-Nnt@VQt#yu8
zQQrUC?5q|-$Gils8@fBOF`SkbJZq5CAZ2Zug7X~7UppzRY^KyF{Vuy3$9&#mS9od*
zhpuAC)`r?LcGmt!+VryWVX%?C^riRqG7H#zYD>38KsMiPMORUyhMs(U)hF?B+^in&
z)bu)mShDdtg4`1}EyfKcn;jxbvT>AWP$>C5dKCT4I><4^;zY~7$f7!ieo(<BC4_r)
zGlhcKu{kXTHR1M_rC*<#(dRkm7KZtNZ|BajyB8L0j-7ZGPKo@wmrRpw@0Kl!EALip
znxp&{xdYcp)*Kh5UDt`X%ZJw8=nMW*c>Trr<*SXz1`+kW%$!;b^)z?eEfdD%w~AB#
zuDzcWAL0%@$g`c~x5)CnxZiOAiwKBBrYmV3m01sZoThYOwwcvUbqX9exkh_l<XlcZ
z9bXr`J{dP+U20wra)o&Pj$oY<GM*H*)BH1oEbV>kr5DqozhY<i_3y?QqR+j3l(LWJ
zL3Xyr<B80G&y#!yR+q}}scQ9?yRjhOSElo+F4@<oY-u<Kv2g5ItnUgraD>C%NCH>>
z*pZYgD6x=PG8K#*2(gfPVd<vsG<w|h7LtN%I#vLOlrBy#<C!D`?GEz?jh8f<h9;Wn
zufZV86e<ikBgy40Yz%?5Z3c!tiLEGm3Szt+LCxXxw^=ZW3f@O7y<I6TG0q4S&}STz
z!?r}I;dNL`sWEZY{l_@fSPqxdcY?#3gLak7AB>%4NR#ge7yDIFY%=m`!`vi!s;FZ;
z`iT*rQ2IOo?_(2Ej4dxLu%y1LfL;FV@?jp!N}*J9MIyk_G80#Dxy16MKKIb^TcUjI
z<Z$C$LuGv1GO#PBMwYK@Ms*KKQ+cFJs<WA=w0;;(-HS_XXQ2_ce;5-_7z^kaN8$uC
zhAC_)rQB%Jab0#xa9gpZs-@C#u!l}q%c`flaL}H&GD_N0)F%4WnqhTXD#@IyxlaEv
z7Ca7{>?l!3KFgpdkGAZmEvh4am^&oPkP~t&Q_Fd^p`yb;QwjR+lzXk4FZs4L)$@Q7
znuD7N&#E`1Vr<Br?_g;BQBWW<28IOhD=EfiiGYvK`h)RYF#x2IolVP|um;qWD%o23
z8Mos_LJR?mArS=r*taESIO<5ckF(6~YK7b-+Uo0mfNUjv@}0B5&($O$WlYC#pZ2YY
z>RLl9Bj!Q+^J1D)kHJwzy%jd=0bi@@7a+YynRboL0yC|jJ3Mwjsdxi*U#t*2jdQAk
zSh3;YK!H7P7HSL?S$GftT1tEi)rpk=W7_oGfvTN4j|mpU4`W)Rb#M(X_~!_+%v!TP
zN%eCol?a;Ynu}#{jSh*G@D>W1s|WZ^Gt;bgu*^kyE2**<@%#IT)$rXco|aLlFp?81
z>AI;{b8CCb1ziU7!vDqBTgEl{!2kLiBSx3NNa+TVZb1-fN$FNWN>Gr-4Muk}V03pg
zdUQ9^9nxV^>i&Gczc{~hUg!Lu@5%jWulu^+pX)lYHKJY#!S-rBUccyN?TCY17>+q@
zP#vd|A0v7FR>%6TZdtmt?s;30gH_eJ5%uk#i<a9lyx)Hf8lhyhelIGvjIdEXsqAhh
zEan8ut|7g@Ukimk%UfZ0^^T)h2!>hRZjnle^gBYns(DsG0jTQ%q1d`;d(B<C)$2jY
z$+}pt@m;2NNgznEhRuLT@4<^uAP`)iFr%;+Er@t5t01fhUkm4a@nb~iBNUh@`<g$k
zXO!gUHyiKT{ZJj+F3v%CI*!sCL6N=jE3NMw3;qxuBkak)DIYiv@Bh-wu%~bqzGpw#
zJ$Ul{2G3gM5R-Rhdk_oo?F~}t&)=nZEg|Du-5t}&!m0IE!0dLGZoz{^k~meoeQ$=9
z`e(6#-Lbyi3aXsR^9|iPMZz2D1uteXV*(4OsV?fpplPv}-YyjN#gL_*W}>R7PUFEr
z<{2!iX1!Dkicx7Z-06jq##Vixtx<bytx7Xva~0(~zy2i{wHM>C0Obd(+ZA2It2Q<}
z0M1hXO5gA=*=1xR2w;th{r1zyDevOrHyQT7T@olIfeT3nSvLHdh^FnB;GoR!+vJY{
zfO7#iTVsYS$VHggAL7dZ!8PiKi*JTWDZc9GFzgfO^o<_b1gBnQ?8vL$h}v6{W{S`s
zNX4}>cw^*A6E!+^bAF(v83Q3XpXd+6Eu|U4{}Odb{#lz~3Y$czdAd7f?dst5E<}~h
z7Y+>^R+F?Z75xpZwkiM^d3h{1O@5RJS38>wZ_oQGpI(QVJ@eVTp1JAzNXhc^GJMl?
z8Q+Sq7Xk%<!aMfZUO@k6E6Z==8!q^sWyaAAHuU~bRtf+bP2DcE|NU7T*LiCH;%;U2
z?=RF;=egI^-NxPDD>P}>W!MY<!$yko@<&|+)gWG{kDND|b-*8TLVxHPtiSy?PTagZ
zC0ktqDE$4FiTQo_qWgAn>hJf5(8pjM=<fhc%<V2p?s}^G?+^%z$v&<EfSAcna+x_=
zaK6?<6jC+t0qox?ptsB<;<;kCZqUdCD1j=B9jZc-P730N-H<){d__cE3N6Cor4J`P
z-GW_1Vd0O1Xi!*O5K=~Cs3|%qY&(d(6zegVlt(q##5y<>7W^n2h*uwcVf}F_H|Q$>
z9>fBdatOjgk*I@7H6ak~>!3_q_~CT$y%obKJ(vXx%ha1h)tgxVn#Ays#!3>-A{6?i
zR^JU01_l7`jKV%HG2xO0v2yDW8Uq14p;(_E5($OFjl)B|!^6|VBT?be#^Et_q21Vz
zTqF&#o9N>q5tuyywDd(vDSa9w!cdhaQ}P8eojxZV6Y<&sSg@pB6i#0Pjx19JRyb%^
zdDGW~N7{G;8^GF44)iVHD7xCHmHDWquTdyTHwxzHIpyd^n`m@tRC0Pm-*$9&As{3#
zdb~fnK{2Ma5O9GPqg51B-xE{67XyLD46w)6DaKa3iru=_KL*pEs;Vz|$IeJHejipl
zFO9t7X1p<0yE6tJ-sc~$=`e??K%S^S5JtQR)t}stMo{t7Gx4w=@xLLlv)l|1%AQm6
z#8ccb&`UjMEW3ZGIDN51O1Dr-!}x0QL>G7>MXtO2;RF6<IzbZ^A=;!MFFmmlI*FTS
zQanK4=aICu3{N7SDM|q`xO#G}bkAv@sg+@pM3yPF%IIE{DYM~2tXdME;WHTVDC;gO
zDz!#i+|cLX>Y3mtJg7~E8K-u9eQ4FHq<G{{0{y7G4Dk&Ix~nPKEW5~zM7rWr!F91C
z!n_GD1HuvMk*(>`QUE^_aDWNWjz`0=mHZX}IK51VlOd?lsU47X<Hsp4p@@@QL@*i=
z$dloPo1vSRQ7A=H%mWT6OZkL|sl=zMMj&pX8Dvt3SOWxpLS|8GCSE<*V;h0(lc~;<
zRjZc8qLB6xp@EJd8|NXZ^TF$g0Gc7PqIHqmZpe@ENXS;EizpIr8@UX~_GHecg=S^F
z%EmymmvXZ`(Ag_T+1+JXYAl$XMTMLX);W!8h+Ccqzgxp@taE6rvG&T8FQq8b$};h!
z`3Fsa*HX`kS4eS=iT?87fo~0?$dJAsd7(dY`)Kn-YLPJZ{66LUiMRP8wYjW?`7{0b
z3rATJI(fS61>fMLH6{gu>L6j-d=T9O+7%*tIy^>4AkZ;SshskeI?;0iJhf3EfoZ1H
zN}<%(!alO1cS1#uh$!{4jM>}*iWE}0TckK0XgZ?cab%HjUQsW)$aSmeAvFJ~a`7kS
z0*BiIIY0rR0pdnS^nL}`gAU7CTG(4!%{L?a?JY>LO(}vvBT70aMjE7{u9R@B@rEGp
zTBmeDH|-^_2%=mwX$6y$VhXb21%}<0M3R@Hgi39<$_yMoGW!Y@WN2lY<|8A$J~~#o
z(ot6X64uh;)~jO$u84G(Q}j3z_7UI?_+nLzKCUt?$8D?d)v3S+mCl#vm8^i$M)}uU
zt5jC1-ndo1OseFmt8ALCw7RTJh%YC(d>0~B^PM+hC8I*XvC7_BD^|ky@9jTLEG(H?
zY_nQizgnEkG`xX=EIQJ2N8#g9g41IhQhH(Xb^^*(9IDmFG!+E2V>tAgj~O!w9=7AK
zXgp>+!RM&J;kpyzS;gne#1W_vdNhXrI0{F^Oh~L9U&0SZie5;D5MRy-=gI0L#XGRl
zD&Se>qvt1JwR<J-kJ-kU%SHl19=$QJ!I+HE37$!&jM*xlg_Dfc7@m!cj9ok4YeE_O
z3cR<g(oPk)E)~-6GI8CVq(4OAdh$to`QiH9N%=Y928>C4GQ)*sN(IYchd4=v-6JX)
zsVI8v7(%HyLhOW9$)r0_il1cK2?)U_nYju=u1e%ofbyaw3Nk@OW)dY)pfWy*3O`U4
zp?Hl3s4hyZK?c+$Bi6zPYCREcrw4Urigpu%dNf4)?yv^#M21eVMk++cR<S0`M5e~D
zX6|FV?O31Ng%>NZmI>>22#WT~TQ=K^woh7i=}Y$cP?kzHr}tUG<@Eau_a<JDrHr9{
zx&K3EOz|`K?(0?H?Fr@Y)o%LBZaH!^)|!#lYcx`)Dd;I$JP(a0Oa4nEjojb(mst<f
z7FrD01CceOS?dA)?qQBbKN;v@tn3lA>4il13gq=tjrVeH_mUI!aj^8^Y4$PM^kGH!
zG3NFC8SA6o?z<-Jr()?Jecn%O)8BVs^Qfr5pQfC0zrVi)fG^vNFAc=41*r0q>1q0#
zto6Sf2U-#7SycKPWa+*(_c!SnxQrj{Hv-s2>$p}9+Vksta2|ZmFnB?iWLo*ctJ2@y
zS^E>wuqTmraCCQwtX7!ju(K?2l)1lK)^PWaVR)rha`bRy<q&Q7K!EH>MkN-kLp^N`
z)15c2R=|%=JXI~x97Q^h=8R({@Q>E4VHH(AuVCmYTT^MN^nbN5+AKTvNN3Edag3aQ
zTvvIVDr-y~K0a_dX52rH$1v7LG|p8%&Wk+(ah{-qPyAUOi}A-_Gw&Jn7un{YT=5s$
z&zcz1oRF>^lu4eX;-6R?pOh1tti+mP_MdbNLJ*DnZFEdnt4~Q-PrVMBV$+;{WP9(G
zor2^~<DHGadz$e_)*n2<OyV+tD+G9tnqjC?IOLtaZ)LH{&9Ym}{@co$<?Wp1U!N8H
zGb_Y6CoDH7YB6{3tB^#_Nq5f4uFuJzi4shADeqI0L291L8Q@Rrw|+=HjK=^@(bKcm
zHO)zl+MOgiRYZDnG6sL<Z{t7LHhg}${`u{aWR${ZN-ZoSB$4I1w6z?`+ZZCJDrpx1
zl6L__?k>_F7)d<O2)zWPeUQX{>x2P+q&~$E!zKuWC!|6Gh{HMwBal*2e~4lP2;*F&
z63&Q{7ztD4q|(-j5X6L;#8OBtqMSbjdFzq|azsTg1SJ8IWdcMM76erSk~NG(by@@s
z>k>^dge`IetuYeq0fe0b1l<-AJuZZONc;f-i6INZkr@0jV)2Oyf~f%fnHaITPJ+)a
z_=|F4%T)xc7WnIDqMJy9Z7uv=r0D(`{y_}*NK5o&9seu<eDO!*>jVb>y9@X}WpUMs
ze`5i@vk>`1jE~U*14%?cf5ABNV7xA2{Btm&Aeh)ym~;b79*9TDBuq64rg6oi-FQrY
zj>l+;_b~f0%LX2sHXeueW3EX&9(g>zzd{0Cc#j0}9#;#ARO5*;;YnBuNmb*@kl@KN
z2|dZiRs4&qwDIU!EbjAjT(#^+8iBZ48@MmDAL+W{>I>o;P6`@X;+inwngt44$YWcP
z;My<=+Es%*biY`+eOasjeBV@eKF4v56?n^p{b2*gQ=88tp;0w~KsNrsy!K%7{ec4W
zp_#&At1T$>FDSekC-R&R2R(nF^LbeT5|@pWaLxyGn>SaQ--VI_;0SCl<73ZKfVzP6
z|HEnfzcIpBZ?g{#3qOzk!w5ZGHodDaej7plkrVJ!+{<j=k2p)`{F4oX{3jzM0f%LK
zYu--|9T@WdTTbxL<nXT`b0G!_yJv(#PJaJR4rAU2gxqJtl2hcuV*i;O`o*W_=G`+w
z3O*3>o)Ko|6#c^pWz#F0TTpR<f(@PbastMt*8YL=>K^Kjk@1O?(!rTo#PH<8BKsKc
z636u1=9bUrH5`1bgTwo5*y-8%e>-h205$?7D{IVsz4#1EZ`PWquqk<86<s`xqQa$C
z%~JiZ$svjy9TXCdAu?40*B6dFBW5hecBhCNb`r1~Eo5UZDoc@kG+uawcQBdr#OZvD
zw%6)WuDhkF(x_;$R=y6SsAs|a@_Yqzj>^x7CP$G<YkY#w)*cm)YAq2V7WA(C-Suzc
zKAyEER;|A?-R;fF{9e83;PW$Zf9z+?wwdcY0`1V$>e0S<7Y@tHRJZlvbVHnC{wqh*
zL4?wWm2s(;yIuMEG8vVXKT79949B$l+j3kM^R2D2C+NxFuH|_=IoC3udbgDVm*Jnx
zn$kxN<MUt^JESLeX9%?p-gLGzoG#<I41MYRO@FzKiQaVD@OL4Yp8Iax-57AU!nZTF
zskm7laCdknp@R7o{AbY;iZyA!?1tNRWgg@}W^58nLV{xhClq|n0;RSz4u$8scw2`t
zMFMSwSXZt#uy0cwdLz(<rM8wgtq!33h{pB9An{`8u8H*fCALqrdNg|hq$E;(aY#m!
zjY#z_^d7(VxvFil9`%St%2QjOzT|p0sofNQUmmRV;)n?L2(b)Wtc=>yw?&!qj%wLi
z7PBT;Sv6Zyoc_M`uekgI<wxvtDK1Ua^FFZhmfFX@9X<?yEnN=FFVvKN6BTQFn^Am4
zZ2cB5`wMQlUw&+xVp$LJ_EmZL8#FI>br;=9QSgFMg(nsfnkT=(wBE_9bA#8Z`Y-XS
zdEMag{U;~bDD{wY0~L0rdE>a2#u@g4UXV+3t!w6C17+Y?X7kQRnTXc@y!NWL#M;%&
z_W54=h>nBMOu<%`olLsUiIoaucRA3x5<N@)yQb^nTU35;KCM4rZ?FQx<G!EL3<U!S
zH3q(c9rtL&P<aqT_%NFtL+xPq*6z2ldp!7k{IK%bw^B}!FaS&T>h$}R0-nH+X=NIh
zA2X_4RX=8B@vIw0@f!FA#X;c9AM<PKF=8S(%+^0Yn;m2g)`YiB|6H`T6Zi#rWwuhh
z=(X;Av|?7U{q%F-$i4Q~bL#ysD__u<*JkbSd%plBskS$d8$GpmuE!%m+>J1*)#l6u
zjp|^`cFLWvSzo;4Ine=f5!rh9xFbgVRosb>^s&%dr}Rnqr%K7w;CLnz0B(Aq%sKRs
zg!ZDQ5wUxLPV3RwMUZb^os48E_<ScKvjqH@`H&lP87B2`3}^}eS56RzV+u~M`Fnfn
zHPeo|c^rqhYPQJ61&SWL_+Wf{_3%UCeB$Q$hC~!Jcl^<Iy;WSXMECK}d;qR&u7#tK
zI4%hph(I}5g8e!TyA59uqzZL7T#N$07vg^~PYG0p&{3pb!b8>aG9g0k+fqUhPWZOr
zD@pbS6E|<{{yY+L?+Prq8(dK|oBzF}a`9zt7@u;!So)H3u58_NQHE{eOvM3S%=um<
zhp;ViJB_l!O@5SRGCrgL^psk>CfZz+jX;2EfV%f_?EC&vI?Ch$YS*uH4&w!CztR~W
z#?A-{X5}+`m2$DQxd*EKW)Q(@9S$L@kN5Ov)8;lAftw3U2NYUrOD>PV{3#@ClXt`)
zn5gsljwF;byymkwVkvk<k*LeE&)@AnS_<JvCf*BE_h{94`(rlk@`i<W;_0|8-EO+s
z$Q1e6QbvmC9HJlkMmyCVfTK(VRc_@Jch8$};H6A>RsTiOOi%j_)3-<X*9H8GQmXvh
zFQUxIx#WyyCQ(_G*$E6^<TYkrG!)i{9QB9F<E=yl4en>>Mc7NyI*yP&HNYfi7M4C`
zC{O!z%K`MlE>w|QR*l=>08s1M3R6q#J$Ew@q8W%*o(LaG4c#pg3MjF{Vt!#?J6{}y
zF0<Bjq=}#PC{pMwTMZwjPJX{zqV^1~Lqj<?Jf57QD^^_2TsoKZ>j6Y(!jY+1owm4o
zpj4i!;-#JE^p_%o#5!<=>6yaINdqcjBSTH#!L6p_dXt}(1*=t*uF+(pVKI>E)cS+2
zaUX%3H@-lKISqZ-VCrC{&B%!*k00TfWpl;H?W0GWV<r;b&7yH~M5YpErh$4+v};OS
zxxx;(v(3%G5>MhcJ^3apsXfhA6IHH?W7HFgSg0bZY9~FX^v~+QnyWEqW<c9JnvyQ8
z)+|HUx7vzp4WW$`OGT9*-5boNn9(iWA=SKt8ng|MC0xO%YG3^x%O3QvPG@oj{~Q@B
z?fJBhb!24VwqwMl;ID4LoAtoBRVxf9X}7h>B{z|*F?Rc#HnOfr_%lVDF4OB?67CCa
z0P`lU(@r0nyiQYf+={YY)aRV|GF;<yM<o~4c{w7aV?4e^w<_uPK&MX4Th`_w1~N=Z
zCan5E!H$h9C<p|ACYNabM>cG-KDFgO8|HU2W=+zN{4j!wGtD+wdjo{iiFl)&euMfO
z^=~#zdXd&{%*{0O>hcZy3#}=?Nu``WYs0J8plMiFA0`*yg)`+PU?!rvFJA*@sj`WF
z=o2f-#HoefVA4htztG4a`RA=hi0Ql=vu7E(r=vl;;^&G5{d=b^uJO={Rzq=9)w{DI
z^LF3Gj@ZN+UE)(~(zi?bg3Wa<aAz$(zhw@`kA*qJXM}1pGxOCSgQ^)1@2##+);1bi
zx{=v#Ek0{|ld-LH(dQm)_UqcNE$!~0cWjhC8$-oEOZ|-A`V$s!2);yn{c&*#=vD+O
z9ZB>|U|s$t=+Gnd((U_vcUhpq@RYLKWq>NsJ(Qkdn{h~QP|ECUJm1^BD1p|I?^>s@
z8iw8ez>_hKZ0EEo|JBLnn+Y8Fw@S|U2Q%7@o>CZ+A5}jXO7jKUYOk_9igG$8I@sFg
z<j!B6X#Y7<p{|;*VM-|wX*{}@6KHpIP31(bE4{KRS)Q_Vqm)3N@n2l5Zf_Jc(uf>;
zSl#+pWnZB-U!DXE-EO{v{6g>cpCirNw{12|2OcpU6d~_+5sWuz?XI(^fxCU2DWk4;
zUFV1z%k3vme)R+)f8^#=?CMT^_<WM}bL(Zrp3RF7IcC|vqF<DMalg1q_07IYe%^Kn
zoAQat&c5z>cyyfb&~Lvx`{tXX0#@<=WpdbkJ=7h5v&M9L_yRNVob<`hb`0zyuA6)5
z5hj65aw)d@$@{~a|1~+3yjKxGalN77bSMD|O0)zexrUNKU=)(D2gWdJZx|#UMu&ni
zEWwzrVa$;K;j~Q;;zb4VF9iu+2MIxfg(ZVUjf2I#gC*00rBT7MOTqHj!3q%gQ%Sh8
zF<iwPu9^;4N5M6h;M&)49Y~0tWQc)r$V=~#do6(}D#Uy##PT}C8WQ@S*|1V0AlS@a
z756s{(@mI|3)mxjf!`g>@<EavcUs<8QeJZ|EO1z4iiQKMLr$RcKN#UscuYF4r!g)-
zAu!oEV%5tsh*^t(43M=Hk$oMJ3yI8^j4U*cEcV7kmR?5?x&^*rwc~JqH&KiAYVZMb
zSg73x04hDI4Hea~6xDSdg}#3QmW=Knj!NK$RHsvsJdRS$0}Pe2zk_g(pvY<uiN?VX
zn$l&!k}(9jF%$PjjO}Q};TZhwm~lX?3`?wnYAm)*><BbgBro>Ka4cv$wg(U=%n~QB
z8i!>Qhla*I&Wn>9j@#af>juONu*A!%#&222cR}O1^5SKN<Gt&mtyvPJRTJj6;yVEe
zoUjC`(u7%bLc>-92QX2RI}vJ=@cLIYb!p<DLSnsjqQ;j*Dsa*Ob5fl`5+N*6B0Q--
zH>nn#M6jJC4o+@mPOec%#<xip3r|MnVv>u{$=KV;qTrMk=9EH(6p&4dNO($fZb|_<
z1#3G+7@SJflW1g<`Zzqbf;lx`A$1#_Ds-5dk$10{N_*sxRt8ARV@})3O%ohWLvGz`
z9Md<M(*;!13t(wldFlMa>6zB)snGN}0D_Mjk)eP{u|~{75xk`c1R9aNg_r?k@Nj3u
zDr6*CXAD9!xJxr)&>4wa83TY!F7C`|h0Fx&%zkJlXK5z)c6y^j(gW_SNOWe%R%R<8
ziz7TMA~y?;&O&Wvv4fFaidhp5S(M>OKW1dG0<y&#$##ew%tI~>BPkrReE``(%-PKf
z*{s9a-dou)Ku#rd4vQ)#$IChg3eBm=&0!wS`M8zy36NXPocmBU*V8)pEi|_*H<xKR
z*JCT!0g#7e&SO-~`(T}C56#QU&0`qO+k|Crmu8cz=DTm@y#eHBGUwBm=DVTuUvK4S
z01D{13l41ZkHYiGN()>S3SL<kAfN@b;6fMXLOX@RSnEPac%gG{p)I;FW~-0}Ttv)V
zB&SdmZC&&TpW1X3WZnk0^i8rJE%<s^KpI|T(+09D2fy~svcDyLmjQNPL4Ft|_B?*$
zcno!pEWTMPA-*p0@J$FBg~H2ALZxGUB8mM*?Zeuj5yz!bZLu-F#Bt?#UTxWFj>HIF
zhlFxyQe;_*G$sz|7*o_1S8^LuCLLel8(Y;DUvnE<C!NsX8`qSP&~h8sN|)H~8{e6c
z*nJz{bDPw+k}%+#JY<?kLu)b`Nrlh+W>&gtzWg=NI$|lK3LhGgdi)GvjeS2e+>x%{
zGsT{~tu*Yn%{zu0OVhjfhMe)zUr1w}WI(@`)5*T9(eSP*dt75UT$8_DV*swrW2x0w
ztwq?>>V?;)=hf;C*CuS&>VWIwS?XS>)`i*Boo1-et->Kr5XLe1!#f(5_8NxvP%)wU
zK;3%v(t59+dbPv)kH7|1?gnSYhUX3qPOt`*>oP!4z38P8Lw|#cq?VF$<1?_L{0XC~
z6TC$f)2QGFdOG%4O9SrJ&^V#nqzE>9!6$6$2e)u~Y(>~CeMf2M2UpQ((rpK+M+w`@
zz&oa!9ow5Ft;O}71m6+1P{lX@O>9x+Zo%GdQG+yZvZ8{`nnzVzUZGn;Dp1a<s6Jbi
z3Zy08j4#m-{xJ&m^AIJMOB~(Km(~u4R`BPI!Bb>-?p4JZ?Fm_TcsUh3Wn=IHKi;~#
z7XJ5b@AcZ%(pytk+w8YmjoT}`%vw-p9Bp^-0YCPksE!Ky)IJSx%^1hn9lW7}bB?dA
zg}y`PR|mp@z^j67F{)FsxKo6@OUJl#l%8k?LU4PFbrz+#ozQ`6i@Gq=;?wP>`G)Cy
zz>2!Ap!wqzHB8<~Z`&1j)%^zA#rhPjZ-+ioY~9O5jiAx5S$pIG=<9>d37M>}Tw*l^
z9Hx6fNYq<-NQg_;%jw_CJq~!#A?0_6-VZOIJ|=qztYSOu{^rD(c+%?@4-g(V6C=`J
zq3eGt+rQXi(?QpV5$ZFtF<*8E?BDk5F#Kb%-OX@AMfR`d_UrfbOPBV&L-(nj-X9Y6
zith}#0tQX^2k+{-j@}HqKnIs{2ef(ya)t)=N6h3j`}&^`(ryhp1BMovhcp$3n48}R
zt^uIV#6i&y;Qqm3S;LdH!wNIQ;@87I9sN%jf>Rj=?-RqBS%b*m!8r_=AxHjE@9~jz
z26zF(aM5XSMdfhST5t`+NZojF!x~ZIZ^~rz;FfWs)(*;c&EU=~qHbBr9@*eN2BHCe
z$|3&X5h9{72Fm;LK?%`l+3Cn<&C$Hm(dF^cRsOMcqOncqv2D$<-Hza?--I)36mvwu
zN2i1*{uF1wgD%zxzdBQVKMndROL%2YakCb5$4~f&hypVn1Y{%xb&}z92H_DC;#ZLo
zRs|9NAs|JPkt2gBEeNQz$Y^4MXtfCF<;WNVf*#5dun3T`xdd?t5O6V)@K^-#F%k$6
zlRVN2dQ41k&%DIsf+Sq<rR0cZ1cKx&@Sg|}D>4QtY2iO(Bz{he2~v~8*Ki@y`U86*
zfUj#oq<;o8WW+bpA~IQrnOT4>kc3tfFdHqfT@2ytPMEzM_-z28Qx(ib0Q}B{&>ac;
zzzFu7An=NT`4EHsItc;-V4wcr!Kw&?U0@+d+%P0Tgas@r1~+CMKTZpl5P+LBfuAA=
zOLM_RbmC_Uz>pTWIaT<1jIaVN+#)1?2{Eip4!7bAT=fT9BY<1C4sJMuHm!qNCcv%h
z(Dn&XXD7IO0@~9F>Z<||bV7%!KqE--SQT^v37U!l&mf_5F`&<#c#AR6<p9uX72bLP
zbkha2jl|n^f$m#?4r1_*ETAV^ptAtH3oYo^`^n`4q0Nsvn;`FDAe2}zchi&Xh5zrs
zD*+IeHr{UmC>|3CUmlN;2}(=?A{E3VCxOOAV{><GGi+>YpaBHd_8uR%F<!$Bc~%Bl
zJG_?IIIdgo=cU)2c5ZCl*ZhFOfr4wMy9{o-l7XM3wSltoyHBctih_GeuDeBrRsxnI
zRif6<ErHKA1SMX=bp`iD<vR>F1f}HnOse<g&)Y3r_n$L;vHiRIs(N38WctV6o><_Q
zS>gS?ju$J5UxX%f)c<z4cJY6GcHpV4D?}3NW6AjGJOn0qXx7yn;(C~sc^E`;Fq~!Z
zA+|nxk}oVUG)eo&iYYX0k}tM;%2Djl5S4Y*uXkk2eO%BLTCB~FjGc+1I)ZAOc*%#B
z{bl#FJTAgH){;CawLPh#I)Rf|IB$fsRkK!{&wt-PHj+HWY@e8vo{m|bOt{*jwBeJk
z%yWY9&#q^MOd-qFXU0os3znzkrNmoI=X%40`_*Uu)f+C<r#k89#P83<P(+tZ7ds>{
z9H@6-*O@8=!20(B@bL1xLjNue;3^jS{{oh3M#Y_yClmi+Q@t^K6O!S4QvB{;U@6)9
z#s6Zn-KtVY=-*Le8M_epA7J^<jWoXv`X8HW?Z3eC&|?W*#*O{2P4z!-q!;P`1(yFA
z;eum<@t(?pqW>K={sSzL8K4Jw)V#p#;*!#PU|A9?qnPk0sj~5Y)QHN=WyEj22bMjV
zSh>7);y4YxW8)K(uy%&dsrk<fePFuUA<ogo&8_XInf(2^ox`Ka*!Yz-!I9%{-#-t`
z{<yv=uf9mU#Q;o*m)>lfql3Z3<R^=LX1!r#<Oy@uLiq#!v7?V0w=eUD!YDB!2ESD)
z7-VAT-+J(mP*|xFv6+pU55`%mn}~dv^z&gUp3G?y-uQvncqo>Q6T|zO1Av|m)hG~F
zlI|&)uSm{lZnyq^6rN(-SDw$?Q@+#?to{C{G>CttB}X<rgzqKyDue6M@oVLUp0!Th
z%#9ENlv`2PCt}cN>GaZ_p)fL~!Sd$Eu^mao8j~IK)$r<64eKu*ULr>W+DbC=#LJ>5
zh-kyz0J&wcv&59wn~(sr%Cij`xswfI^M<vZhd88GF%0JyU-0Z6brV@!2xdl9RE)_X
z3qBqcC<n%63;27b?9PxVBSbsp_YdsbN$>o-B#*v28A#?9ci*2z;c{<bpxD&LTQ9L+
z+iyz8?WKVnNL0A<hzJB#^?fMclx~N{7&@>BUAlAcgtM#cY=^aO8SO;!H!t-@aIf?t
zqeK@R*fbxTvN6CVejVDug}$I(I6k3%yBDrVuuK3jV?5eRy5T5$#U=9e?S4wCnp6>I
zug%eZ8qrzqerg&V`~~6ACBlg?d5rjy=|)h;nHgz7dw}$A6XHUKou(h;Kx1pUa$?Bt
zZ=}Q9*m?k9(SK~JD!fO9$uAv`iqhYd-|rbenjQhPIC+mt3sW7B%SwyOkIO5YkB=*A
z2YF8_8y6f;s!(6bPpUh99iP;oarsVb`>CBy>xMZiPV2|TPfjrn(<*#tjq@*^&YG6q
zRGc-heLOj9*$U-5NA0CLowptqSDd$<HlLigUk>tJbo^Lwy6C+AQgPAs``5`uHvo_S
z5{*sceAxr$s=Vwak~qEWBYV#Owf}*U^Vb20edX6d2CvhvL(F0P--g-KoWG55msEZm
z<!?FtPhcs!==^;`@}Tnj<o^v=YD%2_nA3SK@N?e4$mQo}WBaO~3+7&D_n0zF;Me~)
zYCQY3>NX^BwdS$ta<%S#P<6H8e|2`X3B?n<-h$J(UT=qURbTH!OPpWt#y=Ol*-JKZ
zz1dH<ufD;2$?`hCImitYyge*TbG<z(Evddeu53BKJ*gcMygO}N%$AOe+;wfQY}3$C
z-s>RGPy;yEhI!-k5XPwih<-46e;c*xmA#yq%UAdst7O&5(f_3S&#x5Cce2}?!7n1N
zcb~lL`ne?Y$?N7sWVUnXa;O`88@BkaoAsKe8uK>-#kBJmPeFP7k;6GX0g%ue{FTGa
zoRmQwn`&6WH1}Q5itr#@2ioJsUmFxkwq?(%3wV-#AK`ic07|2>unX^Rq$@$8JKq(_
zsCS@ss$ih2XsI>iSXQi&h2=IZnDH=Ph5L|2C~yhMOyEwYeA+{9)`-RNHz;DxeTNc<
z<tYnBlRV<(4;<>Wf&l?stS~+0VG@@IgXYohlCMSCm>JRsgDdM)T>1y-Jt?0{iEjl-
zU9-k~^Nx}mEshI3WhE40R;3}Ir4BV9X8jYcLN8kXEUxkyyOM~Sx-b+k?UgR)+d8!|
zkJ%)c0UIf~-soVKaKciBBDayK`pd@mLN$f2`0a(pC_cZZYU$7r)J4cs{76*pHh3nq
zEUaluErLCyOu@%CuW78E8$9zsS6IJJv&KL_t;2wWzT_zPo%9^e^4_$#?#x6<`u8k;
z)q~IlpU97T({W>mwz2~e&)<JJKwekwf%nQ-d^38pC4deJPi{1c$wZZKe_}t?&z}yl
z{D8^*%~1H{ZTOTuw;nbrQb$?l@l1?CV*%Dr1yv4FJ?-RV7OrPJN{Sh}&s`scGghfQ
zkgC;VUT=($stT1iG}YJqD;lNv`AE>m)IgUhC0gzC{cq>=@tQm+ADundENGh}G!RpN
z5n^Xh^;K6zJSEj;f7iHbCaq@hpgd!^9B<K-^t<=Z$}Y_lmLv6;<{c`8Zwk9rPF*&+
zExPIe=ES)-8dDYfx#pw!z9PhrXh?;s9@tu-!lg0MBMoW*%v5SgnQ2dngBmepRk~_-
zFXpsEN)s5loTQFTZE{~eEcZNib~jzMUK4-V`s~CNwqj=eoBCnT#EDyi>6#To8q){{
z=k$Hvin*1n7t>727moqcb#rqgrsdCXtfiJME_%fq5{bdD?QE6{1C1EB4G+AvOf1bi
zBpAOU5Bx1mHqF*(7;gj)1KpRc%zhg&07DO<Atqa<43Z4^)JH*xWouJe2m|?>BY3BY
z4J=Ed@d#(wm(3j@kbd3Itz8#sG`>TfgX&C0T}lX_&Yfx7CsgsWJbmR)OlRiV_h<I2
zqPH{g!{E<@Z9R1ra0W6~qrTyHIKtiOL}Xn0pwWnwZ~DpOyu6sc(JAzMuLn^P<U?a)
zw}1wbepyCgtKRX;ryu0!*NDVhbjEHI8#LszR>&}*$>WtCAjMPrH%mT}uFcq(+|_3Q
z09nQq>Su#Ib(J89nRzCS`-d<|6}_f@(Ci^Av_ypX?UuUq!(7g^qUSOAT7<!K^)^kc
zdYx6wmA7owB)FA^Y$wXo(q=Uf1pu}}qB+QJG4Du>HPAwU_$3<f&N`y*6YP|Kn>Gl-
z?cQi6>|$lmuCypfLjbOIL3qf}Y%)dHllC|}xK9I#0DwBr_pauJcY-J4%IzhdNBQ%2
z)K_mbx(Msu*;7G*;PjSmjhHq4-GVJNK~NP?=+fZ#DmCy*eE<*m^%Z08re3SJfbies
z7{dJB4pvnhu#j_QcosGL!^ja3?7h_)8qh00HfBQpJ#(CaOpG+OmI|Z&FjQ%A`v<tK
zW?0K(6T;Z8niDqb^%~$~c5t*6(<WOSSOMy9Ke`t>@cL#a=14$KEEdp<F>}EFSgEzi
zwkBI|TcVa0+Vde(MPc)$4B}GsdA%CzMpO}2R%QULM-IB+b;X8TK*xi^RuWvDT5lne
zY-7#1ye|?{J`dhV(Bcww(t*j!spWbGxZeaF8`Z#PF9e^OzntH&#oYd1M~%OC=rPyB
zF9P{3^ZX6o#v3<!ng2k(GoEL$1}+VCVKx8Pjr2XRd=fY^7ruk9`tPXmS3Bm<WnA~~
z&vDQrLgLfXW?h`|Y5)d1fEYu%$oAX*lOhPJ#svk>e6q8H>V-k^@&MRiQ6iM*M-Fpf
z9@JI@b{tPf&iw(u)C=R~Q}+u-D5=GG2qX0lk}H56K|ek-pk}{s9S%F;ANrd21s#$B
zvg`i=mI)Mq?==4bEI)CClOfaK>fCq$G~oXLmO2i>5)MxUjU^;iIW1HrtWX>_k`i{3
z9Iv@0>`U3-LL{8H*<HXA@6y@auf;z=*gOx#y~0_2mc;$8SptT|KRK|#P~yQT=8#hH
zFo%Z`>Ecn64`af`;|`e;yv38!nNl3Y(<GS?#^RaRj7U}SoKnU-Z}^EmCeo(Bel$4J
zs^OD4N*Y@za=ItdMg&kF&d|6d#_%fYOHx#mcU0$gl%<F(T9v*RC8mgun)wiI0wNsI
zi7x4h?nXs6P)7B##n=`^dj!SY<OO}NkD3P4wqE;>?Zo)x$GlQy{Zjgniktrg<xgQ9
zV=c*gkuEX<i4Ad&<~s=feHi>IjRJc*4(o^~x1MD(Jk|qc3QPd}945x81%ML(B2BE|
zkuU;$GGOi}5<mhTOM)nC9R3Jvd`rAsZvvrI0>55DxOW039>77Hz^xXSlb0AjoOrvH
zC}Eoj*iI0Cnw0L4bOTKi&rcGdP2zYOO<iWjjz|(ZV!Z-~D@0&OpPH~K`y{E1u;4|+
z*|5aCkw_8MOHuSm5!^{?fTaA`N)g0L)#FJO#7cZpmMn9V$T*T}SC*pNlS0mu#&yHC
zr5f=@iqv75)zK%_LyhefZS*G|QrHM<Fn)T-2&*c7WJDQBR4Z#tS$bSqER9=w4J?hZ
zEKLT1U`<RZltdiqAUNJ5l6f*h-=;}#BQ&IvwIVoN@fm7q(=?^hta=d$_e=r&jAuR^
z0VWJxK1t}eDfYdYak^QGK3O(590@-3<2)&ot*OS}l4sv$96~eL^D|0DG7Ln0M)4tY
zKB=G8(%po!eRZ>;KH0IfTusZFD?B7?Qmh-T$gQ{R$2S=2)3WsQ2*f+#tgM-w<eQud
zpV(@Aa%|rW+*_m<1#-tYVCN^IwKWachQOB&rb|nsqRXHerMmN>B5XqvN9KeH0|Xo4
zylwfMqDr$=nFdmsu=jvUqXKc?0?CX5Y2N~xA`7A06k!5!3zPgGh#Xy!LPokQ+u*|b
zvP_N9JT1pOo4&%w$A$U?MTWdZPa}&I9E;4<^K_5%UJw+U@D>}X7h9AUSt%90bu6~J
zEqF^?=rme%FH!vvS?pO}Y}r@rb6o62P!hyb;-_8$b1VstED0$uvFIy_xR<38lt%NE
zMyZ!3IF=?wmZp@Kn)j6=j!V-B%2IjCGS$oS9PcAsk!3~YWoCV4WyfVD1m$Hs<rV7X
zb&mHDuJWexa?`%@*5mRPf{JyXigxvi9><El$clmT3X{Hyk>iRXg34b!m1F9aGme#W
zk(HmzD~<aqmyatK394A%=RA`Zf0LG=7MW#7P|d(vy^T(?S5GANAvz@>p`fi1)vs1w
zsa7Env*7t>)Cju7<(IB?n>L(sl-H^&AZV`@cdWT;dtyQ1ZU4brrH8a{yH--Ej%t;;
zsGyGCNt)@du8^{xUL%(HrzCrOooTuhk6C@*Ts`ZZl+a0iwnzi7S;PAWb!m1D>Uj+*
zeGPI>a0&@21^PxlLaAr;jgTmDHTp*WOpF2bU4!mxuGqOo*miz`U6T=ClanE(Q=X(L
zAC*C-qzzxQN_b=TenYr^vk`eybYHW}Slv4_Ge-?cHw{{2KS{5s7S8s@=PTxRgpz*r
z)UIZd!5SzZKFP2sRG@}fR21rYyF^?RDpaI3*{Oy2OVgQyM5-Ch`#TBbNo&liXx>RH
zOusFku#J%#43m*4^`rJYX{+D^*U?MVL{Vp~7BtJWzx~>pHP+rK)295P-A%XMS*c^d
zuh}!WV}!odv9Dv~t{q)L7O^TmtwGbumq#hn89v?i=0m5iE^273Gs3!KPrYluqGLCz
zYyG7CEvPHRrt8yaSAbsUD^Pc60;ZG8N$fha``oYl#~66WuM5}#{&rV|lhxHrFY<?w
zb|VUnpLKs)-D6_Y-L2l^Y1>2QoMODx^AE6O=p|sTT2-$yma5s@s(u%laHC#xcPqL^
zSIzD(_PC>3WW1Zxxo^R=cZs)8Mzc?<gN56lm{+#D+oyU8QH`Q4R==&*FfZ2X=zTuk
ze|X%lPc&f2KQI{4zfjh1v{tO^+;65ipyoVa7d`O0a$sU);P7a`p6DNV>7+Sm;XL>u
zdeBo-fUv{ln73bI4dT~9&Uwcxb~^MVx=*gMZ>5|cCTki{$)e;;{A|s+QExc@_fRZ-
zf13YrFbn{=9LZ%E&6mZD7MhP1`;Xq+RLlKGLk#&+vse<$iIX}QXd_8Ln!_1HW9j46
zP0nKhdAv2UEOna14YCZKStL~qd_DXueZPqYD(Q!u$Bv`MBAkb#)*v(d6EU)Rag}3P
z{xr*{WA*jp<g??Gm*e&1lfxYoST83s{U?I+CRa2k*7?WVPpQ7iPE|dfB(a^GfKHYt
zOzm_`wK`92j^CfVPd@oFxj{6wB}>~P%lkX);oos003#h%C*zzsFD2tcs!k#r7h2j*
z#%>~R#sH>=0z@n^6D0}bh3{wA6J~pAXTSQ>ku!1&$uSBO6N&zr7Vn%1Pn;X8o9mvQ
z15eNq_RQc+j9>l6JYbWvCy)ywa+xLxn6Gi4^J1OvQ=IRzp1)qBHzwvXt)e$a5?Y?k
zqZ8&8JLmV;=9RwA8&ZEh9$ffyx*!2u#E>o63oq2`E}+~N-mNqE{^9Viq6-Wlga#~5
z=Pmf?E#<i{HODXUz!sG_7rBk6Gy|rsEEt1bIAUFB<1GjiJIRx^m{L2*bJihwT7(4?
zWJQdO9K;-Da*&D%f~s}WnohftDozirnU8YI=QGPH!mD1os}*jm7xAmA;CbVxYtA-n
z<<PaY+%;9m>a(3SOW=AL^ZJm&I=p%H{p>2!pVdMamfk8)oYBDx#KR3F*}?h?edMxX
z=kgbq_2?^1zgyPe`pgE|_UwzG^%r^TrReoK^d{-o4Y!+t0J_0Bn=QP_wI^6xN-SF?
z3R?+VTX?RU_<sipnTCkFIQ}wj@5IdRovoM!ZLLLbGFERs4BR0j*-T$w$cR~Z^^|B!
zi-nD8jw5!}U(fggcb9jglt_Ebzn)CuFRN7boJ{r_ycZ@foCxvRV^`QNw%&dU-G0~;
z^B`f5Mq@wQdjAP@pDAzu3(K~|_C6BuMJ_jz<%Uh?FX<OkHXLiu?^?U7#_V`uzP{(S
z<^Y@=_I(#OU`Y#(MeRXoAPz_fM?&xmjpCQgRiUjItY}yAP^?21>mxd!UA@UK-r+~g
zLc<0H+<;RW!2fY0U927WA2-tLX#s=)fY;s;9ohfyMRX_OzbPgupEv(?5$zGOa1wLj
zKjkZ(bH8?^i{lKo{;##8r*Ql;MZ145qVM71Icx1<qwj<^?dUx`+(6;3)&!+aUW`q7
z|Fd?K!66Eah_o>Z5%P;lh=9iaa}iDTE-@=02Ei&Fk1TwhoO=%sRWggJ?Q$wu3Tm3n
zOX^$O+Ihp9yUpu5XdBVhsJ@ZWF_NmmrrvSNfhpwh?9y`j<maN9rTO)Q#T2iVgVwd3
ztj*c&lcd9M-(km>QD@^9SN?lHFaW=$-2<-8`T%T9B`aC(y<m}yP5pnZ9q$E;13(hY
zcol7We5~SYuttVyh(gg=8X6n=01?WrDa@5r)NwOlRg`)!Sp3PB#7UQ_)VasdEK>I3
zxk8dUl1>GHRiGNLXE9oFG+h#suXnG>EM~6KZ$1CU`+%RN?$s`*SQK8BK~vijuBQyR
zdaYYF$`l>h=c?Dy`s3Rk-|(ZYA;BsNYFlq^Ta(Cl!X$f;dix*`rAT=_lf!*OgpKRq
z+)cxYrw13!#{g5q<Fty^#=wa?#8yG$!TLu;=EV8Nu!|b*-`0=i+q_XVQrR88Wz&Vh
zW5JesZFI*AeHy)%g&sNwr6{f+*|;6oR}q2w@twW0FMj0CQ@)BDl>3eG;5W*~d^|iH
zBK>51jkgu#2FHafU}xKH$$?q(n1dma<n*t}9Yt7VshHetLfL&;9>OQ^uS~*KqK$W=
zh{56c_Sdh!ZA<f0Z?i^oBubb?u2v0G#3_$%vl0JVH(=wGh)iN5m!U>%M^H@TJxvr6
z@KH-zmz7dZ*0beiOJsc0_gc)70Qe@INLq4*(73Cxh{Ik!shHHMzI7{9xc_K2D`o!e
zI8tt}j0<YeYr-k{wA}VE4--?y9gicPF<KDc>%~qOSdLxF7KEk5O`87ZcB7cr!*sSJ
z1b#bKDwFJ3?j2!THj;mC92r^J5X$wo9Ccj4$KCPE5t-Snm+Sbnl47SEBT&1eQ(5=<
z>yb(=9&zSK<2+{?H~tvK{3-L)0)-3l+Q+E18aDXY6e=kBZnRaju)_6Ssbz$K`iiaX
zMQ6wU7_9vYO&{JdM1(KY)D);7B#XNXbL06jd3n)WQzvuTCH>QHWB}40TG_`SvR}u+
z9QGU0M6b`gJ@TY%?W~1XwnMw$MN?CKK)8^<!Jf{_x<OL1A+JG<0CPW~98F!L8rR{G
z6H#SvKV_M>QIq=_EGE-Qz3}d>+;>BIqIInqCx!|9smIs+;;*o>UVRjEsK{$(ckbKz
zwHilmJ-;?Jj~razWuLgJ#O`<t+!_SO;%-On{psBZ8%sgqMuT=GG1T#VtgVE}M%oMe
z7G^G-O92tF-piH;A-;Cynd;KG2u!^c1#)QD;S@0`=y4L!IZ1mFf7>N_nT|h2_ce^}
zQ^irV?=K(1JdsDq-?fx-Dt?5Ty<q=EIqy1l_RKrJ{o!1LPUn>b>=EpGx^(!@`6<m&
zpvZ7Rafj>A)v2~$y&0QDw^yB*8P&jewM~MB=jg;W(!d(#9P-IUJe+bUjF^2G^xZ!5
z4=q>lqm`{u3WZ*ZjC**fnMYtWd@opZ3#qQNCJ+KY^$xEMg(T+TJB0VSuGNMCW^M4j
z!OC{OYr`+dS@FZemCYFHA{KOaz>u8;Uem9U#^d?ajER6nj4XNNNCGQ9ikeJ=dt1Z`
z+wNUI1dEZqBD(T2ANbjrQM^}|j?Cj3-4Ucu<~BjeA&c$d;`PwebLP0BrCnx9hhde;
zt>|psJyxLI^XJD{35D@{?E89Z8m3R#<KfYq5^Aa1zIs&Yr~TY&YE=5!6jWW|h0G>5
z5Tma5WUj9O0PdwQ!`WG$7NReB9wQo0pi`i_->(Hij?{V~0HDR`#Gk~n@$RKWgrtx<
z83ACzmUk!py5fs)9jzwmea>j6GWO9x8SQ)VZzOp4>}Eqm>!aQ*vV<QEc(A2qI60fG
z-^wW;f{qV-Q}2w6<M0C4bQpB++=aZ~ApU{S3E2q3<azM}fFBWgcOkC;R86G{kLf@b
z#UlC4%nGVNX}!eeEd<w@16aXP*SgJsj#BPG9hnZ3nQkohYvmDf1?cm%zRP@qQ|<`o
zjRARxXf9DksCeCur3zDlNN4S_N*((NtvSln&n6A^AJ4=yKv_CPfX02kxpiNj7W_^|
z;&YEK{6wXYy>0>kciP$>lr~nobe?eNprJT!Kbe@;(WXEruAUuF`F;Z<+XFk;fbcKF
z*eYyLE`IHZ-beY=&eINI4RAWs0xS=GZ1s$fcNRA&(~KBl-|f4?X=<3x&CDzP>B}-H
zJhjRDLlxbQ)Qh5@sUQy=*IxJ-sO-F<Sr#L8j`y;{yzp@vu8NHUAea8Z(QRrwbB7Dd
z1kmX6V+)SF*dyS;>iF=>$#%=8o_7^8c)z4)3+sX}?D3Q=Zu2kNWZcSqi}E*lc|M{S
z8fqTqL|9{ex9<AO7#uX_J(>Qk8qKWg3O^y-l9lvq|JmmTzHQ%5@sRAJQ?L(y&V>z5
zyUyoQamSf7UBit;m84jF-R6{?rzAtyigi4WRjk-;`RWaE{q3HBVcqK~{Wzj0^G%ot
zy~rf)(+zQRhZl`UVF{rkjHqF$M`N!ooELiK*mFXyoI^?Mib{1JC;*6{I1~-7<FP0u
zpf%y^DRyfB?ve=g;JB$Q;Zydn${#SKuir!23ezU;&$6+@SM7)Id)OYa??~fK-+I#C
zPIGw+LMQ=H73VoTy{3jwPl%6$f^-2z3*X5c{Ol!Yn&+V8P%Nw}lzs_p+WEB@z3AwS
zBp>>ni)LTO2>%lE*5cBzc1Ss4z+4C25&)nhN&*sss*GVRiBXA{)3mJWdaaK5q&})9
z<#0V+VfNp5%?AhyIB3!A%zSofA-k4!)U-2n&mBZJo|IpF8U3*SzAln++Ja;NYipY<
z4%N@4{Wa3;_YPzVH7FtPeo1YP%bokUcNfda(r!1#>jz3>%GBBC5%XN<V0~d+?)x=M
z>l!w$C;&Ct83J!K_`t1z(-gDOZ|Apq;DIF_LLUFU9y|9y^+g+i(I-r#J7e`i#b-W1
z=eu<Vb@ZD2?E<3E!>9E6bNb{N{vb(ty*=BEV~1$X{Y7*}JCgP*+@X8G^6K}R9HsG$
zeM*9=BmS>W91Bw4Wn3#|3#C7oM>jH@qXgJjqh>&&T$#NyP9H;tpu?CU**=LEzsfMX
z%iq2<e^JY6o}{cevbzx(e?E1alNm^>SbAB38TUdgZv2W)9+GleQ{KRI*|oe-872qV
za#R1k{;l363?W;U9HP6NK2X?6(cLftF;7=ab@iJ+aUynjFud^``p-r5f5F53i?hqP
zfV<$&&_tHA7>rjG2J4!O5Dyyo+e^pk>JvaUF!tALoYLpu(f|VEz?X~A8nQQLG|*MF
z$pd3TYKSMq0Uui@fZiBJiUK}_h_DUobEp!Lhja0i2JxjsXTyXa4Z|LX1Gyk#Vuw%(
z2cT5A1_@d@|1(VWD%hqWIAT6nekmv<2(DHNe_#zS+lBwd4w*y43!jD<I)soghtw8?
zBr3q=4?_Atp$W{PBF{s|>_VfUp^3$zzxzTr`$H%IVGr5EBDO*wzX_Xzh54w4S%inw
z?Su_thx=bM!k08cxx;4@!~Ju^xITuTZHIdRA{aR%{wPL#u#NzPM&Rd1yhleY?nh8#
zMY=O%A`zaTLT=V#FkUIQdBqZIl`(G3p=n(yTZ1ZYld5S8n4?t^w>{kiS17vQIC{`K
zdN@6L6cs&g98EOs_xD?rEm<`5`uS6DlX-8$Ut!p<L=|SixXZ>dZXPkwRIxh{vOTcz
z7w=e1e5_|v?5QN_`S8n2NZg@NoQ+}JuTtXcQiJ;-)6#U@y^<C%LWE_ak8Kh^>K0F(
z5>FsSL{z3jaueT9mH-e-cz__Je)|G~NLc?KV>X?@bQHt9jKeCG*sqsp>6XY%8^b$-
z!@ry;dY#C^ljPczaQYxg93dvU43KV3(pOD-f}i}FJ6V~>K$1sW$tT&%Az4#RPt63Q
zrE!y-w3MW;mXhO;VmzXwTc&B$no?hyVtu4-aid{%pK6><l8;E;Ge~XpNOfL@+tQ}>
z?4?#>r+F-ge?X*_yh<yCr};~Pm<@5@Ch4I*>Hm2Vy__CfmL5uzPRxZ!mU_8rj7Uf5
zB3cn3Pej%Y;{RjpEyJSj*Zu98p&JCHk&-S!Is`;%MMabp5osh<+M#3Uu7RPuyN7NV
zx?$*Uq+y=9*S*%-`&oPM<M_Xv*S}YDeb3K%qL2w@oQW{)#BArp+=N7QhpBKTvG^(x
z-C-&hPpZ^TLU)*I6O!udlF%Kd=Bp$)b#j|{a))+umveGYLULbS^1w{;&{Z;m8agTt
z9oL3VIzy)uptE(*`5EZq6%_f86w{h^%7$~wRzk{7UCQ1}%E4925q0W`c<PyU>bZ03
zWkTw89V+#9CiVU*6+i<6Nx(35VAw7&+(a0DJ&bS`Mtlt;rAd2mos{XU|Ij6wQX)Y(
zJndX0?YuYbKm_I^3}DqsXLCvCNK8i`4|!(O+3@4X9{#2i&3Kk?hYJW<KU2dm&5)YS
zkh#uyUjI_Qo{V2pUXz8W1BVJIOG0o&jYpc0f28q3B1<#zrD7l9>?79`Bv5_FRAa{(
zhcw$rBHLIe+r%Z?EHT@nKHF+G+a!@lTje1hAl(X)6?>jFLY?!zEc4VbC+s*Al%Ml1
z0uaOw^uVVA)4;qEDST#gUI*nM>T+L<<eu2({*K56aOKIj=EPj*dhTTU?f_!BDC4hD
zsfjcc(Lux+G?ZC8sX2Y*c!=O~iGoU<f@+m-^Aq`ZSNWdD@y*u-Z%A35wqfGJ0qFKp
zPhw$Tec`}tA(~|Dwy;mQR#jU~djT&HV}0ysQA7nUnvno3^b{!|i<Y>GKgkxaTNJ+n
z7jNemPvL7kTP+rX7ejt#odjW=>6BdbVO;5yOjeihAxiG?Z2|otP(cY6Ed~yx6pyyl
z>O&FH4Um99;h3h3QJ{>%vgDB@h$;zvJOt4vm7%W7s7cG2RZCf2fo!{FoZMw_tTNVy
z@{pV|UR|J|WW`)POjNQ$c&_LktAePZLMgLIn!EA^K`}=|*(=vdX-S}JKdMswrcy(<
z;+<=y_)T6ocIA#v)yb<0xjC@HO_d>}@?%4)-i?JpLy0M*S|!O#hda%(;MGI!Vms~{
zbIal%mNj@uH9sZGC;MvLlPbyaYh7GRd~|CMTxtU#H6~&;#QC+3XVp0PbrG&LVG#c>
z1ZmOzie7K4ck1erE$i^{>(h4AGIi^1RRcqHVL6gYk-Pb@%lg}ydPsC#)Lam>prV4K
z;ZnIFsiWb1yP<`<KAS6~K(b*8xABCtvCxM;B?&q(*Vs{zI>OyFTmYTmZYorb>g!LL
zQB_^Ise8SXzNXu};o7{#{pPiVYw513+D={&etzgq)+bBzL)Dh!T~za_YtEmWoQwXJ
zE6bLfo1F0L<e8-W&C-11w1S?37HCk**bY1&zlDqkPC^KOxYvRaoQt)WjC0$9Io}e1
z-$uvN7N^n{H`_XR)k>S(#-^6fp_b1zkj&%O%0vgJv1)%3+|DxJCV1OcNYh>@(cZ7!
zPEOd`$=!;F&IVbvDh9WzC%3<GYp0%Xm)L8Qa%+>3>X2=O%QwOm3X@+ob|}p^zgFwg
zu<Cjj+@(p^sU_7Zsn@CF*7-cSQ=qZaaK2L~sJo1^t5>{h76x}O?6$w|^tS4j8|b#*
z>F&YnnPKdKsP(+}gnJHjSlo75(RF{9>b4E;w0G-v9Ow+#Lv;p8^#;2ohXxacTlGas
z<@(X}W;AxEC3lzU^<+uq=2#`?@emaR_ZJQ1mJIY&N%gkw^|$Z!)ePj;=_NM|5H=MK
zv`FQ35)O6~4)jXp^{XWhHWCg8503CqMBnzrHWr*n_WR%V23if31`lNx4z&#omCyJ7
z2zH-xwUMbA>_ZG9lLs#~hXJ0$y|CfjzTq}JL^~s*R0Y973V1n-AihJ8(vPrW0>t|C
zum=fn-N^~{h)Wf*OSMLde~dJQj|h~Fz<+TN07es@jMmGJ@_!k%HszwA|H=a;;M;#7
zu)tMuGIC!ty3RA4PUkEsJqFMkE4LlviWnP`=jGf-S^oMqUH~3{k~Y3J$}6-#ya|}d
zXPm&3n>ZE}`ba<e9NL?*_sejw*(+-z4?cmpJb{BDz{xwQGXK?2Vo0}KK%ppv0ydco
zpS(p*uHpzt?Yka0Vkloz0>Kk6kW&|cX>sqT-go0)^?SeRxloObONYF5lXgzGn0iMk
z_{IH$KT#k1$0xx=B%#*N1lz}gn(##h(2tFC<<fJN3m#(y1Pro(s;0Tdg}Kdhy65lh
zh396u5hIzTQ|blJ-$hOJT2HEw&tOl^Kjjrh@Gh|P3dgHYPfDZHCbM(;6K?IZOGJyy
zckZj|i~ip8n|IUs?en{X3;FLCI;<DE_Gu69P>VkmrDoj0mxDhhR~PQ2G5;(Ot<WPu
z2hwfU=(C~BP7zW{0C{A)L@a|rN=$noy~L`!{HS=8++d!%a%p5?nIT0Ez_-E!TfWdh
zvU#isM<cn1R>a1U{NF(wDWuNy#X{e`D7cr!?}5T8q~0ORSU0OrMv(G+B?<-)DE4cl
z4S>qTYo@kq7uRbdi)$5tR{+CxM%i`Dh;<!ePmQ(p&&5E!Ard2*4Y7cAv)3CI%^T(n
z8{h9Y)EzhMJbY~pHeWApIDOxAXx@CAyXj%DaUr|u#J5Fuu;~`6;A61q*Gvpy*bLz#
z4r|_U0c`#FE)(mq9kEChC9}a$`T<UZ+6mdFfrf50x$opI&duoV1n?0QEbiPk5tJNk
zzFP!k&{Gx?@8${Y)~66QF77rS?ZS%*(2m98d+NIHd$AgOea*W)i+dgSdkBxcl!(1C
z8QcMn{kZV`Sp&TJ#eLtSePrnVsLVk;<H1HK&Q{8SRq4TAG4{dzff?!HNhs!-!QrmX
z!6hH=Mf2gI&i?)D12pjHi8#a@F1hwNI!Zahe||`~baZ}yM4Ebt@%)(h^YNp{$5g4u
z6eQG>L&v9F$BauD*w0URHBQ)CKpd$joTVo`pFw=66FTk_L4J&<pHC@OPsLCm(UwzM
z#Hq~Za*4-hT+h!GmQG&%J`+g&c&76Fly>QiefUfx_4Lj2KU{z_t*}4uOa5pK|4~2u
zqe617$bYWz8!fjx)<T`WOFgHNJ(ol6R^1;IFkD=Q0%Tn-oKi1bS}uOI06ba%09gsg
zVbK2tYW}a;`+qIVy?vL_F&kSBG@<z~`y|H~*}r2p|G2f<##V9vWuJ8MGOPVNd;jm4
z4H%4V>GKz;Nrh$Y84?<XmTpHy+j<)Z{sn6C1;_kjS)T3<{R`B5^!Kv7B<HVXxn*%h
zBYIi>tBN?juCuF~s{xJ%H8b0KMn=aN`i7>aXFL$&3yb5Evn#7>MDt5q+cnGU`v)zX
zXizh8@9^Ss`0VC3@casZAs;kV0&As3VRGr!`XgKYNp)F`mCB6h{K<qY2%nCmEBaBP
zMA0#uwAJn?z>7#d@ln>kxC71dWa^P814%2!qx0GbwxQG^#}hh<VRl5uQ2^JV8AaZE
zZTUDA=;T@62lw|C2L&!wmRY$v?Zu}mKdC>JnZ38;?H57JRNC%VL1}lb=NtScM;9R7
ze2XpSXD9Sh-TcUQNlbEsy)J>3ZV?J0wmquyb*f1A(;~Mz2f;xY%Jy8XUSR`atr%xO
zwDN4HJYTzi5qVuTHC^FQQ$E;0{CxpVKYnm`_UmZAJ&;A%L+_{kx@>~z=Q}!y*V|*t
zA8UxoUC)Q+>N3vm7wnymANR)nc4KII`Dd4;=GPlCkK2~hZT`yNsP7(kpyR2>C_PLL
zL!>7zTQ1UzP-F|~P5O#s*@r^QY}uE}$O#Un`?<A@PS|j){OSn)q!!4Qox8%sQ7onl
z;bR7U4Q?G&%3u;%%v}xTSnF90lf~v-3s*pcnh{EDd25ksB4|)k;}z$6w5Aps)cj<U
zw;rqa6Afw_`f+Z=8^@ZXLCtKmc+#qR8x3l9ac(9%PMV`Z&5gXx6u0wjG^mNqwFUEe
z^#9M^|0k%qvz-I;`=6j@(k1RcKuzw5^7@3`BFeqKf>Zz|<NpO}zJ|a{SST0)VAvDz
zKJJ{oWJ1l7A8BzdBtrK9XER+gzJB*7qPW4emG%((bW}2~>B1zuq}l3t?hp$FQj3LS
zeAFmy)n`gR!Xyx~ifJd2BrWTB{r2{#lj?DnT^rr6+p%s8G_9%5dSQ9e%b(?T*vFH)
zX5T2#y*DzjJ89+cQY^0EbcpcJ?f$SVH|w)%1xk9vNDEt$qm0_=&e_<7g8S~cX2aL2
zqEDv!Lz7iM_y33)j&Yq&&qhn{&X|485Gk~(*&moI>Eaa?a%`};Sb(oB>@2$7tcVtX
zafbSl1&_Yh@&pv*U#^rsOW9csk7E|kkNzmrhg#1uDR$;aPTINJjPWtp*~)xlB$1b!
z!_d2vQGIaDQVQX^*$WwG*x9eeNSDlQyg2ASOvUDxdfee^aeM5-y0m>Vu(~XjgHW{T
zK1<TFk*1%v%)dLgcTC;BK(;f<WUs{?c3s6~m&n}2)_<0{jp-wixr?4{k-m@Gv5`ha
zo_sz7P;mkU!@%K!$Yat=4lMjI&ro~AL&j+iyp>R|;Bw@iKrIJReW-WPiQ$fHJO^21
zs84|4@@CIEcV-?x?T$s-I2AM4V&=$CY#@y|0}C8<1!0mtOM_@mgBklY0>+q(NF(Bz
zp9sEv`PwZ#FrDKi+1s)p#(L&Q(wUvSDEnN9!5#@!J5}n_$fwMTnV!_k9bV5udqRXi
zt%@Q!fD$Pqda}_fwC-k#ls(6x-B+v6umNCsnv?JVHC6yABclZ&BQQKTla*b$S4HO}
zGJYVFO|-Z7waZBqY=9NRFAYyl<pofg8~_kujYUnX0Whb1I5X0~iU3#`j$PK^0|9_u
zvtevcZWgb0!bAN7dq4tU<EhU!?gs-SuCDoY4ql|H?YiCL0jmuz$W@yJ+&;`lBl~H&
zxSH9|3gX7X4ZIF*Li<<;&Jj!<5H4)!L8%bs!T5%d|ARL$Ji|oGT6VsZJawa!%+&i#
zQ`r(_60h0vlttNGDc3w~&&4)W+Tna4I%e|LZwMpfnsr@GgzF9X9UvX^G*?PiM<XP~
zfn<pykC?}TAlAh32`jIT#GveZt?9FDUT4k|ihA#q;*}hxm*#x-`IWz8TXXYeEmW1;
z#<L$h#L-aq)qJe-A&odJ{nLj$iE8}uM5jLm;yqkkJ&BqjnlTo50^687d6Tb8f8?u)
z?>;ul*MtNL)BoZvkXuZwg61EWY~dCf-pEb283<$lSoblSOH^&bZp#x2*kfaZOttEq
zmxujfF=}bmF4j7)XvWw@>!d<P`Lq~9UefY2_0N8<jV;%evp!hUQ6x9hBCpx!kv5tW
zY0gL1B;X!cw#dy_Q;T5rpwxZr<K{v(Bt$FE3wedJA#;wOYHAw?wH(P>^_SCE8#+6S
zal2dtP7<}~w|*2`C<DNRGZ)Rc@@yi#W$KqZT0gG$-}=wr;F|VT)}ub?J2{L`(LVcB
zzpjxbN0w};OcjUY(A4QYw;Ou@s<I96bJcHI-cZ?zijGkW>heQ#MTyF(LoA?VSzs4P
zwUpJ#Cu8@_SZeiQH*PmuwVm-hz51(iDn^M%<?I1^#*Dz3HVHoLFeb{6FLSqgH5N(5
z?4Ew>={)NJ1)hA0Ck)!WcVaR!c^StoI!F5@;X%GsS0XnhfcLSJf=xCi{*0{2TUKz4
z3btCx2lh=F@9%9NiFHtEMEVj6IcA8+=?csZwQq_^xT7Vy&oVxknoDudQbilgr!L%@
zbK2+(Lm!c4GclPjCnt_&8YmUKu&#YOW;Rhdc2-~>w?n!-OIES?XV--&{qyGQsWxJt
zqG29OWA+=8{+|(LG5dR_7fiF<iPeYs*89?ik|TrIKWbvs_ejiXXXhDe&ieM#97y;V
zcA6O)aP)Svx?G)3H^LiAhz?zcm*=SYel`iK?ZSal$bE)O2~7BrpXBZTxV0|YLg@5B
z7_#6V#n&g1Nw;epZ|eF!4xPj{+^!3RIroyoY;^@>H^hePhJFp5rex3op5@@edr_p0
zzeU4nJPq)uKiPt@oTMfcj8BsjJ%n;;7v}5*!D9u*p1JSEU+csrOq8VfYc2Wj7#&K?
z^m}CU3c2r^qn2k64bM+}n!bHam6Vus{MA^Xf9NVo{uDtR6?XIRXkM3mnIQF7M|avm
z_qJpo&EchJDMBqW)eTD^t*FnRL><ztTq*wBX;}AOEv+RGKnhOJa@8M?_rH0gm6|a%
zMYC+s*SJGwXj+%#;chs)3IxE9{{l51nBHN3V)XkvW^;d<C5slTE?q11G@p9{%=n+U
z6A4|*_;=WFpJ1H)%Rc$9TkGZ<)b$+d{xAFFzhX9~h8|y-z%wAQ{3|dZfDkuV5$_X*
zF&r>TiC&fi$~s6e!|j8j|G6yp?{NJ<0U#s;+%dYUk{cYqV}8j_8r}`$G4ukw{r0ZX
zOZB~%oVORr3vYm&*Db(X!`mA#!&~F4cR98X28+)n!iyg1t!(CV=jHR^h0m*1p9_%h
zA<Tykj{fO;Y~-uM;>*+HySw7M5B8;n`F`Z^TbK9yjN!-r>7|ttu}Ln_ELYg#lGjd2
z<U5u3uK-?W4q}IR;Ezv!?w8!Z<I&uvx9ul~ZGnK#?*kg`0|cT2)N2Elt4TsR{KK8N
zBez7NYkgzQo~6e7z3Bi!olr!c0l)+$kt8#2SxS{sDo9+Vf`cXymlRO`*RmWCvc@@g
z@%OSE^F+X@{U5j1rfKkEDVPZvJP_bGA{Me#?#N&iGR}d4h({-QLl!SXkW`^7VxeoF
zLeW>&t@zNL+R(k}(1XiR^p*8QEDW8!*C`7z0f(K(1FxyTH$8ZGU^kF>I3~3nLAVX7
z=RG71&>tU80|!+r;{Et(N}Puc?WQ8sjtC%)h=Boc^CJASsHyQH39x7wlp|OZv~pX+
z@2JA)IPuvNBJr<iSU97EI%%JpM}6^)BH9k;*Txsmi(;Cg73Pc<Jc=r@jpPjsRZ57)
zE{)!tMnx-MMZDtVUwIq-0Z)I6ELywn^?_%MzB1??CxISy>~7X$L-W`@5Ti<7tW!tq
zo9$Ref!HRESo>{PTjw~fK)#=OaTKy~E#a{qoIo&jyry}yFLk^$bqw}cthaJJVS8j4
zUP6R(JZD1u0AsvGU_yd<0!?p1LR~x(HxarWmr0%I;+&X;7jvDHnAV$kwV9Yzmmr&w
zAi|k6h={AndseL+S-VYGzn!Exmh|u{X^J$tb6dD4A-v0(sG!EVZCkh!H)(Gwc}f-{
zXbv3$L*v9nq!pkCInY5kbR<D|4KH$~mvHkcVKFd%pEG*9j&L_2d2~DF4_@kFUeqxj
zituzh>Z&g3A}<w{0L7Sv0`XxR=BapG(Ln8RVu^5yk<^<WHx^2JnO|v=zk=pCqmkP{
z<^Yo~Gig+?v{mthYT5K1^YnbfpxLZ+KXCfVc6vS_<CZfcPd1~4F-@c%UArfcsLwD*
zWHcRR$hu(5_Yo-QWPY>FtO(Ck$;VLRB6xkBDMp%ACXl6RfuV&@@F_9tS!q@YBFlga
z!%znweQ_1g$j-FQHroMNNZ_L{u3Sgi>7+UKK_EvO{GTp4Y~eYu(i}Im7E%WfOq0tj
zkQ=R$>xT~tkiZM7&t*X5vSH_`&ZbB2WTSgF4vBe*K{?5@dG6PFFs|Hm2~@tnPJVV@
zF1lwEQJ-Jf2aKe_3%kyLKw1zkP*7=6P_0n#6jl%lE-2Y42murpaus^Y7Uo$Lg29E^
z`GvpXg&8}A9)KbkSCPAH5!9l{4P11`lx~_{<O(lBPU+H?eai+FyD%0n1aWO8;_O&N
z;LQ{}9Tl4+iwsyxe#w^9gFoNSmfR(pq<EG5gq2t@mX<RDaJ0FwRdFzBGlN?pndPMp
zh*C4gGUM%p5Ti0X*|Jyp)PN*T8Uh?TOKc_r0$fO0(7W>Q0_8FIG^972T)GM*WEG{Q
z$x#o`(He|r{aGBA9Ac6cC3fY|lM0-&in62fMEOeWFO_A66`|><O03q(kFyn?psG8@
zDz>E3c%!OYaFrr=;?hoj7qUuSwaUG%>PEKuy(OoaDv3o>l}Q1+wIqqnO;xmD&51_M
zH`fXyT|$?J>Ikozoue9C+FJJ{0w2qoFy`9raCFk9(jP()N>CfzR=Xuo=c|i8x)Q_}
z)N(e|v8(XEcCCi><3qW#>~`5=Z-{be3FILh1-nE=+yqLx9A$Gv6|QCe_6_6V4Y|7&
zSq=EjyY)Jf9F3Ah?Wzri+)ui>iFykfyha;Gjv8ACn9u8hqY!*?`KFGfdgQVvlD2t8
zve{2T0Z+DhE2(*h004{y&KEQ?m8Y(>dD9#<Bj%VWuTZW;M^Ddnn|5_vS`=Fj8iY!2
zUS98FgQU`5zHhi-YMF0qY20oCFT(+#Ruu=Msa+z9!pD#Fo?$gI(5gMAFMLLrOwY8(
zz(Uvh%@KY>Q1I1(mm`msJ(z)WAc@-zF0A(q-?sfaslBSVy=AjqvZ9@FpiSONNI{Q5
zh=)OuPDuHdUUh(8eL(PyRokn*wm!U$Y|&2k_npd)ozs#c2J>`pt?2c51i#WL8S1qd
z6?Ufl>Y|V8YJJ;<0CrQcbi?Jk`@VEP@a`6D?7~Ryd>P#SDOuPfnbt*(&W$eNyPoso
z(=@;Np3sXPYpEV-t8Z00y()w~O`zU(&fb8Fr?{mkz<+_7jeUjleZ_PY{!+Ao^R&2M
zi$~!g0GzaphqhvXHZK=g*GSqhK+|MJ+mZ}yEhKGkr0Kk+=?(_=@{soH(F_LD47&kG
z=t#%ZXeQ`rrmTQ7grswO)C=>xIAlXt0z=TZLy5<O55Ys1u%Wotp;h~#dcr>N<`4y7
z_=0gbR&F>rZI~QBe25$l2O_qOhTDRNUDy#1WDy63h%irt&oY7-FtX1$5+FBnn2zWh
zKscC=Q0WuXxKq&$QZl;_$I^8$@D4II{p4&ya5r`G77g;N|9pBkB6Qa!%sV9N{zH6!
zRC2#Z8anjc+ELDW?1gmiOZuo`#eEy){V`SgKJ|s+H|{oXt;gR(hd<~eKGNH0?~m&)
zAoS@+J{NueVm<Mde)Jo3#8mpb`Tm3@(U`URsLg`)wHh{yIx&8D>w*RV9|rM~p8h*#
z6Ce%wF*wzTkKrm!EV(x|YQ{dvF++bey`nMt`^!v_*UT(zCMm=t1xf^42uao_B1xR3
zjH@_Oboqa|Q+<|8F~d*f>O@DE|7k$H>hI3>{_+<S*u&x}XZE)Nu}BBc`=6B*G!w`s
z<kp<(GWaL~6jJN<`tRs6gIPbo^)Dvy??G_@2!P{(zEe@zLSlp5qd35E(3Dj4oys-z
zAzMyjUcOLFMzMWD0aJ3xUxVV*tn$Vt-lDqHvSzx<R&*t$J0z@QXqXP(7muLr8be2y
z0|zD+mqzD&+LtJ%(1YR~yN30H#^qh-wZqMmi_6wfbJp8K6!Xe@#*1NSlP4~@%gzSi
z1MY7Ciw9|LsbQTrzL3SU4vqBg#}p`Xom)S<jNT~cS+v(-WV}0WM5Bv(yC`!YN$`Uo
z8WPDFPL=&fbUAk<Ln(?&zmFmpob;?<rbGF|*Y1aJ3M>|M*tsh6^xBIXu9*s^D>S6N
zUiOP54H28n^*zk{S*-u#hEF!wwZ=xGWO(wLo+s#wD!v;Y_iOCw1Y~D8Wdsz?Z@1Q8
zLPPEvTql%PL&f9D;I3T3Ka}}?$=n~iY-cJ~?LwZ2_S~2t-EueO<F6VU=^A|$L#Uz%
z|7?dM%XGM8oy}@_xMVk7)z#T7;-hj4ah=4k&6y9@sMphySIf)qL!K{9N!=`L3m5%<
zJ|*oweat@CGCV1R8oyF5Uqbyhx>AIh0$&LtJ$0#jkl*m+%aPui;!4X#WY<rZeFe39
zmJO+^%a;AwoRwDe%jl|S0wWT7()9?=&W)T029-X62%lwsl@=Mz_52}i@4Ffb2%%z?
z;bYLA2!BkSw<e)1!$}^cuA==pM9c5xw;1hn|8H@s8@N#zue}n~qfLk_*Hyn|=Mg4;
z@2g--va`oBg>DTfv!{Gm=rtA5lsF>;;ZgiAcPbiuR(X&6yx^3tKX=Su;Oa?eWG6DT
zZ|CF^qc2vUW9x_V^160H@h}SecEXDLII{~IwN~E%t3;+Pis#_7yJh*AZ)J0T607o{
zM7o%{i+Bb^AiEW_3X=QPQJA!k@}@l=a74_<(&Cj?n_zygjWe@6XprJbDy|<YcZD<@
zZ9raBnHE{{Ghgm-3y=~!L1J4_j~*Ps3FBaKtvFLjwj2baR!?#IPIjMst5w%i?WFYI
z^X#(fto=%J>LP{P!(5XL?64x@%(dn67Ay|p+q44K|18qh9uzsuKSgkdyOjcMf%|y<
z3Y(G+Sg%rJ0Hey>)_7y;HH4?F@~T#U`t(hCMV{-bHgOMe{-(#7G}7fM(Fbbi$Ikkf
zF8pl&1`!snqsz3eTKMI#OM>BHNg+G^VT`wD&~s@}79`CQTD<~cS#+AjA_X|3-0dM6
zwcX&)e7j>5gr#+QuBk`PZE2A2e9N}FGNS8Fl?M_fw^9t^-7JMe#rrj?Nmtv}oeN%v
z)1b#v<=Gd(&xYK`4E#^}e@Td)Wb_@>ojC{?H1*dHXR)7A8h+;bvy>wtH4l9}?2Znk
zp-8sLpYeO#9H>5SxlL&^NIlOVdknbxSUgY0Z(<tdd9_pd9Mo*=p4=b@!jx^r*E#Z{
z8h~Mo_Ouea9C<Smrr|0o$rCdSd5Tv&-bwj|agv4}6gL{|{Y1)BO~U*{6tpfi*u|-l
z0{)_y>CKEBl&g5h0ZO-?8_97UY!YSI_p8g~IZ7`n_DXq)3ez98n1Vnko+AeB`E)A%
zU-<k(w!vm<UtgSLXDQxlgxD4?5;#3-6`QpSGND)k9QG)JHp&8A_c9m@x?eE~e+>_C
zWTb}#v?!pp<Ow(F#SF^5hj(R8o`sogy05sEn|H#K2(yL|8a>#;@1k=ZXP%J7_h}JZ
z$LKj^@l<Un|6m0~R}8F^s^&dp**S?j3R*h=E2}xQmVZv*$rgM*+MBX$pMdbe<Fver
zd;jV*kzYJ}F*0!QyOwvH`%1QG_ckPVdp}`KEk|@wOYukjDJ?Qng=$Ip&BG3IcJ{&?
z8Rst`hibc2fIgNaH8sNPx)tZ5u~&+y4?)0M`C`Q?SK&SKO)-ZdDxE6p%gd@rK%DVe
zhM-ffvc&bP@I*%p<_RUmtDmE>p|I3(%xFb@l`(%SO*T+&-s=U8`gksu97&=b+;<YB
zF#Hd;x{ceff?dY5jnwj}zvREqxfV>_kk8i~w7?3GcvKYnJ^PI@P?PN4yAqdGz`vu*
ze~N5F3iLKrrs`+^6r0go%6zhzw8DnH0}~Y*;;2ry@%80bZ&~KoUN^twc=RFI+KQRs
zCa*{3oHY7R^f!LpfPtSD70L8Irrnsc2yCND0nQ@xKj7K8+@DoWX8Vc;1iF$vlPr}*
zy!79>Bj$Ish#Nx!Y<|yyks#yR7U6^E;RU+u&E9oYs2|0WFaq7}Snv9RDn2PPOPzfe
zjD~F9f?vM@i-=<5#tsgC(~%p(KL)W)L$)?wg_sO3XJwn`--Ctsx$$mCUjxb34~cIJ
z!~g`-l$csc{3JXOOkMSsKi`hr>$s&cRBI`TixWJCUD0yR>95Vfw*D_vzSLXCx3j$N
z^hbSLrZ_d~+><DSeAY9{;&tj`C@%9Ol6_962<qyPNDgpU!(eRSN>#{yYWK10Yctzb
zx5WKaNNOQI%PC&3=6BoZcHecLO{ZRGC1_j>p^2oL^8nYPeesF7@w0AtpUF;nQbD1K
zdZ6==4xbRuImDD>w+?83;E?!-&P>h{H1wvv0+rU%xF*DZjrj4JJn1oXbLmmy=t7WV
z97Tw^#O~w>bjZ<~pMK}w;#xVAuPRl&-~0oKL?!HJRo)lgY>|E%?0^l8d>f)bz4y5j
zjeeEJU+MQgIM_^eo_m+z`Rp0je3`igR#&`Kmo$3QFqJd;16+d6)>P!o%$u|Wi)9b&
zlWyj>Uf0x54Ssh#6`#lPt!dm;Km3pAGJvEOj`RA+i}n_Y`=+*ya_E2FsV?iD-AiLX
zTVG{V?6VgmR>onJO=B%t?9GWjSudh{!fk!EejR9^&~UKM9#}U>>wg+?pyw#P6fpD~
zwO9=+h~APa5g&yVpJka2Zc$U$kNIQ&@Kti(5if9&FAn_^YfjIkcj(g7T+CKR9<q0Z
z+b~1x_tP!ceILV8l4?2SPxjcIk$v3QLeuw)CLx}~l9QY18$Ks@;9{(A&Ghov@p*@h
z<*~E<?GhgUmA#w+T}a7o8Q*7~LE4m)l(<Km6%SpULJYFAM5ngXVq7M?oBx#S+&vQ{
zaedS4@xJQ!?XCkVZ;svjyzzJ7VFd6N>1uqLEqK52tHf<tsO75rx6B!f*R3JN@9TqH
z55D5CI~%jdl=Fuk!p*-+s%L1H`y=mZhHTtU=9q6+e!aT3vzY$tP8C1{m|R$Tg2F6q
zLFT}JYcm7xYaFpPu>Wm9G(>zSHNzqVzdru>|6oAuQRAhuMTx$BN<}7gsnidmAb<h>
z!+<DB1^5pG;;R4-^h~xbN=SHG(deN)+JLASVeJn9@FCnjnqlzT$<hM-x&{3>P5o#*
z{di!0iKGvLm;jgn|AZ(07|VWhZGLeP01QL_uugw`PrrHQfQSeHCVKj85`Zfg;A%#D
z*ku?T@4q1!7%t}z-ue(5KoTm(n^a5XksCmN9(aNX9F<1}1$hRfb9~7Spp4m~1(60G
zO$2Ql2KC58d^`jB{2(iaknT2!_p*P&v?e^4sCk;ZbBi*6%Xlv)c-l6&aV6ND48p<|
z(gz4BHwyWc1}StRpQhrTb)rn`37&lz+I<v~XA~+O6|lykzY|Ze6~J{UMmg?ec<MxO
ze93viK{;>s`Q{VB)fOiz;N|b0&lubIz!^>)YN0)`V8*KO^ziVnpa`?KVS`&CB|Qvx
zTly4u_z&>N=>s3FZiSOSj7&L-;Qtc&ZY+E~AYwf|()3HjBvw=`IP$Svlu=nkpKnx<
zVH87al+L^GgRMwkC&qrINFY{p05a-9TJ#sDsMd8<v>!a0j44JhEvo!mOlm{~p<rZV
zR*bi74Ek@au3dD^%UDmwSQI!`2N;vv8S4UzJp{yk@Qg`#8Rx_pcL0t%VU4y?jt)~|
zHrdv8Gskh!CiYc+_?<ccydB7I6lW3>?`Vs5A||-k1?hZCu$N6(ge8bQjdx#9Ac7}M
zFeZwY#V5?f=TNbRi+@O0PDB_crf$b6)v1;A#z>b3N8}~eT(agW2RB|p-gyO9<*C(N
zMQRC#YX3-nnUK7v^kINHUh5=D;vqD2<_RShv^6l;FcMl^2OXJ)_T#0@aHPy8kk@iP
zS=`o~tV^60PuU7gK6Fmu045DHCVeSOfm5SW2NRxLJ8SOGB%NMCZ#kh_C#mueVQu2D
zJ>?XnSqi33>h={YE{!IBAC#~@^#NDvJzgs9Y%0!98vB>jCOGKQ{4KM^16CD6_WFkp
z>)%t-aI+!Ob&k^~wqbc*{`^K6!Vfdn6Vd=d8M*0zCz_eBbmT=_GoGzyl(k`!U1n;`
zV&aEqa=Q4XkF!<5GWj|)-F>o3U|GDKS#E1t#ei(~C)vLgvNH^`*?hBqW@e|uvq?BJ
z%~i6_#M3`o<d6mBq+#ZyG3Gp8&$e63fdO)<pXAyq<fa<tQu*fYcJK!6;05bMI^vUd
z=3z(7;ziABU?Fo6wt39yIhx~N)wNN1-dy<~*1-Ao`NoWi?|bq~X$o|XlE)(R;!5*w
zh2#|L3mWs~#6}9>G=&sC1uwnwHP?JUWBeAhf6$RA({nAlZd4G9C|o)%RLLlOz*Gd0
zEt>dRB<o#7mR1x5FX~?{62>U*<RV|Ak=n=?+`1-NNyOcCk=)0ZKyQ%WYnG6o7E7fU
zf6Xi@bSSy!dIh-QzqKH}yjH-n<i~L(!`oFLxRC@w9-Qt-kkRrHsXic?Q=m+eBJVFm
zU7M<&ma)ApOCKv6jw}-{D^vC<??^9y*IKT$R$d3H_{>zHs8CUCRN?7aA)i^X`J$Zm
zOL-hd<xjRs8oA1lua&>sDngf06|x<bZY!1Cf~C5wRZj9%IlwA$pDIG1O6s&q&($is
z^s0*1DiMY1??%<#p49@G)#h#0Bg@tNm^CKMHM4Rx9L6<<UNtLeHN+h?N!Zo+Ox3?w
zYPDBtc7U~*KDE8dwRm4@tygQ`rPrRc*51CT3&gI&WvVmEs8cbjyY{R*!Khbct_R82
z4{?=4!S(p*^%H&d`)zd?%XQjc>*ZGJAAlMbxEembXt*+LQ1@=A!)v@`Y*cvBD3abl
z)7G%Q(*S`trdd?!WHt&hH(8OE1b`b~d~M?QYO;hi`NNweR-1T0&G9>pd-zR3;O6Iy
z&3>}Y;$NHDSDK{&ExwGX7QPoPUgnJ#uom9-md8ddlHe8}0GycxPA3nSFob)9;Y=BD
z$~L$-67B_PrDSPs*=RWdw?4{fC6R9xGi>!lwi02q>G!to8nzL7x4p`1+kv-XthQk?
zw~5NOxiYqcUbLgWw2OezOOW>Kw)PS1_HD+FEBTI#<#u5}hcme2D81vXwc{DG!wJxN
z$lQ4-*C}M!`3u~+k>0u2+W8ySeAd?-DBJZE+4&RDwa(nNnbsu$@A`r4x+5jCRbzOX
z!&4^T?P%CN7umg(<^a=yYwGlX-UGY_=<Vl09#S~qWWNWnf;OGrShwEz<le*qIs7BP
zf`A@$WQD&6_1>7dFG@Cl7|^%i15lXmE57Y3CG<(>1eEFZSG)B~;{x)n^u#hU%&c%e
z3EMoQVQ=NJY2Rb(B(&*HX6vQ<-fzV=IAA?Y$Ts3;JvRSjLdtqd3Vc;PI5sob;)Xl3
zXSFDmjHDa#6&UK(8ftbP+LFTE(X-ksWId*{I(1|HGhlf!ka%!A<QYC(Q#~vVLX@*1
zMC1|0CI}%fM1D3RY-aeLkPeLnI>8ZH8wehwku<*%_Vf{G*9hy%NIdrFW9HH5SEF=B
zqhWrdl<A|8u2G7WQ9tZ466P_lS7U@mWA1)qIO$_fU1OLlV-DEkD5ml6uf}h`jGOt5
zU!<YNzjlqEEsq;uPaHB$Xuq1E5g(x-8qjH)a5S9I^qbfOPQGEAT$7trHkn-VoK(o3
zoNt|!*_fOHPKmKijmb?xwk95g*!<k5b83RPKyiLUjohJh-ufY)`Xl<#X@BXUKzE!F
z_b<NcbP)?7Vfr{Ryn%5cGZ6ae1naP*y9sE~R4T7wlr&wIb$FUIPTqc40WVI`paJxH
z)-L>g!`^Hq{TyY&T*m%HeTYHM9c{I{4Q?r*%YD8FI^WkcKd>-AbT^NnUl^5M7}sBz
zbYGZuUtlq{sgdqmyjwuhFRn;0uIVpsxG!!&7k8Q#_ZAip?iP>emrkUY&h(eg-9?rz
zp-b0IOScP4_jgMG1|&!ZiD`hu_CVsMAn}`#go{Yxdn75t@&lP=3WMcG9?Mi{-vj`_
zbcKn90U!bJ908^Qj35mV0275!*8Xp9KJ)(y4m*C-|5bG8cK8?arSt+f^k2wVCbME8
z+RcYPrO`hGg#6RZSLs5xRsT2gr3v3{^k}hpzx}tHkKV~GFeuR4?;psQYyc!S&LkuX
z?dD5KCI1zlkx7*J*SxksFD9$Ry|BEZvP!VHw9Y)I`mdM>d2M}%abs&wZ(nkI=TLV)
z8u_vx9O^)f&(6)uO-|L#EUd1r^DH4tRyNQv5!$Wo%-zF3=j+EO@n;uz_aj$l+A9|&
zFgaZy78kQqY1#`7yoV=WE=$up70I6Lq&bykbc<7?go~Fi%QAa;m|h-8^p-zKj^-K;
zcT}#}D2m^)+L_<RV0-;_WABKLrf2ibQz7%as~44dv>A%(=-_ZwK2EM;l+HpQ`R*Ga
zuq}xG-@)PjYHMwf-m1YdO;z#2GZ3y?O#ermg$6K&D5-#<%~HF-J-z{53>x`*Mj@0!
zC&a(j&(HdPk!Qpn*dG7l^SWC78C4tXWx*tDrgGOP^ke@$;=0QEQ>^K(iF?DvN@LzH
z|Kk0I+9%^}QRJdS$#3@7>f=OHo7qGiXGZfZpRbBv{wSWQfjrm0Y}h(l9eXZHLhXKi
zJUPSi6J;P}dv&_Ii{nrC{PXpVc})uHw=R&1@y9XQrx;J1*Hch0&8O3b4tH|X(LUsY
zqA*{{FY#%1c=l#d{*NF1N)3>R_>^w*FnudBi2J-c4Z_w+wQ9{YdKnQSI(rTal|1KI
zvs(vJuZ1f~h=L;&*|v>;*gkb83wsm$Gd-I4t@aahUL)=BSY3OOjJOLh^@fRfq;^<>
z>AUlcM9XSUQ)>OT8R8@dL6L0e8Zu$i=Ix2|W~vWyb{uT)Qrpb%2XlT%Is|l{{44Yt
zWS;p;ThTnLN-ro+|D!!uNKWeHL@xU6Q^(?~szfPgetvHK&Rb9;zGY#>0~dHvUr!?U
zYn<u6UH0bt{L$j}Y>U0*9=01*R9U~ucwt48ENzkO*t@yyDpRzek7v?8DYRy({6TT;
zRJbl*@s>>9L49uW9N*K!Hr2hx*OQhu>?bP(kmj53qa`g_0J>6E405TUR-6}+rEPHn
z^Q9~#FB$_n$SL2Ibp{$HA2ZTAH2QZxrhIY|#2Tlj*u!2DQQkLEdAr;%&|;jf`wust
z5uOI!pz!k#dH@`Xf5k-p;pS5#M^@O#;w<zb$^`^|*nH3}dRePOmi}khfF)R%`|Eq_
zfKuVIrjwb1%)uWs4w=|LCv}%5e?0uI%M|_Ywyh{=-sQ1c=Tg*s$j`;<eQ5<^cLK62
z#&Dbi-Dz*qMKRO@F+obuMv3@P9kDAXgXn4+truXpu;%+CP&p|KyjxjQ3^$8gRsYF^
zPZ0;^!JzVYwTUMH)mx@xj5OG^R6KCAYhTiGW9&|fy(Q_tn7rj0zIoJSJ%;hl-F)gM
z{LXr=VAS1aspXLj{c4n!2g&AKtOwWb(qyyc;V{{A)6-SCI|GO3nrp)%H$v*DwWF3n
zOj{fbM|Gf_9ej$l^cg|$3k=RvS$YM;GxA#nEPV&LQDZdboUDdpdDJ@UgCJ*lrj94>
z&?cH0{**gYjzIae?R7`#Gog7kq6ORb&NW+X$u%_+@#7bxm=S_6_T<U192BTo?Sxe4
z70AU;J9<$H5d`lE)gFGeec5Mh_ds`EjgtDblh=n#;H!@uHM_$r<;(~{OFcE(s-v!k
zj$<qbV>NmfyYAk#w*syM@{jjV6e%(7pL+W!Fi|`7z*!#<Knhh^bdQu;6;8;a^wgdJ
z9eTNq1-X)p<=8P!l@)#731l>?au(V4Wn|i86=14y6CL-#J4X2`3gvl!+p9iYJK<~K
zQQ!xj_Sa)Z;kIMOGKHGQ89y*e_+@UQnIi6E)|DC02{X|z6vwrieVL>^0-bf*ltkhk
zlBT@y6%7*}{3&q=r4v{{YWO$02o6IL-lhj^IL|$FhEr!TaxXAdq_D-#(nv#c71&iq
zf^^Q%r?jFi0HKPEPx_m*y|1|g#F(!s0))8MD15|sy@n#rqoAlpQ`yt)QS6vAOm=A%
z6^ydc+{()AlhfQg+5G1bpg+>0!g8;Fm%o=iJL7mR&4uHuBAd>P$bI+l%{$dn&E#h>
z#Bc7DH7hI>@>LM|k2<)t^C~_(a1>_y41Mv*PH?iSZKRM<fg5ka;^Ri;4@{d6%6jVp
zQ}N?fC5asc1b?_*G&BE%`rsBSVbl7z<*${7J;^q5?)k(hAySd#Z7%<<UL(<~TKxAz
zPh(+uZLv>Utnt!CO7CdBCR8%3Y@CW-8FA~HTWbYEf2^3g(rS))L{~Bi^V)5i%%?He
z<o2QTznigGzByPXXBhp)_v5R@LV}TK!x+7f^+PXR(Jd`z21Z#Bd^eHv_7S9YJ)LO0
z-(Zvj4hW?xk?ouFJ>^os2*|K;XLndq-1_+VcHQeY)&mfbL`(on#P-L;FMR^W*C1jK
zTYU;}Apy<`{6y*K(WAmJGUHF}Vu1pzvdP3`mYy9ajIDuh3&|dqIJI3C2;gFu8qh#G
zx<ohle4BPX=?12|kw^i#D!7qttr&s8YehURTVqyojGhRy6XBF#Uk+~!tPj;E+y@P7
zyk;}hdd*&OB@tc%5NdKPKA|W(D_Q#f+HM;Lhw3#eUm;4CL9I^}LJG()IJM%#uJ98S
z+pQX*>_<67r(tUvSrPV2{=^}Q$_hLuwe6Rmu1DpEo<`(Ic`E;MAym=A%J{Kt#w?pi
z#S0Tmc?0!(<6tyVXZDBGpooAfK5^981grQ<nkCbb1m)AqKS`@RR%#H9F)j^}Nbz8A
zO~RXpoy2WrU(&qfRcSk`?>nkgBdi&%ZXQ0nJO{V)em89=o#jEE<;^S{XiPbe^9Y<2
z#?coV1Se6f-?!GOzQxdHNnC_oUT}a8ygj45aCTy?OWo6K)dU)Gh#$WsVNTIDc|X4(
z<5N>|(R3g^m%b8LD@Gz1ibw5~w1#|Hn=dz{5W!Bn(I0a)un#qN+m&5>+Fc^3f%=XY
za|m9KJMwJ)x_Fp2rUwxT^K5nCJNriJPWB4rJZ=g<j#Z!Ed84>GSr>X*<wCb7^}Bl5
z9q}XJ?OfaIH#ZGad_O*Zf$iUqI`bA62NX^LwqxO-#ks7DCjW)duPEo4Z(2_6{nBfW
zo2{c+i5B0Fq{%#TfJn*+-@K{HWA^7#OynfTo!oo7v6M}$%Ac<zQl$Tcl{l~Y3tYZw
zlBOtqZ2e31My%m8>>L8R<L4Xp9~d?~4FY2vp)vv3wceMm0?mZssR3d<pI^7(V4wYA
zyra@cC9xNfebxQuU%}xQ=Bobtn`t)!m-h_d4%6;kkDf-#w|D!$=TQsnaj$OJ2@Yzo
zk1jwbIXD?CU&?TPRBS#5PFoRh{3MD8+X#RyG{AheU}ss+!<Uv%yFBOCJsq*UR-Skn
zz4Y=j^yKjK;xzMO>G9g%^zy^<e#+rp`qJA0=0)S@Esi$s^?2LDyh*Tq>==D8Uirvv
zc{lj_d^hy@)9It0>$8RBtB3U2d+Gau!x!c2>yYjHq{~;^&=-m2_hrlXvyz{?iQnS@
zzYmOlGo60sxqhFq{S}aYqc8mx3^DC{Oq@8xX{-DrCjDh?F<fv1de{OY-v{_9*#>Z6
z;=lqR)Ak`-{&Wumam4~(00Lt_xyN%ji@^euoC2X#m|>p+)67uV8JA+eor2QigX91~
zg#kguml&cN05tpcRRHor1KlphuFpkBM}k`7{ab4T+b_jxdV;!ZA-z;V{kXwR9N5E3
z!6VavF|hy&L@>lD1U<X8?+HOrL6AxzePW@3TOm4Tp$i<rJ4%5=)1e6gp(40p(_37#
z9KL6@p>y$J2WA1cN};ZoVLcpSm2BbHxqjHxp(gR+fP_#&Wyp+Dxbt~9PM!}%Ubu`?
z1QDk<jd=K@nTSxQFmk-eyDhI;#YkxlAhY>5U%$xAib$D_NI4B)BZrq@LZnz}PzxEB
z)J&AjRg^4sw7fGWg>96|$LQv6hAOjY(%$ITSJ4{OsF-)+F`C*jTFx<_5@K}fV)SNW
z46b4fsbh`AV~w?AO`Ky>dcyt3{7IBVdGYvTUPM?^Q#9FP5DEaC65?Fy;@oE9Jg(x<
zu$Py3ya#%|{NLxbSMdROfJpI#XzhepXY{-_AyGS_G(&>mC?PcukS?B>`QPTX8QPM?
zc|v%k|2eO%!2>8I0D&4IL5zS<#)t{0=c#tUZ1!YF!8l>V<dOK7{k_RKZ<EKV3Frl&
zQ{q&Ubx@WFnptOPhdC}{1~R%0ofv^`1!8a3rI-n%_-droPNy80V;?Ewo=`*1v{9+X
zwyECXsfD$vx18AboVWm&AoR|5UO5F{1shKShDC#mLlZ>OmrAB1N-U6;^eOF+bDAS8
zEjC`}Jz2{5cA5hqJ)$S=z&zbf1He%q(85BYCYL_Yn{IcM?nec%%S$HGffCMUe1WC!
znrGO8Gr$~~TgsU>vH+i%Of>AJL6h|kJ+IZt(&EbUEC)X0N><?t*VPHpzYhCM6Y`}m
z?CUJ#TVj}L5X4+1%#sFTjUQ&y7i2dZ>fjReBR}*PO^~xisB3+oyF}=3i$G8OP;Z(*
z-@Xw4`hY-}5Qs%Uh(t&jen7-^a8$j2Onq=1mw$pwa8kY>G#~QtD9?lnmEU3pzzokv
zpVA6v^NX+lI;H({Uh7g&n^;g^Ur@i}W)}Fw=BnVDJ!*)vFuW`p_`a~~U-Mc7P0?R5
z5uKt*mm+jbWVXI&ezs`wy69gqk>U-P;;qEuo%-Uv+2Vui;v<@p6NwV^u=d=g<TA13
zy1oRBeEmmo7&oaD?dBt#D<!@uC8aHUAX!GCTlUDc3_Yx+X(*$cD?^L<7-`FyCCgcL
z%h_DZIg-k`8p?U*%K2`}1!ybK!`f%M6(X(`Vo4Pe4HZ&z6*4y!Xe*z*WTk>`C3;w^
zlvJtGP^mUo`T7P`sX<%yPO?f<w@S;k>QhpcPD7R6T$KTOTT5GQBw1~&TWw;=&>L9P
z=TdDoSDgn2BvIGcOV&8**8Fs>aZ0Lj=}-6|TJ+N})A$JhfT$VAueDrHnzE?%Z{W7P
zi4JnD{Xki0dR6P$02myt6;!VC*R2)71?+W)C0c&;w)_=O5SiAX1v0EdxYVaN)az{3
zDRUMU&V9_#jm}C6udw`>=UUg2*ihMD*sR)++8@%Y+Hm=#PEWfL{awuR8e5WLYa0Se
z8>(^PiIc8P(@9OU4NdcNO^ZoQ0A#_$B+(G$Q<Z8xA7ygRBfv^O@%r4y2G>XdfqaIZ
z=GA_pLrYY%6s);27T_aEd}Y}zu8?p1t!0B0zTw(fHV4AggA>{|Jjc%+;Km@@gRg_(
zVZOB#R^E7s<~eXH^+2tFMyusF_(c*SV{&Um1Ds8^?a5y2Sa@5&!<Lo=5Z`SZdoZD3
zaw|)r@BK|{8(st9o-Z2@kz}%V2BeX}w%xt6nUn`d@%GcRLXg^ghd^QbR9>qHk3YRt
z$DDW*hel_>hmI3ng12run*|+G_5Q|$gr<Z#?|FEPZa*2{c6>bQGNbDfxNbp5CCqLG
z9g?-Jtq44VyYL%1J$ZUa_PXdLTA9Lof(CkS^Ew#;y$KVY%^E#ud$@2iFqW>D%CK7o
zhU!fkK#M7QVOCv4T(#N3K(wR}dW)B-rWak9bvn}r6X>rb6euCo@eanXSL-j60ygdS
zLk93$=XIa<0XwY*%EJfBeKQ4II#U3HIZp;5Vm;|}7?XrL)5(M5jd%-gy{c}|9|L%+
zx1W}h(`yOwwu3+I(gn8A;T_I@Jmwkh4jz)F$y^UkIW0_)b{S@(86u-Y+%=}m>LG}@
z5J{KAsJdYyID%-ubuJk6$LiyQrnG%RT*@XbYUz<P!jZ?)BM+e<dUY)pqESE-0;dUq
zNz}=_FiO;?&TBiW9W&}yKZ+kT2F@SD=o|CV8D%2{G-{8(avxWMj;l0{tEr=sS_#Jk
zXz=8Vh;HY8S2qr?icc`XCgwFJhB^mGt@G7ZCO*VKzeqndcGofqnJ~L^91J!#vSu}h
zezYXYv?F45X!`VHA>&sOi}RqiYg3<f6WC_|tNT7P*3lIF;WWO>G_w%^cr-4!FkKo+
zg9Qfw0D~HXxsBzNnBg;HWi#PAeDV6z?xHiK`Mkn;^y%t(Lq=#J1btCRUd=mne_DcF
zdM??88wdVXgnonpHm!`$jY&EKjC=_|jQ{hLR+QAbH|_3ONNEcoWSlRg?~C&Uu&r=l
z$pQ$D=Dw9G=rs||4>G?irzC^{R;;n9J`r#7vbfm;U`@<SnyAGE(j~EUHZ0q@eJJ*!
zI`Q>B%PV>G3nC!9>9Yue662m`l%DcgAQGhx26R!1Bap?%NIRgT(gS3lAr;kk8XAL#
zO;DtlFfG&fCn~*dKd0vQ=-C)T33;!u7WTnZ0_d|J+tb%XchJ=nYo@!q75nm4K?eMI
zqCu9$2jLit<juD6Z)b^(RxtrlFXY!+5lg+ijQ7BGh|zjW=`60-W6c9rgCTrP+c~yo
zTxAbZKhKSVcN<9p55<oHWWGNxZ>1=O0@UwKd4|Zbz^g4y8;|5RUGE7mtqD}$&hM)y
z`x_9O7H{^0Het4aav`QFX4>fQ{*L2YP4G49$ceOL`GsX(zDQy`Y?+<M%v&hr_Esc7
z(&9m?=Z1?+^qZskYMG>G`lJ{Dz|!0<J|Gd!u!r8(cAy7~9(%3dYl@73|JPaZKbE9h
z+J@W{+5aZ=+zvltd84g;#Q$5P_#erSM)$j+zpQ<ah%o<)&>KFy`A4Ie2xRU5SEE?a
z#^>)PX^cCF+a&m}v!Xc`u5D~)7CQOi<wu;DT8wTKGyZ?9y#-gC?V4^|xVyWC;K71J
zAPMdXZb5?u3+{y%?(Xhxg==tkx8N4sp>}<1?X~*rKD*E8vCsJx?|82Fo^!GxM3yvx
zn_HsFYN4}YEwrZrB}rS_yP+g0v=9fK6$Ac3k_zSI&8}~3I?gZe?C!m3Slc>2>Hocd
zesM`Sd3t+S@aO93dFSRH0EamZB}v5%R-q*6!9Pe+kpg3AqZkY#=C;Y*-OTzGbq^u8
zB$v4imx^ZW4PhOsEr<wUGOpA)tSwX^cx!sZDtT2nkwx|Mj6AgzN|H(+me38?n@<-h
z^L71@or|9;*0feEA8weQD>r!m6Mwnkq@db7FZTV&?f62y9i5`JoW{fo*cHR3Vq{@_
ztqu54ajJ7`yV-kzh*xPzTx0yxfoR718GPB$9=r0Tadc^6u^^?@=1l%EX?v0rN|L^W
zrU4hKjYl#SS{qMSzz)ajY(fQ=^Ibv&{08~pi{FEBEZ@f4+;HF-eUP#$i{}&$s0+Ss
zbTHt3IiYHBpi-iQa}C=bDO*tKY8kmAn5oM8_B-$?CMS1hV}c6aGxYN2tpUUo!im2L
zL`GEK{D{PGK&^|$JiF<S|D7O53{Sn-@Cy-Q{8kY4<1CFBRgk%n99@v(c4&Tqt5OJS
zKXOdiZ5QM3h?mL5$O!&h;;6`z^Ml{fI{*Q^7-=KZd|4UZp&V~TNhaF(FX|z*3F_ZV
zreZgdOLmh&?H(eM3=)TelGmdx_EOEVWg=34^f&vb&2%yCXYfukMP#_%lK5v%ogeOJ
zGXO%vvjZ4N{c;AVOAqqMIgT*%<GpE_loGzT3>CEUmzET!Gh7`O2M45v73F`lWM+qU
zKMqQp>W`Rnss-O4R|wBSt$pC_l4GW}Tju>Lbrh=~7=3#VC$&CCL(t?09le}v^`s?J
z#T#h%W4A%y;`kJ4^-J!k*M=q88U0e?%1(1^ei?i0iRAWK>!*G+nRh$WBPRfq>%S*I
zI$^-sfBruvKjiH@M3vATC&|<Vc&4zZA{={V-;E8yApI@*q4yqu#E${}_SGN&7dn9y
zjamR=F=y8AS!~+NggouMSk|p$2>{&zktSNFm9e=+50~kt4Ylqu*-cM88^U!<x=iqP
z;O;3ut^X%Qg3Y)lm1fAU0!d~wX_|u~{%?1mj!y@<Sb;7JV#$?oM<rN+&Br2LluwF5
zBMMK*jT`KEP;toF({?P9&!<1VBRs7aJk(j9@|oQ4{I4dYh}z*><dk4;=FBvn;g_ub
z0PfcO>)Y<%M1OmgYR*&gdpsU+X@8>bqWS>bn1T4d+<kTIcqQNb1|jD90QfEjgo~ei
z?%5ZFXTbjSAe0W%bSGA$U<Zd;o-MZQB93aw@iXE$8|lM6?|g_dED61#*ehQ*eknFJ
z0(>^wxBFa#BikUJaus+IFfaMuBqgh37M9N<Cg!v)=ySRZdP8s@eJQ=)wpA`(FV5#Z
z8T-&pO{4Ql&@Uc{MU1oV$#z=kz^B|mmGD`BF3A{3vc}0eLR83@?C$#4(2#wk??(W+
z2h{FB3kM^AZL9@A=~%l_iT*{MPk=K-AVK;kI(#&cu8CNtRDL=-;m7cs?qr$5AGN+2
z^uuozkcN~~jpDOd3YcVkheu0(CM1{_P#7}dX$hVs)W-*~;RKK9el$w*J%*MEVMg0g
z9FqMQ_f{iA<i!~4g2(Cyxrh2k&2J4;^~(z1-vJehEF99@4)&%|0l=TBSLp}xMS=@M
z<IXKt8Ry|e!uv84jtqb|+w`d}@b!Lx&8vW;i?`C3D3fi-*L3h~=DL{73W1TqIRr9L
zmk+E;sI(&_*Pw*)6MLvixw#_^`6;8SXlZnGC=U}o0Z2y4Jw6`Mq=5A$L=FaaCVAbY
z@V>Z2!OCyO<G`_q?XX0|8+A4oxq;#{+mUqSaAZF7dpdc&;ICPvF~vc~rK(;awQk?J
za#EABje}B+Cm3~GkW={+Bg^~oP<6LrC(<9*EW+!|5#ZrDa>s}uy+5*%ZLcv^XfJOK
zX0{iMPn@b37|S^^!xq0Y^2S79j2OFgFAgFa*R~XwoBH@_$=J;2`MsQc6%0cg3ne7X
zZx6IkIu3=N2{x491X!uStStUCYAh<QuqN?c`Fcjk*v=Mc<C6y3tc?YWa#p?x3R~r6
z<V#$HEav6rqowbE@oOH_^LKjdyC#jW*}92Q<vJj@ewljLcA!w@zA&<W+j7@_9`VkT
zD7zZNS|ceEp(sGpaYNeC1@2|;&zn)PwQ2Z!9LQXkFT#(cX%+Ksf9Z3C#~}mU3%>fK
zit12x_$`w?jo$Yy=VBkwx2Z#jbLiPQ<M_i34IDLp*(WE->x^m<Q-%DZ``#aB$ohL{
zdXY#--9F0p(O3(<x$jfsP)t>d5n1P9AI4lwTr2!8h}Uh{x3pHGDtuSc!YxntjH}Qt
z+=wa6P3aq=Me>AaDNmB)*pJABG&R(H{y&!E?<(pt!X)+>-x&{)Dsm}>k)w%eXil<o
z)<Y=i!(k-Qh^NHg@L1jnmx$^tjm8ru6f}h&%GaSz@XXZ}{X#fO4|ShCWo}SXia7Ep
zaW5{naeA*GF{?SEO;B%BT49TUEM3<(<!W$^0K`!IMy57hMSaT~p@3_;AihXw=ggDR
zu4>YhxX?A+pz0EFTK9u=G~<l7q_bkrE=*`{$Gfh1;`GRI#%=8+v!V5y_9m5dYf4%1
zo#h!DlEje?(laGP!+YFwME=VSenwYzP8I1V?I%3cqTR0DZJ^($R#=?iHyzk#$%LA^
ze(Vh7wvzuMNddlmCIDve^X|AsBuY~Eh3MQW*Za<gvAU6~%%|slF|3x!V2I*%F4@Zg
zRMj_~G=5zu^m3>iCD`s<`KI*FU{|!~QMjDl3D52Y?i(Me3HdxMV)WLDxl-$LD-hV&
z`f_R))w;T`c-OM>a(XlBA&7(h5y>N*&hU>|e=8$Eq*0N~*DQ|VjKsE;`1PDhP8gYZ
z<6aoQ!!&jQu*(vK1cOdZi6Yi~Af@y;o%VX&A_IUCt#KP~m57=j@<bJbGoJIvy{WuI
zgZ-X~vAp1YliuZZc5LTH$l80?iS>GZxA}lR*a1ISB?3o^dC7z9^RVqIeB+Drvg44C
zu`uvTjymylG?M!?{q6JpuXn-Q-{4+`1}N{BCY~ocKg^&ci_*?3K_J9dko(N<9>HBc
zFB-^@0k6D7A2?0msEa*5z~?Ii&`J#2EA|9{EKwPKNWpN>UhycvSM$5a#sVCLCJ>zn
z9oj2?3`Tsj=o6jjM}zFSmjuTq?eh*~je7w1e$bl_<j*DThdziTa^U}=+JBob;4^Z7
z_@V(3qYVl2&&Tfpi@^bF41Q$Na9_Zl&{#1G2u_RNQ%5t9>)!TTvWMYdAP+b|9^_Y<
z<gZyAlz8Xcd>3Gg9Be}q>~QbTr5sf05_EDKaBC0iIq2qnA6&-g$G`zf&;a=?1~O%X
zA_hP~U@v+=$OS`490-=hAmk({Bn5<t%i&tM6Ov^Pn@bFlg{F$>lmTkh&XxC}&^57E
z8WDAqwFBV4j|hr4_k^2<z3oAB9R#ZLL+L9|rC5q?#_-5Rx=u#hAH_kqjC}pb_+$Lo
zL&O1&Ai6n_l>%~vJD9e^JZ#@A*j_BymzZ{i7`cSsQvj@Vz!+Hr408a7&ma>508!P{
zQEt-Vq+9@mrpQIJNU|OP)GeSo9|7f0;gzFQ>;cGKA;CW*P?i8FUundtQH5Zlx03(_
zJpe2LLEMyR@<VD&lo$)#*d6}ZWBW)<F#wD~G+|IQUP&yA01VP*EXN@YqeU=}02R_^
zlt2iL5K6E}2_<|sK)m@I7gOxDApk*u<P!=cqPsg*{5;+%Ck94_5<x6lCWKO@IY45G
z<ojkk!w~hikcbr(G*b&|Gp6tvL%=gGuV%BSp#=%zd5jr%(#asHm<6A^KyX1fK$_{N
zwHD9`g}9tQIn>`AVKO1YCE30^6m2tE^&-g{L{!lQh)WSn9CC{e!JprXj%OkbT=L0!
zz)#tX$<rb(knt&cz^80ZbeTy#xl5H&iCu%UaB2FRwQnh{)(x%k0S_MAeV5K09YvSX
zJ{`fH$L=Bag4_OC#cpy4_k&EvopHvKZ-yw2hg5TF>{iA#Os0}OAnieHPk`!R33nfy
zpspo;+D!T95Kp({;|&Q!dEx=jMJv6yCTrI|i@p2Z&LJPHEG7ISb}BZ!z07BnVUoM<
zP(Uc^k^mO?@H37eMXFnNi(SsH7@8L}9WhL5!h}aniVot3@jJ}P{hFJPgG!K!##EY1
zXa}HJmJFIq$NXqeBZL3`2tDL5w+SvUdC3m4gfBjf{%|NI=}z3xl_6h~-^oGl$|S9X
zO3Xh*ph}8HB$Gcx2Y})55*DOhu^`mb=2>wlP)r5DDHkGh0YbG1ErwB246?)H0j+#`
z6*KuiREpMe_{tdzyz`6nkc+NV5)6hhfu+cNGR3Ytg-F2SXPT_AWy}b7<Q2CPiBgGp
z!35m%ys(&(ACr*WaC+$TJK~w~?FWIpd$CfB&G>Xuq2iY4)M-jrQqt-pxKQ^}v@SrF
zEX5s6QYABXD=8e_QIR4kp!AV3&6026$ca2UN0Sub$;XTiC^5vV;HJ(U4v}_Wb_u`*
z36%1$3c~e~%EY$#c9Z6@a%84ERB~`+96idMGMB@1WF^v7WiR3^FH52T09~?PciN;+
zj!?a8Ia7Dl8-r3%03V!?VZg_Vn%?R%Qoi%YYFM4>Bm1Pf7Cb^0g2lKhs;68S>PqkF
zY#D748jqT{kJYH>g{{(zbi=hD#MtqVrC>M!yG;yu%rH7FqHJV*ENGR&PfRL;V(3;B
zhmY0n%aA%ED~4FDT3z=#{PXfn_ljsE#Np)+pH^Zap^||_H7T^IR3<gODs_sb4XM)&
zSdQfwsWqC9WeJzC5^^6`Q&W!xnt~bMe)<}#IzqHxn(1pLfGP%1PGiK^2K$A<CAyc6
z4hxc_l`>vu%hZ>ZqBL`*F@Z@N-+eB136nBvDQaSF`Wj!-%q+bn%VaE2r1!aiZL%J#
z)#FLEFs{`JzPibLw!kd4$O*r=sTIqHMN&>Mzlgay54XiZHHJpnxiYLk8?Rk651>6%
z=<Num+{|mS^3wp54wvQGEVqvjpwe3f3kfD*4S@r$>f8Kdc9Lz&a0-r&`N~*efkH7_
z%Me8IvKG%GAxfc`Qw`E6QW;lc*aqY-m{pQOmKH}A*mv30@rj+0RxrIRjV0QW2!L)6
zhHgHN#7Fmb&`MPfs0)RhSm&@~F0^*6%$M|s8M&wMypU908kj}6hh7&Ml+u!WT*&+k
z;tTJMDd~+FZhSx4V}IL&=?POCR&dK#$7s;^BdCvmtGOzyjr_j%%P7q0RM7-WFIiat
zefqDZk=zxQULxH9O?3Qap-%4-faOfK3Jb_09UmU$7j07=g;<aSIzF=105WMEkLNEw
z)_#)cx)}F*+O#15QK;X$)6E@-2OdBYXTLtG&u8f{+Z@ol?a?f1{L~hX1|DRsfpjW9
z{=y|2%4H>#lIcR5<hLsw(hTY=zwhQM2e2GO;?jFm3!A>v9Vl`K-?fY=GIW1WE20tZ
z2&Eq7O)N+`u1{k@8y+=Ayl6LSt!yG2`#6tvm)20J`z-`Gf(smz?#CJ$>bLprhM4VC
zLp@Hdp2bq#XZ0k>tr_*uGw#dlOegnC6TXJW4CdC;9K=_vM_zKNHi^I{2N^Y3w*bJ6
zd5@;SpuCum8Bh_Nq>^J#JxW*;Sf>)P4XFu=a<V3n0jGY=qthtFQ)CQxiA}FKrm|Wq
zWN5jupH4O1_i|TEcN&c2Bu^X4r;!cKAd}BTq09nUXD^&*MB3w-WM=P=Av0P6(>x-P
zeBra=r?ZYjvnUp`KA^cjR&yRGbNqTUU&rS5j^}_V^D-~t^zw5O*7Hdr^J*2d!ZP!A
z#dFQl3zp^!il7C#;sv$A1@VIge&j_;#sx-<1#4@l0oP51B8pdGakXsG0A-2&U_Mi3
ziPwCID`H8wc<B>{K}1GWR67iEHlWaJxj19Fw0*gJZMpJgxtii1);_(JMz0mH*NSBT
z(6~ZG@YLj6D_5trad!n*ub#)Y!z#0LYBw5fciHM2^;IUgHEM=6#!qXc-`C#yuMrfk
zG4!sX@2$OoTZd&>r~kD6Xu3}4zrLBjPTRZAma&@0CUS1Aa7MAqbwi<Whr#u*Cja!p
z`4S-yIpu^Am4{pBL^zW}8s|jGltb&_#88yOs^rAMl*7y9B<PSOisU4*ktOryq@a|g
zvf-pzm!Z?=e3L2jR*{oQUxr1L6Z(Vsa&4u*4wf^sh+DA-i$XZ!p;xFw2q7DQD6;ce
ze@D`LM>=!oY!|3EfHjuEqd>X)MRZqHe^=dmS2J^0yJJ^(eOLc=*8mzQ7Tq(^-}~;p
zXP)_&vhT<GU&=l^%Ke|B`;Pki&ffd3nfvY?`=0Cj-mm*W$^$>qg8==5AnyZE=0Rx3
zLHPOs&;NU`<DaqLZ{jw4C6zxC|AWoFJHBt5?-u)u&83g+qUO)~-?85SU*~`II@r@D
zHnQEv`sqpk9s4DpN^HOR=RqOVAr}%F2umR56&=HZ;1iY@1Q*Mi@W0vI(1_H+BIfkG
zJkO|N^3t-u4hkC`3h*kc+KS_wvOU|WYr6WOY_4;2@7UO{;eej;>Z$pK#oE!?)zr?V
zz?n6h&E36yzk=4^CxVj)j@zgBf6j03hF7kh&hA|=pN}5Mr0wEGy^*bu+mP%wdi=2I
z7zC56X~TohNymE`p$CP+_z<>G;qHs{e&;tIN_9zo=F1sTDb>m~*B16AzH_k2Mp4}3
z&*b%g>@BG)M#x_DbpFI#e<+YEnI~vqsldcns#vG*&)mSMZmM45H79#Zyih4HK#O)P
zZ@tu1Kc4G!I8VG{W_Pt6C!}GbXW$b2GADPByU{^_w1T=SXTLQNj7cYXkW6T-pFm@U
zN$*zMo9xXOCON;vEjvlb9i<;J!lOM`#@^{Smg;1&AgA)Sa?E4SdezA3ZT_0amF=dh
z$greD8~@JlK{B+WleU(v1N|bT`f)Gl1<sg%;F)43_Vu5l9v|(@jy8|+gKwpGee1K&
zcM1~&Nsf>&UJ5T;W^oYjCvn_OTFAxQO+QC$O#?C{=2!!I9InL}f2>Ls8d^M3^Q~aw
z@5FsU!H$baAyl~dxgeoz;&E3dR4{Fr0Mzak&e_377s0p44+_EFW2B49VhYZS-Z_<~
z#}Gw@r6*IM)ryRjd(6>``NE*JE3aV_Z|bIMv-B|@C|t6Yq#f#}mQ<88q?c@2*u#)y
zqm5*iP9I$ooML&P_0|Hv+}|u(vhdc-=?Fb^Dg6V*(P~C$kLrO9B?@-ezhb|CbI6qz
zqVeN00mJw9VqnYqLo>1<<S01hwR=aT6)xuj+fv{o<{#hMmbX~2e$C^YRF6s~{D25I
z64w8yn;l*_O07~at7wSBL^^5QBwc26S_-maPsF8I*>2izTsZ)*Bpjc$4LRl8e7Kx0
zd*`r#m}L9S?+k6V&S6!Dt`+vJykVy`P5F7RSx=bF=b2mrj=ngYHmQ1ewKfw}B4bwK
z-W%DS8dZ2e_CI33TmWQZYOVn|l5qci`*d;w04y~v5SDA=q@qv%HH;7t24Lf9zMVda
z8keNWaGdmIKee6Nc7}IS`J!a)l&1N$w82cz<E5d@5KH9N#5B#zx%acbHP=!WW5o!T
zZ4(h+h85j>;~VGw_Jj35w`&U<z^`oJbqj70zLi`?ip%YLUdpO12O4h~$fnCz%9>rg
z4cR-!bPq+w0|{gAde(xp^|wQGWNQg~ne}InEdhBi;Ej4ao1UGfeUw(mS~&@iwNNA<
zyR*eo(N?xbmWiEne<9mvwph6hx|=$IbODYExT+V$)hnIn@&3;rUQzjb4X<wZrM$u)
zkI^Qc=US;E(O+(YC%xhR)OAA|3*&y*DB5=(XCc25i3PgaIt^`R!Is&70Bd1+4M%Un
zb9adqZTSNQI1T=oFmzxj7I=n_Y}}ROh~imh`)hqQMA@h5(Keq9#0BOosv>t=txg6C
zs*+)4B}Gu#aDXE777s!}Vr^S?u+nX-*i{;sbhqz9bK>T4yA6NcKnyvZzV>Ac)ZTq|
z&z{6bRtAzT4EFQ3TtwJ~=aKIZ_REW5Qn0~qlYHas{dyfk^*-F-GV@--ncmLc7vF>=
z2Q2md#hyGwb%z#BAWBNMC-w=HPyfblkcF4)i&z&uA5XK4h`L>j5Va{&)V<7C5Uws1
zZea<Olu@muNvt*5WwH)|)2*!aZrFK)<@qpjf$%k1kor4kfs4G!?WLN($#<3v0a#OJ
zI<-1gP3{scI4cHYvZee5-ev(fTiD^aR{FQ-qZWyeDF*3By8BYp2<)!?aR?_oh$2k{
zeRk_tun+M4qGdN2voCdNSE>f2hl7(rg0ng3{0AI(%u~|$U63q-3^6fV&dG3h$6Tn&
zTe?|tDkfExo~%JaN@;kSFu$IV#kxdZ=6o7FdR-XJ%B1MB9F{sxTPTddEat>KoBOe+
zXqlt*OO)(vfh1Di^2bu!blEv-={ah(H7wN>Cp8to`?6SK0BpbPd~NDY`F~+^$4G&N
zeskOq2Ykj3cMaaQuT||^R^M{qHP?}ytE*Vbt+88Kez7OkxH_F!Vxlb#%cyh5SDcKo
zv!sq%ssq#CkDG-MXpcrZv%9fX&<J~Ivy?P)lv|%lK-t_S**6XK3c=PH2|De4&P_j$
z*mS+obe~X~So_${V56QAcbGN4j6&u@9kPyLRwZ3XW(!7~3ewhMG+kON4sFo8t>WN8
zE^Rw%A%GLtb^5}lFDKSj_!}NMFhA5f5({iU&wG4(W>@Nbim39bL*Dc#cj*#hJ=Z@8
zGoWE!q<nTV^6$Pka3pu_!K^%whhO~$?Y6ZxM^p!|m2FiZyY}I;*Su#BH^MDT=6P#V
zv#S5BfH<=Fi$|TwU&zxKX^*&HMDaYzaCnP)!gcUNLru(nn8`+;>yW2aZCnnk36qcC
zFV*k02|_g6tX6I#VIYpEc3}|?57-eChUydzogE%2w=vPLwP|zcX5+$c<AG(|bZ6ma
zYli|9o@WkMuRr!V(Uu3GeI`gU*30ha-?WqA{aJa(!0(@=+~wmsJ|(?V*#DfDGQ%`}
zT_o<cBNLT6Ys=e^u0mn?@m=a%hW=HFVTPGfQ_6h9>s6usnx)pK)CI!Xn<`(uTEU6b
zMeo~&f*3Y`C}0nmjBKngQaH8Ld0Ji^Z)|KDJGJq6TG{M(h7B6~q0id7DtnsGHW6`_
z;#a=*YRdP2$L2zN9pe{~9?!q2v6}yn4!P!0GsUaamFIsu<o*xKpOiPJ+wcCv_rZ_T
z1iyd)`pqNFiI(}M@taDImtzC0*2MwE+nPAC!(#&g2&3(&#6__OS6Rr+<<uENwY`2I
z^O5FH<+74o#?H?owzZo~zph~Lsm(jUMxe)LXRz*tQ-sZWgpKRaAJ?OV&a=(14%bV?
z*L{RRSW?NqmOpQRrgZy}h7STFe%FOlRQrjU($jw*`z`NayzDKo8SLp8n1GI#GLb+8
z&5cK_v5wmYpVBjr52~hE(Ae)cXMi2orpQP==crDDchR?(CWB6B$PS_n58S-2g0RAJ
zyg(@Tzd_2VeGZU-4b(uuoew-QD&oB@l+ewp2ENV%F&9y=54`b+f%h)HdCI=e48Ekr
z$mC#K%6nfBw%;SKAH6v;L$WPnvR^>8-~GHFJ0miOt1TD5KTz5K*4dvw8A(vn7MlEZ
zIrqON4EU&t^qJolO6WR72b?zs$P*(eF4`y)2V!sp9;gSZfC6_51LX$;NB07ykb?#p
zf<8(I^?eT#0R?px2JsIDwe1CQBL{;Sg4v~m>%Rvxfr6_GgXsr@%lCq*kU_-^AW~^i
z{&x@&2$Wq2!gKY3+XrDX`n>ELGEj%041$u>0S<E^nfD>t#G$$Tq0q_iyA#CuTs@>G
zKa{RNbmR^fI{wk(gw<+>HM)j@|8mHMwJnBq-2c-d7yh4m9gE@P_u-So5!3w82|Qxn
zHDWP2Vj28Db;#YiM%^bzK}#Ll2rf(uGWE$UFj}^7Ls4U99}z-qV>HZA!~iG)wpI%i
z7!U3oL@~HB08X<QToMJQq8OrwpOg<VY(%kC57Awcv1Er)Z-QfqEMmd^v22I2<%n^#
zZa;ZaVtG?Sh%J8d$xvbp#o^t@agkVvXhDbOkF*-`l84bU0w7F*c&|c8{Mkhu_1lE6
zLovi=316GzD2ftv4(*{gh02GfhHeSWGWMp;3C1#}7A1*R7ADpY30lp8nh$pN50t7}
z_AVhwx&rndLrG>sc0M6V(j@l&LrJy*M!_M;Ap(YBD9PA&$pIuO>gGspOvworDPARZ
zu}st-o9!|VQvyTmat>4EQ|t;XQX|~-ODs}}s#9C%QghwB;oqi}hVVh#9Vs&YMFMt>
z&D2RGcAY5cP9?Uz&D48D$q&xyu(9c|1L^l$={?P90n`})q>Mj?8IYiivz(0A{*2wN
zj2Fbr9h%H%$;>sw%%`Bt)tt<JnGFBU%n_6<KkBUe{>*v9th*pc)?7~3ZGYDIR@Mz-
z_Ai?3Ysu_(!)$DsEZ^+x^Pudut?b=f4fIkZ+)x`dtsED-oKbaUQcEQA&>zre+?M*k
zdL5+JEI7G?^YG<Fd0c{dJlc7@+Ih&pklM}MDNO)ecAk)Ir097bZ+G7C0USIazs?|k
z#2gkLU?krX{+StHB{lr3Y{5=)zLrWs|9!r8cR}w#o-8W5!E)FqXtiV6sF{RCI<(MY
zI6^Tr*7PV$Lz@s8kf1K*?cP%4xm@J^So9kSfFzbisa9lSA5WkHup!lkr7pHgWzj|@
z>K?)h)7D0_14Okj>ob?Mr(h>&Yx`-d7^M=SU_(^sE=s~lOIP9HgGvcNN4QX#oWHCh
z6LyI$X9)pLSz>6(QGH3%atUotS+-!=>};u)N~r`*d9AEMhc;nVDIPT3(PIK&4JkWq
z!kU7Dyq_!bQOn=ORP=_*rtFvEG+-*DR89+uznd%%)=uwE1xCo0A79z54wpFiR+c)I
zq=b_Hb}wH~Ehj22eVM6J^ey-Dt@3(X{kyla@~CnH8VhL=g<rv+e{?RA^-C%h!DGS4
zJ0w9)(?PWoBqPHgw5$Zk`QfzkA8S`&LN5!+YUMsv&9$V&UDWgxRE2TZ?%q@(t@v}a
z@(AkSA)=A<j<|kc;X?N)XJa9du&Tclgm8<u;u6Re%Z~(*u<)pq;ZlTAD2(VzwZ7AO
z!g+HH3z}*eNT|h%t49z@oic1RdullSQq`$VZ8M_FFZ7PuAK(rH_;X9)bljjM^bRQ-
z;6?**X{n+<Z?Yu=FX!4Iih+9rUBNlvuod>Gb8w(X(Sdlg^9a};t$D1VS$8Dcj*Q(u
ztr;`|lRlzrUiL1TthuBNrfj680FAwhtfeLlrjAU{#e-ec0Du<VJXq5@rPewN%at9b
zn`=edC)b*}!dhw9I{3z{W~FUBjbmDlFet4R&!D~Ssck?9W{E{_WTlRZ8L7XFtw=~0
z10Q9b#qCgs?ROeM+J5am8d8NE<lWUV{)$z{9Sf3%RWm-It;eGZB8PM##5x$(Vt&!F
zsn!|k2=kOiHH%h(6pmH_Y#%CX-?i!{B1Z};dnYE=b@Eh<*``N>&WRMALrzZcw%qMh
zjt;S_XZlTZ^CL6}+)HZ&n=#N`{m>Iz)QfcqD<a=P8Q#kz%*`^|RUO)U&(bHv3d5}n
zCJ4tC8*Nc0r>a!$yI$#5Kk37W?jyc}{i@sZ=cvz!l?S1^@5G~DI{la2m;Nz{x+}Y1
zW@rP#J-s~X1k^j|&ZDlbqqLvf1{9_S#?A-Y6Z*}1`%Mf7dx3*AgoAFZzXE>Xq1sg%
zln)wv!s!0Mi#{kxVI7K-hYV?741Ejl&((cnr8{I~g%i!{O4{9yOfx`#Je*SwQ`?4>
zae|YoNyqXy(nUVnb7IXJGfc$|)5?m|9u8NyI6D43I_arS=84x|&JfPpPz{FKY8w%9
zhE&Pw@>%PL1u&a`NUyGr&B@d0j1Du$7MuOfo8KM7kLFs?n7H+vxKE#WY@2vqop^no
z08mWA>P<}a<D#gHUm2AB8if%^9ddCRe=5Moi0C&!n8F#Gta{d-*%g4pj=2<u!Heiq
zGo6|ZpTay<rPrG#!=9#Uo3h1or+k>g?V2V!nf?YhF>E!Bucw-0Ho$cX;PL9>ZRcSU
zQNqob^3qV1U~4QawSy6V>HNgTMWImYe~ql<)v1EPDK|Fa=n13Y)e!-lOckt)yPBh7
z1{hJiWm&19F^2tKkrVRs3j@boZ$mwI#H_2!S5&WJc@o*up9{U@i+?%fFsy;@i#le*
zZ%qMcyOMA(i_v2f@A9}f{YP;BCnJ=}->FvX4cE$lQLTTCQ29Uq6^;E{$l%{p>zGaJ
ze+?P@hafI2{9hr1zoM~!g$({Fh|BxO`5BaIEwA|N{Olhi)L-Xkt$&3Ky1ILM`=IA%
zP^uMrel|Wa2|YiXor8{0OHitH4SIgI1q~TMM<}Qu?ifn7{(+vKU0vVY-rYYuK0Uv@
zLI7~6<kHpI-TugU%({csIseaS>_8MX<WnfQOl|&9ToEe2@>0l~VM#<p>SUR^!m%`d
zhojY@y1xW*KBTTFct9ZHKLm00B{N0Jd9oR@4a{l?=<3>bGP6oBdFs9Yq+0V)gA|pA
z8dxZkkO1i!a!r+br7)QF*2jcVFwHJ-Xp}#At-pzQLMY#if@^*k1}#v|!`;^Gjs(yt
zdG{v5j)0Rtg*B$RTxG!eNR{a;sMlEt*b~)dDv()fcW8erD$#9ivaPp#<2WyZ$iBHT
z=(WEl*Cv0oGwA`nT6@F!=U`EzwO_$&<mO~kLg|m9DcBArySGe3FV*vA|M+(><)2sC
z9}oAO8y#Kk9kG8N5R$bZcG@@l8`%9Q#hb<>YS5&?r>>^W0RJf@8b3lt$*mv)-22VI
z4}iffkeL>;5$4`*B4r5c{M>qoM7FbT7*C=!b-4Jd#_z~L65vWOe+xBj)Mx!&LmTno
zXoDE}$hmAYnR#l%I8{=Tf>;tvt=+_E3O7@9?Vn7AUl_bmK89wE@$aQ7wwp7can&*v
zS@U&-_(eMGHP3qMEHQmdcCT%wi1q$nZITUQzR5QU{K;XO8<MzG>{Kgmd6*qx2`Dab
zkR^SSdQdXNRAgfWWAed1vXt4*Af42h!?m)MISW&9%ThFLxO6|e$=Rj2vW4AU->vWV
zlCiqX{pfSmv2rN%{0zgu-L!I&wzM1<g_RKi+gh%9T2~+$Q{lIAMtjuM#cuEm44arH
z2Xlg&3;<luTm5Oj-z)pm@qByyrvpYcH4AWTIa0xXfrt#KQ>CWn@P^lj;pju!=i>AR
zU@uFUVOr^MG!y*(S>s8PHpSW88)|jVPB)<OlLStf^;;h)-&C#pnYQrOh)MeD*}!R#
z=g8R6g>cXW%(O7V)aEYh<+vHO2*;!hnl;+YCJ9^6EcREC>bVAkjEs3hJCV8t{5tf8
zA+CX<dVC|P{p(4qB*VrP^9gibHhU>4USgN3yT)Pavi8l5Z}5>0>o$Kx<TfU0&H}f$
zFfb8z2FJXdAZsE`Z2Z6dgxJyc24&U}b`|_1>kew7U(*hCvokYxmB8z1dxj3)_4{FR
zZCpJqwqqW<r5fXctc`bwPlUC`QmuGHGeJTd-AN*zM;%0%&s!?rK6qRxP(fs`>)EO#
zu73J|XuYqD{*d;dm5sG_#S5wAzWd>k?ll?2g8YH-QV#Pad9!0q{*V0}T>4#lk?4L+
z6#;_o7^D)rYxKRc4VH-nyc)MSi|RQaoNf=IghQ7`wP`@^p#g#DK^nHvh<Bqh3hJl4
zo**_3uctC?2)t@9Q}wwsQTjJTh3*6rqr%`X_lDNG$?$aAg#i_E2HQ5s6i&P6R$v1e
zKt8_!GlW(OhN*=d-If#ZRunNrMVZzL9Z&Kg;(`$VeEYbCh+12vJ3P`imlYW()dOz;
z)!64#BgqW@Gh~oYi`5JenEnofV4#WfI7lpV7885$B^tI7IMl6q8Jp6kno*hDNNhwM
znNyz_#sAQ+bzT7QlsC;Jv;(p`e&NW<mtZw*E>v*eO7tDtWd_&D>DwG?2mIdPP_~d~
zrr}Nzq?hDO8={kzjRh`$5mRm)8nbbqNrNjk9ZTg<uxuPmG6XQNBXs@!{LFp%D)Zj+
zEo`4m;Lp^!PZPS!9~Kr;tfqm<k>uu%C-(?W%=OI39E_OyhZDiu!H`5#yJCrgS~hRR
zoLn*tEWx4dspyXdc?#6uWfVvgfrv2$O5w$yy}IO+jRp$dH5?k7Xd^@)Ir7eb?v?dv
z!H>UnEdDGpLK>Z_nor!2CI7;tSc5%RXk%6QUd;S!L!In<Ri`o>y?J%d7PTIOc#Lli
zN1_#C^R?@y`EpKHXbZ#e3BwJXUrl%Qk_KnI862w|{XS{0EiXi2CMJn{^%^!ks`kPr
zvfDZJ8j;9p6pJ=WIV7{1*0@i8eI=-Nvpz8O!JChtFD=Z=2!$0UMH)+NsIho1*Tst_
z5Cq>gB&dDVnRQ)&$2Lf}S2)$BLqS+SOK40XVE>6)rt=$?7bXvaUis5DX@#Euu4a(n
z#8F&Rk52clwqx$hIoL{X$%e1h8hmOjCl>(gsR5o$IC14(SfgswXg;_(@;n^TrdoAr
z*-AL`E|JrHN_FXiDgsGn)3o<;4?3?RY)OfQwHLPmJx^*JGSKAO<20Zb4zrqsF@3pg
z5737^Zzm`~PH{Wl)sFQ2;wycdA<0z}B4c7rsE@^O%)2H8fyNq;#;Wln;Ua?g*+t}y
z_RcP)76OM&t*JSyHj~5M0E2XGe3HBx%Z4U`cH?Dqv)J}aDlvlLEmxAv;qEe66JEu}
z!MwOUkPB<Ehf2CGovivh`1E0fX7Va)z!O1;?!L4M_ZpJ*pu56KoZ5@oFP2VJK`L06
zGF@)J;13nVNeZ>hbjkp87`hJY=&1q4iVdY2V@K+(k8{<L4dvgg%{P8FB1P?07e9PD
zB6c_jbYV7D2P>Qykv&06v5mD+dPlX_S^?R&W0hYeeRcT&5x;I4%vss`%@@8e&n5yJ
zYV<Tvcve_p21}X{;Lb!N$iTXcVx!kC15PsxFiMSGtyjUdaw|_<t<Ew!x7K{tams6u
zO1ai|V&~&iI@u^yJV>M+t-((M+j&~xj%HUu|KOky>1t=t+wqG<H*#+34}OE(@;{#m
zR<|en_`7t@J_z2nu5)E^kGYv&WjzS(`%k$dFhbaclU>LTzOFa-xM%VN(CM*$ta2Vo
zak(7HUqxn#s-C|3Wb-z?l~p5aXC|%#CRb<Tpn>ekI9C*=js^SFM%BZ3k^QVBtLjL}
zv1PUBqYDz)E7YzktMO9izK87f{3Ks_1G4_B%NWlDodXC%`|e>_=k+pqqHT|F;$a*b
z9i0sw-#(@M(Ds4h<nv$y2a~z`K=}GDW~V@3!oyF5_Kv;hTY+&4Di1en3S;@K<%tL)
z&*#<5{bt+8^Inazrj^$_dY0Fv#7@z}f&F_qrH*qKs<Gv#j+1;OgJUxPN19@95GDBs
z<LU{gW1q-JOvg_5MJ&%#7mQcpcpujTDlf>BQr45^j?V&;7ki%1A{?+_#|x&%2Z0gz
zCm85%3|#649#1(boI9DQcz?9>#syK}Yw}QlK4CBN(;!oL@!6u*0?@kv@YR0o_kJA2
z{?Pe}N7J9z)&Je1A3D(2*w?#cL3aGkiwx-JVMbII>?DTlI<WvF%xDG+05mvS33mBn
z^83W@k;JJ77$5~AaQWqY^&6UU!50hAUiAM0vXWVJl^e7o6bmwyCXibEY_VvMMjJ#h
z8NhWLpvmj8w%~yVhN%h&4(<>9LF|BX5d2^mjJX|TyNGW)Z@QcZ3~^;>?gm91s2a{m
z>VpLhK;)r=M1IA(?#Q-j(w=Hyh)?_hNsgwWZgI%{+s_%qmQ-C7iJAdXgC<^@_EyQE
ztSVu~M8Q%?VG>PYT7}-MyrIe;zdM-!bV4>Q8`KP7L{w!A>2HF){2u<~6edg<0@93l
z%R%08Z_BV3>eLvnx)2UMpI>Cu&2tT+G5c_)2|vL|5Xx^^3XV*gi_F)ITrCd!C=FW=
ziUJlyeD3#ny$@FAW!(ascWIil;6<&!iFQ_rqUDH!1cZlkA<i=ZP@uWkhZt&-SZFSm
zUMrTtEtZ}s2Csyka7mt6z%U6MD_a|_E*brvFwTL~`U`R-^U#;y;3&1AxI)QDy6i~w
zrO?AS@d7At9#gS%xlz~;5Lem5AMeiTctQ+#n+?8N5aOelp)SSk%|@>vGl4YzqFT*m
zTo301d9d-qt`qG@l70##`F#dByCwadYIR|9dm%_j`SPEmu@A}7Bq{%iYHdzQUrNb*
zNXafi2w+0i<xFilrzt!{E-6VBBS~dEmo2DH^`K6hRaS;SSKzsL_g6Gl<{jLoI2v|(
zcM0IXL}PymSp5}^C9z`sM>Lim1rU)KQ`1F&s!Sh)fM8H!G9`h=Y6#dEqT70a|6O7d
zA(<8j%oMIoRGrL}l?0q?p<HS~==5aZp#|Bky@dSeOg2ATwezeUlI(|O<fkFp7Xf(W
zqs-39Y`V+rkJvePODt%l$oMTZgrv}^HhWA1#3T*_f0Uz+or{txK`@yU*#ytboCC9*
zfw!64!iT__nnMdkt2Wc2(O4+D_E9h&nlKn8;ULTPrEW=3#WASdj#ntm7mLo5U@$C#
zEs$U+_#jrG){-&g8mwz+s(l1!SemzrQYbG-XuJ$(%AA`IDiCQb6rO}$2Eo`_8vks8
zbJQ;S?O5cNoNK{MD9}sc?H&$o8K~z-1r8g!mBM+177f%D2Rj#oP=jM0i+$X)6SN6J
zLra26Oa7ATk(TDlLQ3)<@$=kE-<p<|4&#?BmnuvZ3v8BzyO&fS;n#-3)w`QFx|db9
z<S<p2xy+Y!l;Xp~mA|Df|1Men>qxa+yS!?-93#4nFT4DTpkj;}0PV?6r{XW7R!kg~
zZ5)*yAHvTI>i<S9gHg^@u&Z22s4Q)%)Yz<?L8!_n1?V#)Ac$4v4wgfI0P`<bBoD&G
z3hG^2GCvPTzPguQwp1`<b6Al4gK7<Pm1(KY39Zsqc8kAr`wyy>tQOsl9i|utK}efa
z2Mb}7Z3J8!<y3ux&BB>hts_x)3M9)h3uO+glbNe!4+F3oRmn2dU)!<b8P)Tb)SYxe
zh<H6};L+-N=c>;q2}R`moMjtW1M4+d$Up1Q$v*|@vtV)P)Dwrrt=`t-VK>loHA)=R
zkNt$vN~<NIuKRHF<7iV~9=6F+qwylUo{bjJX+iCZ_SJE(x&_eS#6oR$Qzzv?7ut%Z
zInrQK8;oxUrg>8jJJ862(<omHI7w|zT#*L~HMiR}8a;u(lEtY8wZyM9MvzgLue3xk
zHaY0P)TL3C5ttXG$-1Xudalst>cn)W$pDX=vz}UEm0KyZoA=_u7tw)p0nO25O|e4l
z8qGBAa<G$D^64IhyUMA>Y6^L+4IVBnf5h6$tlAreoU2%{PITzTt=fD%I)1M}f(BOF
z-=4Rp;I|zB<OX!wm^M2%V%wTq+q`r-*FD<GXxlZcy5zgNFwh+p(OTQ>A{2T$4feY7
zFEh90Fn5Hy?vGo!iaO3XI{oFke}U{TgxYc2@L5-TP=Z@M$~wtTI^JOS=D~LDQ+M_0
z^bq{8MfU797-{3yjnB8T#ct~mPRExC|4u3VmZ-e_sjT<#0H8$9cre%8b4;?^N(V0w
zC$yOM-Lv03z2CB}|Ho(=GE_Lw2G&_^(;UV4K-;Oa3Q##owXSZ*@9FmZfrK_muZTC`
z`wYh`OBXOg9^^TwrIz=0n9hu_C$bzdL>LS=Ihb$)hg2=$^^}&Ti<G1bsZS{%$_al%
zf;%L{HB>Z8lK0%0vN~M7H6-y7+-x{pD-2g9OdF<~T9GoMQ$0f7Gu(+j+Fd?uL^jgD
zikKlknB6w|gL+g(dw8-9aax|HPj}1|NIF<PI9xtvJ~^7@IkI^|z7{^DBpJW^17V@9
z-Zp6D_y_E1Iok&LgfaDa!}I8^Fe0MZ$mi*iCt*bN&579b1Q=@sX3oiR^a&)k39SK@
zz?DgZ$qBSEa@+_6)U_r=uc^n>sRwjsatZ`pLjV>9LE~s54F*Dp_+**x1XIKmD_djd
z&9qkZB&Px$q4bQn*tC2sCwj#Uh1k^R*cmYlcuGCG&w8_>$^fY~2(5bltQyDk8@66$
ziaC;>Gx$alAN1zPCT9Wfb9F@!^c85XEf{nZ5ShDY=)cU1|C~<@pM&X{hjtBkMQDGD
zEO3m`P?eIwab$SEEC4C~8lk3AoIGAg89mB^tw}>L%EH=7BGyWyL`Y&PO5?nU6TC{3
z)`(IRO4CjWGbl>4)(CRiOY#)(3-n5gUT{kyipwH!D=3Pqyl`tW3hS(K8^-dR^l+Qo
z6IvB;+eH#OMR2<-;(OU}f3d|6P~Z+#G}=zDa=I<>!>%PUu5o-^ivX`u`>vTh6)dn-
zORI3&C}6Kv1X{gcM^IV+c^BZFyWUA0@qK$;2?_8Ko#qk);z&vO<}SkiB!lTG!|vVE
zdXwx%(8I=U;>JZq>5Eq~BBmwG*+!A<X2{ZJa?mDhN69Yg7Kj;;bF&5#><^RK`q?-@
zG@jqFGXi4T{?fnoDQ7$|cUxh8>#;q7zH;khv&=yS4u^L**XtXhal_P@-^3Tc;naVl
zQ^t|JCVzgdq*fflTL+2gZ%df(gf{Q=1pZF5*nJ@0jmX`NBG^ei-1U&yjbPgQnXm)x
zK88zBeLTalTvyeFUav{*ML+C)Q5%i7*ys4Q9bCT8im;b+xKAUoAIEe+7`T^VaR4{h
zmN&cCmSJaqmK<uM7?8Pl8+4E@aM;$jU+b9$emKmggdF9H9_8EM!DSOhdJ{h&qL)N2
zn4cb1Qy$lf9@pz1H+mm~Gml$3j-kcaj@RSAQ>}xU&|>V#==#Yxv>2O7&&&z1);%>V
zpD-2!%y*o&9{SH3TF;9J$UQM>!<-pW+hu#?slYBA;Q%TsVOV3%6z<Mm49*z1&%XDZ
zZEc<1z2;&Y{c*0Vhh}8)aL<bT|9pcz7x6#W$UT?pJy+R2*MYl`p}jEubRlkZ0rbD%
z&%Frgz2Mls*gpG%M0<&(bopv{Sp#?ZHurM0_mX=1av$!Bi1zB@(-lPjT*d$DP1V&4
zy9dsnE10Ou8^bF=-xbrlYc!?x>odb^{D5nTs%xx?>z%D@O86UvcQ<%SH*1DBECDxa
zRX0QvHyiA?WJ<SVTQ?YRw|cg>R8hBmIk%#Hx2B!ch@F>qRb)T2K09XJLhqBrzFqkE
zT>55R_($CZZd?RIF5Muc9$AuJRCi$?{(2NfebbGpx{LF<O6Vj>g1}#PcwuxtNNqgC
zT|DR~J=k#C34S>D%KcTkLB#I+NJRXUsr0DyhqJN@t9}AL2aB`yPwf}8yA|}ON4)1-
zWxyjQrOU*92o@c-PR%rxlF}MC3boQ=%FFV**fAxF{~>W~zD!_w+yNzyiNls1p_A_i
z(!WH8tc3q9aa{gphZx4!{oj-C0@;0=_dkhaA6R5ueo+uHtl!@z-&hpRV04tEe>6d2
z0)j(|2*dLJG5J=caI+$$S3@V?%mTc^;-b=)zb4=4+IkM&#{RMK%7D&kqV5Uk<eO6~
z1fQ|AvFSU7-!UUPw{>`QgtE&udVH}^aJDDPdT{yp)UyITAiqax`!$l;?Fom+e7!Rf
z*a{1e&7Q7l;p-oah$E9fSd*6(gb8_vuUtKqCnJV3YErLpnLiRptp?UPul=4Ezk^;O
zY*zR7S27po<h4w_(y+UbQ$6c2KG`G@0y?9)ECJSdn9O_iHPo|`Fu1SHyzQw8MT>Rg
zZH>gCjf`6PrfRI#axU@9*c}1$rp#idx&<C^y)7d-nX273FQLzAM(jce(R6Z|^3Aoo
zBgx!W9VZyyQNOZw2}%mbu>K~_>&6l6YH2wBH*vfK@LuogO5{<Q;oZzUi+)T4!t|=`
zuv2`h`cvo?*U6Z93U<UF5fKu8PCruHTHsS2_)g(@kG4dBiwM*Bq&~AR6`mC={0h28
zS@1bH^)CN*bt}V>1$jS@Kn&{*cc>w*|9pd#VT6dwr{as_4$KxqB_&Ms*X?dH2*g9b
zM-Qa7v7`BbYLpOXPM*1I7(xI#Ko8+CvfCCVxr9b3x(?y<!p9~x^APxs;&KtjPeJOA
zpZfU?y%chb$WT<Qi|MsDBvA4>KT0x*$6S&Nh<j+v-x!7H5Y7}N8T8W?!eb;JZu`71
zlo?G`X>1<XLmy@$j{CGMfS##vG^B_@Vz+N*VD?Cyncagen4fbfjF1Y)%Fe8rcPm~R
zmjC_>DW)>F#gR@FbLPGUdv*__r3Mwf1+x)Q9n8#Lk$8W^7oa9!<)TIE$|A1pF4JAP
zge|#OHDS-Z2C1&zL8Yx#bi&>jg#l!rHm*7!pEhj<v7CW-g2;gGj{QidEYs@Jr|(_#
z%CJNbX8%6<cHZ9lb+wddyHj*m)RS$s&acjCef&)<*WJY-et!^$tI>7Njj5z5-H)f-
zrVQvYLcdJ<YI%MxhU3p#>;C3lezh-IQG+-P3)<|@{&)LCbsxErG#$A0YofV72+6HF
z_?76hI@FM0S<4S_`FLJV6ThN!&f?1Hq0fowoO1ObSdDQl^t&sdFJgy{aW9p%xkV4X
zEfYasVQsD8S#?gS;9mYwnBG10L~qSH&-fVOSOe%cbNN7yEn2l6e8m>J$~uK{3HjZ!
zS;4)lPaB!H9k`%jJL_jm-7FjwY}3q}KY`|&S@NygUARJusU@bS4pZ=S)Y|Szu$iyf
zBe@+~e<2v<`}2G?IWp3EPMO8pePP2eaZ(tgVJmX$VcGejpGo)9dQs)?*DP=tmG%Bc
zP3I5bJ{WPa<0-F~s`2?+gIV-d^GN@>!=+QM+?Esp-r)Xvf%o-IH7-(oKO6x+Gt5~O
zu=^MvA<eWK(MVZ{bd}m-SOa{8QQ|{TpM@;7*xe?;;eVt}V<gSrOytKA#ATw2_QC8^
zatTN9&PvXM`#~KQYz#ZkH3d$}_dYtrXkYf{Y^+ZQeQ#+kU5^;oQQq>0AVXgL!qjxr
z@>qet9L;Ma83WYtdhauT$!CXefh2#!#!KqIL`A$)K^t##dCwu)6IOgqM`^FZgVd$+
zo`Dqy?I^jNQ`9P&qE^g~9XBR~5dib|b}f1V;|Gg^x;30wN}5pse8{j$yjeuWwG6|s
zuRm-#S0b;#IJwIg0Q_bx<Hw%^Y(5sadVZjoK9jYR&tHa2zT~Up2m%0_hods-7qGqM
zg-lkC029kNVdTYKiP{GR)A?G9+e1?U-^S6NXon2@omBpjZ3S1%(hN%TLXimWR=2ay
zsk5tQl$D3RE~q@xr`P+kEhLj((|Pd0)ux}yEJo28c_2(3!sbqhb}By<<C6*WawX>i
zl$Z}4^2=)%hXA2p*xy{jBU&@D_^Hzd4fA~28uk5bi;59>3!6dm^{rCKFaHcoHT>@Q
zjXu#(+0?|%e5nTbOhHo0L`i~@cY)&aRgcIrDmQ|>yGQIj4|8cT#$`qX!AfkUvmpg)
zrB)IM+8e{c(TxpoH~3{=bpSYpU$9eMc7bY#P=m*rL8aqb*>jJqrv1(=wWM`9<;T?U
zE<%R9*c*SN_r8l|40E-VgI02ULU6?$PNmrdCp_FjOXaV*b$mCLmV8~BL!ypva01z6
zPnn07wi6oKBEoF2NOd<N#p;jgt+5`5)w)QN;Qb+UWmXzot2>F;&6LH~s%W^GgTwK)
zV!zIi0*;oB6MwbRy_CDk0d;kmT}TU^%s(ukt<7D|Ru`32df>@!;FxRVHAN`dygU|x
zTWUH7UMhX%@;Af@iMpB1Z3#9;M(!DAnz3!f9k)U@?s*nN@W;;)Udt5D+)>&);cc}f
zejtw~a`)Mb+q2A#7!gU|SM9OI1YUraNv#$;#!oo>QPAaIA2ku^ZJ4!`csEJj-G7p5
zya>!HpT&y$)2))(9bty>`~Ji=ka(O6gLhPthHPZG@TfK!q199%#kG-ZJv(%v4el~X
zWem1|7=UXKEc)~?0mQ7&ernq!m~n%%wwZ#k{IW6^<a?ZymUZ+QMYljU&Y$L%<^rHy
zn#(^m&SdfiSfSei=#n32|26qGJ-*MzY$!KVIM!ZyoCl9LRJx2E>pwj%{Fli$Y3$^?
z(9_a?b9ac@1RhZMTNC8Wx%Fx7Jo5jt3G)BT-QmB9<Nrn8TRycJsC~D=3BjSb7Pq3s
zwN!9xDNZRAhZ3NrXbDbmEe^pQf;$9vcemmW6|_0&-urppXYYCEJ#*%KIWy;5{(?Jm
zU-w$S)jU(E@w3F};eW#&R;NAu!#JKF`}Oa}@u~ZG%i8a;-|cq~XAq*+4IIsXoP0wy
zTem33uluC_T*O4Te&^8qkCX2ejHvCujN>9r6n8j&JJ<5(C;b18I~>q#zf2mx|7W|l
z{YRmuPgVcz!2G<&ulN8A41BYMjlbOC-yuWBcx?HE=!Qy%UmX1a5R=d=@|Zta%^g?I
zVtrqszC0nHDxM($R1kD=2&O&+*$;ToGw5Seckl5vFYryRra8j$jj09v{PKaA%5VC!
zIT^s0+MSew%962>)BUaP1*IzCz6FbtfAnWPQ3RwT!JoI@pLfA`Gf|K{S&eyLY3oG*
zFRmriw%=@R0QGJFYqAB&rT^5licqN8OZ|ZGUWw~?|KI&Snz%u7kJuz|HJ>+{Vu6FQ
z1#Ha4g9E++v~+@A=z>1LgB=!vKe}UKQ-zFn11R0SY#Ob;==*p!hIlW8phRN`Rj9vs
zXrO**uzP4|awuwjFk&HeAu)t`@@<Tg`+Sm5{64B7#8usZ@3a8T48`Jp$~p{C+0j7_
z6e7cxs{P)5c|xWjw0@-q{-U(85k_i(@dR72N{OU)z>m^7oYytLiX(g-9<J?=(Ox9n
zv=DZW5$?nhu_zy*(jD<}FJb`@8Nw3j_$qSVEHXPF(xEVN4iVYB9chmfHO>^(rx;~t
z9W@4t;>e4#?T;GWh_b<qw&95GlaCf~iBO7<V5x~9+lt1^j%MqM4q}M`D#Y}Eh_*(B
zPGB*Q%ww+nV=&NSNgl_RDaN9|kHz+nZOo0mN5p>WiRml~2XF~9LHRg<B3#8pk8K$l
zl%@H&i1?`)1yf!KQxiS)U=Xu?DbYkIMa>{X{YtKwP{D&<v6$vX3gIg*dSzQWRca)m
zdJ3JU0ll_FI1e;@)F!TyD#oZd!UP)k?k4*EV4Q_SjKNK~bxMpaG{W8>)^Rb~sVUak
zBgU0F?z2Sfm*P0f;>78JL_Nhg%e|N$fy8d@#P80D-N{MRO-WA%lNk?^MSv+nTq%;u
zDdM&%^3W97;*^(zDbG>FAuv^iD^*81Rm(P2e=*7KCdrIC+4Law12D~;E6rvw^`mW?
z12oO0I1N0Q=5~<w37GE5mF}*b9%-BIt(<06oE{BLk3C3_2WBL4Wh5zQq}XPpK{GOn
zGqMIVvJWzHftmSSnT5)k#kQHHgXv#WA|VGt{>pBF68OO$G@%kiVK)&)w#dYirsVy>
ztiyw><Hgj|o78jaG%U$99K$rAXBtLo8bNa!(NY@8Z5kO(`XkBoI(L~13AZaQd^9jr
z@{tfdw;N*#=;t8SZ)K(%gGkyXb2b_`4wP|xOUWbom`{=j2+x&X%Ke`w-)GJK=rOrv
zkAhX2^Ri;{9uD%9X7hBobx~V}34naGuzXF=d}9?n)7yNLM+N4F`X3An{9*ajVFkjU
z3mhbIKi(GjzzWtm3nxhn-6Rd%Qw!bY3wH(zfi;ERhlNMDMUG2uFD;5n<%?DyF+HZS
z6UHlw@T7?@aVje+QZr;u3^PkpVRP64=x`QecUgbXN0#^(grSl87BrW9EdYoOpojSv
zw`>&ggqHkrE^asgiNkrT?egKQ#6c6q!jRGzJ!n-+rE{NDHq1&d6w1^vBS^tz19-rA
zNxC|2xv^VW2Bz|9yMm4(q7hGq#Z>X_-qO{>@;7<Jn=}mDsd7Pnk5)V@z_;ah@QV4#
zifJ<R3+~F#`DN>7l~aC|0|AtT@XC8htv{&*fHXSvG#MTUYyKy=msWY9bNSpf93)~&
zZU(<ssfu`C#Su{T^EEo1R|UfzB@;;K@sS*dR`s-JwR3DWbxk$b2Xrj63Q|ywC36j_
zVvXJRVmM6|eHwfL4)5Nqamz!05?(Bs_DI?u$*Z)il%)-Swp^~BMy`3prftMWj8#Rt
z4A5&KGoWQN0`b3I_S0Q1ecwWAvCL|@EFcK4^=PiAo~&2AtfynaaN#NZBqc`nzP8Y>
zK{OXA&Qt1>CgB@iUROh_U|;>*ivTiA<*zCt0dKJMY&=#ZiM^wYmwGBP(Kry+gqznC
z22vE-th2jooP#$xPd2@~BC<(q{!v0yW<*iJ^HSQZNte5s^m#L7OQSHXMPsPt-S-w|
zP^%EQ#x}g5hgPYtw0Z#a=)Aere5n<2-YQJn)~VWNY}W=gYk2C?@+BS@W?#5g`Ura0
zQUGcp*J_+CZ64QZF<@?waV4T1ZtDgiJI0tglodKMgbBL53~!h5?_0?Jq=6vMtFO}x
z_UtJ@+6W$JMBoR)q2U686^soK3#m5<$csKmjL3Y7=mT_8S9J!&k}!F{p&Y@WHh#>0
zk4L{!$L0O*u`xcY12O+Go*+KDM-{@hu1jj7iz%+V%8V#PpgUK$y9eC;OTNc4o?I#2
zR7DzJ&4EyZPRx>|x94eZmsamIxYy@3#c7(paT&;zm%z+h!k77xnYgWGI>`DSWQ#9l
z@E!vjf`T#oJzM*|SNgx+_e1Cg{G|s1jR(BxiZL(x8j1Uh1o{s#K8BO$>W8<<l(vz3
ze-M*o3G)U;c;iLg1Er)LQs|JZY51Uwblj{F;w{l3W1XQ&@K9*X5O(cQ9B+LBe%&_*
z$Fef^ieo(ZF-ElmFq_w*#hasT1+QZTqZ41DHUd`SGHjSOJo|Pez-6Q?W<(l3k{~eB
z`EoSYe6$oYDg_%gnHj;q9Xar7JsNggyXV@F#@i~x_#Oe=T}c=Jfynn#T$>v!yBy0Q
z9+wap_kA;d0v)?9YrkD_ypP~Pt%d;9G0=VRG1Xz%<rO#5FV^cPpwcau=M&xBqca7Q
zUxp?xHYSCLC!-Og2==MtsR@|blptg(3O3czH#M;_l?9j<V44;aoFq1!1ZGe3Bc>zd
zr`xTj{Zyuom}Z{HBWL{0X4-;hLQ*Rfd?tHSC+kM)C)DbhWE^$cio{QVYOClP^tf81
z_U}$q-unP8%F!(&NoCcu<z<K+GtiwLaID+xZDsOR$_YP5qJMcHagNM(B`ACQfC8sR
zG+ZYR(<hG8XFs>heq5fNs-I6$nf>Imu#~#6*SbJ~n)_`Vk2z_GAZR;kb^JzvCy!5c
z;II@Gxs)5(n4i&BSngQ7n(vcA=<9>-=SUu4lK%UCF_L}>kA692d8zhcsorrVH+&`0
zczMxnxh8da6TZwovFsf)-^{+61YeS1>Ure9>IGYE>RW9OTMQ;x(&JkS^AU*iX-J@V
z+%*BNsbg%=Bbm3#alS{|UuERmI|AoS&~Gwu?tJVYGRkJ!%2L%UHrzJiwAO{e>)1jY
zZ!eYysaJH%*Fs0vGEUaUB8Mk@9Nn-5yYSE{jJBlc*C%#2%u+Xy%^Rn;jyMQ_i0QWI
z*KP64ZOQg+>9uW9(~uy73JJ8Wp-4y0iYlZD5KRM}d<}rL=Je_mjg)~&{m=JIiX8^X
z4!Z^k-Z}KIaSR#Yh;T7{!thRN!fC#5{lm_)!ri5wU4^~fS<F3oj=izxdvex$gMoXp
zg?l|cdop`_9hm#l9Q%#W_ob}&s{;2W3-`-=_9gcAi!cwwISyi;ABb5W1Oy(479P0w
z96a4a9ynkgif|mhe|{)zeW)9FC{%c;(Q_!cclZkPi2rwx^^-~4uSZ-DZuJ#MGLc1u
z5UWd-BLNOuZ<S;ILfdxJP3L*l>L<?z2wk1)k0%*i`^E}pHFjCtPApSTxUKPq{?x58
zxOROk+O9aEM4ae*o(fQ&c2|5EYd_X#|1$mO)VuJstoM{hkMMM@^mff<BkC;j=b4D!
z>1x!MQ>JsL7w01LXON+D5z4cBybBVib6u5-r-kR*K^MIJXEbte=+0cwkjH$amrt!P
zQY<g&qtO`Gb-35h`Q&u?87~BVwS?bYu#PK4=w1E#bOq=*k&sgi6}u!N^5FE<m3?=_
z%jo*UiqwNJ>nx7rVnNp9=V_jDhpRMlFLLifjZr!J)em#epE6&52oZSz*MC~XdT5U8
znxDDqIQ>l1`)T`BH7)6<19?tD|4*>52TV|)?DjWAE|_kTFqvwC+tfWtXIK25Y_I3H
zV&;1cvw=9d8}EoPV=}b=eNg5<mLF|ODjfcChyC>bFZ7mE@DUg;#Mb+*&#XCu)72^w
z6W!&%(A)pjX2w>RN3c_(5#;<uZ%bxN^=s@_hw4h_E6uv?EDzs+-c;F4mzWIKmoFCq
zsS<i!ewDAbxL+OS(|oB&Z1zH-w`vRA1|6>fl%^w%g3I0Hc8^7K7EtJIa^){ei6-Tp
z5tyP_@QTNv^<>fOqg7+WLEBllMWrQo)6basYS*LFp(Qtxm6ia|-g0gI83Q7Ohe+dA
zJm&jw?(oO4#U{f2shYwyhZRqP<E8F^f>U}N_lteL-%p%m+wKl9n`=Ux|Fk`H9_@`6
z`F0==w{9m9Sx8^Zr5C0UK79QR|LCW>e%`pjFs1<VoL-Ya;M*eR_c-P@U4gX01G--s
zzH)9sJtp6p<1yvzo9nVxaBhZ+)W4tz6tbEyk9_Kuyp1h&sl@VGe3vROhTrts0_WA^
zgPds9w-b5soPAXJ32&@`-@^0`i*}M)2WQ!^U;9&UMOv7nmLK&Mil4`#B@Pw@Kc~^A
zO%L7h2uXK+Ta-tJMGT4838eVjW<DgB_YOQ?<OuqB%VdCt!Fs-LWGvellAH9z#*&1G
z0CA8SyCi5=h-pO==<J_k#{}_BKeY4B!kauSOO~YKsmRE&wa#yC#|tg%Y}YFxL{Ow1
zRSf;|C_{qE4400peTb#_JdX~Vo~bsN9?jJ_>K{3}kJ?Ig<qbyNl~<$=F;_G%auEj>
zo#U1ExBPrUi6EHV<tb~j+Bm8N-`!4}AVjN;LJ+t|Z_f!6RF==1-36qb9f(+XE_#7y
zgH<uq9TR8$GgI#c2Xlg?F&b!dS2ntybQB4J_Uq}c9Pl&&0w!X);x+g`ei;kVaez)1
z#yKJ!M0%y<>V5<(wSdp3`N`Bj2WdN{ozBvCXp7AITb6gtnd#AgT*L}{@SC#vGTJxq
zxSjv2iByeVY|MJyaeakurmUfjLgWN<#kZli0at-iqlzYwr($lC5`J<$?5{d`{oP#Q
z)DO9uT#EH%Jj1&12Ad>=(49IdZEbd+CZ=3+4XvYsf0Yva#LF=2wV+K->+jRMv*4V5
z&kvuMy`_#V@L~6t|GdM#;(z!tqv!PSbHVz|8_*TL@%!Qnz5b0j;8XOot&J>(zUzbp
zeunk9!VccM-A2Z>^WNbOy;GeDBIv^swdui+hK_X0PTv#ZbzI|Dh;!<51^_wzfq+>H
zb_o$9Ny6BszLf%@Obi2cgvLz!yu!USvELl-=CM4aofI$F_vdS-3p;CRN(#8-Ppxd1
z>$eKDe{ceXMi2m>0V=96#gJ}oBM?-dip3uTirEcN^Bm|wh)>dL;g5}c(COwzl3Kmv
zRC`a%AJa_8&J<!%D^HC|<O;lH32z};rlECzNnD_<Zu&`$eh=+ch_hJ~=1Q*gZ8ELI
zuC|Pg_c|j{asTr*r`QPI92N}RK_yY=I8w|wHcFNOcVZpU;1$*of#Ob;u&J;-@@y{6
zrqnkTS{RU-cO07+$`R#piS8*oQg*;Jt*z=rw>Nq0zCbnEwOI73gsdm4ovO3famkym
zJA_U^by{U%=uFwJLj`s3dpok%D>LSzUvU3(`SJL83;b;{%Bo;DWr_rVKB5J{WOe1;
zjMx?r${iQJel7juLx_xa!1z8ndB}Tl&L;H3S58)Y$ZX4)A~(|JsGtG|SZC)x)$PrA
z8Tbu71A)3?63djJjffP7`YRQM8l9cmH~9RC8fue*(<3vV#Kj_Ql$W1RKJ))1rhuiW
zky|tE`h#3pj%{Cd6h5;f@-(<BFyB4yHmHPquVlyl&@zW+s@UpNQ7RWVXLJc|g=c5!
z)tgd2zEsVcIJAl`G#-f_JL>AkvlUNXl)nGIq*}k*S8jsfam77S>mI_cGS)i&_(P@L
zLPH*|>vv4ST1q>_Fj-BC;MEl=#Twh~tJ&N*nxvzpowDkzoqm5TV*sL^H%F_lQaB+~
zI08&+^w#Sk_#8gn5zLDARXSqvYWVOx+A@!A7(qtjfy<eUXT=+6`z-NYh)RvKAHS)`
z&o8$tFbX>Sh||iLU#i$rI<qgj(Y!KnYF>Y*|I2N*?R+)Z8>F~CxAeRG`bDKmZyL>|
zPG@V;V5R7<yBFxWeTdica2xV;0&Jp!j=G04G!CZC2`wsG3c|F27rB~Z4B6e=Bm(NM
z=xA^;!n)B2cUfkKbqJgm&^X6NLMlnN5N7VJqH7Kjktw?TLH)hj1A<m=ynT=3ZA<Yc
zG7}2bcJ{ddM%=%+!aIPuyo#TPjWhA$*Kt<`e20fEuxe7)!*|<D7Dp@!UPk}E+<yAS
zpf4e>Dx-sR&vwLs|MQxw>vF5149N3&pzJ9!t$W4V_FjVDPxe!8?uAVgU+Qpt@XP!&
zQd<S<Tk5oW)xzKRw$_2Se7W_m#c9rV4SAlUrB*LX3BDXS^?6d)SPhqMrrVs%8KyP7
zeOWPIZU6GOXS+^<Jlcv>lNpD_LNuAV4UuEE#Z?l<WuB<^MY=KpF=R2!Ra6L;LBZyK
z=d>k@-87jas*-W{@j$e%`R|+@ulBO-jvJTUxudre+gfk(7k#ELPQFBj>m>=l0`NY9
zA!LdhW+X=HD~{)#kM9#thU7bVo><w7C1c_j)^~@XT~y)<e9!!K9i$-OoKR}G^H{dC
zkCxDtu@JG-*M2Rc2&wq;+u?f`XOo^ja^5AYAAi4-`1Vl0-7iJ8dH2&tw6SdHCo|3r
zp6l?H8DE2+?~HwT3_>_n>&J#F?zWB$fl^qJUj=J^qn{XPOJNVRD>q!BpX$eYjlZjK
zb@*t%>A;x0`o-^eX(0VG4II%KG!u;GJ?Hag&Q{&;8j}5bB$rJw-nyJw&Xz`*p~?M0
zyTx4|gscon*&V(6g*u*u-fKa{4ZVl?Q@7MhQs?twK73Y;iA!I;9ydCDJGJe+!@g#?
z=;WU}x7PMv|FZGZ&saLommec6%jKrpMwT$_t51f9jvu?I&!tJwgTBqXV+qKgiy@-$
zD<?VdVG{k_J2b$?A|oeg!|wyW)(-N|o$nAP@xSh{*zORN`Hja3!JdE+UPDl~S5jQR
zAyJ~u-(PuLL6idww8`u!^BcAH_*mSZRo|c8-5+Isb2p-Hum6eOiYEuSPxwi?W1-}4
zetFcYA>g@w;D5K7m8k$4*MTVWTSq(yHTd|}JxDVdfNC=vF9exh2boa?qwcUDaDxF_
zew<1=-g`dmMJV~(|H4{vEQCqr?K8CVfVIuwFq{BSrO!_|$()s5iRgz^_k@sv0fEV~
zS2(0T3qCxYjDEPX;hdyUPG9kb&{z@ZV?Ss}9+UwsbUTDQQ=Bw$0X21pgofycjbaD#
zW`}LQ42Yo$b9D)0+YIwm3}@|x!u!Kw--kN}gfpXsCH03>Y=oO(M5HB$RVT9z*pRY*
z_C@*M&te%y2S`@^Li7<b>n|dH*5fRRYp>|zt~Y9Laz^RDjS3Km5(tVqaF061#XT%~
zeMW_QG4SRJH~Q2)+FL97ZGQAuMD)9zXdgg~Gh57Bax}IF4rYoTuowr_q)!0FA(Aj4
z;flpIh;<Q&%?OHhgT)s1#(v(2t-^|PWr}Nh5y$2c%Q=Y6E@8|=jl*Ya!Vkm|^e`1Z
zz<!!yCI*e?Zi=^xi6`5Q=Ut3{CV?$~@cu<H_Nx?gWhl04v4#2pGT}LOqUm{p>dQnq
ziA4P-thXN2vyF*_6N#ai-^`i5MLz%b-t1eh-#6RhL<a*bJ1%7>gT#*#Njk(y=^v6z
zAW2DiNyY|AUk@<7B~<)UumYfrLAJ?|lw=ifGJj99-bQi}W(v3|Il&e)u1Su^FES|w
zJ;gvR1Bith{L<G?E$~P!1nQ?#r<N_IR@|hbobPIhv|59-dXKcml(fI-?P6N{O&Wqa
zy-OnfKhRr;rqr<m$~5W>H$Vox0sxtmvDB2YvY4@UlYw!rfOeVkjTOK%MY`DMJY|_d
zp-pyBoVlCAayICUj>x1H%z8wbCFGCH!Y<6>>B{=Eo5h9>yJm+mJcBJ+!KnOUGX*e`
zE?CGe3>Q7ypFJDxS+<u|_N`yGTS4|!XSV%r_Ay$H6?@K(Le6`uoHf53<AR*I&Ybn{
zIb&$KORTy53c0f%a@+lKC-QRZJ9B%!=a!@8b+G2;E95nP$jk7{E6dA^@60Rwo)?Oi
zpTnB}RUtp^L%yqD{>}}HF^#gJA;r5PrT2&A7M@C$c4XG6uWTjB><?c!9+Em4zHm+@
zbsc*CIgIp+%5x7-Qm;crA3IWCJ4HW3(tyKfK`NvnhR>jqq~S{nk=&%wb_%gHr14Ag
ziFl+*D)K3}Bxxmb8HXfU+;Z7VNRr%C+591rLOj`G&#c3yN983XrJmANsU$U?QgvY@
z4ct;qo+K@|l5KV*9VL>Th9uo~lD#S<{WOw;k|e`R5~JKC<6#n$G$hlK60>+D^M~S#
zx5UdO;;V<m>xSZ+OT^o#e)ACVUWwR2Gx3q9*hvZT8I9OQD)H5l=+7|X-(jK`wpq=o
z3{zBabSb#vMdD9zxoactpTiQ3Z+O!;S*<TJm?7}ebND57RSq1ET!NF@qmwUJai3Q)
zg`=aIG7RBW?4@XIY1J(7YF?=-&bw-gjcTDIG!Y}5FQido;Wai?;_{6(MiZpia0nhQ
z8BGgJ&<KlXQ#05ffP+8=_u$q->nLu2)b4ZE#r9Gt&H3xM7<}{tyt;!atD1b&u9K9i
z-}y;l6(0QFE7!)$%<V#}Z?azVww@%IQUg>cwosQJL}?%XRd}GGGLh0ZEx_N)$g`@B
z)xELv5tUhKK!j?&mv-Y*swP`nD&J+&Pdo)~JXp8_R4&VrTsBQ$RVt6=8h)kbFRD~2
zv;ieYP2mbn#mh~~eN<t~Y?VeWkr$09-z4XNs`}24IIg7w)LLjnpGJ!@IE>$OhnZzh
zolPqde$+CSM%~}iI?+YF&;k;lYSlPzO`2@(3jeycjJZME-Y?ZWbJxa4@xfF8fJ@wQ
zDb?}AsN<Jc$8{RA<F=*ae!1h%T?c>;fi8_e=glP5YF7id&$YDi!y`0VL~&a&@gk@@
zX|V}gMK~UHst9zFd$$!GiB#I@EY!E}f<7>oHRypmU&d?kWOphfI$@igX0Wbjt~%ds
zZQty?dkbnbknff&1V4$u6u_r>)QTnREzEliz>|mn`VuT*{LTX0^Qr-)$V=0Dhoy5Y
zgnieuQrB$~)5}@YORf7>s;mh{)^+m@q<e4n`e_5yuWz}aZ-}{@3%}ns0%UJ&_Q@E_
zOijq#Tkq*^?`MbpFYNtKt$I+`Sod^#y?aXN2<01Z?E_UTpL;>yW1S^!^MLySFv(!b
zal5kCAe}36P&|kM=8c)N;+E<CA!=kWqYUH`@dm$4w_?N!9>H)ErdH=L96U1Q-8!5{
zr`@<RR6#eQ@^qxb7=_;I4yX+xT8C29M$%hHoMuOy%1|!2_SF5rjC7q*-6(Wr)ZlJ(
z(0F7qU2{WiVC%T<`|-$v_wb4L=q~<v`|;S-%J8J|*tGW;Vd9uu>zEJi__wQ(AL--2
zTF3GB@Tykc{=x4DoCJtljbc2EO%0P`fhValCTZFx=~gEh9wwRSryk2pq0Ddg^2y$$
z;iMN6G{gY4`zZmwNWk)hO?qcb+0^vQNosKS2bF2&^qxCIQSntH-V8Ja0#U_`Au@~U
zx^&-}7Z07UMxSa#j>Ze2Y5P1CZ$n+0LukRXZ!9uv?mtLIqM1I3{45?{F`j+vGtF_&
zF5xq-(=%;TQme8m05q$m+?Wz<oA>66w7mX{-Wnytg<$}b(A3b3g|N}Uh}DIthXvI}
zK%C5Cg301HpT*>i#niUNI0DT*5dg*iK?nc5bNJ6q!vEI61t`Wpjas@@)QB&f{bd6`
z5M%$B4sH`Cc#|lEA7u7FHVM~)|C<eT;vwuov4L`Yhp0`$Pk5wnS;X;y0sqAYe#FBL
z@j>a}3cd+h{y|(&G#IKzQd|Q0mX6ZF1u{!ZgOXYB^K1X=;GfH@P;4MWO-EKeCsx=1
zN(V3c(mONT(?1!V)4({2Vgok=vFCPnQx>-ThS-}9&(1eH_kR48Jh*VlIcdK6gKYJ8
zu6YID!1V^4q@RC7>EIvSOQ_P7NHDuX?!1-EuHm`;FUyhGZ|RgTa=IgASA2{I;~q)G
z30O!9EE4DASUngXuGsG7k7Qxnvez#9v5e<R6{49KYI4fw&_+DY7;<5lE}cpL6X2=9
zHe1P8ZcYzUEtRWy)aq|?r_H<Aupj4U)KmX)ITU<#DVRpYN73wtVezB50Z!b0F=0Ny
z)hH+r2xj>b=cNeQ9tMz6#f_w3o4be6>-VYAWbTd?S$Kb?^!#)%zoAi>Ici?lJO_8R
zj#qDKU>u?|K4LfxZ#dh2>=53q-YUVrJ&^lF>&bWkcyB>dA!%$C{WEx^CLE`(t>q>K
zA!f`t{zv=fYNf*$wBG(T_xE}3@c7I1c3=7Hoi8iMuaiH1ulqS;a+*0|KC@u*C$7%k
z@UMA#JrY3jQk*%c$Y38onEG)eb4a>JD1IpOAF;>K*pzEf7}rw6<M5!SeNcp8J!+HC
zV{ri#B@xxY676(D74uoaN}M&;g1QM5qio*58m}jz3`)=z6=O?OH823hNwP8RCVxQj
z%_%ko#k;8vB~6*Hj9hNwlS<5}qX8HZSO^X0A!@RW;sqd4rsw5>b<lzB`L1H1d7X7~
zNC9?{h*|Z_zHW5=jCI~4b<Z%^neot@0$#_VgXfv4=p~XlPhK3V6l5A|mB7llHA>~%
zZnev*mlW-V5-S3aG@H8??Zcs_@FK<Tp*If5SFH?QW0eUDG#WL6GIv_FQ{NO%Sm*o$
z_|%ppdmI~Py?K-y*CSMQng}w&KMEec?D{Br8incf>~c&>tu1DSR=xevNm@$B3wHa?
zY623q*iPh+aIgWM9s>M~P!qFCj#Tp)53z)Kr`?C`n6BB+;Dlbyg086OqQKrC;4<WV
zFmox)Pexv2D<WJcr1aP;p+-ikL)dlP>waWlbPV4_bMlZb@)Ls!QJ092#xzEqxQ?dG
z^Vw|7RqeSw2YQWpQ%$Ryg^1mQqHNo4%wLiY!bhS7;C`8@m9m-D^VQtl@-NDdUV{bY
zKcrc>IRu=UTw{hH<J~2~eFNOKpPmy$AlIodPD?hD$?_za(^*bEDqtaNGux!kPshK{
zy=hN7RH%BAssYzy@e)az{?oPZYW$#jI&(~@e%9UqXqC-Z{VG{i%;7Y8>5O{@y6B}s
z;-dx|<z?vRe*4P^E=hI!{O0sVzPxUYkW;%ENRMs@9_mfqAK?nXkbmxfpCOR|RCo$U
z2?3a^BtT&-K*9m+UzP_vz&B<t4tvcwgdF~)wYXS(MLGBd_5pMWu{bs8UBrhrfj_vj
zfkA;?_C?^J#ZEKOQv~9vIB{@lYPNt~Q84Wm@mt9VEF#*CZbllO&`K(ElE_9rR`!b^
zwV6o#3{Et*HU2RFl*f<C7yR&$=95nhKRu=lxO%Y_NCLHZqe;!L^g<&~TiZUtoK_dR
zSKM?rLcu$?`WTm1`cNwxw7qSAFRmzWs1}pY`~gH@EB-w0Wh|%22cp(}rA&F3z=(7J
zI=4r^gx#|^Ax^-(IG3>I94{{;F&mq*$Me_hqi&?)0KnTp71t&g{-ByJG*JUpxbai~
ztQNxQ1?)6xcX50i!^Q_SP_fV<`1VMPU6}7+#QL!-W=p!&kCK!CwKcPZC2vBp4(w5o
zl5l!C-5z190h-AeX~u+3;gS{?y2&MJ=0zL_@qz~#cq?A|*4SD?0zBrM$qV~U#i_7v
zJ7M)$#1)TiUxt>ZE@Vj_36&vMmgBM$34itj^;lL=kdTy$9)o1jgZG4#Z=vt3V!~<K
z6ht_Nbgoi<<dOXJle3q^Nm7Xc;Nq5Og{aKr(EKb?QZLa7Q323IBouD79ykc$1r$E}
z{75$O@OibzY?0kh{qAFKzUo`u0DavuK0cnpH(_tz#ORjq!mW+!Fy=o7eXdAww>JU0
zyloYFR_Rsu>fHkkE&{ur!I-U#1>Z~Gb49l*z|6s7Tu^_YOQAZR4cmwh1RJUNT#$ZJ
zW}W|YVZzj{cD2O8MlgKIrD(3Y%(46_sl6fQ&|HPo3u^}_qsaN&&ke0Xy;k<ifDP>5
zk6hS3I!A{a?a(AO^&rp7^|L^$?>Wf`7Dg-F8irT-9cr3GBq8K||EiH#`lGjl)_(aj
zHCTME^i~DDD;v{$E4ZWPqpPrbXZ08Zusink_2fI`C38m+HQb0`WP^Y+xq=`{0E@vP
z3|*DVl^lCNh%J4y_M><g{n$~6!pItlo>)&j91d*@Hb?En_bS;tvzp>tqz+P%id0nf
ze>`TOA4k0c|E%)%^JZjjNgD8d>f#kkXTTPaH0VE26`zl_)1^V(tV?l{7?8FjspK(S
zcql~Qj=!q}Z7Q_fJxSS--xV3Q9R<47IBa?wO5}bUbF!()fCgHN?R$)i9M(9ZWf&-^
zhE4=M5k%(X+wDKS_m~9P)zUB!9Na5;HYKhd<#T1&UO6;Re|``tn&m#!_N|*Ku&T{@
zU9Rz_W+}Jg>rX`sz9Yy~^W5c%h`;lRGUlh>^N7=D0C#$=64JYciiM}uu~ZxWoL-B3
zJ)Jdo6Am{2u}S#<0XC2{U3B6E$xY%5eAw+{@La;%IN}pA%g0fXf1UWp&*YiRa~&eC
zSw6F$;#NLKlxDZHu0KA*^*ZN6dGE%WCO^L_F*$Io{ID23=2Ba8c_LJFL)4?8Ry-}U
z<9xO=k379-yE3uq)M(urCI)chXPjH@k$yK2xf%F39sJ+fzz02^N}M^p?w_lRUIFjd
z$LJ<xB^&r()$OEt$r)t-7Q$+`vSq*5XMNl@peajUK$!5H^$}nq`Y#*!aQNC6;64dL
zr$8l3csB0-n+-(X@8kFa=End0YC%4nM|a%sY5M+ZIQVlt-tlK1GX>fD4kE}X=%BCg
zx`P<-UCSFT;5IaCK@P@+bdsVkc$3OQ_@7ZZWkW#vAL!2^JS2WX%#NrgiKm|*wKy(A
z5gHv8M0FB_Ssy|X`UrKU@*@U3j`e47_LraZe}YSi3Lcy8qKPh$h+mUQa{3cAlB2RD
zHuZi|f`LNXfiL%c<zfR>sI1kB$TX<Pv>F2h^n==9ObXY;2DoHK13_vEL8klG@(Y0$
z+QHhm<TlB{A#Oo@3IP}kl>E44&YU6f?5_d)B-z>|A4Bo6Lj%2S-qAw<2MvGOz^H3!
z&1<3{@t}}_ceG57QCO4#*US{55J`B5_qB2Lmq%#>&=;?eBrwj9>rJSLPS}_Llr=WY
z_S(Fx2nRJz=%G(sy&r_96VAU8UN25nr4PmYrqk{kP8k>e6CSS18Rp>^F%AgF?u<|w
zu=S^c4A~IQ><7##kxc9};S`1UG@5b#h};m5+{S&+@*!%1De?zAQfMKPtTXC_D(Wmb
z>e1Y@ANx$0Xwht((b!ed;?vRBMemOq$<XCvu(-^3LSyinVxAO46WS8}N%jL65Th@O
z5CLPw*<%}PV(F+q5ZuI)Q^yJK#`49+u-V4pyT`CLMer`hF(kz5W5fyCTC$*K2|eQF
zlH<Qs$4fT_J}Hjpp-vE&NRTr~c)1v_#KkM$l;9DJj8g{2Yc0kjl-NWhq%{o^9n3=1
zC4`J5MD5`2|BM`WZGN)glriv-d7nZIFaw};@J|Lw|Dl7UBFCRoeCm><9l2zkfW){l
z3VMUgA&aum8=`Qop!VtHD2doNi=^=q&*bag{MEs!Q~wz`&b$e+AWQiJ0en+tZV5>>
z9>nHON#U(ZVIU8#lK57VLR6okfI3dqctlH9rIZgo?x0TV^dNks3~b|4=pRfRERK|#
zOvn3?u1lS<15b~a&$zP4(1K>n!7}0y8T;EAs=&-yrp#FR%vFobm(a`^SY`|&b80(N
z0hraxloc(H%o?=Fl7?pWz_OwcS?$|dVyFQnCRn6Aj2zW#A(v0mN~be}2|{6AFjxcv
zMssBk6aX|ZWs?uZQP6;>Bynl%h~YroNPl2Cbq>2k4p2P9A~uKn&>g;!!wk%=)XMP(
z=U{3BL`rfnnX)M$xpc+36^LBFja*EUJnqBnO0zs-XkI!j4}!@13CPQW=cF;^gOu~r
z%<?}&@_%mR`7r_B$mbDm<YNH~Qke=q$rt=EE3lT#Gf7Qz*(gW>6uL4M?#UNgA7=A%
zV>*OIdoJO4bK`uqBSd-OhF=1uw2BUr0d^|rP#T<YLsXEYK(rYrP9@@$3^NH2C&dm)
zkY-rO7gp%R1c)~%ek@Spq*XEtF7dNV$r=hNJ1qIeovW`<8l{pFTT)UD%-<4E7j6dG
z;FU>&OHHXto&!ohGL_D3l=?FP+$1qaN&?FaNhX%Crws8?*<*hiH<6ffq2$t)p;A4P
zimltC!hQ7JR6qAiuNG>ebrt+$!}5&gGWWwWuZeO8aAkK)<*aA<eOUVU;!<V++@1;E
zB@f>UgIpLI?R!FNn@9<1LBz`yLwJ=F%4MEK6>3#gw@X!g0#)fdm0sM{stVOuAa72P
z!7^S5FNpjJZB;-Cx}d85BUNbMQt8Q-sDu}~RJh)iVKPf6+%BdH4z3A^L6!+?)jH-^
z>l)U`ZPseq!x_9_K&c2hR9XVPnq#;QBOA^Et0h3xRzm6`5c#}Jb$Xv`E&S^3j_^>;
zV_V63emtniT^)-Qr(qg8*yy#e6a}?>L%$^FHn$p!KqKpH%?H0mc`uG<sufHdjpS?%
zXL#g5$hXWRte(Z{%9=`cNE7ypx*n$Fl9uMLP-xDbq@OB!LAYknaAU1S{S$CQEUbx5
zpk*Jksh-ELB)6r-sHxh%$ef3|ahSTNrNzUmbvv|qWVW@1wuNz{W#mnZ<;%8SBY>h&
z9&9Mpt*@>3sA9LJAaS6Dz0~6SQEQ}E=oHBG#HbB7xGgWQEk+V)d9~b@#1n!DuT`n<
z*lB6sUoIPzYUjFXr8VmaCGWUoL&TYtKh+Pq2H6nv0__bDd))1bZk-&q)%bL;4qIC7
zb~@>snn;PeEWacESa#tL5O7Dlc;ww~w%hf1u}W~{IWn!|qgD5B60_u(Zn?bnl-+LS
zmmvkcT?AG=>T?=$Og%gz-7m^)wCJ8mt=Ov3Suzj<vX*;I?|aQ!vBFim1HbjYf@-ny
z8d;TD3hgMbgKX_lxwNA`*OkuF0#8Naev9CKd#`?Pd`wT?1mAR^--uN}D=^3*C}af(
zYHS@of)h!X7>z&pReDgEc+gJVDTB5zeP!^Sn)+36J;7&WY$n?f_KTsAAdG^0%_3=o
z(g@A+R=pD5vN&F+N_@>KZ~cZcqaXFdn+d~yJHtzuBVKGH)6YjfTaJtbj)3z=eCCI1
z(+BJ6Mgv4gXO3+qyhnYghL&1K=gLM$%HEFgx-a67Nw<F7Hdfs<etY2kWygE;v#P_%
zh%(*%Xe}?`;rCcc*mxkd(-p500798N@Db_o>L)&8pSSF~%n9q^#l7*Tmidna^e>1;
zC)_<Ju0<ym)5q@$CI#M1-tSKGkWZYY_Sv#eF$Yd^9*^%0PW}m=GC-e7wwZFlo>oSm
z0$5Kg<V^AVz@E^9CFviF^MMsIm{}i+MAU6w5HL%tBN4X_MRMw3)e}acHfrTIo7X0c
zijH7|RR(pwSx1^#ocY<ss#)Aua|_NhI_|R>!E>XNGY+eBFzz|Ly}2gs+3W<c+XIc&
zDA>z{=3N`u*M}Np;vBF_<#PfK;iIyXneaae0zZJmM=63Lo#P28-03I3`c&9CE(%dC
zkmv!DBFPimoO4IXppFYeLGvG0z=bmDjGoSwe7v7BoNM?*G8|_qlh82CQrjPv5%eov
zGAo%-pKsnP0~ss-iX1<zOwg}R$*j(ptj_tYE@Z4OwXLqKuC6_-ZqTo7$*g@hS=;ql
z+s{}#Y+E~CT|0ePJEvd2lv)2_vi{2_Vf{K|{kCoWes%rN!#aRr16_6l({uy->qa=m
zJZ`3gM%xDApN&eKP0|WVywmk$-n0w+Rb6SEy7D#JCph$(Ym5vy%u#DBgg9(p*Es%Q
zbA4RnImPBPUE^QF7Svc19>abryC&9-E%9VcssdYvVNGrgpir^;R^a=KKdVX%>*A2_
zkJ>#9OURT@SB;Mc!;>}#>Hi<WV<V3!+Ll}@YOYU_e-Cx!6xcw&|FzrrmUf}+zv3bI
zgyiF>Y;bu2J=XU|Z;i_3vup3wk<-7~U|Jbmu;)Lr!4Vc{GXAk~@d>gxL6QI1Z6xqc
z%+ATpV@?Xr{JYy|2+K$9HfB4O*EckV!eVMryN!y;O(==iv=V{ZZ4|)j>YJFX9~eRH
zHZqMBO|7h^%q*aG8|&6~_dGYYkB$+d<NFtv=7*?kFuV|z4L16l4gTf#M&76+;OY<1
zcmS*}5lGy^<$%ft6T6cLlcw3A;vrU4$fscry%)KI@f`S3#)BoSLrDTM(jSyv<A;;Q
zT{YYr$_q4Kh<(QEEj}yMHc^b{W-GcZdM%}psPZ6wRjm8!b&UprM;%X6kzu!x!(m++
zPnC^pW_1?|9%}#>f51$uuV_QZzC2tVZm3-Efc%BW8o}#Wt|#2514nF-o^Te``d{LY
zR|k{5ng$K1xBkLoSqBm4HT%;=pJQZgBvBGC_uJq01TFQB#ML*G?V~LXK`VD|cMM~+
z?$5Rc;<tm#TAQx$`gVZ68Zs_F+^0+JHNEIfew}R8xXJyNX}!tb9!-=Rm$mYAI$9nU
zyD{Cmze_%H4Ug_XK6{ut-&;pQegmi?A(-sqQGOFlMH>MLf;gLjr^-s3K|c&aH-jGu
z+C&7<1#^al^g>YZSX@jaNf<AB-j)D+J?AzJ|1RlvggAvZ%M-EPeHLP=wW;ms=exw;
zMP9HU49Bu^9em(btN-ymA@_OHP|O=EF8{<5GgLO19-I<}$_7LIk~9BigUMiv&{T(t
z19lE@pTTar=wh)ovAdnlUZ%mX8v<A$P4WBe&;lkK7GL(%?>P}7hegpM^39>tk?JMI
zIN#9g4hmVAVh}}n-|P;HQN`fHlCp1jfFgJt*-_cZMhsVZ<8H}OMeDD_qe=ue&oR7*
z!v45wfW7p%dPMXHwc9xHlINrrRSZ6<Td*qqH;MO~{b|#FLFsApasAP0%XuHqS?j;;
zHdf*_{NXv$c&bJLN6eph0RZ@7$LHO|uXrzd$n_jhXDjOnL3A7@V-gHta!@z`*J1a<
zgbc##@`RPq`%*}TnD}z28+?2@JY1x9CBXV6;!0BJ%vfz$E<CqpqKDYz2Y)MOq=*O|
ze|ZYlD>)evfGipBXI>2>0)j!KVSmM0Q(BB)qwi}-u0||fEnJuKVpf06>v!|1%)7eg
z)~?14WPB0vy2^Mt?SORDnDNie25$y?vB<BI!!pG2-Nil<F2qv`iXykay^Dfi#93!{
zEoEF?)$c1@o80ci<en<-l=hP~9tjpP+)30-e?;GGPz-E5ZFxQFadsu0S%;a8;e>YF
za~9Ba$?CA?{nA=7ivVjxbA9|^F2Jni*I2`v56)u1y5{NjyYsdilsqeQc3ktr>vwp+
zX8gq?R;MpFzZ8E+KXB2SB1Lp$c49w5<Te?8%!MFAH^x2h?U~S2>*di@z-*_>H1|*T
z6K?X$ztVXRVboza;06;1WNoMY&~Q&gS2=<39*3bf^dYF$G`)37vkA^#by6OJL!?(y
zfqpjRJqJ#v6s$S8udjs<`2c8I5jo_AO1<2M7h(D%ITV%2J?=<eGus&!0I)P065%cA
z!T@5q?9%QFO|OCyl5dMI;l_$>sYSYquuyF`5=uVqiQ@0h6~A{Umd{j+ahS1~B!&_^
z`_&y|``v<Jweb~l&^ab7FqiEvc~DA)G(N%jI|muHiu&W{fFxE+dLECVH=@<?esnuL
zst1GW8ZL=BwQQWuwnG81xcJ(L{3p6MuioBHCC-Cc<(QxXFWJeyg(U0<2T+f`AB#(>
zb6^vw;!<;5t4?nEvHPTRarlaPnr3JPM;L2Y?b9=|_gFR@)WRO9zC=9rL3%&!5wOzh
z2}{=H^<%jcF7+?LQ`i_LdeR_CO(cPtt&Huu1nuE)$dgDU&*k-wScdgver&IYiy9{z
z;82{MB9fyW6G5RjH1)0dO}NR7(W~iTZ8mc-;Bl{>x}!>4N>@3P)J`$Kmv|Elug+bT
z&+d8jQhT1&SdrREFd#j(Df;CjdZa78N+q{c$rNFUF+H`$^d0~nocQQ98_#~3=i6^2
zy5&}mN9<E2b9g<v6%jCdlauB*t!}78UF3?%LuyEw6<49)BKLa<w1wd02>k$)GP;7W
z1u|U<j@ZO9Dw?B(4`_9jsdb9jQg?B~<`lKr8D)BuIsk0cSR*{L+`(FPd1>iaedB2P
zM@xIa^e$^naWA?xj}T-z@>~Q#Z~}%dw`@mg3pyYPo>1X0$8L!xLF<RqTppT@!}XKg
zogR(4EiajzX^gwKM-I9-8Jb>YQii~w6`zXj<IY6SJfeH?(eswEZs(GGHb?O>&=KoT
zI1vDesxz->4r&@I2m(tK{1rJYyI0}Ni4y=0Y=Ms*E)jK%&jR_+b2bTRsX8f@oOsC{
z+5w;-CUPn`v>UvU1gG-eA62nnkhT!yWNP6y6-4Kw`$qcv8boh35IKso#iYm5AuW4J
zWp^LThOsbs5>u5hsAa*M)HS3QTp3DFyu;_}(FH<tO{VsKKV^j&u%b|myU4a;w-D<o
zD_2O_ro-W;JZAXZE~I-&X(4{)F~s>%2??7&w$wjfm<Y)fib1R1f4YY`70b|_KCf*n
zMOHQ$4-qO5j<jLJnCxYweOjzaa47$&xyyX)DpSufgfSp$>N%@R>C*-@-RV^PwD!Kz
zZJaGp3yYqbKR@a3)odK_m%kQ$b*W*4Sz0psFCM##R#nv>b(%0O&h-V9&o4MWw((ka
zs1K>^mI*QA*<R^scWv@zvU3wgU*3d>)$U~k+btWBm@tI2Ptp^{``xY2zZCAU6af1p
zC8$O8#kx*5PEAFm*I13+@d;&}pKmNLP{`TW`fi>@iEVA4$=XMybUK$|%cBWI|64r7
zDaz0_;%?6UkC2B2auozsO+>}m<rU&gWB!>9{+GnNdcgYhRd0}nsRt50+D7B$oX^^_
zopGxl3xDr3vEmEHhzIbT_+1Q?5ai3feX_RD%=umR_ox1@Q*+-v{%hF}@xRc|5eP4_
z9}IY1xotR(VrW~w+3p_&+DW6%TKL(|!iQA1FB1k@cda{bOx<N^U|E6tAYb?3t=H%6
z`VZTd+P4Pj3^c__fyW`~`#LkG6b)i8Pg$z&(C}ct^R9h({oh4wf^x1Oq-0M_keUl2
z(v4F{sh?*b9}MJ?-2;q4m+w2h&BfPeuLwFg``(3J5^di@u4Suc8S#F_cRe&gkc{8o
zy+_{ab^XbO_%_0Pzao6q-nxBm@bP=4jxd9W@A@VHAURBs26>3j24pGT2WX?bXsK07
z?p6))+r#pUXY$LI_p3Mab71oS{lY&Eq7+Msfd%m|2Pg@KqKhE>dvg8S3n2&qz?mfQ
z*)?XR4gt0RKq)y;1yurG2>c6=6$N4n{0kn_PY(JEk0}KOUj#wj0vH9%tC)f%&4QUB
z!2{XBzKCGIpTS_N5Et=~Px>Kl?ji2UA^&HIH|jbxh6)-d4o%R9eshN=Cqq*kq3I}z
z_kYAg{z|+>$zdgpVPy+p|H=l7hu8kUh=&Mo1+QF3zS)Z0xJKU!4c`%u`mP_m&xwvp
z3^=`xI;V=h6p#L)AB~EKoD~5|>!K)#U+-xJ-Y=m2u^|Ld$IuGItZBtyr=a035}*!s
zloK&4=P|?vXrx>O<OZ>1;MmESSegR>9gu*bIF{KKpT!`S%>bVR7|W%M&(jpcCxOpz
z8zYzk5~hxM3I&M`MoV~rq?)2+Y(a9+D1}8lMTw{vgLtoiQOZqtsyC79#YjBO!AR{C
zyw^>Ux(7hL;z)x<pixSs$siCF41V7PwD5?uECyQJM%t#J-qIr-7jd1GBb^6vT_qwv
zH{pKaiu5SP^`egSNx}66M*2Z<18yRMJa9t}BA~@M;fpBx6(@QyA{L4h-xQJPfs<4m
zkz$LJmJ*R+fRhD{$X3S5^@zxqz$vtiDCWW`9b}dXk-96QFQ>+-Y+|nRkf<@BuT#cu
zfHF57h_@)yw@F}kcrbTz=~8@-;@3_$2d9(Ar3(cyj!|Pz0GY9vGNvX>Yg0((i<v}V
z8IUV26tyuU9Jrs7d8mwqs<A|BXIe95z7tL#*Up#}d;5$z%SsWMHHK=406#J9k=#m%
z+%MAoq4vR#$s&9M8*+yI24>j_z?8dTgPSm-Ff!61Ve&9KirXx~*lgaK?4HSN+}muB
zN(Os~%9#NP6Zc!r)SPQuQa(@6%3vBhhw*plOLD>7dac|ZkKC?An2=}AZ-pGv=LU?O
zx#b(VKY@7$kUaYAJR7#0?)Q0=J$c7W`K6G2?87`mCcv|yoad5^Z-*4PQ_Zho`6Y;a
zg2Q|xKt6tUK{2A>(P4p8YOVq$q01rg(@?hCZNYnPVy|1hH;1&AL(jl?!~sM4K})nD
zVMT(e1s2?l(RjuFlEo+5#i2Aszu-l#vqi1h#i56pHepDD%o3oFWR9<-No+G=VJfiL
zFu!!D1YlS?dtMSrTpBD{I^A2m1u6BwDrsOYkxD4?3@biXDC=D+nFo}G!%CxuO4HcN
z5;n@h0Oi@-<!L*m4Pj+_*=0>HONjPBbE&usl4VPh*nQ3TJ7KtccC;HM&uy_h1}7>)
z&MWFjDldo15oVR1kV<$q>UUYkMrF{8@|)C(60B@SGq^hdUdap>#i}AXEZ=3WA{(x(
z-hh9RuPXMdBIBu;7R96EF~p^X;~C)`(SX=Wt2w+JVgc3CPb(!=@c2}5&|v`nx*F-_
z8rkp{7#m+4m}-Pet5{X#k5Xz?N;7Rku%AmIYcRcP=iWN_oY!g%!zsWuf-|+x&FZwI
zK!)K(47J#%MzyqePBK?Gmcy@s;Ch>*&l+jfzYpti=M@DT>&a9boJv1^;AudXG<ea%
z6d(<kc#TfW4PWoz!A1>C`xt>~_TjXR*5{4#tbo|NdYV^Fy`D`WsvqTHO`;!~c<&0`
zq#B{6jk)%PGOs_vXcconp!c-8w)Uk$6V0JRP4s*31kGAFel+J3w-~=rfc3R7e{T`x
zDX(e4=&>(o^vcccMIZLcA3bUXAE8fr<xPX~@<AB$%kq6ZbqCGObzaT%X>Ib7EeEr0
zidOA=_U?SJ_P+jh4er)C)%F~=juReaExT3$@Vo{EkMTYNAWAE)m)qNQ3jpBHc&!Nh
z6~yZ=_80<)G+o5Woh>H>k<Q-v{=6**))`*c#sTR>-|Kvb=**VyT6wC-#?-Y%+)4Pn
z(=@D|`8b36zN^^2qid&~714DQ-1UIf?WWSfqt?yh&<zjoc9N`TMs$zub{m^@C2sVD
z|7^uk?&0I@eTUcMyYvCI@z@pIt69=pir2-k(d&%U*TvRnRMtgj)@K#cM*!%Z4eMcZ
zc+R-dH?o2H_v$MxX`zDj55xKkd-`j*dmJ5lWgL1sRQqYmdVC`W)XN6?hX<y6>zIIp
z?|26{R0mCCbW_j=&anGkq>(@{uZcQnXpm{3{rSMsVSf@G$$BwHiMMQ7Svi^C5CP{<
z9dEg#Y6~rN(7J4peq_*MVz~W&h?rzpLSXo$X1LXJ7;)d%<=xf8i`_>DYm|0x_U@iN
z#+tt$fE#yvjf}32V6D@|PNw%Sd-v=dkA~2Vy^tO|UK!iH9~<Ny3s4*T5rMV05`927
zaMU_**NXMv5R0T6nx^Z;P@nh}K|C}9Mw1x?jgAxe5EId3j2ugkNta@&qb<^Tk+cnh
zRwp~~hxJv_sZFG5+e%pZ&=?(^nPo=E)F*WvrY_RQucRmWB1iJk5V8-`Z}I?w>Z8J|
z04aiw$%ZLk&zTqW$bJ>aLN$|_TwY*4uZgzI^lN%xerv69MlH4TELp~^KhqE{AlS-h
z&PJUol!U~rZNi)$H|M_Ee}W4-F^BOm2O*yKxCQ-RoV`_8n+>~e8{8@G?p~m{Q>1vY
zQe0ZBNK2u(ySux)ySoN=65QR3L&-|NIsbpod0l($z1KR;QF4}dy!SK4uSjI4&MB8a
zNN%39de;m1o=YG9lnz&*dwL>!D^K~JA-Q!@1sTj~XM##tmVBo{ZkM1lGO#Bnc)JJe
zx(VJxU$&uI-jY~$F<xGaShmht2K6jEZ!RyOui&4ko=B`X8LtdPtbC(dS?XDF++4{(
zU$vxK#qL`S#sH;Yl&4`J4=5uIDFa8yvkAt~=R}c&ZGT00tjXl8F4U~qtFCP*gD|Pq
zmkq!qKJ%18P-2I^OOCX*HZNQWSpc(doJJN&-K@E=%-}b!Jd4`?iR`aZT6mlQ!DYe7
z0YFJ2izr#>zm*a1*<ldQo9z@pSCyONe_#l!YFN=W4{+DKIkyJMVBu94OacWDMPW!e
zw$LVFFkaW*sElI2`g2XfP<9QfrO(lFY?5=p3RCpcsldOD+L7egJzwKP;@DP3*u_%Y
zV&>bihq`CIc04k7D7tp#;<s+Y_7wB>^e~~U5$!|Pp1dI}^ZF?B{5FZ*zDd?Ty~LjN
z={_0YpwoDJu>)30#hUtcuT2?j{~gvd>l+0t$T;iZix_O+q=m9dRj3%68wH{|2ktMi
zpIVrQ#hSaGoJYp0M_;q{+PSO_oK-|C?T<^cj?21^3(=2rqngYn(OI%|tIoITy$t-U
zF`BD%8ed_O&kuOltM4-5BE^hqt4{h=PW34c<8<dcqqfJq#Dp>mfmv`Lu+9eG*%x%d
zv~%c8RqY1v@7+(Ih2NfSemD14Ih*VPan$Uq4{gK7W-9+dmb^SckR7bjJ(Ey9RZ2Y1
zwA%PRbYY~ZyQ`wTuX2dcExqCehZ6l6W!e|&7=@?mF)+9yFuE$QVu4ZJN27#AHD-Ar
zx~37ort5ZK@V;isc0jASX4|;tfLwD@{^l0{&C`8N0tb-C|NluoS@229|LP0><81cD
zlc*<0Rn8bI>OUuns(r=^|5dDkgBx04O^1@tv>{}k^?zrR|3hC03rApT{ZBTTAHmiq
zI_59=Omy`N|A%}MA%0JSlFz~-&y=jc#Tq_Dl;Xd|nixNXz$)lOv63w?stHOy`%Al^
z<TIr0FZrB}9~p=03x#s#pv9VGe=xLIL)%lcaddptLfE!<d9@gsdvbR_loEJx{pYo6
z>Jo*FNfF@djf{J}EDN0|sx9CtWTYUk^@kJDZf$>nl24)@2owCcTpe9YG?PZ3oz_&r
zSh536S%$m@ycCptj#dEc55iCg98d$nlf`QJw81R&t-nh&qUDnnIxR0t7oz!#tp-6i
zWlJu#O<{W^=jC7*1VdEh9zGwxX1kryzr~urXS0*|mpDD(?#p@ZhvJ;KoBiO~Hat#{
zkx8-_wxVGXi0*4&5To_^r`BDw;Z*)`^M%xJJ6_SsvJ?|-8b=Y?YQf)?-Dj+;iuVdR
zTHBf~q?$|jqnguAFE&PI;Ju0T?oXk`8a8K8#>4MJ&`+fw+T?~;5ySQ2#kHBn_x2lH
zLC}e!%%krCu&}$OtJ4$r0%3@fA7b+784wgh2@!h^oy(SjAe2xc!L4f;^C9siZ2IA~
z(Gr=*d@3<P!dU)I#fOc<vlT?*)G`^o6d*7iLZ@z-C&Z+ipC`fARI(X<ihi)>$QKu~
z!_US2j#iBK&SfKd9lmuu<{s~xsk@w0egU`A^3HDjjtp=j0jSwJnW$}EyvL*ev|R{&
zvLRkenN0wXr5+WOn%mpR?l8Qy^P)Y-=w3jX$ZX#|n#l54+_w-D${YTgdq=K|o>PUq
zjFB5rx6i~C(?r9}pP<FETsTa}vXPe+hE&F$T37ci9XX+FGcd<>v8)_GkOMHv3LVX^
zXkfAIflb;Qij7d3c+#joBd)O$gX7%%pX5_(1;-JY%;z)`6TrFH!btLb=GPoo&XKyW
zA~95R;HA)8eX{s$*?#q2@S^VS&N>)?d>Vh@xBX;Y!vuI^^R*3$-vg}+RimV$AMZJ~
zrXAZ_;O8LO224#eeos1=?IpqL70^y!q%Iacf4p||YsD#R4aaBn`f>Vmz50FtT10&$
z!-dVogt$1kZh9BTpdpr&R+M9$=543(oQm}=7qz;7y5#gH*1}(lCKPMDDn?(?ox*RT
zDscxa?zNE@tj3NVRvhff`9ImrO%#Ki)03Om9s1Uqz4m1>S|a`47;=o@5qY(A>9MM8
zZbZKuZQecozUczl!<ma{O-OK<wA{}AN^;qrH>cosRN|EW)LdS_{<L46EQi=#C$8jv
zM!KB&oSpky<;!Vz`ee)HM;xP$qmkfFk%(UYsVuZE@od+f*^frP*NX?Zm$l%HVbA;Z
zV54%lra1A|M}StfSKLhf)bhi{%2C_P%#2a@pN9{@&#y&HdJsA(QGh+GDIRzYfL-zq
z&VCF5RcRbnBS#$RJG0lW#M&pCLtNvRDZhFw<2?aO{Ci(JPh5B<gpbJGJIVn8$iCDc
zwMO1QD4POMMshKoNBSwAE`ue|^RR;D259a$0Z7CXNY)^sP%5hLC~^tt`05f2x<v*W
zHv_o2Dbn>2av4IN1{&e6;4Uv4?69^v1)@O#*?<h}NQ)~fQecpzSqFBM1=kkY)qb?F
z{S~YA>dyA=)&~(W`j}PDJQ_mai0m=eXZ=#zx2WGn^4YLI!4vs0@B@J=ZrAZS=!Fc;
zgJkk;esPI6Gzu!8!Zj<m;~KDX$#s%_IQ-tyS45bRP&W{9hruN}hv%u;6Zb*&g_>gk
zbI!<A32h*Q)UN72xBL5XKhAjV>G3?80%9e-$$`{K-+h4=LFF{f-*{D;2yE6frOGk&
z85{cJynzAZI$|GFwBttv;RL4W7v2$Hoa(U?mwdF-{gBa3M=2&=H>F-MhkH^WBg~6E
z-OJtpp~avdloH0C(NW^T#c#9}e`h&OPR&C~-B`k3s;w@QiATze&n&AaRF-T=Tg2^2
zt?X>3VZF&y4A1^SmYRE(<IfzS_@{5Gfo&Ra<c);#2*=_<VKsSaN2T%bTQbj*pA>Bp
zaLE$~KM-Pn8nne{SKc%Gn5w2#UzJdLJrH9xI-^yun@DI-Iq;budr>38F<nXIMBrK>
zw9_iDy6C~0=9opW*9uqQo9Mo7JoAw6mp7yVg+m5c0SgA41P*?kvgY(AASJ3MyfB#o
z3(0n!j}cn5m64hjA6ti~)fwuT(`;F_o(0Dk5Su|6);tJcz{=BhV{=Gl(XTPo^`yxb
z7YG7}D5Leq?d7{#VTp5Eh4zrSIGV;_I}Y}ZQDVC<&F$j`fiB-l^M4;pwEGf8xnpmw
zsrf8notV9SxA}~8&XU)a*K$E}UA{5aM#I*MD$hYMzKJOO(2EsS696r#Bf)7`o5?f%
zJlNDTGDYBnMXn9`ptOyX{xHC#QXBR;VtX)VshG3~?w7%iPssog-`k+8$UQ6oVVfTU
z-#V8ww~g^As-W2yZCTYQrA(M{!WyOTK7cq6eH0IYQOr>;rCO0aYk1-@_1WvB{8h8J
z@i^n^Bm?olQ8O0SeuU4m4(S;cqg!#{iN%om49W!=jOA3InU@3SWQT=P8!ZL=qyZ$S
z{%Y?%QVp9m;<xm%TGJ1~F_S784Fa1=mWs4W<Ck&`rv#!=vhKRHP-kJ$mdUZk{pSgC
zY~B+&c1ff|@Pcp8FXDHe7T&8QOCBYt4>Zt!+&|o=d%6boLJdw0A^8iyBslJrN|~?s
z`Li>3DODdOY{^F2el-x3B?@PrB@`}4F5V$E{A9Pemf&4GW^k^%HJSY3&9Q1p?A%&d
zdGfuSa2@h+Te@;)froAkgZ#0jk8tubNcd$7E4rl*e>y2l?`4~4>Ob{`WW8Cv^&<Av
zIIhBNYcjIEfvmBBfWsLPn$II`t>{N26&X0}km0c{T!%p8m06kA-U&uXtb_NdzPM<1
zS(ibieQtNb;U57Z-#8A3c*@oz6=#(BJ!(fJwa#OS;6}_Kj?l{C{1b|&wpm--TMVSk
zWz*;Y@Rsi#Zt2>A?FMb{37db5)R*(U65)t*F?&-7SFph4GcDjFW^cX!r7_a43D+DK
z2~IDvC?uR+Pt0o~q)zliNdMko>?576*BPt@&7wP&n|Op6X<_p05$(s-h5FYcj?ZJK
z-^4$-73bc1x`^_9=`LK$7rVH17bfwULfSI&e=y}1TL-t?>z(^Ny4!W}=4>z=5q9lr
z>34Rs`gn?3W)rVA$KSjD=>0~T_u?u5;hu#Q-#WYoWP6LBJ61hI$^V)UA~w!Vqqppm
zw>g)?rqlQ4V#n5IqC0+UWG2A{=+^~!yHI(LN_anB`k=sA7+?PDY&Hb}UDfVs*yrWI
zCs@*#^oy^vk1sICH@eSPW6uvw%16z@hnWtW(-MjM5RE5<nGfV&SLlZ@;wM{zC9aJm
z2||-{L6>O>s4no=ANJQIVr94r=)ejr;SSUpQPXm9(k2Q*Y7E4%BsR7T3g!*^^*P8!
zTf?%&&x$B`iziqf%0DgDU0VDVT7vDhar9fz3_%Lk$RWYdm`zd;b#REU9FG4XY9Ntf
z@L`BmP6*jhh>}`pQj5oTA{RSQsOEKOBw<*d3*?jBVX&J^*xW+!=ZD}5fw0ntuyUes
zS>A9{<nX2khJp~+qL%Qo+3<q<@SYNtK4f=jJo!sV_>YqCQKE=(<S=MFd59>o5E@Tz
ziKt2mZ%m0?Xo;KvMXr}b`jv#%^oH&b!KE-E#ez`diQXTkM7^zv`Z*m{aT$ex9etew
zdxMO0*Mj;Gq5@4QGfqeUxQs5tih<#Yf!BdW)Y0D`!AA$j&|bzMAEBTgsp87VQX9u&
z%j1&*V<|Ude}O`1LJb!W!$B@_-OdsH$q{TQZXAyuoW$`7{P8QF<M{-g1VX)pTH`~P
z;(y=AOMHW)OAThwNnlTn>xZ^&pw-Y&NQBB`f+TU`Tfs!lZwc>HeWg<qIqee4QW6YZ
z<F(}DwFQ$rn-kxG5-m&Zt(XIBz)1{%qz0xW`&7qGrpRrVWFCp+Rm)@#aPkk7z@Nk^
z<d44uTo8#%)evJ+G+h&-TH(S`u&D);D2P)<I8%`|QVqYwrlh7KKBV#;C2tYg=e5Qc
zlqUOpOF1qfaJ%~FY!)S*;`86LSu!L*acG)0feg~+|2&%|&S)1*>nzo`sLALcHbbF8
zoCc<ag3>d-WnwL4ECX@he0%$DF;gidb6XyFL+9<5PL{o+>0D_R%g?Nn*{t(WoXb*<
zGo8%etv*UgkgP{w@M)^)12|hyHG8)&8&=nfJ|zdWEeE{~LG3bUDo!58EeB6Gm%uHT
zC@q(yEthOLm*OdxiX@LlD34C}U)kigJhtULj;B0Ml6(%FJO{Xt0lr)~Iv=Ny{O6JU
z*UkKMt*;o+Vht)HvR#2(S^?BusI*+5@>HOjRsi5Egt`m0+zPeR3U%8GwX77%8tv+d
zi=bKK7M&t<tMsUZBCEEdST44a<{y;_=rQoc>otxS)2_c180^!EH!j^=MvJ}ctlK$@
zeMm51dSJYDOH%5J!&oq2sJKIyOMV`s1+bL%Zx$z!lq95;4*8U3w3Vbkl_rOk<heo6
zBiaImeifCqm6@kO-wl@%ZIv?Q0^aDBLqjz!BnSXN`S{PW!7l)DDuq6wiUHjUiOck~
zZzy%6q!3O(hXQ#QDyg(qT8v!Td?3bT8_|pcfkYZCaMXU0MgLDsWm0XWCRb&dP9-T;
zDe`Q^)F}D>DA}P~q^ms4DGT*^S!M1q@$a&@TOpWx7Me%hs^?L>Kg$Ua78saz8n_eU
zt7TLA(khag8lKr2rK=h#f?DF*iXoHQ8sFOepEc^KHJB2$(%ZHAFm;#Ib)V(y7*^<*
z6!BTgDcP)(IMNL}B&sm=YG%u7Ye}lckKYKn*NP|-h`D2vp;2(Hl*_nReRzgo$(K_o
zqE#xhR)0LfQd6YVK&$?QRx8I`OMF?URoA%BRS&OTFG!sD<(b|Tjne#t%JL-MD!jg(
zvw?D@k@&fh6s>`rwc$dy$%VA;^9q*E38ig0<&P8UpTY?a?v+c%&CH}NtimnuYAt8S
z%}>i{-q17T=lT<c<|;rdH)|`8Vk?|U>qA&8e0ghlZHqp*Wt-(q-dID0HE~sYQVnUt
zPFrh;Vw;6^8?0{|Y<ZioUi%Ab#{*Rdx?+d4bq8X2$9+x*{#b|eNr&i4tK3+#f?{W^
zb*F52r)qhp`dDZFNv8^0mo{scu3}fi7+S}3`=MgXv31L-V&lGb<CPwy^|yO#dwT2n
zO53#cn_2g|+p)&`lSUJiCZd`qOZyi1xR$*y6*wZjcp~r{VGhrVEjZ1+WUIXtY(G(R
z?0&e>V4YI4IrTAR^s!WY;pFNmRM4e==}SuP<<{5c((mv6&@WJd&EL_#U)(Q7hAc`p
zz=b>@9f2z4F%bUHs&M*Aes$p1azHf#3HEY813gyBV^HL@T^Bt-eRYt_WKiR@&zQ~j
z3;Lj`{t&ankTSGe!)9hvG4Q=&=+pS%kJD%)k6}lT9_P~l*Owvpmu}Bh4{xR6pB@7a
z`a`}VCH_hyI;$g^9wX8jBgP#gRhM0nN<ae}V5JYxzXGT`4y@RO06kyaXwgUF$OfuE
z<On;(iW>h&Wl_W~8G)a!B&sQod3lSZh$x;sHt5(MZU<;N9s4=`j<N@UE;7_O?p&@4
zK(y<9HXrv(v*&dhwe1-H#0S%-G_Jm{I9CBv?=jF6{27;XJTk+Z_!4s@V+;i_o<`-<
zr!*?brbt#ZnO))2emU;%!Al2_++yn|=hI$6A6fT+g|L<FD7jthmyHI)cCrnhucBRb
z0I~8Vgsi4MlT8!zyqz95L%@JTsw^Qndjq#NFslzoJyDE8?ucekawq~vR5`k3JjTsA
z^IKnF1AP{lQB2E@{dC&@GLFm|Gdr_5_oO+??J+ANF@G8anUY<Cel#t7IUTt?DQYs8
zUB(mZG$R~oE&Jy^S>!aOEuvDVg;6Gs+**l3C88OIIjbn{{^{(BIWiYUiB{&Ei0=YR
z<XoQ4(l58gck?sPxbr<+^NSJYJ`=bIF^hXmi{aCY-w)<_u$R=<exyq*WH~Jb=PvaW
zEd(kfdYxH?Dl40iFMORqiLsT*x5baZ_*J}yQabVeN9G6BN@s^P)LeE8XXUxF9<V(k
zuS?{zfq_n(C%(9WWx$`WL1&ibe+a|bLH;|SF07S{cPnX<;LjFd1-?~+0x)oEg?}GB
zim|+kAu)kL^aF0~6Ybif#M+?4diu<=-@v*#gXy9HgcP*q-fUpCXDiyiMzKlm<zax?
zO0GR9Dt^4i1?-$T+*$wLNHtaITs>h0eb~K^B!67<S|+#qv!;jrhZF`=V!Lx@*LD*>
zZk<<p19@vx1#V-TdSgL!3#E5k*kS8Fc5ChTEV<g|tLWTEoNWTJO%ys9k=J#kEH)Gl
z0v1es)S4od*IiYLJ@EkP2z!8ROu2T}o^IEk{y99O+%mU<gbBrdThGeZbJ}T>ePgfv
zZ#nz>1N(NEIOp5@KMfC@ybfHl4&1s9Jk}4qUJraI4*kRq0}Ky?ybeRM4#T<*Bi0Y2
zUJqj^j^f0Q5)6-$ypB?`j?%i0GS-i>UjJRJF+48v`cLv%v3^|j`hQ-mp*WirJDWE=
zTl6{uWt}Z|ovp5)t-qdaQk-v#o$nf+?|YpeW}P2*ou96spTC}8Qe0e%T|nbBcU~6{
zSr<=T7cc7<udf#X%1c=BOL(J8MDI)F>`T<{OZ1IPOvoh`<rR+j6`s)*f%g?r_7zF@
z71_oW1>}l~@*nbPbo~$cyk_bCOFl8H^I4@1U|D`A$^F(+%jEk(AQ+7ZhgB#B`7J?t
z^IrT$+UQ1>@&<16>%=B>dP23Q0=ZG8yjAnwrBGYZM+7KzBlb*h-F0rMnA}o`=IU?U
zTEN^HGwe+1Y;~V03;%#K_rBGsM*KRJg*0;~aCv9fjqH%Umi7+U<zmK-a!kw%&)fTM
zto7bU_Euc?!4;B$@AL4SD(&<ZE@I=s8t@qRd7nq^(PU#Eb!?gv^9@JOV^B3BLe8C1
z@xyzWrzCI0>bAZb%I7-q=LVzaTF5Ty<=#3_s$%)MLa3;R^2P3|cVMa);4>lg|8jNS
zDRA=dtMigi1uXx~gqXAScg!k4$BFz8(&Zp#1+t8eaUuSD%$lUe4n?{*;AzW$MaVZ`
z>-@`#5YC}j=l;le9-bkgVc}Lb{?Rcpt`T0bNy(0ZK?#2&<n&P~`T6m<!8z341r<qw
zC8f{^c|=}ivu{xYU3p8F6LL*E6zTFdbp!2+`i2NPM`vu)CZS_ix{+C68;E#%1vsz1
zzPArr-fCGpz}q}-**W{oHF3jybXjqFbMaJh-9d~c^&b&(duqGQ^;+-lhl$@v*cuWx
z$ShVi^ne~1cT9+s?QRJp-C%4qhv8UAT_GKSN-ApPfcvw2Fr)RlnocD^F;l`97$EtM
zi9Gboo+PoqetD`;b<KrrG|y5~g#UuMQ^<B*qe@noPejI%L0edE%64yg9=ud9AuJoJ
zbLaP|=G#PN=kg**uSE#qrZRntW2s~BPL^Eh^sRBG#y!@n@dL}3A7Q!N6#Eagina0X
zE>RA|di#ax&W;q3>fbHjB<3e|IW1dS>6Yu{cNp;V&4U-MkoMSFo6loojR?io5nXt<
zBtnO|Cp%~?>qZ$L43Afde`U^Us8wUmK-CM&<?s4+L`6!jb|EOTKTO;~alaxxtB+oB
zUmhURN!bvoJA{Qyud^$zO?QBOGMO8~P~s=?GuMS2f3$U66Js}1fpIU6+XJ9C;V~_Z
z(6O?BS|F%WlScDRkQM+ij#4xoDX`xn13Ql3v*EfJ^N=UB6f2big9cSm#SK5oMaL*9
ze9a1mWyjh}w4=|-<5&FxoCsYclgLjtMJz0oGDtcK_o<#J*-xhx3}wiu926jqQ<yD1
z;Ip4>EtcH}9s=UL36957xeLFQ$OPol?B~T8`Y|Pz$)Lt&Vk(=Aq$D|61!p8^9W%$i
z2@*nMafvEBCiR4U+%4NudL+rMi3+pS30p)R@i-JMvo2`femdc^867#Qac^Q_s~g1=
zw1&iu&z7Fn&B(&X+p|vVvZwaqB%L(<@{teEANFhCEy(q>t|CiW&p%?`t6HHdsV-%G
zOHmjUz|wFJ3o0x9e%lT$GTfOL_AEH+z3pqhOv|iBk1o3G!){hTHT|xI4r&+$>($oh
z7M5{+CUX|K7K2ACI|IrpXJii3hP#&`VAWUPw%y1Bevh2Z{;tBiTJFH^6g*+$VV;B~
z8|!kVsGRAR5w7_?;tMT;$#NWs+yc2tHGVH_nO5?G3gGj9eUywpQv|C0@U(|ToMx<B
z?ygzmTZ<dYG-yKF@eBt!KVzV*`e|J@ZYFJ#H6nbER%*#XEsAuZl72h+u<I{kC;&ll
z_^R@#Z1H^bNS;R6d41>z_})5S5?^({9o+mHbX?9~_47#0f=!srsankU41b5h@u2Sh
zynUv9irQn+gK-0JHVj93b!|J#*18!+8SQ(6u3_Z4Tlu-_&)wwMmgg-#)&>9kPP~yA
z*}<C){yV)U@5kr*?sczIW2qnF_sHQJ+rNtWcEA_T4`UlJjs0(HZkd0*Rm>rUPidE&
zxUhWHqXHnv_IB!ASP{?Xz^_b8zUhPYLsK$A<O5aXxTyv{u^^&d?7b&iwj)H4$i*~g
zswP>#49*6qDdI>Zo@5RNODNIM287_yU=D^DL$@TwDM9$0Kk20BO&D`V@R=d%SK;O@
z+p-x<xEzLq;l@g|m=!5CGz?1KRuTC$10lTp+(?o3<6qGawXwN_1|rmY^C^&0Va47L
zL}S9xX~N5o$X@3~e)PzvWo(6$dWDO<SKU=7k_W1M?}>Zrp%di+a|^g#CvX7hMWhAa
zsHXuFN+JqTG)pnHn)(wZwhGw3%8%86uLRmw_n6&VG4!(FlKK4$Ig`OKUljUN_9e`f
z{ea{0LhneX*@Aft-cMNZU8jwX6!A9+N}IX;&N%lmC8iIZbTR~F0I?YPM!?bzZFA|D
zFM%S}k{{WiJ@WDKgIurD^zX1dk+6e<VwE#fT(7@#+LaDBkVi@U-zPxAaBK(Pm(QqH
zh~DItj5D$F9Y;jnUFB2V7Rbp<s(($niD6P^rvEGymPD{qm>f~6L@uwP1WF(hz$jF4
zRv5`r2+PAEWl_7eoFAZGct>Esf}TzinvF?YQm$F1xg)pGD|*YNwss8L{)Ak94qM(h
zU#8tFw>a*J&uL;{{k+VATt5q2X`)fCUo5vI0dgd8VJ|YgPaEih-L9@fK7EIz2%;oO
z`t@T1=PRjo|L`(QZLKOBAETlUzAm3*tSF6zu&|cnYiwr0pQ3NLq094_*Y&@8Y*=_m
zCuiE6JZe4}TIO4>tWdmd-e0jLbU#^HfZ@liLqM?Ikzd{BIB&Ux;GPqwpRDFdIy=o`
z&^eYXW}m2Vwui5BIM?qO;P^SmZ<AkGk3M(&PEzkgHn3&TLo=eU<8RH@t`eKm+h|)|
z>a0F}E4wGG@Pzsh1c}@we{?rarE|$d`)+4~vZ?^5C=mEY%r@X{gfZ&IY#&*ZQIJmi
z7MA;B|1f-QXe0mjW0K1tlFd(FBlMltJb^Tps@gqMeG`(Chi3jo^C)kdHL7Tb5$W@)
z*n`krx_D>ci%nhp5}H|%g6nAf)>W`)#9qcX!9o3VZnv(89nNqaK~sXd)G4ww9!l2<
z8-|GVRP+OZWV1=Ns`|`eKMU3q*C~cl?hn=ImZ)pkJ*}p8kX*@`14)SM469IspKqz9
zoO9j`J$*wVF72U`xZ7Mt5>Eg#hLxc6a$y>WqaDtEz`rBpnRGCq|52oA4oWBZbcS-r
z2lyvKo;+a#18)qdk7{Zt&J4iBUg@RvFf6p?Jhgt?2l^3K-u#$m`!m|TkCx{iqs{YN
z%tuf8_`9>&Sf{OPw!qqLlk>N$${)YF+Lf-(og<Fe?L2TgHeo~s`T`$+eBX25>auQ0
zhQ+)JVeQza?i3jMRCX0P)v!Zxz&s*lI3F9IQOY3RN=6?=A670R48Iu*Z}4irH{h}V
zrn=Q0ak}ApM*pCCOYqeTf_XE&x_Th^_Q@J~+5wDha1@X2cAbTJ+lD7`tn$%qA(G?w
zqMGN4qlw#MuZnzy`}v7!@#sQ&lmPTsv3wZLSlJN6s~s~q`4ug+a>REJ_0FHVoV0I9
z;oSG^cwPq7wr^n@-E|5pUq(0+Zc4g5K;MF${3-9)8_RPU{n2%0>i=@!$>*9B>UDF&
z)G?tF{p9*<{U+^)=qClr4$zn(gEb+^$&U@pg{7?f1dl&AHg7yqr@I0Nx<%UwW1m;(
zyJN?e3~!z{-FNSkVUQ1DVVkl8&)gyZ<Ldll_d~aY&(XX04?G@TB)s?th{o&YutWfp
zs5e!Rwc%J8wqU}i&jb_0lGn)}?mqB8@)J5bd!KB3YiN37y6~bAIYoVD$C8slVG?+3
z_9h%*BQB994H3XEaeCorqehmd6%eFHcE&~aLwb;54H3jY^a=%dkHq<%NqOUN`e)7g
zA~?KZL}nE#c`qg)1S<hxr*Wl}3*btT{tzOBX6euW;Mb@gutV#MGVkZO6wq`Xz>gQ$
z4i{j?6_Du{xI-HR><=6|2uz}}i7X77><>z{2cX;iKa5%3EdiQxa`xI{yxJb{OvJh=
zwgp^1!71wE^_rnAfeMy%Vqe8IIYYnw3dP|GWZe%nx(SKVh9LbK3AqP^#mEJf9b#3u
z{6)I!SmDJkHgFPQ4Iyw%F5xZOq3r_iE@s2KLc-ICA_gTQ23>4Yi2_E5&_-J#x=X^R
z<Y0@KB4atj7eFX8A(0bYJ}W7xYlo2=a*<nyFgtQldoEEKF;T}YQTs$uB8Puhts5>8
zr!I)MmeCV45mzoz&m+-$57ARDk+4AQ)|6;-tQe#t#Hx}QE#p889aI#Q*bb&xD9?p|
z3`0+i9gB$}ZFT((`dcG^u#9Drh@)>se+`La&WU4vj1}CCqc@J>BF0#jizf%f^Am>(
zF~hR<#ETxqi=)847fgsPp^^!OLGp=}17d8pKoZ8T67aFn)k|SW-zO$d^Nyq>>Jp>q
z6Gs?6CNlp_)Rs?T_>!a%nzV(L)Gm-@gMti$9jAws{F51PS0dTbHF+fm#ZBJH37G7#
znbbg(@^;oHBsC?hH6_B;I-oS^e;XnH*VQ@HgjkZAR@VA|V?vyK%=jB27tEahCqfQN
z{Vx;ZCUMrbVAifq*1l`j-!W@z)+spa{4wj2IQv>K`$i`l+8uvL&3<ZyWWRv3Umvpp
zBss7`Iq<qUh;BK^Y5ySI<s8hX94wMt9HCr1k~DOt43z1V|3tcNDJatseXX$H<)Wyq
zGU%=HXpYm>V)9s?l0P5iu?S^w3+4Cf<nukH3#8?Dw&shprHfhRb6UkpKIOOQ6v$eo
zL#b{<Yk?9=I+W_x5ErT+r$MQ1g=^t^p>*A_!cuUdp<9|UNl~F-k*QFcxm!_gYLV4b
zs?Bmy=3|jwS(-g+ahguCQ&=jrNR!lB?4gkA^;8^3T;hkC8lYQZ?por|R^%rrz>1m{
zRu;t=RurlGDVn4>(W+FNuOJ7j^iH5u12JNGr!?CQQYuuGke^l>_oa-~4u1ZwtcIk#
zPN=*=w;cVaRKaL;yaJ(3LmU90n30Cu3Z34B!Kjo*QGFHfSE!)E@~N4{=4_}KKZY5$
ziWaRGniZ-fQ>|P?4GNE`Ty~4Y?5Vuarh7+RVF{?(va0xqQkh;80M4y?Ap%_J!t9Pl
zFQvV^wu-)KgSii@?$PCWev0~21_QB*29of?v6ikVB%L1%qgm%+geN^dkzk)hBBaA0
zxyN*eRhE^h;)W;fvy?ghtOcbgle)*eagR7ufMZ~dWMWOh*CTk_9>K+052HxLs~5pP
zmW(1yEPN6!dQuO_siqWGdo3$_cY-D99xk;4DIqT>Q+5yg$eKcX67id}F-E&lORwQJ
ztZ_Z3agU&mvc2Jes_96!$t=D8#;56BaZ}k-{rzSW%0OdkTb-0-vlLSE2kWM#oaT$K
z&DM(e#80_F?kyqiEs{xfx~`4vim*aBt#QJw33{#iG3F5~Er#s@(JMMnysGl<4Zk*<
z2d7)XSFKc}ZF#~-YI-n5E7~RD4T$Y+A0*oZeyP=#t9dB4Pt>*&CAZTyws))`Hl?Fh
zySIf4cQ{VBp&@m!(RYlVv^?#1@FH~1oU~WjcL>XLikWqet^fwnzOA}zmOXdok2Njv
zb*X&n+Gj<wKe0X5`?PM|<-+>o>g3bu3Z$z-nBdN-+l;sSX{_U5zx#V)_tQz&)|ffG
z{%1f%_nY!g=Efecg&w4c&ZG1WqztsX@LpmMB-onXyrNq24pu63CA`xfdVN*K)h^1_
z?>HXXtV-R?`f6M+o$Mk#WFmbZxcYH4`e(-aRrmV)-TQa$`eMv_gd&h6(6!!=w@agU
zLk*_|wF7nw0}amugk*iEEQ1a{g9GLR$!3G)Cxc~(Lpgy1`btBE=0mmgLwV&xIYUEj
zfkW!(!|4pey)wh{Hp59l!y|<-tTC;hl?HXThdzuAZz~#m)BsSXN1|RvV#t7TBESTF
zV3G$gB?Fk&0n9)L>V}Vm?+?#3LSPW=07V|7B^je-9itUc(c#Nz4cS<o$XJ8^SZM@6
z18p>rVHD&DgVo{Csx<OJdX&m6sE&GEjZRC`c)Z(p+(24;e4KpJLw1^MoWsNF3~$1O
zYr<D^g12uXe0O3vcg$yKY@_irbga4AA-`Qgy4zu~Z)139Ga*nhsFyhTvv!hwZnENP
z(urW|jCX3oW8#kO(*qgNlMTa*2+1p%1t8L><kvLs%rt7m#39{GcI<R(!*rJ9jK$qF
z*&iYbc5^EB>79xhe%x6fu2}=ES^K~l_TE|T{aI^-xk}&Jxq?|c>NySBxi4mOw7qjG
z`*Zh7Q!+L)2k`Tx)bsMPka<Mgc~$*s#lm?Xzq!?dIg8$T>HT>Pj0GK=K8CYNEm3Lh
zNW!mc(q^7S7LhXFY>BN!Wo<pj;V~B9o-G(f%&$u?EM6@-;w}CeU-HCTnh;rHIbA}>
z00q;5W|crZHX!myP;voiWgH}W3ZlUP=hA_XmB5lVVAe=*c>(xw9ISK-7RFd^q+3Q-
zUjAgWtP{E1wYzLSu^h;@Vx_#&Z?p0}as^niVs9|@%V5sQV93Ql+0B5W#z3h|bO!iG
zX)JT5<Ii}PD5%E(<S075um)Q4oSjjgnCk?A4Zthxi)(8W8=~N?HSo@#r9JY=gHG^~
z!SabG=xk#0LKL!mwYL2G59qdY>b`UN(O~7-6a1%g8Zxnp&^3dExdxN90{03=$(lu@
zn45@Ho>Jbz&YHvZnj`jFAf=ecr%)lB+`?F2c>~3~DvOj|^VAd{X)(8%qZU~W7q})D
z-*qkVVlMGVtqQI$F}^N~Qh<axDA}t%zMb5b%mPVOz0v*iRbN?iSb0~T0<4JnM!D+i
z$1V-E$z2&S)owCgz3+QxvJw^803*!(UXOjO#63cM1QQiHtFC<%+=H8|{aTtTXZ_W_
z23V&qjL(K&->ik+>$kKm0-;DZI-_<;3jhxQpk4kqq^oiSi1`QUW*w<9!~E|m)$*T<
z{yP)=R~;pKVRe!4`$YlAbI0FGH8gY<XbiLw%APLyrC^H~Bj=OTd*;@?S>vL_;f#w|
z@z+GD1AVcfQq4%$bC02V@eHwa^Yae~l=<l$8uryWh|?oHHqJLHF)2BP6d@!o(<hZR
zCM*A!rE3n<L>XLAX&+fmmsizboKV}++Qy#I*ri|74%JXLHusGHM~ONI8+ylx1|}<q
zXO=)^6Y~YrV9dGIti_GJegBp1%ysbAaqRBF^>4YOi||v>`F-fs4Fq5d+PRls7xVLc
zLC_yj9h3-g+9wYX_+SE^c}j{DJSfn7@c0Jd4kLRs+4;czSfwliWTFEmb26rw5;K@J
zB=Xp{MgTQ-$1@CVIQmg;#wWAnh+o;3B}%ySl-L<Eb-#a8D+cBmiYhdg3zkdN(#(-0
zl`qvV_3Y!ZMx5%_Tkg<kD8`?0G&^pMu7!tlD7Lp<zAlV4bFy?Z!W`gaq||H;Ct-PO
zMucCP4#&L1jT?`(XB*4pvZgo-dM7hgE|E>3+{Q~Vhox4oPM+R)vLbCvn~)iH_kE?s
z|6*D>hM#3)&=<`J(_cV*CnrYy^JK>p>cM@EMO;>9+wBEIP4`?>=(Eek=3FpVb<_*}
z@3Wcm>?z+)f%~M*jpUEr5QOK|&Cj6_FPQ6t4PSsdZ4NCwi{+;8ANs>_zaSogEq|;@
zMiVYPf-ls;MCK{$LEXRPMuO>sn6{nip1y2TF}0O!hb=T(Mto4}<fe@r13#cg2_{kF
zN3%X1j)waUSdK?YZ=0L)N+5#O<27|JP5IRnba3N8#X0RU$sOnJzSDOq1t;&AmhKTs
zrO8vKos_f|seR`|IiRzj1Z$=`LTi5_u9IN%?9D%+A9JiR6-pd~Sa9}9zfu4X^6Yt+
z-{k4CD13`{TMQ^oNc&EbQHYR<`;9j~>=?h)OXPT{bgiI_<x>U2&9|7`$z|P2Y~uM+
zl{VQ2*7WB66zdubOj6BSHDDMU<YPxt->KGA8KJGrT+*krkkPEzGrbjpWp>VueSD7a
z9llTJ#s}PKRpquls73W>=D%z|bVa$_bpBkkM(nT|5ytF%;oGf_IpNc)u|vvFxHLnH
zemd{Zl{wuVcywy79@O9+M;<Kyd73u-1<(=HbArWoEkfs>R$E6}jm|z))Ky+LZZu<q
zIU2tj@tdE01=ikH+=7579iFc8W>$&+>}F2&1N-f~8mrpig0@AbBS4HWQ>zWblKl>3
z8cp5<&@8UJTULL!$!q$-zY}>0ufyQisy*ZTdzNBQr`5VodTsNDzz(?!x&Of|{}vaq
z*8|zFx91_d5mPS@dj@n-sF1xx{;0=;H0Q3Go$P4rw!@b=LpP%0{Pn8ia_^b8ldV1q
z_kDvoj`K60sjBDtrr*#+N-v`K^X0&lmB;A_<J;rwa{ddE!s%p=KQ{qdZ`{s7M&s`5
zOU@TXcPYVdy^?p0zP~<d7C|1KPI2WWU^m7vykA6cYGnTGtVfGS!ht9uL3`bh&=LR)
z85K;cMbFImN8d~qW4MJKf7HV_ehzV)@Xs1>@X(tr!P!m3H@lKpi1GonBGYin+IV;z
zVGc6wRA>&{??3gba`4Yf!CH*Okz6yqL6DFD2SI0^Br_qX#+xV#BmL12F$%l_fGNZW
zY3hoaP^?m#MD!d4Hi*3x%=dC>1ac~=x7SkPtjETL6LOJsetG`FrujnCa`~`IGXdX~
z5ODWKFofQh!0PYrkR`hKv7%lRdIew+io1+_@%f2wW<$r0b3`f3tsWObSAen|BCoC*
zCnzB;!MG4RJn_>$A?{(<InU*TVA(Z7ko4Xv&rzDpXk3EHxC!<U5m4`SD{)M1hu$+4
z$iKanFi-%;DG64PPr8mAQ7YQBL?M>o!;K#^m1HZ_39{K9N?P?8ru{TCW*63*UR7Hl
zc;P#VC+(2glCR0M1&p>Z{}O$3^In*;f7Bx@HjNg<AbO8NZ1<#*(aHn=Hn>&A?_4GY
zi9SS13h*H)$N`e~rgLBDEEL6~4>#YU)?8W;RvjBTA)Wp<O!7lm%+I2{3?_t<&+|a_
zxKSSX3p#TJdG4vStbqLF%Mu=El6bGDhG2e#UilyLnpqV$C1k|K9HBL;4t$Q#t|g0d
zRhVy>Ay28yLWx!@KvNO<Q<DB*h}`h<`x-anQqZpxxvWvGq!v7U&NEZpx9{iLnjG;3
zZFdc)W;D9@ODevgS5P4-zR4%K3$Wh<=s%8tyr*w#C1T6oJ4ncetMk=CMp(=XHFe0C
z79$c9gULUXGY+VnH)t!J@h^@pqx)&WA#noWoW@qxpYED_Fskf=6<4=O?pwNedo=wW
zz{?bT5zLTNd8170mBTV#ILU&lI(_T4Aq9!B<+DX&w3^lPu$<Pdg*fwx69d!=uFlao
zcK3ULQO!^1uF)J@&u3@7m#Q4V;o1-D+!G@krO!P(br!B@`p9rp0(QvSoc@dln@9&3
zFt}Z^f$Zpf=z0=;#9nZ40&M(mcBlv1iMT@N_DrzywFg+uuY!#-!ZC(jv>A$OIcz+3
zRQ9xoTQ+}2AKZMUs(wErwWuB&nSn~jC@80B&drqZVp=4vGn$fPpXh6E#-{gvOs_~j
zx$_j6Gx(A2D}#goRD~%of9iy~LVY@diMfE3^rVBAROXoymdHUXhWq|+(U+G4UU=Q<
zW2#?}+*&(JX$Ps9aIyFK<Y(w|AKH-Pi$VbaA0HL>r#a}hv*d&Fv3mN`d_mDh3!CQ=
zwP_kXtX*h0>z064vk-E%n0&>a+KFDZtA2YG>9pzTiRA7RZSN$wEZp|=*I65Ey_0lx
zYGv?O2RiU4YQDxbW7{xechJ~6UvuW##)+lgY7hf|^;G0{+45(yx$n&+Z5XjXENIuS
zWnnw9zx=S-6yA^p@k>7aX|#jWpS{p>YKGn-;vr{H!bcBvlX3(EZ_sW-T{MHP##he9
z`ots~Ef_*oQPGUFyEMr#z(JGi)*9hG+K(<x7?{7wD>6vg2@yxF&;8OhXb;*!f>Sz>
zO$Q5r0pWYfHq<b~i2MVZBZUtzbKYAwT^%CF>?v(;%P7!FzIMXvRwFEZ-ny-hraEmP
zYUiu^?i4&mwu<)S8EyI;wXrzw)E)v@)4Q?>WDVbP?e1BZH@WYx5xt}%dSOC+gW5ss
z1s8S?zw>VEVc3G|Ix|Itf#rv5Z@2I=>Ym2|qmQdRvQLj4<oWQU>XV!e$-+OCYHzEl
zCf8fz;)ax;+3suksrRAxe=dBz4Y$1EFOz<BUd2LO_Rz8)L!7%Vaw%PoPO_d{o5c!i
z-#VWOr#;)=i{<tHaJoWEdokh{&z^~Pyj@BCqvkB0u~q%+u|D-xsu_}cHRS-oCxuK7
zeD;7K`M@B<zViFL^my|Ydz%#ba60=SKVV{}*rT_Y;WF7vn!01lp%F6KBT-3{rdT2{
z!BUp^QXis_r`UrX{Sx{7cmRHEhiJ@lKd1Kr^hExRoc=rlF#I9@l{x;8L2&Px6vX6E
zC5Qq*2>vomC?Aj=L|X#Frvp?<0#qN6)R7%np^cP7Kb9C@-9x0$EkAi50*siDOqha1
z<O0p)5G|1H-V4C!v;^6V1kz(EFgyg>jyRYy1slZ#yOjiaj39W8IQ)dRs^x+?Hv|8+
zsvnFT>!H{1A=)WH&LRGBE&hx_NYX?h$swVFfDm0!r~*<bR3@2^3<*=T3{&_VQV0qW
z$qC6l3=_W$DIxMNlM6{83a>ka{ZSIy))LMi6Oj1e(L)4ZK;+j9avCP`1%jL^LL%&#
zYzB$oYFzvTwfyIZBJgV>#*o~=AqK4_j30QQr|nT@a}ni4kp_Fb>kpB$hyUZi{UIe9
zI_-P`MZZ2oLr>db1)<Z<7(~|?<kXni!Wf~&D0Ch2&WD(^tr%@pICM?`QEDtnYb+V~
zFAAh0j-wHbqmXxJaE&WL1hBNmK^>GFk8zyfIOHC{u8cVx762tC9y;(80mq9y#!C<<
zyf2Lh#Do%Wieb|O4qG_CEU?-g!j&~aLJX+@aF<aMiwU!{Flx++2000MKrw9;L5iA0
zeISA%vzZAq5)73f)JkbmpKuVD1mRBlj)JHOG_?=q)P*W3iA_G2LSI=Wd6Xs~<$QHL
z;&cZld;Sfi!1$G>I6r;~e&h-*P4Rq8?0%O@FO{4`j2J-tCGCit>@p>@G~r~#FqfGp
z5uECzlPDXS78wdt08F#cF)o#7D+i`|>ZH6nrjNy?w>=^hfzxYUVd{x9Vg-%5j@bY9
zQsgt9`cfyE5n%zDB(#}x-;x(m-a*NrMr&sOHr{Y(#^xjI_EBb*PFALU*5PBuLu1D7
zY{t4y=7mlM0cTd5eD>%!NH(rdc0*~FTVK{0I1#|Yv<A+4LP?)t&IYIE>?33!_vOqT
z<*Xs(LW!Y?Moy@G&Y^tnqFFAPP&P>#Gxc%~Eh-DWP%dK_D|rnHkwVUGYfc6|?pv!Q
zRx36NpM=J}+!=(tVrCdr<EZ!0nWt`n@}><x2|kGr9HD&N-<c;#p}J6^CTigYFPli(
zdodEWnn64rq4#=atOmMxMs1QNLabj=@yvuIEy`HFrQupHOW3lo{3!b-?}k66UR>i;
zY!X}Ck6i50M&N~N<Eu;Pzs&yAO2VOy*{#ev@QE<Ej4kv@JY0b}GR!7AjVLy(Fja^+
z{fRX`OgyoTDcKETo4HJ!z090TBA&0nRCsJ#>_$?`5>-n=S}(*{j+*pxROW3}%;lCj
za$R<-Ro?!y+&ZrOV6M!Qrs74mV$h^Q*RNtbzrwMv0`8z<3Z_z>rgBZH^81%ctl&y;
zZlz>jC1|J89JY#(v1&)MO7Kh7oPU);UKPb~)!9~+p;h(0Z?$PzHB4W%)p0c{Y>m%T
z`6_WmXIn8MX%_rR`7?9=m$aIwwwir#4eE1E&uAe|cqv|c7J+ark$Vk^VhK5E4&_)a
z^;iwEVjZ(yEo*oQtS~jBbs4>N&Rf<}t}*I&Xyv@^x%^|LqKbLqXk~(WG{V9alHqw$
z<z+G_G#^$V74l<wii+iG;rSZj<;w1~pWQ2To@w<+D-GP~KDt+aDlaf<uQWlUx6rHl
z7EW*dTxE;K@RhX6EWG$fdbQ(9vGYo`D{F~6X^p3KiML)2`$?_;NeyaRE%sPlC~I9f
zTD>n?X|Q{3WO*GeT5F(nT|8P{;z?a{cztYnX?l2Frgcj;T0?5OWXdD?jjsLA6O_-K
zZ9M61V$W#>ZMF4!ZE59ENn!0GitX>)+s0?w*ba=~vEoP4J4V|(#?b&(u5Hq+u~m{C
z0*sw=C+%|9o%xcT;>Dc>y`8cLoh#6>Cu>&>Oqa4nSE_H9W^vbnVwdSjS72|K9%FZq
zWcL>fNcV5F?qB8I_P*WU4!Yf8dK?*hAY<JpRy~%IJs!n9Xc0ZP$32F<JpqipxahrA
z*1ejNz2U{Zq!GP?C%y8$y>X0vwCH^c)_tOqeW}HLtPy={Cw*MKeMOA@@6h|Vtoz?e
z_E#163rF-Ho%GZ8_J;$i-&deZS0KxJ42;AKgw_lwb)c!dAgPiKwsH=7sSaw9p=qxo
z>2?g3O%FO=4jM<Geo;b#&OB4?h8$vstUOR`*pR-z3?*U>n{y8TvO#vzM|8;;4yYM6
zogVgLL-r9tgtn@GsE*8sjvVBS905o6Hb<6GfE!f6b9o@h7`PD%Ohq3!8v`!o069@1
zqhnN~d<vt5r@-6rQMroI$FWhM@hCCsnDXf;jM7*i)mU)Em}Jga2istieowc@VDD;A
ze*{{W$GE=!IDW;r&)_)u>9`5{1U=hCY0UT{Iw~k*BBf?x)dpq#Wg-e|a$6sHSAWvq
zZt}1~YJRovL}c<zzyG3Q_-eKPx6S0O{=hvOGH=f0vwrOB%ak0}G^{Or7h4AcIV?H=
zfI2;m`DYr7d<I8!2G3xI;A~nZb$X#-#@c6EcyosA-*ptvS*FZcmd;tWHR#>dEGPLK
zx9A*?!5p9GoIvKBQ0JV;+8p%2U4nf6z39BO!Mv>Jyj<qILg&2F+VQ-~pLtdC1$EH{
zO#^8EWI;P~LAP^3e{I3=&w?@e;uq0HQ-j672kx1RR-KDBoeN?;0OaWod(ov|21`z!
zOK(E~`Y^NC;gL#Z`6EpLcjYle0EjJi=6Gc3RS)Ea02mz{LpKIVP=l&VLC2)v6nX$!
zPkPBXs3H*5kv{B02Ugz(y*nOGsWeEa94d}kUM>V98H1Nkz?TTiP1gP7bTADDMnwig
z-nJ&?p35v1a8;4UHSDWG9V-OpD@rfEFqi*jqMY-b`D>!ATtl1wZzf9ib$9?Y82SGd
z2X4Xt@-6FM_{(~?V$rGU!sFuaBu-lm`CnJgfAN<mU)A49oGm>1z+e28?(SRluMi6b
zB<td#!%JLc4(fM=;x8R10T1XTE+Uf1EAa1?v%M2$NK{&SMy6QIU%z8ua@OAv3q3+k
zL3K^7RZ)3kQ*&umU3*7<LrV{1YVW|?w$2ftfA`=7b^qiH<?!gj;*as!W%B8jb<Fvt
z?VTXwjrFwysiXH>yBCY#<KH*O=a&zi*S8aJXb=D#Dw*7WOyXFee#b3<lgasBI<hro
zw=q1t>Z;ra0IZS=gwCFf8Mr;D8G>j@2ds<q38vN?MK`-HV6a5coLmJC?)VDRxT2bA
z%<UH?um)q^BF`X&<|yPRy;ESz*DR!%XlNU4R8}kV$T>P?xiKp$dY2Q2|Afz$pCP|=
zej_hixteOb#zNwr%s7W)X$CqQ<E~y8)j~=B!-OcQKd6pD$>5K7t)3!{N>wxd>3Ww+
z;L$!SeA9wxI6u+tm94=3c+l4jPXMrab<(%5&9C6G^7boDgYEr#i*7S!ZC`Lbj~+E2
z+QjHj($DbxPqVX;@p_b>J>1^RtXRAzZf4-iq4xG4oSYjV{kSa{EC~J><>^jXb@V*g
z@x9*b=iM6PI0RwgPjkvQ=^XPMZWz>%_g-jmTI*=_3k1~M7(yj|?u23YD_FlBi4=oK
z>>XfSXhsLf5O9kC24VPnS~OS)eTSreQcRY#%G{HOaACqtJnOFSVq)Y&B$MXzqlN8K
z3c@H+eRt!>*no6_cmVl5`<KT3jigV8p@j&%e)1$y?++~*$mzmRw3C)A1!rS&l$ja%
zwA#Ra@y@8kW>`*lt+MH2G>nI47Jn|ca}D=O5Bznx6>toS2br03-DFvg3XnIaX^>^L
zunvn11)eNXJmQXvJqXH#7D^c;4v+N>{O<NDQrrmB3hO6B4GKH=-Lfk>pYDzv@=;kT
zf=UTas3GMYX|1OgK|<~eVLyZ%PYR3r(j-$CWo5qk&8Q1jI;RD(nl#DaFiY0WI-OJ^
zOh8Q{4Xcxia2a=_ftAUR$BI<OM|bWy?Gh!-2d&xoHk>x8z3FuQ!3)ndE#9!yS5bKW
z2<L;=T+XK$D}LZwHA;Un`){<>IW?`<SymFQEMIwjG?0I=Z3FqZRNq+;Tdy7`i5O}6
zOo>Yo@I=xh>D<W3F)D**B|B_(=3b=PZw)kA%j$i#m-25HtsU8UCT;?ir$DC8W_)uW
zDQN5vY??h6RzBsEXD$Dpw{_NZS;1m)lPVr*7V?6KYW^?A-ZHAqhW)opa0w2@r4;v;
z7ARH<6o=9R#T|-Up~WG%L-644S{#DAOL2F1EuP8qy#II3oLRHhna}xhudJ01+4ufk
zdyN7Q3_t=%a@}pksoUOdL(R(X;5(_#qON6*LXd_H;n%oYz`}y^`-9T@ll#NUKCXwO
znrfOR)SOt+*!}vyk>V#!_1&=3?jV5283T^~;{_E}l(6(5FZUDb=!ef=t|ra6KVHx5
z`nB9lI<ATculkKO-)_dLwBGgPWV8w#R-eKiPPK{J9_uId+ur=${80b=ARz^REZ_#{
zNdPcqGLcC8+tCEieDK3FQJBd-wnRsP$#PS^5{~C29KQt0ksF|WHWjn7SEiuTS;COk
z=(J4bp<pEr#ZceNf5EmHFdA&QZyx-Sk_kCzWPDxed%pzJ9X`1jM<Bklx+I+XH>oT`
zFQKV;H&eo1NOQ0ePd<w<I~<YCgpJelH1x-?xqT5chzlTd_}IIZHsN6r-a}zG(Hjjt
zk5~zL#j#@^CMb><wJ^EKeyf4~!FDSWJQYDF`>|h*?7}Ssw2Ee&A1bYc5*?j7OfNmr
zFBixYyPLv*^#OD6CWJ6Bmt*@;DXB}f_>FfdD4SjXu1$l@A)$sNlQS=PNXN}8Hha&6
zjbmR#KM)t1h0nwm9D=7n!D|IuGUCoCVmA3Eo>XA4gIe^S+v+P)O8WSYQ0jnU_b12j
zNsa=7v4LKvVn?Z!R1^WBmrB<yvHnN7IYOuVnJ#ih>8XXg0{sJ@EpB-U0n7ek>+0ha
zJJnGS*5)*{TK&OtQ*Z%vP84+XK6w(oDQR*>N%42T$F1<Mayl^f=}_7MXk_hqXf77=
zW^$9s3s?C9BSlKigOf=KQ(i0q1r5bwh!9JBAsG9B1bOaL-c4+gsndZ<mZfx2c66~?
zt);ta=rmudYDv+WrTXldT4lO;sqwM6=EwqOP5w`8E7L=!rTZBU#C^v|#C^vKd-Z=q
zEXO7KB*3{QtY4KLEJxaSVHzSVd}ZM_95ggSGyQTmpt$2=Q*Q0RVWXebsnmXEMOX{t
zfrd58oMje4V6FV(U$r02Z2<b%i?sc}ylcvA@IYsiEpqhrP1`_Zw?l1l0DprJPrE^=
ze8?ufx;-v@jnlDYeQCGOs$o)5>Svi1^3nH1(#7o)P~5|^u0P_DAhxcC4tiHj!EW8U
z+?vZNwYP(b*vEMlt^hxbi<Nr9yXjNxsfX27EHdhbYC9if4+DbSE*L7Gt>4}HDh9T1
z2azq%hw~8~WH#4vw#`E){J2gcrqS&{=MbXUt&gQj)?=r99;#AlNLKx^m-o4yN6Fgw
z-I_q(tA0R~J4l^Q#ibGc^gCKn*_ht=<A6Nw58pJMEtW7v#EGRJZ}EKuNnhQ;lxM0i
zlC2R+oU6W5*M->_M+ADw`&w(!s@M@KGknN=r&IZ5d%n(hk=gn&uU}}14-cmOXvv*+
zH2Uy#ycRPo&|PcT_qVWHs&yIpWMuBZt2~4orf7#u5j9$#C(`1h%<DXrPE(WkPSH}S
zf^@np{pyC$hF_z8VPw1ZXDKhlV)ejnmQ4BNOOWD`5#^%qBFarc(cgyeLJ#xf|0r>a
z$Cm$uSR(n#^v|tKt;`p5_ioBG;|d4B?!+56H=d)Mp-${DG#aWr>FJiEpW1ONa;DBK
zOA&U<dz9@@G>E$jl=f}79)yovw}!a31_9Oa>(Md|T^&g0;xZl^Qbi5^ugldU@HRH6
z+JgJIseY713ggppzZX#wHHsIC-=_ZM+Iq@)Y1WyF%UaRMZz~#<>5xQwK66Ly0_Q@n
zc2M2RV{i+lCU(lj`?zo4-#DrL{uG42cAzoVG*dr%UGDyLXn+TsYdiT<#Lb&+U<{t`
z3i*W`;dCqsb_;)xpVif&i}J(SZ=Q=7P`jE&;QE(s`R?Rz8#DbGKh0ynitQ~momVR*
z4;3RNw}0P*#yRzY(DtQ)YpqeM1SZSl&d|8)qZiFpEN#o?qF3!y$qHItMHLzo)BUV^
z`ZZNa%dt1UJLl1pZ1`#mrkmaDWWC<47~OMhg!jAUSF|?`=&hF-w8-0+@pnR4qSyQe
zPiT*#dW%6`)35EBM}pe!C-~>D#-e;ry!Dk9%-T?vqCBAk-l*E-a8xqWXZQoH)Yq(C
z?@Itd3ZeJKtkZWfwqML(=S;SzJ}~Jz8y<$w6%RX_j87UqM|qG>y)p+;zt6%N2N1(|
z#ekDk#y13?3p?0XD3gn}-?zbln;XNgcAT48#?RD%hdtPj>x_rD-;ey3=M{#35#SBK
zjK5gs8=+u-MrGa){r;?b{sBQ?Whk<&qc|cF%t!Z5zA&J=FMx6{;A7=G&6j~5VuAd|
zf$m~~U!9$;3j?iK-kD+qxts+ePCWjY3$!;2a&|%Um<xIj4Fc~4`3eO4K;Jr=2OAj#
zX%+?}4nsx?AU+L_o&%c8gv9Rwy`dq(U}WU8kW8}BY=O{RjnMzceMj?9<NBW<FjMLr
zGE^Y!9}^B5h5%p9b78HwVeMq$odV&AeRHo%ct128VZsg1h1Y3>jgm$D5s0`l08H(?
zpMyrE<OKEZ@esWPOx@zVTZ_1(1B{bJx`-id1>>y+N3K>zo{dMIG~k@w;v%j*{!xzF
zvX8pm1KkVYA|P1LS=0tT1c@Ak;wpwtj)Q4|gVqSCABRl;bKeo0un2^>?^tXfJ%G6H
z7=lF=0zyErbo`hWo*0G!Or`;BmZX^E${5&q4A(pc4=eVY_pxEhvA^wO1(GlXF|iR4
z%>6930v|DBMwgVul5&l6hQ#Gm#wl39(Ue%Rl*!{wc;d5^<G-<@X=q|<HO5Ph$H$$;
z8?d4ny~jj=FERUs7)XNU-K%~yh}}MhH901t4=kjd7+|01l7#Fgi-A}<^PVNLGeX@7
z5>YLnq9IVMBB;aw6n7sQ)kqvugznFZ;iH+vVV~p!NlGq4O2x!L<XBknlf8M8b1jha
z=Lw2f<00>(%QVqS-lG?ir_k}F{7_D*+Xps~qazZ*RO2c3h^=!Gu=5TLkq9QUPql@l
z4q5<*_X)==5-LKXC&^JJ2GB-b(+DAHR+VW>`)QVd^jX$)U9t2@i*%8Wv=5o-+TirD
z{d6rr#vp5krdURgMTQ0#p3z>Eq28VW+t0uOWY)1}qEMuu4W`@6CSeUCV=iR6YNk<R
zW)Tb`hRzIlZdp7$k%Vk96qd*c_33sU@RBW?OF5hAUT-4a=AV`GfwhH8B&%S~Tdf>E
zw;Y5IC)kuDypSV$pCd+*`yc!z<@Ud?od1Kr{=0HkD9AJA0U<*GeJ}Ej1oMsV{oWje
zu}ZKZu2b&Y=fhYs#R=SO*}`As<R2D9qbe5^zwzfv%4d=RY@J6R%w>Hi1UrU?xv}|r
zIT!i~fI=*N5Bmz8_6kU=^UYsG*kh4<2u4L&@}$T`xXKl}yA=${z>Bnvi!gG+{T4(5
z*&@>10>UiABiV}AFN&%H^OGoO3PXW0a=wklG<AaE6~zJ__hDIr-+Bha^6y0p7fQ$)
zihoWQw+WP%Qj}B+luW9Xj^29=g{r|8%mZ&rKE{+r%9JU5DhIoi!UM`<*~$(6l!juI
zy<jQ}G%vS%=evmIJZEXVP#mz#roSr3q`X%SkSUfiubA&Ce_L3t8i<M&<_l*tI+OFi
zSg6zzs}KvWL=CK9XsCEmg7zfmLm+PoT%^L6sT4P_d@lI?SX{N+S4oSFjyF`s^1w^v
z?oC2j{R8~_qOXcpyXt7x6Im`_l0E-R7T`|KuEsJp?W>T|1H49=vKF!BrbO|Phs9d#
zfmDTvf$j7c&b4AmwIh|a4wkivzfDbsh;&nm7t!lJvDWoK>V%>J-?d-Z%Y%Lh5jjy7
z>buuXK<eN8u1DIdlXI=_05ovEY<QM#_-xV84sPJcYWUmNpt|4C0BB@*+30Ci{|DUo
zDy#8Gx>3`jv3{+Q3fQ#E+@vSlRA<mc>C?1c&}2N&RJ+zh420Pn)@y0kf>>bYvak{Z
z7?BTbY8PgM*<4K5d?(gCX4d>Gq`4@w`L?~ef4A8kv!#%(<xH%l)2sy?(o&Gwa@yVk
z+ihV-ZB3_Z-4bi9Gi!y0w5DaYZnn2p?6#(1wx!a++cw17ip|=xL)ua@+h*I_a(3Ga
zFx!*q+L=`AA0`@`g&LZK>hPKy2&n3bgd0i1>q(m%aUSa_shY?=8fa6SUOqOwqJlAc
zG%}~cQV%;MvH&0jc3i3g@E|x~2ZC{gfwdIP#qNQc>B0TF%Wbi%zYoB_6peweBG=rl
zu+**e*o^>RUxj<VG<RvLc2Svk3xE8mv-D4hh1jJ1O;`^S6w^7s`c$@?o4tl_2p~J;
zfI4nvepLDHv6rf#$I;`r3CLHdxA&>@s|U9KhtxhCo@#U#;17i=cTj-KV|CcD-}j@w
za-{xPwgJ?=UT3mCX^)DZOF<FgMq=6lo*=k!oONFue?QgtegO=ekVoAt>)?!Ly$azX
z68qlPPXi6XgXQ4^jfDf{O9M@0LlgJ?@dAVO)@3b)Ll$|1N#Xq|3VhW|LyMQg>izi>
z1^_@N08wFCS{gyHuQjUC4dGD)``Yms-EIbqnhlN`3@!T&jTiv13^+dv@DJ*I_^|+D
zum@b~lvqBpl!Xgh4UY2Bjqz!?qZ~&WDKG-)aL~&9;5zid2A2Iq-97kyPe*>uOG2Q^
zaRZ}?b{<M{-68^AdK80!b>N@+v+;Lb!(AHyW|41fEm#~+yxh?7La~W!-pNAcNm-S#
z<KM<Ko-D$i#JKHa-kX1#2qx=O;aw(cljGsz3Y}9uB;5kXK;>mVF%fEp%t>9fsj2Ac
zUz5)2BI*(%>;^69^txr*f<RSWJ&QDSBSk?u94DTLKeB|gW<0Y^j+3GOv!AnPKa2d?
zub#f9o1$l$JG7tjA1P%N!Lze54CO@e7@5&4A&nj}{MIrXK`j<20?tOBbAB_QrZImi
zF_Y{x^Fd<aedWx={oG4MVA8U2sfb?Mvf5AT#cD;9S{&qj95t^9fow&#mNLWor*9da
z*uiOiJx_GuoI{nm*s!PHBc4cYEyG`1a3-m%Q_7HMBbFwXF?B_jX1*>9-YowNSXddK
z@b^epQbd+X8(deUu2NjNF@mp9f>(Ot7b74AH&1=1Ho*H4oeo`Wz2y~TiZvphwaNIU
z)b^Fu2^B)obz;4B;aULoqu%+k$>Rw6OwekCK@T%|j`boCq^FmnHN%*>FjBM@Lbvfs
z$+*wP7`GLJp?!m^gO;rviKiT|UJ!}dOaH(ITcA9R!L~!<V>`ltGGAJER^D3O-|!gU
z)a*9lU8z*EMN<|{|JsVKN+ZRHzeV+JExB_0gtJ>)_`5ny^}AN|?<+*Q<>>n5Qi3;2
z7+${-hbQfx(;d>$9l4}`)$KT@ZlqT3Ue52job9?_0gX;fY@WARb(+{gWD!cH5_)^l
zD^0PjTfSbqnp`M>Uhs@yFZ57R8R*QuvtGX|?m?0sEJg2trLGRT(g{o1LRLXuCIxUe
z9X78Vj@1FOS~Jq|kKpeQ%m9a}-6cfho;V|rZqZD}bc`|Fjd1W$M>lYo%bY>*xNGI0
z1GYbZa`d7JbJF(cyTS1QO8I*E7|R02cI1v@*s<Ki5thh_>B;c`_Q_>>)Y1y(=}D)l
zRTXjN$<z30b^1D?^<ftndAN0xbNqzw`4sn*eoqe*2p~ZD09g_}Cp|l%%0ME4D_)2a
zU(tZ5nuuxbfZOR8Ech1}HD}0eryF`Nd=yr3&raWQ@7F0IPlbaR?JgE=PoE+#F=-3Z
ze*l5XHF9HbQF3nb6al@6l`}TOVM-<dL=4c#xYlaBMvR;F;MWH5Yb?Mp(`Nu+9N#?S
z1{)ILObPryfmD{re~Q)%B$oYkh;xzbHmfe>r_Gv(bCC#-@C7Ew_uo*CqLiK6OVGa{
z^&gM0)JKjhWz3v6tHbtxw#6`_ptszH2#*kqOvu6Q_RqP<Kr3)WWTZ<dpGQ=Df}?ND
zKOmJYJTWUPI-M;pyD%z=C?F3}v<}HEs`1MG%}`Jab1G?QYwr-QZtk(G@1$w!9mZ)L
zK%9%D?;h#tpClWaX&yrqt>>qgYUkF87Po3vc8^agHV+DSj`uIJk52C&s{S@#?H=7#
z$3<my_?c|rl%nvYwg*IF(WlBx1d0boQ24qBpGS3v(!nLt8|Egy(RfkGFWj+I<qhF7
zsLf2=a^@*0a62A6;$P-dCC^*m`*-~)_>w3RL?hJrx$qC)rzp8H=oKqv=47f?gkWt+
zNAb7ca+CLQ2#@fjU6h0}qVy}mBlJ=!iQ{}*FM;p~u_I2DVFPFPQ$zJ<+-;&jY$A_X
zghyD8zp6?V{#yaz5!%IY#J=GfVncX@5y91RV{KxI#0Za&Vv_O8=GWzDgh!}q;2cLC
z#wUgF2oJ|2qWL*i@ev-OlAnO&W(9;>b+p+Hdlx$k79$Gz*CWK6(hG%s_}3#m{S5H?
zd$u{0@wu(_>EZTrmERk$<sME|X*LZ9qfl(pf-$~*S@Q+8#;^Ikc*nBtKk(7q5QOx#
za6QnL%H^dm`45&2e;Th_{oq&m8U`Uu`9ayCJc4r@;Zxn_n-M=MWsHAvZ|oU63!!07
zMoIP-=0G~GHMU}gsY14F<leBFaw>_=YsIO2Czp%=78#hAU?4TM4aM~!-%0Ycm)$Y`
zp1uD)(n@Q7C&fveWH;7vMz$c?`6Rv|-S%SMOvf9^EkDyQU9B+7fIit=J?u?#UQU!8
zNm1_CuUd$!L@40>0##eVSIFtUmIsW<p-n0U1$Aus#hg_K2c_&Cf|f-!J92SloG-+R
z%i9+Q*!=?@!B&+u`GTcNRrEq7@T#GmtCH$+amr))$*)$$wX;oArFGCBi#GDBzE*_|
zo1t-Kjo|DQTbaWu*e<Lkft@?~<d4t<_RY#-VQc+8B}+RHo9cTjiuzPV$0zz!o=@1k
zM>$=1pNT8FKYZ1BElz6ek<&{_X;RuJ=}T25`bZ;R70pcA{AP%=e(rpTGMS3^1HmLm
z)(HP;Z1pJi#Zt8>FEaJjI2UCL@1N`9(yLGfZ|KD&4i@#b&?lAUxoKG|&R4Tc&qqH4
z4EheP=1St1-!0S@weT%YHZH$ivKaDQpK^+|sSnZIUEW%;dsq&i2E$&}tsN4JZmtJ!
z=D4gyFh4g8n@Oi*t;c5YR>8NIO}J`N(y-|6_i__$@Av-;Qk(YKj85*}qxl;?95?Ki
zKb&ZvF-IL$*B`+I+tD)=+4XQfE1ma#_Ip$vbnNoD{3GnGdNrf)`RRPTpz!Ht+WEuA
z-?f6Ur?u?@+O9kAl2cKvBg)(7N5*b_(B0LdrT6aL--__R&)92dH}%+$m}g&5K+`}{
z86On6NFR{X+BO}=N6hR_FtJW7Ds^H9vaP*5^%WgJf~*}cJJg?%>Lu2tnYeFhr8j3O
z3YtDyE?Kc};8pc{iT$1^HJ?$Suyr&ZGC?;@ab@rtWwtZ~D#~~d3|8=m5KR*IFwp!)
zD0oI?m2<+J@EKsJ&SMm*JAu?@1Oc;Y>N5FyoYYv^Yh2pjdXzyoy}G7ik&Z{2)T@AA
z;WuVc)En3|Pv-byScj27ncRQRMG9U-L&9?zm}LiK*bD%E3|m5=fj|LYIe_Ps37Wuu
zI1X{UDiWO-)2GI0cCEFz!fpn3?EOKk_BRP7sixXG^P$?kUlZ>!+7AO|hmB%JW6R}C
zxqMi|O@H{}*X5G1qzw#fC_56(T$+~TYmNw6IHqJB<-a?{;IIv?mS0uK=NP-obt=A0
zK2nVmnkN7Ja)dXjxRg2K<W9-+21{q>svzL@J-ag2mF*GM-bbLMvPHRL7TlsxVjXj0
zSY`^IMG{}o9+xz6s`FMI>)7006zfk=C^0_+=e}$}?4OvgPI)R8Me>FV6iK6T`N_YF
z<Qyy~5*^|S0w;>f#j#XtFn$&?aUN(!hN|Wb1{BG77OCJNO&2QFva8h|s71w0=i5%R
z=u%sXwk5|_TE>@hzCP5Pz#^=5i!ZY=rTnr!h*zJ$TjaDHq<hLX-TZ7+;e1`v|9CUm
zid9Dh#+lK<I~49_1Ovitq>V@@N1K%rDsXwMO-LN(^DTc>hwL3GeRLP@CXcJhBU!Te
zqAfD{EulQShs8>}WMQ`RT^(vIr?!Lq*u0cq{o2*Boi4kMIpD8q2`3j%<b(V+nqOlE
ze2P;m>!D~%a5lNS<wU=_ME7W>4%U##m0yaj_c>Vo>lUXSGoXFtrs;3XSww}$uKeo#
z0x1BA?2Fs<L&jsMdE28%w;BJsJ}yw8J(#TWrJnK{4mDW^5}LH%yDI|>ZnI9};>rL&
zzjaItm#+H#N`Fz%#!PU-M+UBQbEV--;t~N~4n0Vi{v(u()V%jCS9k=b|0dO`X&>^z
z@2E{AlM)Qqelyk!mB{d|au!Wi1=}jsbm2G_`FR%An~?a5(pZjFlOY|ikVI3Y9iDoV
zVK&z4BnjW0m_pYP5(`J^70_--Klv*JNd0&MiWWXhqV>=V&VZLjiQ$=y`~M1pXDz;3
zmMk!s_$yYE(*?9}m2vyCT392<6|rw&o=lZ`;`CN@Btkh%kUY08u;?>&xGKN#bm?<I
zNfPi-qt9rjx3IQM-{;V1&uunu?;W=n&XE#^J83r;pU?H8xvAaST&+x9H3`s0OU8X6
zxbPQSd4!FGIVH)`$uEjl&QSZX2hbL7K;xKhpp(AQ@=?Aoj1ze3^4DM`zOcT<8GI_e
z=f3)Wum06D&KV^}GXV;>01hs0us^#F8VK&!MT_ef{9w32tnSnE06q`TG1&aI*U+a3
zxDX8X*kWLLPpuUBgP_m@H_WEdL7yvVl1*bLDAScnBhnFXj|x}#w2{>t{v4Qzt&1$_
z>^Bh=31mMz+1CU6P9?U3g_lzI|6d@rPwA#A<>|=$Gi+gY^rjB>WLxLquC#6Y1xrVl
z%^AG`h@S~=eRw(r<2A3Lf4=Q}Xo(5_+`K`Z1nw1jK8Hj#Z!v$q8`OS2#~?%Y-Jatg
z)sz4xqrb)`6B|rq1+(JQc<x)Ex#2snTwa*B{3`qFHrFS5HEV;42xrGlvM1h@%qAbf
zwB1+mB!OSWICuS`>ee5=UH9rkPA|E>?n&$4H%Qx@SF953`u+O5WC!_6j{STVMtdE^
z*>=}M>vk|({o{}sAAsgCms|f4fGq}o{yPSTKR>|X05UL=02qY~d^Sr5Y}ep0@V2gW
zdI<oq#sE@!z&Mp!CuSJ<0`!Drn#52YQYacZ3q57O2KBAh%l?<IG`xqu<1;tBWM$D{
z?Dr)Q@L})A<1Bp1y{G=#+>f{4=UoFHzs$?`P<0^;e-Rnq4~2Li1zt+XsDCQ-moD^$
zoBDpi@RPm8m1lXWh@t*DI6$q?Pkj$pbB<2C|C=sLpuUX1;T*1UKb>jtH?#ggi#>lU
z7hIbLIy;$f4(36Q{Q*D8aGf>iTyNFfF@inK1HCbDePrnT8q@*`gM%=FLT+)w1n44M
z)S_fUq6>p!p*Zp8B$)kJ1_A+Z3Vq(nz(a-2L$eD53(fss5r)dlg(??@{x&yIy$vle
z56d$*z^K$r-2&5{g{aL~?@ItcWR88W!u4mua!nB+6~RgW0jX0O5i>3k2#~tq5-|w<
zj&bIL{Rsdj2K-fv+;NHAGuQvg02uDqLgfJrOY^q}OOBFxYt2OVs72lEeP6{;%-oJj
zVvKwcFuQfpJrjWVN`({WMqyxDqGIYHZbjDIMBp<)2;WCj-b9}7y}o3TBXEu0zJa{B
ziKa`kdxB~L(IBV>(TuWo^qNNK^D)o)kS~%kZyJAa%Niq!)?(7pI=wN%nvU=HjVZ|E
z-bu&W)Wp6Si1g2oqZ^1E4~EBl&5sdtja7JW@!BF@W<XBKB1)arQrE&uncPb4Jw$)N
z^3yzox=7W~!rcth+GgOrv8;C*8U&XIKy1!(X_i>`9e`CC6%}BEPUeXT@o4`A@ScZY
zLOcuVJe$>_6_Sbey+~g3F^~aEKZ~fu5Q|{)xUdk5$VRUKOvG1^B;`sHSY(!j8I#iZ
zJ<T<_uO0gJMKa-hvXgAG{->l6%oGQFs7_t7lts$>o8)F$^o;i=H3P9ZNyhn_sh(>o
z+-RwzA<1k~sgoAiRYiIO`>CCGNDZ1_nq1RB(a8slX&ad6ovykwuIUg+T4!zAQAqOY
z{Ff2(j08w}x;^0kds~bym~mo|e)ArExd?sUAK<!gh|x}r#fEb@pZPb$os=Spj4n&+
z6+*T4a_<nJxJLw-F<tK7+Od*eyJlwt((u{hIV!WYHe+MvNkGM>ThPdVKq{L)*gwNU
z89;aN?#P9ZIuskWZ}8L*@gI+HZZ0Ct5FlR+losTZWg``W<_R0*rA23(8|3_W7bg@Q
zk`ATE0%Lra;}<wENfW>^S|C@&&my{irJJ0i%UAG6xu9SIdF&ENyIAYh0g0ttK}sRA
zou!t!+jlPt954l?ia}xo#d`;={HYg3<2*$$2Q;bV0?n#|<R*9#BHLaggBF10?w*{V
znhZ+UqWW%MRC-@X99`($RLCn<(o9;w<x>(<T*3e@IG-)f6SS>h1O2|IddpKtSXsQz
zoXvnm*uGHIS&Y;?=*cNpHb4OyN~Y#BD9UDIO`<Sc#saMh(g@)ff7Z<MXfoTq$KF4{
zOLRdR4~3LjmKTHu7Fi<CTPD;Mo1cebU%KI4%OSxRAgx#x4{SkCT1efNalM0;P0&#K
zV5HFlz~830AWJi3N^DeiJalX%OzoIOEpu9I?3X3DuiSwfZ0XzgxYJlAvj>QCl<B!m
zc)TU0?-qfSLn(J`)vOO#?DDvrB|t{^WM+8_i9@VULvS4FFre&E3ieP9&QK8E5Rkw<
zo5-q`<S>-<0Z9H(eZ*QO?p_-Rt)=Iwoo%f7Q(3*DRn3i^<A7gnw^);RRx^WNoAjwp
z=dk?izJ<#nrrRRO<FKBGqQ*I_4pLZ0-Cjp=P*=v+a5!B}2x#Qds_g{S?=ASvZ&d}$
z*UO<d_)zK*wl`iR(^rx?mm(I%B~H|oIM5Q)J9TiKJFFoEhTM=70@P#>DmOb2E`Mlx
zxeFuXsqa3-_!WkY&eJ>qbM&oL;D2bwKyT<fK(3Z=iTb2CD&LYLRMrk@>1NMaNdj&h
zwvdojmXEh|r^vmuZ`~V0JFwC_lCQ_iB+X@j0}|`o9v9mXp&VCMKp%43d1DKGJ52Po
z_oG<5BN{HqBkfIbEsLxi)+6rtZM)|S+-vQ+UiLadu?{q!4&N8JBiPMv9Zl$(+o=oR
z)0d{YY%8!f<8dz0Bs(TDg}){cMtaSmnF#AVsqBzj?6{7lCn?3_rLuSd>gKY>lBDVs
zJ;FV8>AEm#XRYiyweL>I?_^HyVlwDC0r#YQ$Cu-XKEX!TTf#K}S)zUEJiq&H=7DRW
zW2s8gSLxhFF4X<%Yq$Dix0`7fK1Vm_S?{`7UxgHbF;y9u3em^ufqx>Hq)g?Y@5deP
zbL8mB7w>sXH?S(!U-N=6HJneUSu~6T-W4ZI5X6xf!hxKeij#3<Mc>iOq|I0&j8i6T
zZJ{<KXxvA`Ht2fPeINhLs}x$4I*?=Cod+T;0P&kPqxUrTwLKC>S$qAJN3G_-X`r$Z
zB<ML08W>(03b!_pav1qbIQU+9q{@AmGkW-?;PCd+uzvVxMd>JWDeDdhXQSE1#d)kh
zd#JPo`8pMJuVd>%I-Dvoy39fE_Bc8wOmZ>IGo*vYaW>Y8KYp-7GLgzZS&EL~L4+C6
zd#3Y^7>8}iqhN1slm@Zug<-zrWJOaPVZ!MnX7OPi!Ne)!#Ir#QsGN8+F|nqc1Cq&=
z0uJdMaJ}Qi6Bg;eL7&p8{bSb&ANwVZ_N+0rWj_^r<l8DV8T@HnZt{;g-SkW)KnnlA
z9-%G@$N&IZo9@MjYCK_CN5~z4vK-Q^dYxun(q{Ag{4}(h++R+;jh#qWo~<mJav<n&
zOPdRAnG25)^wq`kKTZmHoN?_&isp>fc_NDwQBE95E(#G&(Z$LdnNN6p19`tNl*gAQ
z0(l?4P+haIC_G#qq3G^7kqv`-6zNrZdIsX?!JeS8X)zSq3p+9M2d0a=^U0ZMZf(l~
z1<NKQ$NXi-#uGUFTf&Ra{!1P6vvZzbr_0{8C@yz<4s?jbcj?YKdYUfirerLSsoX8I
zUoJt>Rs}%)%ervYD;u6!Me{>yuZH8<w1m|o!j%xFwS~@}zfWpttz-KU799AA(K&#g
zjg{D5z-AfargQ?OCUaThnu%J%&0PNJf%(BK1bb~=-E{p;(z;^fdPe8QPqYoX`Fxhv
zuXraL1wS_4d3|LYP2q_&;TKK&AZqf)Hjdu*`zNntW}5FJqv;a3MzVUTpY@^zaJk+p
z8Glr&7gRD<RH|1=cQ^gI{d}=KO0tdPwuS#~V*s{=F|)lQzf)+sla0Nb!nj-EzC9Yh
zeU6Q;eWGLAx@#-83nSS9E1~;Fe)~n!W?t@TB+6&4q~$GY6d|%7XX_oLq*4ai`wRq_
zE&qEi688}Wdj&laS5>j;rE1FnsA12Sabl=vD(Y-+QVm#6(@J}+x_t;BZr(g~Kh!3f
z;EtHOCy5VIJ8T0SBJYNE=uJmZY4%29_ea_fo{Z!+kN315726({MIM(P9qL~n{l-7W
z;XlSW9vT_dSi{BM;Bwd+eOa_}yl|qv|BQ9$<!~H%u!B1~I(l4lbgcdEv|Ra=${BHf
z|Ky40)D`tCkM8WH^ck_y+04<YaDXt@DJID7hp!q2?0E!t=ZpyHeD`svSxKCv0+ZYR
zoSpvye+r9n43h=V@s-jy)XYgX;KfMpG;y6~r|Q12o!}+*IOf_MT<A)Y*0m(;+yB`t
z{SOc=F1J2xwg1-rpMH+2;iDLx;XlLbe~v9O;HLj$mi|vaCyj!NH~k;8bc``D^Zy2-
zh;n!{qMx&fE@J-AusV>17um`yJR<U+evWt0Kf`K&L)6gN^o-1`Y<F-{KEf>JN)5|F
z0MXyMK8D4Ja(F>4p=DKTTYE(w5v;MduirndV|ZlLqif*L<djkA*xdYr^~Chb>Kgm(
z;@0-><@No8LrT<^owM`Uy`$@!!=a1&hw8u2@U`A^N*Nwp5ikbP0ewP6W|t2-iCn77
zKBAv<LH~8BpFmL}oDN=VaU@e^g6s2AMUc`00Yuek)du5wF7ifF7?*032UN&LGsM)o
zk7S+n#&cvOGC2l`zmDW8JIrV;)L3Q|e5rn}F|RG5Db?y~WdLNB&R3gH7V8fETMpmM
zUv?!ZorAf+8D%W^5#{i;o4_ONhDt+Y-;ac%!wnAk-DIRf=?a?oTTSu2R(wD2vbIJt
zCEE6m{w;^gL%9Aehf{tdvi_$Wj$ZY0Wo3j?($=fS9eeiCUH@#opPF>mS-A1CbBI?o
z!%N7md1tEHsumXyc5^Dzm~x5RDy($A-JhbrN+|OF`e@V9sST&~@d0Z;tb2^M;@SG<
znwbtR1UDpF17o1|s{4YF)Yf>>`B>Ip<CVW%4`5Q8Q}8GI<q{e=Y`?c2oB$>Z4`#@h
z2@Yw`EZhkDUU?f9#xv9J7v4H<z8T5CCPNe@rnI^F{^JYTbzdnaiy=tmUg1_O1J6ED
zoT?su9=p=FB2#M_+kHj~^~jj*L=!pud=}$`yX~Z`+@hTXYu}BX6t&*FfmA1Pivnhs
zouaLDsXJB{5LoWdZsx}q6a!ho7lnl?5mL!W$cn0#`*~0r0NU%AUs&R=(*xNK3b%da
z{waqGrWO^~H7RqI{t*09T0UcmRaVy;eE0#j<F?KOMET##;cP-;@QPMF7qGe~#+h{u
zpOQQ$?TmOBr!T5G?3iZROMU~i5m_Q#zmgoL-*m8JSO$C5Ny$yKEjP~9vNrF2N_}@S
zRPpQi*-E+<nOUQ<<L7WnWhY2o9^8)iq29jRiB9L-lhjxk9Y*PR<WL(PNcFAn)sPQQ
z4^vy<k3k2Nr3+{7E>KV}uZnv0h@C*H<1eAhqd))=ytI0pq1yVb`NvnwX#Mhdvo({}
zw^TpvR8*GR2h|r7YG>X!<1Ee^=(GQ_F-i2~ThQVculZy35dUjYps!_q$>{@j{j%12
z8vkn6UD{t&@Mosmwfh$*bL+wEtuBkP8pjQW;S$d`TS02JjqrIWJnwD?^=R2uHp5P|
zX$cb4dA<K7KHY7ulzIF9Ftv}%{UAri)?K-J)9da;`ufEExP6u3@hpopYVy3xj;-lp
zohRxMG$wHxaW$!JM|jh~EC#+=+&l?8S^L~Aa=abu)Vja#So6GkY<JbVaIW(9!}QiH
zeC$bSw*oHmD3J_*R*wQ;*?>`Wf`G1p?I`)iK73Z0$Q{6sP+5E5S)vRMuHcWBsywDt
zN11O$1*-5v@yQvkpqQV{!-<Wo130<^uwS8dku4Ynf)M3!6(0$|efyw-z4bOPjBW*t
zb3I9p4Mr@wL?*%W5c{k!iI~Ff-YM}=)GQ+soG&fnaD!+%ttBJlRsjf4=sAzcRuK7^
z2K4QTafJ0_809svPhiJ1@}e+@`qa12WzQkXaQ~I?Ge&<Y#vdww4hB_R%}7Z$Le_AG
zpjWiyaWb~XF>#L}jI}-k3M(eD^Lx3>`bcut!9U_SS+{wWLIz_B|B#njn@a1=hieS}
zcvWK($Z7XJS_jQIu~{{k+XpyoKyLzVW66IF_ZdEqw@%tO-$Bd3RJ51jeKA=2U8Ec{
z%-YhCddVYzzm0qZ5+0j6^OpJD1Z#wS(?;r1X`ql}{iq9#ae6kmKxDCK)N}B6#&h#4
zG33EMAHuf~G?BuWM8)Hu-qd74JXj>zStmj)tKiu$o*1Nf<pv{uyp5-MDrA>n`=c3C
zliMK7D(7DGCmyRhk4uC}!FX^u>CY9-t*Wkwom*h4uXu(qwg2Z2z^Tk^!@_iy;x8lM
zss3Z9A|vx+hB&P0*D~)2Rm<4$%CSO9E!EI<JpI+%Lj5WQjY^@1*^0vlbp=Y&Wx+=5
zug33Zx;^E~y)xM~Ex_tAI0pbQPN@On!eS@IO=YlRsS)YWT;~hqa;AOu`lWj+96m9i
zeqp%Dz$eXJjhm{ZWnyDKSotW^ZgnQfvAK;F!<61PmB^Q6%?e>uv-!WmOL1as?817N
zkSyw(ZF1~fQI=+JUNE?o**LtmBAed`tLuWZa#2FD$##)IO`XvvPHh0q5RJbEbH@?C
z3b3_(==qzQ$xnYhT`UJ?IrAUra_cRm{QkSb)OtaJ?fK!m{^D9<GpfjG=5xww0G5U_
z3Rk5B-cbQcMLp~nPM??B%<6&wSv&ulBq`tUI<C55=WAqe5Tc*MW%8nvyRp*O&>jG6
zxb5MI{2gwlut~9a+be+fd+^8bCe6cbACDBclqF|_BuoMcjpfZS0H1;pJrUJVAUjsK
z!(?1R6S(c^6IZ~2#grq^qmEmKT{mp1tm?{ZntuWvqWaBi6*w{+z@9WOjLB~nII5w?
zn+7-C9X!$;VS`?#znn0mhieYA;9tQrslV(Ea8QghD_>=kPnh>92#&Eru5urg_j|1=
z{xFPR<^LVG=nbcsqQ}23yi`8uDis`MRK6}g9k=WnrkKo1uT{6yCDYAWK(3m3N9}?`
zW(ZG4?s!p075qeMN~?`L@QsfOdQ57ud5=7iP)AvqMr!ln0cn1QkFp_x)WI8uwElv>
z@s$2#>V|E3L9bq8!Db1!U3=jI7rVukvc#QTXjN;z9+t&<mIM%HM=jtgdE`9ulg?Ya
z?ge!HJhm?sYX*J_t3+WEJq%^u-dG(1^r;^^<bqSzNbzI`qJI2{F3{Ol40P#deEtC`
z6=vZqa2?_P;h4EawIsCbI*bh$b<9LxeklSU7~|x*_`*!hEHC|cB3jhRCum7karJ7_
zj_@az2_lDCFFVV8cKs=cdRS8WZVLU!uf)e@GE-Wo#gF$Ybc;_XE@QA2{bBG+p^EN*
zfhaAi0{Qb<5T5S_>DX;Ad~GPe&!Z@u^{z$h`2srDyu&|sH|mbKdy3bxC;j>UPs;OE
z;pdhE_0tGl)o0WSvlg5}{^GgIk(<};E#yvkiYOdwf7{f-XF;DIHz?t^{hwPeV%xyk
zCB^`t4EU<x^V5Mg{C;k%^``#A6WgVijo^u9fCvB_$B>D%+NO0I#P^IF_km$oed9hu
zs@cAomH}9}@mTUL6n?e4_Dn_qcy{J{sDF3d2L!kfoF_6MLordII!q8S-fu9?AMn5#
z7{Pl9_wb1YFkZOe(IS2^=6IAE_|%1%xb29clqbiWFW0Rv51HQ^s3&mEgSf}wP}vv7
z!PiU~8x0?zk^t~5&>{`+JIM4y?(p+907Mz_tVp<vz4pBZ`#)y-o3#VP`oD{leUXCV
zsy5(#D@5)A2l(xXNWTm?It#eR4>UgWi>(VdZYMB@`t7J=C<s`7m+^NBBEZ)`vSh)t
zZa_9^u(U7yqHFH`lLf<1z{<7ZTUP*<HyNH!FtTl-wLO_{AWx7qH2AxH(87(s8%t1>
z3sy7+UaSTjIqWt>q9KTMB8WjbbjLnaS_)XiVjCgwH3$Q@QUkZ@7Ac;^K7a)okQJh*
z5!AdJf}a=!om0s%$AZb=5|g>tYS?!)5Gc-l%hJH%JqusV1Q_u|44C_2eF30UdL!Wj
zl;i$6vuN%R5w0A;e-<X>976e;*s1{M%pAGj#VNBP+*pj{Z!nIwx%-+xREa<&kr?2F
z3}Ow5;^Ya`?1$6`LvWQNL97sT*$@N@#U;l88Uk-zqASOvUsp!a7ll6?up!8GIS)io
z8A6y8O_T-UV8!N2LgpEW-q66yH;R5YA5(Jcc5xePBNjzW5F@#dG0o!2loW@f`SuwK
zH>A@9Yq7-gL1HCkWA@wG-tNaiGUHhR(R%OEiIVUQ*J6$L(GB*IB$5(r0SRA<kTQMa
zY+2E*=8+UN6F<5BWOW6y7bV&w99D2V;`ZXrcsy7(!BZMSnFRG|j6E8URSnS(V2O*^
zhx)wtcNjo+N=lF~io#~KdBVVVe4q5k6v{3Jh0a61ktdOXq2Q2Y2D*fj5OmWJd^3yW
za>f+a@q}7gbbE5#yrRVB5G2>Tl=gu{y1m3S^4NJY<l>N2JLS}UK#FD~l-o7wk1Klp
zKrAUZ;e%!pMPr&}QPOo`it1(3JNwkFfiz{=WEIWWDGQ{D`Sf4&$%pOnS?}R`mq};~
z78!2iY0dP&wf8@tWRY4iGu`R@Q{KCuH~vBwL^>+U1Y#u}WX6ol+xp5P8!BfIYoQZp
z;mo)?P`V*wpJm02hn4+J+jHgK&_u4S%<#wr1grmJmP!Etc;<xUgTdtF?r-EQZ^m<i
zB?-D@BW^K~VfeXjJkB(~a|p9C+M&53F@#EPXp##uOwlP<FS422b4&Shm755p*^*U5
zkqtu8)h*F9*<`7FvN+|48QIV*<gAP=l>}aA+XbhYDHr^z%r_m+PgEt0+0XIfNAuD`
z2g{-P4$6v66vo}<yf(^n4%OlMlJCBg#{ntq`c~vINBA|l$V{#vP796)v6K_*$WznA
zOcg{A6GSU$lH>O&lFKjR8ZRE&DJnB3vZwIRkwa^sK(Am!`;8_4B@4m}Egfts9d0TG
zo|Uv~6(1>=)?N|e93+puFXAyPHg+SPy^jvUFP+RU!Fvf<!D86BN9!6)S{5t`p)b1~
zFXxLZUz93WQT=qafOgn~JXI`zi&ZhkT=6=tV)J{2=2gX_U>VYoILad6p&0q;ULM2B
z5e-|4D2xCv1(`rzft1~8DYQUts**emnKDITKJ+8K_HWZ%2M~7UzH-&(<Zry!Rs4Wz
zN``9HzrPbGs<<d|`4$z$^ChvytJlt|PZ>;BwO(Tm{$fj!#!!aq$v*JF2k-#)fb~Bb
z8Y#6}Fb#F9S`2(IB>Wn)ni{JHkMHhv<|%cSRvsG^b?#ePEC+SgTYf5G*&>%U+9&}e
z%Jsis?~Jr%MBD3W+3J%}>i_K5eQ|$hC{_ocs8g1gHKc1;lx-*@Zt#?E%u&S-EJ=h8
z$%n&|BOerFu%T)4t{Fp(-Vcf?53#}WN?}4xO5{x(FokICl)NydghOckgJLo^jI<GU
z<J8m^R{vrfrh?x590&WI()6OX34gYU{JKe!6~>&>OlZ)I8q`db*9<Ib!I_4E_FE>{
zo3CEfg}@}{*saH5s;Gz~o%XF_xc~=2$z?zrCNbJlA-wgePX&#qW;w-Yrn=$c0R}c`
z+csu<W{<%&Zbuge-ofn3$v!+$!miQ35FN!6fJBjn6JomBOa0nXVQuI?J6<X%BMG-r
zyyd2$awUbdH?em%AGY@=bwDLL+cf#dO%U_ycBAT!t@)06luoRs_TJpC8`-Wej-9_s
zIw6alo<rW%FzMQ}_K=Y7_r~3c+8yrxJ)f<6UT$`M=J499m&l~=HdHYDQYxwA(R)?j
zV=&zNTBY53tJ8j1-(px?^#}w613Z@cydL`y5EL<~_SfkTL=3BSq=c8)T#rC+t&pYU
zKeLB(vX)erHS`yL9l*l&jy+;ermCRRmdv1nS7w1Ea~`X(-Ng%zs*5<pOLS_K7Y1rC
z23PS1PW`J<&->pQ3^n=<p=1rcZ6CVZ8d9(tfDKk-Vh;+j4@znel`Va&Il}2I73@~1
zReX?|ZpLe;LY{n7nJ>j#1R*agsIGG0tv@1drmAjJ;q4wF?Nhx!1mPVoA)N}Vom=Bx
z4kKNMtNqo%y=z8#SW<gZz=d-VkA+u_aEzdfe4Nn10djsrZoxrKL&Ed?Mo@-B6oEu?
z%txArL+*)0DWXmtfkSJ9^fFET)f0$O7l~Pyll8cNRzaG38N{xL#5uyrI|6zqg2b=L
z#aEMyc|49y{h?=kd}@61@M{ZhTr1%SJXR(RovrwTn;gEoNB@6@)d7gwkpDpXh8t+S
za{F+)=*{%cVXqW`WHS5ApwwHr5%KRheR{*(hMqG<AQ@i#Sxt^15|vrA<C*l_SqbYb
zyP+A=z^*8Ux!97PuL@y-x+ab-Z$ojK{Eub5mK#iL-nc%^-6B@iPV+(9^Yw4%sW=ug
zM&{eM=cgqXN{8m+cITkv^U$t^b*qKqu!Rv7a)0Ab>~f3J1q;t83zJrht{t=G>x-=D
zbBv5jDAr4LYfD8wOZZ0%=(X6xp3O;Vn4)VgOUwUjSiPAhd_=eWCx6LjvcJ_2FojSh
z?U%Wk7whc-f`V|<jWAG3#PXR9_TLdx$!6ROPWuBK3REz_J&^ZFF|$F03)PGN$VPid
zsCSKLZ2@g5!f=&Er+gT;Ml!$l&1XHlLz2>KfD~(SGJ*oV+=`wHXYbequbdq1Y_*zi
z{n}tXR%(@Ba+71Unf7i2cV;7~WAom<ZwkC={bDoe_lEJ4#yVmakhc|YxH^BhLi~&)
zQ*I)zM@I47O#Qq?C;Dm1=96UlhIYt?Q~qXg`_`q%&Lm*FoN+tu^(JF0C*LTpCe8MI
z1g7ruqA2dp?eR|dmz{T{Ypazr?uq~QbDoX9@2%JSuC2=pLu|?7%du3;+rOPe-?xyv
zm5_Uu!}nj<?+1K5keA$pyYETa?k9KbOtSBtOYTxN?-P+6kUj1K0}d)$4;Ho#eip5r
z$L%-CBP>(7I=vqKmBXgzL-%LiR$Ex*iEPz#S9hyIpI1Wzm;4a!aZluIjA%ogs9Yya
z{j}{t<BwzFg~pu|Hipq&OHrP&m7WP)$w|FFXRe+-uiiY^N$^+DBG>6Mm-xButhQI1
z%!~C{?c+~zr@wUH6+P?|`M3RSwGg9{SY0_g$@3<&O9^5VCmIVzgmix4PhVf2`y&$K
zc&RKI7rz=WIB21Wc(@(;<(pN=Tm4H0+7C=oL3U3cP%AG}n7|k6mkyB2W8^El{!?GV
z*Jv_r=2G76iu!@D5pgVK&ygS32(z@Wst#e6T3~w^(B2q*xG~Yc`R;vVcq+N~|1(+h
z-+li7RLK9c&;Kt){h#xc|Eog&?|I69D&+s&=POnG4@E_2rT^^n1OBa$Blh|KQdC5R
z96?e4t&smqQU9rs|Fh3WRLK9Ks3E9Twf<;GjZKIOIf9~gbar)j0?=R7)D1b+py432
z(#a`AvIap>7Z>`-28Y*e$CkEtcK7!GtdOj2oLX)n_W9R4NJnS)HWxR~aKQP?Md?aV
zgBO5^O(79MQMm{4xl&~aw7Y`H8f8lRf9Hrflfxyn=I4HIN%{;(7JG>Q$sO`1Wd`fW
zI?4<s3LH}-zpu_8qvdzRQVhB%`10yw5ZgOaM1`CNQ6WF(LsZDAzZ6*3&LAq}WSaG%
z5jW>0n&gIkk(_c_yYuyQe~PIWr#Y8kWLu*ouxjd+HtMUB>A@G3hPb}yR>y7)zx}&I
z3*P*)Ci`Jh6wA6<>!E3(ITHEanMO;)S9kpLrzjdN(pt^wl7JhV!~35{izd9YzpyCz
zm6l=NH#bj&F80Y?A+WbzIwn8189(sv;w(E`pcfPndFZv6SRIo$I-d$?Gu=Wq`qZ1f
zM4R0<h8Kh6;jKm<cXfNS1unGS98V9N3~6xh2LM^7_^hck9XlFL;kYyQ^DdnS`Wdky
zCyo-CvNvgROjaPkVQ!s;*7r6l_?7S1?2zY7s1Y-Jl?I+WcRpcG_!S0^SVYBAaE_qh
z#a?LChisx;UvV#Sljy%k&@DFkHv@{0&&7m!aSO_tjBM&gArT4MZhPCN27$72iN@bl
z@{_VNlXl)(RTXWd`1P<BFx&pYj7W3-5mS)vaZ@yq;e^J<!sOp-v6q#=ki3%}{&iyy
z3Xx(P$kqF1$;tpVD%#JFbYj~s$b3W37Mq*kCL`%K8ed!-y!Lgtv}Q)m%DJM`QU-{8
zb#PeGj`m-Qij1MGTi%qO#{qX5=6jf~9{j}4Nh|a13!t`J)4hy#UaF()r;-=;Lfue;
z6&FK|e+i1f=Elx(lY7IVWOMz9yq)50Z~kd3`!#H#4G_j~W{yIdI?<8FSb8P_iY+?n
za`{A+)J05W^4o~ataPmRr_#~y>itL^hXJN8)C)c8g5lx8^3bCyHJ*~`i{aX-=7eDZ
z+PrEF{=cB1F>O@N8g@yd-ph%{?BN;}+0Uj|lf{yp(^INBM%Q08%xnf{(m9W>JC&jo
ziRN-cZ0aP;v8S&WvTD*M7wx_2`IVezmj{-)x6A%AdBC>*t|p<_{#o<aH*#^ZWTqM2
zpm}$4`v&6Zf4dc{+L{jEf(~WB|CH#AJFv^_z;(}_i*0_tUzQuWc2HWe;U=Ed*V=ys
zM7$!IG4(U!rfMVdefUs&imY@-ihKI`97dbnEHccm-+#$_!1ctxqbcqgIfI<v{&y{i
z`}uY&(eC+fub|@jev1eq!nim_BqCgv5DR{QcH^1+^`5r-0PLsqe-7^a(0n`QMUTBk
zgJzzKw6YCGbeNylW??&GXWpdBYt&>ek#{YdzVJypT7kLT8!*04QpuWw64^(9l&?Pl
zf>mn-cT5!V2)vcd#Nc=7THeAB@N&?@v%2hhA&3;H60@!ys?kM<WglE_XoO*h{%J~v
zAUH&9gHM<xk{w=WA7npnlo03gf}3vw-)I<(w98P68jC>7<gGmA@7q?<+;e${$3dzH
zffhF3?@?x@#xy4`5%1n0LsW=SUX~g5o6^NZdTZn+U+l$8d%ebw$(4F#V>lodIUbd~
zpG)}!krnuI!ItgM@as%j&ceFtMbXwK^SXJb#*a-e@=^)*fgf@ub8n*kP#8_UisW>$
zCSP|qGq6X^LrvU%;KG(vxHC3}za*>yu>14*>IX(_-7ZtsKm`JQjQ|}~aO$2yf#7W8
z2&QFra<S8F(V8Y93iu2DRcefoh&{yP027#Yw##RqMA(gSr3h$Yro%0cctEvF2dQC*
zsV9X5e}4rB&iEC6g1??nw7!z(+7kQlK`S@1H8yvKZV&x!=pR>xsT|HSG^wthKhW&1
zT#{PWcRWpB(~>a?pl3x)=ZR^_SU)MnTDrd!WPM#wZZDMYk^0I>pk^UZlNnWH3C`ET
zER*sppa2)E7j&q}h5!7FhH<DltuiB9S_=g6;Cy1Ho2jo;BeaXKLOW=hfl1L<SbAFh
ze8j?RKT)gn!`aiiPA2UZ52}pfu{Nfbr|K6JuOeML)Z|>m7}gT2Hs0oVC9Dk`cT=kg
zqdQh%)z<7ukN=%yT4twQf-(I^t*#-<hTb|wZK+qPK6tGRS)oL2jYhnoyR6s&$46)N
zd8XDF9&l`y220+4k=;0T9R3s2XZc9#JIrsd+!-BtMT}Uic@yzJ=Vzw!|3%nau(jE?
zZPp1I++7Nk;$B=@sNzs6xVuxKxLa_C;O-V&f&_PWElzMKh2r^gKhHbgyfWL&uei=@
z-`24fL$+9(sWv|$zOV1?(%<&$(JJr1!@nMHsXA~#P+x52bu_wbI7k)hPnEuI_3m{`
zK@h)NnSk$kT^T-xlYkyNw{iWzUo47~D4`{fKztYMuCilj2&bKKk$-2;tlYW%XL>`*
z@N0a5;HU@>rL79j1uW)D!qE5_)14#NCK<}%Xj@`41U?PUTeh*-c)HnV)7gVVZr?&h
zq<2{F7W!WG2_{P%?G$LaVQH~NB}EdO|N7B9q9IX>KXsHQLX|Vx<n}y0k!6p1f=28o
z8(OAg-kuCz!MMQn1=1c(CQz=wa3Z)5C)Y3=u^^xWiZUR`e|j9J0Lz{#YyLqjB$KN0
zy(QD=XAMM6dG}*l&onRK(&`NXhK5VuOl2jgT$|}|Y~mKXp&h^SyG*QpRrY-HO+Ar6
zLy9q(Zf?og?^4s11Iv#+3tX~4%@S78Ex7v@=XR~?W~J>JG^JK13jG@>y6qWVJp|U@
zxyV2>{GEvkSEXG48f@}9CP%@>c0_+S-yIXV=fT%JIvWZ9$WVEc-4`OUe!vT)&qAiV
z*V$#S^~f{PgUc{`%WGU;2{@odmIZBzpIvLw^L=xOX~kfBf;Z%t{jD0>y0he3LT<vB
zl(L+?tJ^FwR)9SCPIBhS{k8}=QP1)xNB8yK2l19KaW4W2)C%@hi~5EYm@Z4y^|8Jr
z<IdIcMOH*-A8OpV<9D@_g95eyN8zxQJ=MQ0|FNQuH>z=DdvV%?0GAWLnaw@ubNcyo
zu7_w`PcwLPgt~NY22Ht6${29OI(BY<*SHzef5Dz&*}405%5B7pkv+$-6Je-vJDBnK
ztVFZ(K!3`;zisVVwOZ$qipE{f>KbeF`_2=kDUYs)cGk|9oo7-S_Z<u!PY1<1e@jex
zw#j5Yo#gNQ!>#eqqTj)?$liIyIpx*lmBq60r1P3x<FP)&hh?9t^OkDLySB}T`JAZp
zo<akOtX?%_zQIPjOD2BU6G0{u1FwPTAYx322sVfq2LZ&pCL)j*A-X0aSpbqDh$yaw
zsSrdo13)?}B8CCsCsstvO~9vGM9*A>*|mr`i-FwoM7$ir{PIMC5a4rhB9VpXV&X&+
zV4zenp^W(R)+rMUfxvzBz~>hM2fkQ}U_xbtkSc^w&K3B<l`z6N2u~vj;e>@56SSMH
zskaa$4>mUaDMPj%w5J|S4hJ-lqJrc2Uw49StZ;w2h7_UPlnWu=*CD<rF{L;-Pz(Hz
zm=XdGYXV0sfTOO#G1Q@P;-Lvzp`W`#bbUi3ibInYaMR^6sjfozIspS3|GLlb?*h2V
z8{T6ADzC$!C?%zMc%4>w19iAXBOlHL1HcJuP=f)-$+!WX6sE<{CXO|97CwvS3_~Zx
zg@<Ep0EVm>nw$7gQ*j?6yn+>Q^$C#6@noTxzTXLe(o_C}l|uemQI8g)PKu*I>WVA!
z;Q3;D9H<LQPr3Cm;zlD9w;Qk_|1)Sin&@LRS_#`#J{ag0<1zK&*8(%vV9W)=BnT8k
zst`l7MM$#$V?~Ri*$j-g_>GJ+l+OAqD)dLm`Hfv6^jWCG%5{uCY22J>oB$^~Z;CCq
zcD!9&+;~G=QgN&hjWt6FP?CmC4#)DvVrYtUf<jV)q8m^;6q!K1C?Qs2!he&%3{Tj9
z8?Utw{48N0v6#p}oOrgAU~&^1os-xkl0c)L0L@KGFi*1FPjuqc`X-UgD4SH{ob0NQ
zJm#F}m4fE1{aKF&!UhPbDFCRNL0HZrJS0@Kv;ly#WTCC3KPG@Eg%t8Zh&KsIih_Ps
zesETbe$HY<Jg0HNpd>`Wv?Npl6PhYBml~LdpJ$yIlLC%wwye<>gO;Qnn55XTM6_93
z!6ZcM_tSz?(t5t6zki-C?w00qo!Y-|Gh!`Nr{FXzAv6@4F<~t=w&-YtmX5)aKF#U4
zs4cLAlesD(u{;=is387J;>X@1&(vVdR6cm#I_qyJGOeg2>ux_ph9v7sA}eGQf1fk<
z)H;ydDI5JZZEB0~c%Ke<X80c!@>0MuB>VYC)kQ0;X%2o>mdxzV=uL4=6XIN!+mL_~
z>V7ROt}r^Bvk*4iCreE{9PTnA2Xy?3Sc0ki!nl!42S#Yb`A=~3-q_?%Oy-%M<vr%+
zvrFcSAB0GS(J80qDkv7b3d{ev6!O`fPLmc(RZ>9RCQk#G*L)~XEUZw+J^w{&fk8`w
z<5Ge9bwM>rp^-o#N+tZIrEs>Z$mpPG6|LBXt9VYXxXiD}FuRB#pg1q5*Z^K^wppA3
zEYW8wp?Y1CY+Rz}TSA{#65Cm#yI$gqhAic?DgJFz8o*qtBU{RoSL)GOs=Z!XiB|TV
zxlBv8Ow_c@#;;5>yUez;?1x{e>{6kUV!4`4`G=tbJK7?LrF<uyqHnkrKiorprWOw<
z7J3h4r=?cp3Fei?{pgYh%rDX4IE5opD-T*KkGR5t#44n3auag!@zpCI6|z}kJ+=?B
zf`kFT!*C6;NiT=0UI&4YlIXFGRTwaKFLp4x64d+~REQb?i~&$6Ra2)`)55Chm#Z1?
zs+s6eS79}*y4C1O)p!Cyxt3Kd`&DT-*hETdz?d%*?ih8%wb-0;Wh_A4Lp2=PTD6H<
zv!dEi-`YoV02d7HUHJEFNgEy|q_X@n#yV3SFL$-uP2HeyE%~!b_0am6MX2ut-zVD-
zFJTx=f(^U-s$bH8O0W+fY%zXLHau^BYFp-Sz+J1r?cs80E~(K-$JEGLP_OD#>oJ^a
zbca3U+aUP4K|Q<am0Ob^ph@tuL5-=|e6FtkOB4Rv=2IbH)NmtTI4G&?qmGoxn+dYK
zW#c!xAd|9Yy51%Qr-n*cvW+gNg!@yv6vkI6Sd=p>_^eqc5vB}iU7KxuI}GD^)}(O=
zXoMxjEMtd;xAJ1bRApPo%0Q!spSxffi?+%1Tv&5=UzYJ2Gr8MdnYZTJw!iq?@~r@-
zkC!x#$~Kd<N4;$m)dl`JM1C&QtraM1R}yJ|35BKZH%cNpK48MtE#UY;?I9CwH3hB8
zvQ6dn9Rb8`9u^(lW$-_5IvdJ5m(m(J*Ws)|&G6k$(;)cCa4nmi622XX<w*Z%xI@Ob
zg_}o_-p=4cx7#wP^DPrhr@jM256F*i$T5PB*7~X419X#S_SVx<a^)TGN+$+(r^Rrq
zn&(?F`UWn$uhQihN=M4tJfPP{<|@h<rgq)G=&%gwt<CA-J5pUa%W%yjJ;9NBN~b<w
z^1k)BZnVW-&ig(*Jy@V`za4(peNV%8y_X7hAX__o`v~h$J&vzOU9sr~pGGhM5+VO2
zYgPsurandJ4W8{F`!z{=yyXU>T1^YnLt&eMNV~7m^ist<j>$*ug}OLp_yc&bkFp*u
zTA#CP@0}d!T$?=yLYanw8vy(;^sZtq+J-OdOCjT}-9F-@rWB*@R-*<%qb|jxI=!Pd
zh|$lOWAjhPKD-^9G96P28XL_Ud*3?-+Zua?Io|Me{KebxYSVGapz-p&anauKqOI|8
z-BFn52Mqm*dB8;O(}`)12@vl`l%Z0YVv_XXGs;j&kUf#nJ;6~h3CT02)U9EWnPSzi
z8Mr56l#zHNIcPGGb>%vF6W1rRKGhRD6;(TBDLdV6JRKS^ZIL}KgggDnGA#|5Y3!U1
z+?qBwnyL0f&iLfbn89btHfG$>XHA)Ae{s#Azn+ouo!u>+1$EC#uFodR%{rUT@~$#i
z5QteZV3{${*tUt<6JR-3P=B=-{r-UIEJN)gBkFdH>Cr~zbu8kuis>gq6_6nkG>REg
zK^dwd65fUxDMK0kARJqP8P7|ZI4Yc+ftk`qk>(|w5s8^qL6O5NoacpEAVX2K`n<#*
zvy7LbBJz2aK4x_rd9BRzdKJvZ3i9S-A(#win+$nJhEOLjW;ZW+uf0$|1Lj}`*|3bz
zC;{epB-!M#;PeB=>;vh1hT!5c#_}=gs*2#RRg4XL(ya%9ol%TEebW63fx|Y8<5iMV
zeSvcZB<y08<dQ((ZwAJVKFM7h|3f4OQiTMl%Ks(|fDc{AUt1@9TqkDS`1gH2=}FGS
z*Y(4$N!Egm-L8!%I~%`HZB4v6Oy14;SDR+Go3Mz@soYJHoy}3SE&OL&Ew8q)&9|Wb
zTWAGaV-b^N$05=uwLI<67Y1CfGu7S`aw({)DYbK|5UQy;aDFgQ`N+um`9xWBj6*w9
zS=XCGUsc(VkHh#;$#jj~+(F6Go86jG$(D~D1lay^8G=b1{Vj9S*A?)SaNE(F-F<C0
zdS<V4AK*T=7ud8%#EbCyy+>Ms2#-SWI)I%s5n#~%{Q<&jiZ7`$3*yZYp$g3~n9Kf3
zco5OF?==F>a>&YI<Sg-yDP!b}uRMscIuQSR5Rtp@>;0<1fwSVp510dIb*6JiJ7=A$
zQ}@_mFP~$7)KRm+%VEN!ytQxRsz;-$?9<+d3$aH%KaWSodShvhANr27bC1*6PSU0h
z$1P6wR8Od+lRF*k4-B}DPR!2<j}{G%#WhZ|{ZC>GPqTlY6z!h=jyh#xIlFstN-CPy
zd(U#O+J|TO6hLH&MZ^s{)$bfg5&CdGBXSO%I%D{GetdXhF9&!=P;=}0d#_s+RUzM;
zsbnGhe_hb)0snPD|8HQF$8z&OsYtB^|BH&$S(Fyojq(2IUnL$-W4-@0buy|6H0af!
zfYCc7Cf1LCPn|yr-F*Hvb&3&Mfd82~on7Kkb?)pq|5Vh}8H}To^Uu^NDV|qUTUT!d
zOt1Q9>SU;C=<G@fYexa2<?!y2(SY7T)YR!dJT|{zS2DA*y7ppjadUIx7i#Kc+t@l9
z+u1)m|4n*$eARV&aeFs?`4?H&fC5G*ATNDEN*i1Q(43k;;((p+^3^O^0VL1aHhTtg
z`=ehW1#IXQ<e3KIIefsZgBnqT2?C~FT8lM>X+c8Y58lX47mf>~VI9#c&b%Jak`JKN
zAFAv6kpCj!r=6n6?#E)0#4oF*7hGSGbeh9d_Ad_ypr+IAJhq}wb?TkyYV7gO?N?y;
zyHjtisH%Rsy8nGVylaFu!~Ks*L`NXBn>|OAVwn*~f@WXiIBj>$Z-g2~(q1<n94*pV
zO%}h5<r_Wvfugg&)Kc!!HrT(cv0N_of{CT9v{;{CsoX0StZN5R8a`r+fBV>-qV)Ic
zy~H45x^_<>CL8wmbiF(LiCTN>%>_=o$^6(_4xs#SdDv0#a@wQ#eD5&X<z>n52Y~m?
zFQnQHrj?Nx`n$_te)yyb*(#W#965qSY+@Th7oQe1P{8OwSg;W<3K*U7b<IElqu_{8
z%N!Ii+6pZu2@#lU3W;!NMggPQ>(nHX(pZZ@(a!rE+p&?vDa0}IqJsf(o;3U02_~{Q
z#POdjZu}Di6iRlI<(%Azl8ln9{UKp)*1M^q*^7iJc74r$X|W}odl}pl5`^ilSDb#C
zkj4GIY$iY|K~~_9HNw)L?Z65v+#mpvXYtNPCojR`mfaI#qgYZfs(fIbl-)45kNTI9
zj3_RaEa9>*YB<;{>x6P0#@3xs9#**Q>V#LcifR~sXvb}|h1yX{;Xwy(1&@&GLz!K6
zwI0%VyhUD=+3<#ypNGed>%rV7P1{MfC(Y}mF<<H?7=}%ObH;JLEhg2vLv>hPbf?d7
z@Qv(Muj2e2eQ!@}2jRak%5l2xP%2Uuv<aoet`vdttZt$wLRA<d_lG3C5H0B^eKdKS
zjvtu}S!z64ll2CMxJ|+>hxy1z&slngJlRJ@UglNyQx<qaVN$<Wo-;g90)*ebdaYa+
z`R<9#`;IpvUZ9bqx4iZAVy9;H%v!cZmvhb&%U=}@JMMo(n#L2np8_26SS~wskX(g)
z>sN4Dby#T?erdhjDjMN&vD(+?b4Yg0<f5k8w6S!ZChp@_dn3MWs~$Op-25TTx4Hu<
zn-q~xAK#Gpo*k0e*C*b%roOL7^k{NWng{&bpID{facr5MX?9|9GImGdt%>15-%iDT
ze@4JGCVXbjH|{wV{}dzxnNs8T7`e93GPxRwHkdefVpXHRo=zJ*f3dxMEE9^bHEa_;
z{`>F<J`eFha$hzYw>#e8{Tc_jwDDsKcva@<{jKS3^_5rsia9d{q$_U5e=DFwW|w`v
zKKWAgzDkTHKl_%{stt3j+>ca(2Af~LfH?Oo;00ox*2s#Es@=(VFD3_ZHP1|!JK?rF
z!L05IW`6Q`=7(dtkr3h9L(fG*dZC0v=IH9jA^8g9)tdl~a(Qubq(Ol5vp+=WZ3sdN
z9a#((abMc`fj-fe^GK(NJo-KPesr^H7xdyh#=isoFKW*1Oj1~AsGg#oWbeg*mGfEJ
zOeujp|6I^-ANR2g$d%@XjWOq063cd#eu|4|W-?|I!J)x$I)9q=XOp2&NKpefINnC#
z8SZOs3{66!B<omnbnAU`-QR@C34fkFcUAEFf_uRY$KMtVk{iLH{+=SQz^3_Qu+?G;
zJvAnN_e-&aw5{ZN%0gYJs0@v&jw@OEj@h7iNteo6#`6pZUCWP4+Ax={@3z0qaAiJQ
zj(afjW+^RNB5wD`Q-O6HXub4ucsex!q|b6<bU9u>*`3Idok2R0W+2+RTH?ch^XAdk
z6TWxeoNVzE&L5z$R#iM`h|m2b#+8VpG`KsJT*Fo<n6f`-V>7MN^|nZ3%UVsTgcgJP
zvRGcFR3mw4rcm;-L?JQ%Q_<~!RIXg{Yp)%4EF((3^f)36=m7;Z^>fSmA3VJWMRpI8
zxvH4@atnzvs;RI<Tu)~r``#hljWCMlpMI6<i)cc>aTD8qi=^s`3=4z8$-5cn*u9^j
z8O7FURg1!_qbn55LIf7GKFw9o%34~aRBJQ;m}AeHwY7S$n>vNHQ75WkZ>%}IG~7f9
zf>wmu(J3u2vF$dz9I#jVc}F&KEBX|E>F1>VN-vB0Zxb<6!GS1ADQ<UZyLsX*_=lV9
zYOGcx+rsF{%LZ7$iOn{Q7pKbgSk8a}BK8zv9_l_n9Cfw3-bND2udu6R_;q0(>pBSR
z{l4qhqsdmsb5t(`t2`EsZh;1r<mXS)wH_gU-I=dau2aytuz5w<y*cBgFJZTc7a&ee
z64e<9)Yt$+u6yd`1@XV!M^nDu?iI)kiZGPj@>mdO79XqT{CVWhxV+U5!l{W-klUuD
zZf20j0>>q%hqBeK4<3PkzbsVVQPOh5)M5-tI_=!yLse-|xpVP8yJ(@bMPe&eztq~!
z-JeZ2qk-V(xVxxxrrNDB*TR5IHTa(GwHv)JVI7hl%ijN$)YinNd|mDa96>7HLK8C<
zoX>t7tQfyOH8LP9DmrQ{>gtY>%@|x<C3m2KdK5Fs*9&|(j`#wjC4fHqmIufkTA)JR
zngjLNKkdT}h%UO}W5G}<*&`il59$uAs~U+3J00n?lmXQ%k-|1VoAJ%1PViMla|O^b
z3vH!=xUp<71Nc1+ZM9zArDQP@=#q@KwmT#1T-Rn#f}PZpT>u1Psh;`M-LHexn!2dQ
z&Vr@xH;AK~de~LZ!!+;X;-F%jXENayYl%94Kl8vphx<hb=ykC~zYEDw;*G}^+Zoil
zaaKEV9E$R65Izm;6X`tv==yxmbHR<x9qAC3g|1KZsvl!g$@ouRH1mG4mLzBD$sYmP
zRZ@+4jM=iNFA$=J9zB<yS(4aGWjmRpxXW8XGeUzpr14P*hZNh`$<=)6Dz%-O<LVv2
z<@LY=>5pHqZ>J~Wt;3pU9taQSM~6`O)ArUtOKwzl?9aeO*V$cx=Z;wU??GEe{4jQm
zEs~Av@x1g4!N0BhNShmdqfB_&spLTi<Jm%y*Ojei+wpOfN9&>YU;b0C4IiTW{RRW7
zDo3Yt6_0yO)?Z!2dk<hK!#f0>;dNY9`z3Sq!!Vi89gaggcjl?dnW4{Z$$a}w_b;z`
zAD;(lN+0e4AJc1CW0~0AvCc7(1+sS&zGEWmBirW#VDl+w@>O`}dlcf0x~V@c^8IE(
z2@voj*Ycxu^`nOP(Kh+fFZj_@13ppsM+bf-MwtDfAjgXF=W6o*-@s^-zxcH86_tBT
ztz4|{yJuQv>>PqJ5JGV)aY^dHUjl)i9|PYl5Xhsn>P>+&6M+sFf$AIt8uFqj73rW;
zkZydCjw`+%hls&-P&;w(`{%)C19%n-&#fTAEzn?*>0k#0t`kD&n|MgMddRcyA+FT8
z?hrwgja0-%&yNEv`8OcADG0T88ll!stzgvJX@goj!JbJJ{6SiwK289DQ|NeXXet6b
zox=bnBz2!a3W8$v3#`JtCPD*2f#uh@>4?zs>ac3mO)&<b-8{Szff=C=C>hW}IZ5^5
z0p#mpDIyU);#jqi2xwD8r9fD8LBs?H7F;}XTr0Ai32i{@%S>^k@kGQLByyb^w;7~K
z(j6eG6(w;N-YNd6w>v7^D1vMvlK(RDHwbIfHJY?G>IQ@{MNR)%AO@oZWBWS#!b+2I
zJ$eQp54wpVrin$}&Z8uxly0&Av&6%y9fvCMaA=3(->7qP;&3m<ao6MW<HYy>tK1`=
z@?T0kl7oQfi<nsJpBNztip>dR@{U$i07D=W@P*?G8gaN=45Jovq6jAtT{iJ8j<*&L
z1xiS&kMm@fI!RtIX+S;c`fJh$i9`#WNUIw%8=T-zi^K-cfY?S~Q4&(`n`H9$35F7A
z-}lL!t?}(r$eD}*En4bmMv7kQ5Yev?bJt`{xoARY^y42$>`l^S3<Tph$rS?fCIKx@
zn=D}wFPnyfk|c)t5)!ZoELtQjDG5&6Cyv001~~!D1k!juq`{!6#IHzF-J+qpX{^9>
zN7pob!Bo*5i2(`Hp&Q(;6pD+O<dj8-CuW*4aR#km#*cw?x15ZS-VDR_3>si&g?a`Z
z3lT&+eR<FdK|^wo60%uBG^U+du#W^@;E-H4;~wEqqHm<un`geB$ig|#@^;NSi%H7|
zrC=YV=niBf09i1w1yGR`4-TMT%3-|CVWQ1tk<4Y)$z_ww1u=b5-ABJs0N*K~(+oLI
z<Yc$_W?;Dc6VqaFa^=+l0j-=wgt#VHx9D*B@M%Qe?pY>pSl(-OfZ$M`C1sj7H2)!p
zU+*kmeMnq53||b_^febcgcB&0TEHBTfB3Y(m^femsz8vq@U3EDvQZ)KJ^>|{Svn_%
zs!cveV&1uIfrLc?xo?3JF1hXjuBc*WSYM$O6Pl@H@xWG|l@0+|(mD*cko>GL%0}$l
z5`kiAQR(+0xtOAqC2J%$lE^#EvO$Q#e<%-)DUr~cP~Y7)aR|*=5*R62N-$CS5|=u@
z)V{U_?b5HLsikCJy=V}tRF<hUZ>Xs7pd=Nem<(E)K3A&XUgEx3rhQxX99}$j`zi)E
ze?hTu=>W~Zx$M5MY<38<kE_zKuv{oLFP00dD7AvWv~-nLa^|-57japWWF?1snTdPV
z8~JiXc3~5j<j5^rr%h%2JLn#?5<9&74OazI5)>g&^>CXzM_YmB5gfFH8{!TvG_8iN
z1Mp#HEwojpMo<=8G1le6WcM0_1L)L53GcGRv10WEX4R;BZN$f_%eiU@qV(`%&c;El
z*F_Dy#Yf1)U-%A5z!P4lmsc0B{tab?Qd26T=B@`V=SvQ2ep)8b9j=#plkdk>mnm0q
zt<ZpNYQAz%hn-zxst&Lk*2FPt&~>WcNvW6XX-INve6wEJ-dl^i-B=9u5iqKP$=89?
z-k?g|(f}wM>fE5S5h2@bP61f3F8LDP9N%1qzR~;|v&oRD$(*8LpQ%OWZHtO~1LC@R
zCA&qmx20XYSv#@j<h&_H7u6Yu1sFF6mBHk{hZ!C!1xmf>(j~3;0QTOMM{qZG#J6_S
zH7Os$LeN@?S=&C=wtmiU><?^PENgRK=XtKxzU$GBNNYcUwF`mTGK|`o-@+O}9kkCn
zs^vS#%#j`C;12wPj>3Ts%$<%L5d4u9o+=OjYX(mQ!_V^Jajv15G@Yc<or*@3g!kZ2
zp@1V;C;dw22VF9%5%8yyYD1?wR+6qz@vcZ%B%x8)Q@^g@;x6tHT)uJ=0UoeWI=)Cc
ziP%brL<GJRJ&8<2$kU^C3F01N!JhBe-Tl5jI5|BI13i7~Js@DOHAio|Y%jpL*9_d-
zmfeel_ZlL4TLFE4nfi3(`(Q?WSH69pi~CT}>G67>I;g*jssBi}U&*S!(zkyryZ_xl
zf5m$LwtA$$a<?IHK+bibOm<)~dq8GjAZLAG0WkQCV=!BG(9mo^O?WVLWRNYtI}0Bf
z3Ax8fJtEBJc{k}aG-@<RtTmJg9~xO7!UYXyFb#Lh4r5pi$N3Il#|&Y->M~d#CIyb*
zvJmvx;kAtTw9?}Y>fsIB`HbS@jMEeM;WKxwV9rY8P2&3q@iYfW4-ISel<|!9Tz9|2
zM_=~DU2XNAz6TxJ;U3$0)7SxQ68yar#&284|Bh7g2#&8?YU2<CnB*t0ye2>y6S!>?
z_^bbvcyKZRXkMe6Wdx|H(*`iH+z;Q+pPcKT+}WO-#Gcw<of>{WwO}^Y8!|PKKLzif
z8s46QVNdt7PB*-t?lPOM4w-JxpDyd4ZrGkK#Ga{SoymGXlW#VY8ZwibkDN*9pE28>
ziN>BaV4VfOpMCjblG<Jh730w~nsv}b*HV$wKb|#eb5Y-)4fz<kk~2rCABpdq-QqFl
z-w&`pp0kvl_qPPNM9#an&3_wh@X??58?6uU`ti|t-djHsGC1$xwE&)<vv`R4Dzlid
zI=_Ush(basDi+i97n%+h6Eqi7c%wrj7o)kCj5B1@d0R^>+~Q>BsT7t<B4fk!m#G(*
z{3~LsRT`=oJnHNh$lR7-`mvFbOT2f>u=!=NvK1KB${;~p<LU}?$ujogN^k#4Uf60c
z_G-$|YQp=K`QzArnYCvnt7f=slY6V$rE7<gE7AvRla{OMT)!>|kW2a&zYZgRDHZ<8
zVqd$okK18b7rs%s_cD2G^Ex`V!Kqw78?`2A_xhu6L&CR#y=F*JxlYw?K-2CHP~E^Z
z2<WW?AT&1Fyf-;AH`i)5qUkp|NyZB%HuxUV1XOW_UTpEIZ>2hIiMOLks^ZJ=rS8&i
z6P|DVezi?$ynXM#O_8(hGrUc{u^kH7dHZ7f(-@IPrJ&|o`j_^di<lkQ;m#dkHweCE
zvIaD(Y_)u`tKYs$wY=-#KxqAl|MhXl$zadKW6xEU;QNa<kH=jt<6R%`2=^C=TzW*X
zH=$R1+iV;{5{lsSd->MZC+0<a<O`L1&3(r$?4P{;nUDL~gh&N!ZO_z4EXBxo81T(3
zn|I5a2M$cLc$uogW^9%1bMC~4XMxe|num@uSWTI5@jB1eOo<h4U`KmOIiY8F=45L)
zdcSJwT;oyMQ>^hZ^%h2+sj*oj_2V0<gM{Q`Hv+5@zKB5w_w~owzMO*z;X{>gC!<@K
zE05`G?Jg&kQ|Ik1ot18vC+KbhCx_1{${J5&4<-MeL@pk&qY+_XMn_$YIpe4?92j&E
zoc<shM}PD-0U%u|s?hOX>KqY1rE^4Q;Ey0v`_9ad{?t%ccKav0VLe&QZ<yA}XP0>O
z&ljRT7h-CFf|j~5#`D`7*ZtNQ`qPUA`B(zb1--%VPEzC_W2f`Vq;q2HZ}N^tPt<}x
zB8}!Vqcx+AxryQ)RR6GZT+k^*>z)>1KM6BO7AYFWTJxJ3VZ^DvELHy%Yu{05`76ZP
z(L&oW)D3B&kBo7f_*=|%btHdflvV6P6y&c~V%rfBPP7r}6aKXd_Py#d#HT!T+$Y+n
zJeEH+t;*i#^g5ZSAki^Q@9d^L^=3HaHviX+As8LkcfRLEx9dPa-f1x!{7<yYU4Twv
zog=uFsHmAgxrSfTLHl0k$Nhks^iaordq+ekf8}WO{kU4hWLCwr;r;Bd@Oib{MgF_x
zsyK>?hw`OxaoI;9+Q(|}<KFEZyyLzt@6M_p^XOE(EPgBu^K9Lw;;|eAlvCC@?$vf&
zd%%88qO5rF=A*OuvapkhTcPb;-*>M)4<t5L&})-P*Sfd=_pX)YzR`cS5Aci&-_QPb
z+4^7HY#hcv_5l<(I~<I%4}8JI$oo0`kB-&py%Fy}-0Tt;HTc(Alc#EQ{QPw*<7(2;
z!N0j#au<)#Fk7$Se{r+o;P9m6kCE{x9cyN0A|y97HR~U4)+i^hBEq4xx~8^Hu)MO#
zqM-gCZkDXExjO|4?;jY<?isP`8$xlj&RwHTuxS)G`(}2oVqs--YnyNFSMJ8n;n6YO
z9wPbR<j>{d*?IWI)&0ZN^^LsD#e1lckT3A^==lJYnJW<IoacvpwFxVjWLCLup!z9O
z1P$^A|BrkPD?<#kbENQKO#xK`XGU|n!gst8$S2XcmBHFxm2{0CR~UaRIiOjxL9|}q
z0b$cc>UoM8il1@(bLnF@KeY&t0JDw$f&fn0`Ew9GnD-5B1Mkxs*6~8+vIaceM%QtW
zEU{QsSEBRY%B2!yXg2EG>nVbAbEl0iQvx$D)JNA;Jc{#<LASwVGa{UyY_MG7)PRWK
z<$HWy9nk)iTb0RWktFlsoUB3j&tW&wjwPVu)>V#&i|$xS<S;#7QPVeQk=HbOrkeP7
z`mwA48NC>H>BD(zv-x%kUo-!;Nk1ZfQ)#z4C+iMJXr>JQ-wTS1OH=-b#@nlAUqhrf
z^WfF8Cje`p%NL{aUDA)OYfBY>+)}tvKtrz>gMZRz@tz=RtbVG%W%&jCAjV992^jcw
zJ}Pts1<&Ge*IZ|~oxtTIBA!R7=S3b^YehwMpDmbzUZUOn@+OQa#*b~Lb~D3P;JS(Q
z+m>}x3HkV2y&#eO1>{+XKIQo{h#;;uONzNSc-M3?G_QbLqan02#ZhQ0SM<AocR|MS
z4i0;iZM!CWHpM!pRjkds={=4R7D>O{@OOjx@%7TFV_9*yTAb!ul0z0n2HuhgAY>|+
zlP&hAVoAxou=_~qZzshA+^R0cJ@CYYjY3)6ZfO~}$C%_n#U_Ci!foKXG#XhkkjqqF
z6EidvUK<7oN7T&}e&6R`z$LdQSoz7VSlkxKO<A`!Wpz?g;+=b9cs!<l0{g8+H{9xG
zg@<UnejGZi@1HxghDTFy<8_c$+X}>i_?4hJgfErNdx|V{puLnP`0VlbGIfIeQ|`(%
z=*0zHXWXof0O(+Nw)F5&Vtp&qNRS}$>D#Bv%3Z_ar_2{!GIu;^6LNbw7b9=!2+*b!
zssw*vNsY^Wr+wU17m-tcpV2o{s>d5Q{mf&Pa)I2=OJmy1aiV_FBD>=1y`7Yhn2ck$
zJ?4_ix0-+j_s(yB=>lN!jccFIWc+|Q!Y9{TG4KCZ*9wOi{I9OniNrR=-FNX#4Guma
zdVbLwVBlG#YRf)hcBSNIdHlBICUp3P)Jna_57=7sX{F04!vmqqSy!5h^!vWFNYCFN
z_#Ho77`!C%nwZjj<25s9Nc8=R+&=5a-!%{X_Sc)(D&99FS-;e8#jD1>;U{FOpnHMg
zmq^%UfE;`erTEz;mW89yp80~5|D$Ua;|Bn&(EMraaJW3hLuZQN0WozpS<AXmyjj3(
zi|M?#g9eyq8-YSZy7&^DUa*fu<7$G+D8Fq4otDUMY{KPeykmk{crXYD$+~Ywh{1_9
z8<fGt84PndA@A;)NpINS5cHviol0zyU*x~xMGBltydB9UZ<Md#qumG}!g=aeC;v_$
zr5a=<97S8--6zVmANdBn<*<95F1a-M&XwMu(YX8l&h>dTGj2XHmUikZTGXy=7sC<&
zmmd}XCKeN6=FNr^sHm|U2OZ33`_(=8#PzpeHcuqS`;rWe+x3JXg#wE&gNi#%HP}$r
z2p%=jKAracB<X<y!=E?QI=7^v@E$*bi&rD*m%kxj6fFpnLX#~>`ydk-pD9#a-;$pk
zrz~P@iyAMeJh1=-ZjiGx7w=Qr-eRWh{|OhihL1HgJ?B4*U^m#62yhSH$#fkoda>N4
zMsrQZ18@$P#cs*?x(iMJAkF?-`_lw9JvovCM}|(ET~RTFlqA<Af#dzN{SU`x!aR5k
z)_#h(?_w&y=5f_OQ<_F-NOlPq!b&*s`NHDk{ht+x+fOR*XidLZ6E04j+{bgJCCfs?
zES7&8qM;9;Nf4)CSC1?eDO~a|4c;yl94!5EDLf-XIUDnyp-g&MaiI2vP=(DZyDr`S
z7v(OIN{o!MXNR;yu+93M!@689=(R@d<L5NLon50gZOm%MpX7SxewxqG<`TrOsv+Pb
zTsFGcq2TQrNPVEiXZT{EtLW2gf(n**Y5r4K+jS%g6*hn2I^<2FPoOGbJIl0?rOfq)
z^8tHVRN-CZdJY5rHpJ;dZe_D@qv;t^{zNQ^E_zq;FaE?czaJHH`aiV(wwMo`fEtz~
zPQ15Z>lOZ82w4LQ$UH4V<&+$Y5`0Cv)iw&Q^3<dfl3j42zBUi`-cd3{;)+rP)^pBc
z!Pl{*t~-gNpn>el8@RgHUDRXHU@??^z+<6%gtW)!JBg7AywZMxT98jsI)W_k8dH^g
z+wViHQC@o!mSFH!gxUwwx;0liuAi9U-#0d&AXx?~sD=2#?6wV<+{hJwV#cTGg|mmV
z3{^mc5-p9*m5toUb=JP|w0MT{hqH{BsA8t@8e1r5ON<t2U9c>9hKhCHkbV1tk-=-c
zC*{I29=h;-<URsl_Ec^n4DlS9!)|OP!z4)(X7GcRHY4Ocp32nwwQ5fH`!C8;+S6I<
zb^0=+c#2z{Q|@5llFM6#_R?>&pRwxM->hnCeb=7L$i6JI=f(S21)Npfa<2M1ilaZS
zv0%z}#TGHDWLBoV7;p4bFyq0lmjzNCnkUNTS%GD=B{#bih2A*5ZeJ3#OuqFl05Cu5
z@bl%_>RHrZ^zWVy0{L`?TE&ezCl8gLhaQ~wqRAZua;H8X9}3V<b(wG-&YrVK;}M)H
zz+s7J;AykXnbM|SegCiK)}C8D``6GHgumm!dYY{K&F@tS%M!}cpYn($4jUT8LVRp?
zg<Zg-+(8%V&&~G251PmEkZ3>TaJ&$Y9PXJ>Q9ryn9#oVa-DNVP3X7Fi89rgh&sL2^
zmFrp`>hXunCt_SdqhBwT^S~CHKllQT=yr$=VXq&>KGY9q&{@6DUp>u?Bx>@?_Sp0I
zg=8Fu<GrB!p;oj(^fI#5@#}d+GS)^8&dtE<yko~I_Z8k>F+F!Rztcm4w=_Yw6X>Sc
z@lVY6Rig1n=D%H*zYpGfigUN{#PrV*s%zyJ>n?TR{kPqzZB2~GGk7F3qJzJk-zlqg
zo7;!7cwE{ajJ)>;A<t*3yyc?QUhmmvQH`i&{OvF_-{-cx-wyFU<pw|g8TY@tu<f`T
zj%2<WN0LvndtIHLMk5dVeUSHiL}%DCS5&^?^)E54d~Gbe17m%0!9IuV(uCK((n%6)
z&;7`otnmlv01&@FF+LazevDQ`k782P;{G`nekdg%hqx_W69vnH{}r*HQ@6hmLQEJT
zBI+8@Tj&q24UlfK<8PuBqz*g+_`9PAzT?1oMlFIGlj8(@1yEx$HO>aM3+Kn6Wo!V7
zl|{|SM%2M3;=yKG!4|H;R-j-Iv5C$AG3HsY6E&*T9)gNmp`ck;NQiq=$d83!hEAsp
z0N5MF%|g(FT)}coVDSIoW|Le)A&}72rqJ|-(9G-qW7ldS?7wic|F5o9+;8kKu;~Z{
zU((58yx41Y0ev2Uxi}C8f&$hMk+{TBo8tdu-T%$aBANhi#jSx84rkP|fC<A8h@19P
z3_#2iob1<^T4HfA(HGUxQC89D&`2FX%qa;VT0Z6v0tckP2sDZr?~f@xi&<ihiIk5m
zF^V1ci;XCbEr!PqZN!Fy;)<B!`sCukR&j;Caj=}Y2YJEj^*AUnK4>5=OE$j1I6e>@
zPl!79-;a*Xj!*534?x6c$R;EhCwPMs(z6qyJCO<Yh=epiVi0qpj(lRgQDUH9;^*Q-
zBq#x$Ga&|^=)IAs4oZ5>nMC8pLyCieX_VyVm!wpjWImYmL?J1fDcMyn`JH^MV`#Li
zb{wcC7~2Q{PJx6qLn0O-Q8$nnnv}Rf2sS*~VIx_N!|S{$C7n|ul_udXkrXl*@LF6w
z&n=*!M6HN3poB)PY|+0WMYSr_znVt1R>HqNMWu1yuNg-Lmg3jurre?6*SW9MedF7!
zt<+!QJ2<E~Z0$QLp*T+CJ6WPIJ?Jw_qcHF0vluGBEa9_y^ZwVq_lEWRtrYK_#dmu*
zUYIeNW_6jr_A+%bvX<DhKEBDCr2^z|B2%LW#P3o_uC+bI;D8s`SqS3n*?z#Sb@sV$
z_N*lUZzy|iJ)1};n=}=VJT;rrJ*Ofjr*MxBcPOWOJqPZBjtR(N3BzN(&7oe;;*`YY
z=E^Rr&Eaps7UasSCd&~i1&Q5eqv}@f6L}Q4`Jqhtw2Jw1ilI!mdGhX9@51ufhw@cy
zFx7_K+c$DQ+F*Sy^+Z?9({3rybC=Y(EyxAuYU^Mc-Fj)c7ZSu2{(7Hn$A#%Y>!Czj
z^qsa)#iY<|DOB^IfZx4ncD}$vF$`U@kQ29fzo<wytT^<bh;*oUAG;`Av6z}TR|>ae
z4uKuUl?&0y<vl3QSu8n{$n!Zsh6TA7*EE%2ah3jUEG$zDj~mJ^zx8zHDyy-|E#)$-
zr7h07Ev@4yzH2V~>r$Fi8s4m<*H!9Ud7w8~>RauuKPp*DWmGaz8ZPxu)F*1GrDA2N
zV(qqK3Aa?qI(&)*5@3{KPf|f+Rq5wjX`EAe*g|lEOL;~c$tF-G`=RPe5$!sR?6#$f
zWui*(yb6GahBlmqIgE!*M~aaKrGr8N2he&zHOVBDG#p5tMoj5ZO&L=Stgfb40y3r%
zq3Bssff@pv8VU&r*Ihhtv4(lDMnE@FNUGNOrbhIz=JZ1iTX+q2YOSOaqcmO3i#vkX
z!_{x4a%9sIL|}EnG03`6r#dRU`VppjQl<JHqk6*d`lknV!r`?Bup}e829L!$v*k*Z
zfWR4EPhHwzF4f@RQE5%r_!Zv3rPvr`)L5Bak5ksj5Y`yD-Y9_E^bM~uPzu|h8`o18
z8XArhjt7nOz`-qX3gO0%wZ(DJ0pQC5(wCbv@0znw@>QvpeBG8pkCx)JmZD)m#s{xt
z7>MKsbJ`UEGRnG<<+$&xY^6*#DS^?d!=mRo+VO0whVuxtF~nj5j>MwJHCx}(VqpSW
zeK4rlXg%=Hj2F_{2(i9)D*@|lVS;`z*nHd1*T5+yk6V+PA-dLt;c6-3wsj@-3Xkej
zkM@4n_Gt(bdRFGzl?FX5Q!pi|xf@oW@n{{qZhQKyedrqdYFK>$2t}r;0F~PzS{>(i
z^dNzb9xD_m+i`psj$ZzmC|$IRy3@J8wU@ff^)viQc{nIS8#g^1-?NiPsH@$oOJ1Z?
z=m<zqu0s<MPLFTEsNAVu+%;z2jnx_^ey<5su9QhP;8E@oyY9lG?JgGYrV8sRZ|Z3+
z=++$R7PjMi=@}-cm-kva>|J`U4o~kzfA8IFPXVM)mbN!bzE|6(HyPafwX`=4(WfmP
zZFf}Seb!?q*_Wi%_f-eek|*?A`oN#bj#xy$EN;J|;y{!#=8q%rPtQS1-~J$1^rVqN
ziCAQNAjhDc;$Q^zP%gbev{i9gIUcWGkPlO3RXUCzk87RY@SjQWlbGRp9zZl=xC(zH
ziescqc_h+mBsXFtqIe{IWF#Chl8iqJ<`|7q9u2V?4UHHLDjxNqA8FwsL8Yx|1;@5W
zuu*9%sNTpy#Msfw*kSs}8U6UE^td^EG!QXbls<MvPkvv{@R?)+O=dz(mg!m=d`sUR
z-~6vJnKz|WnFjkf1Sf-(qt*WEdVB~tfCpxxwWp`D$5pYSCtD4sU?63Vbf9?{JB^)k
zZJ7Ek{e<rrrx2gvNgLhs2TK9{aUmHCDTdLT*y(gs;Ogr%lzApic1G8DrU1pwMqEwL
z($Bm&p5#$sROQ7{jHFbqpwX1ER?isKsKC{hq0&{M(I>z$t)Mo4ptgJfSrgFO>Qmbv
zgB;svzp7Aww+A`f)43c|x$(X+TpcxDoeZ9ucRQayBwx6ZUZ7T)6<nSAsK4;Jf&nZ8
z@?fA3j-*QDH3^HHh+weHP(e*!Q&FSSF}!m*_EUKeQw0PwGLcIa46{`#3)>&2bX=!s
zsuwR4mm1ragh!V@gO^EimLD-!)Hzmg<W`)W7H4A@9gG=?7*?lbR>R!@a}1MCn=AdX
z0N{Vly6dm)dZEOPtI_dK8W>g{JTaHNM$g+uFCIqYS8K+Py;e>$$S&K)|Jsk=v;_{x
z3_f@j0v!U;+w-s)191%U@WuiN9&?Gj14t_SFf$9t_yQ>Sa%o=px3&IC@del7Z$5g0
z9mRokV>t|rRfI8{+MXL9TQ;8}Hc7d*7!j?t=36vYDEs}UWTqc>Hh}4ItJ?;M#k75@
zvMm+04PYD&aIKIbTyLaz!zA8TIoW;(rkEevJ}BSD0#hU^OqjgbH8a??Af(7h*^PYO
z97z4&n9wI^>SzEA<iwytS)2IbC=B`EX1sq%L<2B4{>jr*(^LOTBKq(1cUcbka+H8J
zfWo!oU+3>3bg1+9HcH}#vnD+YqyK&WZUw~u9z>1l7aHb?h8~QPh|)TT|8xEh35bhM
z$@GoXO3%x8O2|T;zbB@V=N5>T)!0Wt8yba+YGJJ~AQnYclR#UIL-)WSXG`zsSW?B%
z^YP-ysrdzl5fl^ZKDo%d2I=3}-CN!|IOy2pIZWI+xft3%`#XM2nA`P-{yKE~h7L5$
z2oGonk<j~{MZ<%LnQ83gNhq4YNUjq%aCIJMBooqH|7cIpj4_Jw<1WOi#+=EEOy1;&
zHFm*JTC>$bU?DMkP=<}&E&Y=Jvx&T)e4B5UWH}~_I3k2HmH>rng{nC=49tmKAIrq5
z+ZPo@OXq7{6O!Jf)|W3USZ&oTvVPB5Xmox3BN6Y%wsM2%1@0O&`E(3`eN}+U{s{(m
z1v_8qdDK;GHO4%Jv3{C=vNfE|U^Zv>?OXqN4ns5>!PK8$Lw+B{3`SdW55dLec!m0~
z4SR62^VZJl-MS;pH)x#C`%1iXeQ21}(tG?y7BShVTGT$)vbVh$@;&PygYoK2tugxV
z7w<K<Kd)!2_U6`BJ+8%f#(lmZSG?}I_8Se6&mU4Qp7=82h#T=^27hPrr{-*0=OeJV
zU<xEw5YOSEFbVj~i{TucgF)+19A?X+16l*0rz}i;{gMwJ3DLfOYRV}_sgWC=MQ<sK
zCX2<n9rK3LdOKF0t;7uNBk%rpy!tx{GrPfU>cJ>!i*NMk+CTSk(7wFT@CBMBS?{J;
z6_)I#+BI0SB^zkenWz8Y^Y=9wAQymt;v!%IeEdGgiFo3oSj+y=>oN3Gc7SN<`<x;A
zuur+Z7J#BW$P&<6D30;%er}Ql*8y!B%QUBY7Gp1>I5$ahq(rI!cc!%5<baD0dcb<9
zS~s_ZsA$|)oUV)uI<PH-FR_#>^-RqiBCDO*@P=!6MPMn_6OZl$^=#UAEDejeT=twR
z!Q1xM>%mHUP5B9UQ_ajWWe!P4QJa<T&Ki<VTJ`6K2iqui%3@pZQxR3HfRC(D`#Z{`
z&CXcXm5HuzqDN=J#IIQdUy<KgocH2c+z<3&J4X<AGM%#5FtehY)qH(YB>ihBs4ilB
z7?8tr;VL|Cd?6#gm3J{VbIH>`eukm1Kk|mEjW>()Mw=5WSyU!_@+(tY)YKWiy|cYm
zcTT;eo=g9qd83z+Rx@Fx?xIWiL2bPYTL~3W^G@&C8YzExnEn-a-5Z@>llrqd`s=8T
z_j=t%ZRl!->QkHR*T6#~aWSw9*)?+8@^fbQ&WxFA)@HiPT2oPUfTHvMh+7moVjQeG
zx?BEy=av8}^;F6yf8OD4zqs(^>Y%;$Cybz3tQPjXj;dq&T!htd<Tu9E$^8YqpX<JS
z&QOi)kFfkNyvttUQ!l0Uai$mi+s_vsZrBR=yKiB2<KZ`F0jxgwf5uH-2AvLPy}QB=
zcpTjHsfA|&IA6i3sGTT4+v)(Sg&3@sbw8BGfQwwdGe8T9Nv#}&r6$}-h_)TT17hZS
z2f-ywJ!9n1^TU1F`RY^CS<oRk2iF1-N_$ltC_Z9*^`l<K04NCFnlQ$7h2T7K-wc*N
z3MTykf1@n^LFs)2i&&wnKNr$qGYsOJOPSUAmdte$<zWh>?q7%yN?MOdl+SxMH_&I$
z6pP`c7f8=7*Drap8TE7^kL9Wf{NnZlr7yW36PcX+Tk792rSfJVN*eGxw$0d>H$kj&
zvI??VLd1}f?c`wbau&*P*IY9u&J=S+OLM`*vW0DI$(s;0G?oNtT_BH)tkTPc-$YF#
z1sPwoE4~=uC3f}n^GQt%zqp?w>QuI1N*eUD_`Q+h)f7oV=<ECcpT8@NeM`Og_xbza
z*w2=WjMGo@5Kk<TXn7T9o~cpk{bo^*hDZ<E1<M!MHhu0tw==s@P$R~WT0d&kp)@Lf
z#mq9<MMI8!3c^IZ5wn>@^|7<wZ5PWMx=e!2g!7-Ol-w%f#>QuA6bLvoDN$`|X!iXn
z<V@$3vvF5WzpV?GWB{pkTu$e13Kl<7bG1YaeNtsfWK@jQ{8%(JQZ)9o^ftHji=fe{
zj8Qxh!&0dttTZG6fs@ZqQKmDP8d7y4muW-6t$VKiG(LB>@N44XC$8I4*cG{&oB4s>
zsX)-bB%(5CXrxBLeUewzF(T*!Xt3GNIo2A;Xt{;hVGxG89|*PGS-n@%VOIZA#a4&U
zdF{SLqWx30)V{*5_o{0F6~4(T<4trLUM}BnXoSlwIR+@LME#s-=vCpP2q|0H9gA)r
zLq_s}a=2Fy_{8dA^_4#<6jqPjU6NKGDqTg+mL8Z~T9<iGJ;%Zg4oh8Rj_j*`{F2JN
z9-43dvlHcYTDEepVcBudTj`U6z7D{4f%kGk{XD|g*En1|n?z&*P(0&DA)_vGPp2S9
z?hSlPm+oK3P=E;j=3*GNH!I&)1H-Qy_XS$L6*A|S2KZZW9l5^Vyswd4VVLyus{K-P
zr2;xf(oEPARWEkaW25QkS@|6XmA{n5UtsNUh$Z$?^XVs6w9az+*bnPv9z@pOZxe+q
zw#cwOPaO5M*dx>)wL<@%R&rpTGUzt;vEuo_NyJ{^!J@I}$#d0e{6<;4rDC7VWMmG}
z@wA{%%4kHALuy3>LcZ+Js7hH~fmbTR)Y^So{P;)33xb2RF!xXSeD(4;ZI<$7OD#ox
zpGplgG~S~x&DQ;V9=e`hp}psx3)xMs^2wOenzvr)VJxZM3Oq6k|FNiV(@={&WMie^
zu|yZt5RR%U`7bSLqN++S*a;l;!eLFF7N48ORn+af=T?rQDq-_<)N_4OeXW$AB#yis
z89(|C)C9Y9WJsMNaXr@uAFi_JBF{*Sjg|4i|7JpU?>DK(oBG7Y&Z9oA079*=U2bH^
z<HGN^In<hmG{=4?!R~hiqMJu7RWDMP?{~$=o5x(nE;8@#_hgA$CPI*^e{$&_5b|m*
zQ^{k03Z)+Q)uUTxic~L4bszqFp8kJSm5!aF|I7LN-?6{{QB|5!;k%BddOQP1<A^e<
zYIm_Su13%MZ@m}18L;#{pDLE#;q^hsa=N<6X74tWGVz^ATl+H;*u1SCMlz1%J1$eR
zeWMqhFw-G@<!aw%I9c>_1?hYRi#9wRj3-@s(tE}CSLTD1iDx!b$Ig%;*G0gSxV>8G
zTa8Qki)w6-P1~&7Te=r-{E+T-rZ3B;`H_p`FQJ<OKE9j%MJKb4Kd+u2-TmQ*J#Ysj
zkxTtAb1wFLR>iz&etT0GdvQ1VFiw-0n)sFq`~IdPDM<D)vBbo674pR-SuP?2xqj1f
z@)IB<k=ga7_@qgJ05CzGpS<@obpeE4`U?zT2zL46tLuo$V>rYG*yOss>kklF4-f+e
zri%r>(F%O$8YmA5L=AY#3xTTFr~xlXLp%sYgMM)h(t-r(GzIC&JHHyxHCzaCA`UjW
z24ceh>HXR?1=}qIJ6s1lA%cMd|7FJWln>GP{m=RPJ2U_r*p-e$#Ulpr7W^4pj1?vy
zXgLe^A_lxeVWHOqW?DY19Lmw4P*ON}Y9=%h6qa5bnB<BKwPgx>?;4y2Q7F|46nqu-
z|8e$KQE{z-mTnbJVO6*X3$6*lErbv}Km;d1a1X8t?(R^y7jD7brEu3E!Ciury0v%r
z={~1V-}`Xi{`I)V_#f8z)|~Upy$TDw0X^A=70ZQJH4@ag$u)-r1g9u<G=}3(gj@4R
zl$u9q2Sf}FY8Kr@AgxLUoy2g>Aa)>N#yrx*H&RY5GT1CU(2Zinjd*P@6vh`Nr53eB
z4%urYLYClhCZj~oqt1lD7ji^bn$cJG(cH1o_j^b^J>lQm=pAqjGhYl^Djo&}Ay#V4
zd{qqHWDGtG7Yu_Slc9sEu_WJO$wP4{<ssCIvGr%Mc#t>-Ef7;E7?}*si;2Umj^kv*
z=Eer|QpCsb#^0*O3s_(Yxf6&q#XC;KpPj`^QD90p;mc?x=-4M5#2}NQs7k^Je3iQd
zVQ}IaZ{kOH)X$4}nyHDesuEWw67_{q4dn5Rgp>GGlg90n%<oVv_i?Qkleo^3M#0Gr
zO(;%UxGwI=Y%$4gRmooNDBp*0d?-?$^QN?@rUVJ2gb3pxVIKWNO3hhH%pEYU36!9f
zN@Jf|g4EMD0n<}KNIg9TIIS3|r*{Vy-eDJ~rXhO+nG<Oh!oaFj>>6PxzA7}u9$E{7
zCU-(B_Mu6DbQoKDnGX~(6+GOO4qr^C2}yTH$(Rz(n9<6ZbI({v%~)#6SfRiriwRZJ
z1em$`|JKUfanIaK%|rt`Y!oM;cPf`_asYTe96|x-!j^!}Omi3_B2zZR96KvKJ}XQk
z0U#oLnVNVFGeIdyc+}!WS<hNajUh<R?yJo{Zi>=W%^q{iCT9Z?i+m*wi^WsmCs@j%
zOp_!9W%{}1qV(n<ZgVI|a}R}b{XXPE5(9}mvdV~Z*|l9MKzVY%bA?2JQeiR#C0W{X
zdF@~GgobmS6LLT8<$q_&|EQTC?3DkxIG-CMry?dmcqv5epn#CBph>2nR4!k{GXF(d
zfOgm$rLcfgi-I_;0vWl&Wb?vwmZIX2g7B2W)T=_&d)F^vVV>YZpPRhz+J#r{#pVjd
z-#d$f=L?(AiocT;g@Ou?7V}iiilVfO!<$__mS9xXg>EbeSh5_9V!_3qy(Gz?*e<xZ
zEDhVOq$HBE^tV)romokBSc$b6tUe9o)a;UeUmDI^YED+t+l&>{?9!Z8X3<${5?nU6
zRAOm{uJoe3KN}{d0hkXfFQEfi&zG-h<INrbHbp8j0TouR6?+Q!8%q_l+2vvb6=#$L
zr`naN*%g-WDsL&lH%paC*_9Rpm4HJqLc1!AuFCvf71jtA=5kf`Srz!9m{7DDzomkd
z3Jc`vf(xyFrB+QFj!9+ZLPJ&a8d$?Tg2AZc@*G;D>|4V{ANhhR@<Vlv@q7&lUzSK?
zt=Mv{L^$)5Hbg+wMMx2%YpG!ktfl`}$K?!L<wevPY1H9$)d^gLs*K>NQn{#ygFm)>
z&``wF!g0~@1nY5p{PKWn_~85%2W+B9&{#}lap-InPGE!c$?OpK+p@ExCxNr)C)Z_M
z_Yr4L90Kn{{83P&0uEuICw{OFu5XL8e+z!N6@KJ0PIRerY$<*`6@KCfPBPRvRTLiz
z#mi{H$qIMQImF8g$14!UDe`oNE#sB8aQ!%J3@wG!TCx7LYHEPi_8SvcS~*vb;5AXP
zwH!9JS=Dt=5q9Y~_bB4^jj#<^H4lmY9Kj(RRdgPIz@4;WpFV7!9r-z53Rx6&UOvQK
zUDl8fua=8#Z@g&h2e%uGwo7w#SSxlAt0CIeUE4?3+q+OYO0zrE20HrIJBCp@e_3`o
zg?Hf5cdEYYY%}Pb_UnYLcfQB$YNhLf&NrWrw7<*gI+pJGeb6NZ?2b9Jr>5=%!5eTj
zBN!gBNspY!TXC2ld3e$*IFuSO&uYb1dc<3MM6Cg@p&i1l_$YKCa_PN4LP*}~R`IPk
zy-Y8A4|h^iD*Mpt^y#rwqs&Rmx>P6KNw2k38Mo?7gp(n>#Kg<VjI+eT+R17KW~1w5
zcU1gM$;nZv*jdcUwYBK$N~Jrelc!gScSPk6YA0XL&_G<LyPX;q#qNm5>Zr#-8v~c_
zs=>JQ!DV(}@JdKZnd3|I^mMojMil}O=Y^SZ<cI_;1!Xlmbd|?}?s=`lk<=ev%IQ{f
zj_|a&4X+R1=i}vbjud&JoVo*gb>aP9@WFKWa4Q_Xf;<zAQIAfEjm~%hUc?P|Dm8m1
z5~A7nWC9oh&PS5VMri{ft8ii@&nuvYKhI|Qyp6vbLA+l!77ZU`G(f*AAUyXXzH9|9
zzz46rkVB)82VCMO>Kt+AF=na>->b1*)d|sW6IZPhzmHUDfRiHh$PRTi?x-Fr9)w((
zi1K*6gt~@CTpr&BpZ=JTv2Bvbb4umUBu@1d*W?uUY85Y@{tIO=zYU>)_q2-cWbqb6
zoQ6<Rd5RP|-I_49p^BKH`!<86%mAX9DI1wtT%Vx?&PwT3D(HO@6$fkTL6G6l<E7bI
z<Jkr995LUVobqh%4A;uhXlm!2@o~9n8}N>Le(w>bL1|E$MofllK1FJtdSd>}WBzyG
z+<f*N-s=VGv+>}k`6Z$S&o-1Qu~`?cMH!jJ3o+E7jKxn+vwu4mur?NG&lab{7ARuo
z(?`c&0TvfZmUIgirlgiI4VRwzEPXCpESOos@J4Mu?rR-YXs4MJ0<V~ht@M3dp~yh3
zD(@S{n}>5v@!Kzsu`iQ#E|GC9B>ODu`Yu{iukPf|XSAUXjt=D5Ozyx}lh#+6&Q|O>
z*G{F^D%#L@X%NHv;xo&7i`RH-e(Aq_+J0@@fc{4QvJ+pM9-VRo{0iaxbu0a=qYZUV
zc>tf57i_yCqQ2f8uu7V}dN}&)oBdZxd_`(~Ag#*8kskI*8wzgw21x}k+1iTHi(xjE
zTpkHNK9yAsKjeVmmc-vJDcaxC62HaUhp;`jsN=Ul+|13f-PpM6@m%YFMs-y5yX5p=
zDCkdje%faATEEO#*B&!?byBI?zNk*S@lj%j(sP?Tep{k#+mg20WNq0jYQv(vUH|X8
z!QUODsNEpx<za(mK=meH-!?CNM{sLL7H{`EEt^j!u3r>E0RD%ds2)d^6=&`(SAB{Q
zeEzV%GZAC``^oJqsTEsLeB$RSKo<O|Z}?d85}(Ues`I#43)+7dwG+W4fTa@C)hC#h
znd*s|l^L1*S(&prQ3pNkull&>2BHp!R0Kxa=SJ}x#`OisebHmT6Ld(Zcb!zUu1w@A
z6D;BrM4cVOe9>3GW1|?H(3Y>U;%_!2o&Y^_rZ4sekx@|9lZL?Yw(r&Mwi}+dGe>K`
z$5=5Gyw2pLLl-&$(o^a9h_g`&IzSbG_{%xzk8|>@bL4g?83BM6aZdN_f?iVV|ILp?
z^6tN&&AEUIYfl(A=75v(s0;0;N7i|Jw*4)`5-8~3gklC7hT%VcBu$Q<!BuK3|Ehoe
zNJzBlbqi?W_x1XB+0(173t4ynfr4f)YZt(P<rDVrvS)a3Fe*w65^YB7kVpl^air$t
zruYeF6&16E=9QI)!DJIEYAc|Gl2v@@b*;Gt4NYD4rEPsl-LGr<M<R9Dg)puDS@txC
zFNC3B&8@EeGR7FB?_J!%+Y%q%U96|T^*FykE_*s1?OxwMJbIw+KO5fAF$Eb!IHN{3
zq00J7bq9kP74ic+4KRI)bolB9Q4D22;~;p19_4EChXP21Ej!&V;)eYbwSzzwhWT))
zkfXN3-35wbMy!WR1ojMM6eJMNuICX~qzaNuy>M^t&YO{VN2R|y?3_Jaq*kE**3jAN
zGp2k?iJsy&&X4sUR+Csg|5$4`x?M`#v-5L)XmSiK`B~afwei-=^Ii{>f~E%xAW)P@
zzuh(}h<qnzO6gu>)|&W9pF2&fcc&mjvh;*9ZOc5n;7$7HG>@M)h2>oBa}-p)N4Y=k
zaOP8&*H6;hBp)#-y&5l*`hc_psVhAW8KYTN2y*e&E9k7K?s%$qi+jlGfOj%QW{+F?
z_V|cdGVS7h(y?G`2gQ%}AEtk>9e*L@?<}gal%Af7=y-q_FSF&*P3;X7vANCZIq-Ha
z4CEn3yc_Z)`m7Ah6x}uS@-+HqIr8*Td%29y3mrD!v1wNs$#b<AGt%+pzW6Hp>a#tg
zyzq&+F{*gx#g@!#b>83a-qOOp#$|D`sm0@qrK%;UH_H_;eU=R<NFw^SSP=4smXKNI
zD`+k;)l55unchlbhFRCXAGV&}v+m5I<9@LJEK6@Dbt20OoxRvAz`<}&Dg?j3OD|ku
zu^1A)Nwg1*|IEHuAY(i{R;bH%0CUO4r#}$RPn+F`nH944mh9AN&zDwdvy+uCE`TU1
znkd<<z^z7G9A=#uqT3bU1>_46GKK6`%T*G@Bk=0t=N!i&GuH-Oug99TO6r&O7s~N}
zQTlV){7!0FZxYVefj4*lJUsbvwnS&gbM?aPwC!?Rr>DL3DtxsAkj27_hc<1*>yE|J
zy4uahFE-M1_LlS9k+{X6nuGkZ=)Awjd8K=RGBA91km;A{3mn#3!WVv=4XsNf9KB-0
zaN;@ZOEaOo>{?ba|Gmrccy#aXi5%k5%}Kcr{hYcgTUgFBfowJ?)2Sbof6r>}7C2+;
ze%*YPU=WNqzrd7m95?J!SbnW-9ld_dXV1cZvr?u!I=85EGJ5mbnQ_WGW?Yu|c)jti
zjda}vH0HKtyNZYXdqP2?385Ys@8}j8`ljx7N6H!BZ#&wcqH!mmXtz<jBz(-{P$-pl
zVwWxG@5El+FXI->Vo}0}6KdWG(TPm*V9(%Y7N;4s1X`Z!Lp{9HM+|gwo;Kr-FLho4
zqXbT*VowSGvFv#?e))d;7a6&Pgx2%u?Wfya>L1@PYd`$>i%cjEUC(F!&Di3+CPF3@
zHGS7#b$e`n%|>G}Z!mq%`x1kHK#O(oHAo}|Lf*Kp`C=i8*y${Q`q4lY#31>t2^7ey
zl#?a1Ku&1XL&G1DgI}80tzqxy&fPkTA57j!i;|0V$L52VTK$?qq*`3|@eOIATpzpk
zd6;Gy1Ip6CTX#grR;WRl8u8Oa--|*XAnIW5KXrHZfb&Qi$~^b)zyXn^ZwAY#Xf&tD
zx_cZ~v@dzUGfa88bzoeCA16{6f0y*;!Z11_!uZ*CBaNKGMVx(pz6)pQkcx;}{P;#b
z%R7oUsv_?a@|6m3X%+z=OD+;|__ytKu}8Fb-Y0eE6mYpxFzK$zCb#06`g&PV8GtTR
zhUj-JBSPV(0<x(khJ`PS<VnoG%cjl13(Ykbhh;1;p+41xW>wf@4k97Y-~2@)i2*8h
z6_*)P7A#`B*kBAapTzzAA_;$k_wRNbvjC&7C4qP2K9n=)i;95PtL_s)4qbqo75&#V
z3TlK(28iqdsQFt#cK>Ha2`-e|#d6}EfWT|+f6yidorii*$yEX8?cQ%y&~%!JRH1(!
zO!-Ti>eRkd5s%5fk{)O#w|S!wGRmeFIsB1n4W&r)!Q#U^ZS?{q8lnf6EaiuNijtl+
z)jd9t?NF$x3QNotk33KxAO2ka7hYy<v-dV0H21UrCyY0RV`|+)Blz>r3U9n4^c8l#
zcF=XU@oJJGfz?DWyH#}ry16zH#^NAKLe+LjnaMs(!^gs<_5jYIE^ehU;qs?4m8;yM
zI&4wb+vVq#Q(3k?&a(TkfJ$BYu_()-_UyrRNx9xf+aFX*lh;X&t|Z4ck^H*9D~Nt3
zA}lK$XDL>=<z1V1bSuIu!dD$EHDp$fPXygP3(vxCptG}+JPvMaX)g7xXa;tkpGtI_
zX+xtfGI*47Mpj<`*628S1wh64Ps^V0e-nzBwx~Xg55KVgb3*a9hYr6w1nEa2gx>bD
zs#J$*z&A--{;MBptUAi|fB2E4@M~g%m3}i&-3`jA)Wjvje>02T4XH-eBorxav+LXq
zYmU_<HNdyIJ?};g@M}{Bly+V~@8IStwQ2M49f6j+QTwRc^j)Q0k>$HFx3SvH8~Coo
z1M({1*JWcW?@3eLPlTw{A#%w^_hdzz1xdcwk%6W56?E>WQpV~E1xNQ)zKBdw`*s1v
zln>OQ_cK`LM#(=1l6dB@Xsu9RC1|ygY7}81E!z6wwZUXMu2}O<iZ9D&HxIFZI$R{N
zKjZUU6OG9B7RuDFYdlw(%pKp(bD7qEOwV{`MZ`V2WD06n-a0Ndfc9<Z4>$IFu!W_2
z_U(TjZZ4g+9nKJ5dz<R&aL|_ET1x&)YSPv2c2wB@gQy%DPgutXT>A_xF#&9zjIND~
zvniPsXLDOO752>3@Ll5#);S>+p*8a8dE3qM3K#Hd<b`&rmkk%o^@t<QWkn1%FY}Gw
zXp@6u({Ej7I?3umJH(V@!y~nb=r4uI0f(zXrnbeG1TOsqe-9Fum*H=cho)dtPVs1~
zy;^odb6Hb=;=I~=4JC&b0@YpO(ldH31c#P9r(90NyqDG9U9a|K+_WoaY<hQGug%ij
z+9AZZu^K!&FnLb9q0sX?7qJn7(~I7o^oth_VxxR^jzeGC;NN(LR=%j;M6`PM=CBOy
zeNw*<P1o;*AqEeGr#wPiC3>sJ2amYaA3|1Wdz-QbPw=KZucRc_Grx%Kx@SK6@qF1I
z)wn&Uq4f@xe0GqQeBTE9Zq+CH<H2XVeXTOu_56Y6F{JW-d-99>AG^Qso)fPy?gQ_A
zMd(mh^59t@&>yiW`TOP>=?}Q;k3S!O%$b?Cl72ra@-}u+Ym@asZ~Sgbinp%nODcpx
z1n_N&(NLd|wYoy1BllCz_KmBTW770vP5G~NcOid%O@CxIQ7FY<q|sk&!C&ImUy3|H
zTIl}^Z5lcI5d{Q_76*RblhGZNLO%->XAROTeuE4tnrj-Fr3A4W|HC-{dqNReboXpT
zE^r0$n*%^+FM-*XvbPwRsv&amfHBpe0CIsSp}?2mP)o;<PP&kY&!G`Qf+<3Q;X=ak
zdjaeQp}8T55NY!;=w+x<aaev&m{f5{#)4>kacJ;PSY1dM|6piTK<Id<f9s$^6;?pb
zpfVnB*jG7V<DT5$g8v9>MDw2C_@Hvno?nf5M1*R%kWl1;Tf}5zC~0Tp>H?sBP@0WA
zVrv0wcF(UbB`Rtnf<rT`b}uRt5Y53Fb+w0isOg8?_q@N2^mK{*8-l$w7=0-e6Jrn^
z92A8WioM+k@#~Ml+m8V>nH>wo=48h}U=f(1v1nScE_2beuqZlVGX~)}rbRQ9(6|cK
z7$287&bz4R?xutk@#SYR^~J`oEaC-)<IP-R#pH1)Da<a&6GnIwzG1}6x??|Rnr3Dv
zC=MYKaAM;{>f_Yh6X;(jN@65x+{Ny&n%Z?H>dD7a+$NeZCw-NVwZ%xV2*s1zH!%rK
zvPs3Z!!`x*CSyYYR;KE1L-;6F$=;y^KVYU_6e)|mDHfkof`)KILQRoqvwtGR>^dc8
z5hu>V6p1$L>{CsWQq%T9>GGyXv{?pD`znx@zmMaSnwHd*R@RhSahH}&0j<$WtJ8v(
z$fq<4Lz|nR^^4H<RA?wgdY(a=QBYcM6IMTk>0oNQhZA&cA8Q2LbQGHyB?j<6(dJ^t
z+FiyvMdl`UrafQAm(Lj@KmZL2sv>dfggePWs1Qa9(ayffUMkT!w#a2Dg6Pkp$xSHH
zU8?AVJJHjS3BsKS2$Hc@%hqwpei56!{xbVTSGM*}HWx65t1kPLjf8wyl5mNTIL(CA
zgOEmB>X`>2eV7TOCE;^Q+G8zTHV+dHZ9*<>8lI)JP8jK{G-|<N96n2vmkNZUOH|?@
zsPGcW8%nCTBFMU)$?JQFyf&rcFtlfgR4wc^izT75g30?dh=%qXEp0*_5feQT$QKa#
zhb7Qgb`ukJh#5PX#Xa;>GpXGH={N0ks$pVh5otpOLMuuW8%l_$0*NbodK5O9|2=Ua
zCFlpp#1{k!WhV|#!;ZW+j=l%SE)m5mfZUsjQ|}3(9@vQo#>r_2a8?OnjwN>9l5v3u
zxM&yx17VjA8<&R>R9Zr+@3Cr|jeic~H&}w3*fTOph&w>wt|hFN65}=x{Ju2&fnltn
zG~*FV{8177@sji&ZQ|K5-1!o`MG*0F8t7=T=ozG3PM~}dT+uaAKJK2cn^V!$S>bzD
zE&>bzyHwt$Ro)K+bn<gfC^H5XDgjm%?}94a<f~*&s~khC-WFEb3{}bOR9RqGzhSQa
zDqk&aTCEpa{kpJPW2jncr&<lWMv}QkQNBjPv_>|xM(h(KJ5>UwC(6t0M2$Z+VidJk
zCP{6EwF05FtVoF)xK3KMPDZCr*0W9yTBo2`r@0xV_<*QWrTVE3B@v^Fm+(YE<$d#7
z8u0rbavBf(G!mzwgQ6fKwbAv{{`@C7xSmzG-qEmr*0<g|r=F~{o^ijPQMLZ#G?POM
zsgo7R<uKN*l)@fL?OjUx!xQxyy$Tp!7`RLoyi5|R2n-)-TsUa-Z274Ng;<KBCR#Ne
zgNmZ5sA5M*;-Sx>BWeCtlzBRo1uY~QP?U?M$WjifawtWmCrQyE6YL@N=OI<YGI<jR
zNec(?3Dmq6*7T#Np^XaCXVp5|lG0I1-GxKmGeSJh0jxcI|LS9#!?!lY*tXX2R^yqr
zR2|0kQsPaVw%-qOJ1wng(0T?{z(9EGv=z<TA%b*Yhj<aHvCJWU!$Er|O8S69d^m!Q
z@Kis25Q1}byz9gMBU*)nD~c!9z%11<*-}lUD^7CM@B-QiCF(rk>-?zJDe|q8Fs_TG
zrAycMIdeJ@E44I)I-Q~H8Pg*%vWm*b*~9Kt%h^i8z0z}A)x()DBh6Va=|%GTsFTy6
zw^yqN!=Xnywny-F?@mY;e|oRcWLJnHs%9%xm6Kk5h3F$E(dROtN(9vKi2my%p~(uN
zS=qC9D=}7O3^rwic3y<vBKlt{r8!$Oy22su)`Xr&H~dlb4^AduYly!tVW73NAfTHo
zeo&=m5My$X>3q<fbBOBAke1O9z;{UB6M<G@Ke)d)q~+Pp#xR`Df%c^=wHSAJzjK%<
zXXr)e&<){8$qIcPC#0T}w$M7F8MkAP3JyOTc`-47S=#rbt1oT@y^=bm2i|#Z)m0JE
z*{`Guhm((4H`~Ybdkc>e>yFZjp}j1HQ<k;P=)#p&&?m*Jmm?@vaa-a5V`pV!Tkx?t
zPVB}bwoQ1~@0Gr+voS`h@qE7V=5P>NTMY&t6_#@ApNLVi<%!nwi3J>-Yxu-1?!>+B
zSg`%rB3uZu(oIU!-c>ar*E-2WGlAS4d*Xb~h}ZkPynT*xO6Tq5Am8+(C_cHhti;o_
zyK1J8GL48$=e{byz}{D(ZAQrkfdMd>mJpd)SDRspz~wJ3R<+5`Z5e?~jf}PUO4hw$
zkLlzq@BN6^gYj*)Ds5JYefH?voCvk5@$uX(aQ+kLytQ(H3;W2{`YhNNUcx`m&Na<>
zJPLTeprZ^gO`op-EWiR5JV$5IH|Gg97V^;+8GGjkr53Rb7xMxZ14<UVI~P$m7BkV7
z!q}I(q?X=9%>PYWIBZ=wR(fB|1uMzGDI3KvT$TS>4r{=}Y4XNziIi`{E9uApb=lze
zc+2-imJCFKhBEL*xa3FiO2@rHlaYASH1e~NrSnhNi{9{xHd2$ezCh*i;L!yK%EhqJ
zk%Ljt@~GS@GBvwAiPDC6e`!<piwk?B4fniF?(VqE4G2KfU&r{qj+MC%YX5iHb8H=l
zH}jumPl?R-0%f3Wd4CE3Ed~v9eS?nMk3nLS=>+W=ZP5PH($T1bGwch+So!M0=JB7+
z?wH|)!42u0IWL*5!?Y-&c0)1R$`jVD1(M%Y23uPp2_oNBWivr?nZL=Rbd{q(@A0?E
z1-6S+x8+abV*|IdvbS|?4fV&y@$R;`|E>k4Et=47m%iGG_lcER+c6(2c4`w>sL-)h
z!7|8<HeJ(m$H(*>+qGWXc2t2m<I8<h*<-KRVNKl&{<EtG-a}p7?R_<`sM07Pzwf5M
zmoBnkKenxu_~aWih90NCgXN@2#CuR(m5^quU7~_kAQ4;Mu9X0oF--sj({5$!e@%|s
zSKHt7Cq1MUK8#>K>XF#<H9hKSKXffT8d*~d+&LQHwwRJQj{1B&zGl9Vc^qDUJXc}9
z_V+l1^kn6``EUIb`rl@|+$RC`Cr8}oCs8LuV`-h-X6F)dz3pZ<QKy6WW)D%Pa9dLZ
z{@H|z8S40{kINZW<w=*;sb%3=B<-02#(Cu0sk!VqN#*I}{+UV8Ip=;H#(3l1i7D-~
z_`HQfiO(0z&qACFFF3xKJx|O4@?Ik4NXWXoP}ZeL$EDbp%kQ_BQUq7(NMXF>6-WX=
zK=yxxJ?Z{O*z>IEzZ22JIQCDiPBimwLW=Hf{tcP-#Z(xf|8}-PKS+WM{=*o53`(yH
z`VS&HO3UcBj_hn#c4U)Edm;xwhg?{GAO}EgeR)Gz+`=NG2t;3c1SKR|MAIjwL4#8=
zg(9+YW$<6Vj!%aL<WZMY1YqTq)zZ||HM}XVY_V!2Z|$_Qt8Z^8>>C^!9)XXBy&L;a
zt|R0C=&$t+WM}(d*U<s8vwd=k8~{ZU(d(PrJ0uZ(Lb{GnLDX_p*<JovMC`iA0nna*
zh-kW8b#7lc`Af?cr0ZxPnhx<Mj9MN^MB`aMl;|Qm+at-mUx(A>YYRt_MDzgJ*)AH-
zlJW=9DAW~C=E=pgBL_fX|Fg6GCluZ2Q|<NFnC#N|N`sy-8pZnmY>c<V9-Jr{d(GD3
zc6qQm(ttF^`=H{`Dm7MZ^n?&maT~ZYprS-m$RsH>)ohQXytG<_H@(~z)RzvYT`ln6
zoG$)Qip+Tav}%iBiOW=OaoIyd#oAjNZD~0D)#;D(Y)t2E@%&&s$Ct6zJKQo1fB9WT
zAE18!=$9`(Mr5AX{|tb>!+%=8y0k(Alb@!cKHQvbjqHj-+MZq>?B=;tc61;R$MR0U
z5I$djV`dvZ(iE@z;a-1w=8H<XKxcrhV!jc0FOHStO=#4p5l9=vYUD_1>!u&fDE;Ae
z7-#*0b||w#@MZ{Iv-wt}e-}9;@5?Yv#waO_)Z{49lc}#Ek|5acNEy=o;aFPcrr!x{
z0{h17sz$8O6Ll@w))U1lb~lssl7_Mq4J_lf1C7)6cYc@`Y7M24*5B=9Tp)!<^iC?~
zESWx0MZ1{+SBvXezRYQ>*#UnI_fn}?*)1}^2n-M9;V_8o7xH|zgrynP7qb=RpX}}z
zIR*`H78lfekmnWG`@;Onnk`EWhU^QJ%CeU<56e46LLyL`8G1^e*V5ivRlzqCBM^Fh
z_YT%2?XpWpKP&Nd6zUq3ke^rp?r^TE@y)(t&b14eW#U}ap{>DE8Wn(hpA>~VokHpC
zr2Tv1GEFtMlg=sK&HX%g2bL(6o&N6k7rb4EQ*QR%kIY*%J;2(FsyxU;v2U1@$rc&v
zWmHY|GxQrWi^28VPf|Tm=_~JsDJtL&f>rzIwG1yl%=5(wW)Urn`CheRj$Wd3T}?cf
zG^#6;eAkpawSm@8KItSjiZPX-E{<=gIg;b-q2?(M9MspDp6}Z+g<mdM*wcJj`a&k_
zz-T|9CjfQQ&|4U>U5*u`bm*CH_~lbgBS7T8)zFX?+z_#_8LJT$Zse*{aff&jsz-CX
zlRfQ6xt)`2JMhaZ*7p9upg2kRunIGma=m(9CD<tJhwa0Od|jc)X=mR0(qR{w9ja9(
zRplej;8XkKC3$|oKwa}2yEcm<$d9M%XDshTZ`R-a(mvTp{vqHv2L0mcvQ&y_bp*8h
z5O>=jdDeUb)38IFZ2s)%INrQlL-=4yM&R+fZNajH$?c_lss?`G>FT+~k##NXm;Si-
zf9K9V7)7oN{^2Ry`8DKCH(}aY0IL$c9l1RKA0xnM{o4l4ua|8)L-s)<u#HCBkT>Ma
z!NK@fISxJxZ|G}+LJ+sv5DoucZ#PvGMPnl(fAY5<l=(tGiH(wkr}T9rtYgFVdS}V1
z$z^$>V#7=V<|&?Xdik%dBJbUDso2oo@sFwTIHPURTo%6*yr_;gdCa4^K_c41>KOR|
z26{*;fiQPmtaUmg6VRepUVSP!sg<ekg~i}=2laT82PP^KinnSa-z>HGpR>9a534Yg
zC6-!~a(<;K(`vrZtIsbeA4^jFUdNZv)*H<DWoX3U{vy%*rKxxbObJuqGIb)NkiSTN
z)KdF0Z2|sYT}S^d?0FVZB(^I*?y+>4c?&O+xEUJ%et($-z+?S{3-<A&yvoK>E|w-6
zo(K{l&f)qU1SCG22-Cho<dP>U^8UyUccL)xhsSjHtewH5JVpSk;QdaFY&cDdlQ!#i
zkiy~HDbw~VO}^Rw5wtVjBtNIPxCKp>%4+}A!qURwR<_EZG`u_y4$|i&mJ047y!n(L
zVAV$K0_h@Lr5Hq|#Zw2b8a+5GuL;Yt2uoif$8T$Q2+NbytzIoqax^RvRz${eyxI$6
zZy6)34469PzrAPc=q9Z4BrM~{vSRD0C#-f*x8^5bW*sOYtg(nId&#QEI+8|MYcOT~
zQmBPxJdChTgV06}rtrZ$cTT=U55r>Hc<Ft6y<GLDe(ULvIx1@}@0vzQtfCLJVZ%<1
z@3~HT{K6wv{a_8Lh)0`<6dl}MeeC9>go@DOL!3hq?3VbMlc2_MoKsTl))-=*fI&~3
z%M+}&h>twJ3yL^5{aEcG38y}LqBsv}SRH{gr{1?CAcQSeryp^ZH<lO(^$k|nkB___
z<eVT(BCKw&gfn;6qY!dUH!1S5JXz&r_z1{}1)uyp^jq%cRH9oSmpkA8GRFV^B%-8y
zxP%jpubF%Rl6bY4gStDC=~|;a29D6D7yw3hD!N0a<1@nSIsRbbagUvz)SPv*SEwQr
zo^Hs__UWT93N_`VjoZsS`7?95THkS1HJ^WpsOSB3HvZ4zcghE9EZH-~DnCo)BTeOq
z^QMyY{qvzH7Aw^2bB$v^D_lnp^&jr%JNun;AizV-Qo}jL>N)^M_8W9PC5k=)7s>-A
zD>+Gn#Zm>?x`IdyB{PEso@#z{`<D#%%ZAG<5<S_K>crooML&+>C)ZEgm^N{0vz`<J
z>V1Q7ou-#@XJi%H|A_mv=nk$po!xYdtlQ+_daa-fE|-$&+i6_p^-a|XU<{5jQ;13<
zCk#+)&da~y9xboerMV8STJL(v8Bq{4bPlOSRerBrfm2^&^zVPVz_q7V7wBk$x*{rG
z(}FWd`8qmN2?{P^=9vNS#)klf|0(RL;!F}Zfy$ZR)V1PkpP7)sVD`Q%e;%16Zh88@
zhCONMED)l?D8C51alTUo{n!Cwb^hrW{d*o0{Wt@Wx*OK{-^O?yTEPD@#;;vr-4=`d
z;046sh})s~u(yoJ1Liwuuj#pA$94psraI~AKX=9Zk~7?N>h*6`lG_9sAzr^(I!I>|
zdQURGm~Luh-)>|`{3$(suo+vwT_*E5I`?_PwUT_aiFy)%M*p4H>3C$2`0=o7{gh-1
zc)Z+wx`hq>MLZr#-t6rDm}#)SZa@Xn`79^Dt}^z)67sp$0A9@dcwD2OHN1te`tGwR
zlZE(3UZPLd`36panKykW(ER+*z*N$H<Hmm9!4Pn+-)OI&7l1=E*B4bC0x|Nx{sy@L
z`VTYtxA{P*bN#2QA$uGC{b&K^6A%{ZfX*|>v~NIHet-#>@Wp08B`;wYU0|C`pphz}
zm|q~wp0Kquut_G6&5+5c7@Ol9WNNM`wLtj3CMW@H`|8&B>mV9%-5p6p|8X4^1MD<W
zT{ZpE*U<p>EU3I80gc!Z3kq~t7@@b!;d^LNa=|~qnDLs-5o)1HA)F}-m<|BIIVltR
zIwCadmMf<b)3GYl)GrKX&Qm&w;j|uRf`ZIO@zxe&I2(lP`Gq%yyl80*Xe$nh7DB5D
z31%_JY#)5yiG>mPBH|M{)~MX`ajeKFhRCnkShGUU=R+c2=0)O7V68SX{lbcRmlqkO
z8l~V6wb%G+>K5yWmFeU*%F;ff@V8wGZ}e;R=xaHlmObo8EGA^$)6^$Ax6USuH%3T3
z216bL>rQ@>8HDT3h<_Jj1ddJrXq~4TE8q}I4vS4ivnpGU<wl7kV2exoXi;kr$K@A?
z0gLl<LXDQi;T~e(y^DS!91k|fXt0lGi;KU$MW<znoi>l}XXQmVQhFU@)(%KuWI!Z*
z1H|@S`7hrl$PYQ<RmDg2nhpXI85k0cY7<BEc?hIThX6_R3`s^ki6QwuG^vSw>q&ru
zB--vIH?w4Nzhu{<WU}sLm)&GiloV%{6e8&qC$khhzZA!!6x{9<hj(G<ys1bQn&h6E
zl8TIZrlv0<&tx$auGoN(e66&?p<q8ZH{H*^e|iDPI7bl~6dCiZqkvXnd#o7%el|f{
z7oqvciJL`-VSWHrEgpBE?(~#*k5>As6kyPuQ({)B_l{TOCcU*=eVji7bs7(SJze~d
zXIFm4AN7o1sTuGgytO9v38u__>C6L*%$ddXISP&iwv62-ynQX6KTU}A^U%!8Q1%B4
zrK5eW6Ij;Vgd><Qds;nvpD=qe#tAnkd!RdeZ8N(p6%E`BCLHD<PD{rO%f_$Hsh-N2
zxXTF<fG~uyGkIh%Q<}4SWG%&H;WY!5Kj2c7fZ6WZI25v$H*f{hz`~YnqM&R_RluvX
zZ!GMP*GsH#?%D9Qf$vHZxl8hS)9_ws=TK!!`Jv|GRp$px<tJU_o8=W~^%Ov~3l{7P
zXqUu)n&p|6<d}QlS!(C5#v9r1^V@~xeY3=K9L^;-0J#|gT*Cz2LHVBAc;3T#weJ+p
z{hb2C!1~QB21~3)!^JKK#qyMpSaz0p1=hr2GMf^<Xb&(n4Z)nz%#xKRnVSZ~_9&i-
zDVEVL@_b#WaF!QyP%;fDRT1IyfRtn!l;($(PGy%G4wtrx6n`BmAy6wZa42zzD{=1<
z@VhU~vjoFEo{yz5Pq4e#_+xikmUmO)^(w&nK_!DrXuq_<^9M|eAm(Kdd3zYvz5@7A
zo9Wo&`6-CJE)4Zj1pKF&@#cW(uB37|EN8Z)V&edJ>j1WWPj;?dI82#~y^M<!UV?X6
zg&rP(saQ!gf=lvHMn+Zc!B_4)QHgS1$wyfA_C=L&UI|#VAZ@97<g9v$vgRzU`mwqC
zFMI8<RPBjnt)M6-GZmQCih;d_k<&_0=mF&o4)|>gg8m&9qkL)I2Uso3NbS&i?JcOz
z@4V`#<xiRLpM%*yQAU31wbXG;)FIC5z=S`UU;O<1vc{YP%iyriNC(%rrN(r*rdFh3
zrKcWkvz`j2A!Oqx1g%k!HETPSr_!(yGobN?z7Z_l7+PI9g4!fn+;}?FIJ(s^?%%XW
z--IUJ6t>ZLjoQ3R-;65VTyWUb@8A5kxCw*3w3NQQf=aB4gQmpuSs4eph;dVEd`nkV
z%k^YSkzw;TW9xg?mX``GBfhQcd9AHdt$T*8d5$eV8QWU2@%UmI<XRdk{M(phflJUp
zczD6sGWCR&`1T=aIU8k-<L7z{<>5n<>mknh1ET(NSy+Uzz4l`Qt(ug#l?0$n_*|`{
zWKrb&^^5w+PW;EtdOip`wQz^iyCO*1jd54GZx=;bS4mgbxf3ewW0%wZd&YE1I^6dR
zUfpE6-H6`q(Ae&4w4M<9o|j5JfrdST5j}o6J^LSN#i+?8#E9CpdS$(O>#@lcT6+y3
z&Sc<TAHLofNQaaG;ImhsW_q7?YoG2)pZ;T?#^VRoBQkYrqNLAeMjB!4TR>X=eowW2
zUV2+|I5)$3zXx!@B_&_6sQ)5}gu{9O-)De3)=qJkj~6iL#~CaxIH3LkCFH1E^4#7W
zKJdyB#WsDA6XF;M7fcfCPgx1lZ61opMmS|q_hyw5f`<o{b_Y3(hGUM1C`yJ?r%)=q
zUJ5o3)mo$c!0jnY4+>--x!6GwS{Y$AEbSC?f%lA5t`K#K3=R9Caw@@%HOm_#;QZjx
z5jfF4`)~rBTHL;S%9`-f1McWJT3*(*fg2>EICg4?wwFFCYFIO?JBDm=J0^@V@zq_f
zjOE+EyDbZJ9vR!16urS67s;s~vldcVmql<AT6!i$Z;j$)$l}=qI^+1B&5f$_Pa1xl
zq&uJ3GNpM`0$uCArNs**vjL*CQL9W$Vq_4}MNS@7Pq4+jWjTiM;rTL%Pk^Z33XTS_
zwS5zPqH!>o;)x^@E}xpqnbhV-U@BfsQ^(G*(@av)V7~XB5u~5};7y}sBdfwCqiPfI
zx(&#oH>*6+&r3W<nKP>(I3wvKVi7qj&^4#<ZZ>RV=2Zr-Wd_7aZ=N#}i@0`PT4>H{
zXD$O};h~!xO-hY?b|GqY0SA!DDz^|gS`ItM@==;0o}8C3o7aEBou8TwcE~yDT+A4q
zE%C*EWLTOz@=L%&F^Qy$<n7u3V{`h^2;DAK*(@k~i+o@tVDDstmM>QwFFNHfUDB=a
zFT6AWFB|m|4tujZl46c|uW&$CD`=_}V<tj32p8}mg-^hT$3^z@)%fyNrOweByw%y7
zl@}i{XP@Z#=GLZGO?Ued%j4dwR~f6kQ2YK>@=I~%p2)S)r(bJrzt)vkIKaQ^${{<)
z;0-;L6`R%V$o1XTU%tF+SCIAG7whDi8x&8nM_lVC-Y-(X%a|&gfAmZ<Rp;2&HlBa)
zkjdTvNNn=9Z$>hLP@XmyNw=OBH*Z(hDbCj!ir0mCH(pizVjuhEA%OD$-*SrBq9*sF
z$KNLWDl&}%r(WCA{LTr)B$BBR);j5BhU^%fY#XZ(nttDDz1S8Q+lBzU93*yi?SWdf
zYId~9$9}K1-S2;QeQW`ZLR=QKgjShgx6Sm9^&<E0+l1d(Rzm|KDt-&nLL$1B7;^V0
zvWp{a2cvD7laa=FXnSeC4LCRo9BLcX(!A|~4}q-#`-TsqXd#vOhqxSvnJR~_3<u=~
z)s16zS$~;Z*A8Dj97a+f*}gdHZU5QN{jHh%=vMP61OI3|^9bv%c64lL(3W}l1PGTn
zR%7`6q<V<_akQw<Lj3w<`)}K}4Xpex_@Mpd-gEUN^RS}*@C94PF1|2f#Hod7<7eB`
zvy)SVL^D>x3EG#lRvqJWl?I&m#(1Y^vm<BNzfcGyjUmw}eTwH3nYGhuFtMa_5CJY-
z$5#f)ix$-j5tj?rQxJRBSI%D-u(Jyx(#sbe*!(}fBDrW%%%wp6rPzCHi7#KJo?Qj<
zUh#jvl9f!rl9T+Z&~f#B;)?hBN_8Aly~F6^mp?Z4e^`?KXm?=f@~G+~{#byofv>KO
ze_)srsG4V8n^ax%=$?}|{h_uye(rhYJbvt8bEuScV={H@_~rWhujf9`ZY?Emb=7Z!
z5Z57<Oba=;;gT5kcHIsg1)ksx>A7oRgFlgy&ttO640skL3h%_L{uESnyXHc1*r38B
z|94RP-&*-gB$kKmEI8v%8AC1=Ew?8{=>GQqNa^39_;>!(%HNAO+<)@I>^2zrXIv8*
zT|J@Y$MyZsQu_0te@#vQV_ee@Rf7jB2q~ra{Tv#KM3YI$fgg!Jqow?Zl-@fejy=4v
z%ojfvCYn%Q=lwC3GvnvKQu^R(w$jdmZdh$!ej3S(=6}XDr+rYX2A=iKq>L^I4=pFd
z$;Oeb{JoswHO8g=pd-ok(^TU0D<r7(nmcDWdHBmo{+~eYhBP{m;eUhLe7C}|00$rv
z)CSCrKg052{18Sc1ql5Y)QZ&r^M|2A@5*2915L)VA~Y`|UUxB1<jG+kQ#W^+O%-_s
z=zm?}@>eU?jO8u}>#~^3mu?Dby!lx+r(yKc?bXA}qnSF&ikgfTJB}4>tNjvO&l}Wm
z6wG0){{Xcd`f#CYUuEy}gTP_Ie?cw5sHm2)$!PYQaN1)($6cQ+`F}wz+H}#M0vF|$
zdYkI1uUk;>e?V=h!{PS<s>buJK{c#rQ58rX*F@eI&9Rkq$Nhy`sv>>wW#{Ado`#(@
z?<Lpsy=gP%FA_`cf6lf(aCNq~)!bZM9u9o|CBggnfX=#(z<;{i#qmL9E;hhHryRub
z!;xh*#KIHN#0elWE#5%C)RdzJQU$RxU||AOLxZmjgf_!)l0uBa=xSKEBI4Q>bR+n8
zgp7d9OXf6DA{a2kP?mdh+8AkOVLE(nO85LYRTa&g_~>Ht?Zl~bO{T;S&Cu=SA;{47
z4>>=JLJ#Gr#qeaa`u*huON{P9sMA!TNjh1Q)^6rxXebMZ;{{u>sS?T=OST7o$(~Da
z65(EMjJ}ImUXB>$eu3+qJd7pD=zvYb!q!8+C@ZNswKyfl@}T5MDa?|wq=vneH?3V;
zuB>*a`AtqeMq+VA=QVm!d?SWc8D7OTNUnN70Ot*&eE7PntahdZY+0xFq<vg}gd4tD
zw-O{OU9;fFankfms<f<Wuig__xp2@`(Q@TNVuyM;S9;1UE(<+ve<<NN=l~pga+RQw
zl~p#ZJ}={K`>lR()^h@S-0dX}#yRa=GCitxz;b;&AKbcLX6<JRx8h4?Euuc@vIOx)
zjqpP|tMt9vK3$HH%P5(Qh-tLcL`q@W9QA)yFu9sy>C@szmIIPIXFh7!{F&7>EB`a6
z>w5fWUIVk!XG}Gjs|)zDp!|Btx`Bph(R6_8X2ogV=4RDxxBO<!>*o08mk%cQ?Ro&2
z?d?VgOU3PGgy4S}*Gw@(g4&&Q*OR;5>|pNuz5Ha``~Bjgiu;4IhLiilssZkYqdH_4
z|G06t;^CzA=H%hD6O-rhte4CV`8q6>j~8&k)5pt+cRWv5Ga7bJe-_LtpRQM2PoMrz
zDg9By>EDO50UpHT)w~@78C|VJ{C&JRMIZpU*#Jzr|2eL?jwgdEh;D?5iDx|gg@L4N
zQ+SINqu9WF3P9W<^q!l+9oJsymWV)rAb=jSVJDYDMD&6n5U7@8rx`*dW3KAPyAq7+
z`KAZjXzwmOGk|Y5{U-5I)%`Vm0BrN2H-VbZUA}jK&}zCjRt(~<mOnsj@!@SOLigNF
z%WHsCZ@MqWYtqe7X@FekL%&aYwVQ>^0HxM+fAdG4sNIw;%Y))*K|+G)oryfl+Y|yx
ze1ez_Fp~vVD8ZXeuz$ZHlQ=bnn2hb4*u2=^qO90rit4EGxs%2sLU*F?RZtVCR^kXw
zv4$WeQz2z&Aokac3QjRou7wHxoUcBNIIh&VHbwMvznoTde2jDL3h3wM`vAA6c61&3
z*#ClO8g3)@!F7_epP%c4vZd}z*G05`0mkW33ojzqjmJKr2Xz&T^h=lht3Hv_sWJ1`
zX_xb(KCun;_i?=!EDuVGl8N8Om$u`{fFvVQ;cBW&G)`pL+r!enlM{>LbqG>O!LZB^
zHMK>(1X2o<VOj6V$p!B^5_+0pIZrk9g^UCew(TJW_sOaGwi#l+S3^p!Y9HoT>xhN_
z45(O5PR~6h5WkKbP_<C|I7j15EN?QPt}{6^EB=XC?N9$lEwxXxdasDJ`uaaBPtMMG
zlMow<_iHMueV)nqLu5hHuPr}0H{CW%^ewVa*ZE>R{r4*pPm;HK%B~tpkDmyAKfU|%
z&0#@?iImu%OV5yJa)Cqanke@9sxg<^;xpYjqEwny(`S=f&%8*9a!6LqY1Ecz(ys|&
zc&nCFliD<`bA;9CtJV~1%hW5^kfx^<Tf9jfs>eA<*Pj)89JLin>ITRV;&{aYds3HD
zEEzJnz2bzawo0Kp4_;hdaY3KdBll_mZ_KW^p{lKsr6+^;M^`+6llo+>8f@Wh^4>c3
zzYJ9E+J7umg6^q8ZcESsSpP`r|3`H7-*HXc4WN^ZJmA{j=Y!O`rB5LM`z!_krt_!b
zX6^A_;01|1VxoF7^)fK?1?e<(Yl!gi^UB6X1O^yM6yKt8Ui*h1)B92n+;$5eoYQ`{
z_M^)}8IYjli!;kN7Uyk3Q`x~x$ZP#d`Kbx0!TdVuhSwN}d{I^}GdrZ6dIu7rMPO3V
znfisvglF0<NT7Z*DfIbQqTS%pSa>bj4ctr;aW^JLT!)~*RxaSKq?nZXSVu)My31yT
zHBoUySHL08AVrl1jjLzW=6$)FB`oqLr9BdNZN*3EL-vfW!euc@@6LOF?df__j51}L
zeWGXR1fBTxRe|LIHu8ssL6!QNya`jxqoo<ksEK4}MgTxlWd7b=pia%3NBbkyvIgLW
zua3s*o21!N4@LDm2N_#^MXXhLwLrqsvF#Vv2Wdb`Zd2ErQ=94gwU%3#xO+X@!6T@^
zSw&QHpv;*E4(rBhtm`M4nKPSbtpZ>TxAu9O+^`2vNs9T~zMidfKY!|VJ!!zetB(%B
zBP_qSV}-)CPaJMLTMemx%m<kN{RYizB}e%J8COO`CB<6p>}+e@h6L$5p3}97zX(<e
zNU=S?5)<DSX1VYyUb{Tgr8$&+hd&>B@+V92&A$5ki3Mm>M&&Zg!3V(y+5=serWTe%
zqVe%1Ef>rE##M>e(JiYtbca>p+owJnO##=L{AgDq!XY;VD`s5J`UNGHc4@_4m59sq
z#P?q$+qLWn5&*_qFs>{Q9=<Wy(bXw-UO{QaR$ofq+bFeP{7g>T%IWdI{MK%^|GI5j
z1<%v^YVD?gAm;2m|9*}7*G<^C%L#%GppmtHN1En!{!rs3#s#>TZopsr!jpM2u>UaF
z)gFjaNqbqk{{X&<yq|yeRA)Bu^i>*h9r^4p!f8cc^mgF+UW3QeJT)Si1}OI&)tvhB
zhHEI87JH8g2a6i-mg~=e9r_^V876g8jPI$v&p5<awgzxMPlc}P>m=}fir!D6#+O+L
zh>Wp543Kc95cIhC+X4Xn=VZQ<<o`rhZ~aFE{)w)_Wzk;VQp*=pDv}E;lMBAzllnhf
z`TuQPa}p8=$qiB;3^Es@v^7Whb{q7v%JQ{aupgg5ry&4q;vY~;Od8@x9zw<{4g?U3
zU{TY=5u$*_Kdbs@$ApwH1H**~QFw!MQA4xnLgO_<Grx(a?O~@cP-T)6Mw%nUb3(B5
z+^7mdD6>OC`X|F4?89c`!;-7Q>gmI4&ch^q!+++43k-$}Z-mzYBU<PqgkDEf7)G%9
zMF{3Zly^n+ZbYyHBg^O`_oc#TzJ@0mM3(wSj=qj$+lVXyM(t)tPWMDcOGV`yM$OSj
zF?L1eZA5MOL`~&IMbSm)zK&i4Ml<9@=X6CwccbZnG1>GnJFjDahB0ZrF=j<E51lco
z8!;#JlxRNwNK=!gJvD9&fbtGWLO5<0un0pbh_Ugm-6&A)i90rMbLQSr@Ww@`#<AbU
z4Uorh4*3Wy%JE@`hc(7ehr~<yx>sz(r3C?BSYYv6P_Vc^dq|1ra!16za|g<6VJT8j
zC}TUl$0jbtOn}bBw~>eIQ$(fsqH+u+iXa6|JMkT{iHPb%$;m`ZHZ$veD%-{9_Nhb;
zTG9roM8LCPWFOy8I3++UCCEJ`WHA_rH)%H|S*SXhYbKdilay^JLG_MGeJEK@IMrG$
zRntB7Vj!iRDK$NmBy*9>j3U_rmikdEEnz=J5SaQ(CanUSv<gO8)1&~^f)=_%*<ztp
zb<oy3;v#o47%aJzBDGsMT~00C{#$x<YI-fQp^r^GmP$H70iA+D%e68__o0lybV1pS
zwNRpYHqymV=rTq6s#c~AFq45k(?d4%WGLi}g78Av{7MUvmBpG+BJZ1Pp;R}N_2eFt
zz3&A)P(oG6uGq^O#LjlSv&8iv+8rX<zk?nMXC4dZpfAN>dQhdpkjc>;Jj-lz?3}Wu
zB&MYtqPv`WNba<7E(c`<K4k_gdoH_3UaeaeFg7bZ2pC+PC#s#d<etZ838Z1mZ;{JC
zu*hGLcgK&(S6GTr3d>O$&O|P+eiF_jQ6M3s%%l*>63j06kQOP{Odug*K}}a+q8)8k
zLSVseDIy58UMj@aDlqUUpd1DoTNb%m<|0B<u`QLqPZoU-i?d53_y&squ2vKrmh48E
zWmu9$1$Z5GUrZ2Jd|Oo<$b`buSa7mfpmbgkSAr-q0-<Du!7y`SSDi31Hq&hFj9d}o
z{IIO}`@BSj@5J`7k^|PVd;AI!d0KnCprz76-cm8OQgM$`OKlXGW!b=e={~sZ3k7N`
zs63sad{3%8?{^v0zI?$Fd(e__IIIxPUc{$bwvooZ<bl6psmOI!b~s!SYgt;T07E4$
zr4_39t6E|2Q4t}+-K<b_ukG_lN$|I%7_bamQ@}^3`i?n*kKF>pc_`tbtGuKnKDNX^
z6-jf(s-RHxrlP{9;m8&{D<=^3fE@lmw7peS8~(m;8xl0Qw8h=6SaB%O7I!EPrO;Bm
zlnM^P-Q9z`ySuv-cMa}N$xZ)fpR?Cm`##(|?zpdc%|k}!@AI7#n{cu48C&ryNCgcW
z6I~NFLlLw;vy}G$jV&0P1GD(0eo1R=rTuJG-)YqpY4x&mr7F0R#tL5D38`KztUh(F
z(3P)dMysiyt~r*kp=@FkZmQA?MySNUdG9N&?^LfN_TB9@<Oem3$)LEPnw!qrXw_PD
zhuR%_44#MTR|?ny3i+;NwFj1U+H1A+n011fIzO5?Jw&iQgKLFVO`bt(6D;e`A$6rl
zSt>#7+9Fj62cQ6}svx%d&hff&(#A??LrF)24k;#zal@~|Mq#c-h<;;KGWfelS@i>U
z@epZgQ(hmWG5(=`60gC947b}Qzr_kvi`h`0+${CG-hZ<B)oF7dS<CT{Mi3iPWl`3Q
z0%(p5yT7Sr>7cxqw3U~ubzHUenqE>59Ca?zMs1PWONMP64R5<|YJ1dw1&&AnkhcRx
z6G*mjV=#%)BHF>t?O02HK`kEn-%=BiK?i0Cz*#@?YA}(`FYwYnzNoQ-+#rCGoP>d0
z5(m&}W#49|?dDGhVofQaHAv!IYVjoOLh9>$r(nWl-3jvQdXb4Z%=dUR(S-!;A_>Xo
zHAsG?C@67gBW3NN#4f0^1m4F49TruN)Cs)DVpd~!p&u47Brj1IPSH3NFg+~#Y~6cc
z++7vbn{C(gGNNZ{w!;I|mqp#jDbe@SAi&AHkL|3d!J*e9rCYh7cU!LC0n{H$+wXSR
zTh!SPh4yi@_o0&Yey1Bqml$9*9zeBn3(6dr4}$kU&UZ(Uvt%lkK?a-kv0fF3vWBI2
zmNE&Hv6mvQ@}UMyH3kfIAwxf_hQithSk?ykmIg&Z!{w7h4?zQx-ouFHIa^`B^yaW1
z^)RypVw~Em_-3RobC}L`(4}+4$9RMZGSVzG)MwqVhcP0>I>JXc>Mb$KXgu1rH_8GU
z^P(POkQlqN9;Wmj;~N^)5FT2?VgR(TuNaIqq|l>rR00iia}Rm2N2)MvdY=rq2st>O
z*-X5Oo=~fpuznofe~iOD%DWDkpu;XGYOZS39>+?Zq-maHr+7Bp{E|}4fjYGxvxQcG
z<E2o^)Z5~hVxcczr}n>a<9t&xM&CY09|Rwj!k%I?nA~fcB8{4UXPC|uI<3ml#UnOl
zZ$JH83Sp^i`(!wyodwV~9DL;_#5qD^gw3Xj&3$w`V@EN)(lrgjo(Z0sA%)C3*@(M~
zjelzq^5mG?(wK7^nT2}Kd89hbcFp-=i$_q*tKQH35F2nl5{<^5aJQb17aQ>A5K3Oo
z)x{ReQd;Pi5z7l*V7n15Qd$tnn2WqvC=V5@4qd3^SV+faPA!?2$pExdEOm-4bsH}A
zx-IpmE)9k*NhT5UXo%G<qdym2o;F;bDQWL;DV!i&4vAQ#jaa^ITyAS3T?;Lm>{>pB
zwwx3#Y*LU4s;-PUuN*0no`#lgxWO~MNHa>sR<Sf!k=RymDU$Aw7LmfBpcPS=A^P!w
z%Aw&Jb>nY7l;ua8NW4)Eg5$N9dh2h0u6wesu{f_%*sf98E)Y_ZK8=)5MX&jkuOauW
z<0h@rwXPD|)}oDyvWla#kE(LoW^sjOQ9o@^9&gf%Z#wC34t?MBir6Ho*?hOKDRaLm
zO1Y&XzD4u2CS58jdko$mSz|HUfPUL}j=A<eZCyJ}R2K(bepF3yC0lu=K@(?-mUD|o
ze20&66Iprpo$W6A@wQCfx?;_a*1}HN!;Tu|u7>!oo$a=>?WSuQ3F5BJP<bo)U{@0b
z=EMr?RDdaQZrg^zd`n^W?(p3}<(**nt<W%%aL#HI@%^8a`!1Y&B?@~6pZ9Wt_7+O^
ztVj2}kN1*oVX2(^>B{@1qp)(E=1OI)YTL3}%9VObSYz5=bJ{^`>p}a<0n{D#oAYS)
z>7XoZH`-{Y|ND+d#14Jz;gECL4)*p8=i%JSQE}RCm+gL!@=D*R){bo{jB<6q^yqN(
zsQdV+0_V7o?$}-8nEmGoJn7_m`7r+Ju#WO*RQzZ>?Fhf^Xu4FC%XL3Ka$kXL5AgL6
z_*E2n6%CbYeX<KkH-^UWb$wjJgryCQe`)_HO_b#INnyv?>HczP7l3TyLL7b}K?NYk
zz?b}RDGk5i-4yj$*XLJUy_B^hhpb<!pIi#V1>eJ2v{n4|s4n!s3h0h`&Rkp>eibx1
z2{84zMj%?twrlIvYg_oW9o3Ef>zf}RZhm>(IHun?x81m|-nheW5Qx_6^{vl`+XsUG
zH@wx3ee53#sz<RVF~Wi>%Z`eH<@Ha@XgvRiJh4vMT=CzS5r%*2Kf_pa9V8m_`hQ|Z
zW&dSC#Y7jg@Ink@{rnj~Hf{*sim;$M0I_g90}>LGl2dqtqM#X>S>Z9Mh?r4fk+^ks
zS$RcPZgEX*UA>T1a3vyU^wWbVzM-eLuRrd2di%&|WvBQ6LKRRqJT|`&F)@P}#wIi^
zZf!d+ukY<2h-~hhoPLEJB8IWd>~m)i3l}$tVXWnNU)kDA4<I3{qRem<n>U^dje%?h
zt)K%w?<lQtMV5>mGW=E055BXkf#@2kFaxJBy1{rZ?T?@22vr6W1i#}X=~m^XBnx|k
zZFVJc#?mDGSq<g8U}|x4iSntWnKWa0d|B$tgRy;YieJ_IqENW@(kRF4i8Iu{X4iAK
zoF80vzAEXc|9-(!V&y<()B^F|+5BC%w%Q)>y^&*S?DIySLW%oltP`%SA*ws|Q8SXN
zFTueA5BrY|)t%#+rjh(3_vt&+1Qc~?*cY#?b&4zw%yeQ-k0vS|FmD3x9kQ3YqF+QG
zF5a?j4QA0*9i`~o?ad)QFB?U3zCM{v`u^ITqS@)^bl=IDd+VQq%YB<T2bJ`NwcD+O
z1Kc_a5Ay2=6mviLdk~<!-4mVh?=Y4hw&sl|&AjddrZt8@h!?cm{m6g8*8Qpdm^T9G
z<IFb#sm$^>g2>9p@q)Q}5xkXe1~H5k+{xbz6TOCQhX0!dbt_7d{~rq~%XW;Wmc@3g
zj#<HWoWZZX?RaB9mYsxuwV>|pAl{`|c2j=LSnQ@c?iB2%xnA$>rbAF!VNjpvmavQf
z#zI(T2>(7TD?*xeFFQudaxW*rtZ*+k<=6gR9@LL@KR-Lpa=#!yw{X9(xORWPsJxf;
zptyR*@}Q)Cr|_V(`Fj7LtR0o@u)O=Z)nP?HW6@#dF#o|JylPyU?WlTM%j&3R&aCLD
zcInr_QQg|)wMpz|qdWuv%Pl%?Jghx9ZaVF4vL#-*Y?lC@?-ZT1KH{iy79uyldnt$&
zpgjesL=Bl~UnL58-dVwl^}K6E5bJq2JZQnYTSv`0v`0r0i>*(^$pE`wCGe4TKqgTU
zdr+ppy0m?-{V;mCr1CI&XlibWaI|=TiEwP-*43_)&)<|!NurGPhtgZRDn13JqI*6i
zH7edK`S*FwuM~92s;*=WK`DG4sJx+<ov-qgt`-RE{%|c(47qVHGb~c@tZ*Ep@~nzH
zQ1Gt3!F1<cS0#Jm-Oyok|Iz(L;E;bd#QUgzA)>0}62A3GyH$OzCxk<NKF|Hn-S*cn
zls7xyi;M&g9GcPu4qb*;1dcowDFu(c4~zs){2$T;PlGX61<%66$(?#q!jJD{p}Vw=
z(%H$D!k76Pw$0o9rlrk0=5<eh_SgHwpANQX-JcHkc3Yp0j&7cwj?d6u!%wbWc)(BZ
znA*<IsjMik(wL%P>n6@51x5v>+U<uwZC&yXjP|b`nxC9bJl3L9Zn<Q|v6I3P0tM*3
zRs{q(;qNdu1FYTO`MmMemn$R#6Un$ehf9_2RW%BbE>q$yefw(%opvOH?l>|tdjFa^
znzzo50aU;V9B_SvK?pHEeWg?&>c>o)l-q7$ICJ}Fk}iyAG$uXojVq}2*pXi}$)eFb
z$A>Tx8UwA=Ag?OF;b2CXpmd@~bCYI=6bjP4o|HuwSy97LV-Kdn1oms9+f(_F`_SN$
z_`i($9QkNY&q_%WE(<n^it+I#Yw{X!Ge0Lv@$qMx0t~9QevHv)`7EkDAE?=C8f$Kz
z!?uj~PQ3SR+$ofS$=U+PAWbs9$r{4&a&0IGa6!?zgv>qkQIVILH?jQFAnypil9FOH
z`ET~FR}~hOW}Kgrw_#?Ctqq}eQ6EzV6tnr)Z+V2y$DboMvcd<R%JzqZ_=nSeB7G4m
z_6redVpY2YXNij9pEQ{MEcL#|#UHoE(u8B7*qFccB~Y_boW^_R*89#OLM_zmjGkho
zR|XSb{Y!`@8iNh&%|pO=CJSFMmJKtVSz$<c_9Y1$!&`;qvq|!9&Aju+&xm^=4Za=C
zybv8mr3u=uLcOa(9h(dwUi<G-=c^)P>>`~$`I$=R8iE=@R!yh<$aJYIL3FM>&FRJ&
zC}mg4*KKJ7CW*J-w!BJJmzm`+NbwO9y|7|{wXsSeUNb>05o@%SGLimlhd4ini`$sS
z%SE&_`5Dr%ZEHHLCYoB+>k_#dS@U;8=v{-`)%i7699lzqulo<H7(I{l=SlGvW@<&y
zBTB@6H0iJBcGk5Ss+cuN8BCJ`>Y#8XPP2i@r8yHoW4%P_k1@4rh-O{=?h>b2#bV@%
z*DP==wZyS6dBrzjwgF?}*!f~judsQxu_g7Zo~=mCL)s11IYPYdC8CWa;8nMWUha7$
zp_h9rQ0BG0>vdv3mm^Bt8FJ<4#Y7%*T)5fk^sd}bNOApo1=LN$xhuf0Xd)aj(|swy
z?Q@ln^SsUx=jwN02>0-;-P~>O>-CrNzaD4EnTY#|_)ED1n)QhtHu_|r#_T_IZq-~*
z_o?M_DHj$`p_GFLb^W{nqN3QGLqCYu0N)d~xwpd;NRpLze3E7l{a&PRjWk`J3-2iI
zq7u*3IsVE?vs&71LZ5H(t?hzC!&A)b@rcJmZ8ziTj$ndxbmJKYd~qyC@nC)AshH^>
zNkZ5!c)rF>XBu%Auo>d3Qt|wzGy0jQP=u$wia#?E`!kQl#EO5Tk<``bD&gif+{oc<
zb{f65oa%@ajrbw3Kh3W)-e#|RzY%Fdxwkr=BjO8)d$E76wp?ih<Ld+3l0(a{kBiM=
z!bW7vy?AxSM+Ue|wVoetN9$TAe!p;h@n+@XnokVXc*cwDaSi=NQG>Uj#m_IF=FFd@
zYo?%p>RXW)fZ3Xlv7&K7-rF1VKkH>lmng$cQMT&(Z)@P}X9263h~ztX&?e(NHoA$O
z`}N@PZ?^Nuh)3Fi{sxs_@X?^8qU4qJgj-^t6~fH2PMFM#`X32Kgn324eVNynw)x70
zMO1aWA3xUG*CTe@S-=AvxRZT<D?wE{@W>**(QZzhpzbxvp}6Pm0>_G7v%le<W=50j
zA?KI2U9nQgm!P#*QnyO&6o>3zM>cpT9hF2W&jnr#ZqcdVDH>3on|vABq1o8(ez9=@
zJ@MT8#^dbG?tEn~AqM*b`rdjne`+2mYNiKIcYAO*1gt3`;jH;?kil>JRa(#E#~#^K
z*YC!|-7iBW{_JCBl<9c2P*=Z9vHZR&y^0%u+o$q$o(zA4skGhCjy+vB!T+3ww>|Ev
z!0#8~PwrrNx@I~i{7-NPycht{qlE}dLM)-Ir~!l+FyQs1D<WfrSMQ1;;7Jr<2e9)b
zPVgkH_asMTjBY(inH|DnsKKgUjE?`J3djdYAmVg*0NwZA{4lADbpR5?<tq&Ui5UrW
z`ux?5ruVcdQMsLHzcHpD5CzZ2{2M;I9VeM462gnh>8GQN{``%guZ+2`&boJPgs;wo
zJpr{Z)muc{h{!mBKq|rbExMff3`hh)^c=8lV5VQ^<hmJ=-pl%*8~dxk{0sz<++hCh
zr~!J+0aQOQd}01p{a}+@B7H|cu~+_n=+6QK{elFgo*4(m!@egn2PVVBpBww73&QO)
z9Eqa)1D|ne=Anbb>%o!vL0QbNrO|yt&3!BK!BsHABH5tfX{xe0tfmBT%N${wdGPG#
zpf1>p0$6a3`D^W5EY6Lf5g6K7K*&V?YjQ3?1I(c(0NkfTIKUh_i5KGJ7@C0>md6#w
zrxv!<j}W_t?9buO%Z4q&UQ-%}UJ+y6+=ksbN|M@PtjvX96Z<(NnC&?#C^Cnj4q(Ik
z2~P9FMJ2*<F|hF)2nbmshKc;++QVNAgr%;95s*X>z6GK<MG{0t(p5w<2}R6qN3c5K
zu(J?w7Kkx&g<}du3u;A^ev8KS0a6!)(GFnH7eq1!Mk~r9u?$2Xz@kZz;4!0FK&AR<
zWv2jik^o1+00wBZHVekP1`L_`C^?dt_v?`;TrqjXaY<Zp{JL=(cR;1P*b<aje41F$
zbS$?;ER97xo@e}bB9M_>{9Hn8V0~;13}`9mZ=Hx?dlzk&7?0H-vr23h8i)~25*ta9
zz^fYTBNy#g5Ew8JWN93ken;qTfd_F?;jqJa8x!X`9}*vkp6C>xJdh;76`yxURiKMk
z)S&v3i!-euIiDmcQ!uGr2jnf6;$far9gs5U2nr5#sB%KDxr?vENa2@=h!y(y+X8*I
zAW7~^5|I<AOD<(q7kzy%c|K6Xv^*s*G0mqu?Xewj?Ua6-n10^?Pk)?Gf4WNt?578v
zx*+R80bWMtLa8#d$-ayLFa#OZI9-xDV@5jzkuiE}mrkyY)OZ(rE`)wL4|Vc^V$h`U
zG{j*on5TY814*T^-eq{<Wrj+>k<5T*qh?u9XNAVeD&%7<$;Ar>p$aFN<H(!3nB(sb
zL`yoOzA4P)n%Anp2xF1A<de@tT2CS}&U!1HlW&&2JBNQao?2X!Z8n}A$q1lZFck|z
zWej?WdY@}YnztY2V$f(=P@C(Ehfds>=em&RexLW2i{vLP#a$=Iz&<lpEw7S4(@~x(
z;2!6b9;%shR>99~mGk@^yn;_$1;6gI<4JSIparJw1x04?e9oH!W12z}iNas|Ia71=
z33@n%ji6%ZEDKib&_ePGd7P?3P|ZSt7PttykJXX{YSSwu3!-Ui#O?_K^)*_G3Ns8j
zM_3a_#X1*C^OU4y<h$QkH4Kt2kQOfOJLEbC%Mg@y3zshM7p_{8!sJ8t<x}hAL*>p(
z+sBI=<l-HI=&zme&MY0b^~$=yWj?~uA&vBZgh}C+j_;C?j*^HmnxasKqE|@i@q;4?
zhoX@l3dQUz3M<Ox1j}|7DnKq})I;9p@}_gUbd<qlOk|Z5cXS*N<S&zb$k?hF4$4Rr
z;wM<?c@@C7mY}i1;923ySLan#s#Qih6@p&XnRxK(S6tN=^%b~H&y^oyL|l?+A9DEZ
zYs&MhEfOjz=c|Q^%5|HPADrooFyoB%^9L44tz5`$4*b!I=)Pe_ehE%{H&nxBUzfvG
z=ht7&zEMYyRPQHS!y{Fn^|{`2sFXXi{%2y{u<n<O#!6OTgRgE$bQ7AzV%=x9iln9n
zXS=Gj<iZe_AhCz~^x%pNw#LhvI`RX`ghh(HhafL~s;VZ+nunkOGU^7*q>_Wil!N+*
zv!=_MrZVPQ%l)RJhl(h+X8ZAmu!UyMhvsoIv}^?`WC?G9xt3)zK)*}q&tNw7gBWZV
z!+Euu$8Rl>c1>oPt;DLWALg5OklLoG+deeFYbqAq5<J_q3!3Y}l-CN_PswfEi>xT3
zZC`_#F&<;_QQ5E`+s^sg?Fc$h+1Z|BfwiE>_;VeU)~;UrgouI^2|GsHUK(CX#MMUT
z%fNP418g<fmhuRvVD-*OyH4e2Z2VXlf(AaqkDXA4t}=<PpvtcB@h-dDF1>;Xg929R
zLv-0<e|gsg#gv4i^X^c*o<g4v2`p<VMey4cW}RVlz2OKA_N4cUN!m+21J^xSi2VF;
z@8nKzCZNxsr`Jujx2L;Dq1ogIIrx_~v*R$Dv!ar#VvqY$H$8jb!gU|1YrlC)zt&-Q
z2)S(-JBFtLvv)I^FP3tIYl=lmN^vE8z<GS&=yG6;WN<=gFxFK&o*W}lkvTgBEtg$2
zA1id+B8+pXkMw#l0&mEhXUI`?==sl~g@mEA`k{cOp`Z}fPFJ*UcJ<zn@P30dtKlKZ
zrQy8u;a_+ooUcXzx+CNRgL8*H3)ZYl252janrjA88%v#A&BODe1HlHPHm;*NQKLV~
zN816zUYTRx+sE40#yo-J_SEC865|k)@o$jv7U;M~=eXV4cqL%Mop$1@#6*Shgqzod
zEp&o+X;k)ZRDO?@av4A^)=jGvM{g6yxIB2aGZfxF;c7q0g5AsZCys+6zRYCmD6xyh
zdhC11SoX%02uGqA_7t3PDog@C<zj-Ug$$jM4-6}gjTTQ6_f3bcO*;dBM-}(Ruuq37
zPG@cWevdtK#Xh!U{d+Ow_k7OpkoMnBCNmcyGuj+8af&mUQnOYzvo@i#rNy%uowGN?
zGqA%M7PMJ6>RCsrxi>a**^@p2O5cM<&_djp!o+4GO1R%~&sV*lcd?uQWdeAnvyjW7
zwJ+hC*Rqi3Mng2rShj3^E3mkVzgX>tTieoB*Rt5Wyx96@@jrQM%hK@j(&(S1@qc1Q
ze|f9h@?7fjLd){f^76``<u!_x4Y8H2e_}?k)Rp~~mBZzg<3B5>6szZAtCxnW*KY9D
zTWrp_Cf0_Lx;rsC(9)_M?HceH3FUaTcybl36*x4(dVTJNN4btr1%M%1Gf-!AiFMM}
zbwWzlvMAiI>o3=h0cnmzs*B7_91E-x8$X<TGZnGfZ5ugT2f2(kyh*2%LovCZe1$@%
zSIRdn=QdOBuqA9aq{5Ql+HT5z+geE6;t1Pxx50YnzA48sSHrcfAik+?xT#{aE#!`=
zL-|}WtW%kDQ}t<M3U5c3dq=`>N3?W%zyRAaEYQw&#G-V|#Aw&DYK@F*m+jj|NYuvO
z+AcJI_jGvM?08$v2+Jod$km9^OMJsI?O8a^9!=O<-zg|sc{i4mF%kzSw3G}V(#pI`
zo0m)Zk}d=b4FEXVXeq^cv$n|kKh>fFf2&ES|5;615YowL{olOsq`5~v>@P1QrSSFk
z8Mit&Ko|}F9?}<O{R;j>Uv5me`GOM>Kj%vr;&lFfiYfGuT2#(u6?+T*&pwmM)fz<-
z%iZ@MUii`9AP^@wN(@UC_j_VGG(#gTHAW`xYbHOIb75&&xk#=-LIqcGZ9`)dV^wuX
zGednxcTcZGt6ohXRoC#?cqaRROu+={=<LE`=(P0E65^2FA$w)DeRF>6@aXeyoFvNH
z`oZzdZPuyO%+(znkd;EG-VX5o_e1*paR`Aj60c<pclkeu^uhECvXxuG5r{*2(NC2*
z3iwl6gDDN?IU~vB=KD)RczG(xJC0zA!Cj=@bXh|J#38-xWS(HMJOj99f2cs`r{1z2
zPtk0WL6_O1{PXO&D!56UVKP?9qO0|0lCy$?zG{Qx{PeO2XW0i1SCIdMf=<9%*8-SO
zdiXYRqb-z<%q2y;^0Sd8OMJ_)Q~XX%>KpIIhxsDdRH?kjyAi#l{elux4`+_|wKlTV
z$tx?%90KoG+CiVMm3ZsFt#{W@en|8CVP8I+HRXh3*myNFRcf_5+R}9M_mG}SrM3C)
z0yb6jVXU>~pF{d|mA2MD54RTwt7Cr;=>e#SeI^9?x%t|E@<Jjl#34N~VxRe+ypTB;
z!3)`IVH^J+d7)gFn#rI{uJIRs3jol%_P=@IT`s1DxIHBGA6|$~tjd6dP4q9kkU3M{
zwG#sgDEbdC6mEwm{^f<(Z&|@P&^XJ&%w%Z{l#IMu=feC9F4cmfYG+}IG=)mNgVOj;
zFu0%@brF_Z&sb1Y-Y=zRP1nwNU=0TqC_5ci_21viRZWA*N@AwWhKgzujSr4W7p3Qq
z>Z`rj0_$OodYm!4wTLz5;h@!ilS;4E%lv(5^^?~0jf3n~fWyK|die8VmOSuSk$fk%
zKC4|cvdkl_BV5AztQ_m>Axm$V`5|{9MR*8H|L~~gc@813?%80(WD(DBSZxa1NXuZz
zMHWBX-T5f<3tFC0F|wwM9$~5x^9k9fkniI@SW3K8GQvu{)84Y!yuYROuz6>^%v*S7
zrCFEr`4on&uQO6(Se_HwE}}UsU5;>|v&e05BrN~v>vLE=`Gf7~;)UC4wC<PZ@3^tc
zG3w|P_FCL%E6QKSX?xW$%n9z0^tIJ+H|+zOGi)+cS@?Tyy1T)CAzGjFL30bvgH7c{
z-C<bG?)Qg7(XCMttJc-;5TyUuXAVC!iiCDFMYk`kFiNyv3TUm4B9@v(Eyzn_Ffkz%
z2$gsZhPBkz-By0vQ`J#hTkPY7NRitecjs%Ir#pq2Td%Fx-vC^Y{z9q<FmV`&R#oS!
zi!hwH9~(`aOXq=(>iF29<511+4b`+Ciby{jitRWn9sPQ#VnP<45uGn<@q1ML{tn`x
zF<+ui8a`w5H+mK2(!#E&xGu0lbW&gESM;<GwRw^xD3K&@G);<71KtwJbGuyIO%R6T
z_prg!_WfTjWO6sc-f4{BNt>{vk__pvviflcT4#TFt`Q?`Qp_C&<)MZ1Y4#Z};fJRu
zty6MO%NRZ4N2J+j1%Vra-_TZS7>nZ5{ao*tF=LHtd-H~YBd~y1J_^sfxRX)HiRIl2
zs%pMs4(kIl1iAh^wmc+<{fpd?-oklYMM}1`yr9eswYtkVW-gb1qG&mdU%U(!!v{(d
z2)FqTKf|XDeAA15H2QYHn*f>5&;}{PsO+SfAGxB`7icXcpu}3FT~N|pf<^9k-<GWq
zVFc6i>Sqv~&}1~+u~4!ml}yg<_##jcD2rKrLX^ynBdpe?f>C~v{z(^yhhZ+!PgoP4
zauZ`NkO3Vl(a{9X4l|l35ROc_5@i#kFl%L3sX9H^1mS)T{;6k~7_AIV1iar<FO61-
z2Udb;eDiG`g;l{nrkVJ2+9iD(HIASc`LE?zQA{kya)qCzDT(eVh)Mj8wfEP?%-_=z
z!<+twb5&FWF8Y*hIUbYttfUmorWq+bgZm?vWi2CCkFIM5bFI2i6hp<JM}AP@UV~l)
zU!~~UGUKJ$x6)&wXQpIUg=V!-)Sb()0!D>-bzLoRBEx>3;NrX}*b*2KikmO1zaSw@
zS3``>VZht7Fyp*mg?FxLW3$MTq6Mfu+MBj@vYH#B4XCBDFaCz>Q?PCX)2xU8vGL;E
zUfR{-PaAgA{8_TtJ7xA>a)Be#UTu+D#^%MF@t#so(w|0`MmGqujGMJ^uyV}l&=QpS
z)$QVT&Hz~g0Kh4Sp#8U66h+nlv5>jt1{;M4ODghj{2WgXjhrB76-%<7cv`KU0<TAB
z-WC?T@-vSO3h~(raP0QmFZb(xSl0Ft#N{r91gf|$8!r*}VMlO>iyeq(E!+yd>^(Db
zIHVzx(II%PWglYBzC1yFXRC31hO!at%M9`wpuOi}Z(b5+iWVUH^c)9~<lN@`pgY1x
zP-SJ1B8QRvqE*%Xd+La_C%*{INOM+Yq|2LKVHJr{Z$@M|)WhF=2{u3ei{CWp&yvr(
zFHs|5<(D}%hcKx(jX;M|9(&P07T{CeX~*&E3=}sr5iBMFInG!4LZSP@`J|JfPv=>m
z#jGA`g?~5g)D(=|E{Ll3Ayqv8RVMjt*&bDY-aogdA{`rwqW`ckH(Fa$aQe>F2x(YW
zI6yK$?$|#0!4ZoX;GJhzs4uyQj3#(3Ff($j9(lC<ETFDAkeZEcPQRx%7f?UOW%mGc
zS$%{G)PbZe<|xS5QJ_T6fvBet?Y(vMlbddlpI>>2$YqIF>$*GIzq!U!Z=F*L4RHVd
z7X2Eq-KTXo$gp#c-<~4OlkPNP$?28+nrT<~1L@cs_}ax5KnzAtc8?aMoRURHp~fK~
zH08E=nMcODf1BoPTWI^!oW*Sqoyx0MAmzuRXXd)lxUfyH@~`}h-OcxE4_5U?esA#=
z*v;cnOmLtY`{iOdws2>(ty0p)<aJdY6_u5rFMiPsZ{l_@4sCptn3#rQ3`M_a-VqqP
z8+CcQ_&<mAPnY>BE&JMI_cKjTS0|oL<)5k0UW~gBm(L<$@`TTiUAPl@$WGx3SK=UV
zxue$gd7Yw}KtB1G0>;BzFY{FX?CZnt=f+yEE7C0}9J239rfUE4LS!}wfLOWho?@~r
z90LD=g3|sG!!!^Jvh^p!B^v-ZC4oPzuHHp~l+jNWOSoKVJUtS!l+S0Cfq7`m9|2M`
z4Exm{7rQT>&<Fw{kZ@j=hdg3z7=$7c{S4|EIHd}zCl>a@VwLprHdVtk_pEqEuz>7|
zq@ztB;mO5}#`_HbkQJc%?YT(g&C}ua%~XRaL5(Wki%rt!bCl*wW(`s(A>W)AzYdZh
zy002DA<3NgN80xig6fF>N@dTzIG!Ub-ZHrT^ugao;``=DpyNw?>Vp*Pv*J&{OYEsS
zsf}yr`#k~ili+KR>F?6-QG^e)K@ZTQ4IqH}l~(|Pbp#~n05Dfzj85Qx#LweyQ7$q9
z2&nzPUcr%ACLBV)fETiDv(Wv?+Wqqaf{I`-N|~v$9ld>Y$jG?R=0Ez^+~U{e>y^(T
zh1`-cP<waCVxMt^oJIx{83##q_(|R37uJWku7#W+g%VN+Pno07$v$5o*6o2IeGnvK
z#S1gy4(oUyMr9W=C<$!M57X!fJKqkYq7LQ#MsUge?7E(E$sB2=KKyYmT;VKyA3p-v
z5PW7HV4?#?6(T}Uqy#%5o#qqtzlap&j)bX2zJP`^PhkGekL2x$++B~v)b(VM1ko1|
zGFnhFH$?P!>T)y?yws)SwunT=0A1)rGk=TTij1Zzh@$!i5>F(M5TcYyj3Ty(k-;F4
zD}d|VIs$jipEI3BsIY{9>q0dGfiIj8R^!-RyjZW_vCM#|>2`cNmbfa3IH%8Xnt^ex
z?I3G8Y}-2ug#x7a7;$2%@iq;yTeliwr?FK~mvC78JbJ<rbAlLkJiD3&B7|PnpCHN=
z;d}Qbavs&8K-c#bCvJO$&Bqv>#6*Mg#8;DCJ`HG^5=nZ-NqGfa=V)loT}d))N&M<u
zM9fjpcgb&!lj|_J9vlRkNswFbk^!c!+ja@nx+!J4TorrP%>yaD7B3qLtcqDur&wNg
zuq6MePYIf*2YaXVqDDprrp{Zu9GfS%(v9D7qN`6#doGi97|3wq<T{3zcI||P4T7iN
z4Pc%mn*3?Nydr^iL(-A=)5|fSXr!3%1}G4m0zj0{ol_9y^9KyJwi^l((u8RYz>4$>
zR4zafUnczmW1#<shsxB<Gg1S!OwRjES0G^Z4hgLBDXv2;ry`>pFT}473H&`%)e~PR
z$<<CRSZojp0LnJ#$kgx1;w1$>WM(TBk}6nctAKOPX>+tXvh^)<UK+pD(|cyXnrj3G
z9TDWJa_3s;<(dg|n%@&yg7XmL%=z<NIs7~a;k*y~9KV8y9QX5_<?}`-^Io6j`I6>)
z1+n|=6Z#G22PEZpROYKm=4dnq$>;&cXbS`;@}n&av<ra)nFSJ(1%~_Z0%2%=UPnRl
zeLgRgqd>m!lVxEZX+fDD>3h~9k#@FB=V#@Ox%Ej!HI+s36Gis-MeX~XH47fG3y$&N
z0(fm^cT!&OAgCW)QrlSkakiLeoV9a-pisDQY5{Z<SB$JvIDB6qz*Ra^SiF-|0t*6-
zk&><s7On3iLnliZxy!or%C0Thw&Y3boJ+~H?GN-yD_F}7>zHpBo=t%BA6Zc_HOc|O
zCFpr2Rr22nh9F0J6(_8v>=$LEF6GBTsKjh#*e?0F`Y58HN=n2OWVS-B{Cm!BwxufX
zTj#u6$ts&K4mMrX0*g3^xn;mjm5DHwBwMv_CCl5P{F`spuZG}N3i|n1>(x@ptZEM;
znoU)h2SU1wzx11g3?HhE9BOoi3dyc(61uXyAhpjHY6B!|Z4ZdQiPZhjulwav=a^jQ
z+*IefSm*vw2O+EX5~=smulIAQ4@j;LYN`)etPgvrk05J^5@~3JX2p=v$1T<+S_!5g
zT5zZT9zSPmWUFN?SZpkPXe=*+s;K*+2Akbm($|TgmsK>-@nkm#gR0dS8rV{phUmLQ
zEN6uo`m9n1*cgT|Q%A@c#zbs-n&_u6t$!EM&+6kWF48SqS*<qFt&^d3C@^fYCGQ5)
z?JbfYSkWCR*qtcQoju@Ou+d#Lq26G^>FyqE9u8>#=%Z{GA*2-+@F7~1Vq8!NJz8@z
zhATZLJ05NbEk0Hvc1Y8+;wD0CS`x*0GDTX7ViziQS{kfoIxJcSYY@_5^9#l12}}ki
z#b`EB`j^8|yu&oFhVcc8X@rKOMM7xAQo>$a(@2H@S=d{+hno)zJ2^zj-YC*2En%v#
z)2OkBYhcm5$0F1|q}Ig(zB}xc!D^8^?D?SBqHsvBuNZ84*m5pZQ8?aHmE60ekYjhy
z7RB8c@6sm@>5D%5?7Y<H{@4d0@Anez_c7@AbL|gE=?`k|4_WFDBc}$PN>~qpM*JnX
z^ywo*B%+%^sCa-l1BOI$iR5B9DD`nblVI>})0RMM5b4LjTd%<j-a(;u#3zGqfI|m#
zLxK`R7hT3}4>a}U;*GAL=4SC)cKVJGu`X*+54m_BIsHI0|BwM_Bt&csi+;kIe@YSb
zyP1FXk#4@2Z&4JqY|X!VNVo3Fx5*CLF6P@^qT6fcJs<}ix$>P1)14{um8y=3d><2u
z8q=s6OIsR*vJU`l1~q`=`rpTq-3C!hz>gukPsMa#F@7w=A(WDV7t2E=9D`&w!xX85
zR7b-!6hm}2BMhlSOh+Ru9K&ojqZ}o}FONpKIYxMG#$J_-2rQ2Yag2&^Oo)|?zE<KT
zOr?8f!*hWJ!dIG><S-n2gU$OclukyBNA3?$0sHsh13=@5`+W&eyM;&1jZVLX+b|XQ
z!G`Cf4V|eC_h*i%FJe4E<36s+8T_f4meU!^E@S%^+Sd}Z*ru~|ry$1`ZVNFw7wqQn
zN5KCiPXBbe{|9lh6h>SG|8L^7t9<ge)BX1%xIa6p-U@LMj37?G+5axof=m9n2qxc7
z8iQ3w4BIxX+SNHLm(gwBHoK3#uAuzo>Gi`6u}}-J^Y9J{)eDS>jEWWr4vSBC6O){h
znnshDk&&LAlbe!R5Smw9QtDh-@vE%5rq-yk!J@9YrIo+2L%$6{oESO>6#9loMm-1y
zCuK%|&vcJZElAETuQV^NvyZPL)QvG)u>VvyYVJS$|F3SWDg0feQ)Rh4So43YZnWDR
zOjW2WUH-pSHzF>A>nk?<BIp#-{zctbwL6Bm2$nW5=JT7(9m{kt7k;HPUGmT!C%E`3
zeIZ4DGpuUySNBRQArcd>sQTGjGX}cOXmi5_;v!ffU3uBbbJL%gKK~!$1d7n09*6!n
zadNptQ)Kb@hd8bGC{TO+B~E9tJgaaI<mdfH?)PV35DPU_*+B@F^evUw1`G4L@3qh^
zh7a+tIZEGtUD$fSo&^lUpFVdE5YQ2rPaDYi%WET;vJ#dY%=e3!j)`~2F(b5g9hT)I
zVmrARfd$-4ijd{hp=Xfc*M&wEaI-LYswfj|$3Cf9B*hwB$LG-N`&p#NXL(wfxtU6<
z?<AdMup}kfHO?~9f1PoHx<BmcuB8TU?R{~!_mkd*G7K^SGXFdSFJy!yp)u2XNjK7_
z<4RcWA^jn4$j`YHx=+lFRCboliNqP-i-J~S^n0h*-qYj~mdGEJq|Jlzk^Esn2b!%<
z!qVlP|4$Zbeh=VZ8?DvL4*x9FrWo2G$XjvAvcO8CL;zCbfWExN<qTU+(|zS+S(_50
zu|#_=mLgXafbKD{6BBp7yemb5yds=XLo~4G#jg1&@|oo@Y9GZE%(kC4+@P}MBv<rg
zki97ceSoX&wqn?K+@LCmX>-_rR3tB<V(c4$f-mq5;gR2jOt>Sjm3&>tk15J)@|tPQ
zKG&K-UHIbpjEUm%Pk$BfKfZIOrsg&C@1d#JzH(LAzKdTKi0hV=#tj{ORI)+@z|JQl
zYYQGHc=c<TD~5s+zdTw5C4W&pIx_U}9p7vn^Mwh)w_Fil*tWA{tJW5EJhHPyp3Eo2
zr8T_pZU@+cBeLnLAg+F3z4r8bpO#_m-!6iw$^gKBy$C*OhA|J|5NyE2AniXlh|Z#}
zDZhoM0nm}vByPpq-wHQVBzmlXU{z&-52**E4UgEesvfupRa6!7QsSYfWuk-<RJX{2
z62M=ju4viqaAMi$8=Ec2pJ?NIW}S{lLoTmp3DghP>g_?sr$8_kRM1wvGcX0um+a9K
z9PLSnski0JMg9?+4jB@%#^n!~_EV;<hPWo;`H;x2^Z)9EqTJ#I%7v`+IaX3LnQZy1
z8PGn%{PgY*d>s_5n_{9;FN^eY1{9)Z0OfL*qGmHf4*eLD!EW?Q8eV_qN8B8a{u7@_
zWN`a6Vai8VpUHHQR+NZUUeou-ru}d3(cFGksL)Z&Q^`)|h(~8<Q{r>^qR#k;Cr)R(
zsSC#6_^8KRReT~@-bmBPj1n(=q;oO28@$O^k5o_GHo|jCRWJ09vy=QpKLr{#7LSUK
zf2+bBsw?;Deo}Pk(+;D{KnS4xAZf06lya0%$s%krG3NpW3030XJKelUi|pZKV)M^G
z@_2hHr~;_A<Ye0B2rb*%^9U{*RM;k~;*Mz;_>qHr0CorINS|T&=#3l!3sP_a9K7te
zo)Qz{<eG6K1~BQs@rfYH=%hMg3w(LY$p|e#yuIokp3cIg(zR4B@3Yz0A4xS*?5ho$
zw=7iL_CZO%hB8a2_f@uir!|<b(4?=lG!)LJGillL<w^=cnfDyo;8-fXZA<O&#NUNM
zKZ`k0@|mg|-$#CoC9)P{tItgeD{l-bjS46lJ_Td69A9OB;P5v5w)0!|Hn#lJyB=e=
z+NrlXoyBS{2Zz^RrdpNPvZCF9A9$0)N9?aDn;#D)MA`J5eQK+#t;~$o9x&e~1=So;
zbF2`RLlzdUYwJf!Y#oLcSMIOtntz%<0|bf<ldK8%E0x;E4=wEo-!zQFLyy15Zu(-l
z#c5bS1O6;p%s(*GZUO?{I0ywVpF9~ieP|DN7;#xS^;=gw`1}=joNYz5N4xd1q|D{*
z=i2j)*%s4)DYyCL)tk|v=JP8_PwZyOC$Et<WK=FP93R~r$+>3C=Wo0pFq$wu1iDBW
zHTf71)(^b|yLZ2x&d3kX5N6ej7E0N9QLJse@XzZMH?7dJ3Nd;1L8<Tk_O}2x@>kTa
z-}jR;R{DNX+%)RYl2!>rFH0f+%%RpW==YO7ZlL-<V>T>0M<UbK#0=V=BdU-ptgR)i
z^_l&uA7=i^SCL;x)`%(D%P(xWD#ei~GRJyudEpXx%Rp%>g$Zj2-)pWbG#PIoUKHc#
zJD$)T<^NVU{*BrERX1vn>}xgM|1J-!VPdCvp&Z>FP`Tq>@<zfc^5`C;Wd|_mZiB=)
z)cH$Z4FUwVADW3g%#VlFR_7@lSqg|ab#_T2gpO*VzdoY&hV=mGLx==>5yY<j7^@`}
z+1Q7S5Q$ts<6Myb2Vv*($*=DFEgMpn9s&~KegVeY<rBt?hniF(M>_O0Qt!M)U_GjL
zCrQVtA05VWJqAAtBWFO+i^q+W;?Uj?J>NteA2+YuZxz}Q(uFuz9Hu(QLC|zkBqG^u
z9?&rC=5s6%0ooN}s{8r~$5ws^NW~Oh6&ia_>7VtLX0P;{V+if2eV!@OzFM0gfJdCY
z=q1vD{1`s{J4(NAj$#<bxFVrAIN#!KE)Hd7U1q-EwAlqA9ZN?%EX5yRgl@W_J8M4#
zKOJ4Pq0yXrY2z=R89P!_yPueRao&@*z3vrRJB#@6Fr%V@Vv+~ad#ioG`W+k1L!tFJ
zno$fbJIr|^ew{Q8H?(UJ&qc-G=*pK%tn*vCQOQZ#P1o;6^AefIe->&o5&{BiCmYJ6
zbF#;fnClQ;7$yaZY-a0lF_kxs#p>rJf6trOWbS9Xum=`4kDCuZ?jLxC?&*x-(pnl2
z5b@g6?O5B>%@`d1^niGJ3h-z{Ge2=~<D~W=mGmHcCV`sa&I6@AV!~s6Z;rAK;gz7p
z4-m$j17Yhxgt%x)(D4L+d-9@sFao@&xYZ9#zbkKhQq9rO+~U&dcyi{0hzY!(xV(`+
zdJ3G<u`p}UCm1s(0L5YW!h(2+ybZpW_k*1efsVIw1pVuLb;;Wg>gCjm`MAo&cyhO1
z8a%#q?|t$4QBb3N@5+5?5im-E+AILqoY@-@>^21YkumrYn?ckB{Sh-VJ{>Q|1poaS
zf6Y06sayXfln-9Sem>^DSd7MjI{v|eexdarelV;3y8Y;fj&e2OcXR3|MC{+<U`(+d
zsDvJrQ4jwZZXOuv=x-wtSkSK;Z*Gz(>*sPF1bi0E!5^#%3CimC7cmcdX-1i1j+>qD
z+b$T$r4?9SACwS)Mr#&)>k}-J8=NN?a-|yb#WCa)bqHN8zIabaB{71^hmv0gyVt91
zCg_fTLFdlJ4^~C5>2o;?09~NFUOR^W&Di`ynGnWC07(Q;C<0kG0@W!3QRoIYL}1NF
zAasp*B$0?hH<51SbEineMKEbYB)Ob3d%qP0NtA0lp#6OmqR`#`6O0M~FwaMEIz^4f
zlaeqP^65tNlNc)hj7Ai?1rpU<y+Zv^VlrrA!rsNC(`a1YV32GFZ+wht*@#I+g2$dR
z$0ke0Hk!pIdd8MRW8*twLv~|hk>aHLV)|*~d}ZP~KE}Pt3AoRQtKN-^K#Ko#8u~gg
zE>$Al#v(o_C%%*>-mov82O}XG60gLP;Ithd>Y4C4FCn-i;r*9{%=LtN>cjxaL}Qf1
zH-U-o3KC@o5>@sR)i9DYSd!k$C23nE=>{h07bF=DBz@RR`iPNiDiq)(mu&Yr(a$qk
zT_WK#OY#?s<Q9w+tDIyX$rRQ0WQ)CID~!OJfw;PYl*o@MDv%T&66|pji%AmV`FZ43
zo$v;yR0n^HwF2UKuC(BWRLFWNZNrQGc@B=cv{RDwbD{K0-Sq#lP$Pu`g`tRr8mcoC
zJqh~tEYhh13YN#ixktjkhsyJ2v>InvO8#u-cFu)lMDIEmsF9*c0O<8H8J#nklQLNw
zGuan1nS>!us-#$JnS6R#{LWceYZ*4&01?wrHDdshD)00yiKrg0I2c8OH9J8)o9lbF
zN<=mnZ+2QoHrr;lG9ZVIE+<tohru*Q36jH*m6OtuL$R470?4JH%T1QdePNm_49R_w
zm7CO&i@%vG1jxgu%S)8Z!!*qkgydmn<t23FA#dgh0P>OP^5Z4*pG@-kA^A_4`Eecj
zR~z}S00mdH1+kI^l_mvzkb=t0f|!nik_~tPFQBl5wlG?<5NcA$11W@N7Djax#%&aG
z1B&8kiy|e93QWNDq%4hKlIB6?S}>?>kh$ZYxGRXc=N{M>#5}N1JS5CKvJV^+W}a9e
zp4w;ny#SouXPO@*UMyr<E(ER?GOaffZ|X5^Cjoc$nDz>Z55P=ELBJC*(^(SnMI+;t
zGw`O7@h*t?!IJThB@k}Oh~z>HB4b3+2cnTNVl0}8?H5Us<|qhP<eZip5LEb9lp9Qz
z(?ct?J1czFE3|=?bkvnkzbd5VE93{67)9JTtt!Y^%!!<<1TpR86RSjn@s8%JB*^|f
zX46!yxLB?HUojhz8cqEgEteXd<QlzTT;T;|Ly`0kWa%H-o|$42ejbYaqK{`0T#Le`
ze0*7JM^<OQ=<HexnE&yYI89~%`fG`%8*u%jWst_}<j(5u@#>wj0o+1Fe#y89^psXr
zn`53fdRiaICKUA$7_*2K$5!v7KolB`o9fcw8=O|n)tHT$`5M3R2GUrdPgHD$TYAv&
z<AAV2AGZp#q1>vmETXA#C`061)8$%IL2|<db@PQpb2S-JKO64gLu2hwQ|W1Q&m!Rn
z8SXS@O9xv^Nkq$#Rr8Tu%jsInLNMXRBF>}KSMkhx(QmEC60MiLbv6Qo%YnkD3SYg8
z#0cNM!n+}BOD7|I82Sh)YE`0b6IgFO8gJXTYJcU~eh2}K=34)+i{R(39mFXeq@o=!
z=Q}8eZ8-4$?dFXJi5iIZFB_KBp$h}%uxyy;=fYC!|0W72uK$N9ydnBuH*XO<{}qFH
zSXWmzEc<)&mPOfRGJ+rqr-&GYgUT2w2s(<$<6?b8yaM==AY%vquRJb-D1@Lm_z@xl
zqyG{GP<%$FHz+MPFCRNDGqIqwEDV}eRjr>>USD36QPR+wS6S29rBc_{m(mp9(mxW>
z(LFKwrgwBErh9mHaeQiJRp|HP?4aMm=IHX;!Qsmd*vPi;?rGot(d`}W$yM9A&*lAg
zV_q3l68wm~aWB9O?bJrbl^>2j&0zC$B-eY3GT6}_eh(+tTyg|&l7!N~_B5Cu-RzG^
zRZNn^_^$CbPVkG9>uKc<J+6qw#3hNG)_97n)fGKhZihJhO=7RS{LeY{g3uIu4AN%@
znaS_F(i-;PN6v5?4)FunYD->3T8fAX3bWbh);VHS)Y$VQVh|J8T6>s?7=(gX0iO79
z{aHe{Ik`fbD3~XvCx+Kb+T;#n2jLidfE{jC!KU&pB5X~BYYt{vwRkPCn`)1+D&xmn
zN0J?E>6=_IJ^nn%p04-5dm&&i+Hf&E6wK$L-16-Q?NpH!nyc8r^+|sd<^Ya3U&6?S
zcf`vvN(*P|gT*PquUz8qc(1pIB%sj$*su`P1Au5g*DJVpdpA-@7~M6I0Q9$Wqu%1?
z%pWnI>6zpEQF?WK#AR^LmkOZO>xP;!okwH_F_h0`N)hwR>V}96%Wk6cuQ1~Uifr6u
zJ(C2_<3>iE<$H(A*hgeX{rPn3`%!rZ@HvK5QI0`WNWPrGMA{z1H~vE=A)~4823Kz4
zb7<m@prVN`V~SG0(5|4?f^KiJqcU_iZMJw|In|Svn>k}<dQUr90FZ>ZeiPngHi}rF
zwt&WH?JK66)W%w1CvVIb<n<Tp7IFkIT6P!YQ<~=Imo&;F7gs#lTfEO2{Zf?K5QS{1
z(=u9Km{^Z`FjTDhjI9e^VZc~q&DpfGWsNod1dFVm+EC|EnC*<PiCG30b=NESh^&`&
zwPY67)KngT3{e^$GF{FFF_T+hJQ<~!fA&SN*}J?hzhWX`vWK<^m;T_w#9$-GZd==7
zJF_Apvp(x7#dj^0#4W?)?(60vXYD78PDvUd@Gb7_XT^=?9`xv4I%Y%J+_VRCEwW<`
z-5(lAjfv0lRE@H{2wj*sL{|b%$WLvY#jXm90jJf*I(cS}=~J&PB$8oQb9#2m&!?tz
zIDi1_x})nwyZ>^G2`ppML;uw==0<4DZ=?}yDBTc2&()5E`j+!<D@NP)Zad-2U!o96
zm8Ly6nNI=S4CP&G|5wLYmM!l>+E;2}wCvaC62ROnBZ)(VW32f={32NDs5UvWiH?9?
z0s?A#^ZM~}y36Qty8pY~1L}|fE$pII`{mQ^Wz?aq!2E~u7Sv^4DWsFFzL)OPWq^p<
z^CLEOq{s6cD%Y9P@(-}n_%_sT4A&<G<Ac^XFp@I0+jE@{sNjSEOhFY-V$J1QN(dN@
z;EfkC6pF+#*Mwza=S|M%i&i4l{`eW<kr$kXG2q`x^vlGz6R?i*b}nc4or)iC3Kdw)
z^G!~5xf@x%@vWCm3#t5?-;F*wN{*%!BX}Y(g_)M)hdB}@Tzw*F^ZN!ee@2h4T?No6
zh5*<hD9RnCM)0|K82=qH21BKqqpd3){RVRouU8jQ^N=YKZAYK#?OAvl`W6VK!ADH`
zOawwNK}?;HFGCcixE)CUo7e(b#$Xc9{}UQDsAGVUZzI|lJ%^c4Zcv@y9zTCN*qv{0
zP@9o9E;|B`!^#Qy-5LRIVRs*Mk<<Y9(s^Xnr)@?j3?I}-dv?A_di0=%bc72K_iqeh
zl^Sr0tU=X8)cy8Yc615_iUl~8y}NhJ{<xE!vL(tyl4jxebw(jk&~uk!TL{%Tt|RT{
z(C6YD<E>j#M7jyynlQFSu3gv^RO@a23(@*<&CUUMDwU`C+lfF$`}K=YG!y1{41*{h
zQAkjNNJiN+n#oA}9}rJ4(<_DXNs_1^n2c^AMO=CjNtBm4hzDzxi}fk26-`W`XCQgW
zjqy05_ntB%QtB<`nz@YXQ8aFa@XR3J0{e_Yt!L(JsfE9vzFmQhKF2mY3Tt4;{4A3A
z18vu2MM%+p7k~S_Zcx^!XtMO){Y#CMUJXDi1?wlNN9YIRBCa`hqM354D`}H~IvrNN
z=a}KX#S#^)^8-O;m1^~e&v=S-m9eU;(sC%xGpP00B5JFXRkQij^;>?6XVkoR{J%JR
z>%S<}cx`v+nW4Kxx<gQrRzf-i3|i?H5u~MS7#O-{hR&h8K|&g&8>CxNI>kBTTKnw1
z*8aSEpZ9bAgXh=#`QG<+2|9AKE;d7h>WjZPkl6Ii+Ew?}Yjp@xe?U^glL?wM(b`T_
zsf$bf_aER*gkpXa_+MSgrhw)J@oz6B!EPfxWGg1}p6Qh)c@OI(_Y}Llkz=nf3~4`g
ziL&9aFU~yZz5t$_&5}j7OsxHy1!8IG5vL>5aA;XO(>m9E<2Fp$WG{hd#6xDpX)A)w
zM{R9Ihh##IAw-dQ-3{bbWGcqEl$msyw`W1n;0|-P#><|s`Oe{A`c<jgt$SrrBBE-0
z8&iNQ0(qJ)*w^Yc=AZh}R%8MHO^+)mg%yhrJW7~1z{j`!@wXn=xC!gSWFp_%mpI?p
zO%_yjRtNPPt_-prsu*~-|6t9p^I;n;fh&;f4>@#tptFr!U(8r&Mt634tnFQaYXX@2
z=_L!(UJk@7gXs)ALsU>&%j23n!AU;f!+CFfHGIn3?*TPOoIO{mAwk&>xdJm8ndb_f
zlP<p>a199Czy3Tj+pct0ctdY5M720quHatHsPm0;Ns^#xyR$r-SlaH{4gZjqZB4_W
zqf^Dm;)>SOx;W>zcPxDf79U-F8%zJ;#+?0C%(H=HUGV43_|4+^BkWIavwk|aHm~$0
zpV3f}AF>g(;^XyUwUd`O`;)o|u4U{t4k;aZ@uv~ekv>A1seO;8{Mk(HDNfAh7c7<g
zi;*uAYv}Fjamq9H?fa=-#P&`nwyV<kl6u7R-ss1W%+D;l4^}0{L(NWUSxoTN-be}}
zegqZvvFz(I<4qfxy3v`+e9NAbBy3);Lj?Nncj0f1jSAscRRnw&x|Cc5t+`WowBfmA
zO5NR${tB~U?bY4!0sR;WYW?<=D2N+tP0#f5a{}uTyZ%SVnIE14vVL#<`mk41{I1AU
z9^=6(TB9bNbZR0$VGxh`d(VEZOzpUwmEKd>kvP1f2zh*->>(q}8{_lz+g(KE&)Z$)
zyHl(8(&KAZWDiuGeXQ9sb9-79P8>kk_++bpbyylkZ-4lpZ&peDk43Wr4*%Y~UGy=?
zEvMWEm_+~Cy!rDfH~saafEO@^=G9n9V(Ad1VN;xp2bjn*ORxE*aRj`V3m7yHhzubE
z_p1=0Xh`S;$RJqgK6PqOT1#yqdeq}2Jsp(^LE2P)R$HtzQT%pxB9h9WobkZd?}Mta
z13gS11rP*hvj*$S1*0f}lC*(u6@w6+!Mba~8Sz1F${{aILo@<Il5#>QIzqZqxVcpD
zZ&E@H8?AO~!DdQKNLqR)7u**pdQ<JNN8w@SJa_CbJzidh{U7zXe`FAJkRWkLh(09D
z69P$vKpP=ZbCBpuNbDu??H2nsb;P3v&bPJ^*b1Sks0f&uO9`b6(U?=nbEtnVIyfWs
zWtRSX<`kU0SSV>7ROD2Oh8yS0m~#<N<jxFKGJvRYH=>zGrto>>15?sU9`epq$!`6q
zPlu7gW<axk+yRK>P=8e8YE-f~>~nvlj4)ZBC)vVf(9#^NG61G03&1jk?l(q%zZ3%>
zGOX#tM75(Sj-|F98JzDj9EnFi29Ptm#1w5AA**6kR>9kz^yXa-<2W%3JTYRiU;+cY
zrQX=d-B?l(5%c}H>$%upbhvc9tPF4lT#!vVS=<Y<c$7#yhaDw7=q(jIie^4CY$m?<
zJie1I;Xbe3!vTj!MUmq0gpLAc9xnzyxYKj2c%h~^>iM`fs>EZF#2g)TB5k-myq{5<
zo<Ub4Y0CZeGk7A~K%9YWl8Qls8Yn?y09V-{sqTGJR$S7{$|Q?{1S_uuo2GbH?!?#d
zcvFxIQA0xIOhWZ#g2GtJ`>Pb!y#zM{TP}J$M~PS;UVM-FB+Dxp#bj#Y9v{XB5f~3g
zfVeR}2;*aTmKR5k1VUZ{E8h-rKu%?Ehg(*JU<V@Gj}cF0k=0(vM&5f#sefb;nCeOg
zeHw-<)@_j1>y?HP;|^lDV)JPuS7~GP=@Sy^QwHfXUg`f`k1LU}X^^q)m9Y!Y*l)^6
z%fmIg%(xOGK9tBj4u^g=01#yP{n@<j(-L0|WC9qnmS%<f;RqX3ry;v6>&mBj$yr_o
zguvo7upvG<B8^fFpV}~sRE?0{JB{|5in$oUdQHPFiQsI;W3o@<F2>_EOyfu3396;t
zgW`!urakb+6Xi=2v&WNQNR#4=djgJ>8%$LIM==&tDi%km?&HdU)6^GmHLsD+_+Zbk
zAupl0I{QdHwJ@VWh>0Pt!2<G)A<_Z?vEsuu8${YL;MyUO4q)83P~^L7ocG>HSIK)G
zk`S*!95+6sPcx1$80lY(6UdjNZ1_6(Iy?f36ADJ`*P<Scp}4$J?RZ5WZHq)%iW2xz
z{9Y#14`gI96z70*QG4j1Tuk8`QC!?yT)I$PeqCJ2P*N>fQfpXJ?_Gkat~587v@Vo<
z!c<onO1mUWyA4Zwy-WKMrGw3-!waP&*QH|&WfPKRQ-)<T-eq%$vW4cdrG>KP>#|jb
z@?>!+mUj8Jclj=&e80K;`$G8-@AB_rgaiSApP1^3cg1Bh0Gl_>GMi?~3V_wY69Gr!
zja673RbZ*};P4|^Oe<dpR$?>4WOgd`v8uo=X;l2w!!H2<#;QShm4;cB&x9t$jSGu9
z6`K?{VI&g6dE`ZM@%tbJjVSNkaEkCF9}rTCs&k4FA|;R%QY9QRC5R{L6mt9=3JwUx
z7II}Dc2y}fLfwH}bCK;CAwuVd>^VQ%%SE_e37LTdt5FHugrDpUBdwVa++vZ`s)WWy
z9d2ht>R?3k_6GKjko5gGYFD2qw@4C?NNO*_NFON@Uw&$TBs6e{xO=RM_NFT7exrs?
zV}@tr>}uoFBkN4H1{kstBvnm^Y)Uc0gAO$r+vU2lHq8hFG6|cJCDpn7xzce>LUhf1
z$mVs!mU^F-Mr2EKOH1ow%cq-`4#w6lsn%|z)?T01eq`%lOY87r>&Ty}Tib+G+mun;
zj8EGfvTXqa6<cguzG0f-&RUoHw8`j4q+Pwe7m~*g$O`zhQS|8>zv>Uhj6-$FLaWvi
zb+j_7<CEBB%NbJYyARfhPx@6!`;CKm_f7i{JK&gK1+#*|n5R!AIt?EA<z#gbN&|4B
zC|Onk_#FV2J6&wjT^z<;Tpzo5(z-B82+V(jd37hhnUnAxT*20kbAyLWQAIV{pC5f!
z8k-41b$+H_YFErHGH2};a>RNNMGCmmyWib~@5l>mmFumKmAliU+gibA(QOvkeek*c
z&F7w%YdvoS2<3Jkm}^j5{^}7M7O_jCav1K_Iq6j)@3YeA1}pSQnDto+bR-ph&h6-P
zZ0-J*)hEu{@1oI<5`~LEden0|jfnbbzxT)d>hjkpN(}7B>+ayN=oiQyKrZ#B@}dW_
z0fR`Q0qU&&?9~B&v%$jeeGy%QENg?=rGt0W22*5*vP*lc*@l?2hYB5slAr?#Si=>+
zu(~vWpQOoqTZd{S;%a^R6OAd;9QlU?$iHaFnWhac+^21H1kRU!xriM$BF`Qtq97p~
zS&;5oaY%tpbR0w_+XoFEIjS#`b@UsLYN~SQl#V_DaNT|%-BjT|y%UK2HRgn9h(KoS
zVt9m55Et-ei1Yvok{J(<AOXu}(cF%1WC1oy%b0G*S$v7<O-vcTjP+|zu%(yHtd4Vk
zRsEtpanA%-q-^}bL0sSJgqY@JJIkb$Caz4|#Ogkw<n5$1G2!F4Q?jrrc|lOQle5^n
z=VSlwo6uo?hsgf^9kK~%6aV(51#KV#v$V^wEiNw!48ZhFhS{q<%m4FtC<7ms_a8*0
zMBZllil;%QgBSumPU+vO(1)O_w=FBL>eBLj7k`c)e#EFk(E${Wo*|*{1FhXcBi+3r
z7$Q=9LU2^_>+l36XiB<nGy+3J%9BgVKxxABpQII4sAiSc)Yjz`Ru+}iOO!XE%vxGM
zclYSAHMXaB^>Tk2OsW2YAtFf*j71I4P>jw;PAsi&OwX-^;E`-{k}U6du6;W`Dc%0*
zzPR+`;@#0H8o)ZgG0T-%=Zo8kYury3+f0B%=`NyAoc&bjH-r5WPp@2eq%L{_uNHWp
zv@e0D3U#A@3{r>}Ob_u&tuFX-m)>T)^?y@^{{QHkM5>ZeS_Ux$QC@HuUz%fML)m97
zm-N@o22vSmcx0Pgx^VHew1+hiuWUwf@1?wM`|;4;FUDYKd;9uKX1d0ew&d*%lkL|I
zucIHnKaO`-`)`Q2e+#-F?;w&NjD|5bpUF-XD%`wXzdZZ-q}oC66^4lPaJ>)h;`hlH
ze!B0PgdrjUe_d8K&aT|seEeIl_lVmRP5S#b1?+>v)fj|>#{e1p2v$;&4<_->VFoR$
zrY>oT&0}SUu^ex*TCyfzPBJnhP&rC>!|K-~xxMri!h~mRhar!)8_A%Mz1<B-LFoBL
zY)`++X592DWHVl@IgTws8%klB_@dgJ1NPE7A}rp}ofj1II_#=Hk<*lS8!kl`v5jzb
z9@s|O1b}wZEMrx7(iM#(b~5A}2X-=L`a!!{l5-M4@Q{om>zt^9Rh!({XcpVN#K)#6
z6QJe4h)CJku^s;;A{DE#`MLvyv2x5_&h=X0pZ<f0R9ewkevS_qfaZTgm*b1Gl;P}Y
z{1*{v(b4YhT=8tp8)<-H!{2=q61pF+H@#Uq%_a(-3$|QtBg<5Nc(XdaK5`eqYP+U!
zJgfs>6Ta(s9z_PgAyCE`o9}@8d)hrkmJWfq>fc2grqw);x)>C6<olQl)5^l0n|{<A
z&`CY49DK+=>_R29h*vYfmG$x67xEOK;)vV9_X*Grc3Jh<GcwJTajm@7nh65r+`|EF
z{%q{Q7mNaOJs`=oQ)7b$5!YF{lK$>FNB2(Ah3}slA7wdR=of+1O^MDCCek0pz-qr*
zJQj^#TnMhzlaLfH3jH>b#}VR>w*DF}sl~gMjQ-ky{;Gk;((x|>y%0bwp7L=|f})6Q
z$G-^l8M52;rXy5K-4=|1!%o+=i^CqVpB+d2vuv%z$`UKmr{j}dm%1~wF}~+D8vc#a
zUn$Wtm#=6>By_eu`#!$TcZ_~<W7|&pgm;ou(SP=Q<%!yFxq0U4>zyaOyzhLUkY`N*
z^*gj7_X5GC^f-*DhyxI35JjHp@oSrgBTby(hsZ2^ZmbSufVLIeowXDaU?OFKKqz0-
zQ_%DEu9!~Yu-H^qWqVtNJ5Ji*p$Dv_?CuK8(W<^lQUhcWw%yE1Yx0^es3_i1_XzJ*
zLSM!+6IVf!`Oz-qYOjB-$Jg@o3dvMP=~S~Y)O_d_jeZYx%A=s)04j-3#HnI5Ot5WK
zAA4O@jHE6*OT=lP+zd}lSS<q~r3A;*`xH;3Kj!sgIJ<WgtK-dTatTD})8t)_t?&HW
zWIf;+G(-JJ{IhU+w%5_cl$F?H+EHcw_reKB-vm!YUPgam-A4UaDh<&k=nV-@YG>k{
za0DncjqW)mm3l#6@_+_h`XpsSgI=^`0N3XA0}AB8_CvRbc5crTWQ=Tq_*vZ-w1I2F
zZg-I6Y(#~7a}DyyvPXKaNyumUIcR5ihxvS9^uyIjCNU5tdm}p*<o+!S{bE=CVoW>S
zi4dK0k+}PGOIs(>nlSgr)UMLxm`==V!aOwPp311UZi1G>D}Gp!hK<@JV&Swv{7aFR
z$KYhf^=Y9jaj|x|+Efn18A?U7ST|+=x#y3*BB~HR=DY=};^ML5*-m?$I>gHY!|;;V
zx13_@fSJnp9Iyp7CpJ~bOnviNnKP`!ct>rvc_At7vr2%;#o+9xYqxSB8E2^DBuCio
zkAz@fO*0&KeJw5;(MXt{g~*lu=+k85gfdGje%E;$t5@;Jw;DEXXY<No^}@Mj+II9_
z3#oZCawVFU4o1g@I6X75HG-;d(XNYf+cX?4J<r}@T`fl9iaq{(VDX;Q#rTXvFJ=g>
zsp8sqvLvOH!ZJCn<+kT(;%Dh0xoDCr+3XYZ^FDX0?VXC=VfD1$dZD%x!*_8H!<I$k
zFPOd`e6d{NSNgrL!UTBa;Pi`s6`OHR&<d|uP4nq0*Q;T60ve4wcjH%quAG#FLOP+0
zoKZv$&Ywr^D(Mti)~WI6x;>r~Km(tf6SiFT2uD}_PpVL9Bn{<Nzlzp<He-8B&X}M9
zt@>Vt)TK=xW$X^2y8GX%OSkN0n}&L_22x6htizp~hI=pXBR+rJ7Cm9>_#9A!T=~^0
z@om$=tiC4WVtD8A&DCfCNo^K^=B_;B^%z8}7M(-;Wmie+dOS9|Hji6#PtE9hB6Z}U
zq@FRZR>BlR#>|Hh5LwAzeUslNs38_?{5(wGL`zhI*#Lk)cl}RQXw&O{>j2H~=8QLU
zM6x9uh10sU_w(izUYxVM%d!s8rcW5#UaKjx((!v)y?}0f#MP-u`rg0g%Nmyl+qC9m
zchZTko5B~><0ej?7vsz8u@~$|ZC2hDiz^5Cmo0dA-}z0BufA4lWTgHr7gm_Ex-llk
z&Xi#dy`Wvcs=uTay=xO~F}_hBd)clzNEXLPu~{d4)uH-{ED48VtJe9dO=S69a^~Xp
zOjr}S+Xxu`Ep8|O@QNuAtp(0zPTSVyY6d3>fpb%IhE<+<PW23(YKxmp=~sZ^H6v%`
zKDXaYNn7Unw9c!Mx8H4_wJiKEs?gh?0i>;~1kWzJ7=Ir^p0%#ij$Zz)3YE^)6TITl
z$<R)D_i;O-8g8K*mw>bhtlgrx9&B$rmBM_N@(Bn3SvbLNl(Fy+uNM}VaRPfd)U`L(
z4Cz<^_+8)FJ$}NMC)Y1JcQ}stEq)oWpr3TvY#uXCetad({AB#u<|*OxTV3NPkLSfU
z&n+f=bw9q5S!3S3G}8U8ljbkIN3eOVKH;a+`bO&L=f*ENT{K#I$zSrSQ2EA#{I(E;
z?z@BKsf@!zjwcQxP`LwAQ6@|!Bjy2-&M}hHDO0MDQPY8FZ5iozl^FX;nSdbXO9s|P
zC3a6z&PyOSgn<{L#D7U52m#*Pr5Djxdf-VSN(U6vr<dSSlDZ_80Ro@Q(aBvZDx?xC
zUJ@wl)2a3=sso8NcL|=+QR+YxpQDIg&JpO%Q5fhe8eI~a^b@?%r!b>av`8hiY9z1$
zQrOKsbpR5+6(@M-N&epUsp}=!jfcR4humvd!6y~$i^BI$B`c|MD`?Qgd=N>FK^U+j
zqCGw1=LnL-BLtiyQX3=E<{~mKBeLkAIpWYfeQ1Fv8j4DV7B@mmJ?|Flc~;CpGw32A
zvXMbHku+hELCQW2vyq=JBOeF@DyZx(^7*l2ePUll_0o|xqh1W!MgfJRVCPX|Jg`hX
z+bN7KG#NG|?j6<(o1Rk-$B$k^v3%L3*+jwg6lwMvqvR*<?&xz_jYn@mU{)uDeYP+P
zvY5w;F{3U~E1offEC8HUm<cBqK^CB-HkPPJ@=TQaw~EjePxK*=RGaIcz6pJV>>Khp
z3VPVhd$(6>am@7bFZHN6c;kj`nb-`dd9UKGFPQ{YsqcXjj_J&~RjEV`;&((6$arIa
z$;RSG+<DAPEk%Eiav<ipPNL5HL={l{Y$rNVdoA%9Z-Rsb)r*KkegjKAUMhpDM3Ev!
z-7Bg$pk%QD28%r^D}yA)i6ptIWJ8I>{J3OItQ6~_L^Zh-4YL$$-ee~b)yIKkobwd^
zV=(SjbX<1IyAUuXFC(-mHDfGQHIFU^PDL6)5f%~Us+yYHor<R#7cl^j9H)X`sd>`N
z=FG$6KuM`OaJxh>0G>)2i}1lkhUzmT^p&Fq5CL(>h!=?2UCvLu%9Ta%4BONRXN1&K
zqR&N~9ZfMN6KRew(gq{!DzX66cIl{q^xVeudAMChM|$2IXk8*BSvzC935fY1!hn#z
zdlCG&%6LbXc|4Dgshqra&b%Bz<6Spp>W*dp2H{~oh_r;WKAfhH9OL1uWvN$Y5g~9%
z7|igrpBj$ikwcYU1!Ohd$D>utV&YT66$Y?L=KQm7!m%$we3c`-5PL+4$9%15bjS>l
zwfg1)x0lUjKyZpdnI(#I_quXru5m>N73CP171Z*+n&&Am;Hp9u)r;?H?&mFH=j$wF
zJu&2bDS1~9nm?bDZv@UZQR945%w)z_Fe_hR#g{PwdTb}j<S<w;xn5vonDL%L#&z(H
zn|&eCeIhmC{FhUO-A9G)&_WkLcBUn&EfD2cjEYo4>1?9vv5L(3id>xwbj*t?0*myE
zi<GyDP*@4YT71Pyip3db#ZRHdndbnX!9x75V#)ntTUqm@yy7Iek{8w`3i&0l&JvC7
z66=m4ZS2xe)>0wGQn}Dlk?hjDqS-R903!<&WBWS8;1|<|6tng^RQ6_zV2ZE%+Vg|Y
z#mLHO$Mfc2X>Tn&pOP#IfC{FqS%9<nu$(I{5f#_X6~7iLeqUFh4P%eI1$*a-{+&~S
zn4HS;j}`+ar<(FaTiQ`u|D(kq4%`0IVqmf1b|jDN|2wC0|4rh+>>_R?T`;D!xiB{1
z$ZqXlrZnd|kB{>r6i1j{1os$*#KD9^{AU;OcZ&hy8boCsla!p2iW84a^AAbIkbBc<
z6LShtQHZ?KvR9c!Rn>861=S5XCFL!x>XnThDYeM@&R$q^+u)E)d*5ip=lGtnY2tz5
z`2~@YnX!qWspY=8#qAx=uN%Fqf$QHowsucW8TStx4+4H(Rv(`Ma2_|#-b?=U<QF*S
zn!9pMA_)A9DKA0ToF|Or!Tn%c@)s3QCiFc!m#nHhRX&bq#l{2G`G1+x(o|~-z97Y2
z_m}?4soT2POi%@$@m!SzJ`;QM9R5O$Ts1tPTk&-6O9QL6zjqOPS#!-1j&n7(by1o_
z^<{K5P8;~RWLf{(MclB7vour=<FZoTqW}a{uJs9!^Jhe%L^g-GIG-;sb==<`#TIqV
z7@iZsYs`8cOfF;i-fp_Gp~|Uj&h`6ZtM#OoBV)r)t!598kGCz2d8=K56k;PEiH<jE
ze8e)#w<Jy>6GaY%=C|IRTa?=Gn1AN9T==aHl<1lN{@DKg+XmY9=UwKHSC{X`D%yp7
zf1{Pn)|oLRj%(aOUpy|zWMBdB?kbRk4lg!fKH_3EbU}NLCG1XDw`n+wHv|;KnmiX9
z##LZT0p+XrT!%0=^K3{kkJz%qQZ8-QVA8KT&0}PbbuD6_R^PXbQ&Bs%h}ZaCWtpHI
z^d6H_?M1AT^siGbLJi#ax)WZ94Rj}&CmZ0xtqb;WQtj*EILNgoUT&i2Kg4&^sj@IR
zl|RdtJM-h?EAA{O5(%E{&@RYs4lfV_$c>E`X3Gly;ROQ3S@Q*PrrI|v<~O{YC@QoM
zyzEE4=gj&Sxp$-(fc;N$ZwWsRuVhfM(XWBy4pZ`fl6$|ELSc6nUsYEF0|M$+!}y&V
zvl#jy^^Wfuhj5l9wL2OQd-=;FBeRgn%|$9><*mQY3Cp6ObCEQkP#UWTSiiZ3e?~<B
zKhks-YOfx&fc5T_!;*AZ%=F1(*p2`+;l>BBaPi^yeRp40R`d(JQFmeG3J!G{<YSk8
zKO}GgtTB6F5!5*-9!_LwBYkm4y+w>5-I)$Mt?oTC8c<f-{`9eo%~Y_eSsk@z0w49v
zmi1)atd1g#oXjY}gl*<gXj#3QDYu;N!YdX)$G=Qz86AtS9<7&Ad@vF@Tc5(0^<0a(
z^TVA#N{^&$BgUrl9IcV;ahG))ZV~7fCE&Fzv77ydTuh_DDB64fRVvf-Z%OSWEy;0D
zt|<<p7X75COHxK|raqw`_iT5OGJiPgRqs6C4B)AFc=AOd@R#buy*DzOkybF@bHV5B
zx0Ia@xPF%#t`!h~&7|w&q4h#^{#r8<?bm-awDR-{^HtaWdtbeK?f&|c$Su+Ui<}jl
ztndyRlZrr31}0n_#V7b$V^6DFOmV4Eol-{?!I&lvPyr=N7=0+uCY_zifs&`#9tjbA
zp^a~$UqCfMrq0}ImgI=~%p+3~ZnDlw2Jh}-{ZSdD)SbPykkXy~zB1zRQ#Pt>j&9!l
z(vVji>y$N+JT|mToQlM+^&z&try}MKk=Cv2gp+i6eAQL@wjbF)X8;u>dby(9yIBan
zr7BYjti}Wo<*^W`_RBLI$3iqVSxM<aP~;^shT^hVT&e?VhR5-#!+Bg{0|Q$26GR;f
z_#D%^viX7c6C-&xc#>jkb)nxeku`)*FCyes^MrY2)E29?sygf3aWZ%)Ux=`C=r#6Q
zO2=u6aJYen#WesvusM6*4Rqf|3kxwGHT%#)g2F)_3psyh_L0uK#=CVu+8WWUxPpO}
zYdmXu=bc5G^0g7}EXs`O<Ii*ydZT{VCz&d1+_D5}+9JT(EFf{G9Od9xnB-|T84UH5
zTWuU_c#6)U`@+L<C5{tqfBM|^$X5A@nr;D^TppI3ooZ6fL=r_&K7tQ`nPL1pr+#oY
z1qM9(E2p{@`sokR9(9BlNS+lr+RD-~0H%u#lSrd**Zr0ryv(J?M%gXxdo}M*;|EMf
znV*puw0XZ0DL9jK5H&PPF?>~|R#fh~wQiJ6Ih(O18tJ2{^~UC0k01Y)c(9^@S)u3L
zSB`oMQxjVvMs;MLyknJio}+_+y72HLotoS=flm}H^Nc~s4{~148mRkpO*(PaEwPpL
zo*L@SaShd|eh{>B9AaK-K5ghAE_V)BUs`9lX#DpsqWnXl`qzEKi{`m6<?anbUw?RC
zw5+<}IkbcDy}~^Bgk|2z3?uVBiZ1w`n#!7PtFK%ihjQ$}u)su>fSc=!_5iaE&&UAm
zbFKjsibHuUl8#k;smsp4OlcZxVCD`0trFcmnkX|upUclI1(jIBjsaL6WO$c}GeX<R
z>;CVt+Rg7*y|)xt=G(ex6CbIH_88u{dvn<*i<!fRYizPH{>iD;@hQWbTvAs9+R@d2
zw;1O0^zg@EHBqm>IW@7q**+HSX$=zQhGPY)*C1wxw^Q-D0PYSoX*;dfI0D*Hf_|^=
z{eTZY+@81M|Lt1yOTd=FCVPyWtrnf-6KJd8KsFu~R!h&xv@6elJsMYknkQ<qr}%DR
zGQIb-P?2e0`pv>rtL<r#QJS5$f84}+s3@(~7x2p%hUt9kvog2zZ&Vcvvqc4U)S+KN
zMjP<SDy8$%Boha7h4Fc$@OcSb6Kr>HaXK;BouW<<=wK7K7<hPIS!CkqyduoG9$jC?
z^i|ds&H8n;{$WeqIlxnF{Oiq&vsUiLcj>2#1g?ya;Og8d0qvfvz-NtJv?GUMQoq*7
zVj8=-wT_@hzt-tS8+*k@j-q{jZLp9w^($)~$0L7j@;qxA)EhZY#*86^W129vjT6M;
zuWj+srV)>klZ=~RJF=wBW8rA6(;UXzU6p6e6DcF71yZ+r+9|nk+Mc*?wXTHtKtLzr
zk(>NWCP}?fd93PBXAk{kB+N#!=Z`o8%6*v3?fSYFrma?aGfc#BoNvI}BW2Cp<aiz{
znoA{>Z^~*+etrZ?zr}xt_lZ05oB4~64s>tu`cC?OY9{`&<#~oTG)r)zIwfr*{seEd
zh2T_)>egE29^Pao!I{Df87qBKyjdTDbJ@gOOItMV;v0esnW;8&&!4y}3IvyuRDR}=
z72FMOf-A8Xek!S>xI2Ud*AEl@lu_-t-+mU@p_gB))xIPD!QXjP+xZEsD*qdj`UJH5
z4hHDD*M82QhbV`jZKqb`(Koc4w<=lwX`TLjoBp?e09$q}>_&QAPkDR@DUb)3P=%hD
z&W*<NU*ujEx*#_3AP)V1lY7P4A+)$6DB}k_!Nvsuy`*5t#$c~3fV;aDo~ftX84=cD
z@T&qN1zRBaP(^3V5(DfFB?D;CS@9f(XwLy2>l0{shE8jTys!>6ZVY*jA7;!G`o22U
z*p}D;Xl0oirigl>J`-lg6K1Gy>9QO49A)W&nMQarxTl6)u7<t`LM~;)RqMk;Y{Nj-
zmJk()gQq1d6@m{4m#2w{P7Sx|w@6NfqyjCGyAa>h2+8w^coh}`VKe}m_$Q}Eym+E2
z2Ti$T{<*GNs~=gf5~+a|nZ^U1l*9E(e%Pb}fgVAQI&JcwigfZsMI42B6x@Zp3J%DM
z9JGZ{17Lz??;f+lFzkax5!JJ>cVcUR1#wt*BV?GIwb%0rl?7}hI||7P*$9M1P!LV2
zFdd7>bacSJH&R?cVj5+mzKqBG_9Pr`j9F1|3UDDh>yN}J(_CDLmc%Vq#bc`hvD+vH
z5--tSKulw&Ik1TbJReb+{q8kRoQ7>IVB9uB=@Hl<noc5)k%|b9o{?Tv?vy8<r-)e8
zF5!wNK9rS8Y9Il<8!s_HB*&YGyBDu*6VKS6$lyr?&_*W`+Yo_SlAeQzUd{*V@6o+#
zaz?ArnG85LWC2X~0;%bfNoffU=!1$XlO4UlPFKm<WGOBYpbrKq$<8UBS3vKk6xdjb
zUlR}`ON$Ur4e<hEWND$XsnCJc@V(R!5Im3<E)s$b2AHP8;U3ul!T_;!Rhuk&gyT7!
zx*rEB3xCJ~z{LUZ(F=Xb#|@20HpoF-b|H4>5R=D<%7|3E7l7I#q525qxV%Vn6Ecz)
zseg=IqDbrF73{G~b5ix6&P^NWO8Wv59Bo26V0au&h*>yNHwWPOH2s%Z`pUe(ysGi0
z0W+q~u<mK{ZSU@ZSH_-%@sZcvldJSIUbOMW9@CXq`VGDDtrrt|J`D?Oj00xE<4YsB
zHUc5;5JHi}`?{ojcgPnIl+C)-&5X3g@$`nejB1Qb3%1N^x~vNf>`+_IYaMP$23|v3
z{$d@$LHc`qwjv0f2hH@N*EV8M9SJphDTIxTx6TtudbtI21$!MuL&hHw>4$sin)?E(
zhC1qlj5>Vz&kT`z&<q1`nh^u*b2Xip3>3-;bF=FpTSS3<a{&gx;dEW_B`}T6gTG6+
z(A~Sx6H(}mA@_P0&Td6p*_Z?jy8BC_eDzRa-d-36N8xPLWDg3;hl*W5#Y+}7G@z2N
zKc*szR(4PmJw@%@g-W=^eIE32<BG)ydlTu#;?ib<y5m1BhLZS~d{qDHyaO<4k>|gq
z#Z>B0+do&$zdP^xsw<eQX2F;LT+v%<4*c<IqY}4~hJRM{3S^#td9^Xz#<jP_V~Uv0
z`=zXA#bRLae|fciUwSZ^g#78eyM|+~n%rJ6Oj=BUV5g>M1jQh7a&wb13sHIW5va2C
z?Bc3wqk{7Ks2b|hhSp#llBUkCXLW78exFHO`i8w-I|jxlq&s@P^ihn}49)gdPOh$r
zkj#8-9a!3KSXn>#!Lzkr-n6iHT=xCv^$q>>Mel;ST+PML=a2n>luBS!W%lQAGWI`S
zZ8rQcng{kvC@_0p3=3Mp`iQ4GZy-TYB?prhIf;^lEC$mCu(&X3(Q08BlNS5a9|wc;
zfge!gcfz8zc#EgBKme>9wRE-rylPUHVB-=XqN(^x0EI!e^dLZNVku>TQ(dAsvi?U_
zo!N$bV2K!^NlO4$;K5CDC8|A;@@J=mK4_&^myG|FfT^%0d(6Ejance;h7^c!OOh`k
zt~=d;<M`hq-l7zfg;)>V+j2z@*eWd+Z$C<fA1uqed@CPfyo_4u^#?M)o^?5<?a%zC
zKXT{5aZez}qFt`dyYt(kjxFiE+?EUf%*FVh!hW}eSU~!G_j@@qzBGrFeAxc}!MDG8
zHw&53tUXw$PJes^i|I#9OT+XDDMJ-YFjSm&4Hx)&w=)E1Su`_jK7h{nDRHs8Ss0sr
zhgtaDAa`@9Y-#^G3$qf0EsC}ur5$l^y)igiiUK2w5xZ8wihY2u%Mzf-z>5{Hif_K=
zt0@VxioJ_ad6T5{IwGItS6N?v%xk49W$zb~a0R&aZ=Kv!`}L0P6tz$E%c<fcs@yE<
zPT|~9-u3g!nG?5g^Q@qAkuBFSC}cOoW&v)T%kmgp#B7GGTojhf)l6r!-&DUBn(o~k
zp4R|lFe^$Sffl3QyUgkaXNMK+2V=A^_GKww5vJwMe8pS#pBR9S3ep7({KS21{F~@X
z1T~>)O{d>Jo882@^4q$?yB!Y3^UDooH6Bcs`i-YB^>P+~#^KxNyUm3{4F?o0--%9M
z8NCDjyi5Jl`>On#avSOCx1ViWc+|kodbT?X9oQ%1<(+D`i)1~Tm?`~TBBSA$K0(u^
z_+AoXA{Tk?8WtBS{&x2l%tXpa^&y@(<Ld76p6rtm>66k9fGmOF>DW`+x2NMO+=8`O
z9&;Zb^wHV7FH4w8Xb0f@msi`=-`8!BUi_A9iZu3iWUBQA&0n4Oh8fL-Y1!eFD&HX-
zr%{Yo`&~?#d$juoF?_jRIwD{-K<tO-jGL4+`T7ZuA7C!(3C62E6Q{1lwpFAtcCnq;
z_qA!qCfH96FV{8QYY$Oq5<ZVA$;N25@BKLYRw;IOoyK~aWc=Xm6K9E^ZSVY=55@T+
z0yJtLtfZW%tG@H48kr;_#|C_8m;I+#8=2X0#vnmj*22hn&wm4}a^-R6XvIVHZ`av(
z{z_9uK}wZj(!c4)uzufUDpqsLMp~8y5Tw1qrq(CFp#IKHKD;`^r6LE#B@2EvX^KnO
z(Mh63;?GH*4OX|6j}Ru~;G<$CG`ehhAPB`?pj09f6<1&&Aq{1oH^cYY{X8}Aj7v^#
zjvJxhU1(<ip4bsWLE7KV<)lHH1X3qSz>4BUGgLxfIli>Q-|e{#6p4Dvz|Jts6G>Zr
z1VdD^P^_sa3w*4M_ALF(#9!GXeI1AIw7J1dFpo=k9v2Hq?7T}k(9a=I9T&?X&%&-c
zz|t=QO&ZQ4yjwJ&H4>0Odz#0iC#-r2J5J;l=HSy)Rb#0>#*nZ$1#F4}btjIK=^8ij
zNFs)w3|6PK;d0&!+*39Ri%+e2!FfOKYRIaq8a`r~FOqwu@vH3__UAk<hU}s*I^Y^4
z>Y??cPCG@b_>-h1X&bJ|A}uwon)LLke7s)JGjMfHM$|8^$6q6!oQ=6=q91U}ih7L(
zUQZ<9!)%^V?yGv;e;7Y?v!hTK`|1BpivTKTJWdhQoF6QKD#~gT@d(VrHH*~riYJ6V
zP?6!p@~Bj3_tG_==KBfHY6R;%r(UKi{5ZC!WiviWZhlZG>(;B?sq=!EO|(ef#9kS}
z&{>FmMym_Me_6sHL;an#*nqm{6{+n@sYk2yX47l>S9-6cf<(*W_4(1O3&PF1F3#>&
zy06(IX4{+wDq!FFO$XTLI<E&RAp!#C^mTJ`eDzg`pi*XLeuD+=`s(v80j7H;25`4?
zSlX?lg*+iWHqSvVO0&!!R{vNE*R-w@R^}M41TcuL7Xj_UojeG`@gKr4Y4Hc$h<^AY
zL$5TX1?LEV+z?LD*%*SBD_>4*S(4@GXyVPz{V=ceb^mvE9aCVgLF-NUkN6bQFPwNE
zZmPc)!7p090Ttdoi_0giw4aWddc4nc-~3#<XuYE5zr!@Pvi~ckbv5*d--fQ~_MN#F
zteNhhwKI;(<F(Fd*dYg(MlwDr!RMiAXX84DHJN}^&tp-c@U<<ouW6U=-@fJesT!NB
zB#M8kpBA##TS_dKOz2ZPI=UbDk&2Z)p<hYlzDS%j6(>%@fc$%xd)arWcsJq)A6Fd<
zRxMEqPR0*O9~}#HrcsJ~jvp2mIpH7wNGVzq|K;KP6TUTRN{QU~k+H?9X#U8Z)VZrf
zU-yAbW%}K?J^JWi8Y^_RLA>oVA#YCDkIh^M_gyh1!-Ry#1Njf&b_tHn@##VXg+H5Z
z2Eq(Ea<?6dSbg?m^BCgG@CQn8TK47c%VIT-)RlXD`S$wedbWe)yj;RD7@N*Cw+rLd
zPHFodvtTyU+r$7Okv*{go7-65@a4dXw!`RYy<tP2CWhO%Xte7mPzz(%YbVbA>S}cN
z?pwgSrnZ*lz=R9SquY9)6Gq4Dk&X7x+dl(+zD(giX*8r9sawa7iQYH!oCOQLFBPR>
zpx#;PdQk2Zh!%Q#r%zl*?ygHaG!2_o*=6vjtf_qOg33MG1EtE6g4Ch^o3tqZ<cihP
z@r3m=7z3vCcCX4fi=Sj?<bNa3+xF=wiaqUn{ek&hkCsc#^Vao`N<N;QLLLbgs2_HH
zH>R_n))O7RsyY;guNZuFZ#=0z46~_Qo|d|-as72b5p%P_I_f<C{ws%n`~L^Gu`;IZ
zyUnwkg~i|JjiYTpJVtMpZ+>5NkbXK0fA;r^{%_CAwiFuUdHEN&@jpB7?f<*y<*yYz
zGYJ~;q!X=45b#SZK#DuynN5I5K)|;?z)G$T#`Chb;aIhbgC`6i!=y#J$5%K8M_FR;
zs6iO+)et8D4AI~m3v@gQ)MCYA6%R@Z4SJp%6h0QzUE>sj8@$6B>>(T6U=bV~61<!p
z?A{Svyb<h=8#2ur;wBrCWf9^R5;B|}@}VOnaU;YFH}o@WsJ(0`#3B^aglo<YHR=fU
z-UxNW4Xa`eGn5T;v<UkU5>}WUX3!D#d?U;mH$0s+TwgYP$1MC^NO(eaxL!y2@>;kf
zE(FR7c_j;(HiI~XKq9gs&pRN)YY<!9h(Oi|UD=4wW)Wr~5dql|Ivo+sYZ0$-(NK3*
zsJ1M$$_%O*0(HxVKI?!MvI5}YehrOYO)3E@m65F~-k<v2Iw3gOqEYKMQSGTwgN;$c
zb5SFgQDbzl331qzK5WJlHkS%pXoO7y0H8zIDqZxtc=V=z^tNa8ZfZ29^S%KDXngi#
z^RyVQ1aJaB9`VHVtwxJ~&{#_WT+R^@ngZVH#MFAkpyvp&$zp>z{C<1Jo}~H_@5NqS
zMsLx^QP>e-sm3<g#L><_0;~GnnU8C&1W@zFf60pJ>5ZAA#mwmmnI)dh_r(kDfkCQq
zbG5$rB@)VI<5yD>B<I1`yS|UF5>T;mU&RuiUV%it5>-L58uN+60qA(KqPYBUjQ1LJ
zuPJuaCP{A|q}~)W(U)X050dusHJ3<EB}<(4NVfF?DXIE8&L_hTlO}0XT;_pR^Xe}^
zB<@}*$DI#(n^GRKrY3WmFXaFYK*<;H0fa2Z(M1o!3{=ZxQ^Y_ldKLiOSU92yjw!rn
zT){DEF{cSmL8ny~oAQXlQ#{+PJS+KW4x+#y5gU$(<W@_7r{0cx4tzk=N_f>yAp#_l
z%(0QX9}tg<QlsS4dc44iMezd$$dcLwjhwXU5OBGwKBoCzc$ho~N*^jpY&77RZ$c{W
z-ED5t=%82o)#bEth3t(`t)IY1wbLS0Q!O{s8#vPE-lH?75;I2kkY8&PY6dbc=`~Q=
z^yd<?5IwK`DKOYsGgs6N5DEszW`PZjZ$5xY_tQK>q9!*$)Ppb$Kn|It;oU){^vdk0
ze0*KKXQ^2^G{vwKvK+R3++^8YQA3refLsa5oXCz`nPS{047qZ}Kv{-7c}bu$G%uP1
zs1DYrvX$3T%hR|91RmyLYVQF7`PzmA9H-g79r-4PPyJ+bx$WU*R0S^v)f}3!y7Ps7
z0&;ECn3oa)-LC^o;{HmDP--Mi;ahJt!B@0^RSy?R_}nDG9HAGCpb51{IR~TWYEbUe
zDBB}cEW@LC2E02j4U!GXFtPDXO;P0qx(H2HoU<UBckNx^O^PYM8`Tt}FW!eu7at!M
zS0Y5K_i;Ie3)icSG5vRv$`Z}7l31&feX`OfwbGLC((SC$%E8j&ozky>vLe2+BIUAK
z)3O|B8LF_1o42%h-)EH}X?;+1+1q;y5wpWkvI#CdC>Gtb_x@&2w1g-+G4wuLAiMw<
zU8#BB3=-bjqtKGxSU!X}-#qa6y$Ku$K}Z)uMsMOp#8Gj{Pc>;$Mi+8IZ%V>M>PS(>
z8!sk@bY`j2Rste+A29vUdsbw=(9qq5-IDpE>W4-(k9=yxku?}xqx53U<C~faTGVY{
zwyaU@J^tEzkpQB~zgP5gwc3nzy8m3!6V`1GM!&wPGi9tdm#Vjnj6Msl72ioo-}SLK
zf;ukN*Im{-OVO9}ymVcpcWZg!q2A!q(oj9#;HQ2EgKnG=X$*<Hi$OOY$2KVBHwG>G
zL?daUTAs%lHO3k>L42B0TN)!;n)-yB9&9zGl{Dq}5NA2mqWBGLjcV{Z0D{QoJKBL2
zjQsZ<GDyZ=Rr=seSOW@6{0$WVHOQ9iJke_YR+9_aMu%1hXOF1QEraSfuW?#O`EhWc
zw)RN1-HVl&=*926srmP5_!7W^E&SiYem}MOUlr!R!+x#u%zsvxZJWqr`e7n}!oJJ|
z#eWRkhYsosmMc9q3dnK)<1~DD*-T{4v57(EJp)W)PQx_+It>Rg+QcMcPQy5)esO8(
z#vz!2dv1neLN2N(3Z7q9uAfz0T~k4dsan=F=a$xeYF8ksYUxgHZ|WI<;gEEUj7onV
zoQ&who|=Qezl?odzBe&HHM73nwz9j&wYD|zY3X2Y|K#-N*~R76_06x_e<SnqYAh!o
zgcD-IJ_?7eCz9?#b0rERb)~<9ZV&yXQf&#1<9c2!kjj!VWB{ToO;erhu1gWu;bhUS
zDSSpO<_d13qTCwIWeO%Sx#kHB1S`d<X`&K~rWHlFpQaDinNF9Ok{$?D*OkoszWH1%
zSbSEx7-}~i=5}2#WZdN0Ggvz`>#*ET+<VSMBrIfF;t1mJogF?jEBL^hXrduOCg!bq
zVP8CaHNWMp=_Q}O)KqJy93h5${pDI=varlzXgSua{$P<(eq&jNQ50vQHCWx3_+{f!
zXB{Wt$;eXPkMS?L9%pYYn@+z`MOdsn7L~a8`8YF}`B{SG)d_E1gW~A#9FK1Y8!MC*
z)SrIcED!Vdjjm)}{{~QOnqW@D*iYXC0*`aw1QD&DWZDxerDneSrfSRjkig!2CG?JY
z)oK`1n0`+%Tk`He09OH>Y8YR=N?(vruQ-0h{h3BZ7vg!;1_TvRzY%lyQ9O0*Q(ZZW
zI2Dp3AVBpIJcM0Cl9!V_>Z!z5(vuevTgi_F%sEp`*R%Rl%#tN=*enr61%$Tcdt5}}
zc~{$M+;nW*>7LLr03dT~j~nO{1X|CeJ@uN&(q>V^%-WO3qOwgmS^gz;b;2Bf|0#9l
zE4F5pm;7omC><b+)iCv6QdfJ2+~1wWQ2^kjJx1!v#-CGS4Pq=o1BS;C-)pD%2*1mY
zG@k%!>(q=eQrG)F2ao4z9$;1Bc{2WJ9$2{VB)dhSfK~N<X3>cb`e{h6brNVA*#<a~
zR08-=IUaVt+r6=58{1wCYBUg*?dYb`!))8>Y)X%M?|7sIbP=)#IVsl`Gae4~(U1Z9
zS()VpsL5;skB6tqhwoEBWeL}wKD_u?`bCU6&h=ic+UCi4D>l=^B%;xMXE7CJj09Yr
zf4&x1gn;90ra{}Jj!eO#jcnG~=hlr(;mHBfye`uB5t+m&1Nov(%dLB|UX13&xckai
z&d+ev?cnmqo3GWZlKd%kYf`=GLK~*Ng7tEd3ekeA3A8Vo&|8PtLgG6>Nx!k}m$4+?
z#POMaR&$vp%WvkOEzx-!WkY^%_6rv8vVCv*He$B$X>|F+L1#^h_mOOM^sksohl!ix
zY|>}arz>k(zOdFe_t*~?-aYwvu^br%xLj+wBYq|L=*`1xwuuox=uG>{<Lw`V?JYa!
zDLmf4FCs_Lzu2T!&_a2ic8JNOe@JD8tQX4STU7*-bTi{J*0zJVc0FmLUIRRm<p9)`
z!FLny0zus!<m)?uT+-RN&-*jM)ran0KG|TgemVM#o#01LM}HTjD11t+41b~>Ko+jj
z&Bky9QPIeuNa=sdd0qyRSd7F9Obx=(KZ5EH=g>6t_XwfAk0MP^*Xe7sAg<a+1Yg;f
zW_neW-lpjQ?JXG@7j1zLKE)Bd=UBY6HwVC&TnW537w+!u_B~l=iFG(lp#^smDVzi1
zbQw2c;Jto&+57e%Qq4L4oQ9hf6EcYMd6Y4$cEs^t6=uDG!B^`;NiA!v0+HP6bW<+L
zFB`XrJ~Z*XHt$REl$WIpR~<HIaD_mL6tJTQhOH$}o?khD+Id8B?R3{I&RwHK33a}_
z1@rnZELn@SMNm7(Cy;MQbF)?QwmTa>NZ)^mE48vSV%PN`BT$6<G3onJ&yfV*vrWAx
z(^t<<@gBa$k+G2*@ECL9OiUxhd!tZuru|N-7VSexO+$a)q-6{yNW6OhR#8yX{Sa0A
zgc}2F#vB2YFbQAy|Ej_~IQ8c=tPLxEQK*JF4P&IP)O^ConrR6)(UNfN68)IZ0f5xA
zQd`Xu!`Z>VD$I6eX54gHfX0Qha?daPCH;B;oXfL{0OC?p0`<8rhV#lm-yY&?=v=Sl
zc~$J~KGMl~;N4Z1Wztqs^JO!9SXaGD|8uDg9@o4W?EH0|xS;)b;etg~ZC!6Xv!n0X
z!aVr9Z++Wa-p07a*K6l*+S;gvgCa|+81!%jd!D((V32vQ+?o#1fj_>ewIHoyWt&F?
z?H`a;2K;pzCa&=8Q(rztT(s_LR(Q`2EuS}EwEbXWcGL7B9H+SWbXhj@aWC=Sck2|;
zZ<$d)v^u83eAxlistlqX{?}<3BWa);sSFbvUL*N)8YZcNC~K@!ATPUlw5p(b!|OEv
zdxiObJ`G<D>W@?>H(+!OK37AgBsHmh8r%1gSHlW-g@IGU7QDZLzA%NjMo(_d;>ezl
zc)FLS6SLS*HO`OtjMQWi-0I0PulnMdDx+I*cR>`Ge(a_O*EN+%Io9bsu9)YCye%~u
zHJixzxUpI>PR+;9qzI>i$j%<A5<h-UNH`s+T_<YrRYvbKcqSnB?4ezmjL{SPS^qK7
zc28fKH_Z5RAIRKWAz$}g*;<GOg=lNCZ5%tKkwoJoGqovt2kpi_MDy-5^>MQYtsjku
z)@WuL-TGiI8(T|eDq^KGOwt}hc+0P2FD!Nsq<l*7R!qh&%r48M{KNC(D#*l5flgAv
z!Fa3sjZt0bF6W1{q#v<fsq_l|pHIU=gX%l_=1h_QaT;DSZx4(edZ~(S=R(C8Ayql*
zkJci_x<qxva(O?B68exInQKNZ=`@i}^5NBsokoR1@Al~BrBVl9edE6C*-WRs^?>Pb
z7SEK%dNR)QPb_x|p870Cc7CWI#po6KikE(BMRjkb7yIno2<`j1cRrE%{*t(L%?-<K
zK;z|6WM<C-CG*v1*M*|kidF$2sppr3+n=cy((@Mz-UZgLPm5QjUp$Mseu27slCGe*
zk?S`Vxy^n?_ReL0g~TV&@$QjHugq>k)Xl_alg};8CqD-SKGuwGU(WJ<IyM=-(dS|S
z{E;;LSJ*%AQ$}r_^nU7WYegd7T+eM@=)vNDAF7}HHdM^Ko-RZ8T3Gs_7kB;9TkPPP
zS--R+|7$kiYO??Wi2qm$Dfm+8wvU0dF`!z{9k-E=QYA2V)uUF7jvf_=4g5%l@|U9w
z#8U}UXZPoZU@BUeWMs>)?{Bja6hj$&B^r!645IC)jbRIZ_W%qY3t;5}OL|&oYlm37
zhscYYCzFLR>4CH^Lt@B6?<j*_@PtM=hw7t%hK-?+vCx-|K-1mOP~k93x)1=$@{KL7
zovo#V=X-V=pf%9Nsxd@(1^|wI;(kfv39((2*8-3!{XK9uv-Hug41XH0W8cY*-r=u3
zetNG5Vz!1kzw%E6LG+wW0C<oTTLHwbZX%E-`7)xB4J{aNiw6aA<a$!)+d`WtpiNU+
z8NkTqocort2KX-{>**pTr=hQopl$m6)hOMLeyT3<C=%@`PPZuaxTw$lQ5;)Q3Rti<
z9vG`4Ox_Gu4}smyhe>q8DtBRxxY6RQ(FH2em79R=ON!mgh<%{?!7jy5&xoU4wG%qh
zvrEXuoZ8hK$<3wzZNC~?p9HJOAE!wTkC%kNz#mkkMhGV+zVai5tC2?#Q^Ma+54d1r
z{@trM7W#NLiFgi!Kgc{DcsyTIyZ{E7cNH&8pMc5u7-U{rq7Y`+jzQ*0&nIAFzASyB
zyhP$tgG8nI1W9VZVO=67>1$mj9w?&y#HYR23!c9ya(d;Jbd#K9*yL<HpX8<Uz7aS1
zHT=1y>iaid$!4s{HF?RNoynD($u3wa<s2#Yaw%n&DGu;tZwV^T0X1JQYX2s+Ks)N-
zBDK%~s&KekL=)BTiLgiX@OTM$qAEF?xC>qYAacNp#2J8qyELrAv-SXcF5E1$g77A|
zo;!a=5#nVSe~zk4lP;jZ?tQ~0oV9_!434bN5vsa+k5EKfZxgh|3pEz0fja<$ydp#Y
z9=MOI3Ih|;7Y6VP>;zgsaf|dB>rDiN&aRk?Frx*a+(n>0LhWNpT*?cq)};G&d#XQG
z5f_|-q47QfMSB?@1evi^Zj;C9`5!VLL$G@6_zxu1@UQ)F=Yo0J)9|h{1yZs4&C|+3
za>U-jRHi&Q-f8Em*#yN{%!65M`&pD@+?k!3XIDxW5q>pz*u89mxAUru&^H_l+02OS
zUne;{_E>yi<NoTbu*6rRAM#X+U*l?L|BrdBFY)h5shYEDkLCYE+*`0^weMfQH{Bti
zQqqkyN{ECY-CfesCDP?h-*k6McXxM}fOL0BO9^r&xYpXbpS{odKhJf}bza20=5Kt*
z7@zUWd@b*W9=3glFj(+Ur4&CjFT!Bd_!q*wNc}Swf=wU=V)1gRBhT_Z!W@X|CL#}(
z0l=|26|H)AZHA>^qj~BdTp|A64o?0d&M@MEk@tFx+AlOwFHTb&Jvb>t**zsEH!uGU
zWkP0&T){i-(kdAk_44|L#+-<zR*{xA?7GgL-oE|;a5pfT_hk&Iluk}f&&<xvGj%L1
z1EYECYfBs3JG*<)Tl<Gc$HH(32=Kq_v3(Vplr}HKPow2sVT#bul=GBHqK_8aeQ}9j
zQ^)~&%>L;eTfllGNe@sd?eZb)vytvY5U0pa5@U;tiDvld>xBE!b1;G5%eg(T!Z<qk
zO(fmdw-dSJG)%GL$?AOq<2kB{LOx<u1u7gW6?z+2RfRKb(2H^c&ecV8nPyVW$r2X^
zn#GQLy9)*O$TN+6SI9(?77S4B5Nxl80svv&?!E!<E?IX%+Y!lNw#d`R3?R%|SkR^F
z+0z<cOBHAh!LjvB73vQhtlaCdO7gYEA(yW0!6q*+dxpl#Z?oNzJw!!~P9_tj$r2@!
znpj6W({p4a!wW2@2g^uz=rZn1$0yr6mNFwh_b<+m8s3Z$v^0<I@_yUPsdI0+i$A=j
zPP-FXLo+6MyY(!W<jpO^wvM*E`S)e-{XvlxpA8Dgif`bR9j+UpF9bm1`x}$7nBieA
z_&<Lm2nS;5MpVOL?l;Z|WM9lBXX859CTEqMxLgZs<sn^%8OF?8e=kK?w;q|tj<gY#
z&%R6%t!kLJ5u<6pvk|M~OS>6o5M#0#Z=9XCnP3iG)|zPDO}mw3J880&?6~Qa1C0c`
zyp;-ur`t~Regcf<f&0H^zthu=Y6X24qWedW(V6%MDo^KTz;cr8=4Qs2?*6KjX4nUe
z<>0<P8qI~{l%+2KqPhinN%Hb<K+v%C`=y=#Ak0m65Y6rcu?C&@iYJr@OiQA0TU)E=
z?e_pZ=1YH2yB<T(8Zu(YUQo4P{fePFs*?V&u{LFImr}Mg8o4oMbnmbwbJnGV^2$9I
zx#c*3o1qo;P#xR~qatsOCH}&kr2$h!vaeI?-TrYgp4t2i_O<x;<Gw=Q=O<)@AAOi#
z(exzc_tRsu9uFM%7Jh7f5hz^V_V}=oZRj<IJoE6OaX1C5#M9U1*p#nc8xB~B-co*5
z4)nL1)Tt(XG^MqOY9FT&I<)b{(Bbyutf?THt-HC5n*F@uuoOp>mX{+(xZYuK)`I)#
zE!&ufHlpJSZ;TY@Dm2mXWpD@|qyA!`#DVrw%pI=N-6nPVP~E24C-nL`oWSAL&1@@(
z^RBPo0qb5)$vdw7qax`BuaqUCS3C7JxsHdpv*<VAc8ojXjqV!h>-|0l71z`A4fNMO
zBQn|zdrBHsI^Sn=dfYBHNHKVi%R^h1FE(HCIbI{DkMP=Se7bdaJs3IEygjF<cKi87
zA9xKl{z!E{qUI-~SOz0Xra?dLZH4DP^1uvQhDodnbj`~J2jW8DIeOdB&-Fn#6L2`_
z9XzN9{Khmq(N6=`VKw8dF=>NVa+Q1A;iEpAFd2BE>Z^kA%SUmzZaUEQw>!w7SRnSe
zddT6T*o3Ud{<1;oI60zSbn3tBF*yUun{?bBV}E9<t{{3CQ2JzV_sjZlSyEVE(4uG$
z_biJnBCeL|m>nF+aX5uD_B*8WOA)%uvM^gw{&Q6kQK9Zt+z`o3B63<kL3tbM`hmCP
zOfw(}n=#}7*hMO)oj#f3_Yv8ZZ)g>e9#h*KP!$%o)9E8sVb`8~$jDrOZZZRwJ!cFt
zKm|tg?)BJdT(4v{YwUv_iysZjX3r5DGF3lKxCf5a^bJ`$pC&G&=5Y3i{fRI?O+E_B
z;n@-!ah^R*xg5;lMeyo&yN-;%P157P%k%WW!f}QVj(Zx{1w?gi)#i2hp^1Q~F8A4;
zMfyM&RDai(5a+XufOcUhe!zV7tW+)?@WHx$+-p)8mBlcW)UGvKZ1FrO`|ECUk+ms<
z<<W$CmH2j(<@LBGDJ{VvU4F4`{=~cYf>}~_rs4u0B@`9E+KAJGWo2x>zO((Frh{h2
zQ<Lzld=Ui-B>ImY`=?TRug40sF7l_y#~Aa$Xy%Gf<GI@aJx2d6S^3exboW6Jx#9ar
zeQF7{K(vzbxFK^XkDQrd=NP5<!FD4N33a*mq>))t7Dh}3vy;l_xv>^sRLbZk>4&R-
zN0|TbMRot99y<yyaoqx<y0d^D8!B<X7+CrVM0Nid&9mMlb3uSl9Bq3RPHaoc^9Xru
zsvTMDNT2zJ4_%=XKzJX=X&#HUD0hIMAe77sB6`vZariXK9}d-B`<}{>cNc1w?HEgn
z5lF!F<V}=qI}(Z!i@@||<D6_k_C?7BVfs=PS-0YXM5*~;`jet;Hgh#a>DgcgVkgQs
zYHviCm|zB@a4Ob&2SwQEVTQsL+13bKH*FV~39RiilkilwjOs8)Xoru3Om;R6*73q!
z7zyu^k%G~(p4Er>qt9CuIR}ejOpP_Rp3$-=ul$ZM_fzPM<^S&5l5MJhUHf&!+s@_v
zf)+^h=vSq*$qbYWne3JXF^QCebP!yoJDW*#k7>;f0u7-0d5wW!z$0TnyV;3u(K4tE
z8FQls(#e<AxJ|bfzN$Y`*BNUVh8Zjwvo#i~XzUvn&<+hUbQTp|9h!7MSQ;MAE&lv@
zQ9&7WNVBW4T!QHE8Y9G7{>&u>)#{RFnqdSYk%WEXd)Womy#G<%buH16^A*=K^w$v0
z2`cJZZa04tZknVCs?hU(ycY-oq1+pAp_YS(XuHXYvs+oxTs1Ct2PfJHP20uiPQ%H8
zr>W$(uo5ziqb)dghp(SWDv5-S7IkD5`eE#7sT@pLWPF7>`o3?hZASDW`)qD>w~EZH
ze(r@vMOg_X-?rq(*Y_2(DKqb0xLq_1bcBSoqBL)Qp>pLw{p84%l*Arnb%P5E!|&Z%
zFtwEhuXa4TN*@w9E!=6`>H#^o2D+c=(lqU`CB9_IZDvn-ud&O~;%FG=Dy8GtR6uPF
zw{WNht$cKQNGuDtf{}{c&DV?*QQ}I&+;S!D$a_YR23~1dM#^e&^UaWP`SJ*jMJkMU
ztrD4Q)GXEF@@KPN{T<hL`pug(c(`wvX*t((cR!tw+n(Jc%wGv7#MPbAf|k{@+iluf
z-CtsXgIU3_y==W;Fl#zkuMLbwLkEv5g%$T0N7dsgq7)wFF~KzW*`*}$B@U@5n0#B3
zavO(wTb*`VlHM4HVOpK3SCT~)hb>qAMXe-9E-=Kd{wi1UbsRRIs=7d&q~J8xTTyip
zh@@CAmISA|l%u2!Czjl$nu4*U5)GEhwwju%q(<DMchhRxh~P4IU*MJAf#Zwo;Txaj
z+urGmw&EKH=cf<*iCNJj`@I`?8k{|isbjC7r=xl~E5uh77X8T2?;qe8u73pQe;CdC
zRVk&1@tAyn7mzuvnalaE;F1$L%)S&iu$(inveteA*2Ys=sutH^vNBL?GO#)BeJgH|
z$;+V5T%&Hsps<*r{$7zg4#^=%P(3bCBMqL|4jOa}4n7HL&kUY64qm*ZosSFn%Y2<C
zEQ$+h@sSI41c8`CJ}X0`gF;Un-|k(arpbn?v_oDgfo``=5lYE2p~EhwO|tYtyQ4yT
znZsyH6*8bhdppD0mc!0I(1FAxk#u10_1I4M?b8T{Gd-clipSHzSO}nm@&`TUFOQ){
zSCbxQVEe)LQh|;nGLtO)MSMi8kwmUu#OoPrjy?shIy!h-;g?sDRA74cnYR*scg`&S
z;ji$*RB)o>s-Wv4!ew_N<(;Ceaw5g*-l`%w=)}{pIYp=|#zcLE&M#-?iGOR(rN(5<
zP^}j&#~vH<)vuN{MmaM!*zS#VUW^iKTu>K`v0AjsPPCeToST2FfI%EYDOO4?tkEVG
z0f{%lNtIV8_9iZVwgPZrVXX4v@D=RRX;lSuVl|Q8<{_yHmPUJDxzwFRCBF&p!-QB^
zyZhsXhxt<-P?IH4CBl%)>8zr10}Fn6RA-`~02&gCt@!FXs&u_1effmu8CtfpB<}Wv
z7Cfpfz2qsbxHK^eOg!XyC-SPgBtt#A)hkNbx6zMG0^g_0b8IAi_m6V$e?lcxrErLp
z65}6^7?$!Xf)4&D83pT)oa!-PUH!E$u9kf-m0lHV-M1Q3Xppl1Bb(W$Amf3)lS}ci
zFFsxP6}<hh_5`q*+h(`dnK|#-%qyf)bBB(LX>IrP9S=`{&HTxU8W!3&C^#e(1`-h&
z#pDti7oQMK7Lbsd<{h4tnU(z{_H%v#7J3eDN<n#QMoD#zYH@8tql{fst71K{FV5N0
z4M?RyjE<qq-qG>akqObM8Scs1g}$-z<weT*HSvv2b|mQiZwG)>IypW2etvNVh5BT5
z=jYwjlOcT3BLz=45H=klb!l3MpAR}CkW*C?gy6EBATj5p_k=dyF`5$Y$ddI&(s21x
z^x4GpMKS9eekd)^8j?lg?!Rv}2JsWRAwLsW6iSPI8%g)f8E0iIM^^V`uy~c}+cfx5
zwS|7*Cs3@@@#Y6zb)lM$h+WFNfohz|YU?#|GJ0U`iO%+Lcfo~%X{iP5qVp9WU^72;
z$Dr2=B4Yv8p13lDfwd>!niw_>`@*`9y2B}ghj0w_mGf=c3Zd}cidAN{nc4%J+)mXN
z6>(O32ly^ER@sHgKZ%+vIgZz8<;b-U#yL;7P?7~x4@zEs-y`~{zf>&CeQ`M0=tZn8
z$#Zqu7<C~yLKJ&-ek9fuD)Wiatm^w|0|Jg>%bkV?=m-$BB_J}AXRuVNeZ&ZK+shR0
z?3c^lj%QFHT^vJBIAUnM+!a4bcIz}hk{IJv|Nn=5@zrvzunIJ>Ok?5eN_1Yympc@Z
z7~P~BQHt__Xi_y)!+;WdDbNb~Ln;|Uqc5&+5<|oCgQ5PCN_kr;uIFl7P>7~bo-hwm
z2||?*SXVE1b77z=uQoFY-hbcDiZjeNhC;XP^UemWE7Q+O!ucdwxxCh`xrNo@G-Soy
zbOoQYiDssRQNy_RiUZpF_ewrbnif2A+pfSV?KPy^FMW%X7=6d45_aiL->1B{T|S5<
z_dJblL-$)vlVO8USvwa?P~~d2a53`^>(=vz=rj$V#&5f&MQ~@6KUV6o9P>+jZ+>cI
z0JG#gYfbRuxYq3~jDtskhrIJg!t>Q+EP+rzT#mu$R)u73qs})hU1T-WANr_Lf><Gs
zN`lDRpENWw731^{vJSn>(KKn}f|0Zt;o#7DKFWsjj`0gdb<mkNvtJ{-2Oggr-LSj_
z-C4zz^6k5E^^cNvQ(6RQ_MYOQMcU(PiMN^)rsFv_bNe1iFXsn7NIAGzExp!SbhdhD
zvUL0zjnl~-1D$BeSAp7L)#Yx`aZQg8{c1GghnwAo->U=myG=8NB9^UuQuJ%<z)<w$
zh3u(YyWNB0VQ!oEE$)PaJOc-b+tmZUE(gV3!#^y$+<&^DpyF8F9QRU}+?+hDJq=-y
zv_5mgWOl_|HXNbJL8p<|g{jh9@;YB<+I90;32YI(+9x)BO%^^_^z-IyiYfNye5>T{
z=gr08-CYkT?b@5V75Y3B3@^ECfeZ%2ao$U%G+1iUHe~f9PuwIeA}nwly7Q42Ng)Ze
zsd5!E1xN{302Y}g0{obSS@(q+Dg6mahhM3f1xq0*jbg5#=lrNS*S;>5BaM*SjkUSJ
z^K^1Zu251XgTE9zEOth&Kly5?u59KiNp^0R$Q_}aM{*rmM`!IbR?p)gW62Esse7q(
z9BdtwLAZ4<m5xIk2Q!E+dV6@UkN<2nW|BSa>lNlc2@ea(q@ez@)#!W@nfAMNwLv?S
zD~{1v8Xcj(ac6)ufPw>7$R`6cI`j=_U7y6Z-b<yK0Ubi{FR3I34zLS$`S$T~juu{#
z@i21i2n7y%5m&yJA~>;vm4H+KanOf|$k0kcaqhh;>G;aXPlppy-}0Y~#3j+wfn>qF
z7kv+{Mi5#q&}tm@#6L?zl*)bcw13nmMAl+62xv9-7gWnVv>LZFu6;aIX0lS&Msr0)
z^5xuZgMpmt4kttYSWG>;3#J=D-$5>n8w2P&Xi5z9&|}G)Uowyqa(=ZM|Dx~wuh!L2
zzH&|f*J9`I1v+R2sy*V9<q3aSSN|@R?&&*!SXU6KLcOPeRJymWf(s1*sRSecF;BkM
zT!ueQjo7yOT~b$vksIr*^J6d|!HP^(24*Mg&mVHCYJtQW^EM##r2DlejRi&!RF;$q
zT|EutY@r>fXdIBRBUZ1_U0`(Iy?{dmc6#`kFHGpIE$yx_7gS^&8r*9c?RU}^zS+lO
z(_b<=UXd*3N7vMEQTotNG%TKzNj*JuvvghCK)v>yYL*!&vAK{yz60Wy64=ZikOq-p
zRGzkpDp)_o(?mkxd)h7(S^9)_zX(ZHwGKCChM8URExJTI6fxDonX~%LAJ)~hds~r^
zvDM&O(I#$F(G6A{W?J^&t;V*_EMfxIx;?i@5K%%uwy;`1)nsOL$vzbnYHOd@JZr2K
z>w9Jd`9b~az9<?0P4=430pd%8#DzgDrUuNYkJ)Tu{e(1JdrtCZPu{28@nCWK*^GKm
zLhh1}lZ^RcrbdEeSfjc8w?&OQN2#g|vKWHH-+nxcNZe!>x->WB@>QR}Kw=Lj_SnIz
zxE^?6_&r1A8=_J}{bV=83r%e|Biw;{==zj`LW>(yy*2J>+grOrv)3kgPv>HoHeVoR
z44LaJ)jz7Xe_0$HY@s@iKUdNGlDz!cnvqd`*Vs??sx}J?3$Mhvwc&F8aRy7lBfMD$
zv3BUn&O`TxwZK(;`=l#RJwyDP<pCb`)|#TYr1H!6bHdfHtOBGw;uD!#vuWA!&Jp1_
zPnpnT9sLPEgTgyHSFp^4`p~>iq6qXhd_G)uuqY$OA;532Y0C{sr9{MRxf*zua_Okw
z9h3<mCNB#yIg^CAe`IG&-g1KL?Ef@8#mC&#gLTyLwd^OD*F1U870mVZb{1Un@fHd>
zu6253*dC-;@Xb1P59&tfqJHl7zzW0cNroe7JRkD1{k#h{RH;-8bw0=`Cu2E!+M$CD
z`N&Sw^%23L<68l(W6f;WjYoD@T;f`ggr&yM+)O<q7tCkr)Hpk9#?H^udA}F<>F=3c
zI)CZ;8C(&o`;Ft13&*CrPeY08;oPMQ4*b$_hs;_*KxqCN0q>QW0dH2)p~H58+;t?d
z_EeNAyx$`B1AU7Zzv+<bXiM?t!xqc+_{h)mhP&IN(0exX-Mv)$W9<nS49y9KRRzO4
zf)V4u$hBb9X)use#l-bUgR#Scu;cWqAc9`w*Lo06dk|fE0IkOU4iSLaN#*EC6X!`+
z>-l`zlkw7%8P|)I(~Dizi!RRbqqiwA2K6+Kn>*Kt6kdc+)JWh`Sa93$?Y6K;oT1pX
zumq=}RIjj1?|ZpgVFkzcO1Z)+xbNw+MKn~kUC(^(lspVneGMIbjpKYxYoT7Ns({CQ
z3t{}&!CopyA9gN2khFsKj1+C-;N+J<Fr|Js<bJcQ44+g%TjRpWr3UwGW>G4rWvhr>
zN(6ZXpLUR1Egu^5J$>i66omLRApKH8?Te+U${h_X31qjz+uKh8Uxx+`6C&^Ez3C@c
zf*9z(ZCe?qP~%7gALf775zrV16%Y|%LJ?FvEeBzhDt8p_byR4|mCB3=gg*;ne;n-Z
z>91oD%;pp9uNQ>W8O-`suBi0&kShP`rTo())L>6YYuu}yZFvHIhTxOH?b^V;+{Yo%
zA$QoJ43D7$+k^5Exqs%$pF)@b;dQv}b%_|v!WJ5w9(=11M*B8sy*3o4Ppl6yYy&rJ
zi$;IH_Vom({#h^0`LsT+za7*JEis-xsT0lUddLjfYt~g7EE9TkFbD;YcwRPQGcufZ
z6(A8uGNq$@n~va1mlEnDW2&PipCR{sa~Jt`2labxB%KY71QIzd5``aYlrk3yJzgOH
z6{$}TzqS~$R3828SriAW6of2V9WUJIiZn1HnrbXkv5)2^j@-wHMvE)jsg73EgnUjv
zR=__DsxO9RH8KD?mZ3e)-zI|dgvR$OF1S4Q#R<))y12yl2z{iOWTe1oCo&V-U^A{*
zf#@)|oj69l$Xuj^IMxJw&sdGRxMz7W0G}$<DbbH3?yWzqVO?TQTwKW&aYB0nJ#;*T
zES@c$w%jS23=i~Q+01>(CN=g9){JrKi7j;zc~dC~<sXjQQ!-DINaPa^oKg!<!c26i
z(UR*Dx{!$b{ZpZ@X~w+~HZardu2Ppg&|zlN(rl2CcA`u~p8aVv9Rb>j^WS2BwLt98
zW<Bq(j$f(ZQdICEN&E@tvxlWz(J7`r^WvCcEcS=kUmttmYQMME&`Ur&jU;vG{IhE#
z(Y^g;oj><pJ0UoE`}nHDp#8IJ6B&%*==bCeEOb<IN@^NRTn3<>awKDO3xK8ElHB}K
zfLvN#Q(FhvOij%#ddNrsxwQMiW&)OS2S8q}fX$?vly+}3MWVnvOaeBO;Pe7uGesgJ
z=xhMmiE?Z2{9*@X>=cOoVZYp6ArLK%1i6*}q}A+|&}s9-ByiIgElYo^8ayi}>R6W1
z6DoB_aR4J$o+(BZgf713cu#~OrttK-C&I)9;S2)gQfis-7+2(H&a7Fy>7tSLQF)bl
z3ZL*q%3Z~)=!Atuih!lufo*X>J2mUwYbOOf2S7WWqmJfTto6gK+5tou(z5)nftthM
zT!LF<qDE+%l@7?;3ABXTGJO;SVu_d}`||faR!n9@jgA#Y&Eb53F(|47+vA348Cvh`
zSu`h0t$ahIewb{`)+QSc54jj`Ew+BzMU&RFm(J^oOjImt<Pw`2&R}}R*i_#&H(5bH
zU)0plxU|?2naI%0Q#G~%c!gcAO+VhzK59%|vU>!cIy==bFKKCEcniwh0<=>hJ7$^*
zELHBZr$$r9vKOW>&5AdUvhj)!u3_$qFQNVRiXVwD&FY)W;NP^99wTKlCxBj^FkTDh
z+{|4I;W^)43uUdx(Z_)y(OC}{rOI260JPJ3q%0LCg$25z$;NLs6C5n_hL|Ah@y5N)
zWEiU#A{OE0RCsSQ>CJ3{VK9L;8`txlzip<U@j0%1584S!){xFlm~JQD;ri*9tT{wX
z099eTyOZ;G>@Pp(Ac%D*zff5X3=>`NFAsyvGrC)3JgbhFRQ^PXo~jZ3v3ZH;X#LYN
zI()Of(q8x6{kx1IVNtV62096ga%5)Ue9~h{uv)p8ZfsFY&O7kD?g?+;K}}2XfMv~r
zsc1p<F?WGN)A_0yQ{%O=v1JQhJ_@t%GCJW=6Fhd3MLY880J9eypX5p{mc*r17bbGh
zvDYK3L6&x+Pm)%>m|l|Qp3hPxNxJAT96t=)nxIy=(~cw&54;@buo{j@7(8`-ao0#R
z{HEZ-=F4VZkgbyd(=(zk(k?Y0Cxm}UR!w}<Vj!AOS8=eN(po}cn9hA6RsB&jwP=3A
zR3p}Yt}`CZVP1J8d49?sA;)&n*=Xou!R~H>V9s;=oApX%U$CS3WJnXIo)urS`dY+R
zw&MmXbK2G2W|G6f)nDY&KwdB?gPk9=`L;1&Z?B-ao|`tkRBNoxiPQ4OLF2{2A4|EX
z*@EG+FAr}{N113hXrP3wZof}ct2GR<v+mwrEbmQ&Xwkf_eqIH2&z1|uRm-^lIAUXc
z?MYEV%qMiXgmHJnHdn$YaP?y;>oVt+DOc+!=tdC`_GQ>k6S86MUMP$_xMBS`3;bj-
z?ZIZc*G{OP5k*AXu@a8FX(T@*tMs-%sXy{z4*HC0B-(*Ld*sVG_!-@yw}a^V$d4a2
z{m<B6Cl&X9v6+C_A8H0}k7zfmp*0f5JT81-h44=0@mqaaL6S{CJGDbF>;UbwWew(N
zFN0Q6f3go>NBIu(BuwpO`Uzbx904;HHs29BCKYZu<@R#8YM8-e<~}&7F%meaZK7-8
ze`0^>H<PSF^(WD#L0QkS<15r=Phx5Zvl1M$AGA}&I^~1SBrP7-eQz`6QL=GYa3{G^
zF{ac0AK6U*RXhE!M3`J*j{XOmi3BYV==jMGIF1ETH;Ib#^|8UzEdLSvi>8H9c7`S9
zSq35Y<~@*0i4YC_b(XoSjZk1<`SW%$K{8%Zin;0fAcePYpps0LY=toM-Zhyr*5Xe}
z&J^aqAA(mf6PT>@TrHqDg;HPG^{*OBFS32nt9FVXP{tcw;;b}t0@6@v!HU6xPBUyY
zXP)ZdZ7;59Ezo}kH5JK~Ru=gl)<Am&)Mse_$e$sP|FN0CSj0rQAxn{QL!=U<+P<pB
z@!OmCD08#3lkAliq%h~bz*4S#$g3d+6zn6l0_4`>b_UW9fhb?sY(CTt-YMmS413~s
z-#n`S@_zY4PM9X99!CR`E#s3G6fG!ehsKQ;2j}&B3upPUO{5ehE_c+6t?Y8mr(d<*
zG9XJgi-(QSo=hj#drOxVQ_#>ai9AqHTW%L)+q$z3+-mg0z86noBNQ|EhD(g0Ej{U&
z2woTE7+iRya@heNe&i$bJPloiv+eZE8ct_W8qbWg>nx*;TP#Qio7}#FHw6}Kb)$b>
zciF@3n-d(2I!0N7TSjVFF5<+qMk3MPmJY`f5IC<#FGAK)YG)IpCTT!gz}ff8okf2%
zNt&hND(R*B$HYEDLvFtKXErfCP*2kOdG{cn)_1+3PbAR+?J4^}E=77#ZYQTV>ZWU$
zaOATkDse4&9RZtpWn&^~gpZZjEs@h^@J@t}Y{CKWMeNvgi2^o0QT{<h8=;43LuY~n
z(f}gd8kx7oQ`V_K#46LsRWo(yMCFp~95U6sG+lC(nY_uzrK{YeMoZ_jWv$-Vr9j88
zM`v#L%p|W#>Hw8wwCsWwTt78*VBhd#;V7i0aZBpZ5r*4mi}yJw;9ZVO2J@2l0!Pc%
z`XM$nVJS56WdgEgyVvQ96=WIg4vFof#y32xMhToq^wLv-`tuU_#H2k7yT_p)Y1hdJ
zozx{PZ5TfDc+)Y_4`_sB#d<Ms>Lzmy6&ajjtTq;KFV(>~-yO82YP{HfMeU3bjINY9
zuDP?(oLx1*e3q+myQ?}<KUwpCPA*La1=9<)rvFVY)n<o595sG?eRUEya&wi|EP&|J
z{7BwnWlKbx_i4n>(`c!co!6<(IK@Qmxry~hS|iJosbS}E)lEnr4z(9z!!EAAH`Tni
zx?Ck_!C4;e5S@*8wc@x#)z;N54;}I5wU57+adm(381w4Dr9~EMv@tcbzWv1i?&h_6
z>%~;6F-)WWH3Lku2eai80yFruEwW`iw$JpA9}9HXlJV)xPe;k-6Db9_xWfuphY}tH
zZX^dkQh8skM|pQ4fXOM)tgPqBF7S9-;3=ndJhO+29+>dV19_W7eGCkA)_(LzqU2IO
zixZ$yH3w5bX~=_E;&|A$&0fYKX}s~|?)8L$c&bK#>2SRpr#uHJES|PfavAfy$+fP>
zdd_j_Jt^d>I!ej!Xz|X*dw$a!Jx)#u*Z1*;sAjp(5cH?eFJ^Ch!3K_UI-IWRo?cdn
zWI5xc>Z*Q3@*qSKSFAA~=U!5DkRmW}qoL=ce?sTIO{x!hu43bdujk8$3&HiIbc-W3
zccc^+^?%~&p;QiWbc7^{k}9uqr_tO&K0+W2<&<Hyq)wbv9FG3EwUk<yWSTYs#WVo|
zHeOydffcIW`4BSgv4ChAPjydUIvc9yX@AfcUnTj#zTUvp+Mw{<z=B%SaaG8pG05`>
zs!oW%5oZ9BCzWe%Fa|V)(T1v4HJF(uWNn%<Ks0zcj?&gK*ytp9@G^kv1l@!z^y_3$
z!nQBDr#hG-xXCzV%Q$!e5{%FX$=eRu74R|k41Jm&O8+M0=d`~jbTDmt2wq+|v#R3n
zu|MXw?n!W=Xm|lxG`6f)+*QlLh+HAvoPKO|kv3zWa$7@<Pr@-H{8M@(g~h0g_`|q#
z!uBBkB@ti|Jl*IzRw>k(sOaq=`S|FwxF|fGNanm~9e=Yra5%?|xvo=8_sbY<z39jO
zF_tqZT3Dg)uR<)HVywBsKZ=p40?a_gu>QDM^sFe5Sg3M)j50->18uM`lHWUjD%e)@
zj7NVsHfMn9VE;GO@!;41WRXI}N?<R+)&d}lR2&}ol`L9`KF1I3%`8{of1Wb>H;3{(
zfb;nSSp*#g|L?L<tt<Ld66f}EcVI8!*2wnWvGFywclrd7MM6TKqkH%P;WjUau!Q?H
z%~UD~B6dI;u%?-pFPa{ZRZv=1UQvlxBv5s)I#NvIF-n^5RfkX!PJ0iaIz~wQ&`0mX
zZP<O&bMp)JEsH?7Eqiug9Z(%&vzdE<W5Zq3c5;4kN!Q|d1(b~lX1~ISmXh$Az+=;S
zQ(FUMk@;4EB+)Mkbpg0+=w^=6fa*xP+qQ!hD_>7{W0cI-+!0+CjbYY*B0y7-Ek%iD
zwL2d#NH&tnZ>EVVUb&4FA{<G#L1L3Pp7U51-CNu)Zy;YaaBQ&uvGH)Rj@dP;#N_5^
zxv>(N)WD?vc(pZ~xEo&0K}&)CDcyX2ja6HfJIoTnUP$qB$Mh_o@F3?0FChg23F!;F
z@(oLQCNp$D<JQfQ#Zge)vJT7kcolw-@K8d+?qum_sX!@UO|!AWYHu>yrRH#{)eD7K
zy0P|ntv8Zhd$_UgbZaz2B2~Jn-p;3~#4Ogstl{Etxg#*thu`DsbbGu&d!)JP$Hfs`
z5XOF5^X-qz)4ipU7GO;ijuW%>&h_lpXxRgis&)wsd!BW#Iv~VeXv(z$_D>#E$4g&b
zKN8auT?obhz_Ed+T@Mp_V)BRT5T*qj8|6P##~+Rj5N@m9+598i_Tbq3qdM-xZGSs9
z+Zkbi>d1^zHr=^*Y<9Afl;5l8q%EGB@Mic1$mBVvndW2UXLB21pkk8j6;@9EQ#PVH
zf<QOI--p{a`@ye-nlZtk!QVNQW<{<cng!p0aNCbUXbEYXzS{MdN1}DxA&LA2YypV}
z4PHqohmBsB`I!x8n*+X7*XMh_O$CPRdabajoYrkugo7FFl`KI=uhIFQAOBG{+CT0g
z@q2#KOA%{+(nph1c+&s8X8&Y>x##)mAp4a0=@92uAwU+n*gqZloh(vxHYUmO?QC3D
zgyH*yqKd`$udroiYMop*3kg%I)KD)&K!-11hMdFEtjzwirfF_8#d+};hjLB+BGC4f
z0r20RYB^3rsEaRGgE$U=^r6VV)-(aK$nUBn*7ExIHO(HzAAjs6{HZ$raco9Km~PKf
zO{8AqPOh1NK=TfVfa>rA)-=~+@0y^>aAaFSn>B|&e;km5T4_Ylm#vypy7c%#7bAfd
z=d{iqx7P?IH$~~7ALPporFNN6beQkpHQz!Lt1`k<?LnbuF4vOf1|XRpVLf>+56`EH
zgr42*MUg3l=+EAcgWv9*9S4v6P8ISPJ<o@ouoLvN+Rvmn>=PHeH=2J>$Lq)87$S`+
zSY7KKl)go;s9{LxG9k?FB%uL0t*iN<Fz~Ok(O;?~;oh;)$Atp(MpKeNtX(^xD{=EV
zx{pK5RQU;H;Dvau%b=Wv;-B3?M4({D47?~Ph_*N%bIa3(2Q;pcetjArEWjG^fyaQ7
z!M~3W-zJo#!GL<D798$x6D2T_*(2@WPna+7@ZmD^aJ^NOlyl6c(wv;qO07<l48@_$
z_5FeI)hq4u;kZT=DjHopKlPvG_TBT8%!zd(TC3&g?MYOG;#?A@_8$`m2&rCn<VkV8
z`H~PBNQLuxXDAACidN2J$QC#=Y%uxJq5meEi$G19L((R>Qjm(9Hde;TGBRa(B8RWf
zsljvhW1_Na4xydDj4ArrUBVG;x8On=h>6A)4LNOH1lUX1)U4ztd`-)vn2`0-`-~bv
z7F=T}K5iCWBy0|PDl_r4K=0}-r*rI)C`>1I$BKoBspAezL@j2<Vz3AWWxn*p=0xpx
zL^SaQF{L?SrR<1YD7CMB%0=8&W$g^6QtSnDNxhTRzQz7sr}-MdUIH%;_>Ih-2X=KU
z;MhbXBO`+UE*t%FY*f3@S>!I?P=dq-)v6BAN`eFSX{gO++7=Y$m`2U1x#rZG-R$Mk
zyC_T~3Tnpb=&Hgs8O)A1)qAUL(8`m)&6@_&Ow+N})CUt-VQgr;f##^SA}IbG@S|sq
ztj41MjxvhEvH*UI*TLcoCC<lN<Apt8nueFB#q+!3|6VrwAB5Zf*RoM94af&ag2|N?
zmU;O<mW>=cQKh2rjU?Cb=PtWBhmY}C255G#9W_JWPK5duwu?Tx>h(rE`5ZR5&P6jL
zD;2`ZLrJ2-C3e+s=4kV|ba12Rc}YJZP&P8E*0plPaWaZgjQ`NO#+NzcXrxsUiv>#M
zp1T@$9IkM}9{~0e;>(y76=N4#yJ2u!K?tJ1?<KHjVlXIixtNSv#F?vfB@&D3CZH{B
zoU!@b?Cjdi@})4^;lE*6R4h<`k#m3%O%K$dw|2g!`@i_aT*|Algfvw;`Q6=6DnJVx
zdAjhN5q@7`Pk>Zo`dY2p4Sso#>ovjbWw^at&@&oM>K}Da5H)9WZyV;fb7pE@sk+yG
zd-Wl-VU`W10&7z0U_m#xd`{S5bp4&zwIbLu^NUQAmxz_)0PyF0Rnw-MLu_BNT|6P+
z7>Em6T#h5)LzfAML6rTly4=7H3^>5h@Fw4)623iOaqMJqx52h>S${?x(ut<579GpO
zM@s!@Sl{wEevgOmWo*a@uqNE`@pRrCszs*z#ToQZ*w@^|O#H(fl{-JeG`FF(Ywd4N
zZMRWh3*I7)el06Li}7;fGu^xXh$DTLb#1h-b$30J>~6c<yYR-U<c9^LmVFUQGP_bs
z=xj3f_dIMGYmX9)`Kgrem>=F9HrKg$wWFU#Upy1K5qq^h<omHDcK+L~8qW$P-_=jl
zX0A*=*KLla(##eO!A)sbH|de2b{C>u#h;w+LZR2)`ip0UORom3K7FiIX}&Bul-)EU
zcAYDA6MU=v`UH*`^i1RK*P3R@xEjym$u#<%`NwdF66$y7t1@@X29I2py|izShzXTU
zJRE->HJ=}kw5&KD-zM$s-QCGlp+q@+x<mlOb86ifxe`pdR(${*o0m5T&gVVg!Zxd^
zFP~B`aGvxcZumJrA9J@=agq2+_PvG}7D7k>c|_amaWM4?M%2S93tXv!7PCqHg~MaR
z(D`eP8_%>CN4DIv3^1atv5=~_u%kDCpA@h4mYntmnnohiwgfPqXcu58T<<zR_j)5A
zELKm_3QLm?AEU2Gf1b&Iix`O&{Ay!7fYVcql`{W`7%>$!r#+m>doxeUpcw%a-hIS~
zC8WT9;G44x1Zc+tXY%_8t1<>M`j&%q$=o+|0sV)8uZM_{uNO3;jl=zeHOv+b+6qH0
z9EcbtCUHbYC*KczW#Rbq2WH=&$>kygVoL7M<XowbV{3skc`IIhg=8CWCa=ux>;oRG
z@nvxQjiW#tL#1P8eqm8OHGgSseS>|VYjbyRpL}fa8xS$Vn#1~fc6B}95xe>W1Vg0Z
zE0fmd)to6O*jq}<;DSyrPVv|>y(=(j^tPk7EF;DN?(TH}AuXJqXatP{^3H`Ia3&W(
zY)=xy_G@=}@p0E2>O;;*Dj6O0Gx18VZs1JL3(Bk9k&Tqjm^6r&&R2?MEiqMc!d{##
z!FBO`<|0QkQ}Hx3{oOzq?OYA~=k{cY&|Tqr$Da2?0}k(|BHduLvFU5AUsh<L(Oddj
zzIoCbNIvHrt6IL{9Yv?T=t{4NJ)Gw99%y5*fn%~1<~$4Qf%*4R{ehJG2kTtz$Gyd&
zhX4LxO=jBLovtv$fFc1uJXncknj3)!E1WsC#E=K@U|kzXm1((uu)-Ab?X4F_@BL8Q
z&<5J^PmJ#$tiYKZ^(8>E`)_CR{~sT$K!m^?T{R({n2atoLxVX#J5!#Y&WA8Y&lm)g
zWdGZle3uX<F8>~!&Ycg1-72R?hyhE|TJ#4vJ>_ZpLmOi^AFLmx9_MpM<R?V`t#Zs=
z;9J$SVS@;C8Gb$n(~$E+8^i3N?qT3-zk2VW0RX2THl9tI9X4HV792L;oC9qP5W@4L
zR@kRNJ06j`@TeV?WB;fFQ{;d6U?qq(8Dz(}!V7>S)M@=M57wbGsD)zA3WF7S)ha!D
z9_7<XO^0var*!-n&ZiAxEzW0*bBfOY^<bU1owE4*!FmCp@W2R+_YYRf%a#AT2W!aS
zR}nCJ?Y43lqxX(ldU4I}kJ5wXA+kE&ntk5Ulr(IF+Wa2}#cvk+vKtYYTyyEs)4m<|
z9<sC^LQx#vRCUazq#ci_5Pv&K!X0h=K2I+1da;b)c}q3xXT?k0ku7?AwHcb~53^B0
z?0!vC%=GEvKp*<<{Nkg`-MT`gEa-xTe?%$|46hk+hPCYj2i@-x1b){Hye1zaM!%oQ
zb>W|a=-nQJKix`@Uf?V@xD=5<(FLs_OF)=#`;UBw6~Is=wbVGPM}E^|x@aDvo#tgn
zS}&icV`WixI#Yh|mwhgT?IfB*Eqol{VVvGr2m#vh=PQr^Z0{$JsD<(C12u+d^l`hU
z->@2f3G!3WS3;&1;V>)<{@}W{x@+9S7xcy23#7k#87IOoSr+PkN&al6R^)Z@moRJC
zO!7zZqCDbQ5y747gh(R2Zx>l2-Gefz1(EuN0&J{3D%WYG)cToX!UFX7D5&wSMCB(V
zqHAp5Gq&XRtC`w_MP^bEgTeydT$jZ*ufJcrQ61DkE{{S6XK`mDQSd&ew{d|`L7z^7
z&Gg0-89!5ncU}c6Vy2;OOXhHol=9fTF-nB?hjHJ$Z)0GmAlhtk9sm)ea|Jfs25&w9
zoc<%K5QrGj@M33=`l3g9V7{AvL*DP{FF$ej<eD^|S0hX=ya)tBM!Y|h{|klJ4@8WB
zc09w*-K-+W*eM(n<cL8?*stJ|&LaJ?DUZZvc0B#sR$AaO9SOvAA{+fI$0|Qh9-&P!
zNBwJxteb*-&MZRq!CAgek&MVnrBd<1=X_nMJ=gNx?DB-i0J^TgWqOvX#^!OcjS~I4
zaa*JY>Bl8bXnR`Eva2Lf&(l@QY5t5D&Gf6E18s~#LyiHUjd5O)hE`-OA~8FbaQ=Y8
z`z>N*Bmtbs&;QlNs1_x-E%NZBpC=Fvv*~0wutjg3-{iii8@&tu6P%8+u#Qd(V)?s`
z;gFRR9;r6<s)eiUqG>YGBym|{X}vF2>idvY^+5yG?X`pYjZ!fffrslb1r#65#ypJ~
zlntA<^$VPix_GM2*$5-MAN7--0Ys>SKM#z`<-9^uZ}ac?0&T8yo2P|C@TQA?(<ty=
z&^Ru=Z8tknelWHv6x<q3&x^$m0v}M<`C3(bPZis!1{4jRkzal0jJJx6y*8ksuhUoh
zX%t1x4+hCdcH{_xW8q@qObPi1!#~PEVTNs9q|JOdQag?7yZOpCf@giA#<rG(xy8Xz
zJmS#(G5NN!_Hz5`!!fDtop(1fp&<RW04isp<@yfME16!XaH^0DreG6c8SZBx=#}=f
z<2$P${5MB^XVx^|KoYNLc=MkOXKSOG$=p$WN$(zZ#nstc^mZ2b?r&$U`fV2$PGhVt
zzRJ^cVQ((#iYP~`T3TVjd{Jm_`s|T?214@QHV@TYZ+CDx8pWu&iVH_Ae0ALmHw)Nj
z8sqcI7sVal_IXPXSO=S5<jxiCp?1d4W>4;9pqw2j^~^2AfH)f9EX|D%ujeCuM_Q4h
z4wX(5=aD%sT>`!x1P#nC&b3|CyPfWPqcqO-LJhVob?ku)oK~UeY6~&k)2v2ZR+y}6
z`!>dHl3sx}f8+tMxLHQ4l<~Qjg)tw$=(?TF25HdphIsT67ayMQD-QSd|8pj9F};4O
z$ZHWJ$TOooR6aW;JxUq)X0yYvVSdYfM0t9Cn>VLn@!}^@!>gn%qo*882qhQlh;G~7
zGOjTyYacq>7N!O!TUU1AHtECO4S`hV*N_|>vS0l?tYWmSe$2lzmiY55mk)zxRVg(o
z`0_h|!h?kFF?N->y;JCE{H8x&JaFjV^{Q*?(1-9lo1OcmO_NGpc<L0xRN&Rn($lj@
zCf8A!rMy#lt~FH!r|RSMAK3mN5a|^x91I8p^!z>(K@1Io0>R!L_3b<)${YSll>b9M
zwzY8Rf>~^gk!a9*PV;b|w8^7j{p-0`!q$UfHfO^Hx8(pl_b6dK9(Hn$YF!tpcp8l&
z1qALB<w#DzeNuw&k5mMVFNH1~Jk&!f0y-9W?md6ypO#-x7?Vw!SXf>WkzVpE74cNB
zskN>B_f!N>zEyA>dnn)XOw2AUjv+z;sfdluE#N-62PDcj5#b${&c2TzRRS=id}t8%
z{5}$4Eedgq7b1ZAwFU!;@&-=YBvH91ASX;VQ+9(=AW>d*$7o3?W+N#QMx*fZNTobW
zf|gpT|E%{YYbf!p-tc^$EX8mtzcweP;z)RluRtUn<#EAW#wRRj#$<7&Wra+o3VBM?
zui-L9Ivv~=>lhipPR?gMpM>fn4Fi>>{$!N>Jhghq(-8GQrIMwV_bJe@lC{jywZ7Q&
zT6zv;Ydx<g7kwn_SOcqK*vy1I94od)@bSHfq!O5R##7-$-VP<$Y)zIv4GfW*D_x(h
zMbaN0(m32(Y@HiMm%b_7S?%q}Pl;{38e1C9xFZBo5ko*Kq6J7ryb{}9?7+xmY<86^
ze=$_Rw*)Dg_<oe^5h`<scXfRkuRAiL%?H4c7}@ThdnYyk3~5sj2l^0jb+v+NMwh*C
zu&{Ks9~&ZmCPOB90qnWzl|j5oV~i2~fIZh$U5esuJv?ODqtzhQOwqMqk!i?U$XoWV
zwNQ@jxR@{lOeBMkT$hgP5v;g<>yb2sU@-LW_em2<4cX$HE~wwix78-uk-G3I9x%Tr
z%Hy|8KRDNTr2>g^n$Nlud4g%Xv})vk-6vz7@@FlQg236J-%}C5pa;dDJ30NPDA}+`
zt>Xe9!uvhfYju!HEpp~w@sBfgqx81>`(#Py6OECw-p!2tifKa)W8mQ@Xi-%GTq<kV
zXZtK_7F<yn=~rX+EUUND1A}39iwndX4mSzR8&8xK1e(s>JxiKl3Hq&C#(*8ScEpG0
z9(}iUCk`LWF(rb^0}Sc^wfp36<m3PGb1!AC%dUg=Qr=tU{pE_-5Yi<yqR@Z3PpTY<
zubLv5U+;v@_jBwPW)xp97WG(`fCAYpUt!}eE-D|mP4RYTWgHbZ(6(xmH7+0}<v%3K
zc|gdG<hN%NkzSyWr31WQ-oo4d>pp4Kd=Y<EbbAh0BXd2wcd_o?=H8P!+IkwQ(Q@0k
zS#p>@v!-2s6I*hNBujiro>t*Ig#s6Y0!DpElnd;6fA%yweg;pvT8rkp0YW*_QQn4a
zpYms>p@1Dnk`rymEjpt1N{@tkbJ^Y<ZVg3+8V`RQ`6lvPm><KLZZ{E*Ai|)v0Ut>#
zCR-*PLR6Rmx~!gmQfnbh?vcK21X=K|E$Hc;Z=tlhqTHj<%eTyoWp6Y)Nqe`Wa+!y7
z{ZtJyp3HBPF*=9qJEiMGx<v&;SO%n>arALhrdfC%lY|L%@;@$_W+r<+5X4cgPk87p
zN+r+l>()u0LRZ&Au*s}vZ@Px}Wm`yC{(00#Ldr*8+hsiY5&W)a)5N58T>|-KVGi8u
z^rwPv856K{1sn~YIQWx@Rog^%?#nz673(u-AB!9`*TYG^lBAa|_pcA4p#Ly4$gMR7
ziJzE$?uRF);f|%}yKcbpct;`_P9bD{e)Z*xnW4uFk%{0;D)5-&u-|8!1Wr$KUbfHD
zXn5GEl{jl0ecK``G2{L<nOo(^$P)I*ID1h~Fsb-Ab~;~K4t_q@H0E6Jm$Z0OnTq~{
z`fa?b`0Py>PVOL;NQ2{$cLE}8yfqn&{eRwbHC5z)t)E2TmH~4QL)zT&oD|LB?TY&H
zN@qM@2W{^LD@M*ySm|?>Qz|pRx?o~yRT1OW7O1*DD0Wsl%hqS_#YtSg`qi&QIgHEe
zCSOoK0%z*q&%Kq?Fx}TAll?!DT_V4~Rbv>K;hnMbOhzk8**sQ*4>+$3=zp#tORxSl
z23%ES_YF~JKn=0~yjnqy-f}NvZoxF8Mgj8M|L+(?3QYuk0eblVJ)Ap|1J{6aN18&|
zZ~s5QpZmBqe%K0}JFXvviq86z{0lw-tAAq8{p`sUaPE+Htv0TFIb`VvA6)ASoI4IL
z8&i0#520P|&mGXbX72YpaV$o`<nO{5h(jX@AhE!?!#_S5*og!Fe>~ZMKUa_d2ZQ+F
z&;6YWtb{=*y#N34BYEG$CkCMr)l<6w_{3PxAON2ja{IctwA?v02mJqRhrg@<|3Ck=
zt>cp+#8#}=y9WRakoD*k1at6VvIIDHAo`{4#W4LM|Hnm21LuxgES*gL<C*Sz^1rg+
zR`?sia2kbt^9t+xow%oVJb3pzag5xvrynqYa|gd*7~s$4enG*(BYM|=wmFzBn^Eja
zSCy|6Nb&jILcfys0FVl-&Hz$@GkV<A%dZBiEpk6w0;$00%B}eZN9^#Sff}ZWCU+Q=
z=I|=$p*9FMc@Y4g(0>djmPj!tEn4V^V(alKs5>?2j(Z(wNZ?dy(wrqzu!zcewmT)!
z(w_3|<%@4~8VslN!3`XW!_8hAZ~%P5itBMOeQ0pw`pFhQiePGp0??>pvCv=oDOdCE
zV7bg5RfgAKp=x8CFNs#H$;DgjT}x`HeF*f`*(pLrsCLUIr4RELKq^olNp#s`i9HQ;
zf9}xHyM0YVO8#1v_1{y0zs?;hYLI{c8oeI9K<2TdHYh|`o!?V|oQ#-CP*9z50Wb)-
zX@92z@BKN+16Xly;d;f-Fu%hmuCf&08j2yuST^Qv+E97xAtj13>)gX9{`Tjb;Q6}&
z_=Na&;tM2_Fn*Brjz|21KNp_upDPi-h%B2Cb${*%Gqt77POwA<;1elyySa4l)lGSl
zvg!5;-xv4Oi5EAUN*7k1?-syRFVdOATcVq(mvvJW?3e%P&)uIp9{jm~!6*K|J$L+9
ze{M;f8ef?gm)cp9#Z7rE55(O1%b)x6|MwMkzi@BH*vwSaD<%Zm?n@S7Q`emJY0$n5
zR8Y~yqN^1{?q@Ip5gfE33UKZ)0D-pe{kd8whlZr{^$$nadmFmDl2>=@G5QBwu?bco
z_FJj?MD^SC5nA;n7(!Yc)CIAN*L#&ymOsALZWaHX3Jl%nuC@8d;d(@Cr^`RryXL*_
zIdr!Uh8h()ynz}F)NpkgHzGa&nSH!$tV1Wk{OLQcLR_4&=>o~Tm{Zn+z9f25+E}YS
z*0O@M=Hk*F`)vU8&Xxc5ja?oHs&kZl(XU0MZq*fkHwCI8lkfN$zuV7KdFU@H{C8rl
z5{TY9zPQ_MOs`AbFEmnP>1bLf-^pq`hfYHzX6OH*8>T@uzwG@4@*2Z^)Z=-O4su&`
z3!YZ)C!vY7M-J0%mcY(1H=!<u1Y$c0vNdFhj?C}!qTT$iOV%GhUl*GVv5S%w;&)Ur
z3GHDloTVEcq*<O0-4NHw_*TwCKWGVIV7r-?yUb3>Ji}{0R+y<+HVkof6)o@k+gD^Z
z{Cb)cr~-~62%o?B73pXESlsRuJeP}zv|XnX$m@Pxei)8Own8jL(}VKJ#`A*^CB-{Y
zapM;e64B<e6iU54kEHpdoo_y8sP}cg(US;#_D1hXTihT|`)CwZZ<aTBCw|RM&>ewd
zlO1ie=5P2!h4RZl5(STzpk(f;zF{pV9WY$o`zr%H9<zFKzq9AP=hJfjGw-`i(ACzM
zABg~ss!AljnViz*C<=Jo*3XIozjor}CtiI<uhK%A?UNfZQG}7%&lNTKJ`k!-l1VN_
zn=4r_7hNAE|GWsyqb)wp;>MiKQbsLJoIaj>GLf43`~T#AbMy#w^xOZW3FX)BC;&53
zU)*gzn&`H*kQruMaviz8|DOPQ3JXU6*OJUbLszB)y|0K8AAlMCeLkn6hF_?y0hVNd
z(N8eRVF{tO6YxLrL~_0VpU~@CF>nO|4c*5f*3t0^LAoxiiD{pOLtMkd({uA)#1d)b
zmy}W$a+g(AlP5!J8XEC30X>CPfsxbRlONkVP*#^ZIGWg!{pD*^Me*dU+w|O`|M1f4
zypG@6*1OK`?fuvN-;M-UDv!Ujk7Mnf|0v&pDY}8q-=-?n@ppp94!F!JB}KGDC)aYM
zE=#9mPN6WUh{M!o3BkHU@(iM}F%a~odd4a#HbzVlgG}2V<S#eX9e>QT+Yvub`8owk
z0=ml2X1h6B`07!HHCx`xc<H^z7Wh@O{mDu#ESU*k)p6m72(7>2qXj{i3q2;}2X;s2
zYOL4#lO=$LZiD0L?!rI~pr^nvC`6LArEMTzD=6_BmM41M7+8pLKtp$9Adby!aj=dR
z^gK;4kZ6cPfEmh1ehF$h?f3I}l@yF%Q9TF2WD&|T5s>%zFk64B_br;R{GYtX_dVcz
zzBJtQEAR2w`TU=}$3N%uzw;g-AVd1Uc|L~@c|T?IIhO|c1x>)oG`-pPaxm1tQs(^d
zv=m`w&(j_;B~w16%(-TuVTFFrdqlwtt?E%V``}So_e7geS&mGQZ6@S}I{|r*`X{J~
zwwrR2NscLaYbma#J$k>vj38723$d`Q>S+jwirXL%wCMCKRFpVP5)??%(IgWSc}qPT
zGhhRh9Zk0#pqk`N_arwfBw^PB^umxX|MTuLe?d$Na)DQRweYT24SL{mKHL$$u5}Cd
zWkOb2=$L+hbuI67e{u4;Gk*mt{HvY9VR@7yk6t<gGpKpi%jdOUniYd;_Zc0F>N>CS
zKi8}=s+u=`QEoM@9%!B|D80$1vEV)0tfy@)vvfJEAD}AChr6o}IA~p>Qr)Y}*(?Bj
zLT)pwT+CRy<DQ>-W-L%JmH(FaAY_AK+t>l}9z8LkLIhjbz>*9xby5ZrC6M>1KK{L1
z|Le;={Qb*)_Q#iN#ZqN$v4j_V=(>2<8pe44<u(fa{^gFqLiK%fZb=pPB!vNtuQbO*
z%Z4Rd78u|q$g<bqeiw6k2i9`J5cKf%d*P1#9ugcv?Svi#V4-#Oy<-v*9o3Uk(=Y-)
zXGVEt<w7#@3O{-I6qQ*PM3z?@g;&)yXuFp-wu<Dmb!rxL_5NRTIehYr?eVi0%+_DL
zVzA}v4UL^Q@2Ks&`#|~h!zWVbpS}=%{PNAB8E-!bUH<s;`j;oSzdybI>-W6BFU~QZ
z*_NkZ*2uQ<tartSxh%0flb?345V)-0b%HBt%8P>JErsI$ZBIFA7)8jrDSB^HT3Hm%
z%*x8OBuDdgL(5E)<cFX;pnxsGX5ij>U`r5uWALdhz?E77iy?PF6>+Y!(h_jUW@1b@
z+$HM`Yzc18xZD+MumCydmTr#HQfBA|=G@r=MGnBd^@lrvBOzyi$B-S3k}n1At%v1Y
z;7AB4=lbs2^78VEVBj%iBu#wn-GwLTR)00i_nZ62PRYeL^^4N3`yOlm{|Dw=h5r#b
z4^x2?U$>4nuv@<syaAl};$UUy4+ZWI=|5W_T3=)0A=Cb~RpSxr#FvtgoRawBB8HUb
z4!t)dH#9I@w_LEelt-#Td4hS+^5#ApDbExA=MFl}m~g|>Xi2Gu(QyTCZ@mR66N058
zpOm=2i-?^NWmb7`a%@wi!>r4pJMT;tov`!iq#QT*h`C`w57cHv+C5*=U-4^aT3NLk
zyE<#pr<18u;=RPvCUqIzyfZ)Gn?*)n(!QCVb85A`)E75ueSa}yu3wefg21?{*o8)U
zT^TFO(wegRdyiQ$uD+le#n*A+&!fi-9H_^ToiU5nk(1{Cz}1&%l$Zf(3C>QmzZ7&?
j*SKBJNLTUxJ><oW3_!pLgbXZ9A6yY*ilf3qCrqpX3sp7^

literal 0
HcmV?d00001

diff --git a/jetbrains/plugin/src/main/resources/icons/logo-outline-black.png b/jetbrains/plugin/src/main/resources/icons/logo-outline-black.png
new file mode 100644
index 0000000000000000000000000000000000000000..a0165f14c3a4c4a1093305c2919684fca34f9cc4
GIT binary patch
literal 2794
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

literal 0
HcmV?d00001

diff --git a/jetbrains/plugin/src/main/resources/icons/logo-outline-black.svg b/jetbrains/plugin/src/main/resources/icons/logo-outline-black.svg
new file mode 100644
index 000000000..069f60376
--- /dev/null
+++ b/jetbrains/plugin/src/main/resources/icons/logo-outline-black.svg
@@ -0,0 +1,52 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<svg
+   width="201"
+   height="201"
+   viewBox="0 0 201 201"
+   fill="none"
+   version="1.1"
+   id="svg1"
+   sodipodi:docname="Logo_Outline_-_Black2.svg"
+   inkscape:version="1.4.2 (ebf0e940d0, 2025-05-08)"
+   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
+   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
+   xmlns="http://www.w3.org/2000/svg"
+   xmlns:svg="http://www.w3.org/2000/svg">
+  <defs
+     id="defs1" />
+  <sodipodi:namedview
+     id="namedview1"
+     pagecolor="#ffffff"
+     bordercolor="#000000"
+     borderopacity="0.25"
+     inkscape:showpageshadow="2"
+     inkscape:pageopacity="0.0"
+     inkscape:pagecheckerboard="0"
+     inkscape:deskcolor="#d1d1d1"
+     inkscape:zoom="2.0696517"
+     inkscape:cx="12.5625"
+     inkscape:cy="118.3774"
+     inkscape:window-width="1920"
+     inkscape:window-height="1011"
+     inkscape:window-x="0"
+     inkscape:window-y="0"
+     inkscape:window-maximized="1"
+     inkscape:current-layer="svg1" />
+  <g
+     inkscape:groupmode="layer"
+     id="layer1"
+     inkscape:label="bg">
+    <rect
+       style="fill:#ffffff"
+       id="rect1"
+       width="200.20981"
+       height="199.86815"
+       x="0"
+       y="0" />
+  </g>
+  <path
+     d="M 0.276367,0.210815 V 200.97972 H 201.04472 V 0.210815 Z M 186.17379,186.10778 H 15.148143 V 15.082543 H 186.17379 Z m -63.20501,-44.61483 h 18.58917 v 14.87094 h -23.36948 l -10.09164,-10.09063 v -23.37048 h 14.87195 z m 33.46112,0 h -14.87195 v -18.59017 h -18.58917 v -14.87195 h 23.36948 l 10.09164,10.09164 z M 93.22479,122.90278 H 78.353048 V 108.03083 H 93.22479 Z M 44.891627,108.03083 H 59.76337 v 33.46212 h 33.461521 v 14.87094 H 54.983167 L 44.891627,146.27326 Z M 156.4299,78.287549 V 93.159392 H 108.09683 V 78.287549 h 16.61964 V 59.69787 H 108.09683 V 44.826127 h 21.39994 l 10.09164,10.09144 V 78.287448 Z M 59.76337,61.556787 H 78.353048 L 93.22479,76.42853 V 93.15919 H 78.353048 V 76.42853 H 59.76337 V 93.15919 H 44.891627 V 44.826027 H 59.76337 Z m 33.46142,0 H 78.353048 V 44.826127 H 93.22479 Z"
+     fill="#000000"
+     id="path1"
+     style="stroke-width:1.00385" />
+</svg>
diff --git a/jetbrains/plugin/src/main/resources/icons/logo-outline-yellow.gif b/jetbrains/plugin/src/main/resources/icons/logo-outline-yellow.gif
new file mode 100644
index 0000000000000000000000000000000000000000..7233bd7b87aa28d790aefd73b5c2d2c994fb68e9
GIT binary patch
literal 206723
zcmd3NWn5JK+V0Rp58W^fHFUQ~cZZZ9ozftosB|L;LnG3SbR*IXAe}ZXT_VzRW_b4A
z@3YVE-S0W)+u;in>%Ri-b*=k~TUA{}Lel04a0K{+01)6~E`L*Xb%AJUQm?P7JqzOC
z;2=;@ri_o}!NNlC?z*R-KyiJpm-?FD(t?qk4Ey(qwu3!*aZV{OS12@ulZ%t^`xliz
zr#hGCdJ`Yzmll-If9sqaYF}UI9qeh*(gLR@6v|6Q`+8&s`tBbeXpO?<#z*B76L?34
zWZ{FdLPDUX2FcG$%J*f+85r=oI_^bAaCNjvOG=V%uBkJF@#bfga<c`+L`m9Oq*s^K
z&d+rG{n+c?N%(lPro#j>(*<m8n1Y`{TbiWiW)v&S#Tx1)P7by7^=Ny#Ws;Nlwl_7Z
ztHfUfLvOAPzI|57&lC1=XDKZf&CV1wH)AL&5c&RDWoSV5^hD>eE5za<10OGOd>qf-
zj%IP8NO&06yK3>6DDI0h-P#%n1j5+MgJpk5Gvo#5>5;at51W!Ah4BOWy)BKxeBlR1
zbZo2yf&T1gCpw+&_YQV7cYbP||Irf>2C1u2IXN;f%_+}JDp);YlD$tZC;+;-);rkI
z>};2wnN~s|OifMbCqF7|t*avt2D&;lLxXbLo9ah<T80L6H<x-c_sBjiD1ZN^s;WXY
zJEeH`Ti4T_70N+~Kp0+K8B$W>T%GG~Z)qYBM%!E3JlsUFF+9>zWKV-Q*x3k{7L{+W
z^bj}tJ3E?N8|sK#eI_P62n2t6N-;W;TU?Cv>t|(FR(!;@J{=wI$`4f*2>$Lia##Aq
z#8^Ne1|J_W;#%+eQt$RsZ+A=M>n9Zi;sN5;Kvk9M_FDhuO7Hf@fSL+8JFR$grH{BZ
zyt>dk+Sj_h(ih+-MqKG#U+M2`Y2IGz?QCh>-WtqIDYCHOUtj9)ZEJk_q<nj;zq74*
zd9HhNsegN8I5Vw?xY4^f*Q2He?rv$`lO_}32hC0?OpPm?9&2ACui{Go?3a$TG}+9Q
z!p)Vz<)z;2j1m<U&h(@L2!zcqK>T@8d2&*bjh#^X9+`v$>Fuo%3oF6xrT+A!A`cId
zw->932+8KACOtha006lBql-Wwm=X9o%0`BY@_Ncbd;%C~$S;r|nQH5Sm2CWMkiYNA
z271}pJ$CQ|+d4S8c*sBwJ3m0cF7`4I6H#peZ7)R!XBV}nJ`RRYb&TwuKDLvzhsfRs
z-wTuqboX+1@UsC2y1RM!N(IV5Z0tR49i))2Q6KX|z;~PYJ(hvUqrL#6j;ZMB;{X=p
z6X3NI5D){4OY#YdiHM0v@PLH`gar8o1o;Jpcm+kJM1`b;B*Fjqfgq3OWA7+sprrDT
zV<F$kK%D*jyrlT~0|Em00)+WIeVq6OB_$>K1%&v8gm{r#@cIUM_}K*Vdib*Za}P=m
zzIHw?UVbi~9$?fSZEQWC_{l(!XZqJAxO@F;w;sNHcbCIw=jqNLXye5%$R~ihq<?Ox
zt^Gf5>hAupt$qCr9RBNk|Jxn=8U=Yd@EbVzdOq>7b3ks+f;yC!l%kJ=ji0BFk*BBI
zKmUq)&YpgrzRsRrU?CwsAu!a$#lzk+z?buGfws1kx`(fyjfb6sx{?e8xeGoQ7keoo
zK_x{oC1ptgQ858QK@|Z>K@kxN5d~2d1r-4SQF)<%u2u51d*bfk;rGwA_W!k3{y(lo
z)q=Yh^2kaKJ}&+a_9{M}?%=y?mU8*e=OX?e_xF#r_W$`@B>v-Ce&osUqyDph`%nM#
zBV_rYUjD0Yk#GK0`3@e)a`!>jH5%gf=KAXL;{4Cq@6%r=$47?;`+K`P+gm?3H`doy
zSC)T#|MvCE=TA$E3-fccGt*O(6XPGpMn~YoLxThTeZ4&&y5DzocC@#(wlp_2Hq_VE
zzN@LOs;nq4D=jH5DlEu<oA)L+Cp#-MBRvh4n({h1=~ZGvd|YfybW~(Scvxu2%NNgs
zpFIr<4Df&A=j-F`<>}$>_Sn_M*~!tt-p<y>+Uk*|#Y1y5QxoF{MurCZdb&E=TACW_
zYN{&AN{R~da<cbj?nz5YN{EYziU<n{3h?vs@^Eu;LXl9($^u~qGchvI)6vpUQ&Cco
zlaZ2uh=~XZ@bPegIM`U280biJV7|b_!T=xuJV>BGK0%KF03ZTzg-fqim){!>B;&Gx
z*A?_fgIF|j)#?ie<Ee#RzryQ_hLgaGarEj9#UrUu!%B;hhLW)i0lU#$^~Tci90}i@
zuOp3RlW*n1@fb9k%BPFeQn@Tgn<{3@^olgzXf#*OSD7}tej9DBTCBD1k7Lkmss7aH
zT)}QS)>8AO)oX3^jb`h+Z=Hd^cD{`T?2ln8%gNJfwbiZk$B=P9`q);#Hk{0&na9&U
z1g7O9>-zGbyz%E`zG6J1c1P3pY`J08qwx;W#~ShM4pBz%xBFk(e0RT(ceWn>=n2PX
z(&=hDUX2G+XIfsh{rWjor1@6odBDjAFWJ<)iT9m<4wqkAA)FYyyDolhg(ppR%e=q(
zbJSVuRPjFO`s(}_#@i1K-M0w9?eJTTTP)}0&@IADgHWK@mh}_7!hz**a^sj>pLMhH
zm8fpzz?lg8D0o3Mdnj}@mORBYB^KHem><VlzqOih*(;HfAhHR3n+RDcUrYLVOr4S>
zM|trk8BF4`o-)UL@j69I<svtgQJ!-nZ9xCi>oik;PR6LcPd_&@hg?QTGVDuTa<b?O
zD%i8!T-P^q9t~wp=la>YaHs@sa&F{N{odwC4KZik%2%N@pDuVmk}^`1tit8O9#0>D
z%a-bR31u4?Q5Y%9kK)=Xf154@$vkZy{w9E@x4ctTH-ymW<^Djv*h|9!udJ%Fy!KJ|
zYK7GePz_K%-m8c6O~+(%7JhzPIqwjLtz;~KZvh<x93_iKUgOcTxmpb9V&|HdLzNQ_
z($ztr0_%Oxf`Qdh#UwvEdNv~Kb-eaXDNS(GT+Nq*&hA0!TE*W_ujsmI_H)!Df9k;A
zd7#U#dw65dK0a){5c_x-PNFH|?Li^!C+JPX(skU&@XW#^oLN;w$b(JX@5GB!9Cq}c
zw{y?>BWOJM;W)uJ9*YTr{g2+NME!e*VE|p#Qw0^A=u-ua#=YroejMPbqQV!kW`ze<
z+_gh^S3^e&OwVqbBJ?%I{S_SgpS6s-{Am&UV!4PoKa2KO6&F`{LKWOP!Cm!Dc$VgT
zRm{JFl;GPk4#oE`^LP$5ZE7i}i9Z&JBKL_mu+1juHgR3v{aIz$Si5+hFU~5pjg{3+
zw*#!0`0}0U_tDefdSMaiPD;%emn-TV-5qM(vU$t_O=R|+9&Jp;S02kkh^tpGGpNtk
z2c(S@S~Fmtw-;Mhw)j*yEP3Ldt;L|e>(fQgmq1MsxiQ6Y4C-rz{%{~rqLEg^qTo5f
zr|^@fhCl<!WYW&e&=&d`S+pmf%0HgzoMNvMDiSP*g9!?N^5-$ZT_HG7tpYs5^GFgu
zz`c^pAxt_0`4933W<$Oc*!;G*teC5z1*6P<2wMros5t>ygrOQh6Fr3D9*?Zj`j4~k
zsRI!_uVZzBt)3RD^>TKU#R1zPly9k-_-3Z!x6#(*2PB5BGN)slwWhG_VDb!6hpgHk
zBPhpy4Mox)`}%h2GbA-CzFPNA5`YzuzoBA3B%evv3D#wzI8j}~YETUqnP6d7ANr*w
z#GHotoh=$Rvg($S`q0RpiiSo~^}9D)kkTXv38}`xw<9Zsxpi(E8uecvPr%K^tI$*<
zjn&*4miqM~u1UBCeTM=2h?YIc4fQaX@R#}^{e++_srKRZ47m4tRkRAGy+VG1_SH06
zYH?)3zfzbwJy4A-lzCkF(lhrVmy;LX1p=LDef2GXuv`wYjfNk*%#3de_LKs}DNCFd
zfD)aVc?7g0_d*Ov#-U1zp=w*@(_lA?7+fexTuSz7F_gE0Cn2;al3uQ$qa71d%{n6c
z^J%HXw;m8zHb{L6txRr^6PIsF|7UO$n3?S%pSPh*xP`8G<Q5vCwfuag`R~dpFEpjk
zD^XQXe^-it`wSW*CWW`jBqDPkd1RX>mu*Io8kWZrR;n*NRB*5U{I$eDFzQ})?`ci-
zvk}ZKsoWw`)(XG=D%m9sQ0r<`fFMnE0D&}UfK;bGfg#4u6T>W1&G^29`>ff^RO63l
zqP{PmyIEVFm>uXDgVSqrT^`1LE<}7TZ46_p_ImUsX(`>K#d*z4+Z?}OYSg8vo0Hed
zC8uM~$G@4E*&{XK8OQpWN;_2A-Pe7W_-li4>rMgR+v+j8y;ZHwcHaZ{f-%x<o#@u?
z8V0Xpc8lyb6R9J%+K$ugr48%=mou!x7Xx(A8-s)o8Nd0TquoorQsMXz_l+aWq00Kt
zd}}ZIZHnazrA^a8h<Rp>iZo-P+<`$Mq3COcC}|~YMH&h5fy^FsN3Av5FM(*J`A+Ex
z1yOWYfkV;&?0``3FcR7exSCEwiYzq-Luboi{L^D|P5BM3hZmzI(5Mon&<#Grc8USc
z$j3vu*?RQ2qgyFL9y7z6zhue~<6eA3xj(gjO3l*T1F69BZeIVCA+DT!F+rA(aZ@T!
zCZ!#9|1^`dW{Xd-W7_1YNO2MCwmN^sOgbNFsqjsawy%_Go|q12h(x6ZL-bq``ecd7
zpsV(i^Iqrl%xrgz1pX~FVB19Vy8vFaVUjWoI$+<s=$c({L}=%Ss2)t6<OoOUt4~v}
z{2O%z!YJrO7a%#mx9(pj%R>E0HhK~iE$Tw4d^pG*s0CF3A>lgazWpK3p7?OMfv|!*
z>2m_rutvYV(SyrZ(b%+hj*+?A&2)m#REWBNk01IXp0S|ova~pq?klk0)5H&ecaK{#
zyu`3zX>@L-U)h%lvih@(iD(bB5&oW>_~&Yc9`~Y$L;5)X0sRJs{)LCx1SmuLdX4UN
zdk|ipNz9go%ss1^Nok^AuaxfHQxfNx!16i0VYOt|EPFL9e{w3EN*~V7e>iug|K!+0
zhS}`x#6mltPpvG!xgGzr=!sX!O`1;oZf_-DJSJ+%p}YBhu@KmwMdar()H^bGBgN3)
z{o@1oy(3<xu7w=N6rgF2xPC_6njq0dp5~){7)~sJ&y%4$dg74y^)t_&Z$Tw5Zx0F(
z@GX~jf$~DPJvmlESd2oki@$~@HX0*w&gD}+g}0n#cFByazVN)itc>6NLz~+^lvYE|
znqiRRy@ybe@#fekCR#u!;(S>5_T+I7lj5clEm6<yS?7-%44^!Lu^i&^3*z=PsTcF?
zCumKU=AyVbSY+*aVJU4Xg#ObnP(&SmIXhQpGRE~H=r$wJlS%-S8vOkU2w;s?s7GIt
zk46Fqkx5tr)U?ngM5usZ8fOsQQm74f7_ng3p~KUL@TWutPmk-vu%^Qpf#El0&)a*S
z7pH|G3c@ja!}+Ph@R`G(nS?F*h1n`bT-ronghuoqhia6Aw1AIw)O7SDqzp2djG!Q6
zD7`6lxLgdKf`n&#S=e54IQ>$%StjV=mc9t|p4bvd0?1^yMC?FK?{psCWD;sX7Ii)y
z{SrtY3JrA$q<f4A^l>+h@C=Ob&Wv!Dh)JAdp!^d#85)xo7<nHalewgk?Hu!GC6*5u
z=NkihBEc2_lna7`o}Dw6L!&bSgCn5grJ3QWrjc)*qY9v5iEZq)<x2H!pvEo6X6M+j
znD{K9OeZ}0y;{@<U`%gYL_geV&{=u795j;2I949ldj7H<Dq+Wg&YEVh)Anl5*<i%l
z5h#)Pf*KH+uYb0s7ukbe6$q*cbhpgZwK7#xUe?8Ukc=Ia3=qX}5TK8NqYrwafoNWn
zO1=gK;fn$QfuUHR&SPwGNQjTnz%(fk$rM(z6gC=yXQ1aHSR~bYXnYqb0yL=t?KtcL
zm_c5t5{Rr+30!o^e1{3OxG7UIkNlKMWzy>@%L*HOk3R`sCS?B6GAE`aWj$!6*lGx8
zV>C&BwqsbwbhLqbnwZh6)P8s2-ZW1NJ{G~W2QKO+oaR<)xR%Q>r4chNIZ{`ebS-s;
z3_ajOIWossI)*wzlH_#jSfwx2DxWur8Ip0IbCSJ`rTaLA8BRkQ;F9ScWRY8*nXsMd
z8%sC5jGuZzlID_T%gGS`DU<&=v)!8@1(&pFB)!BX8y1qyTaevOl2tH5Qp>54VP=^X
zL|2xT{YG7;<`YS$i)OtfL$6s*zq(AmOKzlkb`UNjgB&hLPcFR)eRWn2wRdjcT+Z6>
zoOVQgE|*PC*9!h%7Rh%`on<rYRmr@@c2be4+_Ka>s$;Zi+?-i6#`!GFXGd=VwE5^#
z`IzSU7&`!)<Tt~;1dGYULQ}XP+5%Fk0&=_pp(*Uu{Cs%(+l~5+!lME(Z6QRekk!19
z1<&#D0dT*qkfS+$1{ZdS7A%ApJnxOm;8i4%T_n{}BpK(18IbuHmig8ZOfOjs!YBr_
z6|1<)?{C{4wijRG7U|)!Dod3B4N8nPiq+zbG_p(RxJn*Lv6#}92I7|5$3g6#mg?_l
zxpI|0d}?a>xm5OZvHn@HPY2BLX&G%w=~F46kxykNm!)YGWg!}`=*`PzS<35_%VWMu
zh5KbY`hPCBI4?^vFLg7o7(Xd*psdJzN+0~Wf;_N1-?gGmq%yX$;?qz?X$SI=`A`%<
z_lLTwL8_|BysG7CRa<sdM@Ll?7am<mrI0Xi8-O-oUOn`*8lGJ}+EM-SbM?e!^%QN*
zj8x5>R1KXq!SNBPh#ngDRL%Fxnq}H|t5WaQ&EIW4eYchUZl~kj-sg9FQn=X302jg9
zQ}f!hr?uzVwU-^W*Pm-|FKYpGb?DM{m=Ei)pVa|#>hL=22)@)2UDbi;>Pe;R$sg8J
zKC7qBsi*C%r+-|BhW77-4-J5%fIv(D0t@s1lP@Fy5&$W{{W}_pxS&JQQ28(fDUybI
zt@K7?lPToJ)D<X4k_)>=1lF$&B{4}q!o)pJLDA4hw9uJVxikTNQi2ENC>o0Y<Y=*>
z;Dcs^4_*zYE4T&s*$mWj)NeZsi!|i7eH%P88%w*9%koHN=L3Twg*on+mzi|KGkB%t
ze?voCYkz#e)d#ZDa4lGoN2*<NSD(FpI1q>5xue?NurZc|XK9O{<yAeBp=dJE73A)e
zoT6OCKE8liqE}}(mPhz7UC;wz6s=Q~wU19!ABLo%_u6n&n?H}6Be(v=@_zCDc~4Ep
z@7<+ZyA_4yG$alEz>VM}Jh!T}Y%q^CpX`2LuD3yDknhKB8~pm$u1VJq!I$#4=hJ_f
zLZ~iUnL-K1TW3RoT=rm1LUt%Poa8>-@L`98nwcgZQCoTxt&iGB7^o7<HcCbYz7X4?
z?XVoj6Gyoa%w0b}0`OliUwd_LQ=$j0DS0sV;mV%S+-q1&Ke4$-+L5l7-se8$2qR;c
zjWkooij8y&e-{&wEAG&OlfC4bF1!4|60z;$k|A41r&1c09M|?Bh>LTjI)|BmSWH<i
z&jF3`TiVt3@N8r9nN6X_0eFm~c2`dX4b0fJqC~4p=%YD9u6JK?MwBZyncH=P8D~~;
z<xXX_V}sg5Btp*YR9A3a>dO6BWl8|<A&cYQU&V3rOBJP2++w0MiWRvC5I$FenqWbH
zJQ=qFdHHL|P&|WT9P9b?3OtoUQ%q@uv_K<@*DfVEOP^gcThu*oU__roBahfFeN+jh
zQDjk?4QwBhvK8yaQbMQ+BZ)bY8pZr&_!MtG!#lr=`evR5ChqRrFTJyPdZA;EEB2=?
z|I{c@#SwyWs4V!~zTEVk*Zl@f>J1x{8;E9}R*?6%p(ql=@AoeB3p70ilY&3CH#tqo
zDaQw2*Pd?97T_nT@Jv1VIa$vz`_8?SX>YE<<ZyHUQe1bQ*^Ix*ou1?5)o4b}5TVf$
zwZ>B8;~%e{XAo%;X$m6>Cua39!CSLcR&T$f!Jv-gr4+%(bB%JkMU=csOl#pJu;Mu@
zb%X<CIpj9cI$ssY-e#>t$W9Fom;1dyr<e{61nW?KUeF6A_gS)WAu_Wa499sd3W+5O
z-7<*e_SjsGzc&bFQK2bpgT;txsN_?SO&HlF-6t(CNWMpUkrMAYjoy>0r^4v~YdTe&
z#ee`BS+s4t`uZ}gqc}G+DDCTrba0kL)!0j#wl{OUTFihr*ZDLnZvr<fe&z+AnVEow
z=S6ch(j87z5{!?AXKje9+i+eEoG%kGA&Y~vglkS8M`8}p9D{@LHGj0cxKe1cqI^OT
zTcG^LcLb?Xu;J}O7@F{mplzGkRnV?8E)6K2<xFoKQloIg3BcvvZK%g12mQTrBmg1*
zgq6RkTh3E&@6@dbc-@`4^(Yr!zowXoQnxN9i$-Euk?I!bQL$zmkKJg~c|+-kED2xA
zQxj<Fox1hg3|cr*B%Gti+<&KTW$_jG;j+(EaZ<e2I$|}PPcrR~6NS%L&DT5Er{C-d
z)O@LWJlXw*PMFWMBhcitdrs@&!aFy`&+9qfN7^0!^0e$)zQ-%A-W2?Nd(`|U8cBl2
z3td?S7;kXXj|_O?Qc&ua;ZAaU;Rnq~qcJhdCQ$_qqRVZhx+Q)XZ>sRU@;Ea3cnzL9
z+>v%{AW3hVqAAWdG|Kx0$NTF00o^WLg0aGVL|fZ(q5r|w)y0F0l~uG~hBHN0x^KZH
zK)}iFk4dW!mzTdS6@d61<VbZ3*bPAsA&4><4F{<}Z8%|Fean&5j!1Qj-hXQ)8XN^(
zjbTl9hA2Sij18gnZ9da19ImicYn~1WlV=jSk9q>txU*rR_(3`nV2sz-;&`zuz9cIf
z8}(BwDsRv7-I|^xr6g=EnQE74h3gY%5@M5rv;u86vz$v^96`=s>#?xBhB%#a9rXkW
zUgOg&Y-HHP(WFyiVk*SyBGk;_D&bFXdz7tp*eMAWPh%Mz#5j?aB3gju!tUcz{8J>}
ze6HNaMV@P0?KZ{$URm9;<Eo1p@yUFe$ga!vaaDm<9IWEaqd7Eu&V2A5vT}0Jh?^{6
z%GiTq58d#J{f;PW14Oqen-gqck<FYoRotzeDxbOAOoB8$Dprl3dB|&cv?g<IJ9fU4
z+wZ7KZvRDU<Qaf(lT+J$bvp#=vbmMk>p>S*>X+#b)|_%W)dtLveUy4Eh{x7tU80PU
znL*bF#*sv0qYbSatAQH&V96c?(VvWMC%UZ$2`qlh`N%fo);KPas-{jSjdO!B!ba4H
z&H-etIi1lG-#?wz6CcNw?$2FHg_%0lh%VGzll@z@%OI;=`Y)XPKU6!5GOF6ix9eGl
zUn8|#9_I#!fiwX-M?dx1f{!^8#0%9~jT{qi?mfqQfGe^!RRoTwRUU0Bl+}+cL}|IM
zbH<E0u9l`+{V{i1?$r~Og6fB}w7FqEvs@Ys^P>!zYz~pF-l+$3o#flB99|qJ-{SSR
z7e0hqxdv-gptM}hCr9GH3<}_xbZ<+lpO8Kpr12Cb4J$%vxnq9tzzTZOxjJopPQg!w
z;h7YG@QE#4ySU_ZKE9r<{I{rTXR?YpU$cm0;$v)6t7tpf9m(2lxd?vzWN$f981a#z
ztutVErPhRX^3%Q9!|i#KT+GVYtJ0%2rw@}atzX=XnZa~ls@>pN%VM56fkSXlRMqKl
zAdAb-`<IiIFz%}Tey03b#2<>35mdF?vfF{tSL1kEwpQZ>gd+MJMIuS#xv6AGi!_7}
z?2EW@?i;{gLFWaAV%5^y@EM5dx3rlvK%6Onia;CGL)3+hKwe3%mkx=OrI};|WF;`|
zihLz7>^hY-R<W>so`VP0I-_%UL&Q#ta6tVFF^%#776VTDFR?X9^Jd9irwimtl*<ak
z+m*@-o?mjhy!jd_;#`yosa)U)@$aB6dS#5sX;YN``MXwm)G_V0MQV13esz-LjzK_k
zx9fCSg;0~LRgupQx8kkEOmD+Sv0XQuNK??Bg0ua}Ui0`PAGdlKAFR4z=|0_l6W#;5
zgXRq9XK(3-9<39Qac!|2cAYLf3#X*^F4A~^y-<ZtJaM$RtL%E}grP>lWis94;|M!?
zLGT<RPxeKuI+;8gTyQ)@A5eV^RKRq4&FpTTKmzPEE%7me!TOW@*u{hCUXqz=#nKZ0
zq%R<6E5c2n`i{xlB+k2Mb2_cY@xJG-+R<I;!N2E>G~Zwo^_aS8a#{pf#_@1R^PVjk
z@Y?!xIG5F&eRgZzKl_6I_dZqvfYe6-0smKb!GFa3t=hEeJ4YjkjOt^STsRSrN`6$t
zougqMu2k`s(@NnRbe>rSjO*-j=V)NQ*(A@Vow0(NmCT@8$?y*ew|ud-ngQ-rt(0ZO
zMv*Riswo*TwJAB2qv6Eo(A6ZrxZIyCsuuVJw{|M55_aCKF{5Q%o9~ha;7lC)IrWf?
zpe@(ykyQf?ejO!ze>L<I@Ih>3BGS=#87%(rR=exZz45Mi?u?+|Unf5^a(tt7-bkM8
zEZI%49C1r~<7E5@L?E<B<UjmEb_=>M1%Cwo*jOC1LUg~lzBs>{f2muc{o?v6@h3is
zbf7H~^Vz8*0JxYEkC?OcAS)5%#uC_^M2_V)3Q*urgTFwYZUS?HnxZt*mi_g;Bde#p
z<Oa4{*1_@vi4vRTEU$E%nBgRH*qp`5<ba~3gsI<!{d|$-YBtOb;Mi}Bj0sOhkas~)
z32dpkXVBEbV~Z`*#&Ic(-aegXIkUgwf-%SAU94k{w_|`~_LHZJ3Tb{bMh`e=t>-Y<
z9%!q6d-Gh#2$~;8YF?h_+t<7$0<aKqE{I~J<$Uncz_p?%Ng?j1g13uHWqL!kL4|U7
z-p)>1mN6n4s$B!?o2|)OuX9zFPVnBXDd9;eSK!}t(#Q9`7UGfbaXW?src}81n=p8$
z@|DY|74}=E&qy%@Xa(g5G1t={AGELEUs05%a*!WUcJ1Q8QtQj#Do)MX>X}r=U*A6b
z0Knln>cOOPJL&~;R3G&bi0^snWu`xPke4~6;W{|x5mR4GG2AYwLhV#-V-XK?I~jrU
z8)OwT6z}<rc*N!wh}yt>d&ebyR{K&5k*!Z*OX0lvg-yw#u7yG2R*1xWVM{c;E@!_`
zW_5A*-|Q6C>1Bab??EYaRJ|uhOZFM=XP^GM3uL=Slqs5Orq~Dbs9L{b^BNF+dt!p9
zlg9}pD;EDTcu5$zj86C{KsJgcFHq8hhiL4_E5vN?+ykrqQvl55b`onNg70#x*lPJg
zj`u_E$x2!4!R2n<FyGZ))1t@Ke%sF%$>>NUYP!Gc>X!8AJ^l~<{$9F6(vv}Me*J!9
z0W<jNoQdbn?<G4ckra7r*Z>eOg8%k>J;U?G1%ENfBsa@XHV-YRrS|Os0xtXV;OxiC
zXYA5-(b57C=V*k7DlQffBy%pj3~<lD#e#qW2=6TikwWEfE;c>T;+I#&+9W;@YK7Ai
zFu$PX5CFv;MQkzK;4;MYkyUy{Qn;;PTTV%a=__F7K|_cF;Qfr3N6~WY1sv2VpePm!
z0);HKLedQQ0K3$2tX8ne8+7!)H;5WYuz2$S1{PN3289MF`_rL9nMj@S6i&iA9!tf~
z>1|tZXMakCg1JgRhThscn4|1ZEdk-nPNnUN`I5+MOH2j)kURUcq&Y;>xJDJhN#|XN
zvOje})EV{R5}e+@S}YY7SIM(@*K@V6hzV7=!5L_6TZu=5l#Yo~d0Op4^6+rp$KMGg
zgv=-M6(0`pm?0mT88StW60=X87V5-1Uui$|U9N8SHT0-I%sBWFA%n)mC(PtMOZ19+
zQVj_RDEl+1n_i+sY_?Ii_O?@<3TodMk6_YeBuvKq`jV<}pc`p_!u($wyjtBGk1nun
z?>L7(ckr_7;mCiMrPP<`|EXCo=4C2_KqM`)L0pL-VU))v*0)DCh_wC%J-h@vL%O)3
z1n1wwn0Lg+@UyzoApzVi=a6v04v8Y4{W|Bh#DRG@OM=v`spTsnyo%f;6~<`$lz!fk
zbx);(b9*-(V?QRP60M@?G^XFw>nawPscb4TdZdmnA0A{SD`wnLi${<#u6Q#e$K1f~
zSVv_*)7sCsA=r3ZJU6CuI`lniX33e6B0F0}$&@L$Xitn!hp1mWUOGeL*jXb;B_ojb
zXK|F2BH>pH*pPA$t9JwhX@7F<R=Y2S<|)4|7u<c<$ast{K%14Ut~v0|2#8DF9P*lZ
z;6h-d@eVBJj34heFF982w|w>A-EUov;^uR3@~@oA(n2CewoPf(JENU<W0qY<-Q2A2
zsRy||pPYxe946hE7uUW<duVo)fWt3x^d5ni>lJ7F=m|yHkuh7nq2ocP1({&i%E&M{
zn&(7Bd#+iY6jDa-LuzA@vQ9*OLz2Qt)h=*=0*hZ0h3-E3Soc_()FgAj5)4!FbRvG!
zDyk;E*bJ=NQ#0Dqgw1mp`j)?abyX98%bI(B`@LvQ_Fi<+<Ryduyj>L%Hr(yr`_Fo7
z%J^Y9{jrn#Y-)ud#m3`@g3p&Dh;J3}5N%p#ve{zY=WEHTd>8956OW5Uyrr^3?eC7=
z7inzXyB9z6J*B0#b93HF?l8o5OYKU~&|s>R^*>5Y&cf6$S8o2o_xg3a?C{lYcff_+
zQJ-)GCR@D7;q|X6RsQ#<40{)llM(LIXrT?i!<#?L(flvYK^E4}<CdI~K!oRRtG8E2
z!~BTr6B7YI>UPy6EzkLG_qPoMoXHQ687mIn@_{9XP4fiAvQr<0l*^l^P|C;RZ0?6q
z@2P%!p(Ky*coeSUi}oX-38;Us7r#Oci^CY+N7<1~_Hat`QHoqY?dPc|H|I~Va-Vt>
zSZEbsrlS8lENCHN!T0|R3#W@VukTV3r-37HhvEwCD^RJ3Y9bCqnvc3+NqHg_cng(^
z(0x-wnUxS*N6l#?nu1J4oNCo4WQc{>YCPCZ2C#8U?Rr<<r6T;X8fxbC3bDso^9PZs
zh!$K@m;|yL_}m)k!bTn9jb|Qe7?*YPunw>i_mz)PB3JOpdI*_{XxTd7TOZ40)9pQy
zK&B#;xWgH>vm30(N(`%R#T{~>b5(XPzkfAr+5gyN^W*z?;3!3ASGZ~vbC-mj`cNvj
zmB$p?ub&j072B%sk#f{R0S=CT-$cmaa(_HRya^n7wp@c(VKv$Pyg*BG!Y(-EBIO2|
ziujVz>?%nB(Z_@?hhSn;hY`9;Obvw*h%Mz)bz2~*AdXUlCNn+-WGtdDs2?lpa(mb&
zn(389K{R!CAY&ZYJ8I21-upkt;{_FlZ4*C!iz)IE?rSUZM#4g_BpV*C{cDw!ExVLX
zEVF4Py-UMU5n5$j2dyQCiVfxO(Bm-`V-1lzSlCqJ$RZgeb8A5=4sHghhqbnRtnzJF
z#t2ez*#1c!1Mqsy5qj=YUeIhdFhLEwg9Wi{byn&pKCk)RtkDKbb8T0)%igA}d{xd_
z$JnVTf9e{^Py5C$S2%AO!LnO@4(=bWY5N|RfJYr<I9&VWt3VPLQgNu}5+`3FNJVzi
zdw+)ogJ+v9#11*2*5#c|_qOGyUqJ0&vo(_ynOk<>JtwK)PL|Cmr`mphE>`(S{aa;c
z3`qbz^IZ=i(5tRDgQmQbF8{+u0Q#}6E1?A9{ehgx@wkuL>3VU9>{){G0KGJ;kPSE>
z_(YvEC&EK(y(LqFovn!bpjGV0wZ#~}9jtL;*M}~So-a6EgZcW5pmaPCPg}&<fP6KH
zC))UpI#lkhX6$@acGhp%6{7vHbbBW!eM|(@P8s8_lP2sEA~Le^L;Lg1Er28{f*=y1
z?e{6<aTA8h%K`gQWo0A>T?$EkULzad1VO@r;iDK5CXs`-=8Ql&AZLCw-_xyj)4CCi
z^0IfAJC&`o#4YHikh>m21KSsre|6CH=bbdWvHfm_a#NRr`UaduHx`Rq{4ZFLInA*!
z>ODp0HJD(}Hbi1sk8-WdpKmXj?w_s&{7AZ(eM}sGDH0-k!)5~{>AN}qS^EL>%nqT;
zd=WR70<jBSjHn`~&3uG55-De1t_xT~??ERnN5k>g1q3vtV-f=2Vc!=BpZ^TT;6Cqt
zjAo6U<&}i@DHT_>yq1XsV3VlwfCR8?4P1d2pn3@UN*3(kr3errT1^RJ+=JhBPD02{
znt|#e^sXc5`}AIMnIFfQd<Fb)Rl>#Tnh+KV34y8zrTiK!kDojKp*)qTA}XXL<>+gt
z5O^H13m0V0$R8lyD~DjI?K^FEz}bZAhb4UANg)KqVBC>m#aqGGU;5x+e6u$s%%mx=
zVXQ2KvFU~(LrI5tCD21Vp>nsA$V6!@9Lg0M5_?EcT|x=Z!_ekh8vB%Ttqm?=Qp^Of
z9dQpqsX(;)M_bB9EFvI=zE_rJLq$p&)rb;*qGI?5fyS(*Aa<4Fi$PXG1H7eyS8V<?
z<KU+092gj#*1u=MzvI`NBR3A}QJbMidt00|`}DlFA(}}UecO0S8f?<8<hZcX)mOL$
zv~NLi$svEskVycvk!b1jKcVGnuX2qLDnmBU7LRrFX-7@S4w{V6&^N!!kZ~(tD7qY{
z)YG6cWRgW+RbjV%$*bz*Wg^K8Cj+K;88S@_@@(}~<^&v6hU~IOY5t{!m^VXw^Y~&T
zB40gUiK0ec7iySmi6cZf%Hx5RXZ}SDrO)0RIMAUO7rx7pGBQK9Vkiof&eOW!wjW6o
zeyk(WcDOm2BOT7j@KkVnHdPtfM4iuptg7wkCOA69tUtFPGh~)iXoo*2IGeXskr}eJ
zq0nLDsDUU{hU`mVUu^opJp`W14`hby?B#~u0YcskO7`)Wo!b5xGvpOAL$=mwqGvCc
zEpz^BcXAR)D6rAY8HUDIh*H_GT6{=DnrVD`Wn~4SD}W6cWF-=z=gb^MK;$(TMbGt<
zIfnUGr2xtncWx8c;{q>?rRau#i4i(bu}f?Zih;apX@}dni{Daz0kD3B*emPh_Kc)x
ziEXc^Jk%4wS0f=0n}aaeqr`hkTQm)4`@W4#3qDe2jpggqk!%!NW_Jd*BolxwZ6ib+
z)+;!ug3ms2;Lzmz4O7gJyKWW4Xr$s}I+?>9-L<tqy$mp8uAY)i+c;%R{E%X78odY&
zmHWl%u3Qy*#ZyX&HcdOo3|R+ahd36Wjcl5&ZL^a59TCI!Zfy@XH%etgWysj8_E5UR
zUOkyIw|nhml*oQF*#mA+%U6wJ_txe6M(%Cv_ccA*$MfP38g}00xOE;V;Cr@>Uiyv%
zov%I|Z5nxGKt#-pdB?bTyvP;n*lHSxuLlY7vW}|UAMDC?9kn|Rjy)VCnWQ7pK0-hD
z8YZoP)oRAW+mjVJJ}A}ruxN^C;m*uo)1$>t`KeQDE?N8{wGqh%wH3fu`fPgh^XuBA
z^G}D(L_+NG)K)0>(S1zq-h+n8-<vj1n?=9LRZvgmSz9!T=M_^_=MEN|wyt9ES5Al4
z2t_%M$pk3x(j!jZE_#*Ki2H!Q>Dzq|C*$*MHRgENRv#n%h`!+#K69dx6>%K0Zbyfo
zKx}BwjAUF%2O*62>jZmus*#Lq$H*&1uEEi4ju_Hu@qLC5Q!99n9sFRqQz0JKsJ=?!
zHr0DXmFBClS_+-)l9!Gb>?K=rs(pS&7EE$_inBdIiey|?-B?1A596>G%veJjwo*Iq
z^Ty)K;WhvUYVTkD{_)c7b{k{y`Z8Mf1~>U-c%u~>#!?L$`_xPRlSE|zR2FkbJCwgL
z0+U;z_h$MqRA|Opmfg7r+g#6s+Ws|A6`p*ZW@{o4QNSa2+>5Uupv-Mwpa3|+(}1l<
z!!lLShe-pX>C&OmQc7y*9(6b>5=gX6SS2GQ!C-|h$C)CLNz}TSKx$bc=0Xk!y7ESd
z(pJ^#n7UOiOlcLShGwY0*1U8+IBW@gCHS$3@ejPJlOlrD5KbGdk{oM5eUcobRScnO
zho55M5I#$tBHTNQ(J((r$^2N%E*umBjOc~5f`&;TSs8}Q&aPk*Wmc7u_JKEH7?O(V
zTxOp%+PyK-M@b_k@|MGy&QCIWPD>_T{omvAte`7!FF>HjrH*lvY$HZ$a{q>HI!J8u
z{tMgEMwL+BQx@gTLsULCDg(-#t5!GFA5S37^Z70xOUG}6%*WcKQkb$LJ3${dawugs
zEO;ptgAB^+TRE^=6bsK<04FcY-Q{Bwn=VBgxBD4x?ljdOz%rtY@ybzAE|%)9ldMAd
zyL_zn_VFSf_X5~Mzs-FMZ<nRjaPtv)L_y7Wr1yl+*rhimrXPXK$7(GJ*rGbY@6Q5}
z#$-I!bWlQjqf_fE*?2}717W9`a@A;^@ylO33w6Bs9X{MG?jr&oyN*0A|H#LF&o+og
zYO36_d~stq)i_9RS+FM=X-qaUsiy)0aWx9=2;%)N9y^izPWK1psC+EG0|Z2GhVP5S
zwjW79zH|k%gPD<?AW=C0$Z)<k$3`HwwH!_`+JNW%bR057ee7V07x{q=q|A;uXF)m$
zad4YxOZ$`ASe~clka&TPHb?^bsM=br*mu*lXyF}di&yvYaO{(N2-S-{RTwKCrf7T~
zvQMpR2X0vKQ6Hhyqzbn5I=@9Dbmk)=He-mJ?-0^KsMyS+0v+WV;<r6m&Gk(eN_;4z
zr|>h6<u($X4UE;H&*{_FjAMN3%(|r-sTD&(j_cm^wV1)8aM|MLxqm#a=F#$Y8FvI%
zWx0aVYiwiBF7QC5!~iNE+kxOxB5LL|o5*&GDcXJ4nTHnokl~1n2os5IJoT$?0-JZ(
z_V-Tk?*#Fn?M_YFDwQUEyLZCr(RnmO<I#1R0`z!){^)a!Y=-^T;fMWLThG=E3+qVq
zztkk|YYk=$Sy*ki@5W;q@z_C@(7fkT1C%|-yb9iikTCkUv9FJds72^hyQX-nM0gs}
zXZ!>f*=%3}!u`-AO=b~VuLL2*yg*|#<F|FdrYUl&d_Hx}&TEl5c}*En75#u<(Rl?=
z8N-D~FD;)eSuHMWrv8qCMB^K-Rkh$-4$90od(`s&`Q}&V{^y(bEP|Iw8E1b+UOM=X
zyE~bFe!=-_f^c^~kwD1n(K~{;o}0hI=9OdpM8r7GdVZ4L4xlqlEersBg=}OR1RC+V
zS^IWmxFrwJ<*mQFI_UV|tw1f4$NhR6TVLVq7|v09ee&_IPB7_p&v|-bXa}X9RqgL4
zYc@a&!2T`&pV~hxA;$|*wKDJ5KfJhYUdcdTxh5JdMC0A~@b*4)RwjWJI~vqV77}v*
zy_TD;hd02O)EY+=x*7^f$j4+_!j@4A1v10)vBk@Kp|E^o4}HJ@QA{nS|0c#T9Fq-2
z5L>(ypUU@ATc{xk;!za+V>~wcsU&uWPy$n6AqX0+HUOcmk3l~|Kk`G0OqIK6rUgoL
z#V1`h1NmsO@Kxg6KjL9Xy#BkogrbrEXpCYD@4y50FYo|q@R)8D{1vW`5&WFYW~&fK
zFL|Q*?jb#MI@w8N@mR8^O1>5<TpyqH{qzeeT>rwDYk{D-`rBlY^dIsL*oi^(UAX@8
z)NxcxJ{h9S40A+!(M`9(a}SC>Xgbd#rD!qt0wQB^?26bvF4OEJS0R1<vOD9tN)Cg^
z=qoZ@KWkJ(9S`k~Lx$^fsqt&AV8V~T2Tu#xBh@9<Gah8PKBri>>d|xk9*2cGyUtts
zPXFz>7T@rpnoe;Cp26iyM!pNo<F&W~u+>CYyKj}^kbSlel16TK3f#-zu3=yM$@x1F
z@l+8NuHX3eO>(6K2_A=?)|>G7u*x75c<?J?`PKtgQx(CB6s9q<x5ab4kUQ{*C%5f=
z35avh5QBkH_Tz%md^7_L>yd`EWhQep^i`lm?4(}dYCHl4)nXT@gcik%hM7R3BzKmQ
zIQy2D?0m(Ewk=+(7yyft)!&`lC2R9V+rtL-;jC%z&0-zWWTV!`(na*qbaCy|T{g4q
z9rHuj==Vi>46J>~C-@@gTz<X@Tu>jOxK0iP<a)afP{c)eoTqUIVvXwSMT%WMaBhmk
zUMa@Y|AdBboS(m4>YSb>Pk=L}6e>VtZ>@k0Mx`1m9Fya{^y5%8a@CquM^aoqpBt0z
zxN_^iYmEMT@DTd4)t0EEdC(rA@ys}HuO;4z8<-t=5am5ywc?oJX59xgKHWu0(O(aN
z5%ihM%C|6s<-V*49|3KkLEq66zWZ8cZ{yr;dt<3Y>(MFgBX~~W5KVMt7VV|EUhE1v
z`I9kbMKncfEtjZzTMCKZdS&UkQ&o%7sr9fp3O9PsHX4fe!ZTEy&qZb_CEW$*2-UTp
z%&F);|1E3mY1useNZJSu${GC)MCpid^@REmjMu!st=m_KG-uw`WhOIe9b+S&x=l3l
zrI-@I)z;=A!6b{}co(?p$jUfyr!K8ITEFh`L3TK?KW>cb(5h*h<qc&u)G}J1*nI@_
z_+&(&g;8)0Af@Prha?lSqMqFGok621XNNsF{MSbVRG!y=fd_podO+V-^W}SAOPuBK
zwb5DeL$FGkHe}2jOefm`CPdQsoSj<5w|uo;-*quJJXsYKU<;nI5d}t-X6ULC$%Dut
z(tH3KbtvvV8+4#nK01YS<i(s4@HIFTlS8c+&-^HiQUn_(Z-LH(o`q~jI_A&=Jp?E7
zC;}C(H-RhAK=HB3Lx>3s<nPoa0RRSvKN2NQrm&6hfPaSsbtEMGLvT*}pCKVTmg6pw
zfH}?kicne(tkA#)r{>T{&fEO5EoHdzLCxE|O^Xv&<jt9Hbk<Rc<eRq`h1r#YRT2vU
zT*5{?Ci>6rYkY31T8z?dJj>OX<ub09YUR2aZE;D?f~G%8yKvs@i47!<a~*5-oP9_W
zS5194Z=-Ci|9h<MSXm=%Do!*qE@f>jlS=A*r_g6}GXHT0+)ffHI8#~P<4)`l-I=Ji
z9J}3HeYE$fjV@pU*4cV6-yQxdlDDhPWVAJrTh#?GqIP4-AqCgcPOB8zPdxt6J@%F@
zD<R@10{<I!d<e>&Qe{GmPsBc28%uhtr1fztfsO8_n0e|95qZ8w{NiHU#7F?D2U$ic
zOA_GF=QPgbVR%x`%&M&kJ=hd?i3Da=dHe{W?E&pDN+AhD<{;)Kd`{L0dk9`vecEbb
zi56K=f+UuqLZb9)S!$9THtx4%Sz1neov*AF>#rqi3>AEIv7_x@Kfn`bNjJN6T!mTE
zmZidsq9ng0i)5P_qTeY?ULN+gcs=EkWF)g{`KT;Qg%b<3n#D=yy_W-rYPdaQtS~`r
zXR9#MtA|)slEHebfL8m7U7TaVT#|XFNAY$kk$;?lWkDP*xPmZyl%%o(8}X?Z(zM{Z
zTZ2M5Eob|%-P)FS^BZhK$%O+bu2hY~_K`eP5S{|rZ<;gUepM$FYG^?wwuLs(x~$?g
z+_s*AKY%WjmcdBA*RspkiEcU_kyR}fv#(Nf?mN<beYShpO+3W)zqwOK{UBAI;{kFL
zx8p&iCx!B8_m1xbXE<wyme+eI4o`hZP0Z@an7}ZP@W=S_V14e$b)?{YkE(FWKnCZ%
zuU$rjd=Ix82P%=k{X7&ZCOy|Hf@kFZd)|~Atc@c=k*Kg>ZSqE8&Ml~JglE6_&ZB*E
z#`B(<%vvSyV==%G8@@i|z|@3j4*6=&ZzMPJa?<@oITGhZ;A%7rQQ#V-AW^$witfY|
zIxD=eZ6xjC?Iilx^=go!bi(&3hSKP4AE-|oXop?s0XS8br$tSV{q`Q1S$8T6GK(C;
zC|rpi@TDFkdkQQZy6Y!S3<;7$d>GuO<j~~pYj4iJaF9f4xx&=od@W2(nnct3CqFJ7
zS{{skIQqk_xr3ayL7<c+#O?K;Lj(#EJoD3qUcw6P0CfN~Lt{L`1Rxu_X&k!ogC0DO
zcifHe$R`V}-Gb|K3Uba&DtZD@Cs|&Q_-#$}rvMDRwxdXagcbbp<yiE<)hLON%tXjx
zw4iBwG@{Hfki=a-aU7%iRi64FGRLgRmWqB(2T$J?d(Wj7pd}Da*$P+Y6ADFt1T3N+
zrdGi_my;l~*7$dFqJ#vKr+<-?C#HA(MLgdfIZ=!TvQX|F{S|L=?F!uPqwz)sK7!ak
z4#lnBe`S$H+Bbq6-m_)(N6*edS=|J~+>TJm?|yiLBX~gmNTF1&`OIzY52*fPKcg^t
z(v-N=^?64=Xr{!vpYJ2N{jM>&u}xIm#^~Oh>Z8F?OO1tnqb8FtpCj@9?0)^gv3n31
zXTtlXSN972QLqqDi(LIvckn<PlAH+fyL|uH-uQDoQ!$$ILHXVAUd|bJN3*Fl2R1xU
zyR*gp69-h^Z=8;&L@egp(*nP$*5hKLzWWT_$l<+(u~^x+j8ad1cb3pp`SadiS?qrA
z=SCb3TXbC%j|p26Gk9d|{3+p#Z9MfsJKKM!=xjaw;R6D3O=vU7Xl`VUw7MB3)G=lB
zTfgepuz^ulw{ro8pDBi_Boa()BtaI-NwR-_+hMRxVTn_Omk_X$$TK8lTFRQ{L$l)y
zZ!iV~x)Zk6lH~js!yij%G=o5+0vPKlLXP70ampHz#VK01fivVkf3uee4I8Pist=sX
z^>g0!7gKG?Y^Dz{Nf+2a$<_n8ehV&6tcrlTO#}C^4PBgqt{6RL%B}V?gXer34rwJ?
zzR(<f=IzZQ*ewfNQkp@wbLlgWQJ3_*7p~vaKgM*F!oE~HRceKu0tQjTdtAF!_Frwv
zl?@8yaUWOpA+uIlm?+@|yEC5X+Max#(ffBcxp}-$dpbAm@qBfopgbLK@~j8aj$i67
z-fy|@zguIwa^D!(E}Pv+;(&}d@pZCvRFQNYZ&n?4Uq?LvvfWwTustCREzbn`qdxR6
zDF?j9N+f-EU_webbut66HQlQp)ZglR(+H#2XVucbv@UAw37j4o69|~;V-#6*`^EU1
zH@|TL=XCGaq)b^ThQRh`gVAZV3<!R3$@>A3;P_K+WZ=UD1tv~4zZWb5_L0UFD)8|)
zs~Z*g@EYd*^VM$=$xGCyJNH!zdJx4s>Lp#|5_Y#13hL|x96Da?yN*T#XyGAXluXU|
zN^p?1L|!5-fG<db)M!Col6gs>cl%DJF8gAQ&Sv#!U_h2~ArD|`KII`DiEy(uquGc5
z4gqEj+_%Ky*H+lZP$N%jRsJZAxK`}flzpx^P51If_G5py%-Q(km(S0B2rIp~Ks1F%
z{MjPb6}dzx0T9<Wl($(<$l=e;Zjr7ggvu>+a8^q(me3TUp=*{(1L^6(mO2V;l*ScE
zv5sLeJqn{9u%^qa!-NDLp@#QxK1_vtaoDzsBQrJEnTg6c4JYqZWA62r2V8zSLW0Si
zOnql{6BL4ykuo(sIv5bS6>?{FbJc_Lr<T+)<uYu|j^j+}7e*;D0Qj)g7uGOk@^F?A
z-n@07G(4Ji5k4f=ah&Lh+3(<N9TK>7{3`Hc5!x9XNCE?6p|oiX7cBg1UKXvR2nZDo
zCcDJR>*R=a*^hFeDB&ed1j8|9Dn#e$Nou}Z2(ij1tQmqjk(zVWe+Q}iNRSHs3#1~s
zSgTMI#?sgSP*60ObDisw%cK7>VLYT+44$V(O&AMj+*9~E<s37T!4iq3R?&crcGCz8
zZfE49EOt%u4jQg>&V03(pE;Gt%4W;xg(<dFQ4_{DdIZg8rx**hM#KV<8ZB=9TJk+%
z^BN-Q+|8y;iK3c+IL+HkKlwa~U#$FE`UIn@>q~3p_iW`Klm~xI>g<vtsF;ki0tMIF
zlZ5ROECL%ey5l!o850F#w8?cX=Yy3xns*mb(QfTd|8avzAJl|#z=3f~__IAQS}ZD+
z#x1U6U3K)6m{Yr+z@HRfW2#ZO7#1nDq`TPcgeY6@LFy)}Z>0q^Dej$}9(lK@%05I!
zeD4$#+0<7!qJjnwpXGOP<WMR36`(qva%*z2@|6%;6i7u1hzMHC9*jFadVr(k!}Ri+
zVl_#Y&Y${A^n)h`iLo3*&?4E40p~Bl*d0TV2Z%P{T7q0*AWQUVbBmoU{slE_a$hq?
zD1R-(h#tq-bz5<AuYQ{Dt0D%Mv=kHDtc`U2r=M2iHRBc)gNbdhHWOSMK5agDGq9R#
z=nmgrc_6fO0Tc2TS?<q|pmZ%Ke>7FdVdl}j1(S`mhin(ajI&3OPFo$c$nP@9FjEsL
zyp-lBY?PLXhSC<7m!!{cy<x0CNU>Da_*|A0HScV1-tS*Gr@~^cV@9dN+-_8|O+_Te
zhI;6kwYr~FSDS9OdnQ#(ctdEKbY0l05@NmA7hArruJ5;UAkFp%iD_SI(i$o|JvtAv
z@oOtj;xs+qmwm%`?WT_%s(rszy1U?t@sB*tQGdy!nO+n~c_Z^~)?~C<7JJ@<lL|Zy
zkGshA@R^`x)hDA|Zehh5>E(4NAGsI%F!(VH3x}dbpF3k@d`%f{)L_y9h_t%)a18c+
z7ujzT&n^)>`F{hcKoiTjl3-l~?WiH_bo|e>-^FYk6iI@R3JQ0(nyNN%8iN*Pv2PqY
zI~(HAxp`mwO!p-nLbh736#;i3RbBOHLYaR5XwnvOeGKDl{PQ~rKRZaTm*+1Mg#R)G
zr|!Oe_T!v6qh4pGxn`V`AX$;;CqY(L?-f6LPU`*nj=<>tv*u~_;`dJ{+2OSnM7YWo
z{x`Ij{Xe20!~Nq`r@`8hdYxA6w}7cW4JUMxgyj&R78qUG8ePzxl@<~hh9p7qc>Xr%
za+zUZF?cW0Q?GC{>Yl=2#lDNIf07`i#g6KD3J9Fk6g!whN#p<W(oi5(R38FO!P`tS
zaPAS6SQ?^9|0|E97YxA}5X_cL_+Ny*^+VL}*8V#TH4NRY)C@zXNGRRi4Gtj<QW8p+
zbV(!9NJ^)Obax2|2uKSEh=?HaeGh*2v-f_^_nh+&+&`{$uXSD5YYhfoQOgjRZxb^J
zKc)a;y1<VomOtwx)(#Kr{yb2m-cFHlEd)v5K@X!pTSFD8JKq#r8F(2Xw?%3%ipg#q
zZk`v!M2QnBFN!KsXjH;dL(0a<$;g^6yC&C=+amQqibQ@WLJ{Y!_Cg`e`knta&k6x$
zD)MicYGl9tONER6t4smA8pPLs?P^Za-cmw=U5%1<ymUMsj~SIzUGX4gsCoekgwUt@
z`f?8#%xpi9g*!w<H;%v2%CU!<)eSYU4X9$q-;pCu*`6fS_P?XKj~dJ}L#%%&>Dh4_
zSow-?TsAt-)Y$u`H9ix1JKm_WvR{nz(d9#{z>9*$81L%!H<s66dA5Zo>ph7)=Z)_&
ztgO17m>q3|MO?Px(!YqWs)`Ou^r>OTz{j5D+t0tX5qALoQvV4;c<v36Ly1^}Q6qRq
zpO&aaZb1n2mj#-mfuy0Q`6v)VkM|9wr<CqD8Y_O3<p2KC?9ZK1Yr&V(WFNE>WcfeP
z4&$hUumH&)<RXPegt<A>1C*&2q_~7&FbRxcE&X%AJEOrF{MuNlsOLwh3Pq<?x~_G3
z^5RpJm>v=h#@vti63gPg8Ds!t(P?8uufH(G3Svb~#|a-5eQ|zpUO$;2HEm}SPbEIY
zEJH4gX8n?x$=*7p0k%l=(r_M8tgg_sy_L=r(fTEgJvpsN0|{+~XVNVv=g27N{YrS*
zej<wo^WLzZO~8v<e4}m+qOp_l?a0Vce~4&9$iyi_O(l}l*%7be=V$wE9@<@M77L=y
zNYXmoCQzXKl3;=G8}|K@hd``bqFA%w>)ZBo<sohX5U-<wZyf`p0<(DmO2m2|#W@4X
z&LLF%ZGmzEIaYxm4Bju-QqW9Jm$wiyQf~0x=IfU|u+b)vprlTnZJ|!3-E5uaS4e#?
z0F6k}C`=l861#)d_N|lo@~YZ66aQ+i3&PQUY=$qkOx}yG^1!W=LM)u`0}aop+kmRS
z)04rQcvW{bczO)KykpgY-iSqq-;@(S$_ez~C-9e&#O6Ailoi;*QDYNq99PAi)E#`m
z5CT{@1>X}Z&T8pQ4@;LlSVR4#u7hw?-SWd1?4Dn<DXTqT1X0}nrL1?+IF#8F`F^f?
z;NBqRNYi~1(b2*vT`tzQCP$`V7DVnBU&41LM`00`vP!h9<DMIYyxdI69DwA1xtsD)
z(2^rJ;jQR?zIAI-6ph2%bqoWhgG<$>2}8^9+CopJ!`1=2XUEO97-9i}*XHjIdq^d$
zy+{xC9;o$FesKRWhW$a{eAZ(^;JfP9QT>Hl(xbCqyKjJ)+d=cUf1E)7&%q3Yt=I{s
zIR?rUQjL2G%~m84ZNvzPPQOrzby<ntq8N`we*fiHJ0g*o-An<$ybw{;u0}Q=sw^3o
z#km1?Kv+O+4YA1^81aZbW3VL#Wxi}4GiLgr2i%xzrV^x~(*%h0VFfIt5+`+1X~q_i
zy-}27Gq+`~mWl#r)kS6MN(x*OB~T4qpq)091uVO&WRlq>-K(2obn#=B*+2{gPHM$_
z`&r#tY*D~G=L=RS)uF$e+$XiaO)3zKg~oFXp+WtnVmHySgqaAaLNRVdEPFfxLqg`_
z3?-@%p#u7IUNXkYWjPn(cyh>kYE3MR(@HapnT`R!Wwe;vJ8A^oQ(7sQ|E>ZC-%AW4
z2GWBpML3wDQ(N;mvknx__(o~W!T5XD!f1(5^U#>fv+vn!p2HBYq*3>*dWPdGDJ;!@
zB>z~}2RfjTKvyFFCv_^AX%O*D)8FWhT3@xrXTa5i?duX4%638Opir@8MlexasVr;>
z^U(rJzKL+K{Qcpnc=&oD1HQfDVh!R^rmoh1Mh%5Qd_YN!|65YcXi#jK;M-7N4G`+X
zr2U62LoSob-dkI!5MQU9x*s%^kI-V$iGDD2YF(NPuw^PEox5LS0^{jutE~n;lAqF7
zczP&%s&IRo%}g`_uSP|nP`NL|Uf~0ZEpupFoH(jEx8zL!{HX?Gsm@HfUIrV)s1DKI
zk4HW-_o*sj{OyWZ<Kaq`+lTq<?0Y=M9g!B7u-JRY%U!Wo)at6O)`=O2qPCD<rFA<o
z=@LB4rginZ|FC8L_4B)WgcD4}xU_MKwjI1wjr~|#sl8=Tn$EP-6tw)~ff#lHz?OM<
zS%~>d7P2`0UhF41LiFOsu|xE90h<r31%&z@UP=Gyx0+q3>+ruSra-$dk(QRBn%>I_
zXlIt5IBac(d8nV??ixE$q&97!$+gS~C5WWd!jDP|jKKv8yG`FHj(|-EVYK1Ku+2vi
zv;+(5WSlN@A$08B`po*!_f&<klv*2|@y06|g^sf4^+Z6@^TO(d3_MB?m#sgIMTSST
zl`%!zMs6!<i+E8pjn92?D@BiqZ97BFB`OKskvtRbXzQ?57*REZ1NX&U*~*m!?`O>2
z@i<*f%vBrLXNiwc4?_e+KWm-fiBmq?wFt4?!hxk4U(UxgJWeHiQ)aXQmMASjt-k{j
zC3AC6Z#q><4Sq<nJ3vht2Y`~g|Mjgr#w2Z}HCLWNQB%1M7?v-Ha#0C!#PAgnzneoF
zFrSUEyJpEYHkIgCG-#ZsNOP9!@I=F;26kOX@9aP)4oVLzv0Pec;=dxyceFP(7>_Uy
zR=JBnAf5N+D>2`KE{`0!Oa5@HBH3oBoJzY%u4Za_4Ai`|`q8zW_;RUK+W7|Vm|)Ze
zG2J&l?Pe8w<u1oD@bR?oxQgz3hrmobe_v`x?6>jw^8=6mVo!F@7FmrHgEs|S*H$wm
znOOfdp6WEosOrl$s*3R*5}!*iJa7x52TE%5@_R*)u4)X`%RXk0pEvkF(J+_aH}%)~
zS+^)`3~f%pXz2r55Of5uX=Rgo$Ubip>JfO21^4&*?oe6;Byv`avb0Iz_;crOm8Y{r
ze~Gu1mITIbw0B>48jo6!D9~PpF-Bvc*5Az*1MO6Og;*z}q)!HMJCDti_bUv55`C{*
zw~#DFF@gApjdtn77*fxh){RvS7VC4^oMFHvd(Y>|OU`(W^{bt4uRqA0#e5e3wf%+e
z62p*0_{1JuR*|Vo*3yI;Pf^<0KkIL*Q9wIG{rqmnQ;33MH%Zq2<>z;+odM%1Hl<ed
z)v_&%w!IwTjsHTjcEd(+Ut$FJtIk^|wr!B%?w^xry$2`JYJPp_0_))<zFM+O3p#QX
zTJf}gQ!!5$KuYszI2y+aXqH6~Y7XQb^wQekm?%6tTkUwYj5lD~<53t0UL#GzZ=V+x
z1um+?$<UQd+#>2Gfhz$&ztiLtmJlqLr_v&Z8>(*&)1be)(g`EAUy$>`ShW_3bZkOW
z$+TdctV|<DO{XbMrjZ;TLy5+x{EQvHx3HBNT4pCf@DjT<di|MT{LL?rF{@R8;}Fq^
zgS>ary0R{~(>;<C&#>&rh^|615TVNx@})hJrw9~w>!OO4M0Yw4eYW)d^+n|yd}L5{
zJAq4ue<YO*97}mJgvK+^ilKAR9MYO=zm|?FsjSLV(Z**5RAZ&`_sc2BV!IN7lKPy#
zR+%8V3madtOxa*~I<2jtSSe4MswksN^tzAC`z%lG8+h=ZehJxUmPk%X#vVG&0&+#Q
za_w{=6kl18OJQVFobsKTt8@d)aI9RvIcv@wvQEecsW2R1*JqqvqhJ7j!}G)QO>OsZ
z@FndjeYB>d6d_^Nx@!MDz4HS#JnnA|M`g;^B$YE!!R$l}DiRbQ%%?x^uY@^R%S@s1
z<n~*<8ISXVtkkq@Eny@*P?hZa$68b{o9Fyi!pxl%Jb<QF+VPuIC9^w+kK7%51*{mk
zF6ztY0!qTP+);e6H#$Ahhdzy*6M;s}0cK)NRVFbuV^Gz1=U+d)d-5fXUa^_mpgpK>
z|Gjce_2<sWLV_maNnVrqbX4}XwQjTb9;Ly(-37-1{c!19KA0U=#(jrB_O;(X$8`$R
zXWV{^>vgn@Q$)Ww<Wj1Y>3sENhTZ!Rh_$$4VtblHW#&<|xz;+d)tp7!u*ze#vp3iJ
z{l;|M<Vy17F}`<Ee82;b@7h0XuCeERF3zt9dlK&6cUC*UI1F0}i2i{c!gFthGB04P
z7EK!G)*w%m1t^Q)y?c_3>7JXChI)J%#=`G1Y%J|kOuHt0ZRk7my%;-QP(#Bn^bCNk
zjdY?>LOZ0;z0*_JDo!XMyf9wOe6BE2;&KxmRyJi=lqBL}JC}TQ9fp}AqrNwn<f<3`
zIPKw&&c~M8&xXh|EG`A%nPQpLuq21e9-Hh3@5_=Hd`?(w)1NLG!Q@>oONn{JdIg4V
z^$M1n#JP!FyXms+obkgVR{42T1_F#*K3Jb32xOGPlxCBYVbiuJ_s8?5X0Q^aS1^Se
zx;iL4JZsu74s|Fh%csWN*JYbI7}l!xp!vj}Uu|q%DKW^dk|+1!*)LA{gjqr7#*daM
zhbh8Kv(5^i;j~9>yEM4m?~W;G5q0l<Ep?!p77J706J@y}3hrBP*SkbC9^oN3nJzr+
zSD4+`+n!Ov?z$+wVx$)B<!*$9YCnU4Q!ng?T&xRrei1OebH0#1Ra57hJ{@J_*+?1U
z)i61g7yTSt-z>UAcQ$dT&e1R>>oNO%svll;HYq7{C@8P;Y4-cL4yEqXSw&m?idl`&
zI4#DM6jYi<rw*4*=slnOl56e?)Zfz4^PWO;<S_=V-_M)FpP#i}Nvf!Mg&qG~50pR~
z<}#sNc`82uOJ97VP4uy0F3t*L&EaLW5L!xtN7Z&9lzYC_CU?fnRyRGAwYBJV?p~u@
zwxidjW!Xf4)?rCceA_`AY3~)XnK147F_u5o3C7?*PT1>z(ljqBB8G%i1672j|4GvT
ze6ZXbWv{6#W|iezgS-uE=+k3^9f@aGmp=nD&i>#c4N6%h(QLi}-{L$l<>2j#@&Bua
z=V=RWhCy*Kb%{c{BR~_r!;-;-0e=nh;)7knF78phL>3YE@iqu={D?w$T`PSv7lLj6
zXhvpp7SIVA#<B@b2Jb#*f@En)k~*LEs&STpbsLx{C=2CS(|Te;(X7Y|@Ar2hK<sw2
zDww5|VY5yJaF5;*nBhXVIJb2S^#KS2o){)ggYtH5GAbNPLn8|C4($j*u8C3jZIZn8
zc|}+}QA%pblkn>dYnVhPwN`Rn%IgQk4yt9tdL?zKVU~|QnC6ISgn3e`WmO4dI<eSM
z-mc#;S|4QZb~rylr(&GWpuB`K(Ow#{-KN>m_5-xDh%9C&dTUNAY7-xZ=S$0x2z6N+
z<rJAm%z%&GwPzfS2n~Br;1M32w*_0?g)eMDPGGEQC5CSHd+_iV2#Avb>TSQ4TccVk
zO*uRnA&TOImCE9Fk3}0d6p+w$aVvLC#Xmc{{T9nHN|Dnc(GY5XYj~X}p(Lb-hMp>~
zZjvFEuyRjt79y2n9R6mi-k|q1GTne|Ltn8<kI^tOC~H}Yfz@YCjF-2(T)&a(UWOdF
zX?X7KGjiz7t|ZIZWM_b%B`LXLh4IH>{YLIij6_hd>5lTpRstq$fs=6l!QsxG24=i*
zmN#}zUF46#y0Cc-*9e_D7y3odYlSj8N#QkNxQR}I>U%+gq%{APBL0tG`)$SVRJkQW
zPUiIl|GD$eubo20{x1=dMlOoZ$d0%_umF0SeNaiQQXhU`giW0bh)SnYCB?QHe#X{5
zw92#Dt-gvc<%K=IT4Lif|4k9=N{8Dx6le6!#G_Kg*OyqzApt1U3P;d1EGDI{GDpSx
z5Uya<yw7C_$j2zh+n;wMxiM{?lw{9L__#L)965vw8k$cf$ijc$ib~s>wWimhug<3|
zTL=^@-XeqRwyH87j%?!@pV>{9Q0o+>7~ca{BacR6A3paw3~tf5e{@L8@4DV2K$-4O
z_v_1YX?C>>K0WivUQUI{O?8Za>-k~VJB{B20reLr9wXmu0{)zM{P<ej?0t8M(Rb_n
zT=SCkg;MWoz&B#qbU!i?q><TAa>L2sLs;pWF`lx|x+!@LZ)^mH7UXp}Z9ytyBzSI4
z<{3@2Fntv4b>xP#<5o{W7&is>mk9oG;g8V*<|Us4{v7yNB#4(|ZpMnxe9V=*W-!vE
zy<qdT3RctpStOT$6pSTeWntXTuufY9k>cp4%qJsk_NeXdlI?0RhR)$E0DD-_V+p6>
z%^@W=r^h(*xJX$RTOdxwn&NNi8H2?EVMOg~jpecV&9vjesa~RcP=qIumfQ=MwA})V
zA2q2G1)3XwiI7pH{J%Vu80)t8%RMPl%NNV2%F0u#v*(m6ZQfr(Iim;S9qj6d(%Lv9
zCtuH2){_#8RYlB+KX+<);lg3jOlgM8ofL(obktg$#&IaPAK-Y{Cgr8TBey-z@uq#1
z1W=a#jE{W#Fu9Ul)rIjj{8;7}oO8LG;NC&aV<K9XliufgPQW4r06d@+YIk6L>q<hC
z8C&T-80+SAkk87;QZF4|>Fy2}*r}xLPZP0<5HH6-EkY)G6tXD&8PKOxNvkx7$B%#0
zz#JfvNkQ7CY>lezM*c}bq;~J`$(w!je(G<L@ZMl?C&%A>$>B*~lb4Glw)e8Y*ox`O
z*vd`ZPo-y9{moATZv3^@%JJVCuSb|{GOUsc{u7DX%CLR=YhKj*HPM8_Z?14jmJimK
zDk+itwF0W8c@zK6Pad!zui^2wEu0MgHLWDjF$OQpa+3`I%kjqJe^x+|931564~Cw8
zd3NyY=i2ktE|^Dz2gSL4Ywg3Xk4+lZjN66PX_w0tJAbZcx&k|X+u1(~?7F~3+MW$a
zG+tDjgH`ivAcmc1RZrxhsto9~krbCwydh|>7%;EgBpob>0%?|!*sVXh&aVrJLKoId
zO^FGRPDl4<Cnf1UrDeoR^9XK5B}hXaV-K2v-7xMA7kY=>@<ybhDieuV-h*vt20R(R
zvEdR$xkN4&z|C6#DAax2&rV{Hcz{B!*nhjPRW1CNsN@>UOfAOye&_IjMXmD7scJ!=
zN~8<{YF~@Z_5yeLgsGpQhzZR;mWu=(?QLWc3#*cnL2M8uzfmtHh31gDygM3gCmDsn
zI?f@2frrXSRs?U7?tU0Q01^vf)AA+Ob14uZ_t`=`UVNovQ%Bc)rp7Ht-Dfy{n%-p^
z$6ZSm_7Z{Q$nI3c+*BNMFb^T|8ZODPV;dll41$V7-UtsUjl0K_V&2GDA%-X8v6^Ji
zGD~d`o30sH<KWkGMLUj@(>L*yz4ck$>u)5`XeI;Nzvp69;YpnA@fsq-urf^$(m$RC
za}MT_qJHfH?4fLu#2zHqA8n1Lrcp%5d`SvL{NYKTa6(3Qvpr7pMD=KUyeD><m?Wk?
zUBOj?;Co{WYB%!<O}iroMr0t$9$Q?(W9EEPrJ+4T=_q$RXgL8|KMqzWQ1O3MDC|lT
zcSz3HW&Hp~<`BZfG<oF)DY3AH@VDD-xZp|4xX21zR9kv%pBI-<KWKi%UiHE9M@^(!
zr6uLaLVr0Qrd39TH7hNLOF<I&0Yiw*{gK7-XXo{~eO(d+M)KrL+hilMh4zdoO9F4x
zxO+^$IEu_JQ6_e*v((3pVl_bUNPF2_W@ZZ{5LzLhv-m*ar5l6Lu8>SSI4NwcpE_qP
zhS%_C+rrq}r`Zf>x_TJ6Hw$=f#VY*)x=7YR#p-7tN6f8fnef>LgK)N0K3`5ZW1tbu
z+2lDc^A;rB?a5(RF<z(slV%|KX04NHX^tA5G=&x#ktr!E6D1YYRSU=@oV>sPSLEb>
zHz~=$|7lX`cf{LeYnl28Zbd~mE7>RpOl}grasXQllPhcQt$946kHQu&vKMv94cKun
zp`4X+^qf$xv#Am(TcP$tqv3`<ZTTEge6;PleI`P5-LX%@dZ``N$gfB=eX=3}f&0_t
z@3j=<asX^`zutO$!pgg+U6JgLx@%nc(qP;>s)mZ01bSxX>~HdFzI4Kfe(KE_SbiAE
z5cpXyRmLwBSOtv&u*IH?y;0=Z<`3J*x;qFSNX%AJtJp5yXd9$fJ->hS8EkKL<d*II
zE#h@TGsd{7kHp4@R31U@hZdjNM)9F9;@`FX*j#<|>4tMQw7(2xqk6FoW^q26tr$pu
z@|^^OME(}+GC%}6dW?0~XLXD<N9&I#(Xa;Ik!~a=2+L<NC^dX1A$XY4(2Q+H7Qq<q
zZxp%iMx#8C{{k(<kjbAs+U}({>-i5;H;g)}f*8iG1q-kH6o!RyBzuvTiVs0A04~sW
z%X<8S4yx72_f<Zov1;s@EXk7MEY_*|HjBmSSk6O_6E*($<fXK^3Bwf?3NqKTTt$70
zv$gu|S+kJ=MmssEfF6+BW#2`Kia_K9UT)_VuDJo^cI8o9cc1fqs$?6ey;{tvPYk(M
z7z2>oO>2`yZ_pJAqAG4Ob|7n8zL~c7N-14mu1eR7_*$hsDO}-{B3x79(MF*138UkW
zu~AL`w7ye)24ls+lTqoI#rk<=F|L|!<Lrvq)$_u`rV+2NTuqY>9J6f)Z)5BlcS62a
zHKb2ke|yiH>WOHdFZje+*I848&HOjyFW@dIJOm!*Y4}4E<HSfErjm{OQ}AG?XH5RV
zK`#Rfvet&mag=qS|5-c7AXCCC>i$e3n(R8#-#UQb=;bTE*09xO_wkI>(fT}b^s4$H
znQEhkDV}e?SsxE8TL_G+-jDN4ZB983r~0?^0U2n~#ie3E-!S8S$sAL1yRA=X+R#{X
zc(e_E(0+Vlzy5i8J;z(3()C2;QxNOxtTo@6jW9$c2e*h!Y{f$rP~s<%U)xYU^B-H8
z14F-d!@~qxZ1NPu+ct~s^1%GJA^*YS6Hr5$W5?wtIDGvIXj0$AV1{e)t^4oLUz;e5
zTBYES^}isnJ)M0c?{^kpz+>stOBv>P)aLkz;isY94&8-PwNi)7&fVNUXRA*q#GQ9P
zJleXf&p+z8Hr>dTu=(-jk=O5^9|ABmgXE(h{gMWEUNgD|K?R2&6I@6lU=bwViCSPz
zhWAkU0kQEl*+;syAn-+ZsM@JIpXg+|<}qgY-IQ@$i@&z)|K)rD0(!knZ_Ci}9VYSO
zl6$chCuu0xI;l$(``C@$(C07WgewR8*rR(QQiQwM@}zE?6x(jLErlDJ*sGH`n}a?q
zLr9NmdzUc}BFqWcJ!wed(s&eEz(bH+n7eLqTMHNs>_mg2BqYWW%T`R3i;83fb%`%3
z@$Ql@a>`FnB_}xPvk(s{S@~)w<_pdv9tsSpuku2ImSi8ZBYTaPPScd$VXW-xLrq1C
z(6<oMkVwf<OPcQ)gDf_X2-ilY2x)?50h;@oL;{ZpHZ!?Pjd@G$)q;^a&Yvpb1$kPT
zI?GA~hxQ~k^T8oDt7YhvcIbC?B`2OO)xY-B?7iY8y-}9|PIkOUEA@$JQg<PNG6IV#
zNt|cYUeN-Yf%T81Rzyl7l^gO8$x`HamI%GH1;d?{A4vu0PYFCE67ar2D1O%M8i7a_
zucS<=SkbVeE!Plb4wk8Vx6PQDZlDP^Dv|mnh8NKMC{=hGbSI!Q0!R2qnPyzMPFZIZ
z22~P?a}5Pkf9K3wucvqzih9Ia+jJmTR~Z^24&otpy838vl>=;JG<HM30qe(GpD{--
z?VvKV%X`|HoJ_16#~Ix;^L!kV-4bcLJu^7iiMezIR`wplOzQdqsj!X50xyloI=Te1
z`&0qPbF2(V&pey{5dB&ziuhHNPD3T5H2=Es`zC%?#s>c?XUCLJ48sLxovE0Jw!*~K
z%VYAC&X4aA`M4G5uuwd{BLdRA=!Xq!s3zrA>ljJJAceMuU+vR#g^gds+t#>}KO#Pf
zrd-o6_=Ftt?CEovbRahr!@K7<=U98SonG8(6zPeXI{x+d&<9Z3H)%vLn5T2CizvP(
zj8%0Vs<4170YSII4Z*t78n0j=sEw3TjS5%Zq@WWHdC{j(Kp7=Xr*YhMW%w#<lM`GL
z_}`A;|7c~m=)?b3NpvB#Ox;oVVy4}LeED*b^n3visNB~FL+6#@%caxnO37T99bt=Z
za4BSUd-&$}i4`1kKDH$mDo?~zvb;)dBo3@}C|~{Yl2fK9O;Fmy0)W7;w>hb;{|+GV
z&sV6`7>ocRfkp@8Cf6?!o*d0@%_8)^?Z3Zzy7V_;r0TO#d`sYuZK?T^m~O0u+ORzy
zDpr2Dx=gh2?qTfhhE1?gArwK(tyhXtNl?L{?_(JYEstJY8X#mo+!FW+mND7qf}bd9
z1{Jje=}CpKygBVj#@&T{4hGi>%@&MaAZzaJM)>QIvQBTslQQ$)7|N?%&AFc^bbUKh
z>L%}w2LvAfJo)wUj_>x0TogJO{P9r;C?GxW8OG7mwa{x$1TyqgOVKn8i|HaS{EtQH
zy3fzWd+RUQwE(?j-3{?E3MZuHb2O)mkEt0i6v6B-I4}GP_ZUQO5dY^;_)&s5bO1^@
zfVXE6%O)Oao!mJElu&hTJL~5<+KUsMXh<B&q$}q#^K{)1Hn@rPv~9`rWBd)6o5S!H
z$QD=aSc8qGG$>Z=ww19PZam8I0aNt<bp($i-Rv^l8<Xs$B`RmTN?v*G@0Daq^6h0g
z%8`Z=-l`-3qinz8?feaqnr@0>+uZ`EU(6<OluGh9B+%8gL0Hu^{o<>!{JpQ03PN+D
z4yNP!VyRlwtIBMq^8kWEW|94!^V`p9U!AM)%9<;Ux0_73+V&!vU5t+A#mL%E2=4P3
zou5A^>G*}!{LSzWg(-0-+Ko_+A=Z5-qHY|X<<uUsD|EL`l4d=(9?G5U6Mb5bSUDwV
zf{M!^vl2NFm<aS^>sqKYO&;OVpz}~c&W{>kr=U!Hl0WGb^|_wbt4u21RC;KB7(GF+
ztW>X&RB0%(M4zpQAi`2nNl%e7Bg?9j!Zu4MV@P3<Fzi}*{KB&-UJKqLwCL<{=9T1z
zE9|}EC3X|(rAT%(_EXk7J+nD5gm6`J-Q`Zlqm5{u-V47c5!k+)IBKirTfJuSt=nHk
z)N^-|Lb>nk^d!A)*;~)&ezhN3um0+5SJ!y+!S5*X+(SIRZJ?E1xiq~(l;kkrJEfoP
z0`pc|7Yae~@XXXoHV*6QasKuBvSYP0{aWbfWOjg8BmV1qQT3k(Az@P93O&bbeZSA1
zCqb!h9l@^{)=-Y%H462ba2mWqmM)o5CYLTrtR@yR)P_xlF&b*DNmdm(gvrp^Mc`gT
zha&K!RFddp@YX_*vUp#&MjuOXtS=+VA2a$d6JI2&5fQH8yZkvoCDCJ`Bap!;TMGkB
ze6sKmMi92&Iu;xh0XNo)0(>m<o*7Z}kX^!X$S~8e1pw(_@D(1FCBi5Q;_bJN&6cF2
zc~UAb)K&{~P5E-Q+aiC{pcT6n`Q^*DU61JHNj&?|7oc4aiXZJHJi#lv)4Hp8DM^x$
zY{~*V+)Yu9kAHCkkya(kOI2$q0_Uj~vl|Qz>$jbzK7A)UZ6l&G*2#}ZM_?05caE4}
z0voo2$7Eqzz1@BVu$mwh#O84j3+5N1OrKF$cOK}D;jQot{;l=CmU9ME*BD!nULa9=
zlEf~&MbW5ZulQ*mLsnSXyz#;wOr>4m^@L>%Za>Klol2|@@9BZDYp;=N$EHqRryJ{o
z8<NSoAEcO=sVXw`P`c;bDfx<B%QDQ$Rb{eA`5i4VWQYfLd^8z%CvlLH#&Fu_(v)Im
z|2={+-|^RvyYCXV#DIJjFz%|Zzmddu(5%mUakpk2=dVgK%gw-m24rMlOAHLMvH2yE
zwCHH7-P1zh*dPj`J_A9?oYH5h!btM3MuQG{6m37MxDMb7<D#z`;u|a7rNA(Xu8$p;
zKdOW9osiUvNn&NaZyn!{u;{vlqBd-aah2B06@>SQw2M4QCfK;2kBl0}*Vmjm?MPO%
z-0zibC}ZaOjF<|VDQNO4uQI`oW)$eWc~2qS?wBnR&=s@fzS-0gSLNdU$>c%4`wNWq
zswaid_&2!IThG`d-SbDdLc<DLW*>i)D)~Ar-T6Z&93-cE$9-kz=$Je_Bk$RqNu<4`
z9?Y94`e`jKm0d3k?Y>>G{W%AXOfLur3aJUg=3Jw+TcbGTQbYtvVd)58{L{)TaNaO-
zGhc!x+(~I`#rqhVi7;{GRX0eoFM1K`Cs7l5<8`sSWORmM3Z$xuDv<Mj;qjA4CaP(a
z13vwN@|jY){FqBP*!}#kqh!PIl9LbCxE1wJWiwPs<CmrBqBZGKnfWOJm2V{U6Mw>+
z145qA%qN!e!;-T3p#mS{D2H?zBQxtwR_?`o!4c0BsE5==rXIomD^T|zz4H3qtw{?)
z3Mc#LS`GVwByg>UfSB1F*iH7pg43Z<bV}|;mD;FlHLcpS1F^hT{HC6jsbkqOKzgQC
zu|y{HrW-=9>{%*_<ecUNNCSJ*54j4O7GxUB^-5Rkyq*d6q)${6<Ycx=H66r>0^lIC
zk#mmRX4fS9OqFJCGro3c=I+2>5-hqpQi^P$=LS(mJlgVky+77jb04YN6$6ZYjsc7t
z5bF>1U@H0FsmY-e!CeJd4}zyZ5WuVk?!0{R^uuJK(ukn*r|SJxKa;N|VSPd_E8@QB
z-oKyvN~{+}(Nf0w{oLF75G<p>>Hp(opEni#W@7dE)%sEChtLE>$9>;V+g$}Wl>yg1
z=S`oh;~%xPc<-M}g?)Co%<q5X{-+ol8AN~|X&js@wKIV-ysw9Sm(sr*3KqGb4ok%G
zUXP@(Sy+gmdj_G7jBAwNh@pZjeh#7Y@>%g2<Jw`0Wg*#_j1rtL&G6vlhhxGXoJaP_
z#O4n&@FI)cI#d1!6P#)fK~qg;z8thhs$=bHaMTr-ZD%=^v_dj0xN(RxrQCNDq;E;E
zSY6b%@<FNgxw*jDhlsV5KTFU1N)O<g!hiwrQEUkIUNO?#eWv7<dmAnpzm_rxmXr2O
z2Z6LGXOBuZ1<soZ^rCQ04en@R8h&WVZvKXIQ4TcaqPG1SvOmnRFhUj-X+Ru_!zCib
z!BwB*6qKaeYjZWhFgiDw=#gvqRi~-<nb?jyd1MS%YekkA+;z{Kmh|0W+owd2lXw-L
zlAExXLGN$YDvsK(%#9;IENnr(b@Gxs@pcPuM0590i{R~b;jnO?be{@2)fQ4Y((U)s
zKmW~_e-lP`GDwGhz%Rr8?v3k{UmXYTqrb+SOvZ#h#Rvq8R`+{MZ2$R<oGisx^Nb6(
zmSmaEZIwKk#uFk25&hfnZca(mucG_>IWFv$?PkZ?k21W!_geH+*tA>mG4S?Y^}Bo1
z<o!8_)X8ow%)rlXJyPt<dn1x(TzEZR!sTcv{EogN9JQO=e&u~6veQbf?z_b=R~SU7
zT?BAhP^5vc<u}Knq~Q?pw%nn{_2nafHU2oqg3koD?)OiRUVZD7VR<k-PyOV<sTYrg
z-}mwFE}h?oRS4lHa}o*fH<nn3{C~~|PH0|i=xF>o!m3REEwTGu7_e)-3k>+pGp_N$
z;}AU|@X!9IyEipIB}n!(f=2j)Nd2@riRp=gJ4Lk7dCnvu-PlT`m717bb_{qnuF^wB
zc-ZO8U4$W;@Xljtef^BoGSjVaJ-2AQ9HwF}dIo%9P=qAE50yzx5m}wxOMuHlmHqm_
zH6+<8@^$iHZ%>#sg=VZJ(TpyCO-e{)on3)Ov=qbwZ#@P%iZ0f#DDM^2N!2F_G$)2&
zyo@{y*Vsb3FOaBUJ7RbyQW|_dI3Rw>hXyTOv7pc*;5u+}@U~WjLnpH(nIaO&YsOfB
znJCbj2@*%fVhCxClF_eC2IF*FkOjR`3o8E4URe`6#M%jtGdw>4dm+PVy@p22Pm{^L
zYPLq;ECd8pz}Tl+BCL)W9r_i@IvEBR5b?xO_B+aYHN*1x&Q=vcWDlNZV%Y6&GE3)`
zCIc8Y7;)ca9zpil4*M585yxwKEQbynPG?$kBmQjZrNf1FqWCYR4vdTXoFtP8$vxZ2
zXY*WnXvPQ`LSvyw{y|JM%QzV{QQ<(|6CV8QH)Dz)WfQd<GCc+M<h6{2<||(ovt6q|
ze9&ex&M_h1D%hreGX=fcZ?N^>W8)Mf8na95rh4m2{U~gISj8!i4jB7%i}w>uC)W}T
z`^p_Mo@EdpghV2_a14D;BA^*RD(%!Npk%xlL@ht6T;nQCU^QSne>qUwi4=}}=l}Fd
z0p!36q+1AwK@#4b6$M%#M>21Yut@mkZb)H)!r64$1dk1$%Qf9qwn}(R8)~FwmsZbn
z<z$B`XxyK2-jMS&-GOZ}Z~g|l-59py<m6u$Iw0%SNaO}Gbp6V@!h}Ty1xY3iVlT^H
zhLT8Y9`y?^EQ_flNQDz!RBcp@cFga$aTanrSE=Ny22sMx!;8a5E6m#SPg5x^ziB)d
zV)`}y@i9xc%kytvx%3y)KV17y1*Z2W7<MB_d3J+CC`Z?@#DHGu#mm}XvPx-2kWDpy
zyv@7&mM(Evx1^w#{m+k7F~QByBlchtNaqH{yNf<feK6FtCZ6WgMgRS#UfRx&k{&+_
z>1Uwsbr;9cB8eNowHp3p91FbXOj9Q99$lDFG)wjOdyEewPLI^Pg72>rjNE)bNqaZ?
zfOp^<hl3%vRm;KF-eW>@|3^w8S(rWB{2z>-i{nI5o9o-&$NuJ3whw}x<0<dqs7!`o
z9rLn!Hpy}<nUg!56{6WNDrqd4QAnQ^^U?1~Jz2^mn?8HvsB5pRiJUEp_hjo>L)R4;
zl%DG~`ELWrzgzD0uYa{%cGDKkyni2vi%N$Aa-dsbr8X+C3dA=QwGcYd4o_=Q2jVcn
z*<Q$CzyR{(Xc4t(rC1FC4#dqaw-+kz;6P^>OJ?5i;y(Tx-$22A%2WFzN;G?-;|w9P
z;J1Jr*k`={b)gwZU6=ta*QD9?yJ)IobM;CS@(0v~ZLWH~vE-P*Ty@GIh%Mx=0c2|=
zgQG%<berVM1gV%N&A$%BshdF>9Ha1nhjNY^|I-)!&w)5pd;^tXN5Opn6CVnNhJvsE
zJrD<srvM@GZRH%WX>HQ`qmRR+vN4jY@uB1T>P)Hej)v0Mde8lX`bRz~!pEO2E)Qg)
zd@%1s<^^HU?B-eE5G<I5l4=WwhJUii$bWRXyOZ<c?ztY|c}jyYg%NNi55@4Je9^#A
z$_xvRk}HVz%GsUZ5$Ig&OO&Os-%L`38?j(&hn<d?h@Bc5L{^c*VaC76PK)B%%<T>6
zG4OiQ(@h??!gRHg%hK>uV#{pwZ6Z>)vrW||ON=}n$ai!+wlh<6TrTbBUi1B6E7c3y
z@ZHr5>zMsqU<VVWEYiETG|j6BM51oT(>Hkm%9vzNm6X{Ejr(;YpH-Gn4BjnXy%E_f
z(=~#=;<QpEcFb!ye@VzAatT+4=RrW7Z==tR=LkA{woNzy*lG`_e`dLp-Wx=T2_lp8
z3+DX@qvy^NL5JH+*sPPsxh)^lVob0zofzaW3E-kGdPf~_V{EO`M8<c++gFRQl$5#<
z5!liq8V<AI!EIo*wpZUUAJYs>n5M-DrRyxr`Qte`1q4=|_+jr3f@_;Xs*Jmd4eIQ(
z5$_C-hlabd6qJMrMvX1Oa>pAq&C0wMN@mmv_YMRNCpWf;^*J{VEV+||f^hv|_~Z>3
z?NjmT_PzO2vmsIX@q{N-B~MkC`@ua^2II^TJSmA)>2_3_S|fpu?`}L@NcPR6G$=o<
zT`ck#$kzT0HsAU^&11?E{3CVp!c`6)6Xb=9CdQy6MPGi4Q>{oQ(^e5#oo1p)bPHt{
z@9WS}Z`eucM@w+skb<`?z~hP2J!=#Zw;A^Q(i9RE%hY-)Hn;-MwR}ogh{-X%wFa$>
zmGif2sjYjI(VUy<JTXJ%FYfB_g+T;*ua0-R#($sHqlfVIl}hNtRatJwQzV$IlkvKb
zg%q<C7Y&~(O%+2b7}GjWg$^QxBOV^&X@q<#B=mldubPR<GzRO9M-+Yr5`$a?m0|BD
ziw`0q_EUt+@k{T8NfX@7n1t)sGDMH^a@~s^$G`cNln({)eI&majYA+gwCXO>^0G{_
zDTCy2@qs8<If(G(MJHarrk}fyC2_NGA9wU|%xG6ZbOS;zP}7Y=-!q;@PcVvkcrsQ{
z_KW*=i@X?gGtM}QnW}GL;0~CdBSh7TYDjkglb(blYWWKjHBL1A!6`e&@7M6dG)i%E
z9Nd(aBE8C*7=o;6>)4Z`6bvHe2PJ*93cO*Qwn`(YO>1*6SO=?6`A)5NN{F)RW!|(3
z`So-vniaJi)PkA%umJs$&J5o-xzvt_ML4p@vP4aQFWUVjjuaA%nISpup7s6JW)X<Y
zuRrzCvyiM!?GjnUR74xX0&lEnips|Irn2#OGU;(ci45LTa*&}U86R6X)~js|Wni@V
z(Vi}eDXm#SMV8O2g^-!+Rt}5|As}{6f55CgRc<Pnk6Wyw@DMufrZ#&QRy?dEkTo44
zx>@)~X`2^&3Dz)r2BXm{BXcXCN$YL6EAdoG)A=$nAtFVa=b?kPNu6$dQ&O==_`V_|
z(_CnQXQ90jn`~tHT#k0b8`I2vxpJEM3TRkmOf<W3bAf(L4LO%(9K;m!aZr_bQ3VyI
zgIbj_vDPjU3R3(l2Lj`1+}w*tzRKxs`kQYLJ-^CS{)|S+fqD2<b_%ph)WQyLjcYmO
zc;BVAN67ou#8o-j(taYmF~_KRMDF0_s-jb~p;te(UWN3}UR)^<;waC7I5ut=??VjA
zLY*tz_V{sO2L*bCi+vpXV2m~Col+cLS&9<L)zhq>?VDrL81T*r)|Q{|kHeqLmQ=u9
zBxCgICdai1J)i{E>Va4HR0D4+#FbUo)zF0)U`Ij78yX_T98H}Ne8Wfw*##BS64!gy
zK^E95HQjV++7Z+cOXBAXAu#=^NC~<aqCmU8yQ{8INIEM@vB-YDj+#(YS4&*+BBBvP
zNwEmkO(xo3gL2zF)R2QOC27pq7?E`;ZvcXxf(W(%MCK(cFmX0)j35c>GX|ESS~a#K
zcIx$6A4j)^-nF8`{@={)*Z%?A|7R5a$0mbPAbni5O8z;Vx~Zs4FI+x);TS;){nz2t
zObLo`<Dr+9`FPi;zK8-t$>)<@&H-R3>2(qY6l`At(Vii?l0{UmTY>B`9~*9TlB%|x
z(bp@Vb24gh_;ROjNob=$|MqZdbM>Q+bgJ%D6(59IRQfPcM%O=wQv+fhr@Fhs1@1;D
zDs_hbb2#<Pj<dkaD=w?`sb<rwH!b=cLFxOU8MY%U%ZbV8EB20`#Ybp-ED)XA=YO0Z
zR0hqq#N1E+gl>q8=y)SW`E(TNa%iF9e52XHE9O%%@#5+#pu-{jWaLxf3-QGFensDg
zI0OR&9WF1|&nWc+PH=W}oxxI%^Ykz*2bMz=aCS8K<nxg0e@{!$rfEuZp?B{vg#DRH
z(#8%iD!qm67sR9-)G0(>!g}vU$%jkg7!(|A^s)+4L>6iZ9W119WhQP6p<CWFTn&{W
zxfh(o5uO}{jch4MdwC^AU973|c5{jx{}mHux=_=}V=W7pSu~hvO|XWA9TSEsx^rnh
z3giGNkOAuJafZ&8y&zZ&XTFBxQzl&~3^<&6Ym?cdk|t7qESIj?jY}ZVHjj`_PjLVc
zp(W+)<$pYR<%zS5Z#<Qvnejl&r7llJW2yXl_eo)J$TZzs(=lU3Jls+}glw@jlN81y
zYK729mpO$YNW@^HlT3m2h9VG*eWSqlQO^VdqaKuBXoB*+9Kw_0EnB%GeW9(|_(zbV
zi@w3S|46FEbSNrqX-=w_D}`6nxf$(@$i?x7M9>D^CCH$QG$~KFD)ow&vD%TiSs4e*
z$qwxfK0e@|d+cIlj|b+a`uXHdhaVrI&$3UK9DLt-OG`u?w7A^V-=9?Jb$B2t39r(<
zD!Hc{RJuZ%{n|0SYUyDR7MhjysU>4^rK|wqeaD}{ly?x`F2da*0}7O!vx&htK=#@j
z|4+(utttDUn~&qPDivNaSihUFB|jW#IVR05IsiMg8Ed9t$>R2z@hlm&f(zN5651*^
zoZVn3tnL*i*|s$CJI(qqX7Lr`7n<6Np1IX!qS95?r%;;uAnzbB+rC<&zwoMgVyZ`m
z1&+^mGRElsayWv1yB~KmiI27Sff<;eOlpX#F7Q3+35&kQ5T-=0#~n}vh*9x%P`O(e
zxHFM3|D+Q##j$^_$ar<u^odRykq`g#!%F$wB=N*0Oaudbtb%(sokeFT27w+k;JsSA
zVW%pF0D&S}!92ioEk$fT$w2*^1gtS25%8*pfh~4AB|<8Q;TGiZPxd<Tg%Tw6_y!9h
zMSe8M3|9g$;~Bkb5BEYDdko|(g^Li%ZcMtpN#xa3Nu0@cF{XYH*lgbirf@Ch9Qzmc
zs90lG3B8%?1~r>I4k1wp87kKJ6E%vSB>1uPQb!06L@jUeprCieMupO-SYs^8CUa|U
ze~A~)DKw;H<X4rH!4g^9A+Jms&c)cr5XKwPIjp}OOb_IR#3Yfi&%>t~(ibFgWdE*h
znIuEN5db1o8R-QX!XPE-9JLYso{0lm<-#X{iV%(7J0y~ZCmVrk6+N;r%HR?~=pbhT
zK2oV;IDZ#gqJx9R{jFsismZc&y~XdZ&o`sQvPo|yd`kp4^{Hgou$49ahu3p9XW>%2
z)M*b(rHKD!Zr478SQ8Z}pNr)9n7_#XEzpO{);$%^K6{rz&g{n>ZS9vX0>!hmd$Pt$
zQ&b>k($^Pj%JkARd$K_!nV?Yh$LvY3g%m(3EtuHxNNG*u-qL=latYad^pf(FQgGK!
znbUeOkfkoysoK}eaY)oBIy2oeeBswAI;Utj7h(;A@M_n-z+3<n$i52t$YU_w1!`?u
z`RLIx#z(#IDhvOwi4>(+wM3SbY0(GV?nuLO2BBJ4a&0{jGI)qj1wHjg0-fCYJb~q0
zjLdqa?Oko?q^Lr?vtF;IhDmSXO{ox56+V|Xw-`}5`@AG`!?3eN#V1IYK10#9b0D7N
zry9KU#<!TbPjIA{gg}24$mWriBbR1^G0YJU`s7a^xqB%sTtfhx%<6d?&=;S6<LEUs
zDU5Aq+)6!i!<i1&j@<YFA^_I5s%v2E7BV#th(oyhqlit)hgUh<A)(W2b8?j32faxD
z7;TI22NyNO9a~{nQ|n=V3w4YHTahXUrMRKOJ&0vqEknOV(in<<-V`?nu^1Cdz_*2A
z#Fr4|XwHBuJ6Hj$PI%&E9mvo+(06axbFp;;L}p2BI9`|59J?i56BMe@Dih7uy5Wrk
zfp7a_?6&1B@`hqERzM)1cUvXC<!((z7~1*hj`&sP#B-`Jj4-KPY1+0)UxpyAI6vFg
zV`jXfuSG>7Mi3LhUxT79V{F2mbt)XfGntE?Zyv_w^fxKY7U|beZ-(yc3KXGJwe*yU
z9PUTZ^-$JfX;e7APt;s9{@Ad6PevLo*7UyZ$8P<|>NtElYgRGF5pl1Y+?B7Ev;&K?
z@{rohsy%yKlg0Vh_)Q=D6P+iv(O2R38(susJ!!dGIgW2`U$4S)i#1-sk(y$njQaM%
z?#JiieQyMhR&)sM?=^@<OE=|fR~6eU5+c_SZhfhfXp`R?R1+=z9OEG(l>&?5KK-2S
zDyPXWUs2S!B7z@C5r9ej^Dv%9xG_qCw$EMBw>hhQpPS$Da2+?@5i<~}4!l#G{qsSJ
zYy!!IS&nD%mshhAQuH9QHC*kR5F%ud6nj(0Q+1!~uSh~MRv@ihmwkO;rxCLBar~Tx
zfdRvp`5sB8;?K61n_tuj{);B{|2Lc`Z4}?ypcdAXJ5|DgbOxKYe%asa?fk{1>AZ4{
z<%;zsYEkqLBY@$YRU^2wgx(NEr!07m;*>XpH=_VB_wHAh&-sRQd$tTUew8t`vTXSh
zstR~%>?Weu^#FzUf3CN;2?{y=7*5|VP&M$IY!Um2RV>XwLIhlIKlucGcBLG@5S-k|
z-ALDy<0@RcJ&|`MwJK(G3RCXr7{y&l5U}j4wE9eM*2Xg^%{M*hb!gP|t+m0?n@iR{
zEdO)6#f>?)Xq{_zZ;zT*$2)<i+jXH5Zw%Q<OCb$4tTzK4rdM8(Rs37Kd@+7sd)Ak4
z{%rnk@3GF@&ZuSikh?A|<A)py!k|Fiw}O|h1rz${eD=+^wj9OzefCqIGR>Jth5O(4
ztr&!uU-*NspN5m=8X~gr4V<1TAq3}v%LTx#lP~ciOC-_$slQ0&Y$&E(!PuFJ5gW-b
zbGC5_`CA6#DCewCnO_<%QE1b(83~UNh*<OMq*)UvM3F1BD8_*DthJRhU6)u?;Oo|I
z^j<jDXx$cW=SoS4RUD$%;R<x_ROtA>lx&`f<W0qg<18>r!(F1MlM%}7(M+(B4C2_B
z>&dzo^v@fRz$c^$IS%c#Yh&Rx%eVov+i3%~-4f?fD2;9Nl0p=ETR^{K^`~o^N}C=M
zj#sq<LTQzC#eAO*EGMKnG8<-A^{N{EEV7-=KDmENZT>t?{<h_Ql8KAyPJzkGwyzy?
zZ{LvvCqCNG)UCg@U2M}%b!-7hDVY=q$rG~({84fqyPA#uf77ITD>=Jjx=mA=$Nxo>
za&jM{_35ouqv!lfllnd?_))cfnBzY~%bpYTiPor#KmH8}nNPZ-)YKWMi$Avj7z1Z1
zMzxtU<EAu3qS8k)Mtv7C%a>eJA3qm7Y+53$UGZ9S#bx=q{G`YK{_4|jH)G990fAz;
zD`wb#yk{cra(iw#f0*2#j1Bx0g%C!k_ib8j(Ec@%t}zn1o%qws)in3Xk%vj)gx=-k
z2cl#s-aofa)Sr`7h%{YJ25Rl2Y*0LY$HB+PrAK)m{a0a`HEygH{4CY&uIZrfGIrR<
zmX~M#ze1#0pO!KKw@xbD_4M9DW-xw!lHz4f$nQPVW>l@eS(d|tIo$kd_F{;cMgis?
z2N!>W09t8&82Br862WK}hA;BPZNe^s8T~e4XBR?(0>J!cV8IG00M@P;Op3RFIby)E
za?4gI4Wevkz#?gplMToZdw9l-CJ6vwfLk|rzdv9lb9W7YdxWfrOaYT>8GmHC<0&hm
zYo`ykvy_E)VLquGiKJMMq!MF*TA32-8gZIXj$rmLvB(f`PwLT(P{dI9Rm2gy_0tM<
z0iTemgp1N1+%V$!+jItJk*Gc|qJK0=>`qO{zdj)u4c5Yn7u=!u;Aj|w7+{&?D3G8#
zUqX>0LVifO*bNiuh8BcL<?~Y8ZY?ED2{sAXD2%43;Z40;W}d$U%scwh&2dVsBKHKW
z&e1c?v}~+076ojjUvf-)7Ey%Sj2Xedr;RLca|h35IL?#2njy308yceW0F&k{IT_y%
zG<xY&pq(>jy<@p-bfe+3s`L7i1y91>a>8_@J`3&rh$M&hq{W>S+wZ?icn_u3BH^>#
zxLffO_)yIOYfmQp;$0bUiYYsn*?fAgH}};<r`mK=iYTjaLGF@K`U}AI_OUWGw%X{O
zx$r19=QlW(QjsVdlp+^9rSe)d_N@(SpFqA`!1nwL8m@LCluil?_W4nP#H^redZB67
zx&{uPEHjp?jeKjAdhgAeq{*+H#O4V2TaV%j2}C}Y*}7geIKLO?H@iV6K^Ub}#@r+P
zcMxTkdAXR!l~#-<hCL;Ab=OgqkDmk^{j{5}i}UC76@Rxl&i|r8(D&|d{Sjl@t*1(_
z$Pe8$RfrvLoI254#sI;1<kRY<SF`&<XLb#l@xi1QQ+sJJ+eO#%w&>5+$+)+kIak5H
zl_BNDY)9_%T8r6amPAesATL&r7-<GcV&_}0?&^7o0Wmm8vZS4YAa}eRyfHRyPd51Z
z&*je#f3~s=pjw}KL@nFja2!*9|8yUdhpJ1AxyC<1FBtvnSl3B6PnZFGeKsnhE3)Uf
zi@kk4_~}AVfkoFP1M9}rqSSNF*T>BT3iFWW3*<Z8r6{deRwJ#LeNXmICj2bW?zQ|x
zU2nhBkVnmUQ)yQvyGC`yN3}VZVf$-@Uj|^I{jr047&IMx&|Z5yHW=h?*`Wj{(6UK@
zuIswlmngxNC%4@<7@oM5Kw$jGXp^9|ao;o#tdxsPi7z6PH#7~oXmPty7hs&jU!$B<
zE4z`V-877feK<m6d+My~GkJd+$dx&_rSZParjWR<{P#hS|9hjg`@01vP+iEsJtT=j
z-2ZRk89>}CYZa&~zrt~ws?`_v_{VR2hgt|v2GwZ6!L`CQd1W(i)PE|XrhVKes4cjI
z%W69&oPVllZ*(-S-tNgPz-<NY1U=Df`62_DwB8Li?5>P>S5ujX^Pkb)VjCk#Ik*po
zF^X$R*vgDhCaqo}1UWQ)t!`%`T*BH1?^nL{WT}?Q)Tl_K<8Xme`uRYN61{&5fVdw6
zj*5M5|4N3oeA(#M`&Jp0jbB#?Y{BmZEHD3R`O%Fl>;KB1t?lPG+BcLp9|GR%R2+^1
zCrIxmiTa+#j@RdE1U6m$oc~f-J@Mhght3PLH@Sfr^B-jitR-(DMgRty;F<P-EjoqW
z`ZIdXf`1N4-oau5-zOXPUXMbQdn>^?K%gw&t72daPEfVL<nY{1;Y++=-7b?|7hN4)
zg6!*zC?bh~el;9R@;#Q|%ywQ}2Nj`To2h4VA}~8W%RSh0ttOerICcK^aO;$I26(#a
z>%DEm@!rHD+q=s;+u1&%7<eR(0X9Pr{cW~Vi4;Q%9EU>$(QclPjU~dN9x=R|7k>x3
z#L2@cx|bO*4ze%F-p-7Iyf%kAls<_!-nXs)&Bs#yD)}Zli+#Wo#Ni>mHLM9|u6&jW
zU0E?UR)moQi2MF{ixAvg`}KsX?rE}Ul4lLKbP(W9(9(YGkS)0r$hm<eYD4iUS_cIH
zgqCJe2Kkp{FSQ+};a0crN1Hs6{nj7z%@%9--8Y%*KiOI0eKlgPU08uOP)J9S0VEQD
z81cQxPw98<Ny|(g%duJsk%q|L9u-4Dj97Vyad{G*M^7xdA?T-uZ^ld)?zofjr~Mzw
z-oh=)zgycMh90_0q`SM67`i*9JEf!zx<R_TyBpM@8<7S90qIaeDHYy(@cTUb+3!B~
zFa8DQIQZOat?N3^2~nzDC1Ihj$CA@wt+23<d<bzr%%w?Oe$0llO!9xY(o!{;yU_G#
zS@?6@*z)d<_GHZdhac9Z`4h8~gjrF~+{;C$_UYzsLy1Y8Probg-(8yP5gd=?h<@h~
z@O*v0_I6FbJxLn5?v(DYCuk=_{Z5J_{wBR+D^`p!9MxvT;`T3TttQ_T1*r-5S_IJd
zfVG%A_5ciY&($}v?=ghJV*B&IdAVi!*-QsEKQZ24K_)Pcey>bZxstC%6X?DB3D%@l
zxD0ps_-=&0+4=5<0ize4BR}fnJ9d&`oGsE4m8I7|Rs+Q25Gu|B-`xEy9Jtd+4kUzO
z2D0E&-)ry%K?l%+nlNDWXu?4%PjG|(une%ZNJ?Q?o<hmDsS%%EOKrL|gpjarzFcSM
z`#4<`%%ZdDPfUYtT@nuNjx5B~)rqB&+=;+Y=tsB@SCC;$k+u*k!D&ngtHBPXi6WlS
zg%&8t@<jzl4bIT0iU!IiIx7&O9fL4xxP#%P7(109;TF<FY&S_HNM!M&J<{R7FE}!&
z+=moo0E#^XHp$bvnPR_jbW=ux?S7+;{6I^3m5v9aksg%q=k|E|_D3xJRpiq#W8MVv
zz!Dq5%nwS$yUFpGrHo9SEZX=esS~5t^oAlV`q(IG&51kA4x`M^E)mm9KiSwQj6O93
z6Y%zxVDi-3O-NX3r8aMG)8?WpX<{d*hn(-Q<2GX4xY(1_Ut{7nurQmw*FbxsP%gSS
zI`yKi00Xfh<jJ0*y8mS#YQ3c`)6UL)Ft>eKOpiS>_|*+Lc@7PsmUZ!u%gj1$H)>zq
z7idx@Uo|4-QZ$ks3}kuc2IKu-(6`ayawn90il{0lr6&zS(}P#pf0S~^RVp)V2;N<f
zm{X)KQCA4Y5G6E72o371Wj2%5BEZU#A&%0jtc_>XCly&)Z{yJ9^9omnE7fILQ=Su2
zSEucY%l)i`Di_aH@upT7ydu|09@A|$`cV~%>7=vgNniDTs5$}RXl0>Gx4R6b-s;nl
zY3pHr(|cP=yD+xv*NRJbgkz{$ku}y#%FAPNm#CT@Fau=Tr4I-NXmJw-LL6;|Q)NG0
zFQ)OXM1KjnW{mjPm^=$J4=`H3e}Cx<GCDT54d^jrE<}J~)wx9|uWk|hfODBO9fVpV
zRfPXOwB>ATk}?*`>6<6Av(2<r1#&3uYn(p3n<jHhK_uhv?0vLDaG3a|dR8Yxv9y|_
zKnVoVZ2nMV4(%^led&xhYpynj0bl4*NCmDNzQ4gMH$y^&eZWXV<B3clCr>DXX*h#f
ziASoKfAjYVdqR=Xu0wG`d>K<3V3AVEf%xS<-7KbOc1F%y1oENy)f)|V_P@7cw1ScI
zsompToXM$^uLEV|8WW|8gEgq#%{Ok;7(FJo%@Go)F-L%De`1F-Kx7=Lw=tHZIE?#A
zr^$P2*yAN|x?uOs;iQXgC<}~%`zUifYq^-@YNJi?>1Pqwjf;!3YfM3*Ilt+^sda?s
zJPWeF>wLK04;1^^u|c&}sgQiRe1u_PyuP=y1t_hL`WjZ1Q|RU@umzAfEgVV?tf+A1
z8tILtj*LFvE@V?n+S^H^)2!YuwqqkOOtcyh!Hk}!2>02s<Ieohphe2RL0}-Ji6DSc
z6D<u1GPO;fJP*hw0FX2t!>Zprm^N4U)qD`qaGkO+=}@q)gL?K<UH#Qzq;_Sa0_@yD
zuYdje^2ZjDr~(%5WBk={P8FE;r`&>?%5gE@a59`fP1A_gEBODl?5{XY`iFwxPB-|L
zS}Oc+-3XpLb4ao-OyIWSe39n(F&GY7h5NwNXfruSA1S3IWxZBNhR@lR+GQ<)5C$b8
zdInT=;Q3$Sa-6O*XE5DSYGc=`*Y2+}5niZyR%^dFCcAW5yH@7DcSvM#RrjUD?`rJi
z*OjYzuLU~EWdJFU?qJM!#)Lys_U#ex;`cSbN!fNsT9i(=jOQ-)2A?n|KK8$9`Ak%$
zKkR(c#qPY^j6BczlEO#9)RlFELhS(#7U!gy2y=G*LdE40s8RR#2>#)H5PrsPo0ata
z{gOrE4ZLmyWTth>2wd~u=6~6Iw>EciLDGERHuc`@Ce8=_&GUJlep`gCwtO7#n+S8%
zFd0A-NT@{%kqy&;ZieGIDy#%zUbf=|50Zw2f|<)IilVt1G*o1WGaI&IS&KH*jRJy}
zHiD3d@Z$}iTH|Z_-KOjep-@tneSLO&x<rSz;ocgOfSW3$Zb(GUvc%9%Z?X88j$8*V
z#YR<Ro0iwSa>q2rtsvMWCpM^9(n_u~HB+~!(l#mh<{U!h%COO|uf9@Al!ud=&S+?O
z&SF4=1iD=)h`-gg%hX}4Vk&l`MX40?))bvCwWc{tC<^enbf^eTVzntNe||rvTU?@f
z4iT?`>>TDc2!^tjr;5rcf{a4P#u>UFudqpfm|Cf<YF}XhbB)^CRMj^<m#ubg+d9-k
zBTq6sY{C$zK52%eLPxtENH(WkV&SN{9rLms;YP}J&|SyY6KH<{br{y)x)IY$H$vNK
z%LSxsOaI-XDU=uuMvdc3l7V?~FOKHr+n8^I_V&jl!&~n~-K#Kdw3<e}3v=p+e=*Lv
z>fN($^G@){KlwHW6Kvu8_<WSzJ&!Qo=}bzRK$VzI>Gw>dHdQ(W?-U*1pQhPoJha2g
z+CsVlAM_<sJ)x?ee+cP}orwjttv(yKY1<{&c<WsZ1aEv+9=wm6p0u@d(OB_eW9a8a
zGs-&GlR`=w{R?vMKJG&s$G|i7mEbi`>e%8Fn+G$QraT9p|8#6bOiuH<i-l~@Z=D%2
z!|!$0j6Sb_e9}Doxa*_?2m9Ar#2azPlP)@<mr_|`Yn^As;THkN;{++_WZ6D5V$iTB
z$uG6%apr=MpabRr1>pe>R-Qj@4<TyCy8OaMbSGIfPz_L<+bNW!W0*tf57SeAF^o`a
zQBWgb`NDz~;$DBTGDk!|hutc=1tV6PpL0e^1=-{J1|Jnb#XCf>qo=9pd$Q5hGoW>!
zs6&|^6*8~GQ2*VDt-#T}2ArapMXdL`QUkP8(zq4|MwpqpkumIBK<=!Fu-G6^!vFxS
zPHZX2^bT^iSw?+22z=<oCN<L8PoR-50@`w8C^3*bV;7bg7F|h%Hf3nb$hZS@Hl9C5
zXQ;3vH$Xw)#W_|03^$`AZq^$Q%YIdjU?n3h(ozlDW&`suJYN8`in)U(BRQs(b)G^i
zoCwxxKzPbpf_q#b3%31x1fTs1;YgB1S7i+q%y36QB}Pc(ndd^!JY_IxlH@1HY|a?@
z{D?Qz0k;_Ugz)1_v@acks*$Ib;KhkDY2Y4iExwJPVh{S*ps3;^H|yQ=V&@BQp;~ey
zK~^WbG2({LJ*)qUb`BOz`O1$^5I<ULiJvu-PuDU(cJmY!NS~KO5yo(XJWdKxRMDVJ
zD^u?8XT3>tM*{JqGsEI9<exa%Ye7X5<6aMyyyp!En@SdEt)$3tN%o;#niHp~m59@G
zV5+?OIb5U`iEo7#tdzK=ov8GJC#_)Lu_Wzndj+_N`T)exMUBo2pR=*54L%%(d1z>J
z#T3ZsekqEu>P5;;j;S`LlaGppFa|n#je~^UVg$z+YQ-AHL3J9C4|NQ+$hhnlSk=S>
ztZfak$T3!5cnwD6(pU#0<t$mcm&WzN@HbwLGjW0xK89}-^9jSA+4mwTy_jo}PDDn1
zY>^JW?;vi|VHtFG3V61PE!*DmD#pd^=<^phYOEfH=k5}H7*^~BZDGEjJS?;z_)o4l
zOx=!NNNb@Ty+<aC5oSZ-`V<X6g72%=`+ri7^7zrm@v<Y-mx4K$40q%G^<@3)t8ueG
zLzd)T+!*3XBL<p1U~(LVhQGP9j$SI?KtnxYDorF12#K8<Q`Uad+uFd7;+uJd#3~Nt
zt=#~XxNIa(<QC>pA-Xq_JLpNyrl3qwJ#wCV+<{x+NSm-<^hTrI8|Q91nWEuzhV$Ln
z*lqeF10R*4+N6168x{$_QF+d9DN%Ym`z4xjw11k&Wj7<2yl&`X8V3DmonlC-O70Pz
zY(0}+^PsYWHm7{2n)9xJW&fTbjw`NwGRqbw*9eRvQmv(kzy(_jH<%319R**sabJn4
zi-657T%tvEQ7vF)_8nG~z$i2ZgqcN?LLF>aLjCvySexa<cd&B#JS?KME3RHmsmAWl
zxKTQ?W#XiOmNzAy(sdR)%(kZCmy~lP>F0%B!AZTWKM8jCw+qh3f~}O6F4k57aVu$F
zjc+GYttkXod(;%#$N#u+7X_?N>$SDCHl2jm1hDOT|Lkeja@9$u_;O;p)t&ptwRW3g
z@z-mm4-S;yJ(*TnFur^Bo2-R5(Zl8j^}GxXD3>4HE@+)2^5W;{q*m|2w4LF|jIi^x
z?wlQGz!9-@8t-J>hMOO5%*BKseb;&v^Z)SK;9Cht9}@uZB-~9{1TGclLtH%uo)K8u
z)EeNnuqGl`Y)beWSAW<Va9c$?5;g9^WQUCoRy!-;=wlKuXWwb6kz$2JxgH(N*jQwZ
zV(1zWSD&xu=y_0)clw$4PZ1E7g{VeOC9N8aU&>Jud2Nm5is^@mi31sd`52WLxEN25
z8j88q@GAF~1z68FejQGrV=HUyJzfsV98rMt*{zJ217)`dHv{)(D}L!#yd>kxnrqN(
zmxhiqI?OhD3YofedX+79g^1<l9-O;ucKNjvUsH5m7($}k8UKukIPZ*SKU;jt7XM?X
zNm%Fp%Qv!a*Nts$pZoW#W-KCF<kuO0vvcaXf^Q51ZfB2LQ8k%UtRGb56$L@SQ!?_p
z#wKF@O%5{iMi|(;Arce!a^XuTp`0yEIK62ZO~j6@uW4lVBtBvQ!w}l1D9W~UbYk}C
z{oL3maxzxYkMrgSNWkV6@a$aWc9IGsnaNuX>>pNkzfBm&gCFEkVKN6hDLJ|aI~mq;
z=)1O-X+T_^?70D5w%d?HQMTk5;C}%-`1U*GS48gRJ387&Fg&!B*RRp{i>#ES(O7_t
zfI~^>cHe%fO?VR!SN}!`DSLn?0b;y|jKE>lL$&L#UHC!v0EqG6OwoT;yZ)OP&p9Q`
zIf|M=3PKv)f;Q7q4agCsh5)-T#W#wX-_RniO<%TeU0<My!Cc*1GeZvONE(o+6x^T{
zoYn)SD8%yCi)iNS*Fh^te|B$OVTdFz-TFE>k27INRtizQ<us4DU<5+WJVSX7kCYUF
z?A-Y%bGh+MIaq0xY!KT{MUe-|8r1jKE(~XiPLWM$sEj}QaC{a<B9VhmATlI}5Np>t
zK{i3fW+FM;kcrT$s^uytFhlJV?go?(bF&s?_>6g$lmIEYgMIsAtF>ACBSAZ>?mymk
z?p*gmKGt62udZzUzMmL=sr`dxxbYf?({MA~GyK{nT4Km|D_$POZ#zl#vDYVUDi@#6
zIj*}Riv<B3T^l9okCzVwbj4Q><JkU$A0-kscpW?D$SH%I+H1Z$XlX!WaePinpBTRo
z;7S*-lHmg2N!7G^27=~v)ZC^oN_8>xPd@d5N?<WG+_aLZLkIv<RQ#9226dLC3{lGn
z2T<*Lb4MP&1+R9QGh5>)%bJf6bKs$ms%<6Wb3kqA`3fXBdlMngOJ4u%$3=;uEyg0=
zHhkxZjHF8Z1lM#IAMli;=ygB|QZ@ke@g|1ZCkBEx6jCmGRA=$P(3@p$M;;K!`QF+s
z)^T|(M1fs_k+48|t|BnFyGw?KSqf+=KYTV24F`ht3(AP^xVLJcJP~5ny$JUIpfu_<
zK}M3QS+)!id3un~+sxt`8N5KotwbLGSR$%F*Ybl%_<AAi^j4S!6-EqNiP4%t0s|ex
z;?O24D&`;@_n#xs*D$2+VqK=QYsJVN$CSEf^5`mlO3GV2qzq`KwHjn124fy+b?mvU
zu2ITR^5^M&MWxFfc;gmlnvscLQ6L5fY??j6L=n+t`~Xu_`l&hoIQs&FU;+li#Afye
z=3kUXur|6}MWLXyMa*9SUip)~n<>4Gt%&Q1a`CIt`;V`0FY-Y)^MtJ#vP!1ml1PI^
zZ7=3SnO3Dh@QeUMbht-i1v;7UzKjs$lUQs4`dL=G-Jus(4Aw`!-zym_mc+caGfLiZ
zosV{SQOV+N*t}j8Q|>-4n~6_t@a8?L{PenOwqPCjx%sO4+#tfaQz_;0KUtIqcV`TH
zQ+Rme$W^JVW=m;PU6kTTwMq7LYN7MhTB?r9VdSDk;sQ18U5A!UW39EKW!08{4)-@4
z**aOn>l&M#tWL=n8;$B}yq-Fl&O#Pi<-97i2cPNM>@2<p3DPQlb*g0zFpRYJuB9ZU
zQFNv$){1PyWk}7oh)52B8l2K*;<8)e>c#TiV+MzHOuArrnonmD${==OeS<J?OU<Ly
zwAQyOFb<qHKm#}8^Og~~>{`$~b8HFXV%Hogk^@ywdnw^9<zWm{qUnOpP06?yiX}9<
zIkx!AgU8+?5e?8##I9UJuJ9@POle3-lWX<&SL(%IFwTT{?|z~NPBNPR_9%n7K=D$y
zjtr%YwRo@?PhU`Zn2*qB;EQ#*N$@^e!%~h?BluP;`J4t@);MF}M!-E!;}Ii7T82>6
zjfdXiw>eov;*fpQS)6B&l@cK>VntB!TLGPz*$&AOq4?1FdxIV`TreiLLRebsL=<O0
z=Xj+Cj9Wn`f!Ub`9i9=Gp9tsXKZQbzaEA$Ao`#5izL}C}2zvNz0K^OG8G!|;s`k+4
zAc&56zgXSoTUqlX$-{xgVm_YbarPp~XG#@iLMF0VNJ#(bQ2LK${9mr@!?U_yU-<7x
zx@=UT5)t5J{3>Ty3TF}mMuEg4tt!IS{jGjzrX}D|O4dS6$8-6#s;HeJ;Y@JJPO8+x
z{OKut8ei$lo&~PnS=sWfhfgS$+ypl_k;513&3p4sr}6Fj8S(q7kdJIMl2ycRM{||i
z>(;t`FSdTBpfi;U`X4c(X^c5bE6IQt|46ZD;|?a!$qUXdGBBVfeSUZDkTF9t`iGJK
zH71}{d!6#fGQK9W+3;h5teCiJfX7ZuI-jfHF;1KHa)}ehaQ4c%<4CRFuXxOt9iH8T
z?o|3YJr{dliu0Y)Db_5XFLc)q-%q{&<98MPB{Aa7t6Y(r^Zt+8D(bJ^eYs4??x&jC
zZo4`N(j8v+ZB`T<M}%L!0j})Q2D|xn#N$AJbYH5VUMb>!agi7Mn-SFE%$AY$zHU*D
zU7g-E-pF!k@{DYQ@JRZQL7F=YYec@~t*kASrU%`6JVAP$utequvVFdd7|H^jwZysi
zD6*%HNCZA*sE4(TqFx96bJfG2C6=1xdLz_SZWq0%N5Ya3(a*dy)5BCO(Tp-}iGqVo
zf}IiV5<IqKnKHbU!kN^<Qrz_OYn}Z_!#rOfm}L0Hku4Q+GDMRU$D{Z!79<lN(k0lk
zc2(xPLs=_I_BEr^OZ_eG{S(Xle%>&}Z>+7b1|hF1I_8xvL|1uKy&gM!S+|btWZGmT
zQ*D~#tyg1`mD+?09pACj2GPcDoB+?NGL)z1DaJ_yv)rX5XSeTmUAI*Ycb-ITkCQ8n
zTpGDyO9wO!2KIhn5@I|Fgj|S1YOI4JlfS?Dg~gQBhoS5p9D1Qj!SgmnBNlL2AP1ev
z<UOBg9L@}`$#_YxZo%t9P<&i77StG90^-USY-Il1m`3GjnYKbh%$mge6FmA@B%RTS
z|6{1+z&}@Svq?lI`L|CrX*{^sS^_eAc)S;F{i!dPE#D7&Pnv2YU9Px(ZgpOJLBrAh
zh-2g4rTz13X%ZjVFt<-W8y;(vz6c=%Q$kyX2-toSRMs0Y#bFh39a~;+%%Q`O5Fk*O
z(`+KLPiUtm^ttrytFDQ=K$l_E-*eA@opkJ(c4Oc~M*Hr>p)T8#c@REm)y#eqX<mO5
zI&F|hv0<Lmcm4BoNjo1MXUZoJ;qcRV4#zOZ*2&n_W`xB1<fQyp;@1boJ+D9SH2-=1
z`;h6EknwKu+c!ThstFlVEP~OWZ2p@`$mj+Z2>f#YgczppRYNE}4sd0!oBLF718=L9
zC&U%{aP%|`@!1O@7CwC+YEQ!sm1C_*5&OxDYS8^8`?29#waW%nX8T~Q`-lqe+|%vI
zE?OXZ_m5HF0oDD_v-<x^r~;Pp3cxgu_a=Qm@F999KEdq=ko$i6((;*BQ$xhIB_~E=
zs86Mk;n6#~(TJxL8y?}CgBXuRM%AE6I8QbPNm&X}MyF{(iu9S7bXFmR9*x#s2=jFf
zd`fYjWYb2J3`i~f#;p?BLtl{5kot*`7~g57_qW*ayo#bXpOVcmqc1a#T~@J{)6Sf=
zW=zk?6xM&Pnf0e&SFrX#)-9TVmV?k@nAm-Q?oLVMWHm~tGj!6;ksx<9)|kK};U0%M
zVKX0u#VpwfL!<#WAu_>&B}s18nPJqJVW9?fFZlDI)*yZjw8t`{4QLz+;ZzjYbfbrU
zQxPS687a&%!uZsgl=eFQF$qD|thh6;=b2LH2jZ0s$;r~s!;5+2FjZxv>66xHOKu1!
z)t=pIMS#4@1X9)F2a0D?d4HDkgt2NKh|DACrj{q1Ra)e+&Q&PsJQb$g)2|m@s7dpx
z-sg8TIy2O)zHF()qG7WRchqK>B&zg6uC^R-B!0&lUaytQth?4c*KH|K5g>3B+SNrn
zv?5UB`!m7<F=VM(D*`t~ILh8fGZfa;+VDJ%-B{J=qhTxz?|UQ=Nmu^7bT7JvTIS{a
zj3&Tf)E1M!1r5H8H{ODzS;Y+=TeYq%j>>X&hD;vY{+wAJ6(uR1#=^94=Uwa3xoTg0
zWvj$Rv9|Mmp0^a!Rj9c-{iLg;+xLcZl)Pa5XOe#RjH-*P{!xN5AsFSS?%}J?*=Fk=
z3+;r!0s{2N6oD!owyW!6L9)7WCN9kN?H$_7@3dc{nKOEmJ>8Ujct-H4iiuFlID<LP
zE%u^2%DW9hfh*8g^6?I$qJ1RKH%b;G??`#6G9p+XBI%tYpe3HSQpfF7X6^l)ow9GU
zoi}fxH}ACTvXgTIY}olSy;$B=r0PFefc~ZigBAWp(#y#{L%d0GxN{P$e|nQKrEe7E
z4O55uodu(Mz2?ny^3^&Mv<?W$Tg}xs*ncj#jsLkgtl(yRzoZCz=1D?J5h_-{oIEyd
z;yQn+?!JTlE#jwyXZ)2Mlz1vkUC*mHEh@G54`G8@q0MDzRcGE#1Wo?5t>FUYW*JV=
z=Hz7A3T;j4z+aY$g6i70HCmqI$c$i$iUKX9tsTCM7sJd_ZS;wF*Jr6vjI^)T-nD1~
zW=K%(XNVV~Qa8pJ?Fd|DGah)i9)>}LO%Hjd5DY_Aa|>=pDDpwldEx{e3jA*l=Kpx_
z|9jM4IyhZaAxELnGC~;#7^49PbFVUKe<Zy1Jq)DWykA`QQBqkO0q;GFHYQgpuze>~
zh*J2FFBt+ku?v}*DpnBEy5((QnMRjOR?3ZbtJE&ns06m}7ml-3n(fiD<dc1&%|Hb$
zw}574sa;;$CJX-FtJH2Bu8sd~eFLyBxL+PPzW-~Ceqay-6*NGj3fG){ETH7<QqFo_
zIW6kCV>C|gg3?~0OFXvWWgn!{XcM8VA;yfn+NnvrvPQB0eWNdm<h#$K&f(3TbRnN9
zyjzc5Sfy(V=hN=X*wq;I`};fYm*3B}DYEMSP?P{Jp|AaK->o}U@r1!)Umx!8G=xXt
z9C>2l0?D5yy1jVe{J`-YS8izo<m2mRq*R+iJ0AY;lv_k8`<8m}Vkzky!Xx8-Jnl+%
zYIp_hA>|fXj0-EM*m{eapfRGDQgQY*kwr-=>aBw5@Rlm2=9Xl#jz2O{vhL-jb&9s_
z!H%{v>lH)7Bg{&jbSqoG(hP^Pj#4?Two2QKPooEns2bvg<+-YLhD`b6jr*3;0pQ!>
z{P6WmCh0Inf6AhG6vqi}Yyoly*96m*&v^aj1I$@j3uz7&`clnOsG-41ta>l%4t0^s
z%kB@WQfsGH2x}@{JF-<9Bt=)(bYlxRx_~;)d*RMR=cX3ptLnO5h^|h(q@RZ@`x4y2
zyyPL(_jqaua^k_6WBILfzpVOO*HIP}iD&L^dyunm&guKR>jfue8i&yABWRlcJT``C
zj>T#3gM%63+0Yy1+_YyRogO*!-Qy#;rV55c*fjD_$}KrovuDXc=WKA$rbYv%4<ErP
zyfnrph3>O)$M$(znm)jYnfNBjh^%5!3h37&B|xkL7X#wYFn@Hs!@^?1X#o`oaA2ED
z@<Y|D*#(BS9AD<nlW8^$Xc!VElPuu{Aor6N%>kM--$fG$1FFis%cY0?(de9pb_do~
ze(OoYN48j@Z`WVrKEfiuaJfFZm~g|MYTHC1;*E?(f2g1(=h0%>d~n|OXhAylDis&;
z3gu}h{YyRpj_*fxP|8j^I)EdO@jV^_IGFpes`$UZytn|yXn=uI=m~}SZcbjV2F&(7
z-iY`DjM3Lcc-*uj8SpXs;|NmjV{2-Km{m)_nfT>PFYV2xtLu7^Z??2^P&0U}NTP{3
zten3I?S7vL6TLAKo^rb(Vx}X0@m8KQBk!FtSO%M2W>!!u8kd%vu87;>4RJ;yN>u}H
zN+eAnCrvy#<|d#yLlpBKk@gM@1Py8|Gu-nhAOM5*1Cf$u6NgwX0a=eU2(IQ}Edqhn
ztVcK$3IpLpO4FCU7?uek&j`UtEzG&((pM-I9M*4k3yh)WyD5g|oGwn?Q!RaoMU)+y
zG{3Y5y%-a_L~J)jy<bum^6TeV_zk`#U(UzeHXs@oVQ@>eq%U*SeWYM3la%rVjWRoU
zRJLp+QU7dPT2is?NcY^?hj5ieWSK%&G&GfiZJP~&WL#wm-=@tOjWghDlZa7L$~*p@
zV*AVvla%AkT3lHss6&D#c4<oNOi4w?0TF)*BKTp9MxVlPHh(<F9w`uZ9%y__8-5yF
z{$x`Gh2}T!bDo$8ipz&F+A}}@TBg~EtYsY(h(-%4h7yT_xmF3>ds%lmi;)>qWR;4F
zp6u3WIIzX)X&2XZ;kz(H2;Wu_lvD>pxWT8Oq`QF<B$g!QH%X~b>OxA+umee7DWu46
ztZa891FDKu+Cj#&1Ujb&a{aVAIdat%a<Wxg+T>{k*aAgeDkGZ7N}2`OC6xwVrO-A}
zT~)uI)%v+aIzTbaJeR1JL)S@<1iFx~mr4zdJE~eRO6cMgpfO)NGJdtNkg(oL?MGB&
zK)I!_^=_UzQv(Jj#d|+yblH@iD=W&Px1{lOfw~DdjKfH3WhU#grNRZ73&NusoCjPa
zV7<g@lAl*DRxaB*N^5Zfxs{`BG$em#mpFxKXKf`h;tKEA>V+Fpyw@6J9bbibnh6+m
zNcxE6KOK8Pq_fs;+@2UAJLa9cwOaYoCways)XlTg;9ZVS_JIi(Pq$dw)eP(V?4Nal
z-@A=}?zX@G^-js#hj;ziCw=xyA~)aGZZvD-VM5ehrN`;oDYb#t$OOK@;X)IeSn86P
z79+G~%$lLz8E`_1yI5C)c?lsc!9^@jEV^eDAMOS~NNJ2mhauqk04!D&4oBHf>r_Am
z4M@2qrB7@#irtKA#Q&|JJ-Zouh}y%C?>B!dXvUfU>pS>As@TYX=_miJlamIZKouL4
zr8;HwA?+Qdl`@`QWF(t&;P#&(G)gk^A0%b)${8})%H2E&n0xcTWhw#dWa9NEfD|^r
z+EZ^1Z)pcH%GlXHuP_NHj*k{~`#P3d-A9=Z%)Ps^Wu<^l{Po}|Yf54MzurL}D{_jl
zEH4GcIKUmu$JHiP2@t-rq+?8tY0j<3u;r@to)!Z6vZI8}Y`E@o#RwG2$#KJ9I#(TH
z_xyyc#TGKf$qcVzpJTNX9}B)(`Qo~{L`m?bc6q!me<L9Lo;AhR|NH1-bG3TUny)P+
zvr4*$zN*J|{d~6m%g0V%`|I<kGWoAEH}!L0XBzgYa>IQpz&nUm$UxJv``8u`SZTi6
z-9a_BJ=xw2!lzHO--==`i=<`QGT!>)e&!&I8*!z%_c<b?Ra%m!?FU@<iNa!?P@D2|
zD}cvQ*gOJt%hyn>K9aUrl5#tA){mbuiVV{#c6%p1^AT)2u271lG&Vg_8kXhs?L}5v
zx&@7tFrfR~%k{$M`IxaUa*&a!t<?k-!y&v41ik;wOO}&v(qU$al2l1nz^m01YUu;=
zj5UlE?=mWRl}2V$V8)*2z-;KT$KqX(6}FLFtaoozRS7E~*DSA&USL(Nzay&-Pnl4v
zuEoJibMh`<B0VhmfI?bh1-6HL;_|5QsBtsk-~1G07%HgTe1kr|REc}m^bu>Z$~%JB
zpsPw=0)2q(d(Zjh1*iixTI_i(E|JIcuEMoV3_fyib18I2`kK=|j1Y~fHrQb|S0nhQ
z8V8n<$Y#Z6=535Nfal~L!JJL}i))BLz4CnQV{{E-+FenMhh=73&-vt((y>8Ud)^aI
z3G%P(Ev}+ML(3{*%rtysQaC3+R5+X#jMBu*pIyuvNSp9mX=}gx(Fp#<`{ExKe|c@&
ziWM4-(W0qYHcKy*jjoTtdAs&%9nRwS`9iaOA;{p0k2^r|*Q6&De~mt<@zT>qA_Aq|
zu-3Zhfqrtcm#sa+IsRI2N?_Bl9NYPzjLp0Au;F6N|0wd^<6kEgpI$G2>bT15{uW!A
z(9ivz<O|#BpVLOGv!RdcU666U@4wDkq|G9KOwzr{__<_P|MY52{ri(K;4u{Y$p_%V
zzU^Dp+}*af=hvMt_Dj68`A87h_2=D}Bp{fFR`4%H6;h5AAQcvCsy%`GRF<v#U~rxI
z|2LlsX`fc$H@G`^k61za4Zjp79vVFD4L~o+&mv{%!3>g&{U!-gJ`x}l0t*F9swG)2
zgO}sRZKNcxDz*SJ^H-9iX>`KK+6a8SF$QAy7`X29`7w+ZDh15Fjq&M$Aac~cMDgb`
zaq0Ubk5LsBh&cPKXnC@?A)QUn5}*hVbMH+s$pAHKyLrhpI|KQ;Lz2z2XR#;Zna#b4
z_$g&i7%H_Y#}W*mzp2F}VYAAtH=MzLDuX+TWA3Ni3_?V9#0}++P*kz3l0ty(m%fD3
z^fq&7W%46fOBMW2Mb$s+WT1+@bR@~QII4!;)_{&M9fG*42tY3Zp9-)}{+@XsCKPHB
z&A^{_N%$3PlZ&el`>ZReE1=QOoDzyQza}kDs=1=76H4T=CM%txIqO0gN?E%qFF`t!
zA2%1mkh`oXmZ6nWn-an?xTJ_t*q^mBSEd!s0+SQPe5?UNk;JOfh)|k?r@du<_ECoy
z&c29C!FRE@xAb0~b9&WR(3I?W!cItT)bjP=3O%f(*E9tsG6-9_wqMMfMl+{Eh^&UQ
z_`6o->yQj`^>AkOCVMO}xzTIPQI(fqTGP@20xD*F%^~!o_VHfENDJG;dUcLvjck13
z{2j0`gGgy&^<w8E;ux}tF@^Z>>p(||Kup}zq!&>qs196KE5Y|1Tb7aTy-!UkDq7<g
znqs|bUT!lZ27mKTelM`*OsV}Dgy+M<DT(Zwo4Pv2(atkT`HeOjW9@67VB?~Vig)#e
z@zB0^SJKLnw+!F<Y|3KKdaaJvo3{1o79Za4VO;*r5K|?>5F|R>AfR$)4yNlxFYf>D
z&Esi$Gvw_^DOr+^?ey%MX<6?a78c0YEfUZ7x*ra`lxMfZo1pHk8n3r91~v+`dVDw;
z(v0*fR^$?V-mKoS;@p8-5s?erDbQJ2&Wx`^q|~)|H|`R_HS{9jodgh8{v#*6tl-NG
zUd?$GFxZU|>x>qgs9=&&STmN{>MgbA5)^*{sA9Kg@?zbmeB`#A4y0PTnerXFK#FzW
ziNp*+7Dszgz_byhqL+X#wD!Fge{C<5o501ESmA#qn*8^1^55&@f5Kdi#l!zJw*huE
zJj?}LWdWiIz>Wq?j{wo+Z<q_X%7#EFyBY~gi~okX4rZV-RN!Y@l5gkXTC%k<0jCs|
z^djDgmg0P%GzAC_#=TDn8Z3!yAv0~j`uGpNN+8A6hH+0IV)p!aJ6G?AV1m!8r-C(`
zL6JntrsKeXIg-qm&v1OrYcg4YD)c&5<b~~2o@({_XAwt-`Q)Ekhrh_%wvnDh4%WIn
zYb;mkmbhAQM(HqE??)v0a>63w{uK*D#Ae0Fnvola-Qh3M<O>zrz3KXCS|pS6Oto44
z9eN@krIIPHTme8d0fe-R5)ei3&NPQi6nPK=w=^3g2cY}=*E4Fti2oav)DIIF1kG1*
zg9|Lewk>E(Ng*9H=9I6O^dsrkb&H_n9{ZbC?BIQkSmr6TqDVo(P&!kVnUSwy2z|b^
z38Hnv^ii^mKfanseOoFr;S%+uPf;AwrArhtbs!NciS!r+1P2bgnbu=149O-amk8*Y
zgtU8bYc^9ZPwjzaGTKuI5)Q-`_kq9c=ul3JWhH;D(LJfxqUppOGVEDe#a_D0<>^Uk
zMh;%g7At9G2_7pfMkz*)NfpkCjv6K9MfbNX#me87ZEIXgA*_lubvuqy4O{+cb?FO-
z`?Y;dvd4<=s(!Lb^)fmwG%*NdFEk^{vbjji#anY2EkOWlcFL4qZDXeRZB^yxB33Zh
zo?0en(@E3Mkk0iYv8pau)3bU*f(^ErcDt~nj~yo{k6ho90lLS&p2N?qAErfX(inPc
ziqD1~`PA?TouHw(zd!$`TyJuupn<}|-hO;O&Q2j6Is%T6X)r{gdr2(RsbM+(V0!%6
z-6MI?XMAhVW27lAgN`kKK^|}ZVNHSBy!jC+9s?AOQFf9V0q}BGrMP%6UzF5dJ`ptk
zipy>4OLw)p-qJ9<=G*QT%3mmRkEDW*!JaS#H$4h(I&6Sq71KkvuD`yGp}pBIVh1O3
zlv>yMu{15QD6@3)&h_S&kXYU*+Lwtl%2bt`Y985%r_C}n%{>p;D}`sdJ;!Di8MfxQ
z2Tlh7G|3q-PQDZ-<NyBqVme!+4^Y~uKc&A5{iaQGJe>r)+KAw~yJiT{>qR+})kQ<Q
zZxcYjwX8L}`|!P7J>~aFz1RCc(wjILk53!&fM-+^i2mTPfqQ??ZAI~%ehVtO$W0?8
z&7jo4qyaX!C}IUq$u)7giE~CW_<hkwN54_u^(&*%%mm5q2jQ@4An+caLMn0+s9Ac(
zAyhL^qLMHiq=rJ-dr?p){25hHDZ-~ANqe+n6M^keh&dM=OKr4`Z+9B_UxEWV(s6fm
zrUm3^ti&y&DrT7|+z?Do?y$e>;|FUtrHLexQbr?(J>eQ{Sx1_yfjezV2J~*h5>eu{
zMi>cuB>6H}rh&yJ(Gh)#Y8ihdOeKjU-1+M$cjYK1S~zAR{Rq=?-%u@w%QJ-TFn%a*
z*aOkz7>ZJam#Ev61WIecXPhl+z*eziDNTsvVnJ6af2U<cM=;83cmpwu^+^1LIm*A>
z6li&>p3(nASx~BJvb6)@H5Nv>aL96^N0rT+bR9d1p&LA(GUU926gwW8k$ZJf%0Y^t
z-twqz5q01nJ|Z%pw5hcN6U@;T>_4gyr|g7zqt7WI&C~zd_S1B$x^T+=tuHS`l!0_y
zNb>f-v}949atcQRGg`>I2qlr)5;umB@yQmG@<?VmgxPrgKx}V?uw2R4T^zjEMIp=n
zwi3~-kf=~7%d2N-+Q|$cv(>FE=R!xB=R6^R=dy-vAEk$|N!J)Xki;;K$#ejMr!;}d
zu^So2j4`vI{Z63H;~j=c?j>^Tiz4y>N(D29p9^Lkyxbx0G%c`V3_{rjMZmbo=Dl5M
zBe(WV;qz<|D#Q8@v|3epleqTM-HYQZjLq3zjMiqF^Ii9KX-!2hY8}m=;VGdNNg`Bm
zSe$q)2_6daXL>oy`ZglkzuW>!Q=Bi>3UI&%vu!>Hq4w#HW8M}BbtIiKB2#~fCR>u*
zF3UwG6xdcMDrmtk_W;4c%GLYpT31A3yw6cBZg>yP?HW@Up+0rYNa%k+#2DUZ5-8QQ
zbL1{Xc(^X%VaUhzKRR<W-$%EMi6rHw=j4%9i%loImk}L~J>wakZpCY!WqO|h!u<yO
z`uNxNup~Bb0`h4j4nY{c%gBCQKoOrkXC{-XT3SpdyRL-*FQ+E49${WjGW+lt!cKvk
zM$ak>s?66eOPXfSiJBsQeM2iPTRFb8FFB6{$JHj=+$DLoS4o~!%YAeajLnxOu*1eN
z;`0`4q5Z6DkE;zvYl&<rVNyL%dUiXLy3n7e`x0GCr60WjyR|}I^-wF@f9`I{ElRqv
zQ?L7Wz9GJKcc8}de?Qy)>)k~)HG&gU!q9QVje!o8Yz*GtH7-mUINK7kRFx=d#ysH^
zU8pJ@m*ut^`T;L1hrnK(@a)x=t9xDqLvrm9Ddd6Cl-a}|KALJ2R{5qJElpM%@DW26
z>#KpY?JvKvfyAV&2K(+dF~0Dm&+xLcSGJ<wLN^#=M=^o8maK__MP#3XIFMf56(7FF
zb>E_7X5O5vO6S_Fe>0B#exj4lKsf@W-e$P$`C%eRDBDz(v}OO(W90z3T21bw&#yQP
z{jdUxkEdGrR)$o6Uwm7qeB+7z*xmPR@6QWmxjM}on_cu=X|8WsT?_BZ8tLxm-sg5a
zUtdQzVq(9ezB%vcE*I)}?-~&Dee(;-(^q$}TZc7$jn}u0L-}v+gM=vjzgFr|`%r^I
z3M4?cg9QQD;tDy0e<t-U48Zs@1>t3?(-!_z!9-h<bV*B@Q3Pd?%VF0x`&*9Ow9Li&
zY>+ui19T*o?F1S8Q6qqMy`=m0?)UXPB1DpR<N@B9g8w`4Yt%Z6A9)<&%F-h0V{5IE
zO#8CR-ApUy2Afz27_}_YvTP8Grgj>5ZCnpY_dGnC44903b`L(~y<)uC^9s5Zwl@en
z9JPxw*4kr8R`Vx1C`|SbFNuh0TC`7o8{Fz3AE^Z?xAAbaB^OdUz4!Q3)1sH6h#3_;
z##&J4KQxIs9Qs!TU&ELC-hjp9S*@U6eJ%qxx_GvZ6JS`@i^0L_Eb~$36#PvMG^f&@
z^>I(H`))UlcyTXwr=$csRvwo9JO~}JG2$|~+QOh<2tFPskGS)fS405UGa_*zYx^kE
z|6p8IM+`Hb;r6Os#XozGWj)h7xPIfIOpISX@6JPAzNgGXk-T&^%u>Dx8D|Li=`nF<
zv&#DtXinvGeLBW8`6zz>s0AiNlG{A=6Hv*0RO#OTF)IS79I>jbYkw{P&IYdqabFd$
z{un~q*<}FU>Ag(+cI}j*b%?{K)}<T1#@+j8e7*V-h{}1r@nBf~XM6?LxC!#&pSDxf
zAB)JB64H)m<@ikb?Y0@`X);DEB@X@5p(<~bBwiz=6@~Ut^Tfp5Zch&!BV%1eQ)Zv`
z4r^-?xjxakeL3mHAtnRn`+jE(MnJ;i@E8Xs*SD`wV?ww7Ty2DyO`%K^AYH9`>VMO?
zIc`@^X3q08ZC5&z_~47mZot!b_xtLL1Z1vw6uwLalTQcIoys$lm)F0Z*di*Lp2bH)
z47K16aZkwzb^w8-p1#`TCHgVA#atLco5`(^w!cv*j@D-p$?ZPqEBiQ93ebTzgeN3O
zitLh*5(hV+lc*T8-EWnbX`MDi<W-vEuI)+9f_nW_oQoWwusY_h;fUNuDWY0oYIct@
zGvh~ZNw^S)U_@Y3dlf5VaAFPD^F-Hv4H%BIBrv|h-(9-L`GH~2(c|%5Dl#c>7Ga^O
zXRcv{OEiDdMqY6=xyIF`6Qi@V_^+9xd?+ZP{^fzlFrt>6jj7Befj*|;Z<7)ovmK(5
zIi^(SK~<uX!@B8-s5PLKR#(EnPAR0kUtyWvGf~PFG&<fqcbwjCZH%e{3xN|;relFL
z6q%}e^tV_?z_7fA-^D#NVe&b)KuEv?LqtP63qNv5xHTzg9?3$-cy+9fQyRh7NHedj
za!-^l_+I_vzGpt#ft}qQy2fp&RbD8Kz0|zt^ve~#Xz)%flq4%X{Pv<yC6@Uq&!Ko6
zJ_=^g5+k`bzR254S!6s=@LwIMPAT@OjL5)^aPmSmmS};)S7-m(oQ1if;DJgtqT$(B
z=w9WLYt|I|+;jazy5{l>j#|>oKo%#}O<mPMx1P15#xb=r@}f$QPHLtvO27h}bO;Z@
zM=z+?67llrP)Bt+6#|=gb6HC_`RX{-IpbCD`_swDo+qY{{IVfZmL2*FY|soL=CEIq
z2QdO2Dx<U}B=b-Q^6JEkLL9nlQ8vsWx1^b@Hu}<n0R+K-#rO&wTBnm4tA5^3Q?b#s
zST#FGQofoX>+8#Q7}j(0D*WQ*;L<j-&H)!s3Q{ZYGD<#foun0qEbtSZPG0Uf3?sH2
zNq-d3r`%~SGz1jVlC7S-olyV9YE$l5kjdlD0glLqF#09n-5unj=)?WIK3IUT13B$j
zazk0uvct>#8=_VjiQ&hJcMJYf@fck`1OLy-|K&RUU+#>jGo{#Y*Qo+PmyW`OKTtfy
ztr!$W96(&RWK@>&5il5@Cw<`NwhE_d?6nyN219b=0a@H802mF>rBf;(J}&{9Mi*gb
zTDgV<^74XI`F!;wS)1$WhX<-Zn)2vpVvd=?Y?Z2lA|ij2+t+9TLdCh2ZeQfKS8VNE
zhFzuS5Yz6(`px<mC)lR3tuA5x;cw?`RBjw;v>18q|K1t1##^gYjO?nR724INlU-hi
zvZVm(^1*fb?~*U<e?eW|epfEF{%0^;A$oSdw^T^Pj1F)40KV#5{jed|V@Y(BS|ngF
z1n!Iyua$+ZX{n@t^n#WxnvsOfq3sXB-686YU}WGME~r^SVN;UWG_o+9(0hL~2*fO0
z5J_igU*tt8oUs*&uBJd4%>^|miv84jZ5~Ir&b-Djc058C3k4CF&<H$YM8lEcKiE#z
z5bO*kZ6(zUlF)ssKSCYhj*rG*9u8QlExw&cS|mFsFi6L=SdIg6T^9IY$WpEfA;MP!
zhie8}$)!gog{L}#9b@r<F5v!yiJ>@l#bX@me}0gjPl+sAVMatahRXncVm=B;g&yL%
zj;v%o1*saPukP-b6AD7>DsdUKG5tuZ>mDN=l{RsfIMkA9ZUxqLpW{QIA1=dK<oi7i
z51>P|0U7jRKa@0R$R6$5DR0!xNwH*KdX2TTKX$6MNNRCRU{(W}laiVxIn-y^lFP{v
z_?C4)Z(4y2VBnlz>ITt<!}qJ0OfLuU(ykdK3EFOdadm$qPC@S_p<oPbqR{=^Xl8Bw
zY?^^$me<3Wii@JDi*0<cT8e_?5uX8v5B>S1y9Gsqguun|{IJ9uNb|I{B6NOK>LTYt
zRg6xR7%$~fOAIdSFgu7rmL#BM&T?79D=dZH;$RHX4W_K78A7>$WaXKGPO89VuJTgj
z&B>*{8^OH{)tc7lI3f9zmc}cCR~SF8)`NYJCUCTcssAbYrXgxRH;dwWeGR6^tkYz<
zN_&3$&WhUI;7cCWy874YaJFB^8(P8rhbbU*U$Y}&<oWL~M6;Mlca9CI#n$C`v7~j;
z<_8nQp9>4j=0J<^*jcXUV-zS?X%T*n<FdpYS|hveQX!mI?E&hF%^pv?HCs^X-#oi|
z{py2VP38=%%ixuh+1>guLq8IY0R)|p4pSQO*K#;MR5+H9SqcklE{KJ6TN(hcBidPy
zkr;FYvC1hxbtk@tGUr54_kkoogNl(b3?#|1;jYt!a0ggW;%_Oj)B@`O3PTxYpyWG1
z6AhT}2nX$7&LS*!pa@3OeUS;QNR0TQ!2s)|B^D~lR(?4g#rc(1@9(KH)*d)jE{p)6
zX>*i8T)@KK8~^J%Lc&zC;E|9P8tx+$6f3tPYJGwXte<Dj9(W*X71)Rz9O-3kjc%ZU
z#;UcKpx}gx!)u{<V2<z5vSiIvc%i5fttDQ{U;4Ne2`p3PkusrJItLvcJsj~!E6<tY
zC`AcWHEl|*J5u7(&&)9ij!Vl!vgPiEV(=U%q}IJyqi>K=vf*r|%5}8hsqLI_*5k{H
zxM1Y3UnX)F9nP>^4k3fUrr>ei6KgP5q=4FoX*Pm~xNheCN1h+Sd3)Qo#@qU`_w(x6
zBT{w-Xb|R*vB8{4O=bg9QMMnw$VGlz<#K14-7^Y5*a(Tzq`wAhhB8YdNF+QwP^ou;
z5If0z6Y;~;1V*<K60ZU&h#e_t!aORa&_Ulh3-|V^PC2pzg>i=zS^=+I#h=p|x$-RZ
zH{dzTR~A*;B#86Kus|@p<ugpK$91|>V9FP(r-(S8k@|yLiDBG`ZFV8`omaVkvXk~Q
ztH$D*K&2n$xN%6AgvVVfwL8(V=>aRIhxZ_8jz7zYL^)HL&<b_C1Q{<+u@)8`Mp1$r
zMr>D}D60W(?ww=j!8=-RcnKrTBrS2))Lxmr?^0`Ru&%YRcMn8(c%bUs-Z(|z&Lyd~
zc~Lw^UtD>^P=GOP66v6cp+qaAPZveG>{*|ka1iW)zN*T$gpV6``govQs2JJT6Jv4L
z+qwH#_WMX$O!Dy%=6kZl?;rM`nO!-Obe*Yw>$?8@#e9pTb8empR5NZ`^Ekd|cWsnb
zB`_HB?7EM1sv(?>JxED#=))B<cY&?4<vihe|2DnrYMzx@B?AcEDMT%%RIqn{g47|(
ziYL-9&1!Ge!2ap;skgrp193Xwbm^v~#EG}48&gAKro;Tg)Df)kJ7e8B(ZH!S+4l^J
zPG%XrVU=APTUu<Bg){5+TNVV5=XrzBJ6@Z{Bil}-OcCkF?76eYRwB)rMqcsbx#`J!
zA|!0nZe%SU;lG1;HE5#};(y@z6oSNum$}oprLfsy2Wmi}BZpCvggtJL@(K~utk7De
zKY6H2@NvqGv(@TX;r=$}jcuzOwmRiAtNp(f-G&I&W6OIO%7_|}D{=`ze_{cij&Exz
zokU^P2*Uc_5zbUu^=a1c*XLsN{|$hJ{^-9NHg5kxr;dz)q_Pe)TG9Mx6qvZ{#RHw1
zGI}P+242klA9QL(X0OQ676)z3&qzPB;U`h}F89QTc2=w0yk9Al)vFrV<#zfLjqBCa
zS2%nfYh6jT`P|JdmckYzh)@fc)e^H`A#r#666muNsy!E%kAu^xMb5?KbGQ0t&gLx(
zRSKjZ^yCgRO-~|}aY=?Uk{fI^MRD8v!lwwcanA<eTn^yLMl}td*_wA}u@3fA)X7?D
z=hD*RZx_{5j)+yao)E3|*qti;dY`8-8uar*cahSFGZAR4a%M}YI|cL%obO*;J&OR}
zNnfqs_$0pEQnbr^y?@43APFk^xu%RXLy{|dO%s{Nz-+&#LBlw*Gsqbe3MiB4!%3BB
zE((!VNiSt}3d8nTt~CfsBne0eUXT`kjem04@f8_k;Ag)DN?%5PEQOMrk`Yda`&hDu
z91BCr^mI}hPA0Y9rx-b-;rwv0W|4LJo<-$O8fuaQWw`k*-ENX2By&gEc!*^&9p|0H
zo}q1@&R(8Ft>;@Vzj$<Jy;rxHyM@rUgEFM&+)BFOC|1@=V*+9FAx>(L8w-I|&cRH6
zx??Jf%zHvanMxweO?%}Om3vJ`qjJ$XC7z}!$LMMmO|T3YhQfB-FhKl_on!42WVg0+
zYUN{Hy`GK=wzPsdFjK;#K`Ux}2xa8FN6xzZrx0znrV=0;1Qc_DC@?dqPI4>$8Bt4g
zm@GQ>MR;)aJN?WewU!&DVOQf!Z(K!U_cMf0L|l3HvjM!LGbtl}Oe42?RJQR9;~XUD
z=mVX4wEGACBGzC_2aoKp;LjU|I71|+Mkp%Ryfu`?sRt9b^Q&5+_Veu*6;Jbj@_8Tx
zr*9d`QMoissEBo#%gRXCHqUW0xh%|#&b$<mHOwXwSTxb5^q#g-*SXZQD}I%~`0UTB
zg)vQjP5UT|(|ud(D(+w`H^ci05R;L-22bx65DgOks;+~pPthL<xt0uOJ5r~So(7%j
zdb^#D?`(f^sq#*FaVMhdZLA47DE&xLc9`FOCwlBTF5bO&xe_069I~hQtLFWEUchPJ
z#cPMNp>BJBy;jCI2O#~^nJ1@N-NL`~=DxgschQCV{$19@8>;II1KIj_=hoh?;+NtC
zk8B@nw^#ttpuPJ0I~V3)WYqP5FE@QmiCV`efoSxGG|YGqgg$kLb2>C>Mg=L<GAuu0
zezV=J^xi8M++fN%>f5@a_qcc8Ld;?c&^yEXx+>km<efGT%<Z3$LBEIbuV!G)M)W`0
zb&8-rF2uPfkd7i6*+GRq+A<061w(|-qBLS@k$Jf>8Im{&%UR->0T1B+EvqGrWS-ec
zgr7v+Vy)zz&j>|;nbP|OnT&xJqBkZD&M{gEHL4=KjSJ|>OK5>MuAFF7BAt2AW2PAd
zVgn1LjENFPArbK3Vs0r~LP4Nb)=UcR5{w50DHhjY)L^J7fkjf1S$UZaW6*vukXZ`Z
zu5;tDA|^pUD14j)*fM8E_N`o6LoAT^RAR_UIKBKPtU0w+Ctou1>o2}_z#hp89Ah+4
z*r{RJKF=O&NfsU^Q?<-%&NAU1L^YQB=Ons^dVPA2=^`4MGxL&Z!P)`|hxBU!nkrmR
zu7P7r9jJz|-!WmR9K%ja2$$6gjeUx@e1YeZxGz)Btw<XE!r0_=?@H~EoucB0KYOk&
zdMfFx*5r#wfp>GNuMD(7AOs9B+QUh-0BQk3Dsd2NJrCkLrVV1k2t`YZo-MTvqX;cv
zoT(VouC_$3HrgT6_cYLMxOE8CTV^qQ=TFo;gI=qv$%ZwaHQyZXRp;Cq{j5D&igV!y
z;ufhiu`)p<-s*gbU+ow>Y$F6k_(7gz^(HW^zmB^+DT&RplWc&?GEFn<-7&X_a_V#z
zw_Zuyk#aUFCR+_%>z~tbe7U`4>HD6v=GYA=%|J$!v_Ww8`ZNa_%jV~g$Uf~h6G)Kf
zM>VUoi?L&WPHJ+p<=)7&>&(^Gd8M;e9y|JUPqZfcd^lnxRQNxny#-s8{nxfV^e}{U
zgET{jh=fSj5CYO&($Xy|-ObP;-QDfbBcRePQX(KAC14=$Ie1<7v)%7=|KI!&=eEw@
zTF0^P4>Y#eT>U$V%PGJa%=C!jz%O`Hz*>!75Q!@00st)iHzpO|<YFwt$P6|RV2!`U
zTy6t&Zn12%LYQUh{bSKBbP(~5*GOV~ECp>F9aXRoCy{4n94nuD)Oe;9`D@WQUZ2LO
zS}JSm*v1hN2KPBVyG`mZM5CobjS2O*0z?>FvC{czXa?KEtj+tba$cvUn`QExsxf0)
z??KMxAy4oA2_fSE19WP&9if~b6Dm<k!95*O{arsa-&t#Bg~6)Knm*RpYu24j9@X3z
z|0>4pIs?nNiM#(OhxbER+u01^;TL&Qc`~7>SUjRbd+ARhU?6*2_TZg^Ml%!sqdH;v
zM`t@~HEsU?vBvsO?g$eLsIfLM4Mbwo-oA?!f-}VJf&8s?q$(BOKh~vES<~D_7};0`
zRN-wdXVu(TjwnAn{ve=$$p6c{LgkJw1p-2Nzeod59KReG5I3qeK*f#vEA?~V*ZdEZ
z$wNxk)EU*HiFY4=rH@3^nPcdeu!ixQ)50O)suq5HSlwbLWez;;1LpmiY}x}dhDTvT
zu@ZwX0`+HYrmlG~-cKxlvYmC6;<k;;_Oh92&~10QrfEBnY53*8L|)Z#vW1LY;qo#%
zFB$K?cd2-tr60d8!|cC^Qa~Jz3?1IQJ#_UxN6aX^>MOy=KQQFGdJ8BZ9=$NCu-gFn
zn2Fncg2R<mxcbSdR(af|=U-dwd0%8n)8hl0o_HppezSY6WEw;SQ{ISlGmI*H)h}70
ziIYVHW)5dgh%yX?XZaOHax-KW#Im9<62)-MLyclZg(?aI=!C+Go<GvYwn?H+Hz-Ml
zGiGg@HUD;JN;U6a%#4#L6a8$WYL)dliSSY9RuE{i2(T`-?d{|^z9bq<vkE9JwKRdv
z219w2*Z-02z9i99&J%N~AXSSK0jx`<Q6ct4@*0kut~Mj~JEgfhUL5BBK3w|>uaC(0
zD=Hk*_tJC9_N!z|-`{uxp2CrR!|IkYM<<i!9r67-x9|H-<zZMHSapLw5PZmU;jahH
zlShr{uij2C2mj6Amhx!V))UE`9|DV8r+@Odf9V$^K<?;#9+kh{0c7yM0l?%N5Dw3=
zY(|Ux43NLgZGd4|>x|*oZ!?|@0r0Dn;d;3HE&?iYjNk!`@Tb6#eTWAVj+5qiGi)=B
z$nY?<8Xo)MgMVfsG~?_#&j0D*0)`%=ME$!*->_QVpO|fWOhtT-<DXJH`|Q=Lsq~I=
zQnuQ-bx!*OPyMu{r~1<D5g<`tv`UmjZ>=GheG6EZcrRDI26-zLdX%M&m-FUstm6H5
z4F&uES=^E`AV$c@t<XPJWTBf{_z`Qha4ubG6W^zq?H~P85c#JQ;(bfM_*y)MvMzOT
z8CtfIuWJwt%JQ$t)ADNfumF8joCBE%(RKr}BbnIMqTi<z{6LWQt%9owkk#;!fwDcV
zzrI-ZB^ps+2nP<PqZ#ItE<5F~0tXMe7tt<{M?Xj^U;8jdqO)w*zxl&_{tc+HlA)21
zNh8o{j<J+GK-U*@!OHT|&Qeq(=$GH|o<0<C6hRJQ{vd}~tOh$!uUfoG5R9WgDD;J@
zF@0k%=#S|Az?KwaiI2x58(r}&VxN?h(A_Wf^6j@sX);{48>$F?3xfgzCFTF>+o%eM
zfs_%kfvs2`ZjGU$u;BV7ixb}7#m(NHtKpaS$+6#=t*HkM6ap&U<E?TRXg8up{N5!e
zoOZD=Y?O{lc2y@jvG((?VIhUuWI|ryt5g3#k9}KPon$_%-pv@Tpwd)LgfL_^=jr78
znmd411}=pvsQ~ngY50{40mqzoG(q5(w1&7+-+_A!y5b(D8A<tkzMQ?Eh0E_%JAaaA
zP0cZe%tUlFvK=P8C9>j5%_4U%vk$>l4_7A59I0VfOc8tM?0A+9FWh<18U5~Q!db?~
zx$XV_B`Wv2)Z9JcFA`Hr8s0)BfdA=#)mX24Rw@=9sC@ZYX_OmeHYvs?Be)XW^O$$p
z4{@tS<fqXMtyAPLtuzh93gXBS6%``l83~XulDk-yEJFLtDS8n_9O{)Y!x*NFk>QfM
zWKLxTN6wr9ta9kwwlP=3bpAkd{;7$wW_WgX5%XBNT)2Zqmbgy&{&59X+P-!rOeeby
zyQ*@kN+S!V6SWDhk*4Q1q@Tj%Db%geNyD>RjhTyPpDT9%oTe{$Hs3uWT;IQ3ZSk{<
z1ZIQQ&`8Yld4Ei+Rs*f^nn=$J{5;t>NE$4Ptodt%Z)=7mX_pF*EvCTc?v_^MIO-d>
z3o`brc$M1eU30NpSh0z;4VUnyJJT8tzYK4x*sQgg%Aj0S)@WBFsdIfZjm8=l1V&LN
zi)qoB!U`iYv|aL6N0vLLVBO0)<j#XDK!{1dGCcTQ<NNU>r=Eere;Eo58BB${F00NY
zME{}Y`R~0DMNeob{J*Vz*be`1wU5ewY9C+z);<V5Lo8x}xND(@)dQZ&xoU{q)8(<&
z>IJph20)D4R`X9zrww2(0{6myYo7n1_F>%}3w@EN)+xjmmq?i|#9kT<)INZ>-C<T#
zg>e>XdY6@51t7+KB~%zD?%h9EYyEXi@_F)MaECA6!pC2}#~VoV4|Ug9ey3k#V<mhD
zd%K)rebi6dU0(dKGOOu~y}{Y1Ke;&h=<pTuZC@`?`&f}6W8-@eaNZnSc_3Yx1bp<^
z(DfjYkQW{f#%j5R6d5QqODPtP9?GPoV}EN{unbqVIbD|t$8RbKDR-XiS4ln;u+nTH
z+OU)j4@*VFZ0TAshruh9Su}b3z(sKq9(G&Nbfr|Rv3xH@HRJ9v;C@U}*x6-Gc|<a_
z4gVlhnVf8JnrS1WPgp*RCkqF1I`-K=aPA@<eh_7t1{jt~Swe6W8R6TNfMH?3bDZVb
z+LbMn_=w8qQ12r}8Fm^|W*AK{$r4d+1Ou05Q5Wy>ZgH}B3%D??Z=OXlbEM2cF+o;5
zHwR*hu2xt`cr#a|RXX6aFIVXUtZZ``mB!I~A2OrfcHA}eKd*r3O>3V|wOnT%*RCwQ
zB6t<JV9KtySwoXn?_8sa<x(<?P@3bER&dc(<7#b!JXVvKV>(Z?NaQ?7!&XY%1mYSG
z+p_2ixLdywjuJ3gJ_U}PSNpMa!ignJsIl|#1nmxfO;YzUbIsHM!2{Z_j}MrK8v7Zz
zCj>lx#60wPi<8H*+K(%RDKt))_?u<|TPsCj^uC1GnVZOYM)3QF6B8n~5EG{%z88wU
zU#OT_FR|E4)#UJ|>p0bk1e9CunMi1@Hw>Weg%?YLh@f1KDT^UIVq;Hw_yXorlD3ah
z{x>0c(it|gLw!D5d6#P@zw+qULr4=^HX>tdn>X*`nmt$mE{8&&aj-OeH)bA{v~Ndv
zBqV)Fh|Knv3Fs!WL$@Vs@{`RsXZX60$=fvk!L+Lglg(0Cr~AEd*pa57m$cR%`^*)3
z?fTDSre27*4yxt}jI4`Q-*3HKXJPy(9WK+J9D>JPj)V7L<Ik_-(Km?S=L@bk=nixR
zH-C7^h~ECd;~Y|0Y>qOfIt~Iqw7{Vtj=>f`4kp46hXQXqElhP5N+JbLo0EFN08Qx(
zu$dx{>;TF1*RX>VFkl{%z5KlsjzK((bIpQBRkTgQgABrjAqE+KHbf>JN2c63gL$>U
zYDOT|qGS0+(6-uuAIwI%Wgcr7+7|Of`CJFH9rd<r43<+HC-cSVRHc%k`Iny1l^kEI
z%xpALL5tKvhXCM|e+>&S<mH%NPEm-Dj3hjvGQ5NRmO_rbHb#=$poT(4xmDD|F3BXD
zmE*0lpjC2=M;z-yz;V0S%aph*)~E?DMU^L2cxi>Rte+^vx*JWJoGR&%T*->6&8r?z
zpVe)ss>Aq`dBKc_#5>TZO6lehw#-00*qxZdyN#k}F39syz8{L1#RfB(kwBX9P_M<R
z?=-Vfr&Q=Lo!`^3#`Np9k;EJS_iklRGM+`*YVJheq&cBuc_8eAXfS0aLuk%{w;fcr
zd{REQ^Ij}La`-GeOsi6>*76P(n@I#a-Al9K*R10^2BKZGiAGo@*NBh0%2l+f>{z8-
ztq@h~E$tG7PKi|(r?X=KJZG($NBjlBW8cjRf5uTP(P5aT>Al(SJXYv379l$2u(?X?
zLNrUTwNbh_yzHoiDD6kgg9lwr8-8;!s@zUWqcQWQm8~Vt&%TbVEl+oh&DnUBR+@fW
zZtgkqst?pHH4ld@B2H}@)Oc$wJGtP^YiW(Ybet`i@W@8T(wd|ios9)o?z}5XYtC<F
zwr3k(n4)PjjXLCVxSO*)Qg_i*8-L(%5;L_FchTC`M$Y5n`F!!?>3mDi+*4=nU(4?Z
zA2bhNAGk~8m`wFqP@u+6xda}U@Pn8PqEYTPz_1W-NzOXC?<}F&f10gNCPh#eus}<t
zrE}g(T3bqx6NG+W(_RjME-@WRLv|LANrnwVI6|b?(P>4iY;W&{77)LFJTj!TZVh<8
z!AP`*(nRh5TaXlbqFwPfNJ_HJoB(~o(8H>l(DFA(dR8iG$mLno19up}QAGtw0S>_=
zgc`bM5|I2Q4D-4O20($U<|^w_gg(+tan1q?AiZ~0@M^>Ghpz*H<s;8hvm2iHGu4bk
zoLcvdfZB1&gOwhW%M1F4B692qH7rsyp6~pda8GJgmpJ{cBE7%8M9&>n0`kY{2UkTE
z9+<Wjz`YPKw^zyKnLzjVc2}-V(m)Z7let)TLh$YaR6zF)P5E$bWc8HMYO1cqu0`Xd
z5cOm=WWANnvJijCmG)*)I<M%v|3<6lCBu>b&wg@bj(Nl%$+^RicodGVuiSs166Y<L
z>l)OQ-+hH~@%^<tI=kQNV2r~rW(MRyf)k|xVv2|{&|U~3y1%>rVvLy8(zFs&8yUmX
zw#yuw_3*SX@D6#1$_tjNOVu!Nn}Q5`#%-Vldr5}VVFJu3H*cA-rF(_z#cV3&!v;(7
z3P#%86Mf{M3xD#{k4iqnq|!$2%>;mwvA~s9!m(`9Wy`X)RoRk-uWBs-ID|>WYm~YD
zwUk9aB{6)6b3XS@TJ%$6BQE*3WZo|r-&4VDs`koqZE2#wflEpDi5>|{_IXKboRt{f
z?sCf9#9B8Y80MsL;!Fk>nA3Z8xkt>!d8+L4xYb^r5N`RVX-6m1kYnkg=1E0v-WGFv
zcXqkKwx5nQ&GWj|Mb3KUl?_8}PkGwMLTHb4wwU418dsQCcuha0bn)pPG6+|;jXr`q
zn@aIKuh;!SBOeV)GaLIl@OmB#1VNAqArboICX>v+1Y{{e0bsY$+g{?R0e*uZA?%}v
z0xel=b(L(mTcP_nXx*ZU->YG@Nr!@#>}&!E2v<oLZTEQUNdDsSoD{jM)AF8|qgHtG
zF(hwtMnYAxHA9a(?EbLPuZeziu}48ellosl-@7coDxoj2JSqS!JJi3kT_N_cBwSE`
zaKjq2e7Sk}n5of^ln*3389({S=S!6DL`40{eYv>E6`zUccOI&Kg2$2$kQPMp{oE}H
zeXmHFV=`{DA@R6xk{NGwZI7?FqE0hAxj7AiQ+IxZGPl3~fWeW`npWI~7b{@;wMR}?
zeKPhed@%CZ=V6tzL$7ONCz<y2W!6x?J|ftXKmFo!lXqRuSo)3q1%G!=pTXB(60XLr
zU9Wq7|1SDkd!j1C&_Hv_=Q%w7^00gD*LzB-7w`CazI!6y>|#mhfdzE?Jt#|ePl1bu
zEZMEO9Xw##!>B_(p^|l>nekY7(juTJmJM4b2()+%^f3wvE{VhCN;TP@ipxr%?uE=W
z?hO1qNCDf)Xvue*!158G0)m6OEH>0_JHtpk5Vy<6Fz}R6c1JV%;Vw@hV<C-<eJsed
z{3+Jh2WwI7D90L36Zc$ejeWmSj?Y?&&jX7yCcwzj<Ecb8t`a8eDWzY(wUT3<ZTuK;
zRpgc%rNU}h^#hBs6%RI0R6qubzf?dJq<ESL(>zxz)ud5@33gJ13X+B+8F?@aN>JwZ
zf~8WRk3nnF1?EUI2@}*W;S^(!z@iqA!7T&&7}}&Hf57aF5=nSierGxBzjyG=h(hUB
zivn>L?^>}hQfQ?mhI_de@}UiCv~7P2z$gg+i}yKYigvFoH#qX|(YG%kMlByntI+Ut
zv<obmcJ++3Vq%QWi>Szl<-XZ{xJ#0nPe)&&Bt<isr07+`Dv2lG&pZVW5f0`vEmtv&
zna&h?TB`3*sje#y1X{ex#ri9Cy&$u-;8req-hJ%^SXv3!{R&C?{l~Anh|4sFD|Hm2
zbxT9$YV__`Dd$z`^Eb^^czM@QaXLx8kI{>*NUMETiZmXk(T|>Jt>fzCHfx2<mjQtm
zl7p|hHxL77++cofMrTWM^f(f_b>dzW6qtJnV;vC?`z}f-<1MqDZ5t<ob=poz^=~in
zg<94;a(O;NfVz?%$p%Ztpua)&5)aLsC6c09TQERR@ax<{@jx_j((YNGpJDtw3);%o
z>%?{B^EiQ+;;39U&&B6>;^lm7dX~|ZW#H0LXS{IK6y0ObtLSGOu~w6PX?Cc)&z8-&
zRxBxvnW^i@$%@Ee(X>Rr4U*EWbLbTC88wVNH02WPbCcC?`Z`PHsFa}sf|u-fL5k@-
zWUhEcOR3w&BIK+eK}@fTnd-)(sHZKlUs4TTK*nPzr>#iePz?)WkH<}ETQz_+Qa^2s
zCy;7eH{@;(4e<<1*lT5&DERrjaa6_3E>JH$WrnmjLGCgGA1<nwcp*geNSYGIVm;UJ
zvkGO?0UOThz#yf)?!6qPZClayG!BD4{k)TyFJddB@2;1XnS@XZpr4ab8eWC>VP$ID
zKU4^#BJv)1;KCUDaWdbx0L#Zc4ZCctu+O-}nGcyILDthW8*fRJ>GK~4ZPsUW4CCgX
zM>!UV&8hnh1a(-V>+o+=z=F`IL}d=FXn!pN%-_Epf{mp~4Rk7)0Dgj(G~MIl{yP8^
z`0nER$~s|t$1{Oo4k9Xql%I@XRZkM3rtB0-0fbAxt8+(u>hb#rLd5^^;rT!8J8hyG
zLjNg<B(n_v)3em6)Fgev<;*r#qMBM{HAXfED;**XH`<&17uy$fHEEs+6hzFpyi^zk
zC~znM*uVEagW}_cC9mDsIDA)&L4Y{acJNTfQrwxmBT7Gs)@@@Rp#B2|5nq7%KM1J(
z-XL4R3~HHolGW4!W9}#l+jkveW7K_|0`*L~cdx8b=5XFhebSx*rM$(IhyLIu;|ty!
zA!C0+VK4U1X@p$7z7%uEN6HBA;G70U``y5Bxzb<^p>$ekxBgJZJ9crnn*U5&d+S$d
zq#Da$<jvjCA>TK5;rYMPAN97m9(2=R?I^;?w4&fvnXi-jz6UHdclzeJ7;7<qdbUcW
zJ>vymZ!mu~**l`bn05Q`G!j+h|3+N#F}R+sW8InHQN`Lb4CN`r-?{!sZQ9a@i(2$`
z$jpx?MXtZ|?AH>d2J{)D%Azy3657A--c3>?RJMk}ZQQq_;7mWV35Y~0pE}4oK2Y#g
zJdpic5XrQTvRI?MezsR;Ygz>${_m{LYf#FP-Kza6IS9?J^n!#`gO7I#6NW3b*}a(e
zZPDPXn~!nCS2uPGWB6j^B{GC?_n0Bq=y9caj#-su-su6xMDU=lNx`C|n<~d72JI31
zs^)}|s%rdjA;-F%Jja<@gzbd`45%*iI1D&)gy4+}DdJ%zFT<T%Cg#Ogn7ae1Yq?7*
z+U5k`SmhWtbMnf*CEU629K;W=8CL5&6p5&l-)}N@r9ZCoe%9OJ;Pj*qbZ^A9$N1X#
zTQ455Nke}Lqw|blA2gPC(7E<kgSGboOCxOX>MVrlFSai=ZV)eUqGO&7vD@u#jZ+^!
zlO_5^ZHF(h!-SEeuay*wkelooVAY|d$H4EKlaWS>DN1U3KXMxV`0Q?2rRRHx?8wqt
zExaq55fSDnmQcb|DBmKQ_MuJS6NW6G6sP9vrWI>E9<3#&{2TSn)%p`V-<A2#*W2=e
zlzYBuK{@PK>%NpOG)wa7wyeu{WEuSD?!%%jUR+AT&3Cd_STD8%9>_;Cetf~P_LVWd
zFlfO$gD?5%^DAuieSEZHP<cJt!Z^#V@^)xNE7Fzg;j?a7MvG85r!eZ_IiHh){S9C1
z^w&gu<>a?Bkvz)@6z#W<Sj_hHdSdgH+8_DYFcfd#%ZIPdM;PXA@6Pbny?*L9T;U!E
z{eJ$s6F&-p?GhfeXjOp0kx2rkPz@oQu#n>s<;HhB4ux!3ls^OykaXSA&p@}p)vq9e
zg@uA|tvbqsG$U?-JQIadHjS+eF7Yt&TdU6Bo+YXv^8bo2R57T4&|tNZ#ijL}4K{(U
z-v(99fzIc)w6-Vf6l7v6bQw!qV}mFRMf+8R$f6-cx7z{@*o~E&BnxAaY!BYP)d)b*
zet~@_CqmO^7ha+ElpQ(+7fY7~;@=_vDsNRpWys_krG(Q%FzB?&OF+?zW*}07QSmMQ
z(C7)htf|Zi9zCJqjtL)vCvlUQi^AOo5cl&Mi<Mcc2XB5fxS1tWu3?%>O{genxdr8}
zhw2D6_{CbUVT02Bg8rH7_hic~(FKeQhh^~x9=Zxdkf8RR;$DTGNpeRno{*#aQ%Yqg
z15`eM&(BAP44y=n!80ZwmmVP*wzW#84x@o<?|89DnvfZa(`2|DJ<}_xv~}(x&$Lx7
z)0}m%^>Y;ODI~0T%oBz?fe{)Xa9$~aR;jE)ny6xWLfL4)^vnl=b!*ijsMfa=h@@C$
zM`Ma&rSMP2uvxwL`cIsb6q-1V5uI&pIAf5pT?Eb0VggAOehrtZ40EqbO+6<4DjT#P
z<DTYvV^TaY*HxEBBL<T=IpvM<A{M7jnMp}A)3}9#mZG=4>v#5Rb{<Kfb(uM~fR<rq
zx)ybYH+1ZcKGwBP5`Z6DgcZL#2?S~=)mm+eZ(ZC!G@5h(dv+oqjgox!zT8IB%Ozy`
z4RXB<Ak$%ucC!X`T%T4vfg{Cs$xm3B9<)Mh@$L)lld7)$k1RfhxA@xbyi0cJZ#R3@
z!rZ-o5Xsi1S~QPs(D|J%$hGGLTUZpZ%qJX&`dY-S7+7ICeuVHBNt+^B5#)Sepl7MJ
zNo-ssA$J@u^X?u~zpcGoUuF3Hq^_jHD_eSsprD^VJzL7hh=<xpZLjynvy}<9B&>5<
zpOpvW#mJanX-0UkZ(0<w^+r@o-g8vjuoYpXsBkaU(vD;b{S3eI5{Adp?##052$722
zj4MVwNg=iC96rRJC?P(3bzc4XwMVC`**sysQt=n2GqLwyvd>bKJUicH*$ehLG{*8{
zTF1Qq;aLAeni_hN0?>Y0yEF4#7p0@kb&4ta#1Iq+#6GGZQmYt58;B9cPNmP>V-f1g
zqZI<$-CRHrwl%!U!!Z4{17=Oq;WP_Q1YKG~Rv63npiEewK<mqk@7vm1)nl!dWXX7K
z+QiE><D_%MNawIW5%+zRba#zg-AQomy4&XBR((Wn<VV%hf3b9TGUsEIr*Aj%Fm}~;
z;M4c2cAw*qbv$rdkJo7fZjE!;LHrLtO?mkB?1^GCS^z$*0(mOv6L9bs*jB#tJ4{-3
z23{Oz>#f6)s~XKdqo=|k3ykBSmS@^gpxhu*={sGM!F}PRRM)%8kHvX8+=4?gjwo0g
zg73VP{$6E#jU$5Wns0yaO{=z!OA77=MAtrdgElE=h=)rSUNYG|a%~JLEm<9B9S#4F
zfJ0n5=yA$F+~9@{nGhg|Ec{=#AwR96Q2|RBIgQx=S?hPIoLT^sxhVDk-N2V3LPFA?
z7%IXOrLy;N%(Qo`*FwrQ|GRA{f1&;iGkh;e$EuJH!{vXn4ONFIm#IE=^{1Mw{}*_a
zIfC8v6qkY-5!na;j~sqr<?4{p-_MkbRW#Xf-wsaYPBhE&_XGfkhU0oBG#)lExZPL1
znjhc3e(3gHc$6pJ;Xc?aw&08vtegRzELMH3K_37PERM{er;xtCgE@&mbVK{Nujj`}
z>Q(f-8s{l9?09SZ^<(otb!JQI8Ksyu!tHc_q#04bBd7%%cU*c9xF>g~KnV!{D!y!+
z177cc-f2ZWraJ|yCe<oaYoV-MY)s+pV(WLA?nx@+5>~4VSVglciWb^0vnfQ!6uA#F
zNAr(}vcwZEM{T}*7_nm=ONcF&9Vb8U$DHtUFO$_)6&-ggRZh_`Jy}Ojc_x8d$Ui%^
zNM`S|gGEGoaX3}XMKE0!(&|f|-;To<DoBm3T!z#1EW5310`9PVdR#%U!0o{`F2rik
z(HumxD_?XVxXhtD-vXw@fhwz_-v*IO62!APrl7u+1x0i>Q|~bVZg6$&nU@hMKixx*
z)%twRCS-N8X$l@106aQqib_H{RlGT(0Jh<Z6ftVGHmFq7vi4^4)O(R<t=o!*5F8+l
zyWH`)?H6y?e#A&!_qn*AOV<e(#R2d43n%`bAM7IaZ!o_>+z{aeCdUIL!Lbbk_)2P%
zok|@RW5ZN-H9$kvoGz?^B$6kYpPou?0N@4#wjrJzo|sJL(N!6!@PhLhzzsHOt`-Ei
z!M6?7NqImo1Ze$g&!^QM9G=f;D)IiS^|Slil=;435y^Y8Xp`}*O`Wy0_F~!j`Ewub
zj0QKt60e1K_6#t_?`=x->o-M^svsPfeb)O1UA~`=<e$f2M!f#m4%y&a^IJ-+R>jzQ
zPO8)SIn(aw!_GeJNNhLvF`>v_Y3g&*m74ZGk=FVmhJY^_6sIv@mhHc`q31`eQL;5a
zfAJ+J8{;I=F$<lrALmKB)XY#evO4k@jShbLkS~eFIg<%~e8Bv0{y6~HGLx;ZqYsaI
z#SZ@b{L_aYP8X)Zzr*P#AH^3LOcDNxOzy{zNbXaxLE{70gg(;gN1!&}RiJVGNf7=e
z+f(93q9Fn!%``%7EG|ZTCh&|~5J`3taV|6hi(V($xZ^ln0N^orl{IG~Sjn^k)HrQ6
zx)^@CJ(I(oWxEmeNG_mq4<8l>en57`UYlA)`ur>;D>nddxYuG78O#zzB;ok@odBQ*
zYf&NT5tMC+9U4pn=mt0n?l`p<U}7n<iS~zoMUzF!&x<oEfg-R${yocVMKWkoG1wq(
zP{bUBDQ-?p25c2|>lRi%wZQs>eE+3NFG{8cD4tX#Lbsan%%g2dx<ZVY29krOG^G>o
z(9AxCl*077NYWLuQ*yL_wCJ{J3)jP^<9%?O&6Y_rJ8V+<aEDdPf1IWdJe;0|BnQv+
zctn$N4hsl+#@LFelTl<2+iMGAb0x5nmf@@42@IAO(PAb=0gt`_pofvOcwx>V2#E29
z27}591R|)A#^IX8iNb~;pzP6CqG)Iq8-@S4g(G7avxMIcJtA<Rh8}NH2JcI=YXmj;
zFrpPROhKi@vZ<hC=q2B2D}SrSOh*A|BUuAZRlF^&%(BO2SH%uCZdFebx@OC@NH|rl
zuYytuy^9rJI4B1@BFpB5nY$5ay!f0!Y6!kcxB-`HxDn|imyHZiOQ_(nA#>@`tbk3L
zGM#0^jHF*sEziUd#acjShhqYX*NbY?6C;Y`qqO=L-uvdgL5nZ(+Y~LI@mQ&evpm9X
zYfSVe;x8#EP-iTrC?Ke{SHd%Tlxrn?C=ks218MM<g1xytIz9y~L&$qmyMwb4tLP+m
z7A(H{x&4i9FeJt?OVTYki1Rd&#7{;(K2TXXydwC1Jy(UE^O+Dvhk^u_Y#GBfQo$HT
z$|l}P!+%iJNo^?4ROdu(@0ZH>F|Rhug>-EaxtoQIv&~HT`tiq6d0%GdH$gel2?IXQ
z^l$XafsN-M+0m|q&=t9DA-Sp-LJ{dChR08vFwLameG#N(d|`yn)cAl`sA+ft=V21A
zX95~-HEw?-TOc)rduAY3P*C2FDWW!F2aO*biF*q;^hX9A_uB`#1rus|-rp9sV-gCk
zA9sTl62HYH4m>bo#NVR&1B$?ka-v2n2#E){!8Gbbgt~DfH?+eDA$gas&wSj2lo%Td
z#K^csNCW7D!n9Dvr~Rk4(yXM<eV$2itz*up%TES=7s~t+XaC64izJ?%BoF6MiE&k|
zIC{qki)Vc|d-BJtmud+5N2aN;H{P?Q8ZexZ0vx&1K@2z;W7XuHmciruxVh<{KtqMS
zrjay3sf^$2KRM#Ki}G{!q`$7W&c+-P>0X?C<bx=?o^gC|v1}gW)6<csQ}r@uabu^S
z9UpPz(~WWqKj=0th&9N`CRx+-YJP1>Y8YmT0lL!x01l5sFanA7Oi20J*|H6t`>~~>
zI)*qjPNE(M;TJcC()Gbe&jU<Y>Sa&tA2B8fE}m@%&k^-I=39I#c32dm^Jz$`x$qbn
z`mJ`SEiSu4?`(KAx9?uP(FgLgvm5NZFZ#=Fq3$owD+we86&AGKQ#X5-mtP6p6&>VL
z<Qx;M2oz>+qTx@MwjKd7;sGTxlv}v1`kK&(ihw{GZMW(vGv?DT+yrqP$nGzBrO#bE
zr(I$$N3ipq!fqt~5PoVM`gTqhc$vLLfa~9{^z1bDZpi1-2>&p_eCNDGN&?}Vwn=Wj
zQ@d_VHhEy#(y{hkC#v_r?(uW3hj!v0rm!r>^}uz%^1tGitNcGXp=2JX$VJjK|E*lb
zQt%6+(2k>FL=>$wofRk+2c@?kvgxzjD@&^}IPON=NFoaD2v$?3fAQe<=LLwCDWR4o
zfLN&<*`l1s)hdgJ+vnr>vFkWR=-&0fKR13mhg#@RYprnzy^y;s3hn3v5$gT;RpiK|
zI|yS7U~wGly$L2Qrg!dW)EkOniF|s{;h}*{!TQoVL2YM(nT7V`NG;nsQdZ;$Y;b!*
zY0zgW)aeo#RfP-f{q-t#FD)~mRxMk|RBjZ~3gBL${&af(ik1GdIMxSaZ|<W0bZ*5;
zA5b^`cM56Qw}yo8a{ZtDIHikyZ*TmV=oK>51Ba2CI2{!!AYLLxlvqhN6Tx0ES+*{N
z-$iO<_`0EBBf@Q?Xdsf&R@o|=qexjViX{bU5zCi=wH5Pc!hj`;xel-x^IvpqBuXzs
zON=|v%C}Q`*cK_06=J-tjfXX5v8W|&fWWqi&)(BVk_N<Emh6gIo0%C;Q^K;WBn8kd
zO=RBMO1)N|9I|$NzqFI{I2~C1DrtJ8+WG&Xp2uKDbf)HdE^8qR7=~NR3ZHWYWWA0c
zJcbsgY8&lYXa1?=ETL7|cQAA@+JDTccG{+jm7j1!<4{<h5?)a>Rx%lM2QVa5*Gnb2
zD`DOm5{CEDq^+8=6`g9^PB}H%C7{>?z)c4D(^<96i6;Cl(Ctw9L6(-+G7Gbi3Zmgc
z2IHxVQst8E@OG>-jG9hA>N*rUcj*bf-%Z3XvTD45K@DnlwK{ltUf)BjRTR<heVvrk
zg@4&SIf$0nO~gj1skVSgdG=MHhv*(=6Vg7p$IXJ^`H-LmI(LiExNT>g-~<h~aI@)s
z4lhp&+}l+PM{VYN_VGB6(K80&7Skvg=<S>V@TW6ZK$c52L;V_G;2pyXorlF;WU>mA
zbNk`NigRKiVwx@T@O)7^gZF$X$o&R5B;C~t!T89JLE)(+wLmT``()wsgLMX6jjQ(&
zm${moUc7wwKlw;9T&<gbxrngRGf0^1zQgJhv=;Z6ZjtAn^csNvfU;w;4P7<NKItLV
z#SxtiY>5H_Aq8V6$ZDYvrxPDSu?4hfG2<xLbX<EM@E#OiU+~f~#lK`gdoqBISK^KU
zRxPhy(ujiYC8-`)ll8tSoOOM5T?9nSpzEGCcrTlRa(G~ZQsKGSE?}D#W=s#<I0G9F
zg0R<^lFa=O*@h56l;BR0j35j+4h<(#FqTCdAjuX820+6&WXurvZ8XdSK&EIXItT=+
zQ705aAW+TlQvg)9qRe>{XBkdR1+X~ei@@n9l(QD5vStu~b{yvFlg6YsSeJop1Piks
z#wvOyvuzesC6F;w@FKDd3J|e>2*P5YcP#KAGgB=m5VVeTcoe%00}lci6R>lvsik}(
zhbGXm36w)_S1nvkXy}^w#EO_o>F+kNLdllNNY2pQ;|g_qafiTU)))l3Bz6FpZ-->7
z6B*1Wz<L%5{gXNR671oV>$&>rky5)kl{H$l3I<h=^n?}7S>|vUny?uq#-##JhL^+V
z12bHz6mn*am<@SG>7^XOb7nzu<kUUGPF4NsTA~eQX)9>K7$AZob5NdO6`34Olp*Dv
z-j3Rqjl9wD#*WCl>u>iE;|W@TqH}8STf3nO2g=y*o_UADQPTYmnrY-D&+@l-T+o?9
zhCqy12)|t^7NewSl9nR8AH(?K#8g018)6Vusb&Y8$&~FU;w49aCJ&(s(k99$tNkJi
zX~a*jA_mDa;y*szoJq(e6Tl+h*Q{p3$YmneSOAg;_p4}K*>}jGACc7Yjt$i$+mt4n
z3RV|Hn2$TY*Sf`jH4c>y9Rg0ISgTg|kr3WyiW0J49WuPX+;N_+GIN9%RCWG#Op=Al
zG&uHP2&`Tu%Ti$^<p&^aNwlL7n`%v?lQ1Sx(8Lo-5bogtj|~C4p>32Np+nd_k5!V<
zhnqFkCU`B6Glt4aA(u?;<Up-`Cz0{mJVi%-S17-1cd9HAWm>Oplw;~wyakaAyv(Q6
zprY}mQ5sl>gdy-NqMCtOvxR{YD=k#7&7#@1*>go%Cp)o!-Vt$2#-9)uUJtgtx_kqi
zP+o~OV9FICvU1r#q-%(EY>C@d3$0I57@>eZH(c8OlZRH6&0nNd<UL}XVS_lPw)HAS
zPA1(vVZQ9ox$GYiXI6nD2CwmJRe9b#*=mOBJQZUw3~ZjUZvK5`E#tD3)c9n(iEhbO
z<<WRTZ>psRER^KecvJdWdn{#=$J>R%Aq6yRTpuE49F!qpA#UeInDmVx6R6qyrA&}N
zRTF(P@>Z<$u-)1)m>6_-@CjILQ7mzt?VOJAoe<h_{ljnruVMvv%TxL6sT~r8&CC;f
zwb!tj%hr|>C+|q5<}cH)u@y@fLLKFT1Eli)%v6(;?MXgdpYM3zTIc)D$;8@nhLuD?
z3@m+nLP2WyG^!TKB*$$pp(<D9*9R0%$G5ANTa@#!+Y<`PtN2)n>>~_7Ip^{6rbLnO
z5P^u26ut$_(1K+;g1`^taq$q28X*OPeH(JPO23UCI}(ZZ6C72B-3gTJLn3e-pW^V*
z`AB9!M@XQE=!ECLw-`SS;3{gIrsS+9s}Lz;fg?8ZWh<^e_cjju|3~@qe-8rw{{eQv
z0Qqt;1)i1>U|*amSI1-e=(nd0ls5hWb^&BN+k+q{?Kii;t{e(Pj9SK!5o>iw?Z<Ar
zj{|9{$$V>XoW7st?NT;u^tj?E@dPe5SPT<VKftbez_%Tq!g2FrLJ(e~{kP;Lyh})T
z&uL^_jD=t9J}dHXFS}`wZlxmN`^PbAPO+-Ag1<ir5BQ=Ipz*ygR-UPA`C;uv<h0Yo
zR`dCcat9gSwEU5j$UCGg&d~o=k@Pfr8^||rJ$&K&;}uTFYpT09pLRazmgK+s*?Xz^
z>d&>lx%nj<QZJa8X_wK=(V28zx>UN<l6^tFf+7q@e7Z35%utj_KpvbjjJn5IVd$vc
z@}Hqwq>ox=sG<l|l$p&!GIt-dOQ-?!mWDkmnvn0H!#t7sk7$;U9JU}eL|X<mYDFC^
zWCt4rir|rzOd2>@21``w#Lt#KTR!BH$0f3<o5x~vFw6QZ=Mu2AMds~ji;?fhFjAIo
z^7Ab)YB9x^FvIqjY>V6;brKaPh+sS9J00z5zD|1?O;nae)8<eZK|jV(8Zn$jRGFY~
zBaKaVt5IsXa2qO4_7UI9sWsxVD~<$08hk2_R8im_566mff?%4O3Y>lj)q}7CUq-@r
zMUc#@*G-Vj>S7Wns<vfudEEBwi=PMeF=mcOtxJl?Bg=AF476bj@@v26RiTq>`_H;D
z*O!0NS27VqwW<yEzeXeu2EK~~)>j^tL3rh+FH~z~=KnlBpvt<HFK5sp!FS%!x>rb|
z$1U)fvAX}&D7_<CooX669_Xo<C~Zn}wPx$kp99t*rfIw;fs7|_6fk_wE!l0R$57yq
z@AKhF4I0+HtR}ouy5-)jmPaiJBr1RYVAbK6F$5g|hqSLT7TnBRQ#fq3ibUfkrKm6g
z;E;~ZQaZ5xx(~t81`nD^2eANDnc#;}%46lu&$LgqLw0hCTlZ+aUlNkA6=%5o)Fvn~
z^H;7(?Gr1ZcV+=)Rn4pg>?Qpqh46RZEIwB*TFLi09w5E3MsH5k`L&}R#-<7FE9f7+
zSoN%zrN0Gs{j9M1^8;^UT~(##?&JW&@hJbB-*~gGz&(Z^z=-|6{3dk+RH^;2r_oBq
zYPn)N!qF*_2rM59;=-r`Ou3WBM0gQVlR+-_17ts;j~g*|r#z0LGVqgd9LE080!D}&
zpy)adC-1>m<<o)~E((M)06z(miygqpCsKN~kmrWX1J^xMno3UDiea%I_(?d4-a!8S
zNysk1G?*x&(6R^-7;<CkNg4r<D31swNMqgx0io!u2Z!+xqKKv6TKMAI#dpWwTD$*F
z1&Lg3#^Q1g;k#&Zfp{$WaSY{2V<<Z~7`2&0&NV9S-I0j|ckmp(Zn3bCyhUhvq+)j3
zObO#EhmnPVQq)#Bq%QExET*+eN|2mS_TIvnOVTvKIy@XgaiGalK3vgZj@7?E2}5zC
z{YSDYU+GKI>H`^QrI#AO!nX8iiwJ5!x#$w$nX_UbV{I>pZpXS!)q`Z)C^H<>mpn4@
zgbp#^axXpev!eQKUasFv*mX_IwOD*nkd2^>cowS<41PBGV{}pR^TL2%a@aeI0xgZh
z1^Zo@b3db#(6Nc5;EM*{JY5uV7s|!2EX}mQ0hFnHkkXK?3QYq?$_z6|nXeY77W6~|
z5hzUv7l_yNEev{#zYm2+v0Lz1Vo|K`RBB`*Y|<HL3QSli9H=;W+s5YV0$Qta?I#Fb
zwD3!g2dE6aKN3RG1}e$WYfFutjE70uTFTVxVk*CyE(K8crbFt5wy|(2l7OtllL#v2
zVAE1egCWRJy_C>_3H>jFVa4=%IIl9NvH+^D+<dzZQC<Gfx6zPwKZ;-6B5uCxqO~Eu
z*4dOB^5&*=o{>JYz{PibWlj6I?O*va&1DBtz0M<Je04`0kT2^VNtUaA+~*r;8{);p
z?0X9Y0T=E{k{z)LHHJYN(6e^c`2z|q6BKpk8n>>|d6miTQ1o01o#cH>d}R4)cBftA
zcW=GPAKD5KOFAM!NWg|Dm-E57uK+$@TF5ZTMv?jzl)NrG6zeys8FInf?nfB*yd9b2
zE;@)&F%~~2*t8I^BylQ^bBIiC7LYO1S;o6#**n8&zlaV?)Cp<^(rvxO6l1BqvM1tj
zg3&#Qz{bmb4KMEj(bMlBDLLf{YY_kNpFK0gK;of9KLiA*LZK+`Ww-z2J8E%h>jo2I
zm^3;CLsO{e!1JVgv?F+K!AvvanlZzF!r%XXtC*@hi${3e$@mf*A4`ZhSv6{4(oe=K
zj7*(f!YznW{ZC^FCjqgl^-sR+N0ax|h$|FBmnQ^V)X<c#iB!i61o_q*<pV9TxN*j4
ze_1q1y_5k90Gef_q6kO&yMw2pmY9PT=e#J|iovgCK)y`d15H-7C;+Qmq2$Xhw3)vE
z`EolTn!===L*g7<DKI}#bWN4~$rN7kpjWIXDe$WV>05|j%JluDp#LU$cmN6lMS(!z
z8_+ds$gd+bYe`UP|BV3!?0?`Zv4G7uTc+Zc%ITAfR;V+AqH^{uqAi5r+)_E8ls!NX
z*F!0mt;UV6LvF*ATI8b7xlF5?OCiOY#Sn$;R3Pn7mIwRj2<Muwx43rr4D)fEZm>^F
z;5F78j;nImsxlc*uQBdWql{kuD|z_g(*SGdTj<tPrFOR}ymck2x&-b~&J0Afca^rl
zNrL@BvVWW0Q_@90jAF!^b%q||5wCA`)i6A*e%@9`pgUY`De-h>NBzR*D6c!3l3ado
z8n!X^Y-=a$VV9;vcy4)^OYhZrSx3IlO`<sCuZyLv(z}lhd!PFsQg@bL_N|$7!cg#)
z*Odc-#ozK+KfN-cexND*fv6CWItg_QQA$%W1DgOn(G6mZ$pO6}Dt{5W;Aue?;ITYQ
z{+{YrX{HrB<#BVNKP3T}`Nba_5_wbTy0;dzvE!6EknEZS5qYnvREd>-F{(I$;$+v_
zkWNot1yiAm0*ejSl*R(n_~S>+_CzNui@;#5f-RNY8<#CkTb!}Xk`&&_njsnBK+NXS
z_f{|0FunD&iem~nn}XkdXL+vO^pBDPXOe6VLy#IV8WCL2ajz7vXrW{pn7zl5O@=i#
zS3pW`G>>C<P_$Wfg~g0s9`*93sv_@M6ACw003`7nE>z}UQ%84^SCVAG=4(6iTb%0i
z|3LQT2Ve@$@*^JMHFZ4<``r2nD>7dH`1GF@tsPe52f0D>o$N`Q%SLrgOX+i*T>z67
z+C7}mJ=c1ipJU$@n?U2z=lp_^Fs7zzx9Uw3x>|Ly^E;0a0x2D!WJaa`5RDpNLgH(e
z`M#6A&e<PhSHvKpS}l@=R@cMueq8d~3DnJFqI-9e&={}6S+kW_?z@noW-j6_>gFLl
zZE+B!cn7$7c+c7_PRd6bV)o8WGO{P(4d8BF9(=HLRQIU4_nssOYJhfc0K*n9UL?w~
zIbN6Db<~vXHCEJ(;R6G|!P<7sK%tGxWlO9_ewyxtTgV5xfAaj+LPz%!osndmKej_g
zpZ)lZX`}IA(?LtNbLsW3E$VGdmxT1q3Qv(FyP^+Yets=)&+U@Vyz!Md%1i8#__kYm
zDRGpJDf#fE#@F|uQTQyQBJn>`r^Hao1{kaH*_34B{0qwrsgdePjoEJR&GFKiro9YU
zklz@Zbk{Gne*XG{{SU!mU=ThEZY>RBw#3|oV*jZDTn{`S7~7y>D9HoFs3GLaXkCK_
znT7*|E;u*V=dW-ENFoHx2w4kp^{?2-d^E#(;w&4(G%0~>Lxd<DSOC@#gjKQu0u;+c
zH^G_MbRd>UWnpC;KID+BG;6db9g?jK*aR2}hH3#rzP>4n9gsX&^sHO7MWq-Mtz)q$
z7t<_sjG%YjZVhg!oPE;Z5h@mH!Badn9t$_gf>4G_prJ>#m1z51j>$zv8BP|0=`guW
z3q2W9%r7CMi`qt#8LFt}hf&gr1{Ja|sXT^2;jYZ3oZhF(S`;d2)w8%zQx!&o5$$wV
zfiOIux8tZVC1Sgj1L{AX-?B;KaU2As1t(B+urab>#@HperombEB0vXg_gCl92Evs8
z3vRuuRxZBq_7=YK@6BVGlqDAW`jPJTjk-_F0QhlIh%^rDHtmm2F2`B6r=bNOBw{>8
zXQS%U&@urP-AjQgOc}-~TeK*XJY|)T_&LSp&{D)ezoat783S)~F8$0}xg=}!K0RI7
zUI43H!L{l>zl~LK+4-;>B_&xjS5kI65zgc9*ccY)o{8a9m|Bq@F$AErq;RkjdKnEI
zVvv??_>oJ$H()L<iaE}{)Pj?RM6d25v__J1h<i~PfLo`<(>3J$Y}wcAa3LZWX4K>t
zwMglWN#ijjLcc>XzBnSD-pCF5r1u-Bo)rvW-3!3P@v}5&3t}SrHT!{&p`T(b;<!n7
z+S!s|dcH}Mkrdh)1{GGJn7QG?Yqgr@u`?XkUl_PxZ7Su}cV1yy?Ne#*k>t@gqg`1_
zzo_o&!m(8nS^P*?(rRPL=ay$ou?bV@GJ3)*)6l*8$(FU_1Fw?|kHp7gmy536cP{L8
z%AdG=3djcXc)Z?Vn)NbWdYpWQag8L+<JyL_eEj&$cjfD+%M@Sk*Hl6D>}nej<IDjJ
zaQ@4=uXoICg8D<BV^X@DtoQq0+8KI&C538P_2&8Ya_%_h8qu{=l49D&=D1_8{?x;2
zAFp-i8kP_i*1JoJkIdarpoBYFvDC-$f{x|6dZa(2;43=V7(`vZ(P}*YRU-NH;{{d%
zSsxE3gz<*JU0)LUUiqiHTT*}%iU;cBqBOZGJ@2KqQrOMKFG0PJlJJz2i6kFn4SGhv
z3XGAqoVLu6=L}hRxxbr5r2VnqHr*pwvXTom2_cbH9-dZw(ZZX%K3k#DT9t|lT`bQz
zg9o2r3B^$fGg^22L8E<-unaNTA}0m6HAK=oi)aQzoc%`c_eAd4O8i=~?<@RSpx(Sw
z!Ae$GDqr`1`5s?KsNQOg8#ZJ^|K+5`Vkx8n{zcTNR*jxE02iYG+Oj>fOtP_(z^GoG
z8OT8aw6k*_Bx>cVaj}^d!7G9HH~`STZzNRFPuRhA{ttAe`h5V}EN4F<yhOf3?r$+K
zMR#(pTDpR(X)N!#x07)>u)QxD*LRVqbNRFxv(kP%_r~|h&PS(?6P=;p4e|Vk+=LAU
z7SxYj@RzE$-^D*C?<&bmv7L;Nux5x`J`S3KQnu&U7zut|3N%j@;iPTfTIP`Ym0q3G
zzPABiqTo@eL@n*_sVL;PUJXyoa$-<`<3{PxZkP5S-YSKnmi9^?D)XEcDW2Q;I_q1M
z(Z`>~8IHZmkfQu{s5qrr{%&DW4}O)ZLKI&(Nv2phv<VBMIN1yhu6U=7E`TR;wXQ&{
zVUX!frd5O;QE@Fz78)VuryWJ6Cm)Rg4H4;&Vd#Te#<5KsY}q{US=@}I=oe)Ul>7r`
zO_1A%TA8zI2wPjXfGj?z8Q4a%@y27lwX)>Pwqb=U!}hGr(+ezQSZ@2^&f=%?8EPRa
zHVW1|dS&uYC@zBU!oyg1`5=>=C3zaB_GOl<MAKs`@O6vbj2Gd!8wpB~4tvY^M~>Ph
zsXI{iG8@OSFIj=!kjjz>f6o2V$NM)9j`A-qO83iaD0UoEi$`Gk@N%L3-KxS<NOe)a
zhqw|`>}?-hBu9mAn0cAIsig?EAdUu?8vy)^+(+$R$C}SdeYN3V>Yv*>8K9Tt$`0Q4
z!Fw9qJo(JiLzJs(DCVk4>bx&>2kZ&OZ15=WTHqxkFwR<?EJF{pk+<=LVYr(`v}Iz;
zuZA|_5BJ^8^YAT3#{ht~(0D``qdYM%sy*L5EN~lFU{6;&E`+id4Dn5pADVQvXs>&k
zb6AV2f{HNpG;xN(4Z^1Cv{zoU+N56i0($0ox=H!aPVWV*aP+oC11$fLCC%bI5dq(Z
zXLIrNCIzF3cH=kdNz2|Vl5_EYu8JnspcjXi(xXv8WiO19fnd{UwD;<h7al{W)CAp8
z%jb+cWHHd-*xt@<_>*$KUG#XfpVQ@(NB%z5%|{=06MxY?-`FZSGCpjJ6q=yL`|DqH
z{f!nzjGxS(T20t>h~cfN%-LiE^ubqsUtd#&w`H%NP2ItH_#L<W0}-3xBq#BCU$Nr&
z`K&KN)fFkgHO1t+?Std5--sk*Jf6Gr?9y{h9w_DsAvaJS3QP{L%$=}}pqHwQGb0a(
zvBNe)Z+j2W0Yl44ZW=fh&SRu(dkK*fw{s!>lT+E$VYdj;ZNoZ|%s~dLk_eBbygN6M
z21Kx$0zodozsMwnuf)oP`!(8%Bup@l&FIASw^j^V{r?VK`A2Jf3tjogzjzDK{<oMH
zgntWNk)=6JiV9;fh#NsFQV=*i$5){G(}2!oaGG)pUFi%Vi{eR~upjuElnSD?83^+|
zS0H89WO-7Ql2CYz#r<j<CK=(84y*c1FV_fry_b?OdOQrpxfmC%BFIqXE~8E46n$DJ
zn2EH>xi@u%X9%g|n&Gj=@e-J@Mc+!Z;=u&h`IFm+6=FE?$crK!(jd;DJQq%Rb~=?0
ziXP9H_tiiWm76yje%Mc;%*VlG*ndYgn7)FPkuxdq$dl{ZYm7~(AA|3m9Z7WulMEdY
zfv>VDB3DR86XGIHkX3;^x&>%!r~R=Yi8z76q#d=AQ^=UvKjU$rYkeq+FQgQFVF$Ap
zZ%|Q_D;6uo!y<VCJmr`PWWJZHK#iWTQGbt6$s5;xys1+`p;$)ARP{lCX0T@LX*K(v
zqs|OWw=vnfcw^Geax#Xv^`&kFRUs5~a4{b-GAH0g@b$@pBXQD^uG@?IPI~CZi~Vc5
zRisng5=urS!&XnrCBxtI1^qOL6}86F?cGs+VYyVjD+eN0u65KOU!F}F*7ro?eywpn
z`SNBlh@`YP+xesJ3hiefhi-bqXTLU9-uRH!tL*c-;0Ug+(_mU{_Ym{5PMU1HRPo>0
z9hh(#`IxhT!1L;oCtdR~L7ukp-xWZg5?aX>j6%HdXX2O0GnP+z`&mzFwGi?t1^0(p
zY9D6s(Tm7%?#q*fH$E80(wMpAzxO8*IPB#iSOXR{qM{Z*!#8Gs{xbi{KCXxPo<FR5
zbOZDGRZk^zICQqX?_%Q{CmY2|*tOP1HHz`Jn3-@-1e-PPidzu-C_3Dj%7_O+*sFZ&
zV`9A{eOKxagpG)<k$Pd#i-zq4*H(*-*Z;@3UW$`>jkEc?r=0;sV1%$&Kky#^G4Rf9
zKAhCdl5l|ivQU;M>Iv5Hmjq-82~I;Zyi8#A;rP2cYlc(LM$O%O#ROA<StraL>vJz?
zeoiH*xA?PYgGqG6yAqCQO7?`dA_A7D3)7b?tgCmUkRh0O7GFvg^7fS5#hH78?pJ*M
zqC-tJg4MorUWvsKu7k5f(#|+Qk&isEmB=Bm1eF7U3mn?3b)3cbK5fqsfPeAViby7c
zlwJDBBWGpx-<G|FX1?LWm_{}dNYQa*?^VS6;{Q0-|7w+k|NMP{_eWyU!c4CItM<^i
z#TE|ul>z+ewz6R<%sUe)w85rTq&=pF+sr<p$xF+}HCt8wK><}~?5e;Riu^MGH60U<
zdn0?dQGKzw0AQ)<T^>}T@sw-aQ4;s3Rh?h$X}14Th;}jMgyZh(g3L2kQpiK;rF1tE
z5<k5OLSvbc?P##%ZB1!-2S_xwMw3`Bo3)YLgPL>8Dr*N<Af0jen%iydVN}-dDa7Na
zV9Z#$%!tQa*QcNlW}LWH@49_$IN^F{FX@d%4(Hof{tw39!Y%4>>;4{wnjwdwyJ6@Q
zDPb5or9?`)LrDb_h8jw0q+>w3OIoE{Nf8m1mQoQB5JcYZ;5p|x=RCjXy54_c-}_#B
zt@YU`Uh8fR{78##sx|CtduiO{ElB#|cl*)wRFv6y%ni2F?=$ZM@0`E33pn1Ysmhpm
z%yzW@vy|4ur03<!^YgPe%OpY5l-hPa8=mg=`r~f~f$ys2XKH?V7{cy8sdc);gHb7r
zz2_pLM_-%G6&?|_mnXo9J}7ME(x+@WbcmcY!4!qVZ*DrpNIukANPsU`zP~4LUG~&-
z>%(WRNHq(2m+;l~d7e}WBf3>j<lLr<w}zJI8n%RgYdKYxL69%Q*a@*7YQFDLlJxXJ
zvW|ej8>`PuI*Xg@_kE(RN;Ix#A0jE3u@0Ms7y&PYvdU(~M#h6w0k@<t*T}3glJ+Zb
zIbpq?TY;JR7GQJjEBJ@iXY@l^dbHO9SLgh>(2fr9sOtJA{eEYRtG@f$%X0&GRDry`
zw`ha5Mgy37TyDpw$*I^+-v?Vh<$dp^T}~Lh(|85IDx-58^}CGy#qPa3R0LjD9glbX
zSvvl;b)K)^Pjr0g*rD&*UwCg5l7GCz^y1_NYhCwMw*YW25o6c49!L(u4bqfNZofXN
z&;7UhmrPcYB&IBVBnFvVo27<wH8Wtt`4)NsBcgc;0WQLIZ2Mgjeab20GD;RruXw7)
zYG0Eay$@7XC4AufT0@_xj#8WVi<G)3dETuV7PCeT0)wD0c-P^FOT<<%1kJEor?Tu^
zI(_OtYF_+ErP1%;&jOlC44Tfr97WpXr^~9}ZCzv)^FFT$LAjHu{L~nyqa{!kH^2D{
zFdW(`sOGF0Z>&7JEdG6!_6)AaTwYdtvRz#z9%F`+5WhQQCj}b?u*!hzup^K~X{sqr
z?)Y2(Df@4aKE}GP*F$9nC;O8bi@)7Qv~N9653#R%koNA@x92vlIIcg(YZ(P#A(01l
z4~>*wSqmEN3`v|{<n8}<sR1%O(D-oi1IO3A{0pm$&)eglb^H(ffACU@#pYbfaiscc
z(4#Cr3v8G@iI5{$ooy#dGIE(W3~1FgOolUKuq6x*6s)M^D8=8i;B%nRg=|F<Q_WID
z&4}qU*EEQw@mU!UY11IoYj9T=<sp<wArR#7#WXrNF+M$H5*FCQxI`u}Q(8i3xoF}!
zjx`A$sDU09`^!W##eCyyh7=rsPYR>p<2ou&miy>0Guehbkrs%fgrVv1cqu{M5j~VN
zUHq^v-e0J$RSIUcbm<|ZiI-LGhL;<Z2wxu=wJ1uZ=t}0*mjnLgDkRvVpzGXiOO*H2
z3Sq)PIe>5In6aWyMjmWl!d1w?XwHp6d?`k@3?FAqV|doHj%asyj8WrGhcml*lleu>
zWzhx)EOm1<dK%mapmqJ^;>Ml#4sgn$?;LmKiIJt8lic2D^tIL57=OV$UN-qdmTovQ
z(r$WU&SOS#IKf((k;f=fcvg|(r=W)Ol)f}PDF0dWCQ5T^az?q?m+i`$1|^H>3|~+&
z|D{*Dm$FQ+8Z{S*KlkvL-k!X@vBr41SuR$HjG<a;mIahu!}L+}%;Y@~%d12X<`)wW
zb`Mvo)<?nC1IX+@t86Jj1d+mK1=1d5=D`V+wF}eJlTHkNi2z<o@oh`0TPar0JLvIU
zovs%`HKwaO>}Lx?-Cyae^7(daDHxfpDR7i=_&B5fyWz@0Vj^i5Yx*&mUCIU_A8rP!
zj}`>~RD;sbS6lsv<2S|dM3NNt$L6mknVwhog3Q-<QOZi$qFF+IPn{Qq1=I{a2uHT&
zeiwTdrmwUNzuZuDR+W$$d1Zm)sAclZ-LdRcVN&vX$i&lrzf+bEUz}n)UVh0BB(?cC
zFt<VIzG>06!CEVYK|W6i><xVCW;-awApNDj2adw$?T@>O{-EN}<mKP@Tc78h-I}Pp
z%uRY!{gO6yZyaH}JZs0)+xbRvR9>0ecu|cSsnZa5eSC$XYChieP3^s(C(5xH^b7gd
zQvA24;>*Q{tYrl_t{Rd#MS*xpK#=`!(QK>pE@09ooN#RH;M%l<Joi<jMzON$CgD%d
zhABq&)4hLRmPpzdC8PPl-A*AR6G+nh%5yM0eP(zgwLMhE@9~e^rxu?RK3GYI&dKDB
z?6zizb`O0u{V{d2Tc6?3a;Y8^sGrZau1TBio3Ysq>EEk1lF_G-fa#1Nd_C9cQA5j>
zPKkQm(c*0vT#V`)hLK@bN8x2!&uYKK+f#qt?i}uHu45+k`AnIkHc*;hA9Ll(k?8xk
zuS(xFU19p7Z`c`ug@JE{1^T34{MK9BhS+cZ^S9pdD%E(C#g>Nb|0qR0|F?U&#~xfA
z{ReNVODO`feTugI!2eu3YDnIKO&9K*DfveQ=rNzl0&4WHDUSvx6dSr*EMA!{(xd=f
zgApv|eg1O^7IM0#@aZWM{zBsj#iijy*mN<y(DJ4{cjenUNR{1yqKU|SlZVnnu7>yv
z&_)M)1RroOC*_32@)iS}$gopkov2pHj}QOyk_(oHJXrN_QnWX|9m%9+WRTOUb#Ke!
zdA8cd<-0K+Rkk}kgzqJ&zK0`dic0(PzU@|o)xOBOdJ)rAXK~RkfAmdfX(9X9xuJy^
z>d@~v`Y!qPzB&2{GOjq$ftWwiV&{dgC6%04HfU~r`+9@tSbt?i#GuZyr0ns*Y0a%~
z`HmXLt72GACt;H?&IhO8Kfg!82@s#u2o*P`cuseFOddk_N$n!OTSX_UMuj*mt1|_Z
zEuqP*W(#A8HR)C`U>=VmG^^1XS3Im8;S?&}SXTIm{sU%JmG(K4^Ihh<F*LfUMxB%t
z2maV6ItI0yj+(|)y8LNaM6w3qMUS})`WGP`XCk&F{ZgvAPN3f))SZjBxMJh6k9g=x
ztXrtdOg54r>}@{T;X4ykZt>*qzdh!ODtn{2$h+>Fg>tb0gEGBA+goM0=mjA@IJU{e
z`blcAP${37DMqw@@LYJOy1Ca{M<@e_@v4-o85OS6V<6epdGSZF+AxXTX3hdBltbt8
z`oyfdV9LTgt7*p6#`n=%Dt%qH=136$v@zYQg?b;5<E}lxG^N9fyWm86acN6!0u|=j
z?AR52Uz_bHPX~~GezA~0?9dDmG+6B&mGjw6g6rFQ4$#{t`1i5g>bf<=@fjL0Z2j0^
zKlxrhK0bg4TuBaz{<x6Rf%ri6kJri<@qurPYTSS01B?&6CaHrRDBxro7x96bF#4Ls
zURmuZ3OKiu8xVt-qo#+ye(Ml#c!+Wn47;uB=>1#{b>n5?Jk`LGQmfjm$GI^nCji=z
zUlN{mJYL4I)`F$=K}`oA!8ZWF71r#<uvn&ht-?kIhEM^;e!)uyuH>r)Wq&dejRIdz
zcIx|X>c7sQgNI3~ujP{}bsYh{1j{a5056&G77B_7TtW5d0%Y#nD}%NU9xo(X5{oKd
zlaX+mbUJ%m;IX7{Uetf{#g4Ot`KU1Heo_m?KoFNXw?cx$z&{@HPZQw?pD~aZk4)B8
zALK)1VZV&gvP%EF8e566&U=Btj1lvtFzEegA(qTcJItzJ5P8h|TC<)(TUfYoVWgyO
zx7t96B$_m9DU`w)MNzuPEb3F}!~y9=57(<e3VXokhsX;~q!t?`iYc&{b;CGD={HX8
zp$;yx+kv8HxCjrp5{*N{Ju{P>vNvgnZ^GgdLb)hNQ3FvS+_X>Po!L(5wWRDOqS;KA
zXs6mT8R2U&6or7pJ_u?uJN4M5AHr|!ucacVmFPp~NYBWlgJMb5IMd-%AK%m&4}nF}
z_UrJ|n-8m#>7<b@y9i!^_B?7%<bAq!RY(D?7kSLXmT0@~a<?a{Ar_V%!MDyY6`-c6
zh|K5>MIS1HqmjAaJUT;&tPv^1F8OZYu{8)x%i-BgJwu}4%nd0akL(eLG&d}hAav|q
zX5d{u)C!h@@_p8;?KQ!C8CeMEBj}uv?D$6k5Fb!AD~ySp{K31YtgraPGnpF0s}PV%
zo41>p8A!H=BJ3@5gYz(`NR8p*dNz1;{6GmG%?h`%FzuQZ6Ao^YoIfyPQoXp5G_-4B
zn(db5LYf%b919oc@ig3un1~5#Hs(yEG2k_g%j&?EBd%?s9*-8}GZb^`Cqg80^`;Jr
zU4@wng|DWKCf6FfRLS0O(wYL##oPyhVTqf$+x;|6ro|PWmvm6ih(OYGOO#=h04I`s
zo(s}zbZ5PCJNpv6Sv<YL%e4B{VF&*u=p`2`Ng;E=+t(Fjmx%sxFP{|P=I|6MzjAr(
zU2G&89+3DYU~rPW`TW=kGHF?J{aUIxD<!Sy^fdBjL5I!9!#U0-Wql0<x9v(cY2$l6
zalefBi?u3@9aE`auaBDEc(#D$-<qzyj_6%nMtRhz#eTijs{iq;9sTpIS6}ZA<<K7m
zj9aZF#+mNMOa6{4l4Z)$aD6`(mnc+~{2cf3sh8B!p#>5FMUI8vx*mb=F=ycDl}&yx
za4DsiXn?!{6JPe2(?OJ{y6RfZ{LFI7{7P0mYXsQHr;(cdPP@yQWuotW+o~1BwVG?`
zNqNny_e;EouM0P(R7JUrftVYnyaHMw&r*GLnXUDrGm`_mY6Y(|+ZZfkC{v#_q7@RZ
z%j@Q5)0BZZ<OyZQ=;FUMh&y&DdiRejDAng(jrlwTbTU0OqIp92d@Y9Ngv;tMu!ysB
zb3o2II4Qch_kVwgqb^R;|Nf2+`#HwM;C1f#`XYP}fQ4;;!)g&#1}ctC$dq>w<cz4m
zgCa)_n5aA|G@ION4CMoF!k5N*(&B>AWb~B)IT_Hoc`kX<3^MW<Kh?`43)aoxz0KkI
zVKjJ$K%iTcqhY@8qJZwuS<j;8eG?SBE3DC4d!w`Q_b+dV0VFK$7GaJnxn=!(t2(_D
zTV>N*>W{K4e!F_eOD;!0dGnf#ORo+npu3{_f-bZXP+TO;v>x0J{5)B&DRW?ZmwTs~
z<&$lf?_BWirzB5(i<$*S$V1=I(?66-@?UsLV{;C)w?Z7(bF(fNP<FH&Y|Ylxoe%!8
zK6U?G@chxxX1ij*`>s>5%iowDoGkB1JiJ|S{^|Y?h5;>>hiCq8^FxR?1aWtvJajCN
zC?5{7@muIf_2Bz`mZKRP!?m>P)tI>b$LUw5V-dBo(Gad^%n~MJO3)c2-@I8wE}1I7
z`grz@$7%%EQiv5;a$la8U*!+PnwzCwZ2(^`zK*@xNCSqlCwTBZ(2@RWBP0|Z>O^|a
zvwb~M*DFXMNuie6Cc~#)$ocX4Fq9?Ne_@0zFL?XiQ?G}EgJsCOE4r4rLQ3HqY#>>n
z_cR%dj6z}Z%QjszFh531b8l~Zg7|Dvo+Yk!EbgR5#g*HY)p4i|RB`tC-OY58ZK0iN
zt&f%7Va;E+cgoxU2v@7QQ+e+q2ROWa8b`^-e41X8kbh~OwZH?b@a5u*w|9UKF`#q*
zd++JS9bJ*Vi{8^-R=rN<8v)_);)9FcQv*HbMoio-%`Qk^B0t6D-Mv1T>JpeHi_O-A
zJEA{^K}_GpseS;8N1U(}3^V{uKS1}Kz@6XzqeQU=fG<7oxAge=utDG$f>T6K2uUh-
zFsVWQ9HOrH&9-T*&ki0<n;6D(5yN{no9JgeiqaLik^ZVTdWArw8S8rp6wp1mO&&;B
zWc=3dh_I!uaQJ)p+aJv}lf#ki=a*V*gF9hI%9(9>u#^W?0}Y6vG4A7~DD6!PC7I(!
z?<M~X&9-G|$9n%<*w}aEhO6f?W}TR<BuTissu4s`{;2~3^##b2Us@$_r(e5{ULaXW
zi6nj#h)EWzrxSmi?%^qv{q*})qn&A-=$&go55R2&_GNXxORwgSmL4TFRb&i1Jyb8u
z9g&}o8ZH8MO#FxV4*M13(n}PD=P0gm<Ajt92Q_s)W3bL|!n?P42Otc?-6V3xL>C`o
z!2N|-y5KFR7(ce4D28$2G{LY|n1l;jI|DXAAUTr+$h)DGh5fR^NX3uMYNR`~R#w8O
zaN4hkD00v^-?^P74KoWa`nw4cRp8)dAf2ZrWDucgYndXTvjpHHc}Q=5PZE$TjzQ2x
z(TSK6#2cfi(OXFlK<+sq?0byUE;WCtLl&6W4eZ+wVFGiP(tcT?2?*-8;rq;>?AA{p
zVHy6{oNfw{T2kjSlPN-N_+RGF;ky}7%%JWR>6)#qj{<RpvE!D39)J?ztG}Y<a!JJU
z`-=xr?R}BJOX55nDSihyNpDNTc*BycoU(F{Cj+<_ximyVTo94D1If%H0=G~j$u8o7
z+OLA#toB04sVI=yty3=Q)qtJhIXvml-T?iJkzT8f7&y8bqR`;^dImScSz_s~lvr_I
z70OYOPnLx&*sHkexG$qhRgY11#lEs$Ps@W6l+@nL(zmw`%IG$qR-Yjb<MQL7=c268
z(I%S~1F7i}MQt8C(PbxQ>ldAbC+d$7o7s&t<7P&|@>UVk6XVTRiqBuG0l;_@ralrC
zol4V;(b-brYh-Dg)RG2!`QIs?l-FBnaJDK&+a1IxE|+hMe5epG4Hby9C$6%5raRY|
zO<zMctuN5)HR-t#YwmYr;^8LCl)(y_N$8WwhsdS47cFn}pO94tanL>P6&7jmPuR(W
zycg}(vZ&+s@^L*Ywq$P~ZWvmrMxZTe2<K&+O6RL{O+84TwOgdpPZ@E8aUilGpx+0k
z+z;ir2L%JnL%i=SqALFSY?(zp4e{C9WfDH+InEkHc94Cbb(37sb?;u`irT8GT`xwH
z#ph3ea`CdgQLnDGXKA5^Q6CRFJfCNH)!myQvez8B^Fpig8}4hoy${(kj~vddRxip@
zNkN^6<Zl5Tp=hC?@4}SRS#$UW59A|~3DRY1dBcf^D|(n;esMWcxvF2_D}7w}Kq-Bb
zWv{qVL$i~CDE&+u&;%k?=u^GQKG8O$l24QDExP=lcB}tkU7i0r)vm|&M4XEYU6iXn
z!oO`0n!*7zodm$TYIxdB*`oYML=#|Lr3q@@C>oY7(m~UWQQp^0D^<0J-~IBvt*mUK
zK*c76Rk3;IDf0_!;h#GGmLR2JFTF3D-{AFvJg30h_RRY&5rKw~?+BJhf~~o<@;T(Y
zX(_+w+nc%cw|Dz9#AISaxLWJFTW+nMXj;Cl)$bDhxzDbAt;nV=fj7{+(z4NTC|t~2
zYrZkLUPAf8ZWZLgZC7l1Ulh=Z(@PK|7oO^O&Kl)*dGDTi_jOyD_D*G9cKK8nA#!xt
zR!n~`;*?vpO*tg+bCpmHS0B*n{cY*_%kz{L55>Xl+jY)mmWVW<Ty=FU>62q==)qR(
z*ns_q-=Tl#Dq0!BdVaaX!r@SPF0?aq2v-D|_%N3~l?5i5lGRYBFe-ujd$<T!G@=N@
z87Y|+4fmIy=V#PeU5S?*WFjZZ$i);r5T**zMJOL`t|k@EYSYIloDA5f=*$JVq#97g
z+NBwLHM?NV|Gc$-VrdlXinYE8T~D*av#u^6$aomz-%js;u&zAu5p#UGYUTQ5L74b#
znRy1zWwWpZW2z$*@q%bvNi2wGs~E6bRZx&ppmd*d(5Hr9$3=HMAwP2I719POU&G3)
zZ)<Lsmf4+Sw<~Mr7Lv&Kx><JAnijlvsyg>8E9+i<d@AxJgRW?|@j~q7E>sk4cm|H&
zC0WK9_x^p`-WN$~b5Bp}`Bu%LnB&;Qb6LH_2-xC{>%JCw`(SrEOeM;5`a4r9A4KU@
zRv6a4|N6r2r%0U}xUUb9M#4)Wtn!D4QCP$_5-imTziQiX3pc$IiD2bi^uK<V>g|6$
zC?(gWUr_LOgSTkRwSaLBP9;oGs{fmSG`3aIrqNjs;B$8oF~2|SsH+XIFp9|&qO$kx
z9WP*v?uHZ$9G?7_@+_{-Xk23lAjk_oWqD9Kt3*S&a!X@0C%;2H-_hcY59f}T?_w9f
zn}QkI?w4Ih{=ShXlS|}1MUbqXuSMA1ZGJ<FU0y|^sm7AoHZhxb)_Bug#rveGR;aRC
zTcq&1opzI_Ev-`XTcdmO%=n0T=dC#ca*G5>lr}$hrXzrTZ8`-k(FIedYSnqteK4D2
zv*U)9ufL|94x82srm=2*LYYH_O6#9@FMOi?;n7Rm<CP;BwO`6HiIRs4@%@QMOFN8*
zzguBLAUpJnSMp2zr-20lOLtPBkbcJNOt`bd^=!iJq(|R=a5`zw^g!q0b)mbTZUUEA
zs(|7!of8o0ZT}pGQGv_6e2xlyA!WCX9f?avmOT+Lb$Irq5kezD<6K@x{lx=gT{<C0
znsqvjl<tifgDy_ERWCW>t}Z1Jc7-m@V?bEJnHV%2$IvQIW0KqrjA_7bH9RO+`kmCY
zyxUv4CqfeCo8W>S=0QjmsGRsyJP%2<*$&Yr)7#YYrO{+bU8PoBFyS@a<&G0C)X|bl
zO-}B2_J`??XnK*zWRAlHMSkfTw?ykb1-?pf+EL*T<!R|y4DWMUUDMiqg&<}A3<07s
z)0IX@QV@RxqMbH{X-Rsbupe@tE9x(d(M_gcGD4CP1iG+WRiKsiiecgu?!Mr{9MKzS
zkmzI--fk7#xI|A+!^6Yfi{w))rpKUSE&a^T(?g}TBRcz&_%4}G@DO;UT^9CuOciI0
z1|R6(K$WVu_D}va&?ywIEZ3xoG@<egdJ5Vu*RGSzj30E&L3|Kk71o#*xUoV(@Hcn`
zN(KcLj~SC{^vvX+9F!HoOpRptCJXf{%C(;9Xry^5NJ>3X)Ok?(8OwXET=7}uqjq77
zCTm=c(HluSJnKpic+h@Udl*((zqJ;;4+er)>z+a`?z3#wz2J~nRdz?C*SofRnW%Yh
zkoq}3#sV-#&{703LrYZ;51~7~WwnEUA-M2bH%-F&tb>TR6?wU+Wkh1kWb+CcOt!}#
z5GZN8yJP2CZj%dQYJA-F-}BMWAGYW&^^+-v&D{7tmDElA)%`Qw|53wze)a=+DOAJ%
zx_t_P^bIWwo{FgXD1%3?Iz$aS2(+9kDu*-_>!yH3!0O?RC1WuH&elOdANOcn29`Sn
zC?i2;A)%)5l}4u+1C{$^1~@twV;t76t3S&V#d_%?eM9ffdPNU)>CLgMn|Z!GkkA>!
z*Kqri-%ym7b9$HRKDE----=fg&*0Vihc^eh?otx++gkdo^~bVjxEQnt=#8X_c?*!4
zk{OIMT(Y@s;S|0#Q*I^!TiKP_j4cv5-7&6g0n|i&v7()mV4rtPgyfvRJLUH}2h(UR
zs=L}vH(ozwyd?U(LuYfYNxi@Jxsv+Y$NwGCy(lAj`Qq&KFBK6u3x0qKIyitjW(jN|
z0`q!6n%^m$#a9C#(Y2V5CS;)N<<g0AnVg6LUWyeA*9t9&pViA80)ZxPuEYxzWv-};
zv>dM_@_6~LBv8G<tS0flDB?~c{{@ucNTuG<MH}>9;!70e2z5za4mLKTllvRdttg=r
z7@l{=n({Drr!7SB3=z7%n5TkgA^V-K@~!X|-|_00EY0y#Awru5f6XjqyZd!(CC6Xx
zKoG~9y=ihgl;vcF@PTwQ;wew1!#GbeTv(_eRyatglxupW|LGgeldZxh0<yvtXXEE^
zP~~(*hj1(=ZqyRfIBm^YTSGQGQOkL_kVkGvkb{u8l-WCR(Q>LP4#Jr<G<_}GRn73>
z(q_K+1-aV#4{0|5KO@W+42S}-LE-5SgE_H$T+Cyfu{6d`O#GH>tlf`z$(Fv|0MY(R
z#*mz|`h^jmxW<#FN6kz2QhQ(5<7T_F+c1Q+b<iE)w6nG7T_6ZVa|3E(<Cu2y_kKo=
zS$rAETTv}S15NYB1i^dSx~#6LjrwV~zMw#2n=HR)%n<I{v4o~zhj4`JlOlo{PN?yx
z*=zQBKj*kY4LSL}u%TXa@I43+lI<631wyipM<2xI)xsoPf1U5gu`4g6+6Xn?x5bE-
zj0a!WQr4o#bSBHVOym2988{1GW;Rcd5`gr5g79LvfR@t?aWI^$I6qX4-B#`Ai-KA^
zV?;_hL1%Fz<1878S#|trFnw&J;kT`Kk8kd_GxBwDZPKs2`~Fh!>g3n{jMg>iB&*^z
z%^GZz2Hi#aW-WpfOk-^<XCp9wn(#Y_P7HnUyHmO7&&d~w-zvZBn1f;wo^70e#%Er}
z{+0+!kQz4Gznl+dSPKL54TGVZNQi)6!0uCrbI~@oI0NGVRw4%?`b;$#Iy!>=zyUh)
zgN1Hxorm-;m;r~UA_6U^#g5dE9rCY)t<g^RLHN(5)h^UT9Z@GPEr)zw<)w?3Q`bp2
zsS%O%#~vMKot}%9({`@MX4S_`6|$3@g&t8CFGVye!I_Vjp_8y(*xLW`Ld8>da?H@~
zrWEG!*3;lWkl{yJCd!ebYa>+5`5IqMq|t0HRvXR{YX;Lwt(kqCfA-M$HnjW%HL9C5
z?a9Z^G#Q<XtoqDD`i;}#v!VQ=J-lNdl}pm!#{#wZMPoO_Bb8oYbtEE$#%<s~GKURH
z|7py<!1n4I?qGPH%*!sKZ-+t|lnLQ~jk!jCDiL%ZPOhYWCNV^9Kl1R#+~r@;V2o~F
z8*;D)snHw3y(kl~W8S0k%X8v7Nf3_cOfZQmZj$<^S)q`Vhx(}_*&{F=BRH>IT}+QJ
z*6W}!yFJo+<1L@P5dTw_Gh<EeO02#ul0f9|OOgG07P@s1OO~ox^u$!lFrBGf=xfjP
zZX1SVZ;#k{wx2q(BdmPgKZSb@#bop4M};Om6t;sZx?=oHybwW{!*T)=K?E!7>Qq@@
z?T)aQEG2|(qBAzUF3@@Sm*P=agp;I^vd*}tS-Qq_FWDjI{{{5{#4Y*Bg1;S89?Abh
z&eMzsV7D3}7beatH`ywr@XZTSskT{?C1V-lR-*@`O>WxU93{rN?bD?bv8@o}EmU*4
z$y0Mn+xH_)YZGPEXHi8OKzVf))_SUXK8Sm^j;Iq2&=nkJ8a-ad8IH|uEVTHUy-3u*
z%s0^yVmLbfH*Y~m&SB8@&yFd4$t7_3%{ORo1UjZ<yaCv)%$oj1s8X@{a~eBY#YK7b
zn<AqKqS7&=y7ze4?b#-VNU!k<P*qoV5vpXpLr50l7a!HjZ*25jG4S(*pjLt1bEW;A
zchB_CkBlCM{^%{4sk&_FfA81P66t#{&5N=Ag>ifG;qTM^?`O{-Q0?K#k#L9rK=C1c
zy$Y3xH|D#cH$psr9TA|sS8(SS-Ts)yau=3O<nynnLUPssosk%tC<IRcpHs%$SfPMT
z$M{Rv%GHDzN5h>GKLj%^tBdzyZHYPRF^q{w65WwxB6`m?|7Llb_X#R;o=;Q3x(crT
zO+<eD_TpU_+Zfxszg#n&txMUm2`Q&1%pBq>-sN20=jq`q=wHP{eY}uLj6eG}+-?ca
zgsVCtmjH1~YuiH+92A5o8p%V(s%D6;;EzPxo&v^}EMe{=n)O0gu?{qLn#0iZ`fY=n
z7i3lbjdItj>|2ISN9(#t$bGnB)j#NKn?{>O><3`R5kx?FwQut`7fEW7$-m7DJJCW>
zhiM{JwTGHe7<94-Am=rnhLI@da^s;sA`<Kqlcwd>=gB*a{ARzk^+8b>FUj&KgQwp#
zpBQPy5}p$P6IkX+QBUv06}IpF^!9A|gWq%w8Vnem+1Q5HV;37n8Ve2bNBQot<rA{^
zjHeE?Z2ap;WHU#v>)YWv$sa{|Wtv}9IoO!gol7lq8URa-5*V@0_Q>V)8U93BNF+a-
ziwe5(^DWdWZ*ZPO45bURd-|Xm;eB45{NArXtaZVM^E~p-qWurwBUEb_W!p5G`eEzx
zU0$PBYjS`=%iv|;h<AI`wy#rR@?_LA9QaQ*EfTp=jvGN55jO%vfP_lqFK|>ig}A&X
zQ+4aZ$(@L2?4#ehNhR(hD8q|Szt)rAKDb*<f9v=6E)mtY+LMBu^OJ}zj<cULs!4~3
zVU7}SkLF@NJ(zU+Ld;~uzJ;AL2qUKN#k)No(RD1MA8MGUh<8|=MhyQtyo@}cm-HYd
zvIakDK^9z^4BsRFUv3Yec>(B{av@uO3AZkRsSzf^q64rD9g_&3dN6<TMibSN6WqE8
zPA#pbp8w96SYei%`uyHu9~TEHNQsX}Jj_F5mCGNaDB?t$s2<OLxOdGo*U7&UqA4nF
z60dE*V=4YUTRPk1Qp+)vwx>-~1ho!l9R`tY=v>g)gU!KYzC~yW==ZowJ;@^37;5cd
zh~((<ikW18lF-fG<VamU>ag#$0++t0#QcsApfZLaJNi=%t3iCEX}JVJ(}K9JH3V@4
zo7r7y{tAk9VZuPR>qXM~KD#jpY9TUO3x3)hc?*9Z&ooOT{|rI`5}H{q%*6-52T3=N
zeC1{RBYSqYml_f*;&f7MAYMo%eV!7_?gJrm-YdB#T}b$lZZt=Zz+L`H#JB;GqdEf7
zZ-An?Mt(iW1r$s3SvK0_HKmnWfi!eL+HHzvf;(EVl7$4`l?;?uV`-UQd1yiR;<JEu
zVbgh(n*eeeS|3hkj#)N!Nr_GGI4F^P)z6a+?|6kVVmOEV|2W5AaBMEl@g^&Mz!|}7
z(L-|OWgM469Gh+c?{FHOK5&jV<r>ZSV?COiMI)e>EgvY*9BK+kEu5i7L>KXOz%GB|
zBEF74Bm9$53P>$gZ|fWYtoXliY<x%bYgX_ao13;aHx=wUBqPFr1)7jtK(cJIq>Gtc
zt?>YNF=<;*VLUUA{nX@?+e7V5z!^blrt&_sOdo0)9%=VVk-&4N%&aM&GMj;Bte(Ee
z!m#tQ`}?*synX*-(sD}B<+OhL2)&u{aDkwgnrObs`_t<iN^rdy>e6$LU+;qV$_huv
z?;5cJd3x0`{TLR#$K;1!J`EkQohi?p94%kYxwrR=ui%j$0m9)S@wT}gq+7mZ2~D`|
zj&uJqKB;F$YdXvle(FyWMqH%4j@B!nVftv0_X>`T^(yfwj5uq9I49(XBaBJTCe2sl
zeMcbnv~?OF4I&+ZinY``KKsduH%l;tl7E7bBY<7LV*QEp+7A~H<^cl%KgvV{%FwQ`
zmIZQ27n;iQtQ=v^x%nb?!z|;1W3#YApsMidom-w?k)WOsMxfH8C<@b;7~w;*?pA0>
zKuE}Y5044R;ixBqKZ+FIE-#LbBVuh<<_pu0{P>QJ-)rgoa-X=(T=u%SLh<%wr3=8K
zxyKu4>Mq2xNtRRBoht9s;K_4pTR+C)o!#_8ZAYMCI{R>^Y1FPtE%#i0FZr1(ocy2o
zG=culo!`97$+`||nbMyCjeqN!dXw4T(#KQQ^+8B^+z^0ItCob(D`SzYNQ9_=uT>XK
z^mAJPRu)BV;xR(Po}igX61?ZQKZ3}qMzM=F{Z1AJ&hawiKY#@q;JwgDTm9T`9~MIr
zo*5&6b3E{l@YOUUShL^s;M@FyXBmIm-s-e$C58`L$utKm@Ibf^=S42g2zA|k3nIAA
zOC+?Auz|&(x4uUoz!1;?Xe<BReE4OUvqCgvd(KLLU*7V~h<d4?i~Lp0^*3r1w95EN
z>-@TJK;X(B(={{AgF8!>cW2u_bA^l3Z}Sx9-(4xZr;@tk*88Gkw`qnWW!t3TW3YDH
zIo16v=Xb{Dc_tsEwJXMBSOBR7@@a}E>Vjj#2-h>1RzC<i`p8Q42iX&0|M2Lue!+{A
z;iPYPj?I7j>K>_CkT2ywWF+eZI5t2v6i@wOGeok8_^+={4I&LTG_<)6Y={KZ;cjG1
z!wwyC<zVWE^-Mg<j8Ma4HHt-@s5S&Qxhi2VU8!f3OffgvR8$|^T{kkN@e%%WE$xm+
z&yD$o5xO2>9(_-CH3>Z9i|8gcBEt+_W7V*_4@6Vc%@!lz*Ls|2bxk=R9#0b6Q>>B(
z!=9%Hc|_a!B%7nuN%q>NR8-ay$ny!bD#JEF(e2J*`<r0%gYR+q%t$V){XrQP)5Kg8
zzPEDII@%njT!ofc0b2fe)GSyqFJ;ZZNF#M}_j__iCL!Wu&!|O5<C7V`UIGu~7#<VQ
zBC82zfsbgmL}E*bUI`JWLS-gbE*5A{DX?Phau$ApE(j$6-$xo2b;Sw&I!-d61F7=k
z`gsO*Uk79d=9cV*iE#8@uE~TGy%^Sj?M0wbvqE$YmY=OrfrX?i<7roZcDbuW95Bm`
zq~#w5(W?9$Nk^a17J^+p)RmkkAE^l9$k;ax$O_rkcUR!lpc334n#g#EW&`p(UE2KQ
zR{W$5R8k{MMb2a|9F)rbB%r-LlAQ853Le)z!8SNKRrJ`A<ei?5D$mauxuqd!Z$~<j
zI5@KLFJ;=Ib@W=TQ8!_0`Ha{aGAgFHTa-;qH~=vfKJ;am=Rfyj9UzY!^!NBHHmZRa
z$RXs>Cqwmk+2fyiWV)QL-rkG-xB)V+RtdYvBisI}Gmd_Ekw=y(ZM77z0`kZ+PKAC@
zFEaK8sQbiIozOoNip^W&MG9$pdDi|FGgWelrdRI9n)cQ?$Y_>8=&Ii3IJegBf_esH
zFX&^e*NOP!k)f|Osw~{grN4|T5_9pH*~i>_#-YUw%+H<(atSy28Mch(G$FZ%6zxKe
zefX}i`~HEShjEP8AM?irY0i{g(Wep%Ols4t6;f1D{1NDu)tuY>+EA(V+e#CdLa^3)
z<NL-)hK%asy~CGkXS0X#Drc=f-X$-*I%m1)V1*h5e6wQ{2xICNe?pGL@5cv61SXte
zSGKZfj8`W3i|9O-!XXT8<jj9AAyN#$kj)7|_VD12!a6K3MN<#ZEk|+LWpc-y+d8ep
zB1%2tNq-x^orvKc+?>F$#hDH#%5P-y@~>MKSx24^Gw~!+fe8n}o_xU6)?ZNT=R|1$
z$6s@;U%f=lxqP5lMIb8W68WzZ_|COt{)~8&l`sd8C0ATBV|r0fw$I_ZKyJXaXCWY!
zx4+4E8&D`KpaTn+=ig#j5G<lyXy0_C%5^~$r+7&MaF^Q`CMx{YPWRfb&<Vz^R#rXk
zS<)@WoDXbQXC_)xKrIq*JGEVhiYTbBr7#KE3x>`rD1ZKmnUCOr957K4tW-@*0~Q3$
z)6&FNO=UM&Ybq>)2YuZ?-u$V@9e+WVF13M>Z#f2O>$}F<__ofQzJZXyE{?xPov&a`
zd=7iS)TSU-kEqvGw_j|#fL<Cj2n)>ajSsTj8JB_((M1UB-P@H)5=N9MUljyoj{w0R
z<vmF5M!f7H$LJKV%3GkZGa;Xj7Mi&76uUB|Qy?ESWl-0AV4^;T$-$YBj+o6#-A*Qd
zV@X?M_Lj>OP59PQol-8^`7`wPj7`m}L-U)r5JY-%YlpHiU6`do!TU$&Us^v^i}sAY
zH^0#sE)SHB9Iv?h_(7Nb?5Dr3ZQHF}T64Res9<{I*6YxB`A4&%o7W?ZPK>e(@NVeV
zuYieaNc?oS`R&cqzi#LY6IIPU`nf$~lYRLw89{r5v~IHBe*c)%{-g|`Y4>Y(*_Yr~
zeJ))}9{E}CUI#w<;La1UyOL(Fa$HkZr(*cA>1D_1w+TAc-L?dK)!$icpRQkbC&Pip
z%pvF8n#4NG1q5Z&0G}8Hp#e%q@NQ@=804zt$D-pqDwV(aB~O3!9Lag8{_rK1<CZPN
zEtU0D;3T8=S7C+^CFL0v-5yEPIFi1TO_QaYjLz-hHaOQ{>Z2TS0jXj~$)gax#Hj$$
zENI2VwwpB@HpM-%6NWcYiA5LD-}f`2YefwRzt)JMoZ?xZcO^H8Oi^@RG&ii(N#I;`
z;0PH9=wnQ1b*7ypi|+6wNwmh*S5qNbA%rd@4dl3*IBhW=zH%=Vv7HMKBw0<3JDMTR
zvJD&{OMt#EDa2$LFrAi}qZ=unHDc&gnO0y>5~KBQ)NC+SnB9`MQ%?<TW9piI&Q)S%
z@JrA9CNY>zJ_0X$xTZ(ICUH?0ZfJ`ic1SX?9tK)rR2jwe3l}aw1WauU2O@@$n2S7e
z<qVAkgig~gD8tOei43iaq(Yde$2~j&OjKV4`PsOy#`!?6MfQ%CNR}Yp@E-`1N13Z%
zJ(}!M)+@SWeM9p~poxYdHi(s7Pvc7V)SGK$yu3fticS9$uAu?U)qDRnSH=H(u0DDd
zwoDuigh$n*4+45Ihy<YL!FFWdzL4U~X*5^2snkGyJ>(g_+j;<4Oy}A3f{^W|Drv%B
zpyr6FGFi$SY8}nOefk%2@{_88Qscgl%3jaBL`*zpDsPO*`Bnit56Kq=TERDs%8V(-
zvm-ed+wh?XFQhIig!8rRU1|R@;{Xl}{rd>G(-6guR!2NDzYAlUkj>ZJUv9;N#S#yx
z#7?encQ6{4m9}LETgpa>JJ;I0e(Mt-V9QtXj`zqrOPlAz$(5Wo|7mGj%j8%0kH%Lz
z*oSiI!|n!ud0TMj{Oiz%)1&^^H{5UA{<;5SXLJR9oPop3$vb6hU;kWwMT@2D3x^Uh
z0CSb7l2_*ug{iC=5%zdSjT@M&%TaWX)wCkmwD{6MG$*_(7`}9Q9)8Q9@*;Jqa1Xqk
z+*Tx3GV8ILc$tBR>hfwkWHsr}@VuiGkq)jWMMofZO?G*la7^gJRAY?dWzz#o67eOV
z0(79T=1BbEQ3cmS%m%novwcb{`mQurXR`2{MQV+Sw2Ku1hsVQq9qyTaA$NDIJd6c2
z<Ll`p!~#()caGx7E-&H(LZDAWG!>bPij1u*NHTA4fb??jD)KxnEXA8@TDG^V{$Wm?
z^V+G=zkyz@?flxvttVsLyHj71$+*M6;=$E}KRi|wJx++D0qIol?>-w>4EN>^1tB+D
zUBJm8y|c*`v9`_1dNtc;U{@Q1wHMyq9W7{Ao355?$XlIi&*LS$Pa19Bh!*dnmwOn#
z!jY;7&B@6&5sPFdF>Va5`)_zuN3@}vLo8Bsf0#!m0Bv-ze0Qo-y4_EWyQUv7r^-mI
zB#oXgX!S7{2CW0aa@}}<YMGxyQ-vD&tAHu(d)dv?E&k5U70CC(TI7f?g+J%+i7o*t
zlSg?`^6XrR-a?Ja9~|F!wSH--rhno4Moe!hOq~K><^&VjJ3otC)c=6e`-GyqdAuyb
z_W}hPBlw!8`iSSgAHqlJBm51Y^+(zbUa!}*pLy=Spxt~D{}{eiYX3O&|DLOW?x3uP
z<#YM{J<B*?WH%$o52bQNL*ndU_B!VS720n8d!%jsGC_t8E<E)+i&cA9j<E?7cYl3;
zTK8gWxAiJ5(^gti{IC592^G%_I@HMDlnE2k`MU<OUY7kCTVO0XV#yD`4O6;@ql)z&
zeX}8RnM+Y+fkeO=b9IlUGwFu+cpsffYRVy*go#t@1)q%+2&pikvL<hZTErGoM5V;C
z4Dvx4#vT36jS*?gjW9DAU3G51@*Zxulz>+CGAP|LeTmOcz{JN<wRBiRj3FhO($kI<
zU*?o5MOU-b7t%H?ob8gr?T7)wqw+%=CDDn#{XCR;Q(=Y|DU&sUe%xa}CLla&P|V#U
z1=h#8fa(KQuiQ_Gy<9IqNRqbLgW#rm*p(=72Vn=Z1ol%0ak>V-s6{t$kwJpAY>Bd~
zFu@VGN$ND#T)jlt^Iej~iva0{@paMfrjRve7siYbWD=4o5=%5=-q9Z~kslU?*B#zQ
zg6Uw%k+gVd7Dd@*R$~z629ZW<kp`>f(?}^MT5jh|0#JRVh+%Arxp@<IbC)@c;eNJW
zLH??s`R^^EFfSwARc=HHg_lAkT(d9^^<=9!m<DrGx2SKdT<h}a)Y~jBT3K>W9dgHn
zU|ca{1uvR6zeLnWH;h=IJdEE>Zzg;0fWS;Ak21e|CciP93`tpOT+tm3lSjj3@TQtd
zbFj|S`1F}#b4~8)%4qQQ|6F#Fz)*hlcPO8A{$trC!@EKLx$HU(PyzTGyc<Nzgh3sU
zC>o2A4jmjNR)EuSEQ6eave2cm^i>W6o=emONEFC>s5B&P+0@g^<Wc%CpoZ5{BSkMS
zI}liQk%bH;UI*|JgA0km!ly7!|JLE`D7`zWzvS)V3)F7AN565$Y|HXO`2)jf;Tftb
z$9!mq%L=RI(x;k4_2|^qmA&Quc;54S)mGB3V;S@^Hvv_6VC0D!>!7lt--KD1;ng7j
zW<l>)b^O>=--Q;BMP<Pe=s;)FxABzF=>Tw}{NBUXv<b4w#n6EMm%LZ&Zsy4zK0hb<
zdA_6c{NAm8{g5ZAVRdM{8|3=@L3h^~=1REnJ|hXbP2{46cMIb8DV*v%U-v^mSY3*M
zX>B?P7;||nqs~M(0kib&O~)9lgX1zkJJw?*Rxr*fK_rFwcsZUkI>eEQUTium{JgvT
zsj4)`us(q`7w=lK2E0O#Vi}8DOEr+I;Dabn1~|H4%L%N(L@p~+>CCS1FsvB~Ae!Rv
zqN&mg%QzB;=y!9OuK8ITG2Sg(0@q!v-2}1&Z?|pag)6|O^B<g45a0lbV)JieAX!WJ
z!VR)jl6)IEa<S}|Iv;SEUhcf_<yDscF?EdgVklQ@o%<tonsX<KtJ@kC!<ihLNq|k^
zC!J}%@>IPVDOPyEyuJ@^)6+0wJy5OLfA~YR(fm0oR_wy*xM*6W59a>Bo!nd*yXIpb
z5rXUQ#5)~3IWqTp2*0cWg!j{;23R|T#iWHQb+t2o*}Y%SFKj7ENC49o_3u|0UKS}m
zzV<$eoRMyN6!14vG$P`UBm6a4jsnR@`5C?TM`%mB0>+}OE45r?I`3~m<(sMlO9u8<
zpyNlsnjrk@v>!f1YYWx{`LlgAg%Dp=8d~Oezeaf}#`?~eXP)ALXFm-c@5r|py2d|f
z(e<nYYIy$=-tiIzFqDrz;+Nf{Pe5Ye7$CgY1|e#~s*YC{Tb!IfPA5x$Tf@H8*Hc)0
z^?^X#({kk(KzJ8d+`KoQeCb2Z+tmH5Cz*Cf8^YCp%-CzaAL|2JxW?(0Utj*|?&;n~
z#<?<vN82~eDvWKe1`~Y(%t8I#>i;a?nII(ZwJ-1d@xah+<ePXH=pDA>?Q43kmq&fn
zkSx&2gCp&RPk&B7-<wbtI#_jibh<uP5EYaW;b^@62qatZ`z{Y;&p1j>{+BL@ah_U<
zZpBF}+=1u;`Xw>d5<2!om-O3g615ZT0h>7vso|)6)fMHC$lQ%&;71W_sWa&xqp9u;
z_p!%?lOiSiLH{5bVxsFK@&tJLv|=R*UkvwCnbSU&YTh%;Y6GcO9;PYX=Z91R`{^jK
zpVnjIuUHuibVFFAQl}Db=&v&N$q&{)`JP~HHp%whQaj^AgIHACN-2XG=UdTDPBmC8
z>lcW2rK}^ErY!=9{^{zGEfJ}BgbCn@M_&7+ZXiodKMf(hX0=NgCUq+dXu1>(1oDnZ
z%U`2wQ5=xI8pCZa_AY2l{`-h)i*k-=psv2det<8!5hI@1uF<FP<3ge++ZtynPkrM0
zE{bY_CY87=kwSMKeX;Du{UCxM)m4VOf%2WEJmX{(t(}})B0m?S1)U4~+fs>!FWAI_
zH~a4MAZxMh-#>hEb;?l+4N<i62ZgX;4?<;RlS(^f&U~>3DT#H(e>&<^fEgP8pNlQj
z)cT<AUo#Z%78iMJHq8}_Uu@$Hc!(dD|L?_C?Y&XUzb&@rusjQuG>fi&d`qcuffJE1
zw)|SQSAg&bvIg_Q3z?VP!lKZLG2*bR;z`xCCSN042;dg~&>6DD5oUrZw28gEwfTEY
z2AfNIopy|(G1;%bJA%DVb{EyK4o>7(a$&U!)EZ3}lR4bUYI1)9Y_EB-S<P-UWzOok
z3W_ZTmx7{4K7L5Py)i9Swz=7T@AA&4x>Nr8$@Y-_%o<<(3~gUqt>p)1=m#lZlZ?CG
z=hTyVN8=>e{tWwxYi>k(>^cdV_$u>X{0sG;RHaHmdVu;m7iOQRM)C;q`mjKiLT+;@
zg31)Fi7v!A0l0D}%VFllTmhsyEczH139*yb1|dqzi{gOQwU<<K5V4vd)zL_$&$F>f
z9sAoPfE3h3B(#>S9>7aM>WUW(3<O5Pq0M|utbZ5QsK_FGm3f6Lca?@v$=`)_e2WQK
zSTPEvF2D>e&8BYrwc$yHi!4P1%~kZ|;c2kANCq!_eEQ#JsE}rci$_ICCmRM%fVJJO
zK<He#tE*6l1q6fg^bTs+-6Bc#%KG$k77#%)19*f`V?)nH35uJgPVOL48lz-|z4hRZ
zh?GmK8y$2(Has?c<D)t*XG75Zh$a;pPUr>)J!96KOtywvaAh$e7RzovK+sK%Py#cw
zt}EEDcdVGnP-I5PJrYiD{>OHO`UT?_D=p<p^K?%y#pT8NZXz2OKVUhn*D0XX5^Z<^
zM6bSgCsq1e4{@rG>O-D;+2*Te8K*Rkz9!CvvP$%Iu|{Mx+cv!_yOb&OO8HYl(`$&E
zWT}_XF9X?ohF$0=(EmVNu9@v!4M7Nf7~nXi#7^R&Ew@oyHET=P8+VVszxPvbGaFR<
zf6q{0vAqxs5-xu|UcC}rkLkl+|GLLxOZ}pUm^J7teujShMO+if)3z38VA}I{v8`go
zk&u=UeIyV+HZVwIUzz=L^hJ2{MW_7H31!z_-zmrYm*X;5E%$~eX7#^~1$v)ZW{H%b
zO=Z5<b~(p0EqC)i$KLt_RGHiVA*i4WAjf^6t;=%6Xig9Xm=2ylx4~(CnmGH`nf8Zm
zM)mxIgc3BB<L4h!B%vu!*sbk+Qm##g;u=>0(#V2)h?M6LC)gus!U!+flp6IYUj%q}
z2&AKf$Oge4iikRrUCqq0u%#Bob`N=4gdiCASK#cBZpe8xK6TZAK_Gi*4oqV3Ev3dj
zMJmVjO>q=lCbDW*1;}vK@b002bXsCYTgRrXF8BBwzj>I11j!VV8xsB$Y6zflqI7iN
zn}wJG*5%^@g}LvKZ;h>T{5q<j@GV!b`!%78PKGP3m?TBEYsi3MBIeI9)Uu<1Hz*~Q
z`pT$w@8}!SZZ))R=04snE~IM=zWgRp&!RUq!)=6LvR&H4zi~W&X|U90Uo<1`-TM2x
zv6meLv@$t)1wQU$X<VEPvXbLVF9ZW%v7PUS$PXf8Z{7tK+g&#S@kuJIDDqZ?B?>Z!
zFE9(t)7V5YEciv<UHFlI6iFbt?^aMxl<Z`4S(G?p&#m67tBCH^y;0;h3*+tXMBK^3
z>-TIjgkc}|L_UHUwfcW1UCz}iVoIZ+Hb_RNW*-zI#44Z`l1Yl?OC^$to(4VL<o03R
zXunxT%9AI?Ws(^9UU$W)K(u63O^PG<R7feZQYyl~&&mHi4c{LE!pyTJ0J&9(mw7Lc
zTb6)a!!k|sMZ$>;T4vp+JEwBS%LU^8MMO*pItPi$gOq`p9r52Yo9yR*&1|`mZ~^-y
z{LH4ylF(^IG2_LE#`Tvd=93Y;81X8LTp1TM0_?qbi$R-iv&ZW^)ik{>4WYuBvaDna
zx^1%!lM+kz+hLO2x)B#M`}Ai&M9)fObn&T7&9t%W0)3u$Aj4yWn}XK9Ij!yp1@TR?
zd{4$(_LzGm92UPW?=AI!zKTE03<=O@)N^HMS@aXLe~lA5dO!ZIX=SoRTi@u_9OL#|
zX<pVAQJGgyZ0byg><pE{X-(RLtMadeT7Z^%)Q292&ozEut3M?OA=v$ddpOzD`GlFk
zmjiUsWW}ixe)xm#6p9Oi_R2Egy=@abF&qcSyky6pznNB?<M-Z2oyjSm_%BQlEg{`W
zuBX3v@!mEaZos(p7O-aB-Yks4Vw;RS7}71dqmK#tbXiE70dJeQiZl`;U+u68h`b)W
zRC1H4obK52@0kX81s4z_D%Mgu*Ope3(o9ymlko~}tR<k}rWuRNtvg?{i*=2)zU`Ss
zC={h2kj0X@wUP7RF6hH8ya__jos^TodXtHyR71x+T245=V1UU4OvY~xlul+A@#tiW
zxP)z$WfUb3sb=gk&l;<bVofV$t^tc}Y4mwtWhL{gg$cg84SFPZ{K584UH73igj@`I
zsY<WO!jFl()pltY@V4#jiorq2-S~u$Z}hqGlY++3pQ~ELYw6x!+c&;Cq9u2mcfNLh
zMJKCEq3v9%41OQ0>pqQYS-JY0;luk0AvV!Qw<yrjwY{G6KRabC=`=o)eN;yy8odj_
z^@c=D>Yu4)4E+}UZ^Aidh+w>FyGbKFWfTjMT!6vNRk9$#-au8QZ91|r^8QDONUrXY
ze}T4Sr{y9|D)nd^tMgO|)m(qRvE<c=jTAN9jGy2z6Fr<KZS4;PdH~^a?|hoRq(#=J
zOUuO4Py9dk-ha((!GUk9(WC70XaTOjCJ2R%ncS8;q;0c2l7@?xYHXiyKco~5(=DfL
zKjEtC6?aO{6XSQACT35zVx*p}ed`vq8lJJNNX|0ov}qY;{smkm0g)FFBPNs_2>I)?
z6=n#ZNswgNwhN}{9^Tmg_`p7KT|Di0P2E%Fn`KGeL)G2R_OoA}BdU+i7RLIo{MPF+
zF!kttxzBxz=uIpw!H~OZ*1Tg#fVIQvL%uWuq$FBK2zM%~qfG3U9PZYL%YzK(KN{xo
z&YCA~V~_zUPpv__JkYSa^$~x)Z6HC1?mmu_y%=R8LfUh;l*TMjp^%5pHIBhB6neLp
z6U>%nFqam~RZK=4#btwVT8_)AC=;?^gEKrE9(WPNMTc*eeuE%~-v^;6p=iB9`4+Lm
zb+~(S1nJ@Mkjnmd3L*??D2am3likmp0R~X^0k@$pSOmpyzwnE_mxYVC&JX=}@0BLi
zS(+Y4NJVk;bCF_UQ5TgLm8tN@u#&N24StanL;XerX0aZZv4&;%Eqk<q#DIl>L#byb
zorv3N`rpz?{ArG{3Fl=o!w_%dv=^2U8=%a^?>TJ4GCLU^ko_ZfQ}#2R05TGW_qN@4
zXH52s?`Q{r6`2t!EwP=&q6<x!7U{>C{kL21L9sre+#r6E{z;HYFL-`rn4M(>`k5^T
z_dpFz%+fRU`0l||wj0E7VZS*1%oZ%^8Tiu!eQk?%day+*2GKPGO%{Rm<RheRkIv-p
z&l1Ag`o;RENF+Xv(ZLV{EE(B@R606zK?q@_FTYfa+O<k{TFYxSEZ3CPe57q$E!72r
zt|@&-k<r*N84R76E8Y(_GEnHr872!S33D|1!!=8Gf2kBI)@yVY%Kq>_6Pt>_JpV^x
zGZ^t#$AFG@{Pzydpp@1Vd9j1b66l)8{BsBAhC%-^&mTftTom6m0y+kx{YN&v<^rR9
zBz~S(;CJw+D6#%Yp78?dB;gO+ep6W-cmF@~-YYE1HQm}RpvXaTMq)vcGlC!#xrmZ;
z&LAKX1Qd~+a|RJ9l0+p-rpP&p3JORPNh(=Hf&Eo6SNEK~{<YV&Pxi^*^Xj8M>REix
z`@Z8D;~wZbp}l$hj1+Bfs=;RLbBi~CYVoRkDNk)h&*4+^XY-~9k5Q_{E8E<__-{))
zM)z%AMEpJ-Bb;ZoE=}Z>TMl~Qgf(<S(EgM#uVFh*lv|bZ&iRk+59MUpPD^cKd!MfK
z!poN0)C?DqcceEHbKmpoBGbQSO{BNzfv8h>ZzScAD}GgT#?E;av`JxgRqJ!boZQ4r
zs(vMM%swUSDTk2}OooZYo{91*-`}3=x>CZpI%|M)UW>~(VNp*pBg4i39Rm-+#}VZ9
zOb(scq}L0Je3~6&KMsh?CPk9qAWU>~vt4{+ZU1Tl!=o)`VTYE&^(2{7Ni~AklB|G^
zLCx(z0`DJQxtF2&fL2>dM{hL4z{vGWMuue3Mp_v#-qWXJ71nb~U62rWl0wSO9I>px
z|7o71?%?kON6>e0#1#yo#~rVd=Tey6Xa~%5C%0{Zv=Su{Brobw1%C);UoR#<I<X1B
zEP0`jtHRNnHShCy*h$<A7oJC!|J=}oUfiZ2Zj(LT&Kx#Ui^T>GI#tCrvbYHLLIYG{
z)94-sdHVDU3So4QfMQx=%m(|}$<bQdt`Up?mvd0M2zSlG7^>Vm>p%c5jX;qPuogq*
zR+r-McU|Q7_OQ8oo7DE0bB}xV(J26v-AjdmOHj{YkxQSeqe3|U(l<qI*dpl<XB21g
zc;P5-cF<v((9q)HSV+B0!_!@1y!Zr>c9{ZE`hDH8e-|gtn$gatO)A_~Jpk&2m{bOM
zb+vAeF-2S#CjyDh7m2HL^1P1t)22iGKcnR8G-HX$77>5x7|ZgoTHbyN+hGGvJxGD%
zS~jVsq`J?oKLH<7-%6rQZNE12{n2-D0hCwS^L!gX7_}+ZaO^&+N8|^O@cyW^K`-sv
zzx^22g>N&huwn6|o12FjtjEN*5^u_g;C&XuKbl-GQaHXv2fO206SH>l6Ywg_p2dU9
z!W=%{dioJ!JD$>aZM8VCo>sT`THM{~iU`obXa_lbz>wK*zcs<}<R#rWZmn@THYuq#
zu0`beP0^fQp%hL+Ar*`%U*rXLSs0D`3KlVx0_@2tlJ;N)r&TOHAV5f4RF@U3Q69=U
z#~nqVZ!4Ds%VZc;isEQgym9qp{sxP;7f6xA4#&8q1Y?UkY7A=4O{%1f`3=*u@)<ro
zl#G}Xz6um47Snowuvu~r5?nOd=^H>HV<Q_R8Gz;yoEa@_aFEoF7fvYjvp^DO)fftm
zSX3Y*G_fU-%{^OB$CMgY@GK*Z3s>j-a}e?Y1gINueD-w}xZ)s$o;?7QN=0o{FRh-C
z0@O<hMp-QmGpqA^LF1WH>W!<$CG*N0rS*iE?)W}dnEJjOMrGDk0y)v9`ipU`QV#Sg
zxu!l8UuQGOT<o;+s>T3_FsdowFNiQVk@RwET>CssTBkl_a=V8@ItE>w7|^v!Yz4<A
zIvtsq3O-E7WOWH!7oq6{`}XC3<w#+{9aW8RRn>g($>R7X{S0#4ju=nNC3FxLQeX?l
zBR=TA2aRi*;9z045(-y09-Ymq6f4EXQ@}up%d^MCGPSJOc=VlqF?KZchUId>!dUmk
zC~e8p%~@M)=0<D<E7To#3hGnRw&cYtwUn0(x!<P{@rzgaxrGS@Q;R+gI?=u?i~tWm
z;(V>%q)n^GYu>tHq=FQGbq_)pmF4z9$`6h?JzZt`Ri~-G%#Z%TsLtN^I96RvFPVQT
z)l$HOkGj6G`xX8*;i-4_|KrB~aG%8?5<TH94(w)%{%gV`<o{Y9jx$99Doe#7phBY{
zb?OE#tO={<2MMj=Y1#!k;#q{Y_F?a;fc0S$&j7eIewAG5+lOP<xrQ5xnXb+aHJ^fS
zq&U>mlJJ|pbUBhBf(#9O>K0p{EH(Kcpxy8YaoWV2Q@h+AL!se>Z~VQ#H*jP#f4tT4
zOAo2Av%sfT-_a>D<>bM8ZB5E^Hw=>ne8-x;#nv*6-n6Wq|MvNY&yPtB-Vo@@@YTt^
z=#Aa(RTm5}ydbC*&t^(vDo>j!up7@B;eW-<Y>50oq&`wL#S5t776$XfFYb2BJ|o3_
zFWu4K-Tm~cIRF^sSP%ymi2ZTlXSq^Jlv1q#AHm5Y+L}UV@&RuKf>}t7*1I1y;q4gi
z^2zt3x?tAgti@Q~ht=rL;@F6$){lkad<W7KV(+&=Nx~=vnt?OdmYW{DoreXbi!Di0
z7unuGo9R%6abL2p**00Oo4Nm$TXb^H&f)l)?>m}{Ps!bxrvE%>G}npNIEEdivhZl%
z{)RYCl8chK4F$U#vdLrPXrd>)nY=Xg1WOA$H!5zM3(Fmu;()<7*MnLgy5UBKT-DEN
zD9z5f)`-aKn{i*Ae5~TDe?>{1Nad9UlJzSuMCBH%+?kRSbQB1HOuk2xkqI&-z<o_U
zomW;F`aQhnEPd%2c_5&uF!CulrhP4XOx^yy>lwn+i69K}#{5zJ{oFT7A_JL!oVM@s
z4iGUq^q5%1)b<jJEY`|(acCCzQ^+w2=aHCq+#JMV-V+YonsHIrU{cg%5^9@282&fg
zW*k?E6lavJDj{DkJAoI-<kRr`a?>1EADA*XZtSAWbmDV5Qkp|d!~4Mc5a@zwdjFk>
zg+${t3&`aEH2OBhRvNL2R;q6;(vCixjm++-{JH#!^UC9vy2}e-+D6d)>&A{!SyEI5
z0Je>>XP}}SRq3xyRpo*=#8%gA8-d%{8am#U>r5+lA#EPNQbr)jZ(d>U)j8L<-9yZ;
z{YKfA|NN-gOM3sU<r7Ey{a2Bx@#H>#tq(iNv(M6U2p$e_v>&8Lu7wipUaKtkyCAAD
zeS}#eBifH$gC3;IXkl6C68u@7(tc|Fv+u>_*@qjyGI2sM^3^Vrd`i!@Ux^89S;-x~
z>Bc#|A8ek6kB#pF6L9qkq27xoUj9&e!)RJf7}y93<@DsZ*M?%5tY&M*lw!oFh2JdK
zS}vo0>9CIwm*}w7yplP{B#Br9()V`cO}YgB7TQu5Em)8kR%|-owK!B4OtBCq2f7-!
zm`1rajDYwR^X5oDgO_-WFfG4A1{7D0;6s5X7y}sVN-KZJ0INlqX#Gm6ya-toZX>6z
zJY4PO&-o!a^-XHXSr{!R0IAcf$5Ybj14#f%^`o@(C=+A?fhxZE91jL~xSxSFBNhZ2
z@yehjPfh6Oy?Kgj@|vTR?*T{Y9TD#A$Z$QCM|6_BcMkqDjnY}v?`EV=eRBmzeJ@3l
zL#Y=Fokqc*6zvG30>ROkcnOa0ST74h(bc$<6wF3m{nDo+r@(~Q#{xs6T8W~i%}4<d
zE1*=<v`u>xH+r>vn#=%m<(h8T5j}gmNb8+)GXb<JL9Wc;?9vm#k-t&`)v8dxn+Mj0
zV-g4@R%klLVY9jXASNAPx;31NFHfyReOU-*@FtLcg#Deo1BA7j<~)ZaR;sWcRk)Yu
z*8J3Bt3vlVtx?YgA%*0un(+kKpp$ZrC`cS`T-tBa>Wk3KF|4wK@J5RW4e>_$)tL2?
zLYCc(F$bD79)008xfsQ7Oh^+Ay~CS0n-?L*xKfvr2teux7uZR|=t|Z0`ojjNCm)?Q
zWCuX)q&PxTFeb9}C_J2nd=+;7*^({^90k$WM}egoB|$bS!NN(@wDsb@mX>Hdiye_-
z(RE`;gbo~qAs0mBS;n&H0@XrPih-pifFZ98VW${<0fSiaD4}Y>;Hg#wao$EmFEoqY
zEF8cw2-H!qly{<pAfcszUwoz9nQtIh%nY1<4FnUt)_YGBwy8hHJO0@5gANTWH2d~^
zf1cxCyILN?jW7GBR%m^Q6T{i;&%E%)7&V2ylRI6**O=IER^R`$Had-i3bL#&_K&w{
zJ4_l#5*O0Qt?P}k1R5ztK!mN%Kab>HeZ3Yg*eK;D|I~t_>CVMpyrRiTXSZlz(DRKu
z?^dqq1-e7!x~6k)6kPbhM+>%SMdk!EbLG3cp8WRlbqz$Kd8MX@Af3w&heGuX8+j%O
zCTNT0sX#;@HutrY#5)v|f7w=Lgwi__KE|5?)JMc-RQK9OXG_`4-Y+_1Ur!Kw54Go}
zuLWvD(GhkS4j{NIQM+!S#T#I0xxI0XXE9J&z<{89)mbJuvwdny2|ZtO%tRKz7}A9Z
zRD?Y?ii;;F1Icv1#r0+09TrlR`;RA5)E@6SuEqG$EAQWBorx@mBIx<)i>#yZdy??4
z8$;^D!)2RLn6npaSc>idTEr4N`Xn8RJ_@QXTCQvp<Y?vqC&`;ATdhnAsWvF_TFh(@
zz$?|*V<S52+qDE_@tDNv(U!f&<O=z3ZUCUv!xccN_BC%?rj5K=u`*g|`I5&g(7G-1
z@D=4Z*@pt{2P6`LehJ#nApM^r*|?xaFyB5BOydqLEg2ZOx_58-<AeD+*bn+CjZuvu
z&h8J`G2jda-S(#B2HYIk?trfv)soH=FJcs$L3$9yg=!3$kbL_G2lI=2mTn^&&mvX;
zv1iTYK)0lKib1lW=7LH}#&^V(4Jn?WkAi=<q@(aGH4lMj6tJ|+<r_MIFxB>qP+u=C
z*RLi<2y}dawdBE>TYwyeL$7mZc$HVnYkZC_Nr$Cgk6*KpZ%z9qmFh{RxNG?~gV&e+
zQbMw`r02ZBxn|#Fx}f|@Et9v`nnkJAt?Q?(es3%{efeeI@$(h*TWbR}=rBrtG*GUQ
zuP11~1#8OQeCBTQeK`r2r_zV-@4g8-yKN_U=ht}CiITfQ-j63f7mUbHDc_5qE`pBU
z-gxp&hQy2GR5@lM)S^DdVL#N}14H3~0xLmQrY3b{x$?p}D@a|^9`mtD2)Y)mULHdj
z4}qr&?<MV8A;c<r?;~=6vk<AM>A<GXDS%AwBdUdb+=mgfHuSO#lVC><=OtVLmvUpq
zC>8`9Xh|<uGNr}1Q-I&A76MgzN;(r0{ve9Z;5wMdZz4~ia@~^dpoBqY<jb#KzWM-v
zpQ11=E!Ma;)hxpcxo%^i%(#?lCNPV~92ryGFc6a>W%dk>XSsctdd(|U8_WnHj~^~U
zi8q>Ay;wTqF-)`KVRo>UYdlM9DBbjmVXZ|b>+Bayte~~5mhn=72P3#-Aw@VyqB5ay
zsR$6IqT2_No2P#`;!z2fDfh^s)5ACgp@X~+eEnjYnW@qs<=l%LWe|z0cpoeb%lrB$
z@Qq_<%mRg=kAmP4(KU{*(|RYX82T+MD9jlQ<Ms`FFcKe6t6YI%G)#(eo%ueTQ_`|F
zR3T=qh;{<1qCrORRL2gJ+|a3^AhSthKMd26!S($m;--4xG5q~(YJ%tLEPH6Es%Q;&
z>h0->$D?!1Voxek{?x@NoMkABw592Uaui$BQoV$|b4_tDm@9q=eW`IlX859wy_%$=
z!s4PrZ>CqvpG>?Op2)*xRvX>ihUyNzXKrqTtFWSCrBtdUTX;Kz;@8RR)!4k&LpQ@8
z!&^}?jw50RJ9E8yFXMh|Cd&nr#gU$YDpQ(f+#LErtu>tgknI09_5UUD0Iu-=cmPmK
zW3lC<9{@yL2(-jg1jsjlRYl0Ym#@Fp4$ykMQ9V)4+90({Dt)!atv+SvX^`o48RQF{
z+or<#Gtn1edYz*uc7W&lJQkg%sV5fk_+}<t1#9-=8ht?a#`<H^1NOFoXKw^8+TAYH
z7kOKR%#lIZ&d=Ri>U8^)7|4?}>DX5gsa(d(GGyLPHTjCWof-@LPBZ0qq$fX?aJtPr
z<ZksOVu>#Q@cMV%YGk{=BTHAfG&KvVF`7i0&up?I@JNrt!sAlBk1%o<NYlJbaa(?X
z$B_^NG)4!@M9@{cR9H`SJ$YQ5Au<9y0D{Y4cM>SZoGXDi`qhk1C{<Fe4dBb>bg=;u
zOzUOHp&O$~*?vw@Iy>e7oo^Xyt3VumixrY&Vv>smMcwWxo1wt%J_lH{ioFN?gOZ#7
z)6}Q;A3;z3bU>V$RnT|Bhool5%*H{{4}f-f8n7izs3^;+X`H3aV;jV0gHUsX%raep
zL?<u^OIA^m{W+c`G|&fD7=zgc@`|m4D1hE7p{yz@^dWc$pz?~R0$^cw;;0iWB+8dv
zS@DciA&e3A0H|`zzY;c2CvkMCGP%mp)8<B?B>V1%D>rH$JO|VmfoAw#eN;t{yGzHP
zeLiPCRv`~ZK!b^G`k<2at$FED75|%6`cwYaF9Z)g+cqD<@Z0t_n>@Y3P4EbfkJgOh
zz-I<4D7Ynh>dWkdEWdopgeb|k^z;E%74*~>9-whY8Z~FYF_ge8(SU!DBYF=XoM<%H
z^Dnq%!?@S4zBEnAuZy#gzQJ9cdKlO4(Z3}7W1tN3+cD|^(3FU1bOj`P=fo2>)hXdV
zfKm-eJT?>{d2S{DkTJ{~jcBXNMY9x`Ql#-?(_*E+DbL&$)5nS1xZl&3f-7{4KS$`l
z@1eV&v3IskR?GS<!LC9`aV_Zy)%)fA-zg)m!-n7e9T4LKzqSje+$_Fi>q~sFwkwsj
zmkVkvST`vMzuERB=TppMn~bAZ>pv=AdrCq2h6>aU22P55dAm72-~HY|DDvyu=u5_Y
zCb4fZzfY*y7S~NI_a*$yFF>Ik(6IIlHEhkF>>$X@hI~I7Zb=SfTt!i;SwOfeg^pxg
z6!#^co8Z*NM@Xiypzhv8fP2rxOKLh*+fjrJjD3oQEjE*u<=%r$Oi;$S21gJWxAYRH
ztWn~7B@=zJ=PC*yfUpqJM*@?c;xv-xj$|b1RW!Vx&C?ECH622p4Kzmc%wRr%vNS+L
z5pN+NZ2<2WThhX(E(r_eu}dYfrYydPfU?^%veQis4NCk+`9wdQc+lpB?5s1*Z5Ld1
z>S=yxeh3BNA7rD+g$wP0i0{Mzlxpsgpm`+CheH-q@|1Yt#$@uy@)Vot#xlLISZ(os
zyn>jbk-Bj<kexxXtqKf8IDd$m`usjZm@X|V*+?QMAvqn;WQR!BZ6Yd=QxCc)YO)^}
zLq;bG<sW>%hl5M2H}2Tv&DXX@RXe!AYkLunKXvXTmk`M(er`{Tv4Zt>etYuiSurX2
zY%n?B@i`mbDg~YFVNb#zHBiX+7>EsRxg1n?n&}BILWHec)(6b$A>a7or#n=cxpMmH
zPI*yoOL-*6xo(n*STW9kt}-{P-UjKMmpcZiSu<`%VH^Wra-u@pe^mc@5{z+tmk@6L
zh!JmLEflVWH|4Y=P(&YTtKj#QR;oddc?*NbWT5iq!;t!Nbwd|KDCvr9MMLTNUR6CK
zy;*o!+CPmksEPf5z$oghLQEr3IO4jsejQ>U{|J~1do&nWa))6k)D%=LFU4rM7?{|%
zqSEXuU!d;kJN*@GxTQIOWRtnB?oz|Z9|`0i4c2E~Xcenxo=<$8s{%-B4S7KRF+nvw
zm`NjR#i-8l?V}|E!y5By=g*_h=^wtbENfyEZymb@&1imt<=?@MPMUwC9_??bvma^~
zxC0OJH%T?H5xKWqovUBTBt0F2>J`{xf|2W3saH%)ez+h_4AgvfN{b0H67(x13&GaC
z3?pRLmI>e{ZbRj6I#6{%#TqZPJKIiB6Z`Wd8a0Imh}`^LE!7T1P3+EdOQ~~Lu!w9=
zhBVpX?&m3Mxhx!6FmxpZOM<0WXuYS*MsBe&t>7^!_1fJ)Ce%<HaHM67Wb_nMj@DNO
z{?7V3^oC+If9Ves@f5aX#EIr_73l~yOWNy*FUPFMN$lY1C&^w8+ou2!;tdTLrej>Z
z&?pFbeNWe2^TA0k^+JXTTuV0IBMKl}i{1^kQncf{xs}sPb&wm7Y~KG1HHBKTs>?gf
z6h_2}tV6Oxgu<v2Bv2Sdk=qI&7r%K7fgrx}3N3*Qkcn|N47yXklR0Zp_RQ^E9zQqe
zoxGGx#1#vGBL*Db)w*~`+&Xs#=caHu_julE-Y98fxdm-BqYW>3D4tF@DBz-2A9X?R
zZtUH{Vj#Dx)6Q2r%J~6^a1aa@;;-&Vc(#T<=jF3oEZYBW(JfJB(XoAMc)u&7X6%P$
zchSn2_nDD2jMZsb`df!L)1pNOl2QWcbFtX7Ux4|?K;47!hhAtt=AXCygqk_1{A01E
zJgFvl6@??-6QOX~I5iTncdS=z3>+VPFm&m{kjYn4pRGol9!S-%0)>|&q7eOh2KvY|
zA!TY4=NiBFBwMRk3>0WlK3WT#tJ3jAY_1Oe&a5#;#zgFKJ1HzaAVboo`aZJe%5w3+
z#z7X@=isYE#=?IaW6+X~KdT!c%A0$R<=>fFvf}*0v7|%4L0lM(h3*xoz&hxoa2)bf
zB<j|rHRR6y8r;fP=s?A<jlaR>KclUBLI4@zc>U*aoXdJx%=MO1j&TEc+JCkAR%Qs#
z<Hi+~DF5RQdsKf&1m@Pu*TLt4E?)5g-RsAIsgqQlEFWmS>(-*Si@AuhNzuQ$yoE5Q
z?IWG~m16UUH4e^FE9D|YgvB(RZyvLbM@~6_eKRK?->z1OVq?WE>@7?gUQ0>2SBNXx
zBL5`?fO1(B;wZ!E$W_>)LJx2WTytm{)@lWB^Wolzw6qhg?%0nGvbB+-oJm3(V-nUV
zv<~84o#}*i;q~!0U)Kd$j`!e@JM~lHIJ&7Hr~)jd>xu1a&nuAHDdIMbagY;nT^FRA
zj05k>v{FL$CPE|u*oY+c$gm1<Pfv_MMyXKdYw)dI*9BFKsOi<GL@ffHg@3nype9qq
zwSw?BQ2MYJYbiS82dy*sE16xZ*viHV0A7K{lVSP{Nx=T$y&j&0*@_5JYv9zP5f4WU
zJD_aOM1F^;WcFQz3Xsfh_1v6&sS{oVr)#P-4DC@T>KygkzFlM4$LXPNSiMlJKULYp
z{r1DhH~c@4&#Ux6fMxG!=bL(}9p}@>@6OLt2SQi-V#sz64jjTz3=C-}EY8}6t{i?8
z0|S-JRz!D>qR>WFXa>fITKh2og7<J&fysM!c|zKsRi{}PGr$m<aj-s|&LAkpkD=1q
zX!tD`m`r{<{7L<=qCx<Iw|oV^YN4`Nk0!|=047sGXZayu|1eH;>Y6fVOq&0}&69R{
zA)dL$93p=5lR1>1E`~)D;NR(mlT?CjBLM!LtqS$4jnUvD3n6UYg9rd^#F0h2#^nm4
zRp(uUt)L)y(BgRhbF7>v*?dK41;IX<=06n#wT-wMbjHt!`wJU*P+|01Ot#EADlp8>
zK#R$-Wp|lY>XBI2_K(qRVvI-wKefj}r`yh~*=GiXS{LO)iUoK1?ZBi_Xuzw=&K8Jk
z<$XGVI91$NeSl~RlPiouW&DzMupt{0hFb`oRWL>Q%d#ti50x=)IJ^+1X=PsLTBo$C
z%Bc5l3pMp!O}kG0JM?_7FY?cKtH;<r@x2=D5+Q1s+~L71ocET_W_l62qiCvq`Svat
z@PK@fE47i(<)p%+n-FCswf)g~w%pziT!mP-yAy8;gZP#B?MgEv^ACFTbN6(1`Ys|w
zquPTlkvDX*Gvtv(0NUsQFwu)6A!r4Gv%683ln$X2lZZ}cBl_!C?`GiXe4RuoH#xBT
zBiIDsF+j8-O;-m*8^%2`NEIdjGpt@ymeFyOA&WSiFAvd;C;wU(zN|S_N7a|2ZO@-j
z^`$C=b2tO|`NwG6^Up*Ot#si`A7I%_YT=L&lb<8X{j=@NnRFbk3uc7W{G#`q`u1x~
zsRo&Zk6ss+gtJ7*HZ=knzt{ILumtZ;kR#ujPH7s*;U5E_bmZ0Y4c<YMhMt3AuH--1
zwkD#_Hr3v;X!CX&b`L{BsJvDI<vp$a`&I3q6CsQstUP+(U;20$!vTXDH2%L7@qa(J
zOp7Hxc>Vd(>2m&lxQ~x6GjOx)KAX7zG;jO!1yK$b*i0q#OoJIhKTL<Wc|Qc7uMmun
zj3#gs3W*%XD8p+(9#bjcv!U*iK(Y8MFYp@PoE{&XLgTETxj7}D<Wu;a@?(Hg9}v#P
z9|hbc=?`KQgZijP5BTzee#Dwo#U&D~0=Ob!ij1w*pu%D09J2Cwi~pP;Pk{*{{qG5~
z0#nbu?o3ipN4FNIu9TwL4&`-4s^QtU=l2!RcN;AMgu!01Ms_v<+CZlDEZeFr;lpcG
za3UP@B$fN+WHB}kU2fWD2+DAv?$-uVK`6tyD~IXpm}jyqlB3d&VC6tRM7T~beY1!1
z>s(};-?rT=WH9#ok4qY)uXMXYxYph=%)k2F8$(Fal{wFE(V9qj!-+v^cXc%FNN=$E
zNW{4-U5@z)AAO_QV5#LJ?Ij7Zd&w8>`;YF>ye{u<gp`d~wqqzQljDN?8Ejh)dNIM?
z7F|%f7wgkp0&b8>;BNEYkxGI3!Wz1_QbTh^KJ-nrnfcZx`ZXG($hJ22;;!5!9%~k<
zb)G$I2=ErT%nk?hv>f)JDLSFAs?*;w+$OFc)1n+zQj?0+CC2~(2C~)YMZ7+FI*u$L
zIKdHTkIBDeD}ikWn>kcxMWE7blJ8B1#rW+uks2tUm>gPzRLUxnPyU+*2^bFkPwOaW
zPMx&%yj!Dd@__;i51f?XN_OLDjOKIa4bVh%$V0dWLn2w4S|p_t5Ec`pik`z2%Ryr_
zZ*OyQgM}u5;Kb;*G#K#S+Sz5;3{;c@X|@UoC2Jq?dH(`XwNU@QCsy>ui~<N!ihhlL
zOruS3nPEwS#&cBd)sH@$?kV><Rd(08qWu)t02s(>%4a712yo+BxCK%%zfF6%X4E1|
z>F*5o<7ah{roxh$91dS)W;-YhbnpYQjZTB}^dDWvAMceS&ksL6?*`qC73#U5xA@XW
zplW=-Pft(tM>p;b3t?Xx|NQ+y+US!94)i}Y)X4Rl_6{*rNy$f@x!W_DZG>4XeY6&5
zgYY4|Iw`Z$O1E^haYOJs7H7xgdFfLlB{@#!a&=~pS}7B&PTp&`{}Tm>`fI=ax4(9z
zLdIVm-A}WLP&fG^q(+8_E9xe%niR<wmqF{Go`ve@wg~hl;IfKW8D(6+2)m&T+~gNW
z^j~7ClR3wUu{5qFDG0~&Fws_yR|lg>CWbsAY`Ix({B7ZSvo*?=A&>xZ;3iGc9;`g}
z&|#s_W1%up<IUQqHkYq!OVYJ`pX(l7t)1|i+*|2=fKfdRra2hzOPV21`ZLe_r8#cG
z>Sk-Waot2(UD(a-$l0w1;K-M@JOJ%BkXel_^V&3fbTBDwFHbys)2#R1)4D^cqvgSR
zv&_CvkeUUZ6mXMI_DqN%0-<j5U6x)IKUVs}uevqyLwSRN;!o@3@Q_FpH1_FL9Mi21
zq>a$WKGgCRHz>59`PyCsY&7}R1KBe0b7RmQ-B4Rr#{E(iL&j6lK7mN|c^TEBLDDO=
ziPS{@Q3L1YdV&z}M;-S+YcKy++)pLpoNJD`kf^NjV?68EEKS2`Xe?V~Z3<G;pYJ4+
zoxUG+lOL4Q!l^`hj{@1v5iVk~{rYSi+Zg-nhA^hyM#V9J8Ab1kslx{W>@~7&lhQO^
zD*!VpSUpVg@rgYF?=;$8Q#lI1`2#+Ny2;Pp?sJa8ND0qzE?AI{6Nu1_$uf)5b2JCU
zcD%&#-hjP^#}%pUg1ptPB{Wj!ifVZ8NfzYAnpSDa-YA_@#6eff0@OG+NL&R3w+U`}
zzLD=@_~EhJ%v;jBwJCYO6#?>j?Qzw{K+thnuOXOndj31P>*S`)zWXnMYD2jU@r3tJ
zJe2#xK_;l|CPy}7J;-I_P{U#K{BZE8&=BJh<=UUoEV(PmlA}rdg>i4($QXsaX;bwr
zcZ&(m=f^HX;(+#&y~1Yz`}ckDDJU2u^^a+eB#FNbMMIGz;|1tY#W~%?H0T)I`k-Ds
zPh3gM@O+pWl^)6t?5K|AANPx1ExnLYL)`WBEro~E<O>-0cY{sQ@|i;E$2Tp{MO}5v
zbRrKOsGD|_UK%x!Xns_$GOD(!;Vh+Z-kF3mjpm&wsG&DX+LVUnK!n4e+Y-tB(;8QY
zy&CVPW`Ga@Hm>KE`8dEt8@Sa-Tbfb&0>wnb!qeG8I7ddBFisp&ghWohV2=7ehAPgv
zz7L{MmjDxOqW#T}&+^U_3(9CxPyCNZ?|yKR7B>cw;>)96s&ldPI&W1{0Vr}evu`Tq
zxXb3z7XQ<&6#UnZ+l&6x$@+25l>+v$uh}>9eecV6Vid!qJANsS5H?We;D-@(!B#vk
z`Epnya-l*9PcpOlmB?1*VU|dGy)B#2j2xIU4G`g2i{mRB?!zW`gjjovy^pa-F#A=E
zz7G~Bt6+ow^N0BRpn;j!{55DufMYcwfSZUL6NO9~)?JS>qEJ*P`hs{Ljvh3*-k?}L
zHhbznEc%-m<dJSWi*$z|Tq~Jyf{U*dThql7Qb?sy-=e8ftzvRMo~BCVOQR~g33@+X
z<1*Zq#q*E8xC>?ela-d{4Wy;OYHx62;|GR$=o`HVmR^84+NIIvAO%zruJ%Pz-BBks
zNSq9gcsTN0CeWA!K@yO4h(;#mJG!=Lv^D;>i#hN^$onLY^rL==jv))H-#GG>z{Q+b
zjs#~giOHo%<Ap%yP#R}RYiNn4l(Q>IJS<-OXLNgz)5k7YPW^L_J09v&i&JHDT@n!6
zL&wik%#XXD{JA>7efCs$#^&9Vmr4*8{m7262%shf#T->J>BTXP)f-0T5m%#croGYs
z+uu3}_zwo~4+swoy88RS`~Q3Y2T715klzZqKHe<dl+nl+{Evq}|GiqUQ;N#H{`^(c
zv-t=*go;r@mHs4)&`TY7Du8?m3fTTYL2!M%ab+qnDJeXfeueI}ZeFKWSQ&q*1F=f;
zV|VKhwz<TvksRLX18Z47V&Xm2tH5?(vU`_j#9{K%V|`YJmxi~r#v9T__3T!SX``Qh
z-8Y5@g0|hhN3RARx3JD@1~JH8Xav+bL`MnU)n5D{us)b8K2#Dk->@}Z#GfWW%=z|f
zU%CEWiwXMgj<rbI(K2}ZF}_vmjW_JmZny4FrWwW(cy<K-=zE-X>xC@M{+F%sisa6I
zlu*Uw@a>8$(em*!34)xB($J;DX|Ky_DHe@<Ap^UM+?X-VzFmnDs=%_Ly?E#}0G=5F
zBqx&jffRyXC}$+}Fe~LcKq$zsDA`cYK`0vp5k!vgWk|~$p%yuzz=GW6XG>z>b^1`G
zDL5!;pLlDtW!>b?AP0M*=t7LWCOHY6VX6=l{zjUR`1XdrP8^40n!L!!TBb>_%SN(=
z9(P)%&0t2UviWF9Ns8-aqm#17;Bi^@?LqFDe9CwDZ=V|mSG<G=X>YuQhZJyc6;e_0
z%pj;CZe)20+8bMj4s8pLg@HyNrvXHsS!xND?hbdfol0)S^JhFCD_$1LUUBd!m*_d{
zRFDi*zOQ`Re0#g7MYiOgVuQB9t`hlqG1^<SCubr9iEEe>8MCi6<4IA2UZ-HQ>U+3F
z0s%ZTZP~q5+F#>hLjpUM=EF_G)MT-^XPZC@_RL!dR~Cd`DF3X_7sS|FMFI(~y;>}o
zrbs#)ft-6CmTAYq4J;wz-*@G*a@Kl*<IP=UWIAR)jsk^z8RH|}uY6brc;)2U{^*Ya
zy;+Ms4|?=A>WuN>I_lG|#2$t-s_a@NHhIF|j!pXaz4B)CAN%1$WR(*A-Wyq_seMRO
zBYrq<pM7z%pc|_tVe8buWGL*~*V(+N)9T^>HsH;b<r|9!KcD~n?13$C<`9wYcs6%%
zmf2!_F^BZmjKn(%g#bvzzucqGMQ5|-C64XT?$O&jSRK9N4m42Ke<5FjrP*ft{bFO0
zxcAq_$rtSY0M9{`P<5+2h!-*ZWy*if`2NM}yfeDj`Ul!QiYmZFC%8UaH0`~4Evxi)
zi1%rm0GSE~>DkxUSC@ajz8=Cq5}9P142im=+YfmZfC-61yu@U2z2)elYC*q3e<yIw
zoib=5g&?GdU@$h^rkLfR46C>L7f6J7j|FSpw}<qRkQV=V9v=T$viYzO1#g7yMcF1+
z$`-zxsXdk;5Cn(4R1VQqRsvK!yk^J_cPy3sjg~T$*&imR9T6f7M*^hVx_A}IJ{cDb
zDv?QWTm#t<b@#9ed5k@dXCZdaCS29*Sdmj(CY0L+IV5|2kgNdMc5u{&73jTFw1s-~
zrzKN^_70L$HtexgY(f>y>Qj;edNlKCsa^!mrt8|4D3!6KgEvCRUub@rgs#SDvDL-C
z9;fGe%b^auvo)Kl=lEY|XsCRfRqJG&6O5+RyhH4xI*{;I*gRugjNeCb0{m9=7sUjx
z)?1l(zO&*@=@YCT>9>~_XKuZun50f@kovMXEtQzAeOZ0POh>9E_>r3oL<-8R{KEm^
zOIZcwF81)q42KG!d#!y7sasT;G<&9_ZqFeEK$yZLSRrH`YlXD@E+D1-*yu-%2mu=f
ziEX%E*b^A$+Df+i7bM0=#&IcV9?S|a)C(SwXJpS9qkP$dCzM;nSUS($B6ikQbh{rz
z1(HC2Y#?4swTA0IM?qCjO%7HP*Vcb-hAU$GPTujItNFJ|g9hsNRb|^%@J~Ek;{=?I
zI5pK)5MJYjN02u-yimIV9@DE-<NA~;LCchT)}3~-eWVz2F<RA63WcIK3pEH}I@Jz8
z*75O3o0O$ami|cGLyTYkJp=ZC?|JwC$NzKGnR*)}dwr(<Vt}L0RO~Bs&q!Z15t({^
z4k=*LBH(t*h^Z^?OJpH_#K<jFqV|+S`g|95y{>QDV-YDGF!$ly0@n2}r|>0;+-;2B
zZuSvfBuIdZ#*KALb@)a6%!DfqqhV3Hkbov$#WJO;N1eA%w&%+oTMNGBJzOzs)_T{~
zl=o0z(Hfc=rD0>tN_v|qgZksA*C@;|ary?KpI2Ca3fWJOEy?;XCFwLIUG7p1oAUYW
zkB#Pg6p0vx^#F<0EEF+Q;yCIl#mT()?<+Mj99aGU>-q*RT)o~jk&yBYy7b@X+TK|{
z+w(6)nO!dePdDaTtqX^OD>8o_ZM}W=8N2imiTcj^iyPwmv)FnldVKO{6L1=chz<8C
zcuf_4%M%|MvFKEEmKPRG{YEv`Y9z5pJ*msUfX^bZu18C(XVX>#hP9-&h^8$&7oJP~
zg?M0HZvw<>g^Ckpnq!KS_)eiEj&jstb1873#VSb)3@j7SxF1v^Bh#>pY!Gr)EA|QS
z>*ALw{L^H82l&yhRjrG^>*D{$fuNmr=#AY_GJ`ZF&;$-#gg6AB@Tn+7pgb0%zOhB`
z_>&`hPXH1$plZo*>$Hv3k;Z^w={!^)5nI5I_Ec|JNvv46M7QBPrP;}vVU10z*%JaI
zUi}2?vAoi`IXkl^(*dI(!dsP#vA(+scjB|Fms>^+)W?6{;;u0+I=AB|qJo9=hhK<j
z-`=fT8`0raOfrFDZH{L_1oYO5Lz7Xucvk((YNxn(5p+4s9_)@qG>%#dIrY-BK*D2U
zi+~@WZLArXlPszZzx1d7khr<@%Xjr%gY3&?i{F0B3&oxvhL$b=_@}JO<8oOCwRRt?
z4}}Z9UcPvIelYbk;;w18>LqOCrw;D*JKqU2^4@F8u$6Eea^DdY`))M?bZKD9P4mzM
z0h<#my1~qY!ht~F+p3x3uju2(2^9=SvoXY!ymgj5^-)iZ_)>0+Eu+4<ZVij$*hulC
zT3}Ce<PPLW*E$Sf&v-PW!!AyrFgyh4;%atGXphBtxgFYMJu2hgES1b++xTTQGJeqx
zD2G{I04lYPQL)G<HlQptZk9lv6d;y{`bfATVE_EBQJ3DoKG47a)?SG2zc_~oRLPy2
z7#!dn#xVfsm%xK!wR8^sN`t_9$DvFi`>bRC3bc!IGXo0z)?qi4sp!#kS{0guKO+WZ
zuWu60!clZu!wN#M1!+@b#fOX|qh>^(_}YgC7n<f7U240JZ@jQydHfc7wbbC#zP$8F
z^tEYMi2b=ALyOmF&*f#SjBAeI+CT!sXC@6Ak<pfT!A!H2Can_lEK9qG6}b%`q$4T)
zVWVv)rQI&9+22*$QEy(ss0-tS{+Q3G5A?EKsfwhwdvrOWz4a(D{5<to0bk1YOKz_8
zXRF8dlG|^qxUQUc?(1^v0-DZU>o`5a@B5vvOFTPYebDeWGM%3SBpt@67UWb2>bDLN
zXh{nRI*RpY(pLkqpdzq%NI+yptO8H1a#s8jWbaB)Zpdlj-F%y41x^Gi0xQ&PGK%ve
zVczCRtXh_l<eiyY1xcC*^Xw4LO}r9g1rpb#RBK2@Nvh`MhC}kG1-YaCD&H9e|7(j8
z16I@C4~xp60004Qx9sF(W5bzJmUr*a5RP-dm+q@&H_I%H9N2+;eWCWJcIbH!0J-Kw
zV+(S@vsei504&xqK4yJTIb5MKtt7+D%(*Ntt)JT=v+bY)Y81sYTOObJ$gQ%{^Qym6
z<5gEHZe?8*M=xznor)S%V6KATRqJH~whD0uY_Y!EG_)UdRL%yJ+-X1VW9mXyx^WH#
zzk{>Jqsn5}AL>-Y7Q;Sd;6(bad~e_Ht@5beu6+E;_T=MZL7UtXyH8z_82Vw5D@-C<
zh!N?crG1ue7`6(A0ri4%E{BDeZI%befg`P9wU9?><Ysao%>;SfFkN8KfhAkId+G?o
zUCp`y!j~B#VEQ|hKPIJ}F_lMNH;x@mYq*toKX+ZWP*=H4G0`vuBmCyuaZ0BpI=jgI
zT$eksyl4vLr)ie0toG5xYznw@`tf`Yp+d{9>peVVa_gm^%8c4Wb#>JbqKTiDXti4J
zbNc*VvLLQ^5sT>o>*`?=T^s5(NCp|>-3_80^pPBd#f8yb<*jsoe>S6{<e|WSL3mf7
zf0jl5^&LspU4KWKsP8BS^&RCN6pthW-;qUNJ!Am*j_iEZC`!hkNfN$a+!lN}^-RY9
zlCe^xT&D<ri~detqibKO=5zHsXSF(I*KXt{($NYV!eyRA#khqAfNLkdi=~RtxY;*)
z!KLv|ogsJSVg8sg#Hv#e@o|s$<n>BcL@B3`W}PAe&C@3`y}#BQ$n}s#SRn$vOQa4h
zGK`MaceUba0&&^LVEzWak!|0pGI3+Uts#_Tfu!l`;(shrYF?hc=|tSo>J#<aezv*B
zLfq%;{Nq~=d_Ip35o7+&S5uxqL3GQl&d-;0!7_pI6ah8a!G9i4o_>E}p8r$-&g0#+
zFEkc*mrJ;XArqFTcSB*nd`5uiA+0TLJvgTDA;Ba67yKE1IkC5BF3SpGR!|=`?fD?#
z5LQ$$C0>@Yt{?47ORyt7=!v<SJ{-L(WE0U(n?Z?kBU9(bLUH!-K*?H>>7Wb)D}$H}
zR%&C2ZKOj=X_oonNjy0*dY72>tM8^QXEQv_>n0uihR0tnhnLF2I`wba)><BrJ$sxs
z_w_|6TT3)FGRfCPE2Irk4&{<)n<*AkzU^9?<rGn&kw?%1efiw#*i{3udCRTB+{SlD
zt)lJfO=W4WJI1EM>paTcfCdRO-upr4_^w4odLOr6BSnCLz$CT{M9C#SsY^|>%!k!A
zevCsXv<5fcd)P@Gx7Um(--j!*RaW)AZTmed7!QJ~NjXx7RknOQf2c2~?J&FQP)gcJ
z0Wq<m41wzMi@oZKCAQdC#^tJ>?j@Q!(P^ZWdxlR*GXZQ&=%U@N6>>vDnXKi>79aG>
zh%2d4{)kl8Vz1n?2i(YCtCM+lEiynN;=6o}KxT$4N;w;}t~|~TVUb7D<qEAO(fGke
zX06%Id@JZpCjd&s<F~yx0sP150wJnU%T10vM9|`%uNrIVoMjx})#me`oe!)DI936K
z(#<oKe;zX`z~|xrzkePwz~`ZgK4xP7<Cw7uGKopMHUXK!i^gBTh#%6jMnwZ={d692
zo-!qb1{qnK4BfFaS0<>-A&g+Auv?=Poy>JN(bcIMTx>|oGJ17`&?>C(UfwIzs{P&A
zT4r^l8`eGFc5$8_84x+I)p(0A$n2XtCAH=+Hrtj<f>ZWfo8FDlLMkf>#<!v?)8&Lo
z-{~8UzRuNN)lBleMO`snW4RfBzI6TA;?w=@+iyRw>4?}5m;Cb(lOE424BXL<9fMjz
z@E8=*az0gIt-*h_rP|d2+ye!h%VjX;OAA-(ieKEll2pK~S+S<M+ua@b8wW69`W5Xt
ztO$sly<`bN{0dV9qZK`Wufy;g=wvSK<#Y&y0r(RSXXpt@#S3*P0;JXE@-=}-+Cp7c
zI;aVAtR(rI5{b*k+rDI!S)U|m!=(hqL|g8_a)<F>X8r%RD0A`>*1;^0L!TG!iQ8qF
zC^`;<MAjQzv->=hTme4s)s~<C_!2wKoMB;yULCkVNnz{Ga{MdYTk`NdwoxFNTe)3&
zXJ)^gD6K#ZpPCk%Wi*%8BUG2ElW_%&eLQy))a_^KuW8wg+a=)k6-p^WvbE`Q_fS99
z<*dYce;3pa&DCec`~`3>f!x-&rnw~fLFES0H2mfjBi?v#eAf2dROFVOs^DHTKw9V|
z+Q(3N3?!~PQQ8UyS%j@FXGMy0i6}WOauh`v+vma&bBFQMEY+%E17>|;Sz70WWL6qm
zipX0mcL_eR*~RAP)pDZD`hd2AG69Vr=0Zm_NhkOhWJo8acE^3DMC9gr*Z>In@eG_H
zaluzmuCWLEnvSDtsm(in#&N{vVNg4AZQHaqM$v0rn2tDk7g$LI-F7w8KDnlI{)GDu
zJ@JPJe!A-Xsq&=Z^wwwNIj!$2bl8((YqZ#tEpX4iPRT5NzmRx>&;{FZ{&aKvf-gKW
zk8Y}v1^xQ<r6}1`SFp@D>Cw)Yrl3b#wS+Pa{HtLa__9r(y1a2;o22#vo#c0A2q27z
zUO-#<A#>!%B5F5=ZDY_Y$K-(0R-6Un7zK@=>f&ek-oHHkEcfd2eDBTQAn4t{p~qk=
zXkCl<3`lV7bMD#KI91{hasi5!%X4R>LX&2wKC2BDR+9)`n^IWtZ5C`poFrk%dtA9K
zFzK6_IJghF@n|vnXcUmW)NT8bd>jfi^@TAg(!wnn1)jyXrGUlC!VrPYo!FHreec1L
zhU~GWj+K119b`vC&0y^UOs>qmEJ$%*XNmG^m5_8_F<!qUf~F@xPB{2L&is!mCu{{%
z<l|I=XEih93_Q(rOEbY^kLih%Ezh%6-Q=UyV(9l_6<C34iubc(*59GSO4Qz|_*?5s
z1c*>Boz-g-P@tMbL<qR+qdB)MeDqm_x8px2lsYh>{Qkd9C|g!_G?-S;ku`=yZZrX2
z@1*#YNe8c|2leQI1rm%L9oi~9jThlY*EE#I|5?bdoPIW8svy!MBbj87hGxM$+lZjV
zD=N{m)bN@z0GSHX-N`|e(cgAm*s&xu-d*hUKl;w3S^vWb8SswWs(NPMx-*nYv|zCo
zxE#8(>o1Q_3vV{%NyW=<1=QtvgsE0ho8)<Iy{k085ln0@7D9!TbuK&7@b?&euC7}^
zUeWhshF^lqMuuXoRF5!8qkDc)>Npr}Q+(3q^0cTR?uwZ`y#3b^Lto(M`3-DpD6rhj
zzKf%>K!JX#zIcn37#ZQS95P>ni>1N_W?K$xr?d-E8AuW8y?*pS8tay$aQt+J(J$3#
z`;?wl0Qiks{-6$U^m6mR8Ouj>h^`E9XHZ9Ps<{FuB^E?QHlierT6keY{waVmMVo=L
z5U>@T&`;l3M<JNX+n*F%mDO^9x(BFpOa|W?X70xcpG~>!m^GBKeCMkG9T_aPFy?ZB
zz*dA-1PLrRdALhdWpw*#fC=SVrV%sUleGqCK>@#cc6i)uN<f6-jVLfJ$(8Vg{j6!N
zh6X<s8>tW<U+oZ3i1T|Fv!DFah;n7g10;|v{WR7vE$fY&OoL(veDEy%hU235a|SXH
z!SMa1F^UC)KETlv3dKO|IBu@mR6QvRe64!?UHWau<t4*?BxbjUSI_B9zVsdf!F;d2
zvwA||-Yr?BkuX~6Qb_lX)vP>L!S!;J?~uV#XBJ~<XHfJVes1-mZWmn-pD0|++Tmzi
zYPVWs@{W09gOU{e0)_z3p7^n?xJqCnK>$h1^z6N^EwNeM;#+>>nr{Qd=S=;Frl%!?
znVRSA?^`s_n7pW2QkLD<Yl?Sjf4-!QyJhlb>7x9q{moMF<Ha5zS*jfXt=aGK58XaL
z`m$~=ke09(U!{?7gU10-f1iEO#U<k`x$Zf8gfD1P|DA!Bcy=Y<N6#BuPX2GeZxRLq
zWjZ=_zE>7vpmt=HR0pr^4cJKAh-z!lky#}}=YGHbXa2Si#<!llpS=In^XJ49X1_Bj
zoKUh~qPfXj=eL~5l|EC~38w#c=)GV3CqdNVO7)CA<<hOc`;xmKoPigKNdvS!^XO0y
zuBgoK>2#h={O}|U#K7M~_K*ODIE)$L*qk#-<azrMT=|hKJT2XXc0#OKD?_+WaG>Wb
zB??Cf0|OJqf|-t1CuPQPusl<!1R-@|$qk^s2FPz`uUNEv*C?>lVwvC`aTzg~p=AO1
z>Ks6$Q!aM<?UYzS0RguLyb$PnWfjqaR82QVd)AnhNQ06v3N-M0IF^4uT8?-h$@cNx
zKmwh&JdeIH>>n;fO<?f&{O^NDY3sFN1qwpNh_9E$|CCrTGi?9`Ulnr9Y-_A5(|Ve1
zr8bSc9z5zgdU&P18fzSLDM%DJ@b0~>JlBTGK`eY1R26TPaSeW9Wbv^MD;~)D?ISIr
zF;&hyqjix*_Mgmhqz*Kv@w?QXOWh&(%M%RqHh_m{w+(qutPa_i#D1UALZbc?Nt&pA
zN&c_;%_$-&jVPkF#-4#(dTCCNwkFHL=bzgO_&?U~E!6zV-7mdem&_UbAlwS6AsWKi
zYc6_Dgj6{EI(<to|CM*>Hh4z-oFcOVRmD3r{9jk2TTa8T9^}O0$O0ZBxhvHh82;D(
z=oC}>3k4WP0lI16QE!Co0{Zf!^OviFvy`@WhAqRvZZ(=5XBO)*+C%ie4IWoJqAN}3
z4YoBrZet<`IyJI1PYb1Nn53m0%0m>0kGf_fHO-;|OYM!on9I4&-`U1+x0=+fn2IR3
zr*P2zXkR;u9%cNkL&5@IE0(RoFwd17rn3W@9ss^dFCQ$Fj~oH2c-6USb@{wUguvic
zH4MOo=!PLLWXpr?VKFztK$)|;Q}s&kYGt6hQE#PBuIHlkhDgxy$0`CpFz;S%&t&?T
zfJ>3-FpMDp1)-9?M}$8|@6)5)64Teyyy*QnN)jkoBmt}c$KWyhveEH&Km*cwrtWaR
z>yHBE{ccd-ZynrtN>q*!xEevu+kTTGfJBQhqKI!+s6C!GT?PA@@7@6bUtN5F?Z4P-
zuJpr9FZ<?9{@&|Oqq;qBN1;y~M+4&bOQJ=_fiGP}dTR006b%Mqd|c^6$&iqM25xP-
z431WV^4)cYlNm*61M$uW2Mj<rFuW|9B*(U~>D{eB;^t@W+0m)tba&=#>wS558y4K!
zr%#t@maY&p5Tb}_<aMMyQgmd0?BkbC|4+FC?8cY|9g*Jazk+Liu6wq@TfZb&H(Ig+
zF2uI&j0}7Hug@P(;%w>Pn!_OEo&%Z&-eiX;(fgIJpd#%*+GU^Zo!DW%7Q88~XzE~~
zj*Es+P177ECA{E$;ioWRZ-95QqG63kD9U!@_o*6h#*?jWbBC_OZ_bUt;)dPf@=*Bj
z6EIrgSuo0uLhJbBq3&@;km|+97X&6B%6uUyPl+^dwB2Om<mYFjBTOg^WORvt8%XMR
zHobx~6Pd_WvPuTkL=foD$6INFaCu`8M9%O&T7po#8#*6IgvgVGL$;z(Xw|DidkkGr
zH6?xFfO1>OE4G`$u|y7RZF%<n!K|s&x+O|&<!4HK^(2I5`9%~pcmsk_2Nn%Fy#m2_
zMV1|GVPwD_mC=jL?92wAbr@(G7#@-#x5aeRiD1E1gDc$Z!9li=LAIcD#_rqU%n9ji
zOg0_E`K**wbL2_XY6a(x5$Vs5OO&CkF=TPxtjK^KKFz?<2nRNjD&J=bIyxD_k!;kj
zT82R)hodG@<SLEed49_tq~#%bR<*mXkVov8ogSMp(YB+AaiivI@pM0|fHIX5?y;79
z1yM+$(%B$4fmAL2vyY3MBFgj4`d&6<X?2)FAmzKaE$v7iX@toB9EqQLa@t3_y;#Px
zFe2gKE6Og99Om9<t&e)7$xJ|tiN~ov6Q?JJMGaLk6cN@5D;g^7&@6Xwk&n@Y&4#Bf
zx~SeUyP0CgK_L$qd?j}@vb@)yvtE=YL2bi;E8t5M5j*-^Um|7|bJ_yV`EXi`i7G5n
zr$$GQMudnXfR)NbOPQC3E&hkQA?rUchFZXU_WpmJ&qyP*8HLPV<S78hrrb`}E4wzM
zq|KH_(KrpGAc0!BJ_L!2BS$OzY+PXga-?x<S}-zBIKp8&6z%bRvd^kCRdvU438`Ky
zUq(WR``|(~et5pYg`e|Ro`mf}v)4L-1)-5Z57_D3&X*m-ZL4}G>q{oa*?UW!_pvFg
zs#CtNyh&i^68j_hdSlFT;c_6p^~ho(hW~L^e!t@vJr-5f(*wbi<%gnX6-m`@*RG(b
z#}z1LM|#+-wmo21r<8!(dNMzdQ{@6MqiA=YYg@l&11$jg6@L~oiKVMSYP+d0V1-fj
z1_6pj!Li$u>w2l~)@CG#YC_0IXw}hhY>?Az9L6~WXi7w{Fs{ugsKx^H(-mz-`D=wC
z$*K&M?N5ht7nOe?%;jT4=gf<tG)QuCb}UQsQQ+xHw~>&$$U4g#IbXh!5IxWY#+^{2
z`@#sUFd&(Zq&6^2bbf^}24L2ga6C{T2aqG2dBly|;aIGJ;m8}ZbFMF+%WYJ=ykWGE
zIlx2)rr%=1qy)gOn2Vv2RP;ovKz>D*Cjnc~^yn@f`eNuEuu{Ru#%~uPT#{wRgRfFj
z$%E^>^$tTBIdJ7R0Vy4}+XbGkJY}&Rrzl7u4ltklsqgL84RZn>Pm884cjXaTUVfz^
z?RzzG16Gecnm?LpxWD;CK<L?mOwxGudb42cUfWLA))a)Zj^js1WaHL7+%>PYk*+_d
zyFa@Bbk&7vaG#s0NIOGF6*#jg$N3ZqMEBOT_f&js`-v49^adzRW9kN}?<lPdbKEcy
zY^Dr$uY+d`u|yFAF7cyrv9Sbj&#My$52$wwY4#{IUTnnFQ7!)n{^4*>!B11PlXSY6
z>UrIy^v}iPcW>`>?#~skI*Q#@GfxzMPkR4}n3I){mfky!<R^ZLWG@mW$gE%AshRcc
zCVoTPv3QmBaGEG`>EZHwQ%ZTyr(=mJD-qInRzEW|ECsA4zg_Yg&h{+?Yymz3al(Hz
zwVx09Vs!;nm;ZE%$3?^oEJXtO@%T0DgWd>&majnJgP$*(5<WLr@Xvlf?)_eJx|=L%
z^sEpVjB`Sn`3Wb6g}4W9i%d{T(|lFo9r+ujH+R`a%2&>JcjNR#LUY}{gMB+ODI!^c
zro`?GRmOupa;4)RfXjIAGkL*2$od<MgXL`Me4YkBIOs<xX~K#e$OePjvI-ckKwf2q
zm%wb=jJ8C1y*7o}Dp1FqmC+Vo%eR-%Nhh+?jTO%tE=fLE8wM@0U3L#(l{8g~daG_r
zd}R!0RhKMemg`3lDogeg(vbxdVH7n+v?#J^Z^h~u;DJ&&N(3I(k-mk)*1<N)__o6F
zco;Crga@S(%`;e>D=N~cro{ITs9m7;5tA{4;ov?hX1o&Ae3oBcVUofN0dnSWmBC&?
zsx^D&skJadN(IWC@e)q))|i6A6$k0~$R}%TBWfaB=^qIqp;xJIo)WQel!}#xssBHG
zy@x;5|NsAg9P2nn_THT1*efCA*c{>zva&a2MJnmoTgI_R_6pfMdykAHSs@jo6j>F&
z=i&8!f8OuU_xt_*56{cvc^|j?^@@yo{eC93Afb<#SsL_4ER@=HDk}t?(O}Xb;t{_0
zNg2^YQYTvmmM#mq0K4iYQ^|lVe?&VGk|4dg(m;b0*&`{pHY4amF}Vi?&4MvP!PFlE
ztX6b;f^-kJbADj?=34Y&lUBk7bgFwnxj-x+lWCTS#=n;!)e~>v0BX7KIs(@EjE?zl
zLWeH!a(Z39oWg)15a-aMaV((S{trS&RDu0JdEu%*cmBNNC1ye-;qsJ8FswB2U;;0v
zqw3Q%Fj@J(T56tOdK&{|f0HiEhcoov_6yl4U)%EksBCo|^6VRITL_G}4&8dxTo;<J
z9d(CojuO0YmHfTy5(C8eVtixHs>-CdSNkIH)71U|FxA0?wLr#p#=4cEL`gm06s4Na
zz4xSI*hfyjIhEyWyvQ|alla)kZtya9*RyVGJYH>j<!?g0(-LXF@cP7}5s6iyi_!GW
zfFrPFp%bC=>ny5YUtbXa>N}fz4pg>%R_6k0a(Z$gTweH!HNDxlb5;IqMfJgLZOZIQ
z?_M0CgJ2WygBYB5x*JHxr{`U9w&v;vX5t90P^xi*x3B_i0dBWsGAd%<eRPHFS`;P3
zXd~+Xzoq^kLdS_7aoAPd(C?b8dZZMPaL1Zl=hwCuPoP^#Tf^nBq(&Nx#G#k27ujBr
z)GwM~i0CZt@^8?3Kru~>UIiXQAmB_4AhDf^3$Xh^w_>+HQc5w;_6z})?e%i#seOeW
zn^ZZ@G5biMudL{`<Umra6uO_GvTjs`3g>zetdzg%*-PK@xx%d)5?V71TM6R=UQTMa
zi3e=6w4?ds;p;o~`DDcJ37sPC034s=V_^b<iL?ZFR5-9(y1=Xc@0NPb4Y;qt1*-lq
zlYH(1g%Epm6A<s*>w$#4zt>Af+99I5{7CSJQdns7Jz`4v{MA8LANR1d55L}u^>n06
z>sr<Saq)U^X1`T8R_xzwH=0oyum*!Ql<&WGt3%hiNzJ(X7!4o%3Zj$3zgaj%aeE-b
zDwR{XK3*pxU>V;)P{Ho4*(AO1jN}XVU%pm)Id*UNQkH#Vbz&l=<_#aTUc2j&r9jh{
zKfD&~2tu5L#-n`~Lz`C$)TV4#A6)qcE{qlZ^bwy2B>6x;TKe9@R+&2mxR>)@3~`M4
zYnjgl9Y7F=!G!yC(+IYNCn5+2P`b}>m2K0}1xoj_vX!H_Ry45pRiLs=JsXG8y}+yP
zw{J{6;-}$g&?bB#X?BlBW``39R3)Devd|WR`!0rlr{x4THm%O{*dfOEJPo95kB`0r
zFDF?Zh*+~5%)EzzxW^N!iq{!9W9X%NdRyt|yNUf?a!?B~fDrRy#53!`CV8PmvcqCm
zg3+NHU?d3IQ%TQUK`C@>eMEo(BKSy#u6YavpcP=>_GG07A;Hga_cipj9O$zAo9I2s
zj)7jf1TW0Z_1Y)_vmenW9qVA!9vLML*7V1g$WlMH0*leh(YE^n+=C-#2y~?q3mlKv
zuAtIiYgK8ILj1fm5c=!TD=n*dfb1y|-HW&QL!X&oIvjWTmvDarM>$29{7g#kum>oo
zq?xP|{96XW`z0DEPyJBpyJ#plf+~dQ&uWUIj5QZUK>_A}b>o<SReS#e%#r#X|1a;K
z$H>|bwOAZqBK!|`QJ?6)0dxQMQ%Q6HfVox)!xz9s50s7he&U6w%3>6&!<8dnXf`fY
z2zaqg>Ma#+joQwXiRUP%py&(oi7)(A##PZS4#MG2n43jZ)E)S$>g2q>nRH@Iw~J|y
z^MP*Mh(dRK51<Os{!;cMYyH_b5c`F>aXce`W5~zD_uC&?pRRy`=(x`o*S)$3@Kmcl
zyIX(%Xj<#^hUjgm_`T(v-K#sq9sYMb$ZVLcEDuw!a&zITJ%v!lwefoC18K4R2PnIr
z4(I3bp11ji&t_g&O$I8!gvJWBIF)hUKdWzu>lbg<UnX!jYL{+!<?(oN5;e75C2yAB
z|4+4t%RT@Y|EM&f;4$utF<=HV5vc6O%L-%j-RW%^)f24yaa18*wg*MLJ%sAlOnFJ1
zB8OuLo@ZZn<50o+yxC{`Q_lP)DOcs|dXzcnZNazPOZq<>RA-yMkC!;}!IMV3%{O2R
z*k*bsk0Hurq=T8*Y~~|)0gQi?nNkl0Fa|6yaz37#f&tZDc}dLDdbu+qj2mZb<sL0B
zi=G*czEGk3ho1^~vvA(O|FhZ~zowlZ1R$aHUd|YsbG|&YP+n;wrc1KCGZ(&SO8hC*
zy6<ufxRr?<X*MX<(1IUayjcs{Bd|gR<Q%@HJy=vP?LG!XYtLJ`2ZTVg#pn%a!LAV?
zQu!)FA}k?3%-Mi-uY2(Bl6VANh(-1=N7Md~fwBA@n-QUi@gEUlPG7tu1kBy{$Jsx-
zOL$8AY}WfJc^qRP-N+X4E_QX!HIfxu+G@r8;UG6={+o9iNry_Bx87wea7U1OG%>wU
zEcVn!!&yuWuH6!B)cg|L6uGYJ*Uf7)j8ma3A5q<vukC*lN+Y6<Pf~V&gy@sSDgc;M
z>{Mbr<+a8kL~~`mFpX<4{`RuFQz8VFsyftkML6%@ZO%bT&VHQtZ|Fup<m>pUI*Mt>
zU>NAe0l*wKvhP{_KOxWy?;p-jrQs2TxK(;Pnuxzg`s=Uvg;jXM9yDK`RDuZ5n#322
ziXDbt@X04qWI77*hb9nF%Sa45eoqrd1VVQPTCWB2iz~q+d%K_01{1XQLHt04gij8(
zf*JesppV3Zsf$)|UTjE}bx@*>DkPl~b8!<`kw8g3)q5Q`2ArFsrkH2&vB<AlJE@_3
zVH@>XB)qJZI5dQ`=#na=j16+B4Gy9$h2V>Mg2`}zxt@ej$>D+^<sZ`#|4kv*`kzh0
z|MLl<^Y~=DUvvQ`yTL{MnekE`I#Tm*b*N(~ywe0YlcKS^REIv2{10_#R(=vH=MgnR
zFY9Ky{!KGP@`do3P<v~}ILhQ^?%Ri3xA754{|KLj$j^k$NU2^JcM3Wzd!l4Mv%JEv
zo!+eU#+wO@IFdMP_OJUCo<OCi`?%G|aU`}j_#5l>I)|+L^hqo3k9;nkkQ>X_4=U&D
zUECZ4%>C}owe!Es`L(#8r98k$v3<Ma;Y=W{|DEksrC}%+Zj*4<o3Q_#(rD!T5O_=;
z0*^_M)uiVYm8ZZa;koE@YWl<D^XU(IA8s6L$6Npp!VMxHr~W9-Q#_M>fcwgDks1U4
zF))dJ8Bq3kr*l~M>!5pp9J#YCp}r=l_mWZBn{GWC5fBuV1U{#|I4dsWfw2WBfBe6L
z$u4%C*X~CNUo?ys-@t?@0$T9rj63RdpI{8*Yd8w=7Mz4Co1j}^aJc+SmV@R<j99hj
z1*39wf*6!N`wYgxxLualvr`-7s!LyIVI#>OU9R(72l~k%Yp}?r?62YKR&riaG<A7#
zb#b>yRsT6~6xc9mrpb6UdsYk3dZv9frI9JXfyvx<YJ?!SG{nB*q5!YWyj4@_m}bJc
z=WQ3mnSmU674uykJT0LjERHHq%{>7-LksF72nGc`Fio?r9+j?bxUvV=F#dz6xftkO
zJRv)K|3=i{z+{y_0Ci}`>d<fDok`e@RCn)ZRSj})M}*QWqDNC}UBbYZV6sIE__)R$
z1LfC9;wlj0H1V)Up9rH&GO6I=WhlmD-+SNo59g=wnOk4`i4CsAqOT_3bFR4>ct?AA
z<E>r&ZNEA7f{8;9x94$E?=8D-7A@Y-n&1`md2!CxxUBLs=kSqN$g=dB?{i@#niB<1
zu$V3sS;(e`x&a&B`(!TuIb&?C*C9JOA_n^P<jq?X+g<Mw{L1Leq^+`NjoO4&lFddm
zTswKczjf@N4N_PFMGUa(^!T%9eUN}bZ9;+uab=Ifo;k+m@2`0$4+TC)%H|aA=-1-v
zJ7v$rRSE?1gACX|CO^MU^!$O)`5&NRJikEHoc%e%HH-o2gsN26kFm=5h}LJ_D6c4@
z>w7_z?s-B;rI>zf9wpWID*oLb!rR&QAg2sME{SOg4hL>fel!SX3=Y17t<k`?fWM0Q
zVgP?DXw^03vg|=$xdTz6)y0)P)U~9rmI2hZC+4aQU;+Vv2fKTrFv>N6QOQkT$O(o8
zJJBBw_dldCfTpH%L3A{EXo9VYpe;Y*Jc}?)GE_w3@wJ>`2?qbYGf)Mdm`9hL)g7~c
zgl%W${~>HEP>ZqY&!HLu(nilXCM^*6YcEb!BsPrtFj=^SX7&hbEJjBFxWqKA10J0V
z4DMBDIYOC-Kxb8tZXr-BL@8uq%iq4B2a1zXUxZPmb>H>bg~m$#BHK5?Pugy6-fr~#
zXn8-zxOzkx`*VAFtogfTlHd7s6|=uBF_m^d0*F)8+6`!<XxnK0J=dbrP!p2osdGs>
z*j=+u*4kNiz>*P>s-4E*5?PXVxKGyRjlSoT{wlB~V$1z)({DUaUf1Tnl}?wJ@uc^S
zG3$d&+<Fui4L+OG=Qm3&+w-FWZC^T_Teal;cC~IJnl}ZQDv#yxbyBjWEFaB(SpMsa
z05G`c=YQgq)Sn<yoah2cPd-jw#%jq7f(e88nEdmcUjHdv1v;zw{7~9V`?Vm6Nbjf!
z#3P7pBtx9D5$QlNqA*yn&LlBL=ccq>wA6wORs4-_@MtU5Z`>*gT-Ufl*^#);N>9Be
zj9k$WcXw>eA9f{`lf)P<mN)kdNM>9lG+jQ6)G@BYj5FN1K67AqHrIef=MT8CdAe$8
z4%>S9m)!QhN}Ks)OwpV9(IRb5h4GI_T#A%*QRQ)|mdv&#w!+F$nR&TPnm6EH;_7Aj
z2Hf<e))%Xg%O~cMZTJn?G+2$Y@sRl|i&khY>#a&#qu~d(U?YP%WJaA5u{GUeI@1x6
zu^srNx*J2Ityz{()08c&%4n(Jb5;7PtKjX{?2P-n6+yLXt8m*_oRp!**BGG$Q`lMM
zgoAKcFJtk=&VWHaBY=Tz%dXq{N8%v(f_+HGK^Y7d$L$Q*KVp=L&;BGUMV3YmxTB4B
zl<lp;5M?f?$AF!fo$<>bO;9JOZEc(%4{<QXcWNOqrO9`}KD?x0{hBqreHTZ;s`|gN
z4-XgIn*j=zCNnw01aQxeI*<lNZ?Cuvp1T{3#D(JbUhWJ+t|$*XumL9+wDzhO7+iK)
zT2-`!kX{RX^+MRz_T{{WJGLSyW%{)N&HZMqoOVW1TuGJ3ja>fHTban+YwPiCh3)OS
z`QO|2UvqzJAl2jikx1n6*l!%)BOr2GbUWaC?^N}}?`y{ea#Yptog+)Ay6@gtVB^K2
z`3GC5O_s5ibxN`fv%nK`_&b@Dyzq$Qx<4ONIHVhc!F5(dOTF}d7@{#*F>eLHYu4Qx
zBW<`E%s8G$WR!>D;`|m8lH3h-PE2C!hLPD)scKOpF*;<sVHuF_lZ$2LUbxJ7{>2jm
zh%1m}1(eN&aA@mEAuV$xDfB9DGrHea9yE*xGgBJCbykK&{Q}hJB)KwGMmv9|L<y>>
zw|DIEZ19jISS03xg5}P`k6sP-o&OQ<-(Lt@*^^6V?Z&(H&rIt2g_;e=K2(F}L;4`v
zU}vQfl-bXu6dj~ISd7@f|7UXEA6~B5AM(*+`Jgf#7|nQhC=PV415z0|_A6<)+D(jO
zA3oT^=RcMpV520Yk9Z%gCdAA6KgXUjK>GN9&hC=_IlKEmh<?JB)VB*S%B4BV!2-kD
z%Z{tgCf~Dx`eMF5K>!M{x1GmH8yHE+w>2&}u5sHNB!GPKxiSqekU)O^nnJJMb%L?6
z;$7i&y?bohb2jf@I#)STn>X#gsdwoL_tj=VEVWpEnOh$7Mh8FF`t_47)(icnTaHAq
z+WA;)rZ|R=zCg9L4!F7%W*D8H7oUgg@JM%reT=#|_EfLRLvKdqC@>Hrkyz&le2>-Q
zOw3K&L9=JCq1L~fx(y!t?Fas3IW#Wpi}}zQYH{-OGnJj9F!ORtpF%E;*!k1lDb=o8
z)%M4eW`^>I;aw0hl8cT@39&RhulM(KSM}E+kj_FUjo=sx*6^T>kff*QvTt)e@=xq=
z^Yuu;#3Rp$44ov@%vWJfE#r#dWR_m@fHygFMf0yTajS?l0fC8vMh!yI^I7NhI2m>0
zS^0vgO}lU;Q7fbVW7_vqiHriRmWnr%_&%k4u*uLD%<yfEA-f+`TCCQ+=c&qaf%GO9
zq8hl6@MLk-^h~7dIe_skxnrk4J<q^WU&+;V2nJa`MT0+u#YFZ&^KUXmmlecNZz76r
zawQlPq?nx|N)%mC?@IFyc`M9|Qb%XX?-pmyz%Dzkn(Bj5<%ZA9Zm7!CPp<0tFy2Zb
zJ7gj?R|Z)Ont#S-R?xJ|l7NiVPkv?$C*j!zmE>W&+5Maa?==xGQ4txxo};T$3rjC$
zMa@mu;I%O*$j!CUEvL|TjNX;-P(QpECaQK?F!24}*^HZhw;8!mhSm3<@4k0!#kU#s
zSh2<4?ghPgEZ*Pl!pbm2SGe%bit1kPiy=W5V*Wl;*`4ePF%4XRbE9(qwfvVQAi$Y7
z8>}KiV<xEzwXYk#Ao|S|Sa?EFv6NNYiW-VnqXeYy<0veTh4HTdttd{~pb#uJaJ;WK
z?eDmo;Hzqypv8qV0<RRCoF5;)^_EtZ7N$P9v-RO>=~e%=h;zH%w_>wKA!{1f2*wrn
z%WzX7j~kOX`6M812oX`?D=S^mqUWblx-BXUtV{sYy6$6%s*P%(Tx#YX#dTZ(^}=D?
z#nr=nU4mBktafpx^$R1g2d-TDzn$H^{I6)(kjJMN-}DZ@oTc-RzgxjgiK2+H+V}H_
zH8k@sgBMePSz=I>2#^EEBJpr<ne?y{d1nD7;Qit~Q)(_qpd{@`=d{}J<jV_C21k!Z
zLwQ4$>Ar<==mrsysXz(>^QQdMXKcvM?KV^_K~x6H8#bZQ{;J9_Dh(Ziw=_{ED*WFl
zqZJA0gsL^wcwF`IRdf=sq^xy`->ua^lLfmqnBZFxY=N@)Q$R(u8t4gqE#D3^;zvV6
z#@GVN#xiYo;kq*Pa1UWXD**{4C=xd%iqGz2X8eJ{y=B0ZNX}3~Ga3NvkwP8de$zpI
zQ*p3It{U*$rdovl7}}cHVj(AzF_W5AeEzKs)o?1ptH(dnx(Pm0Oo8wTFl!e`?`N%H
zY<W7cTum(!iRmF%`d|VX)hH3Z0*L>F4Os!%7e+@AX7g@+;E6IH-`fmrKi4-o7C}zv
zjfaUoGjCu=I!-rW^)K}T4<)$|JDiYPvgn8Ow7JANmNI@^-Qfno_*al5tRuE~7W{g~
zbs$1v^bA+3stqIrQm(0inn|eZg9^`w0@4P9RAVGao|&|cS)f~o03=G~OtMU!7h`U*
z3hX}x&||fDup0v`uVgR=X`{0x0>7xDBf(T9sJ9iyQc!p#k#;HxkuK-z3v2SPw^@+E
z#`3$BF^G@1bi3zp99Q?dNc<!u;ol$6B#NE?7fI_H@P<cT)}#NTvXWZ<FRMG99OJES
zTs_K3*HJT5f&Z_THz6tzSC48*mN223|7m&2q(Y#(5B_O+Sx4_XP8XpIPYD(p1oTnx
zV%Oyb&+@kwdaco6+rQl2WW@|t?3&IAy{U2gSmOTG4`I>jFKkftnBHlni&m1A{E?*K
zY9DzJMYR^!f^vT(ooKF>U<6_~@i(kkR<PS)oJ>xL8DRWvy(uQYjg7tU2;||pvZ*ew
zNL-$8f#hl&%OtEqI(c28g3`djzSV11*#=7#)HHx!s>E|V4K=cAev1gcMe~&Z{ABH8
z1n$ghao&gOv+wZxBhT+=PYSx!u(%A1;!{ou#$WsFwm&9rzmfl?wlRs@ky?jfA)Ygs
z2s&rZn~>n6sSws1jBBBIm_aoE&abP<516mbu0@juBDifOC+c;g&udx=Vno^LKgLqL
zpXZ8~1=HIFOPy}!hbr|Vl4Dny9@-}*475y&lF5>AC84(ww^%ylOQ=&#p-joL1^yY-
z={9F{Z`d8`LLD<7_VkxzAYMhK3zK}x(BiZEC0Uv!>bD044!?mNX@pr~7}*8mFaEX4
zm=+8yU<=PqFGj+va4haTKcKOF-tWL?ou2s%3`@HR&o!MhLkTL=Pi^6l^k2j<W096f
znZ|10ZL5~;QMZ>}L|HSif70(+S}0js>fOf4T*IB)?T3#zYJ~1`;wJrq)slVc8^dCs
zo8;~>BDgRH&BMW22K>}zs}vj;Ew8V<rvW&tZ0~!|+1!jeV?~c_qIN(|e;NzR)g4dO
z`=&6jJ6VPSUTRFY8*9zk%>UG?a7jzmnZlm`*|T)4`eQUEVn?=rTf$t;XW~lnxZ!J~
z-Ep7W(r&DrLo8%$iPlQ@3Jzwv6msBh22NVOZ?!Drq||s~r$4;=?Z6!^$hVweGHZVO
zK%G|ag38)FF-SvYFFpVWgyWhyEkn<HDSc&od*24&?STEBh6zD*c!bkGPW)TT(7KT$
z1A1w^G|e3(R2v?s71AGdc{&YD&6+zO36grhPWw{q-=4P#>_~rqdpQ_L#fR_}QQB={
z@aSk}#Jh6esNu+L<Hr=sLw%YzhGNG1y2ea@4}~l@^tk9vp7S1U_-wvX#D*#cp6vX#
zqzb{xaCaJ0m(2$L{?c4F1~PwDH}iK%MJq&AiDwEV_K4pFy+99y=Ws1AV0Guy?17r?
zUDTt}!x!N>PO=LYH!eJf%dp@`T0p#)yhs)PPdzFnv`Q@6gF*1FUDTuJ5s-cwNRScF
z4oHN|lPjHfl_VoC*$m}H+ohxyCE#2@laElVcF!YP0|hY-0ao`+{n(HMe7eGd;5m8m
zXm9ZWMQY^G^#!0FE&8Z<pahcn^)c?wEcAVRFEMy?PwnXj_ayY8CKZf2Ug}m5*PDZ3
zWQkT%AOY_r?|aQDL+`|7vNt>tgPJIK9%%=s0|);@5N~i@ayk<TmOB^$BID7i!!lzS
zd)tkHtd3X4r#WS=7<sNxYBQ4<u@~WSe5|V%0$~nuJl4w9%=z(>YcHelxgk5eV^}k|
zpLMFI|E{OiSU=%$P?9J76ZMB!ZOZZB;Qn6%w6%=9>PuSZiFBS|JRFM~zl~5gFQ3>R
zr)3zO3N65c2$6tM+gri`+xy&qvNc)I!I3GI5_g%xxYU#d45AVmiYR6IQEUY>DH27+
zB4Jx7hiHS$)Y%g50e&*yQ{~*YsZwEridhtrWR}tQYVlq-@j`14l`1|M9amvk3Vkb<
z&`bMpe48rtwBeR}0oa=Sg~<@J@e|H`BB!f%GD2vwr|xRBD*|Ceb2F_>_Py!EK`+dU
zC5Zd->lNFF@lc!sX@UNOC=2mW{JQS>!Rv>$vA#%xB;cIU<ghONl{<BUr*?|xdVSuf
zetKQx!c1mr!#NOYq-;+S&fADM_YWrXid5MH|Mvn|9QZB7U;Y;U<&~$Qrv1+`#Xuw*
z6j%Uz6;>MHqK&4A*#TU1MwMjeP9`DnTZnBf1&#})nef)ouEjv6T9{s9`sD>tLqOP7
z!(uWIU3eyhwE@Ny8d*0|MjOAXR+#jez1?oCG!3#Is8Cy&efPfELK6AvdY%Pwi~qiH
z0}7Dqyu#p1TP%EgYt<9^OF%e4ruJjA7L#JGkSApoLAs>dO7`kc)uJSRxlZ2d!31U;
zU{T>Nbf7R_?VQF)GxY+f({!gSMeQk>A8E4!(b!5sEx%PAr+ef6mlt7F0*2Giap+gO
zQr>QE@4h<GlykH0){c|$zs~7-s`~AZcb7yDwa-lC3mZ)oE1w^CcKteLn3gu<f4mxz
zBKTWv!|Ex>%rM;@pUQbPh^dBnI{3Sk$#lq?mdu(F#B7r?{F{p=RYXD5?bV3ePta>B
zyuI)4U|u4RpG63neL@js#4>*Lle}(H824B+Wj0;`kiaGI<vSN9YVIP|6}8V8Ho{eI
zj2Ib+=#r!*o2d^tkaTYnI;Q(@HG)LbHhkfkN?dP)5qH;r!LyNUjl?<k9HaQKe|Jp3
zqy?rLp)QXL?Z)wM>jxj6%!$FW6Z(Oxk4zVQXJpVoDG+TGD0?u@ZB@kNTjZ)SAf<(Z
zzZg6>8#bnMSSJkRj;-AUvLD=Ie0;kndg4wPYg}~3t&%7>n*hlwg%GT&U32y{fM>5B
zDRUW#a8q3EDR6lI@bfPp1I3NZAq~a{Z!>qz7X5x#p<I~!zlGA(xKTANc()fdua+2!
z1|Bg-KI{B;DCp6RAn!2lIc8fDQTx;T_4_l>8}qlJlrLemra#W)UUsuA3VsOX$ny1y
zWlH{IGvr!q0X(yJ+o}8bWGm^%ZAWydCivc0Qom-{5~829IgzKDVj#((o>orL*&89^
zk@uOHC9nE1W~dQM{f1sPj(V1Ur1(=0U(lVzdA`KIrK-+WMc35atu_u9DF^OOFVVa`
zzdOC`FIRN*R>|q_0SXrCf?{;Bds2_;qeKQV0k)ohd~6xNS10on<*I#AXF|PSaXz-w
zEvyNjG>U(-t*xLl&@<@<*r@#XxA|9rGgK!?E+9I?pxD8i&Fh7``uHGE)r=nbeV~21
z(irq|xbt*$_CZ(Puazg7F$Bf_08wL=LwfD_)AR3V2Mj?$)G<3<9$nuUVB%fJ8y~(u
zjiql5BPPN$)XaW=3fY<TQ1v1NcYea~j@|*cAF({e76kdbaD+2UD6QmdTxYnSmwG+2
zE5@2HG)O!DpqeMzI}#n{KSP0U1yQ-`LL4R)YvbpcuEO$-GDP8EjpTd)k3gM3TxUU?
zq$(c5wJV03gci`2YF>;faLbhDOY|$w$9C~s!1>q;ncofn1MB8-K!~@$eMl0Qwuzw~
zM+V`D8W=KrjtL|IN{1|ttvd|QJCv5gzJSqHrwGdUeprXKE;gyi9;TGWpj*+OY@i>M
z9=oooxm`?&)hxd7YgX4$<~2;~vpyWD6Y7Of$pni$7#XuXO-j=e+j#DnK|-`zOtyPW
z3`-#ic{=-3t3MWY+rpZc5kjNa9{|rjwYhm$8IdWl0f!Yt+%#}h&a_!Ck&JMm<=+E`
zuOF1S$9jWMd6GHH_Fq6drspbNNj_P>JNPnZWozaAR`Vb?5y~pl&>I_J;d}0mIoE3<
z(Iy84jIYYBq1Gs51#UrSxx#5bE6pTj&K5}|C_ySYgMpDqvDn=$NT_v`s5+7}!yiA8
zsFu`pAe#Eq>JUTR{xd*kq=;B$569^+BB#qVjkbf+w+-us3g}EGDvTS=AUyLTVoFFY
zgBPks^%lMOp~z6PccXKSs6KF(KgQw<>RsE+TSMCoUAdjncf>86tlpeq*2LQLy-;Hc
zMBV`79Um&Qj$mr@ICp#gTIj%|gSzyIN=NCj_c&Wm9(k3s220{E`-6tklrZ8JFKW32
zDw5lK7<VV_#f93@Imk;-e30MR;>u|gx&0pyxsKA(I`dJ>z_Kb7oEP)?`cdm^;2<Y@
z?TYx!GZ2<B%1_0X^j%n@TK%4OO6BkTz375Rjv08B0TmTGGQAcIt>ws-1cv>yO<@_z
zLC(Xm4`-(jy54sOL9Z#Tf?4Lf=`eWWXG$ajm_#*>J&d9Vat&(U()$Ub;w$PEOX=Se
zbK^KDQbT8*`n;QnrUs7+FhHrb91n<vdntX_T=?%uz<>V5_BAdT7K8#8WqU~~5oA0U
z*hAn%UX*(&Qp|9`fKw^D4SO+c7xuQ$qMRpDr#WiaQ?E~EGw3t`_IW<sV<}jS$&N+?
zM-`~xk-(kkpL`mq2O{)$j|BMNyfArkT@6CVqhDcMUm~R1R0*8+PNw#@q_`Qrv>qrC
za$FA!#@#M1KRyZzRc2mf-pLfNwn$Dx`3j5zSh%4p>-GlxEu1#7hF6~JEUnjmnN)Ss
zsy2E5(|p34<~!cRLha^=nYNXBj*;)zMK!CTYWb`~qs11l$y59+8<*f$PecjX|1{nE
zIFu~-eWc^z*Ds`n&vQFF0J~1F#?krG>nB?e_F~T;4pt`zoa8=EuV(mg_Ug&YXHEm4
zrZ<28o|8VD3l`$NQ#X7G`5bUiMRJj<`*VuKfFft?9%Gda7}f6sG%`*<O$`EgZH-bS
z!cVi8iQaO49?bj`Od?o{w8JSUhDU{9Fl$si^0Q_Lo6Y^H0xeNjlSq=yl+YDkHAh1f
z{DNU&SLV%VCuUh^pUjkBs)l7aDF8781FDitxsEkL#_~(-Aqf%T6-_n6G^^k*y#98~
z5B1@eSEYLyZ^JV;MLGh4IiBmBGQsog&9EeV6R*&kE-~47H`5b>qn`T)+1__4$ugeX
zDuq?OE%kkxbZ+LNR!UULUz(dr@KN#QH3m1IVv6YUs&Z&kMRm10^lMQa)OD+-Wx2w&
znrU~z&9jS$VW+-qeN;ewPT;FxefMjWe$_Pn;#}=pxL`%@gkyh{)(o?@aLYH;b=TI{
z>?7QD;Ha2IEe!j}RM#$%`<}9yP$gyWG1M@)5B#KEte;^QN=Ax*8PLaJ51++`Dbm`x
zPgetOi@6Ku+*lpuM$IT)?ari%{L#+-Bp@1UP`PI1p7eSMmUA$n@v`{fO|dw+*sP%k
zEDd~4wp*`p^NQiGcdR2)y&{s&)wGEJV0lB{SU2BIuy|aSKfHAR-CgNr*ZCS%2oMR_
zeegja;TiMpUb`^EBh^=Rq_9|N;PQW)e&uj&bGkr@Kgnr@{?n>yeCy}DmsouPP2<3a
zn`J!M=_|z#0v~OcUkTMGPK2o4^U2j9|Lp}k`4}V7)aQ2RTZ(=*wNe+c71eq_sbjz`
z0&)C5HWPBc{`??>JxwQiSLl~;XzTUiuMH&VS<3Opm_~iX=w>3_>6YC<;)!+-$GOqI
zUY8;GD7kC;J5^06Y)<Ji#$*uzv*->!8wum-G9loHUp6;%hP_0Z>)n-}Mfg>a%jPD2
ziarf#N~{psMpq$vUnC&^vn@hpWV$9iyq$}bv{Z%FxGLfb0n4Rw0>A`o>Hwl4Ksj;!
z|Na-N<;xe#XB?W3hCcbhf#Sqm{>2jG)*)l`a+nzU@%8wN%b;`(Bj7o`Q^X@d`6b<K
z10?3t9|nb(4zq#`V(we;^03$qYuJh>CA;%-*O!4$Xp57aHc0HqT1WaUf~liX#R8K0
zqu=6Y5;M0z1n`7VvxQ6Lgq|2!JN}utnaqZbvVORqeH{m=TPeiC6l;C@Qy@Pfgfu=%
z$6>_-8_yVSQN;h;)I>5cRv#ZGbFA$lvj0e}wom3|#<<UoX9#=~KDn-p&cOcU?A5DI
zs;D35ErHiXXz2DP6y)ZwJQ3h!Ub9wVpdXzIm$(YmkHm1!BB!Ix4hrZLz``gA45M+q
zOvb#DPp>%9(@d-va45Qvd8{8~&kdPSQsQculQi!K!sDurtjGH^>FTff^IQ07e^cQh
z53kBd2;W3|LDhs9=}I*JZt0~ms|g`^A#g2Mhq6rOOv_$+b`uu_YzAtIjiaVC88U%^
z$#hv)aiSp$4si_Ssx_hi#0$%#=y#0s)`h?!DRZVu<Ur2sbD+<$F5Seeg1W&4h@1R7
z3~I#KjoQSjar<|p|MM3c8(`*iO^JcxKdW$1!z=0~t%<90cM>$$8}VN!Z<(mN=leSp
zZkU)bBO~l;YI>EQ`yRb!)B^3Ztfh6lT2NIzg}3Bac}@wgwuy{tpU1~BtoNy<7M7Q6
zEb+KVw8|)jR;|<tI4Pgf+7f;6U6&IB1)VM&bskrFh`Wl#5F8(Mfhfdi7rt5^U$5nO
zKCenhKfX#Nm)=8)2oghH{>9dYmBb-OE5`zf34iv8VWY+n^Sp6RHVT-uOikoAdl4nU
zDgjyQF+R)u@u1A>T5|YaD2dP-n4ea34Kf3rG5GKG%YXdc{tE!JR!l*8@prTB*S^$q
zd<1x?%F#QX<+xSyd6?;l#CVr7qXP31cYVo3P+EW*TEEmukM7$sgbjs7NC;~tyOs|`
z8AN1(f4K)3K?P>D3k-iP0_SHyTBW_$)6A2q7zeIUkRys2B=+{J%86-8FbXj-4_zKR
z`Z{lp|Aeqb1;^S9t#zN#918;VCy;3D{S^JYJX&yYxIF$~=S><+=IL9+g5Zm%&qcoo
zPnZe8V#9PAR#1<wNzA4ZJ2ovmAbqJ_>vZ&D`P6TFtUzQxMIYL-^S<AdWm4GlX!#Xs
zCUHcr{_*|oxtAg56W=WS4`x0v-Dr^U(&tj29ddiRa@w(ZK=Ho$soviYw|_3aeV22$
zMSNqNMt~Q0-Y_?<M#8Up$=VEtR3kR%FbB1c98SkDED2d<RE;**#rYYclW0Quj+gTa
zW`M2*4Y#f-L2{iPY<_%(JZymw*NF9}#4br~<itVO%6OhBsc(HuP-A|7B?&B`wd%$F
z*<>N!AY9AgfypDy!uvXYC-&(E@frGlqP`{z5m{l83CUK<Bk+WK*BUU$u+Y?^lq%uD
zPdS#+M4xj5sNd^zg*5O0LM3BY0P5@bXiF&eIGHLpdV8cSA>RAGmh8(*XEyHcweuXM
z`HVbh^nF2LlG!KqGi%uBzt0<lYMZ7;6RNV-GTojte-hYjD0CzkRDT^0y{kU!_jUK#
zob6Zr@{T~aZw+g%Mcpm!>W{y*$ChMGx3MLD73nxu=l4)K@U|CiJ|QBzr}D01?4Aag
zZ->8UeQr^t8~UYPRORoz0}mA{V)-A+nrP}#;QUPJ=TIHiE?WID1Y6rr=4MDh+}e*j
zZy2&5!fSL!Z3%^!bx3ru2p)hGt7&nU`3!&Y$c-r}y8)pRc_UA##ZSpjB|hFIV<WV;
zd(DVNobQ-Zow_zpab(q@BB`XI=lkNEoNH~a58A05?%#t;H{N)6p7TPzf3IeG?s4Jb
zhcyyBKDCu6bRxp*2`sa2@EAAQtdCDMs%00GZ&MU{rr&OVxN*Z$SvJ2ajQ#s&!nt$X
z7YJ4SwGWj%6dPavma{wV7JUf3?i;r!BCo8!o@>6>$ETQp9sCg1@pB~N{hynESMgr`
zbhlI<A;4$6bY^!R0f{Yq$#+1OC1$62vf%C33sD8s!8@z2x*w!g56*s`FHOUWA^#5P
z5@6K?Dfq74ic$gpdvxa+EX9erbLt}%-ycr@@6nxSD9JGfEYZ`Q@(`_So^?~sc)mCC
zl~}mU&JdaDuoBBXUZgDTYl?F>L=6j(c(}@r4b@XfA5R@TYSxsSCMQw_@$)+zSyVvg
z;;$xjO+Ti%)|P?emzr3#daT{7X5M&YA3-IE(PalB<(d~<FrRou{znwxPNjKLwhr`Y
zMVv<B&y<-BI36Je^ViGRf9Km%HD3sov=U->k~n$hxEZ&o{`w~=#FIIoWB_M&=Fba_
z-tCbKXZFSVMQiMzznjPdS^1-rBsFXqRP?5A6m9?Nm0_I{iL?<N`#~f=3#+60bquL6
z>ohg@YW`Iw<(oHTe&D@df=helg9U<bWv$CYq{ducdzReF*&z5R`@to_H`6QkKnNoD
zY3uxT092K5eG7WyZ${QjGHf2+r%@%J!dE&n2l<q7WvX1vHw~C+Nj!^miTe`?p#BGi
zoaE)2imu^|9fMe_T6~={nrMlJkC6=~%5b4Rt(Roh#jPY^tQM>N>91*vEn4|+Ru$aJ
zJv1y)iL*m{WoG64bQHXCvjT|{pRV{;08U(tMhioYikSNulsQ#y45H@hk{XE>Fg^4#
zJ(ug3WiX-RbWW9bBZs~)aKP5h>=&C~fmtSGv&c)#%1sh{$fgMo?q;TqbT!P6R124|
zo$vGeRSGtBx8oQq8`izXLnjQgeRX<eB6YBK_UFzOBUv-{OyjF%IjOF1TTuPy)!j_R
z4m&Qg?WOO7Q&TLWKrjO8(71kMv(CGk&ibu%LS(n$<xjAJzt=2uMWnr+hejggyPr+8
z4zw}X^1@Z%038#Qj~RuCBE+sRwH&?L3;WI<Ee58V2mWpoFP~IVg3YFWwh`xtGNY0)
zO!n((LZkhHf8?}5ETPmC2y&1RC)71X8J{e*ID`~zLvm}rm$~dyIO#elPN${!O<PUm
zG)pU0{XAS`t{Ac9L@JV<)^tEN6h&Fdjf(t;$1IDC^=KtlV_h58)U8WOtR%V?5ClQT
z*I|q0gUuUmW}9nwvu-FeG$NyN&9l@%=sztF!XJ(|gcS1;@v(|0%l`4HDI)oJy#D!W
zdma95%Kq#l1E;=MGaLo;;kjJzoTdlrG^)D0X)Uu^IAD*aI|9_W24hB)b$IZYsgNH)
zRnC@B6;^ggW0}UyZL}30!4(ju;`YS0@sahLGv}~8-}hGnr@CodUN=@h$Z=zu?FI`$
znrb41cOD?}8MA*+7y2-%Fu3PYLU^qa^z=olR~Aym<q3)D*S>H@f$`r}f0}EU*p=wZ
ze3K9k1#y;!Pb4lbjRAKEo2wXW&yOp|ubVrM;=cQDfV|3O91@gkA+YhaRft|oFGKvE
zg*&oBdJChdyo!H|s2sm(xMfiK^^bTDd0NT{6mhQH;QzbbZNJEt5d!V*Fq*430>Xm2
ze_RtX5W{eOvN#N&dY;kH**0u?;tB$Bc2-CtXP-6~pP$TJMahJkjL+wegIcG_bemwP
z5yX7~3!r+q>558#dvx?$L?(_1rxsr4Duw-S6_F0jQD{|a+KIak_*w3}C?Jq}?#U3v
zLTM1Q+)jm|3Z=|@`JoGgPl}_U<JFK#KHM6@wYz^UX@kG|P(@s^W*ZYE+&3uumlen5
zO(dNo7{Armjxd@3X+r?i>my;d13*FlT{t-V;!b<`@?)Oe*;ucAA;7RW^dT~YG(xB2
z*lS}n$IXd?t@2<i{>9OGXD)N|;O?gHgJ&mf@^(KuMtCea#a=yW`Kr?N;L6kHKeJz!
z`8YLBZZ>fE|J^#Ya>c*4sTV}eCUYmaPB=0>1YdbRA+%RtGb7B}29Xy|<|Sj{{?QA~
zf`LZ)b3~B^^{gwh4;HV-{%TEUkCiz@Oh-#@w|oq_K_A7KAOwwKf2K|!#fw4R8?sMU
zxG`dleSPyi54BKZC>r53HN}%^O0DIf!n4CY26%P1K4*r7u7P8OH#8l+%+|}4nMp6`
zf2Su9D$!MI0M)~7rcC_c+5<<;ZzM;fB3MJ9AV?dew=UdP5YR8Gng*lzmma!qmp>0a
zO)o22kJ^3_`S4u4u;N9$nLuUBHPtBE`k4jB7tNmqDsL|$dkS85Eo^Vs^q%gMikg5T
zh3vXT#)PU_6x=HBzA;{0Y@Bc;6>c7WG{(}>>Q{8vaarKEa9hnITBzuv?$x`BpT7}#
zbg);sd9+t`wtp{II9Z%}buxNw@5PP32AZ#&;IYq<Y_zujim$p^M3;I_ka{Kmb)K>l
zSGUjm7pkY(J(wn}TNUQe6`3^2f7$N-wg@6DST)fkIf5@w;w#(R)+g32b4OEMX3NYc
zlo%bs{tYu)_)`ZHb$1Hh;Jmstdg?snhp%j%W_U~QcCj7Kqd%B7FMEDGzf-g#894Fa
zgZCG<Pb(pMEJsTb#NYhZqkr$(eH4OHJlqI77v^10<7sbM<Mv)@eF>@rk$udUyYXnI
zk#?VMlRUb!t>S~fT2n~fBs)Jx(}x?j-`YZket&g3yLTVj^ZWXr-cpMFXuf~)7*<d4
zas%?Ve~xFhX~I_{L~$5ot22>|vbrbVml<Aez_3CFW2gPi&)Q<>W5kf)gT?QikzskN
zBm_T1-+4|xt)W5lOX!C{csb#{vYcSPcbxk6y;Sxfkhd9656QYSvT2xrAG(LJR455y
z*GYQP`2|mGuTLXE$p-qeA?JHaAzmeChMm1kAEiqvK6ajn<$Ui)8C%`U2(&8&KEf+j
zbZONvZn~E$(LaCPqSw|dZ}J7B<dt{&`e7ZdVTyI>f*@oMRr4`7qwgC$>g-h_I&{wq
zdk}$*eSwjy1&>9gJ_YrCawF`NA^R^#T4}KxPYBMic<Jj(h%MrcqebeN{!B_0>gUz>
zB_XQBkmr#VBQ&&7`tca*@Fn}?>zEj=`8awj&rE^IeiYpvd1_sDaiXiNj75n-n$Ws~
zsNIRSHMe?t-*~Y&Ug)@Gv{J?xfwp8a)5NS!a^_prSk}o6W-CWY_~M3RneEAho9`{M
z4g_Dlg%2jP+{dJf2_t9ako;(2Klj*ufSZ=&oarHby;d3opC5vp3T8gYgGg->nf2%m
z9n%=)?;!~tl`h&{#>O(X*nF*;NN{r6xGJINr>TdT0<_*!xyv)i;CNjEMlKm;7Dv>Z
z%o#)SyL)(4ZQXBjPY+7v$%DvI!_|TE2ZjjWo>db8(!V<xV@^hVP4Ns8wvGgI4TW-6
zY};%qGXm0}j2G=s11Rd1%}jq88gQi%*%kSySR197WZaso2S<w3EVxp!y)jO!fLG^b
zx_NCw$A`okRWWf`>&Ghdy+7Z+cuM}&<iQ)0p=;sAA`_~%%k?I8nNpeIupV<MLDRNC
z`i6K@q|o8XGtTj{daQ!5D@#2->b!%-BEB``u7{iMptVhN#~mldz!#$^-A03qJz{+y
zDT`J0pY%L=V00-9_}V63>9vXKn}jwI#9)M37SMA$t3gm~47Y%uTR8al6~M%41gZf!
zb%auyI$OW$@f8h-8q79WN_%xmXcV9}{o!09hMHd~3Sj_!0n%{oChRmOSuefTm=fFr
zs_Tno?dFCs40XNhjUY2rTBpuB?uV^}P#TB@)3+ZFh|nvMGY+gghGA$kHcbZi7?&PT
zaDxb%=H#A`ZCES)B!?foeHJ1lrfJYitX1+hDQ;(&VkwwxD02=Qwxj7p2OeWlolDL7
zGwl9Eb{r)lkum1(DAwirVLT_ZsO|N*rTfJD317HL*JifUExOprw(PL0gVvqO&w@aI
zt*Iz?8l2=`NZ`q7hB3fzZlTN{&4}f7vs|0l(tZ4hSl$_2_<e`}&w{ASS4zTDsBq^<
zLz#8Kd=K35=2x@D)44`tLc9R4?Z-L6_%Su9de_m><cz=Phjp9klH-OCVY}~o;PrYU
ziL0*9ir$xvDyNnb-W9o3{kW6pTAFl9+pQBYoh`L-^Q2VbME)oTmQlHlxSS`vr=4j3
zbz#iTlkWj9YL@~(Yj#wrs*#BcA+i2L+;&5v@d5XP|C@2}A47n@mm_Wnjetc9I<F5$
zfsNhtz!855B>=Mzk5VL^B+i6ar1A`L>mIAKcTrU8`Rnxi*U-fiSzH<hh;k4-DoGgX
z(y!HEr^N`<jveX8F=%uiysuOB&PAu204KdDYE%e~bzd|a>9vul0CY{+oiV>E4AISo
z(VX82Uxx#6Bkr-ZZi6y3Ki#QjvzT!^_lbZp+3FqslyIIb)oicYPaSa_rPy&(UWeE;
zQK#^w)`R{@1{HJmSMM9#BDyTgIm;i3yJ27Y{1#NT_FG>F@Ob>^U48=2ga_nzELzKY
z2>{d{dBDrP_<>ma`F|XpPtTh@jqWLJrM&q1>UAw8^w*xSVt1lTwbDWP$0NJ0=~rjx
zU#Fc`p1k_R!10vqgm^U=1WBh;KGr(m2qp#Q?ilj92qR@G<*WI20;c|Jp%hI;Xf8>e
zqp66@eBSlQQwPW!Wi0JxeqaM8eI`bX-Gp0<gc>~*_X9Si8KVyHU;`vlXP;Ax|Ka+C
z1xDP(SaC$R5^>Al!i}VDDOqZbrmIe$y)7~iVCiq8GW7MO%TL&|$e?)R>7GgIGnx0n
zLmI?vk=W8)o*(Z^T>~trH?u<gTEApRY?lTX_+J}M%uYO$-YN(-YctRaGf6Bj!h*M4
zRAA)5Pv~D)Z_I9Zxt_O{OW-*bXzdu#XMl0wSf>q_UNWmlZez!0X{FiE;N2MXj&`pL
z70#N54MtgOfT!<i-qoEmGlalk5NeL<6}a1ad9l3&0p(Ke<DJ-T-NiCQhKw>12vqPp
zue$Y`t2SKH|0nWM>dEhy#b0}wP;hq454^i1lkIzX<R53h(vc(I7!1sWvoPtiq1PvA
zvg{kvd%0QsXz;OQ`vc@Y{Nb?!!f%SHn>zYyB5VSDy|ssB7r#(7g~f`2oYIxnhK1F%
zKTo$XL2S*yNU}sNetqp%`t8)J2^bewEGJ{jov$5~o$(v^7#BZIn<W@w@vgTr{$zK5
zPjTaUjWR!Ws;Y8Xo#mj0IJ?C*6RJw9LXy@_U7e!D@_R4Jg-$0=1)eVk+WdmC>`mG@
zPmS%NX-xM+QLpcCL-S&Qt2b^;yzXi2IB0)B{$)>Hx4iFc{^VXi%}Ztaf)DXVGz3C<
z0fZxh9}LP0Kda3Y&GgxCCIMal4D9lsAL6lasNkn(An4SjH^QBhf2Hu0+lHo>=TdzD
zP{WBjS7ZNxW~q0gcxfCN6Y&eEx`)Zoielo{>JoVPjIyirRi2zh^H@3(+t6SIGixH!
zedOx!KnMe#4Wv-Kw-qaP^}bTRnqf;X(I}A76^|w3Q|_a*oeE?5^UVI-50S_|w->Gy
zs^=8RNX2tn6SkmTK%(8J8Y%N5(j-5ZT04Ycld39`HWJGnizk&1QeoWJ{AW??#V!#E
zc%3zeWc+{;_YMK2C!ET?riTR>0!RZccxC3F36T~!#=-DI`88dWR#ic`)(Fbj;DT`=
zJu;%}T1T5l=D?qqo~RZnfvt0XF5n=Z_A})>M|FS$?}SE@2{7W`7|R9n<Ov34Khs8j
zu#4XGAwgp>Y{ROKGX48(G*}?N6W}PLtUqXzT7us)r2%dlxycB#CJw_qmy!#)X|L)^
z{GEl*sir&_AR1<G3z5lbG~(++By;(Sw4FQ9=aG-s-`q=+MJk^2D~yp@=MfmK*ivlk
z1^aQ*;)VdQiZ~#rA`xxltjuLg?uAvNzzqRZT*;`%@j-~2<*3_j2Kb-U3R!$1Fv>l=
z+w%t{G86n15K0X0pO4&ip+NVLryb&#Bq}kBW$kB^JW^JG4~O!Vnn5V`LazHOx!Q<$
z1yNaSy|9k!5ge85<18a44AIg;*yhVrx~7N#^ZP3GekcigJ;bq!!px{{uF2p_l~0tQ
z;-mY}_7bs|-S1zRy??~eJqoK9F`*VB8&m0@Q?EsA32LPdG7Sfp*E|p|a4-rnedc`a
zZth<phbozcDQpu@>8_cp5z9ivxqU%n+CyOt+eIl^)l}W&sw(8Y$8!yiskNa#N;b#T
z7K`h15^c*64?9#*2j-AV388hLN#f3SwX^8NFOjWdZ>Y^Yx&yQv0}72<X(&&7wY!^X
zSp)iTtS&5iaMyz?_$~I1MX-m(jz-|XVyMVQAu&X^CYUCc=xPxdFFUd(luu_3;$cH<
zr#+6jnG{r&^RutCQou<4CnO17K)#*PXLY=Y6(3){%hLlk?p%#jzZ`ML`6l8SWv>q*
zDZCS0DDf;~fr)~1GNEdI67GndH&I-N8W|&Cellv(SqEF8ijwp{8M8i<Am&6$CvuvO
z=;%fz=l{th`NVmiT_3Z*!|C*y7oQlUeeY+o&;D~$0?vu}w&9HL*-ld5TPIF`NajT(
zCn~)onvD52oM}@Rl5}t~8QK<!uL*Wh=nG{K9NzO-FWl5&fzPn6EyN<I!1{J{H;V6(
z`~ID-G=9cBm!9gYLt@}|TW@2g>}<C3VGfBoOXKxgiUW1>nXh*EeDBq%zAI(2F*%bi
zwnOrpp7^9v-t~~Pfc`ja_NDn|`<q$tFQar}?@bbRNS^RsymZI(RGgJ&HEj#)b0K76
zHBD`L*E1FKX~%@9;&0NREp{ye_MgI`^TK$q(EU_!-5=5B+3OUL9_q;MAMuYnK5~gE
zNx9AJxh@|ma*WBS!x23{Q`?t5J;T!)AzYCF;VP4<UufoB%fCzVUq)AC8?Q?eMxU^L
zxvn_Ue4Xc$dEb{WTDKp);;xT$keS@t4tg}jbi+4|4%o4Z#?2KzNvu|Jl4ggrUso{7
z+%Nk3oa}3?l0BZEFT*aU)$R7>G{XG0?`%u{N54Ouu=~HdvU2r_w7fC)v40G57~ijk
zKpL)hGHQPIGubLaz<%a9inECB4BgABu6H_<b#_pAJNT;3%EM|FV4GJHw&SGtdtou~
zFh5UL{l8Cg|EIqBdvZC`_|N)g2U&}&Z^Thc5P**jT=fTIjVdng<tpU)D~h%Ct7JxF
z{ax@0!U>$Vv0CH?rNCAH*;PK3w;jMt18!9Ovi#PQoDQv=?TPG}LL}lF_I*Ap?G2#5
zA&k+90ao}E6^{trU-T)%Zw%*XHv?ujf5n5vF@Qu8c-+vo>>q;(?u(=mw9IB4$*>I}
z4wqHAxG|A*3h!1L`!M<V7fC#;ICdB?8dz~FcqU$&-4xo<aJoFjm~Y)}IEK?--@N-<
zTJ1|u9}wdl<ba4V;0HR);>h{SeEru@OT_Eo?YtDXa}K>TfLdxy7Bnf`+41<xm%f{(
z&pQ78{@tmqKjRre|M&FW8sDmMfju>d8T99N&J+A=E&7Oz9lJq%Xz);82;*tJCVbF+
zO*!oAo%DQ6-<>@bdCr;JN*JCMX$x_~y+rOOB|206uEOiYISBb-v5$|wc2AMRWVes?
zSzZ1>Eal`V6SQ>H+8&HNj3_JR^=?=azX>l;J;@cq=1Hi5Z+}k3;FqDfW758*B$1H*
zP03iKG6q<NS)Uq{v?%1px%r%3I`*jI{T<VE;67;Uk>^jRe@24a0jn*Jv1gzE%C~!s
zghS%=oxIk3LO+QX*0rLXPc@OIB!uo(JT2nUdBsL_NA0#T7yqzXNo3PK!$`U|%MrJi
zRDYQ(llrLL*lUJfr&rd2nHJrnCzS<v8|aK*>@?1wl?vA``LS@vOexb=w~!{8e={F1
zkh@p)6?MP5eXU%ZM)#OHdb#5O?&P6Sb)j}*VD;pRaUSyMdg7uzPO~D${i7eam#dY2
zpgQxZb60}QjP3k7mW0Lu@E{CM2=90)280Ts;g-WL5~E|jXmv92Kl#9o$>j=v*@p~K
zd7Wnb>Fb?rjdGm15dHkY7h_GnC*B>OjP6QJn8=m-&fNE0{^e~I0_c9bQtn<`7%zWy
zZLzyG=e}%ncaGoqgtAih@~e^azol$pn`6!9fnzS3t0Bq8{uvRZxh=XG>Ed@kKD(kG
zOWVj<2;7)F_@*mtKcn&RQ%IN%PVL05PV6+b_hGZ>`+Y6-h6htng6bIH7yn*(=Jad(
z{<rM!tuKk&_r|HNbbK5>FX{LOq|p}l2Z==$JZD25{Q1@CV6}X>RR3AQdo_aN{c&rG
zN2mE_NXgl$+)3x_r^F^#&aK&yoSLMM54ySm63HriFer9&*@Le*L2VZ5_5bnpmH|<=
zZQJeu0}MTM>(JeZlnO|fgwoyJARy|{Lps0^1B!Gb-Jo=Lrvd^}A_593%DM*c=UMmr
zt@m4h`Oh5Jc^vz`ZH+js9F}<AuzDb@OK74KS{k}wB^cUOa;w_44;CRDCD%={6Uxl3
z$s!|X1;+6x;6x6>3Do5PxMy|L7dY_;<uv#WOkYk@j^L_jCrzg}PrrX9YfV%agqsUT
zn2O|C?23Unx&<iZy;!Lp+b9}d7RL%6lK64U1Nmeih$j9q6PDh0B`YFoewjy&o=Fwb
z$tC&=_f(P9!vd!#6VNn328;reVtviDxwqtUMUA@&(UK;Nd#C+fz2r&O>|?A+frTo{
z$!y_%A8Gu3hQ7hcWwPv0T=G&w-yYT?qENP+8{GKXX?s}6RaI^tsbQc>C0p#L&3mU|
z7;!kA+JPDpDyJOXAx_C?i5L{=IvwWjr${NOu&<8gsWs3OLo*q3`eY8hbQ~s3e;tCp
zU9PVsXfcC|Ax@N<px1h?neu8qWKt%S{_4T{XiE0$b}pY~wc)3tb+6z3;JUNII=Kp+
zO~+&AQh1uLW2^*MCBfAq;FixyOzXzckNCtdP^#r-jg^0(I1WMSCjJegIn$|H$HJED
zqg67TJbCv^Q<lXFTcmLBO32UVF?=ggtc2f13WK4N-%53!x=8Zp+_z5iGr2p)o$n+P
zuE~EKexh#6z_z4Xkyme82LTy9!HLJKmnZQ`C^y@d#$}Aic@fxW3(<zQezT)4$yPrw
zF}@!o!HuA51K<pg<v~}IT;-l}<tBCa3GgrRK{Ryyit4#o13yz$QPrV#w;0jG77}$y
z8x@XSA7?Z`;dV0={PqGGH%G6M=UK{rzj$y<kznzLM&qK0ySuJT#_C-OWLyr|Y6NWd
z3G(<(qn5j)Kcni#+4rUt5<&M|4YMY?^Ezltq)+(V>W(a}?3BQf-wQ_auRqgtx9!J+
z%2O=9yrFIX+~HwWcd+_7uc^)ShoEcuFX&f6TE(yC;~`1<A3z@-cQUCRJ*h&iuk%aZ
zCQ)7wFRxokP`!9SuwE7PTf-9M8rZ<Z>7|%_5E(SM-Y1+`6Yog;5oZ)mUw7xTJ1*-w
z)j=;CGs%gYvWW?W*kZ5ro`{b$f6CI_(GbJbc%*#F2D@kA5buo@)II%eG`G}kO^21V
zt7&_52)($q@=C_<uq6dK`W3cF5N>P|8=U{K``A;gPCh8-)*_V+!&BS`ukfQC-?Gc$
ziZ;jQrHX=Z<K@7}#QFlZ1VDMBGpanF%Gdm{tC#wxdhxnk_x!mtM`ZBqPJRTe)!*ep
z*9O0W=GLXO7w#>q^0{M5TxPd5ezQ-(3ms|SuuSFgd+<gU&S!2_*+(AQ;bbj!r{%m!
z7%OqOsk4+_`@P|{0GGSxlO;nRrFxECq`|Hn8MSIt>%!PkK-DjDN4Z-q%(W0*xAnhA
zj><1V?~cbn@9N*-YafR(Uj99Dj2Hc%Hw^ec!SnxZ-eXL~eKG$dcn<6{RCT%aV_p1f
zFic%s?C|;=Oz`|1qn&aj^2GGxT|Ba<@=xJ@yU@B){ftP(vn=3-fuZ=gjG4HS&lFqr
zDD#Wklmqj=rtE~bvC^p4`Qz|d>-X}NHj$0-HJK*C_wR)APnchRXEg0Z@Vy^?Q~=yC
zkZc;+n#Q7J<X}qI>}EvrwT<J3R;&1)LKYA_AN#M#m65+^1<&>1&Ekep`L)&NS;b`D
z+Tcy;Cz}aLr=I{*@p%AOa>>?^7%q$EBa&AKi~f#Rd7T|H%xN3WFN8dAg#27QSbFg7
z=ugMN#mTR!rYnZ$e|}%q?0k5>GE1A|fb-{kEwq%QBqx-3b9?=H(js+k#MX8+H9gAA
zXTy?m=e8Wnjc0*|h!bY{ycjNrlH5nUX@hx2XyLD$k3_~7X+-p#HpVf!0rr~>>`=o*
z=_vbzdyEkq0C`M#2@Ai7sl_JQ+ProafO)q(<bys$(<B?!HV)F;<S99z%U+>(j9qJ6
z&{+n<+@D@L%?CMV1tkV;XJ=0B6~BUGbCzU2?=C1zzwRS3L-&_+y*LT=Q2@nfuL#{}
z6X%A?q;}MpwbL27_Hvh1G?taoxCdUr8QgL`ZtW|Dts&;I`$wgnUnA6GU5#6h)WfPA
zuuV&=Y4#o+8n?5Ke9Fo*Sx&B-$fS06ZE*2-t?P9la<3ZFb1iS^iOrgCoY_YkHt)M=
zc(|-Nd~;V?>~EuP6H2wobV4J1)Xm)Ezg9UFUZhmLHTn8vN|-}@z2|z~Q<2C*X>Uqg
zT74a$zK!e_CK7u&hi%5RkQ~5S9I4F7(G)@rWqxy*H);}uE!Hk+J4e(?p1W8#E^;nA
zhZt307avzVb@O|qx^n4fpr~={+aq1e`ub66oD>xzt7u@<+ohWa2#F7-HYk}kRh-K8
z^a-4=c70AB==82M*InU!cXbEq0p~)g;k_9xysZ=>c6d9CGo*TfO^)yB>72emA{|G<
z7hE}Vs5YwkZCZFn=tp0y&ikA~Pj7hcKGtQ8Z*fFtt4+&4(3U!IZy{|nuAQ-v**4g?
zK_kRrl=ov#tA<$ik<it*5hj({yx}uI<=DY{DjXJ~zo;opr6X|0e)oZ7>I;1a`~sj;
zx>qcMCGp%`Pg^Q3!UlujxJjr!-A$#gR=bP%hdibaH-5P8W1EEw^pWs+sGeWXdto@Z
zeo{j)R34b@z8)<R_$p3v3e@4yZn`i+!wmd@=HtjiP$+o_ZIXr?h=N{No*)1qkDVMd
z_sPYRTxr0<STT`3Dl7`BP9U;36~oCL8R>$8Uz5i)L4-dYlXQB!af9Mk^%Yp6yZ3mp
z)N&%sfp3Erc#jo6jut1YNL(|&T)Z|5+r8S<2+a_sAZK(p>4`j`ay&ss9%9jH!{OJR
zQg9E&vrszGu%s8y&hTM%sc?^Y7D~(wLush5(MZqSxxJV3^{qG%y!ux0!v)H~nqixU
zlhlfs!e&;v7|lRdi>8VM!Meyui)C%Yu7WY)*N;X`xvk0e)j6%CbKbe=A;ATdh9cBE
zSWXTanSnL^^jqtpKAER4cVuy}HnHFVt*5V!BZ|#{g@@<zbZR<VINwFr)x@)(Gq3Sf
z<w^Pf-Y~#pSQJj=w88T!sTW{kjv{C}#xlt}RHCe_K%gQlE<pN}Ta@i5t-2&k5ZKoX
za_A9~gir~vQ18WcF14l<aTM|;sA^aSr)3O_-xK$bQ`0S*&N!^kMIlvLTBY=pH|<Mq
z3-D?t5>6NJrk2Y2yJ*E^>LYZhiwru-?u_7oDhcO`oVrSN&0`;i1X*Dj$CsN`UBC_f
zZgJ{pl|TH|H(zF=NaYBR5XJ+7=M3MgBU0t008(9hzekne50?i$>Pbpen_-yXIiC?>
zzXVO?i;nX9?5;Gg#|LZL!`(Dg+o)%1Aq}Rw2M>P{8c1Dr8SvF^^F7eeSYlt3;A=_X
zcjt07oh&k_$F{CCFmuiOV8hW|&MfE|H!|07)Y#B5m*iW8y%xuPn{V{@WI!c02wSI{
zeYY?IHy)KHV|QNPpHK;5`kMGRvR8$xC``ccH?l{GkY8(_-0Z~cGpJ=_?B(D%(8THp
zHn)gA8Y44tIGmfNYlHO3Vh_Wadx*b3A!&(b7!`e0h<b<(l?K4;M9{{WzqH{QT<jIk
z9^~Nm#`YhR9H7_(z3BU93sWh;LGOO8i*>U@0P70&e(#j<ms>U>LBnK0J}A@pZGOWa
zN`^<Z_v<Tih2xB2b`~|LiI6R!x`8VSSBJV39+6NP$ohETcwP2+yd$R^tk;KTF!3Xu
z$^_oeNrbkaK2mmAIpu^W(yP8;j=Pw%eUp@Yu)gSahchf9hd|3&ffnAmr{`({0_WJF
z36ro|R<Zm8al_0aScoL3vB8H*MD$i9l<JVq&ReRBW!}u`=C{8uIOi%=yK5cR(=k>J
zD#z7ECKQ@}`pG|W<X=A_>h55<!oTz^rYcnHGrMuyVmr-w<Jk0P>*r7SHUfs4Q##xp
z=l@#V`u@Em_m$@p8JV>ci*tiz^UnqY+j9x2{$@^NMV3%(Vqw+DUXJmYSkv~+(!eg^
zOwsszuywE+q-9V=@C0uwY($#OB%*-BT-~g4bqemFEB8N0e<FbF`ENPx-<CtC<K&)b
zQW;guH-b`JI^AE(VHk5_1B04R5|DGy7u*Nc6!yHp5i$qpq&uVW!X(luc~!*^p7H`*
zXNLO3DQVu-ug1fErENFHy`HVg{qv2`5u8h1_YzmEV^8He)<2WStfR`SV!_Glmic!l
za5`V<)f>)VjpGRj7xFM_N@_?=fkb6q<4qzKXH8%y@Qf&)8k@hGx=<nKe%y^$&Pk;s
zb~oGBj8wt<3sqvCJFDL0__S4zR02ra9@{U~OD*>&m^2N{zfHM4ZpPc(ztO^S^HXJe
ztMU3cwStgf2b<5q`j8Fq8{zfK{^R@7=%%~bvht^CQ@)pPZ-hKK|FdqGHevGg_x^cO
z@lE?nXT=ZC5Bq$Go?(+L8if)wBdq-8{J7TLrz#zCo>OuTq(yZ}mC!^GsV(MuMj2(i
zLL`<pZ^X<OLRj7T^OW)wlDmvv#S_m5&L<FH^^9W!q(8ve#fjbmiFfw1J-eHUYp0No
zv;!DA4yE>dZ5eV*E)QC1?Tz*I_NLKJMSD7&++H)L8MM#nU&j&qpoUluE*$V*ZM&oG
zS!iEInJ}Uen_Ovevpi4^ZsB=GkOHU<xK2QYdw}3$84nLl^T{&E%!#+G2uvr&=8i(G
zbGsoOY`D0{{xWoi2~DxnX3GvLN}FRXIbnf6OQ3H(fCsuX?<cjIC0%Undv6=|bvYf_
zv&^8Qcq(d=lcZUd%Cja1jE!6FD+1-c-N0g?I_co0kU_}0sjyIpt6Rh2+Z_+D$VH?X
zuG#4Ksn#DBjY96}I-B=>c%d*a6)>&YQdhk{a;W?5t;^#M3Pv{}D;nF?tp1tJ6%l(X
zd|J^Sunu<35LbC>?J%0X>!hDhiAl^vtXwl@jQ*V{@qo<8rO24vc@f@g>n^i;<2y2r
z-qSUyKD_eM_q1qQm;p@4UnP-U_-B6@B?z=~qtfgS(#Ryg;Xda(BsLDN#a87xhV=LO
z{Jro?IGNk4i0M#eEd*BYCJ^ffNPjAVL0gvMx)2%f*Bs#+jHwDk|8OVLJ%abfs980!
z(di98He&k)kwAO-{lr1-h<4lO-=jT2N3lm9ZN!zGq_W}Nj(_0T$u}$=PfYH?d#A={
z@SaY6*0g+jTt09o4tv&fV(A;#gkIIf>cZQ)9~=2(bU$$GzC8PR0H_~M*U|xy&fq7Z
zn#;?cn*u+Rt{FNIO@KS$)cMTF<~dgH1CeoPA~Esie>=-IlVGe)WAKn~%v1)Zv%Eo|
zBy!zZ7LLE>?qifh{|7_oDjL9aF%;nBVn}}(il!J$SBMSwDjtn)$z;SsSylWu5QfPb
zFBWFuC`x`gU?(tz-D(vI#QK$QNpD~qpQ+*-Sw)gxGjwbTd&vhv{opvPI`C_*GYuym
zg%MIA);a<t3D8M_oWspM1gMkz9?GlJ6=W4E<WoS!p!3@PXuUSlEG(u(vyk`KBDuPq
zH9+HsaN{Ewuuvz_=!iltnPMyx3p}ExGiyQJo*{D=yR<4S2WWH<+Ge;meTdkB4DC$s
z7yw3>=yF0!jp<#VQDiQmILTVn=si!S)6=Fn1#hX18d*@jd`I<(bZCjr_XcJ59;%ph
zuk?!Mi6}Vhs~M+E*50^hUY+PZ)s9@b@uaV^eokx1jyzAwq_bds7D>k^MMnK8Z;Seu
z^uM|8l9x>|ornp5Ai3%WvB?V6R{1V99EveRVK%6bz|Esn+cP+h0R#^vh)_`T4xFy1
zlOwuNEyHjp3OsDExIv-#VoqU(RJKJ!o6+~~_Vg(%Dj<|9CwL^0+-$t;6$kXL#$&Ni
zb%=tQi@mD?cPPJW-=jAs1vt<{b%S=+UfQ0;^2DQk!|)3Q`mj6X)<mYr9?k%TID3A1
zg{g>vKU}rR%n&PqtogSN-(gvi6^{2@7l&CPbp_O_PJPnL34Wjb@?1$ZW${-gujqxi
z%1I{hO-7KMU@Jl($?X-bvC1W0#nxGk<()2LhQF0V_VR0=K#o^<kkNVT;@F#j%5p*_
z#K%VRVUQbm@@}|JSRIPI-%_#;q2LEEJbo0T$Vy47YY;`eEdb#FA2XQD$~C@BiqXQ8
z{qS-2{MN<q!DqjIS;A;GJ4@86RcPWFuCSY<$r^?1*;m#77&Ld?8x;;a)qoOO_IHy;
z9otKel2e-E^|2V#*c-Kz(;DLS-=*@7P?Lo+>f;U2rG0%G)Xq)znyy!h<|Hbn{Sn(c
zx*_>_FI%Sy@|(Bu24!cz#-iQq8?1t&O|nJOUxnCmI~ot^-w+EI3US~mkDMMR-t#ee
zThSwI$a%93A*3ND?=Z~XIclX`XOc4+@ruEuI2DE?01uV}slvxX1AI+xRL2k+{hZDi
zKP%*_iKc*W(jzg!N0JyvNcan$H1V)Rop{Z`&DdHid*aU(Y%&O(X}3cE%Dyh5{{7&E
zX2H#>(9a9jl%{X`-}_hj3OIQ$Z4h>8`%h&ve`YUVUTTuCsjV@07mmB_@hYQB2ysEA
z0LQ{BRejtl)pZom_G|6sVmHB#)|cQF83Ii3Q9m>+m)x7&o~XGK*a;X=iTn?|)W633
zzgGVx*U<)M-hWpAVlJzT8_As-kqWU)JbDJD*ZPJb(ZZ5+AyadN>Zx_KZKcn?SuaMf
z6DKVyzAF?Dm<L}Fg8Mf+!-{qC71r)!#=JoLwO*$s$g1lEy*^^Ag%}T6H5&P@%uMYM
z&^TobBW3Pl%!9yH0EjbQ{e&5C-+y<#`Ug;XANzub*Q6OmW)cU04!VOGOdlYBN&sX2
zg0xx(#fQ%_mf1i*kz+a%z?4g{KMNJB%pP0$dN7gu<owNNq9&J(LCUMdSMC1p4*dY>
zCvlbXaD7&3;VtuTmTIUAI0jh#Uz-PKvJCHo>5dPV-5(e8#3uj#h4Fe#yu0^Y_fI>%
zr9%U=n5EWzjJ^Sv;Nc=1ETOv^3doFE6t&uYRKWk$H$+?bb*@En7de^X|7qCGd(K?K
zjnOwaVcL5o9}{K2WBLt%dGP;-#_3SHeeLxE4AeY38Fp#T*D~Xs>p0^zUdp)E4kI((
z0RVX+`^J#09&Wi%S^z>0#2GouN^+?XazmME@)wKzB6fL29?9A!JodR~Esi`idYjJK
zFO;L5ixPERc(k;tt9uwRc&YLVC&XlLD6?60UwPg4pZ%ow_-zbaiu0B;%EYNp2AoPO
zme*LJA+SusN@5M;ntstJe#J;`;bnqxWqfzpyat_0??s2U#YR&9U+&HQ38qIa&4uM}
zY!2~uE1lMFaDQ>wF?o{Kan9NQrtPvjZslDjZv2r4?#;H+w_kn|VYPr}H28bTT^W1w
zA)fPJLWmuAygC3lry#}AXTI9*($x5+A;$8{41X3^iIY0o2|h0^@Jh&{r{Dpxn7!yd
z<<kZpq6E4r>XcRA{(CbhH7sp0JpXRsi=n!I!RA$ijp@79h6z3sSU2PvmFG1;@|b`!
z-k@>HQJ>kIkNq1k=0Ct+Od-~?sb4LPZ)*ScpHm1!4N*pX3b~ka<oLWetw^H~L#=`g
zINu5q@+bf<GMk`)yr+run_qc7L>J{^lZV6~gJ4<vFKXUaABgq5x8*}a;mR`YzrS}o
zz0|RwtQSNCgnyCwL(xgvc<#V_i{r5Hj)m9URHRsQ+Dt!58Orl5uXUkNr%3$A3k?F&
zl5WI9y+ZF!U={HEIfI+kX;PTHv!#my(B7kgazbRMUJOrRbxKWoHno6NgjwZ=Rgv=d
zZIEF*y<J2xo1yHbR$2^@?q48?CbLy2^%h<e72<vbbPt5Dm;=X*`CB1fL^iO{p^z8~
zQYZ=Nir=gI2*7-n^o%mAZ*!>I$s>H}dg6}7qL||GAex61P^A>OOgk3Ibq5{NZ&-*;
zjOn1yLBi>XaWqX8sc)Oq#Obc>J@6uCEd$I5N}W83=*|3_9~5JF=roYe!QCvsAjQ_z
zIoMC^*dv7lS=0lfDH7oY0N3LtjaCvxPMHqRU9}iGbJ3J6l$~ED6wXspEc*b27YP>$
zHB27BlG^PF5iV7`@Di0KqeuXu3@O#Q^~Af8eW8I;IhG76a+xeRBF+i~ScoW^Taax*
zT{N@fCSE2wi8Hb+Xw1z3fu8;9;L;gG?=3i!nblP!kv=rGRgxll7!oh@nBeNc*x;$c
zuHyKeiR1?Zho{NEM@R2rnM}N&luMnk(-tqLC->=}dCA>fKts_vl^6{48@@To!hUMS
zM5W|GYfA2k#O5ie;(&t?rJ9aFoUxw@OaZ|mUa_AJ$U9@<eZ;MyOGOA}@Xzi%EWP`D
zADLt0kZaECWJ}7xTznU=%q*GLw#0?0TpF+3bb8;WIhL_X0<Xe^qTFUMlc7!&uhLl0
z)n-whzDW@8jZre6&2BJF8!uj!;q-y^NexjB-FGguDz^iL@N6~joQO_|q7<jb(y&Qd
z?H(|ifO-i?6;$f{)Xf$%nlirEmuP)<#*8K>7}*2@Xz%@sm%V~~jI^Y1^ZYxTLTeXG
zQGP3oz-+2_WcBcVF~YemNZVrP<KbNeG8a)hZ*guF3`pTKv88WnwU~b6btq>p7W24$
zJHg}eoRWn_$?X_kHle_et?!=<Ewp}X@C^3NviudBPi-|VaC>Je4Vy7T;Iulz3C|1n
zrgFo(aDhW>u9u5b5Zkv8rv<FJGLi@_se1IM1uWxA7t19i>W^=6>*H=N^n&KqSuJYr
znZ#$%-m@de8?8xv%tWZa%-#Qy|Eu8x%@hqJjCNYJHaUHCi}TYa=WXm0nGpgTb-4{3
zqw(6brcrzT@(paImr1A}YTIuZe44D@Ol6Rp?9}d)ua8-4Pi2<#Zq-q=<atKbWw5Ni
zAlI)O_w4XhKW$%8?OjsvJ>t#z!t0bnVKU*fQ}>#$b@!b_Yw3%qvq%c_dG)r7Y5s9P
zPvWE<Ee(@?@w@Q}_wVGe(JjyNWb>BYF}Ky3Fq-X_QYhu=-D{jSnQO#j4@s26#-HHI
z$ZEkUd(ncn3!q*Y%$1{Qn~65G+91UqY;0_*{0xCwE1WtjP_cG?_Hq10ssrm3YF&=f
z6qr(ogB6PM6|_9~DS4|0A&>K{^9%6R^x<B0C}zxutyp1m2Y!4>Xsx1`MA0iw0Qoml
z^8Y*Z!I%z1HPB(eWBjMGPc1XZ+Y59U5^L2{O(JyjxOG|eV`Ya<3M!KU@Jt1yqBkrH
z=rFAII1xyonPDY+Ta_iczNg8&ucC1m3(-3HHU;bjuQB`o?=nehJ9%O^>th>u^Jn$r
zBSlNiM;a?vn!MI%T2*=a7i&mb`!9p{-^}AWh~)jcpNo0hWA6P%V2(Kd-!5YZ-!v_U
z46$A}WboYFnaHUckIj8-vo(o2HzBR0w=KGzYioPMymiBQvef#-p7~<ab*b~qw1hjY
zzk7U}eA9OlndZ}q9(US-r<XP-6C+Z$pO1G~o<%m@`*bB3#O(V$_FdcKD?wq|ov(w2
zd|xWfJA%I-ar86^-jsQIwz71-`uN9>hSy5lY5_Nt_6P>e{czv=TPYFzY*<$$k(RU~
zexZag^oM+ReE*ynuO!#E4grdfw$W16jeKm*tsBK9O{>VsuZ_nV$;zwB8pSyec}Xj&
z&1Jy}<)Dw1O#jhD4_EL}u}d^oBZqJRZ~N^uBL@mXzV<uDHmC_LXLg4WplANK!{APb
zEtl~ISB=xj;XVD!coJ$#I5jtzcQ*%P9?7MbB{$6u9`1L%Um3!VDK$z*f#YbFO7ici
zbIfrVsVDJpNV+ks<Y)H-K}0rU*b0g*<4WDJOs_IC6h=TCV<%2ExX)gxld2GdM?Sg9
zl=R0>P7PStFY;7V#U!hN>_%A&Et>dO+~Ow`MvwyN!=7H8eHK2Q#!-(f>azDy$uUfj
zX4ae*Y@Vz)tp+t32drqb4IF-kY1694i=7pL%Hf|gku<jmLj=1n_KB!V-iG9=qizH4
zy)KFYKLQoW0{I;rOG&Y*{`~;6=`uDt1x}Dog($7kZc#{e8QM-*=?(Cg2w~Kq4|(f>
zQSJEDH6K^SwEMKGG%Yy>+?QOcN`M-T*Tv66DnNMt?*CIn2l&KC86NSWw<g0Ibnk|N
zRctK$)c63VB=ENXbY(t>H(4T((&j5{O@Mw?0VCw_f5K>!!X}Yu#mVm0MTQQEK)T~6
zPJlle@&2lVaBN>56QF_rlVQ448VdDKLf>~Qwn%u|w5S@8XgCg=CQcXuhABw^row4c
zd>zN}m4oqE_(48M_H%mAK%AgVQ+;@oQkSi6we6>&EB`t<^kHX*(d^Bee_B8Oy8rRV
z?*g)4KaJEb|NJ-!e|~58^M{G2e-eKUZ^-2n8rwZ!`NKyC>X-}l$-pAIE;VLESTZ3)
z0)Botm&Pw^Zr&E*P=mdtF}gDlqhrp_&r+}5TuD`iG~jnjBeL8rrTgg;B_1D3VjtPV
zG;SANw4Y0MWjjrOVb5WEU)F-sYdz*)m3<!G90Ik9Y<}5m@Qgs=VBY@<p1IC5Uh~LC
zF-|>|wjrR@xC$w>z)n?dIAWt^f1shAm#i$U$B~yY#L=r8&H|W6f~=xBZx4||sXRIR
z0+sMIb;2;E#v<`9`uOxRQYZ{(17Xh}sWM`cTnpv~$<tAkA{DB`X$T-i!qIA@H{2%0
zu^}V^F3^61ad~V8go8MT+?b2WY35u77EwScFSOSIKlFmt6gz2j5^~=Oa*!oG7nE!;
zS^$M1v+e9aIAV)Hhhg;7osOI<d?9cy2*V@8+9%+IZqhzI!<XIWVK-4^d1<j_ra<e$
zd(%!KkDvph#1~r-?;@W4ww4=5)+8xmcsQ?u-TA&|@N{AsiiO{uN7=GW2U#|f*WPQZ
zc|S7-RpwVLJLb$BIy{r~XSQgyXHS<tcqTg;RkEVzqMXa{DE)g<nXY@7&KlxT1tbs5
z1_5|v>IOAw>yY7>%IsCK4@YxC{i9K{bUDyWFmWzA<Z%DdpqFNhPTtGc#+(-CC5Gk4
z{+!Praf)#*8w@cSaK_*!SkaHn*2qe5CXpQ4ESVVBn9*>e`$p}g7&9l**z1$&-7Odo
zXlJx>tMk?lU1Z9s7p|sp8%t9Ktc{=0t|;I&J=6W{;haVN!2sOQHCK6qXoc*f9=PQ(
z`H@eM>(bk0yymG#M{$ZZ<42oXRAS#~d|$<B_K~KsrgP(9&5ykQ-g@3~KoTw^bKBxT
z6x?c?^v3yUG7<lJ|6dJX5do1NhrONsR`IkeeC^U@p-Nw80;|{i{X=S2rkc?1FlvPu
z$n3W_`rh!TH>|BZzuG`9*P~($M>lE2up%;^-j8z}wb6&$R3gd0A~cBkceeBBTOhT_
zX#OoJI_q*AmM$j5=oSno2q&f>BJpv^`i<z#Va(7^A-7m#zdvF%E-F-5!9rn}QN(gL
z2|Y!;#3O@P>3!tjo9SBbAT`rBX1~*k{!DyBHXTg_*{*ZGtjMJ$3Z8t-iW5(^_DSZO
z)l|F(SuXS0uIh&-lEf&#f~VFvfM;$dhqR&O3%q>t;qo+*F?G5@LZSJnm3EHQt+Mc2
zBu3Ab=j+nccwF3Fv_3JgwKd*y@cMm_3~pQKo4-|M`}x35e`|3xKteO;>4Aer8_VpC
z#)hg6q?<<6;%XYA={NR~mzdq^W1glK>ae4lk|%3_oSKZ@cO2<e!z7Fr8(Ta#Lb(>#
zKY+*rJGtOt)}2|b!#3Z_&O?&^ulN3cK@9%A%Lnp(Vgb#))foOLzM%9xkndB%$h%vd
z*m~22en+C!>Nv-cz`XZM+lrcaeS5#8<bHjLZvOQyzusBj&LmI$74ICL$Sb2d)=|Zx
z*VoDoW{pOEV<B{X*`q9igrz30kBM5T0hMbn-M9DGG}4aN-oZ{!m`4|c)_aHmM<elq
z@a6y>An%rK65JZW=FoqCI49yTm?@?I{gU3hC?rq6r`n7`ghPyse<)k4?b^|}@(dZ_
z@7g&pIXa}&-u$<}kQg#f@A{7AaW!>WD+V;@`eFP|TP5jKPuzbW`GB?OZ3o8DIP&@d
z#@cgnnl7YR3h?l+9gSep#n@+fShhG&a`D}DjA?8mf=U_E3+aTZLOE0l0EZ&VNfOGT
zA2_%~$r8Iu7Q^Wgl^4sGwzz30R5rL7A3w(p;G-#u@}p$G4=%ib;PDh#DDFFMC3$n8
zKO}3u-DZELqij5nI)CK6ZDh1uyq#w4Z~P(M>KO;;Q@gaK3G`_p0S(BjpXbv{z@f_p
zGB0S(kN0j!Q2@36ci!^{>JZ0!1b>55pir#;Kn&8u2Do2)-9d(P11(Etm4GF^!T;R*
zTlZOsZ(S|FD9#D<8^ZMo%qhpub1Hj;UzGv-kE4-+PrH&}NZnNx1+gY1na%75b5y&e
z4w1T$!n6TD=`WsoMZ_ae<8o_Z5wjsY4%s{!tf<zqlNa~M$)NV&jr?)4#(c}tX5pL6
z-@8wA-oeI9X*#7h+6udHSuT^hiB=esd&rs?MT$Ke#5}ss4495p=p5U>#D?wO8X2IB
zHZy?IJbCET-%jjD#4ggF1LXU@Tt-7Sk;^`2#3{1ET~_jk4|q_`t!0z<DVcq3RM>u}
zGJj}P7MYrotDGFQU*6~%M7lH6k_GFz-!gV9vzIWVEC62du1}~RJ9}#IJXWwuzY02c
z49c1d_+a&Z%r6wdr9DK)cX&&Z#y^hwT!5a6r5CXF0P^mao;OsWiC+?QD4z#n^<0DI
z_AAO0L6mie)VDcY6mJymLa396j@r+U0Eh0cyULuw$G2n#lA4~Pxs&_`X%VP;YZ)V0
zb`yjaAF2%I7!S-t>93Rd&t53)<q!YZEv|aYds_eHk1U^^(R+?2c999}i;u7Su`tRF
zENAXc+)iHt*Ul|?T=TWO8#lm;d~GO^8$k3}<T`R{`(_pi<|dIkY{6l~*1-y@3RPW@
zyXnYCLPKsM!zBf-%E6p6&5YL?h<v>JgSn)qoryPoBAH>Z&b%uHy?8^rPB6z`YY*j1
zYXk!?7~+)l_uhXP>M0GppLc=JG)eR`Lh{58q;*_PYq$jkRGB(S1S?pIO}q7?Pa?Ji
z8oo$GHQ5YRFVPhwpbMir)rY7WZDJuXoke5N-6$fGxcCBA^W0GR%}*5DFgP&phqQO(
zNX5+tIfjwp+L_5Iw2<wmg4W3ft<&szuoV>=mRQ5(+O#s++-uO>z8!fZv4il_?U4#I
z1yXQEC;%}Sb&yU0SsyEjG)(sesGejdxeb6Mb?Th=6%Fiz6zAKeRPeouXg{)l>KzRl
z_bU@KICOKo{b6Y!uyH2&Y!!KDV(4ltM8fs;<;&uG-=y*_&U|yg0wpr|>ICqjB3iR%
zTm{@|9Ts!fJU$;MmqECUzd^mqon3CJd$IXQ8}VQT(LF`XZ$4<FP&lDflPw2Na#*R5
zGBtAZvM!DuBqt=<x2vKqlJNTd!vcjn5ZwfZ^c>Dq77bipz1Ql<k{hXIH)>q;i(}^s
zsUMY@NA4R|F&IQTQ44AdxXO?JOsfwrz>yJvifs27)HSEFG!5cXFLo}x{rRm5{uCPn
zVEZ}S!2j4>l|{4~4Y|mxK9%A(rYJ|=_ShlSLUNi9w9dT*P^4Ot{SN3@gEtIYb?Hyt
zLfB<!hB?6v3GUc-Ydt14SIrWSH>yjWgh%4fXC?TX?m*n6!i}fWiXw!Pa2++`Rx>Va
zn|mJ#IQTIvWG8<Y@T9wM_6yjG`1IG*DG>`7AaU<xoVV|42|<^0Oq<u)u=f%?gPCF2
zR)ObjS{F)71-I{1UFJBqe4b)%6j^9P`UQKp2{}?g;eo%mI~z5;;NIeKc=zzSlTy5%
zXg##XXEe$;NU26jhgd_|1iFF_$z#lIZNjv)N%;^!zEATb-9RUlw@x_jmunNW%fHQ5
zF2T$ogpPROv*%>kD$?I<i>91lh(O=R3_(oCRz)&QnIdXda%si&YpkAp=ESu5()z|Z
z&d3Qxo$;U>EnhU9<0zw^uQ6~>_fjqm_C<*q?;c8E^(x<nlh)@rpTfC2gA~aZ<8Wo&
z(rw4#P)xp$3)5NrIgQHhqW3`~t$ShAFCpIm!t1_XRx6eda@!ovGiuQGbFNbGSjCUF
z{e!N;{1@W?+gtlTvlrjO1Os{1ARxbMwwQ~_)&mQ61i4M`3m97f6qBt_&eJQSnq%4O
zR2ncDdf8F}WbGtr{WAt<EHhrqJ*P3*s&!Je60r+39iGi<3DU_Q@4*@^tfRbL>(ZgC
zqV%fDswe8vM&b(~Yd6I@)7>aw%HJ14P5j8E5Xjb_zFDQtdyU}*oZH?X;^4pv1K!%B
zfi>AqKDZXFg(G2rzX5=}R-oZ8`a|=nNY!G9cV|i%?<HyuVZn{7ZAXCF8{lqI`YT4l
zO}feRL-}uA>65m=qqTx3jFv|i>iFvJ85)N1Om=&Fi&&Jo;5%*S`!}neTn+q*cyji2
zX5>`)-mBQ4@1u_Bl1!$%zUOP7ud)ksbad4p?>aI)`$T|P<`=TFK?!L<Kz;wrUiC#B
z8qk(<PAER76H2boi)-^*cNNoih^>Up@OHr37Q%b65l^I?Kj0a$eV%9YIZ*ZE3)l}E
zTkn;<W?QQ}!;r0Hd}gsNPh&}73P0l*+Di4s!cp`#rkaWM!qr=P5O0*W_kg<-hF6%5
zt<{pB>R=HR&+YP40yoQ@6y|WxtG~sL+s`MaSWfF=9Rvjy?7M)!e%~oC7+`uNKl>9H
zC*;2~znzXt?Xw9$UZwM%r(!S3i<tf?QlU&r1pq?0udWD{ykiwv2`id6gEd&3sBU*s
z7jE&omB#7RhF5KaWe#iYX`UQ<zIzW?3N!?}%d0x|$^{bUdDBhnSE5X3g(3s9mO=fi
ztVgXklUxN|_G_MSJUE+QnM7~@*}*A1nO;<9`A2spE6iaV*lpvYcDz!h+Zp1m$aw9d
zp>qtWfrZ&+EYpzQbIYKAB7s*sD6W^RJ{12d{v?{Wu03N!=&Gr9G{&34XN;gPzRpVG
zaP(CE?$zZ2vvj?<xbtnswF&08Om+3vT2~?X<@)-c#i2bB$qn=OaB?-vEu#(nhip>J
z0~D3=?|fgj%D+P_<~1PTu<Xyc6S?B@>1xdv=jJin#a|Z<g6t@k?=koNrVlLUtlIQG
z5B~#sO;0B$)J3+<%5ww$dQ7(djr9JF$fKVJK=r_l8;!AiHam8g9#%<+L~!9^{K!2|
zD6}ct->DB#w2-H@m!po6rjYzQUmVY7fWRGku~_-{_XUkF9pBe2m+rWHNVnYiQCwK{
z_Qz)agFnCS)skiYI>T{(Zp&iVJ$1z#^x?!uEL4^5BmDY~9w<kK%J*OKjl!N*kgp3Y
zBy~r?0e?dm$@>k!n76^q>V+*W=k?^f%^<6XZlV~FwG;Nsm4sok^~k7ANY5`ptj-%Q
z?2%lfuK_&XMZVJL7D81qj~ke5&QrTmEpd5NV)6uqy5%?#lkjWEs|z^=8x+I-Ru<)5
zXWq}867cyNaqXgs|47LR4HG`oGD=7G^L-y203ff_1$0;*Iw>!HL>55lGe{SXGRmha
zN&O?M;RD+Gstmx(ipX}Hwb&rmS(8Hijxf8bAX-gp+}-)rrJb#Uvzn%ZV~VVXy^E0)
zn_h6Vt6n*pU-$k9+0sdx7BHp*f-)@_w$nT93YrlF>blRs=pm*eF2}u5gdAl?H;Puw
z(0DAu>@=+h^h%<5XvBkcE9-p>h`FNqjk{=nhLXHv00k7p)tK_KPyCboR?O8a<JmgP
zBQs)I^X`egi<#_^UPm!go}6&(hq<fuTQG*76W(PfuYQWF;>*G!t{3c|cZrCT7@|#3
znfHPdOO(Z<LQwU2hlC|Ic!YQO+o^KBd2uO;(g?84{6swIdbEjl8c<7Ta>Czc1R}`8
zX))RQ1YU|(VW1f#57r%Xd1#9a7w<kSDHd@q<QBm##&W=>2M*AkgbXznLPQR~iA)lL
z^>?LUZ=RtK;^$2k^cwK0eor14{*s<=+k8~5yuqjE-FmmDpStGCnlC<?q4?bmiAu1p
zn-R~*oq<g1+NdOc+f@_e32Bo00`ku`sw>8wdGpd`kBD6v4@^d{NEPecxB1<LG#2`n
z8yY*-_-$+KmIjs^wQ96R-C|r#^2feWG$P*k6>F^RmX#Dp<tX|$F|HX<rHWhoER%72
z#}JLm6YOeL1uv9?Z53g+K#*wsMU4+<>iOKmI&iXQodDz&gU73e;}cumRF$J|heq+u
zcO~G-Ty#PIbUvW9C4iXHb*C-%;4M0j@dRJ=!2TSk6N>1zKeOq1!?&Bw3*Ve9HPYnY
z@mjOcETk)5O!aQ4iSu?dV7{N&uX0lJ0p8BW@+o0ZNc1E==un)ahh&J!=VUp@4aSq6
zFpOP$vQS-dQ^1iV34Ti{j^$GvNYaYXShX&5VRT2L?T65qm%}Ml05l3VuT{u5R+oKG
ziI;U}c>EbKd-1h)6&NvDyZSuZv0Y^u27~{zfB)Ys+CN9?bTDRLoqOHC$7IoZlxi`c
zbX@?HUMOvZ>E92f5QVZBch(kaq(3o%VMWyfGn9iTa(4i8r2dW2=~e^Yuc0Ue$b8v%
zXfj_XKUs4aRjOZVRHsm2LcRN_(yGhn^S=Hdo%*$PR>D2E+UsT_$4H7MMB=)CPx~c>
z97WO3eCR2-))Vb4FvOnWWz>UUGki3<_|>*BS?qD)>SFD~!OZ)oTZi;~PE)yR=~2N9
z4GweVag715=mQS3>YOzipEBBetR)4VkH^qAdkpuu{*g$`NTahDdLZcdY;k;MS3gew
zvHPxcK-^5z<Ezhq?z9CiZ;ga6JhSi({zlbve!nLifqB2KSa$d8ZJi&hvA;HUr$!iX
z_H~}TeoPUgpr!)#Vb@cOlci&cKrQOgJ+XUgugl#(S#71%=X4x~jj_(gvU=$dtMzTw
zZpQPzJysVv2{Ix_u(IM=DWX=%jj<U3GA)aOYJdW#l&B>63$}hPIj;mdDLobu)iiJl
zQ$Qh`k`Cb8G1F(olS@@`pkGSUN~YSezUT31$J)`vnLN$JhX<_>`R0riU_XO=${^Jh
z<udm#LKlbdy|lM7MH~65qbTVajPnf3V(7BW4Q@SPREYpcM+H%32o{hI?|QDCb#QS}
zwD;BW4Hxg^Af8OL;PPID-<%0|xp|8TdA95RQ2CPx3A<8s^V`;4?Ewb~xmscY4ad5k
zZgtu$HD$gfs#!rhfxJaM#lxa_rH?U9h`FR5A?kz`mln!bjINx29ySZMna_#zn101J
zO|9N>(U?!e-Ww6p|AWnRTp8eyRjfcLbg18>PcTZ=^^IYbx|>SBwhAyv5(8BU(T5`M
zII>3FdT}3A)DB+mpH}%X2=&z{e)ov;yw7*)Qr9E3O*}hJ{w?HqLT+Z%b%b+>k-tOs
zi5c}Et<=*Sv$~AGDW{=4zeQ$fsrBF-0CNZ9b9)s)Bo@K9J=9Xf1gx~Trbqu~(LTVx
zJPqZRRJ(IbY-^Wy0c6qMT+p!%GEH&hvfKUxN>39~Ky7GpOyba4pfEEuofHq6j1MVT
zpg9k3IPmFzEB?8B`L4uK)xon{OYMe4ZGCn4?~p>>ko~p?eT-F54hqdy+0#y$tB|vq
z^V#-qs&la4XDhyzbl=wvh3@KY{krkz2P*L0<<G;mDw)eejhxHwvxTeQ-KH7OpEYy?
zQKs*50AkjQOh|2AW7-Rj@n?`|_Rv;;eHVkugVMJkF%G1Jh`cbWuPG1})$VZkr2qB%
zHKU6Z@MkcG8i!i})>#*Jft&3Sk}kp#H+~9}9YXT15wl))>(_``EuApTzFIq?SB`rc
zi^j+rd<{yM#3sj>vWfE{NV$AqhT;k#<VihrA<#)yEU)<MeKi>2NXeLigfk&KUN5f8
zZ|vqj;7l60u#-pLL4#nQ5rc$OwR$0ncK4`^5njT2$i!JT<T7mN*`-xd@+iAf6iWnU
z#{Uc9t39FbDcR!q#jWlub(D7Pb1Q8&xVWE|8&Yt=yQHSzG9Bz5V$1yZ{hBxk<vjP}
z4#n)NG5(CEp)q&qjfiwmjO2jYI3};YtH`yXJve@ySC222{iHT=&D<F+zI#4|$*Z5f
z#_X%{)&DYgw66UbQPLO)ANRx!rKwnk!Su6sB|?Rq*Vi+YqkC*ejo?<VHZB;pEW<;t
z7MJ_5kc1~!)6oRFR6kqD6RC>NKRlDI*X`Tf!lP}yPiBcpdHv0z6-j?9)f|hKoG)d{
zC2e4d9E5)+CMPIUA1E_4hX~saJfcsGC|r6{Y9vtFR{ImLf{UZmzrS_v&9g^HUOFE0
zgZ)RxopS*$Yp&*Fttx6|F#H<3gR|A(`FHzAFT&i*&3`Yesq;!aiQ-nV4BawXF%C$J
z>%i7wF*ep=^&#xp9W~J89hy+5V3>{=6i_^lczd<@y|I}@{x18+W#xVex4R^QCfHx`
z-)GXKylc>8>4)Kdq_Kg%s<3xfPa+^tggr{iWoPG~O2h}Ar|TqDfdeuYlL1PtiR4P0
z7E?Hf4CfTIFnGu(jSrZ-`uQs?mNRntv;ICBv<^1qB_)FrX#sVfQ)Cz|1~GflMIzWM
z_<i!jmIDVBS{M)eVuJz4ahoDC2TUOuPj}@|sIYz9#pU<Wx-_C0{1O!(lV3aIt|L#>
z@BCF)FgN@@H>-G2b+vA+JT~uoxU?Q}Ma@Gb{H6{F3rM=7iZ$(d^;w9^3Twb2lORT*
ze{Yf9Ny#a<Bbv1|>Xw5|y?C7HYE?*v6S>YIn5v1=fi&g4{r5ZbHt1g+?*F_qF^n1@
zudTt%`X3CtjF}C<r5ktw88LU6bNQRsp1!Cq)QJAm4R`{5IR}B8E`?iiabzr`|HD~&
z^?D~=fLP0IK8)fK70}67Pf(A@7%w-Xw%D92{O^wUZ~+fpTV~F8tXCvdKRWzMV?o8F
zF|g)sf<{x7WmUi_;rJfS(T5%%95Rc`8ez*`WEZc4COY@yV8$=4H>30$9O|kJ7j)N-
zsr*8#A8jpl2Vs$-e|Nk~p;Xmxf3@DWQ0EKyb>l5fv)AUJKg0Qobc=7|$S;ZK+RWBx
zt?lKm_X3|Doqb+u<GLCrecK*b_hCf;o~1-b@TbF}*5@x?>Je*Tf?S?^1VKM%&9Sj~
zfZE=AXvE7Ja`<|J;xzEiTvW#=HgLjt0te?cu7g};&Vi5k3Q>Q}?3=MXG_0Fi>7b88
z*#8Z3B{=gZ4TTB$oGoFam6YRvNLMK}2M(1pd$PJjZ$Zj~KXmpAuWzYw*r}KV70MfX
z7~3aX{-i9*FjFvgFxAgP7p2>0?{V6gCzlqy^u1x=_|knx?GuIIvzTI_xvdu_7WQ3j
z*IH30xg;&_24_^hAt?ioc?xH6XJN7)!?ppoX6;Z(K^nlNE6I)}yZ7AQWCzy}b;Sl~
zmFHa!DjN-^Q!U>-TMAY0#N%^QM?<H|id{vO)gS|$rc1SB(&hYh?W}z67Lx`~KHDsP
zpF3!Lr+ZM@uwFJNP_&g6H`n6(v`vREvX}2m`(HEr`?f*X!{KcYg}(M=EC`tPKU!so
zV~(Q8n{Tf3@8*>{_bl&S4pcVp1}G9hX~l}aT2Z7ci9Du>jyLaRYRVEE=B-*a9<qDo
z2Ib%xh<`sAHYJ-jhPzR58py9Qf}FhHG$7U}@axyfm=u@5e2Ci*ews-zi@>*8jcC_1
z1rtvJ<Aq0GmKP`<;D3fM+T?C$iixb|46pi4+?iMloCpUCGh<!hMBRqtA88Riq4K!c
zKzzxtWxy8)^4bZ-x?qVaKmxd(VJkSi^D<5$S0%TETjOm(x<xQ|hdkIu16GN7XO^$z
z@YgTgZQX1B^e3n`9iiU??ZkhLFN4u4f8DUlxddb)o(cq$DmOa_{#^R#v!Lw$;|W}A
z>egj}O(u6@cD#Rn5+Dd7MBj$^#Zl`<Sp7$<{ON&Q4k3@C<l^_#^S%jNmr44Yf103J
zjW6K8C+~}RY}7RHAVJQ)FmQ)YH0NTB3{5)>M3UD<l5K<2rVrsz;8uu0LBpu!Sp19@
z6)2)Uh6<xLrkn!heF(h5En=(*uPAF38U?%}{=i=USR4R4UF6Yz<eS6<fr?>g9+2+A
ze`F#xakr3gnM>9_W`#*+Vx~b3w}ES!h+6^hD<`MS9F`ERcb|=dUO!fID-_S4DbN3y
z`<C5SXD|x*_2h@+f-Vc=AA@b~xgjMg>RBnp0()?vIBL`sdM=bDcG?O_1cIG##-u%V
z@_XodogI5}^tv1cD2DzKsb2CMGYx!h@)&}LoobC++Ss8P8Wo4NIEp%5X<^PtrTBFM
zb3~DNu^MpGt;<v#9I%X4qf<vIKm_C{#nd2geKJ#?gkJPWD8&>8vUHL9GB|n?ibUP4
z5aU|p>k|H?c!eXwTKwV`0?zikdo1xxmrf3zmsRZ*N7kyGlnCpQ`?5!_^ah)d@>L3p
zvJNELCkj;n>E>k7pNuf`!ONy|&ZdFl90s98tIt4mW=M20Lj=km-h~hG59hcHqY$zm
zW#!f-y;<F@CczBh@0$WSK?!fV<=}9Dm(b=m>jWl?dU}udUJ$s2=@dJ`CAn*=HiY36
zZ=pRTlMkoONo@&!!e;UHSfVv^JS1Q9^xoXv<@9*AleKY{!e?a_FJi}P8Q%i_UIF5{
zt=6Ugl>tkZ;1Rw=Mkk@_ARrSd2T^6H2``RxQbAJT)W_YL%);`Fg7$Y?={jE<@8yG!
za&*M68gjw8)lv5XSwaV(I@vdM?Ld=A-P=o81SpUd3m%Kwx=$|+8iq^xP?}4*B8N(j
zW02@MkPq+mBdRz_Ayn{+D_yQ`H1!o!uri)~0Ck~|KqvzB(q2Yv-45IuUTUN~xBg2w
z4w}21=yRL=Wo;?74H7FC&vX%ps4KAlSPfW;vh1T_B~?736o7-mh)^4H_?e+$`*9Yf
zrRNlR)nP2GsUV|f_`S;@IVz@G)-|Q+bi&-;)7)yCzXA+1nhQiieN`<Ra9aj&|9l-Y
zk`gzZm+VlN5EY56_?TPTgwWTv!DHVG<919KlJ?yeg4Ez@XZ#p-(*FC-tO^RjwuY3+
zRkwGUb)QIFce+9t1IFn`MKsEyc8TTX9TAgYaq%eVn1qrgV#>z1J`&b(OU)2LQI5N5
zI|7bpXObt!+;jm@tzOp8*@C;>L>C4{dRs?x)kO>D3*a`Bm1U0F5dc&>c3|=A=K_%C
ztd7<?v|-Fz`1hmre;vpK|J&ksum-0W0lUv|2rEMkrEn^hn(>r{4~E7iHe{;#CIO3I
zU%?Ye@4R=yK*^fqXDzp?mE^w`zl>Oig<@j=x5aPeN~1;~{VP-Cbjmd}Zsi4jVLGbl
zm{}7;jt?xnEF8(8pzaMe<R?{ABikCuAX~{8T`c)Hnv7*SuG#AMZtT_GvwkKMJNubx
zp?vMnKSW%|$t?%on+Hm`cQy(&70G5cd3U^hu1`uDB&oVKkk4h9oh4=SsU=S3_T5*~
z-E-aETvriqUp;>O1+VKi?UnhHAB(Y5_nMy3{R%vfUb(Y4fsv4duqBD84~K3egBPeX
zZaj+|)5GSGx+cdPI9W$lA&-+n@mY*shxv=B8p(ilx~F3><oFmt?+fOqQA-N|P8<v)
zG*4g5%THu%HDYvvQ7BqGlNk3W0IQGYZZTEzZ+<kp(NDJ(%1UbRF(I3vW*pxPFNI9#
zoviUgROHa2b!vz?!8UD(nx1NgjUax3lQ_*DJz01Qf#b`MT}C@7Y!c^;%*PbUco`wz
zrHWmhj+AyY0vTeR^7ekHWuS@XV>k+;lD={l`Ws8r6|vYz#JzeMAk9<q2N}eZQz>x;
z_>|#FW&7EvR%zY}W;km%1Q^H_)!cHE`L2xtKY2=8Pn2Bb^Qc%q*UuW54%Q4>6miw%
zNfWu|q1d0$(XZ4Ga&frv5AO$V-cassdZ#-b*?JJL_{RDx$FjT_=h?xRcc3g-bj!D*
z$DW?Ye;N@D#19Vax;`*#E(SqoIEgsu94o%|Gd*7YN+)Tj?A;f?7N!7EEU35!#rllM
zwzK$jv%lb4e6llTc8Zq#)L!Qk_FeXL;_EQ4c(>vV&Dj)kJIl{jS**hlH&OhnpQDC`
z7TsJV0F9qD@!Uj=TMU%lvcoKX=N&($1}v4<JpI1n^?Xgj+HZm6+gix>Rb`Wl)jO4j
z<>w;;^&g&>b3#6Nym%$)K8z6VqWrJjYa7e&x1@VyAV083aBbiFgt2=8wW;gHui!60
z+>2TKetILLDs{9A99{9hJmCX>$(|Ib<S)ex<ag~9j4wUf<%#miN2UJ}_r6QyaDMpl
z#~H4_Tr^0f{5V!<i*IX$G7HrgZD=z`mUg#ntLo~{&xPa%?0sxE@h_*4N~@c|;unT3
z0|=)i0qJ9em6XKf+Y|q-usdJXaDhi_t75q|h8(YyQKK{X28X}8yV^jKpB%IJjn9Q3
z|0b&?A9fO1K*O0<Sp!gBppREjG0|CFR-*f|qhN?iJ&bcoSOc5~eXW|o-8~-jkSU(p
zGP;ld$Ug4PK_2ZXcK<xHcf6(D=0q=|U$piO9StM{1C5hjuCermzz$4Ay6^s+dO>!O
z0~DyPOV-y%*T10H$aY0A7XXbj@kwrk6dYC5U^#EG()<O*0_1p6lrLP4C*BZZ9nwkh
zUvj)&8ktTg-fT&e0x@fh2MAYa!vNvM4vVRPIvm9YX<G4~28<Ti2uJ^@cTzt^*Vl1U
zr>Kp+c0SEqt5~|-CDrDgEEceXav-U|YxC3lO5Wa?w!iwLSG!&zyENaC!qn?(B7lK1
zA!vi^uC5`17$lzaJLHuR_Bx#BA96ew!xaB&E)AO8=}=myH8IwMm{V9unUb)LIP<Ik
z+M>v*cnq2r4l981;Bx#?oq@X4TJgE_IJdLJhEi<NbYI*jjaHw{qxptQC>efclsYqA
z&qn&ldu;5&0pY`cOBYQSsx2l)gllJ`sminodQ+|b|Il{UZB_Q)wx_$hySt>-#UdmY
zNOw0#3y6S9w{!|3-QC^Y-AH$bh=6kLh0kxF=Ums`=Q{tK7jfV7JI5U3Gx8FRDV2T{
zS>>^4R{62vGor}owl`_AMgAzF7(zg6Q2A0eRa@rH`AX-TRA}p1Ew9~&O>N|1TH}fu
zfkcu{qs(~i-lkdUmJV1>`72lt2vLP0g^%$EsZbJ_41pC;rxmQ)Vh5k*i<FQ~4te|t
zyvLG6zS7zw!t<gu$hvV|j?ODoyuQ8(vaP)RixV4vAa4zKty41?fRmV-vh@8%tZ~#7
zw@W7)QsUE;tkX}M6}IfZiP+SB!R5idg=w_U`+PB%&eJA)>L6AIk<j@w*~oI#oYPD;
z%$zoj)Vc2nO*i!!=Kzo4x<9orAp8O$Yi5cKW@Y2*`ip+<FELRlD;wQ3Sd~D#mnm*G
zENMz%2NIrs^aP@Chgm}xoGd<>if~p6j0SHwzD5XXL59G`i(nSG39PHbWb@~LoNc6N
zh{><!3E0aPct9pF(`hgyI646oN-+NF9*e_iDAmdR5KASy4TPtGoE88GzXGF<d0-N6
zvV7~14A{6-pY)$2Rxhf3F?m@68bzZ+|0VoNzfI!e`)~ny2^<b+e<2{k!#u)p2m_n#
zf2qI!+HC)={{Fq7K5e$pn#?El7wTRbtb)=?pzX;(1q(1pfr2rp`U~<eYndtfTa)>$
zNtUHwI#X8e>l3X+71aP|M_`LvMVTWMa4!J`W2V$Op&A9ny~-^W*QtM#$S0m#Q*)(K
z4K7z`R1xzOdhIx$dKpI=oZDMJ;Bu=|ECBS?-CKE0l-sJkmahVif(yT@ZJJZ)qi$aP
zsyS*Z)T%aoXmW2~NYz`e`@C$D3F+`hr&c<M9mH~FJ1aY}U*is*jD{pDwKo00*%Xb>
zA=u<2qL%A|x|d#f!;`>ppl57HPvH(%%PuZCY*mHuc3<sL(?_Q6upU2?8YD>kkkRAK
zpu*Q_AzU!0%pOo;mI4pUCt&Q0>`<R!fhmKK84#(mK;;`r8nP~n#<x!+Nv)*40VYla
zNc7~QbF@;NLAP08UO~&OAU02u%y4>Bk1W~vnSP*Ud1oP+OpIxU-s~llY`}-xgM167
zhhKZz@G5iyj3ye90ckD)q;P>SP~v*3ohhu8=jZn-A<l5I`&$%C`kQ;-e301ozhNEJ
zrM)p!b{Up5!`ekdjVJi)USiF~N^sw|3bpMoNROB_4W|9O*?wt~V)Ee1ImnB2dn8lI
zuGma~!7UNIwk`D=6lE`H*_B2wD`hjcu6XzBj=d@XGnHMkogfyw+TA%eG#_tLp3`8A
zD13r0KBMwPA2rR1Q+g?K`E`BYB{-<bwbRL=uA^(1vl4~%rmXdCE*Q1$+hsU$Goo~J
zIS{)+cS=WDldb?w%1=49Jc8r7+UsACU-Y;QHuFUNP!i|x>YbpiG{bJV>>T2#Kjs_m
z)JBqYmUgit=A=6Z4<;mXc1rLA1!LC}Ag_rK#>8JZyAs6o;;@YIvd%gb@eF1^X0@&C
z-Dn$qZnvk9o^hVzE6*=1e8v_TOb)?Vwj*9-<zmg5f8%cuz3|XwFKA{h_Lw7RVy8#q
zVu<Q=b-BUSeA!{)i5$8WEjo9+CD7Mn3RQm{M3BYB<{DO_rZF2<5jLLBBU=pM4LuFg
z!<6+7;Td_+8!%JWHqf5jvZoX(U?_-`v8_HfP=HhY_MHyFeaq&<)x@i_2MijTlLg8g
zY;(_-7Incb7Uu6Vx+xQ3C&oCQHrqozrf!UGoY#35-^Wj1vt&h|-H0diu<ovV9HjfS
z?KQ##!jZsLkUl>Ad`UkV=JT0$8FZf15j1K>ieZ;wrcWCTzCQJDUY5o<7K%25k^J-!
z3yXAMLF%w=f;1IQdwnB;h^K_(%c^fuN8p@-a0}4MFideCpI-?~VZdX01MVda<=`i`
z@=P#W9<(M?g)mGRj6?{B!SAsZZhS2RNYH(Jv6B>E0s1PbNuOY>a|F6Jhztwbo*WZt
z69UVFHRUUYYKvQsl0$>cI)DY*aSPEmpw%_O)r;SZiRK98;F1Og>1C{<!~mmc$Doqu
zWn9Mgc81JBet0xg{k34T=#~%C&mu@_QD>#03xm>E6Cbo?xtx9Rl4;;O1SC*{<VH;K
z)ZlW>|3;vNuYmUCT@<OmZe==<A3$Fnb#PZh_{l%W81L*iUf>r8=i;+`2a8~F>qkTB
z^X0GlTb-_d3Cqc)_K5yzpU+MQ=p9RN#_)CRAbDNk3vEw^s=t_DK?J+bDT;RM-`=U^
zgM4`+{KC3$QE~S5*_<X_!{Wcj?E3(}@yNJXg6!Ps0@*-NXhNNO4)?PIxo~B*#HN}Y
zqS!)^*2Huw+BLq3PvK2KlTy}_dJd{b7Zu`6P~1&-;S0ij{Pf;vCXP%P$dg-nuIfud
z2@i0H=JeOdcHt<}w;yn<lbUa`^use-m)78(o^xBGDdXBeM8-NNr6QQM|MWvs0YPD5
zyk)(DLZJjAFX7kcxr^D$(x=AEw3r;fi5A5(O3pGFKT20p&BH3qfI+J}h1OH^06tMr
zA6^=Nj1Y|bqkX`kguaj%pG8sITJi?DN>#Lz9aeRpQz6nhaNTgX4v{rTm;lHBQ1@>V
zxjuXqZ$*wNoF$l2Dm7G^bQ>?QA>VU;*zmmrFQXOTXEM6Z1WikG+(4XpD-7IFoh4%W
z^{H|z43)^cKl60Agy$BwZ-8D91pVhcn7+S{){%+f(D3pc1KII7G0u_@c2_H;2)0bd
zy=lF~RdT}+cf!FGBYd==3nehEoX%hRYUDe+EmdVYd@+<liv^mkG+{}!w=LN~M9G|S
zc>@>h4#E8$8;XbSI^-}I;5Q$-Q)azbWZ*uO^xD>+ZVO0VJmWB(Xi?%8ka(<=FsUAm
zPuSsn9Wmx+$c)ccM=C;ZH%^-v@$DC)^&$qDp;zCDHP-VoaCPkDjC{=p{tHtn?D~YB
z^#E9=PJp<6_vBW7spzXve~Cx#0}{~$Dp&ybQblBKu|lT$Ac+g^Qw0ljv-O;JBB}&7
zTf4-bYM_jXM`|kk7#KM4;E=kSe8m$&S(*vVi#Wo9QQ!^3zwm;!hlVRI3L@1LeOH0O
z?z5Bt4%p%o;}Md=kW=a3p5Z)=<TKm+a4J2}!S~bQo$$3H$;a{KH5jXUwM%<a|Cc?{
zk9GB3fn84h!Yi~muRTiLR4@AUTWCp>Zu{O&U3?h6-$1b-ZZwiNJdZOI-}#Js+lBny
zDaoH=HzG!)*T%s)l^uUCVDh~(T8!^7sB;gU*PN5XEG!gxhd2NR9z#{at?2FMp?13`
z8v)MCkXu$XJ(j42I8Y#u&oXm(MX}R&cBWeR{t@B-F(-vev40lZ=?~?i4mi<v0^E1L
ze}|)0r9P3%6OzgO?{Kt5u?w}?3w_s;gwfP+7ihJqN`DaQ??6CPXHf}lYjV}?s5$U^
z4ruCMm%37+IVtxhT7+as%Gmc65{0Ks^i+{SvnG&<cG?<B05Z{lck2vo1F=$)f#x?H
z(Dedc;r&=yu5N$OGfIX4oHULUG{%r{mYwVo9Tz`_6j1^9mAvYM>40o~CXz5>qL~Wh
zw`kAF=yIph@YN^$%As6TFM56p-Dhv+E8~!NrQ}>seCx%Um0b?}puTB6WTw1Z+fVJ$
z?2lSwE5EMx(+mb!XRCjYLD*Z+?S6Yc+%E3E%FaIq>lW<6sdV{!Z_HY)eW;nOTQmRt
z8#%-0JFs{8#yvmp1T^&mlb}S`J_@tXoGd#2Fn91KRz)g!fi~h!(Zk_9eJoqyeX{2u
ztCs{>G!75Hv^GQ23KK)I^JpdHSY(+Bw_|0A{A7dE6fah_=wxIz{o%7@<(OV3-}pts
z)PZ5*<6(JoAsTd+VZ!mz+q<cbk+cEt^gU5`-<rmXq@;+s_l=@N2hc-vQfvhXm=lW@
zRz``*R#x7J{ae04j80#o!(HaAlg+@MmJl0NGV(lk(Ir-^m>}W8f+18nb1PZ%N4lXW
zO}!+3Bs1UK(_5ab7&&ht&_?R`Y6vLkE<Ud0$8e#y(!M2|H0xOUDfKo+YJwEz#P#T;
ze*L4Eg4NfNa|QcAb6rk5>Y4TMm;C~nCr$b9@rS>DHUJNzUT59-qOS4MJGQ4ShM!qe
z9xL!zJ*JZmb)eJF4Yo3(%}6jk$V6y&<D!a}_xZbZ^>)G-rtuE=|4x;ITztf+5+Trn
zL=Uo{=Ur;Gfl4lV7>3i%2g%;9EOc}IWOo_oyO(@B0rN8H?d0rbnkz&BpQC14RO`*y
zfZDM7k0$DPniDPTHQZC6>*e_{9Pc~DXMNW}tu9j{qsBj1pK?;}_>WG$EDl0*613_q
zCV-~STz0z|EVSx|EF{hKYdijRo9ue_LFyosi~4IX<1H8Z?ti>n|J@1?ygZ(K)5w5#
z>q%1|U@nKQ@MqAM2lsC%C++u-e^&Uj-#`E9dU5<{A3l)v=kB=v?9crn@n*)aHhr2A
zARG;>@DFR)p#rkS+O*(Tz}>mxEiA=n7OspC1n3GMk%7Q`+u?{{Y&UMxg-zGdiRF0?
zc(*c9B&>6Ces{sQ?h|7MttXVJ&|yA9hrnsVG~gM)!4njK^e4I!sfwhji=OVzEK=q$
zz6kaEWITS+gvB++Y|8OrYQW0_F=qn?S=)yU#i<O>-Ul901aN{uxu}&9l-dY!b0la-
z+THf0#-SYRQozgOLNRjzG$q{C{|#n`Ciy;_26-|1YUdR1ta|G~o*`DO$;NfE`RU><
zugiyhJdne*2nz>C&>fUC0s60;RDhI3h8BwZgr6V2clSzqoQ$Ju9vt}q_7xf|-1M<=
zVy)bkxF~<9eia@<;^qjqLc9#=%2e|BmIWVc^++sdS4vuEE>{xs=$Lw3;=K2+V8Xnj
z1suM~#t4(ZS1l#mbTy}goCv`vk<meK{^X0a5%KKMM~GwF75gXw^Yh<>Bi{0s-;R&-
zMbN_(-<MUtKdIS!*=jj4Ktqs)=Ef|EI5h4lzni{qSMY+mX*fdOHT#gl>XPnmGE}uR
zE2Pm{?l~E0beCEVG9#;yB3p`3#D*rQbXHchb24CxfL9yf(<Bbf<cYc!x=+7S;q{#9
zp4f!78Mf8Hq@Vuk@GQvpfKB8*nr2ssTdp~0vGG_~3)mb~$~$}T%3LC}Y3WCqM=nAL
z3_)1S-E3Lic`&!76Iz3dMi~yQ4E$0?P@m{cWfWo;1(67uafVN2^r)TLat2H}fhkH4
z@3HZMe6+F#8_Y9tY+T5d|E#hpiU7`uF77>!{G)IN|A~jRE#WodG-O?@9B4e1L;t$$
z!c^Zp``S_LYI&;5y`hG))S1<Pg_<*of7GqaX+wSmM)4ir?1u?A);NO`vbtubyE5}G
zuk;J0yp~-Jc2E0oy;a@$`YE(B?`*x5J0>Bi(*z9fH~0D#V_K~-Cftq};dyZL#~puK
zx!>|yXT9B*z)>5h2of6Ez_JoXZ?0nb)Jkr0!FS7^ds`g#yGcX_La2@+6XBQOwONjX
z$70)47^0!OOhRqh2UEs-1ouVt_bsrq=c)S8^Bd3NE@p}+I)pB>Z_hq|pQCbm=6v#I
z6Se(xNMw{RwEn?}QEPFK=Q&2eAcx7ZYVxD2@%PG@{1#*GX09=3!nd9W5HqoQtZ`ea
zi}b}63!zW%al1KOLL&8(8M18#Lu_0Qr&u(`K#~*J&$(dHHqw=>vcx`GewC2V@PTUT
z1xlT4#Gmzu_SZ3hmq&>e=8=8C`bhCxhP1Kn{jOx-6NZ+*DIObF`;j+j8s=HBlgP0*
z&l|hBUnY(of0QMEACDtdoBDfqQ^gN;8Ed3AY95vn#&UV<MLKu9vx8;6-s*ALO><O#
zgvYS^_d_a~=8Z5%kF(~I-#7Ip@Jfy!u9}xet^zw@BhLf4#e)!DQ}H`UAjwEwY!VxF
zFhJ-7gM=KNI8j9uSYrH9lOMKOh=oMR3qXj1En8%(%@@>qm76VfUDW@U`~SbF6lj$4
zGiJ2%vT<w%Lp6nJd4XY~2y-32=}@NX>QL<)O&VD~ISbiBt#)WpERd-_Swc4HXUlQz
zDFxmN_qE~dKWSE5eBi&Wve!9ww)^3)G1?{5nD$05@;MxzId2bJGn3avkXG*oRq=%a
zOx2o$>FjLF?Ui4bdyR}N1AjACRih;tuBh}!b1_Eu(v?`ZO9%#hKk9Cm8#Y_x2`uSO
zA3QF12vW6(SGXv60;a<qAGN~u-%Fot!M+N0;PLi6+GWoA^eG9&%kT6cuAQsB>|^f@
zVf@-Bn}pz1NuZI(*c28^VBOD}lmwU2Q`~qE`c~KoqHt&!<M4a7KMow`2i7E$WF<So
zIO_H{!+E*}dJ$-=UZJ`%Rxxf!W`;}+{R2|LYDC9=rWs@wDeCTQ1c~QRq37Aq?#eMh
z<>(xSsLUnH;c0!}>4@WYBTfF0a*LB^fE#@fo8psMxckMvb}%>IN;Q`0t6S3|UfTP?
zL1sPoAp{mfKcrnrR84`y{p@H#-7Yj5I8By#kG{gaG@s8veQib%;8Dx4q#K3zH9(ur
z{9(_Q3|I90kwG4-K=+VYp=2q6#kfL7;7#fKLS4%|-zGBca-82^4olg04(H0=)3URd
z4u3yj%m)(B(N%T2se9@Ds#Bc}+lg;Z8v=1)I1Ibm<T$eW;DQ1g_U05EnvTBDo_;&4
zL*p`zE65t}fZpFbglOVGwLv$<Z(97bYPrj>UZOkq{D!R9_1a5>SN5@qELWyu8mAEr
zu!fE#eqaj@<&)<uwpe3q^Dw#8;r>SORu|SC6gtYZXE!xw{mf%{T!Nn*NKCKo@lW`p
z8Q@J?h3=0}Do?XMlT-f*=oPY8jXz`!K4H4gX+?6XE`EHWm`^324+$_nqTS{v@!lQ{
zMsvG<0;wEj4?%t24Qy8oWw+wS-pu$sbQ~2RGGwUFJ0agUU<=tmb$~I$ziogMcq@1w
zP;&fLDLkXHfQ}gMXPn@}lT5Cv3C5cnLx+7JQ{8edi0Sy?8_&qC#?k<NE7UU+%3s#E
zTy~*A-wG&nuF$taxK9Awc9P?tUuZ4oU<{EJ@FKU!3Qqy1GrGpWi=uN8iQhNe{McXb
z)zV+0`G!6QviiU=WWc5bbRdkGz!DusBRspN?G#Y<$y$J++x_RQu${rXU@Y-R&H@+c
zP(aff0C;K2fv?yyVZ^|p+yhQQ<b@lU&JASbNV|UG=8@Qsu<$)JmR2F}S+j5%v%0Cj
zIEA9x(BXbVk#48K<(4nWlFUh#VzZs(eTzPV-Eu4KduxiL{nQa7!=c?tY>_6*l0Fr$
z*>mw!gKpN<EPZ?NR1^!9`?0FvgBqVYVxUab=m-V|AsS*USz~-c;H?17SV2{a>us1W
zpMfj_Qyd{NbOAwSdEm4}f!?fxsLh(7)i-5cZMUOrmolV3hnLuzlgsMMs$kL-o7^C<
z%M}yKYlL-`II5oaJDHT%iVFYBY`mqihYrL*2|v}pYL~BbklFboe?tBQlX62!61J<U
z^EuR`)+nq2@r`e1u+sa^^B6?;>*||SRqu6Qmr~0yNTgq(0PN44<oA6i13xCPz#La9
zcnL8Jw^2&CB{;y!8!MQ|4PAyhw&@`g5r#G->Jq$^7$eHyhAyrEry3^ST@la8WiNYZ
z?nLpWEdC2ICx#qx=X83}Odg1^P}xX+rf%fA0Oz3NC{KR2NcTrk@zJQ_e5_i~@eJqd
zQdUVWS}e2VA0^g`#k%uDb9Gg<6zP%{#-0`GUj+$EUIe1>4y?ne-2xda%o1Z{fT@Z$
zhbTpZ#2vKmhb??l86C(W)S|3a{++N~*#LzxFM8<X#2Fqri@)_Ng{3L^EeunQ0j)DU
zO$3pQYS<P8O}#zE=5wNiT9p9~Fw4b~x@9GOaqlohB!BVy_v3mBR4&6!-`7<n^X3Dq
zAuea8W2-NS%_e6DTu)RD+VzD@7e@!&SEmg8&xz_Lbr5Xlh7D(qO^G>CAn&oSRwYi#
zu@M$v$=v_r^LFwvpfz&)Qr~u$Ek(;WvG_|AsS`$>$6w6`4W2p=^J@Ye<3|Y;o(>v9
z8YEt383@n|myE9`?E93dX5Ii8>dp~`I6*T+<|Mq<9oX(8TU7VA$b!&JHN>18vW|)m
z1*x={3o84f*?IIod&vBLqYHGz5MdIc$5?PqUkn?|gi*r7{f|<;M`6Z43-kF@2ec>+
zFly8FC{Xf2p`rfW!AWSL6#rV70h(Cg3tcEQRPqht@4&^uYUc6qlynXf`I`N7ph$$x
zexnpxjygJ;DxW#QnW|ka<4V*`No}s%6-LQ^gU#)m#HYC5{{$A<8u~gsho390du5tS
z;K!v;7ypp^HM*mGqdVwib9T6aj*%{8@nfcIDBi|EGXFfHW=Z8<NEGkuT}G*Dn-Mv<
zPlhMluG@ntN@?l#Bq6qQ=?3&ct3Gv(jqe<`EKBZr&ejH2k*L$jFW<<gcrw3kOA~S4
zYtB@7Wj8n*e6|h*jUP|L$afFtu84%Z#j9|zrZ$0~@yi#eCMR^+ufMsquHA%u2FbBJ
zna~i3z@U#IC;i_P|4bsTo6r%&Ca{$AcqIE{PZ4bB<CAG_1d<*y>jzVrTBW%se-0rG
zA|vag4T~%spbC#^w8oEMnnKC^{J0U49Qo{GVLkMP>UE|*?VW`*6Sp+$PP~dLpJc?x
z(PRc|kUUF{^L+~)lqSZyi@`WDwUtQ3Nvaj+3d=JL4H{d0g-Hu$NX2PHB~F`8$z%Km
z_v;r?hOea{OJ-10pmo+8JT{eV`%WhEoEpv{=G<77u5h>-W6{(+JC~(#^HNUSqJl3m
zO}Rki_%WBQIP8?w=8b`0!IzTasiw@**e*}<^0q&oM>#6SNF=f;Bf1<0WlSO%=r7gZ
zoB$mn>peUmk$XG+NhTX~M(7Z1gqN2(u6GLbD$zWuT25>}vm`7BoM_>*t!ul*<%%{J
z>poO}O=$QS0c5R1D97!^KuW%cAgMWA09y*}q7R$YhNGVbeY>)oHdx#x5j%<FU~nR@
zgzp>2_|DnzLoY_!umH0Se}nKIWNYl?=J;(esQua1L_;VZsQcq$&~-DVQ$-iCsk;4-
zSxxSkPL0>pdOE%PiBmrSu(<sVv>X*`)II^u-TeSq+;!gmX<>Gd^cH%|sh0{TP(_mi
zhM>nrRmk;E$u>LsK{y*J=)$b!@SY5rBPJB`ehu7(Tk--HW6#})Zv<P2CHGE6y7p9b
z8=0b_1BOhX@)pUT8j$J(>Z>|8{eEz^taTiDg>noqf4kkt+)rrUsEYnWcLprX9~wuE
z=#(%eUC%yH9S3l~5Tn7FSZqtOj`l@mtU3FLDmgGEVMtkF+>7$GFw=*u1Fj2<4Cuug
zj_lkA<v$neES%#EX*eKgjHY{znKB>`G%SB^oXCPrNjCaKK~vtn;DZ-90Ao22Em30U
zMD-DN;}=bQARd_|Ts%u4(rredE>x<2*kF280%2fsfsuk>Gg01vQSp|dxr7M@ke;Oa
z3pkUCAl#Vb9vtvM=<9d|0^X{S$Yf{SsnkKF#)V!1CA0{W00jb@n!W)6V^=CaGm2Hd
zR|K=Tyb~zhc$C@w&#Q8yDDSpR*eZM_*b1YAq_+JDY)E88UFZ}Aawy(CYf+*z$IUc0
zV<b;`rP#I;@Mj-pL32>v#exn$A|!%Q0l3rRz@nm$<UR$BZ>oGL&!u4~cmg>{u9BbH
z(hDKT+Tg^TG&v^RD<A#itb~Oe?JHGl`T7ynFVXP|VurL~Ei?g4fiMy#O^Z>Eb*yR5
zq*fx&gmaU%8NMDJ=ZT?`0_CWdh$M6i@G3VvzM~olz``61oAqn#V{G+HP?fI)v!Aj%
zT{l^hcedmnY9@D&be2O&0V^jjoG}k>y3@s;p*XNGgQaqUYI@?@8Ycf#)Z|Y2+fZ06
zb;ZrO=DNZjD9jehDNul|1HlJ+>Psr^C~h>OwV5hjXqkdiOt7#x<jP+UrwWGN6ul?y
zqb6JTuln+%#OkXLFW+HuDw124;cp`CAF3f*(1m#vfpK9;vj^o_S#OmTTJ#W0z3431
zCpW>kP?t}hWRBYsFe|1HsC^S5;#UP_@=!VDk9poyXM9EEu(Vz52gmRM`EFaS;ib8z
zo7xI{d#oYj%*;mvK|V7(#02-@<?nZz1fziN2bqf9Bzwo$%mQc0AXle=0|L-3PhqD+
z-TJ1;^G+93az1$&TG$#Cz^JY8{qoCv%P(<^xBW7qtPC~OM<+`Hi==D$qxGpjq?bM@
z{(?XCvuh8s3r2;63BvSOQp%p6eM%TAb7%3XwB)bAq{P@j;cw6;a7Yaxe=x4MztsV_
zrM}!8MHuZT-8Fm{p>k;~gx?m57+o)xy)O_r{v*|om{HP8^w<}_F${)m(~*nd*K(#m
z(Zs}l4MN+}^C3IXqBL2(o|p?ZbPn`wVtyZA;y%bOU(zCm>^f0mBPr=?7*h73&=2T{
z-yh5c>H9_v{~*$K00;8h#ql(hnhbc%Alw4dVcqXl2DM>3{})il{}!ApXu*De=O+*r
z#_bMZ)hNh*rIQQLIH9NR7-(3S5G@;e>PBnH83~R+1UzF4-Oy7vXA3H&d`&^)d)c_L
zWjILQbpC7N_aqbLe~USQCDI5%Ub#E0bs;SBOPTd_UN4+`$#Olsbc%*Ty@N)b(^XS~
z*Ib!Vna2;bAhvgCFfi44Kv=lJ*%Zbd9y^_)IyVpo8WtWQ<@c4WK9tXckeLN16sQ#|
z$=S$QH)Sgf=W(!gys53UIvUfvzgenl_U}I7Bx^X|G70S#jBI%i*=a}-`}Ps{&hc=8
zSNBz_So6<@y6{hr)YvNV*$8g!u|{Xy1cidF#{=J9fBHjDt+*K1zFpb=_@{KgKV1?X
z6)<t5Fab193_&QUL)0pq1E6t2P2933tdvswn!xr<^Ar}|45c@`3=cL@aT#Yu?fFaN
z%#L^`(1{VQq;eU-`f1iJn7jWRB`%5!!Dc?1lk`0<V*v~xJ+}!QY)ie67hy~gGbB|>
z)I$<6k1@mwFi)13fr&`a@(Z>6qTvbLyX7Mfwo_akY?#B_0<taA)nstwf^jdcWDTgL
zDiLsju<(9%#N~v)0a&)5=9Bx31&BRGdGi1W3m+bkm@f4C=b~S}A~bMFtCWSrOFf#f
z6`>XBY897LvA!|L_q1j&F6(MyH)ti&9VoKhU^^~pqw;!F(Zu)Wn7%#?AI%r7*LEJS
zhRFk!(bL)!lAo1$e?Ve1;}(Y4R&hJb=QV-Y0rQH)^sM!E_f0w7-2`GdLLiAw2=WCS
z*)}Vl>+*UBI>|9{7n)YUNly|=Uq!d81ja05vD=C>E#aOUZ=Zq90|5`w@#G-%)O|V3
zc^@q|;Do8qGpLjD5YI8by$E6onA69i7dG4RL&Vi%7{=M3{PmXiy-Jn@qO{Qu5JpN!
zt?RUs6<n=eJcfkitTt=~cuv{g{(M|Qk`UU{@xgrwA~xb4ZrWd(uxLH}m{YfE`0_{H
zcfAY6D}_(+-|H0o@eOZRcp1xtA#E%0?{sU{vwNX}v&h~6Lt)~g96rOZZ4y#XcGM)h
zb!b@lRFubH2GIvKtHZTvl_uX%Hm?LcA&>kdIQLlLb=Bpf*EDxa<7|ml*|3sxmXF?F
zwRAFHb5>S&?B2!JEgW${R#xx7^B9zY#9k1(e~5YhtawDNA4=nFe^GRO2Fy?OK-E|<
zf?W<4i5N?mvhI1@^BQ9`9PJfppG=?U95k570~ts{$(;fbG%tA$IyhxyyYRke!H1*#
zT_S_P&+tlQ*&%e{k3I}+kAs=7dWgZ>zoJdCd{J>8F{^lK5)Yn&PDulRi5q}!M`RJ?
zLr>ioVNXFP0L)cog`0ws4Fz*S;=97}fAwOpbo>nqtAp?-NMgX|9bAa#RFuC}LY$m9
zISD4{DerGz)gZV;A<&u|V1>&1vcz&l*lp9#;>k%V;YIsNZ82h|$Z<PVu_yE>(GJPV
z^HN0$eA^BqcHijMY`TnBCY3??4jR@4PTf2_NZ71#L!~8C2^|7d{Vqa8@+@8M{3y|O
zo`r;3`;v$g5l|DiqV;7bmIz9+Hp_-jlaoKr5C<l|a~>R=^|bwJ&ahB-sQgROF*a`+
z&`n#sQf<jw!7UD5@p0Bid<Rebv|HCbu?-ug&RKrWpZa+qWZeXhF*TY$>dYWQ-2vaz
z>Tk%>3gF&G<siYDj8{X}T7pYsVSLwFTllP64VeL8j?E`fhZUNd_FQE))o+%UoOmi;
zc*eL@=tas#^UYz~)6U)l63skQ(=`mn_yYxj>iN(mQlm(B0glmBI67O@0k(IYP3nuh
zu##N@ogw22vmlM8UvzB=C{<SXhbC+tpGL0dmXyAu?Nr)aZK-9~8^fPpWYczQ*gmx$
zncSPq^^PWxvw?!lnE@K7QX+PArh@4=2JMDA`?Aayl>RB@q|wWo>hzN$6OF+kV=717
zK$=p^lcB}lN8Q}YNc|H{@SB*)#KgM%+7tV6v?V3gp89G;4k?v;CBSg?vS}90k&y{)
zv8cC(@cogg7ASPH520}$(ZN0CUWwIJs7WW~)VcUxZ|6?3IrwYG`}?8<^$3aJTgn~S
zrDE+3UFo*BgfMLKpmjL%+YSUl31RilwWYgyHW-;RP^ALytt}(0cZ2T>K|pZ!^5`z&
z@iCx-7zL@4C~TLaDZJlU+OnWSqEA2bzjrnb)fQ%Fcc{EDq}XcgEA6{}U=~XW^QT&K
z?#st<3{+dej>Qw{Yd`nFu!ICLEeH(YQC`M{=@b9D^CwPD4*rC=j{dVPX;A6AO9UmU
z<uaO23$Y!VL!wEqMUzL$sOeZCj5eOC6e&Iauh9*X=!)GkF8XnJLJ;fbv2m?92!*l2
z?+MhQu!Mlg;;Oa$FeVgNIL_bpmTu2yzu_ch^7n^|0{lUnDps;th<$g&y@_FC>?T6m
z0AS*7J>pDTe=>2$f$U7bt)o)<Jd+8+^+$SGUz~`ntNCQ?Z>x8|v{2WHkj~@l;B~*e
zW(iMN&=K@b-=D6ICAVq5^|U(3BL0{uyAgnHzei^I7he0nHGxAf$UrI!>pufM^q&@u
zK5!|Riwru@r70-@?;4+3auSbGnC(s_;9W!FwxHuX>-#Lqc8EeLA76m>&O4UPpot(Q
zF<<!`)rKlc{%kSkyQ#ze+Ty?Dt>%77jS}nWLxw6hV4yp-*72m)mCb%d-8@_+ud`!q
z_7S@@ZB9yrk~W#gir>AiHS(orZ&A1I{I2%Q_1V%$WA)x>q|!MjSgz_IEztAi>rAF{
z;XFY9_}I#hutu2s`sn7BPOTw44$=FZnH~4j)jY2=M6MQk=dFR)?2nY*9v7_*+03t7
zTbizpJgeV4Mu|V?dV4g{kDO<xbC!ddr8LBy!Yc3i!=1H#@xE|`kp79h1vAClX&B|<
zg#OXj4QG_nlhFxHAYUCi&^7mi7(JhNbsAwHxnuC)Tw0h0QwOn-@-w9GZ)#IrW@XuA
z*4%D>*6$VGvU!#mvK1<N>ai5^;!lAVH!E6UDrd@q3BV^w%QbgN@xJJYbDneoGf_fV
zQ<M~H0xk5@oDLX`jl)EkQY<%TbZP&Rw}uwebW;Kv^Fl4$ZPa+Jl9julq|N=zz%Y8W
zbkEa4t5hmNI8?KjSWbu`T04b#*<L?%;sEfb=Yd9x0NOl<+Wtld(6n`USOnsEoU*|u
zbwfBzPBhiU_wv%9QDBNkU<b%sNMe0>-k~%*GWDCHMT+syr&hm`Kd&dYiBW2@Dw}Y5
zMOjOxL;l@)#J2gQnlb@-{{7mjmP5hVVNpzzW94v6gL7!VN_C{mFm9{Eq8_Kmuh{#T
z#<V-J^7`HP@3=di4(_?~4Ro6JyH0v{*eiP7IqYZ#PJ8`3F)kD?V9>Z)x(!!kc{_)B
z`Z@SV><E5oijBj>akiw%#|+9)65zx3GS_8yRN>=~CSbpGbcNtcvQs8aDxPt;y@b3Y
z2;){U;v||CN`W}f>ApR2(>5lSl4AlE;<{xs;f-gDl+RaxEdI`U9xaLQ@d(?!=7WqS
zOk#L!480&nHZa?tOTT;72KxN&JDU1)9I4df9WZTk%Sq#&FU>~74ka&r<Gd$6LJV7R
z0z8*wJPNO<lDpB@rbEh#)AXb6!M6FWXR}JzCk;nb^9(Iwd(DO&^X7M}Z}5z~kIK0T
z?vJ&2-zva{)olE8LH^DTa*-%jTNAs{as$cHQuTAUSIAPw|2dsycl~{qqc=MREX2m8
zL@w=HjAw?!;R;t{IWcfR^VKhffj`OfFOm3qd>wt)?{2LmqKqdv$<(RtMHf0&3SS3M
zFwjmwLfSD^l>^xYzQbc{mm+jo`0@x0Aot^e5h8hlQ5G|`A3e3Zso_+DIRuOmaQP$<
zHP1tm6gDxEJffMtpNA@62jg^udz==}IfVh>VW+Au*val=H<={GZ7c!@81RGJAmh-%
z1U!*8Ys|3iXacFBs_;WLb^vb#2a-w{!E!gr1WQRcDPHJW!xEJ|Z^x@81Uf9^Fs3-X
z_$&_>mOJG@7U}o!EHK%zi2;c)T2&!>4VMWO-WJG2xM4uGTUa5-hO~R5LSha>QU}Iv
zi@C&z=}?x^(?YC+qT?z>FaiwpB-RpTlx@7tf=(R3yCz<-mAa0RFWepT)U>rvK#+xj
zi27Y18c~zP_sP2!2|~DqCYM<s;TTxfpOVXj=YGUJG|1>|2x0(t>?yhYLl;qSo%u+_
z*u}Y0!Ui~Fw`qgXQ&9?KU&*V+Y{J77XIeK@RU{#BbYQjq#cL;HfvCMxI%Fg|sw<T{
zJ|i~<uuM&`Cv=@=dH(XD;Nw*k{wx72vTF0X7wl_r9!nR_f}rw)Z!+u<yU=+9iB+m{
zC{dXXN#zIft9-J=Z=O;Gdb7zYoI`xzi5?MQ*(2Sbn{%$1wFQO=G};?on9W$s<zAD8
zy6=ayGIqDi^}ilz9eK`s(Q0ystri>J-Ej{LJ*$9F9P6R!E!r9ga-~=tTT<%bG{6b!
zXSt!<U>9r6KK3yZnpv}@@j3g<Q@L?duXk{fq{!gTB$gWE!m!N^>f`%>f*cRn?0!x~
za-n3RKwC8G!wo1rHX6JoPUCX!^&;9BYd3pY-XGW+)@RhWn(3UGZ?Gr+oJxv_B|QGn
z9lMBeOw5r#z>Pn9zE&=qDbRl2A&#~}$af2ufa2VTraWW}ubmP72d9@JLt#x!0Ja8o
z5CK~d(Fnf8R41^b$M2^XvWoVV5gik+j3T58JYv#&PUsW<j?nCGiiB3Mk5@+T!IUbh
zp*2ps_ZJeL`4ygs+N*T^*d$0a)0Sd?e@B>7)^RQMCn;30<`)<r74wqoTU$fRxzFW-
zyL{O@k0Vm4Jpu)3IP7XAqes5g+1n7Sz=ij(&Bm(Cuf_9N^>T6edHk7)p!AQs$>^IN
za<U0nA><%Dx@f;Vq0uMrTB<wvw{2I>c*@;OdNx7`yqS!8^W97&L0*ZK;*sw1-Q0h9
z*Z!5tx?dPjs;f#GJ+>6Pe;Vk3ckOAQj{$h?(G!QCp19>$^$p8;hcz8h4f`@%1(=uN
zq{<x_=aKa-d(ajQz3-57SkB5#bk=>^C>U&@MFT5<M7R#;&ogcU4_MM-<t%3sL?0ZV
zFsIu?35wz}qMlI&1YO4Me~f1?v2QoGS)^V!4vAC-;x|0(@I<}GvwZQE2a>%ZL@I+p
zhBJ_kJcR_pZkh;o@JAIlvE;6X#pQxA@$>OoQN|YHQXu-_I_|g%_it<3|Mal%03H@k
z^;|3$c#;80EI@BZ=VmXovKwkd8;lEAErKjcY<K(<_s$zm!U0V2s8@NN3NsZeB=XnL
zDvnqtjm&+3@!S&Du;mX42dru3Ve30pl9>QjER0fY&Z<)(@a9?%KzQq^?GT0L2y~Vj
z)U&gMBJB2zWdm3-bSjDl1*Ry=Nvein57m{%*ChNzSwiNS60!Viis#!EI-kOx)w^*B
zF#uHIMO7jl6e+)%LJ_YUQZhlCfr|OEx?|CL>%|c1EXBBHzjoEkSazc^@%Kz@ZSVZ;
zelOKqt_w{r4gM}n#l?my?bO&WVhPrq*<PR7|MuKlr}<#9jx6TO{t+7Y{<hZZzoI>H
zG2=N~o1_D0HzG)ka!tCQVXl3C8Llw%++*EKNTn+ykfMwbAbeKMXBsRt=9u`?*Zs_V
zO_&G8bvx|S`QUw--HfnzmO=HVw%Lb^%qq3c4gr-VfH3qeP`aX|zavV2{<gYc{t~l*
zm_AO;QyV2j1#fX1ThlPb;w5g-<swM+BWYf;;)_8>a9s!;fb^V7k;61AL)=aIql`Dk
zT=NgovmnEPPilZ2PznmN?`byBgyJ=A4{{SePDDC-UFwA3;XNTy5^Ze@$Xu0m!FVUI
z9mP+*9cYcwG(hBfx9F%;3#aqo%Zpmop^6@&H^-F&cw#iglm*eLut_xYD>XwFbUo$X
zmiH-AcLeV`i=LPHl-6yB^_14H8%l*XG`i`YHe-B6*F#(z>*caL?J7Q#xXhDrY{DoN
zJ8eV2pDDL~ToQBYM5Hd!>B?J8)osH#J94tb@n>*q?$Fdf?TxjdIPIe9M&~o5D`u~>
zCP;d4MqVA$bL?SghMW$*%cVFU`ciB6woZ6C_X<qDwR|zY+!ayQMM3}DVZs5kRCyAg
z`s7+sxt`GttX^&RV|JH~lfOgiDlKK)*o?ETo&Swpow;>BrTa*sJsldO`OfcIlKI_7
z&D<4l%TXds`V8aVCu`aUBP3%STF=#prXUP|o8tF&A)JHq0s+@L$*k=rK8m0U<rT#R
ziKlFe-hu*aQTd<ieZ@Aa=3}9EKCjd3whYf1vphP*j@yX!F&HHx7QHSIxc$5nhxyyj
zILGIeTCPX6u+6U*jubvzE*q`=zFuk`_%N6`QwUho=HEAi$NU}JZW)unUF;&zbQys3
z{Dg&I-CG5^Y$g2~WfBh~%?ZO34n?9st!d=@sPfUDX)jXO?!PB=yoMC|5$lIsB}dcA
z44C?FAFd~ZJmRF|P2mVa{?>DiRiL+nOzPB=^U=Q3iNy~DJRwo&$YMeQSxB+3X0VAO
z&-mkks7J~G5%Y^lsf=Vg!eZ-A_A$nAy_#^sR@s_&*1Qq+r1YfNc+x@{F}$|=TOe;*
zU;eg9&U6+T-ffRWFvfahib}_PUog>I7*#%T67!#2uo!$ETQSj3w)!ViJo?{rGt~VC
zO_xceAQ8a$M<L<PRhnnk14==HF)0n3#8x9zDX2^PtF+%;0uPHPgtsZ#KT10k=?OK(
zKgGQ*i2U&WL83T##-+-MTjGC=Mnp~qkSLIR(fPqKS2SAu{v0Xt?<hX+$l~y@8qA(=
z$UQ>5;atA`9@%@jR@nXQ?kXAvb5{b__O&rrd?p$h${~~dWSFg#9(G`Xgl*R(6p2Eq
zxQ2!3DO<-dLp?JA;uP$hdaCROke)_OJ}?3JVGNuHx`#R`!z<4Cu*%yrE=AKHVQ3KZ
zIi!Tq2xPnw2=k@ghSTE#m)eV2W>U^Wglq7uB;1d@x3oo?jZHJLa2f@OnLPwqONpg-
z*~ONvMK%@ZFbWG$rM=kjXOWhJ9h;Ct;2Zr(wrGU`Ul@Mb5>w*gg+9@`O8s*}<3U{w
zP`U;~xNxYY(D34z=Nv<`hp!`?-dus9yIXumr#0*F+()}ExHeF!E%W`{)MJ$!b}x%{
zuWIwsl4f1b#exq<d7s`AnqUzjj>CQ!I{DO}o9IExvgzd1FCCT{wQoXCU96V%TVebW
z(HnA}ly<K5@;|DlI|b}y^?rFD&ObYTm6r(Z9Z_iYF)O!RQBcso(_*G%L3BQ4H^?~<
z;(xFpIY&zS4)=K65i56oCe>*iu%YFEV;K>ETDQKbFKkcRHXQVG)&$P6zMhKR+5a_U
znLur!8>>zy<b==kL*YUfulr)es;ZgC>a7Vi(sJao{KEJHiJ1fw*Sli9?Vgr}o+ASn
zuT)4XbGh&kOW8t<Wa9RL{QGwGvB(7Hk<HUYyJ422D&O{qb)IGf|4|XOEB{3b6Cre~
z5ztsA-a(0pSTMpEIIcS47l-Lfe}oAY{F+EqMKj4y2$Q;M*Xh+I#^Urk<5c8)dY%tl
z>w`2xdC{(U_ekWd!gq8@4T!jP(E(6Xd^wO>a~-aD(_#t-eONe;BC#p^VxBbwjiNdC
zn11`BpLuI3q_+|EZw3GVn9Kj5%KlbsY=8oA&_$uBG9au*92N^G`2A6o772I>l_tn4
zxxidzEy`6;p_B*0YSY`fV(5Tnys<hkorf1NXHE{LPG)}}8PywdO(!vamMvequ%R0G
z5o!bTw3VEQjc>D~Y@S8VEwr9SD=G3TSynW(Qf1qmD~+$Vy_z%Ed&jX-PP%tP>7`X}
zlH!eQ^_xAZY_lW~TOrT0@MP;_gaumL3isvqxFF}tF^stji}4J#dj)aPGRx^GmEu1m
zy1WM+6@<g-oQ*f@%OpbI`i4{8Eyg;y(V`SvJkGX~;`H>(nj7DCx82K^%YHaNJ+iHy
ze_U0n^jbSxpA7qS)FiMsHaDGb@H+89>dI|$I7)ua(QD=Gpq^Usw|%ZOZHjUhRKYJ;
zCjqz2gS_D{kyp*~&MUyUPZ$;ov`HUIhC~3v5`_Y*5qM>A`#n7B7;Y+pnzPH)gR5;I
zg)&f`a8g2OljTdK7?F!ybT6UowzfD`=(e4Pebu&?;tP>w#ts1<ix?%{lqJUaw2B=w
z4ZmPxChI)F{AE`cYROLO79E;wcB5hGoJ3FshWEZXfQHqE^0D~|@b=Q&=G>U$Q*NVK
zbcBx0SY%wLeidkje_Y(pH9w#~$V_zka$uEYH)NBa1MyVJ&A;Kdb<C@K6is|l=;wJ@
z97Kp;Tv9zJ&zhCA`6a0=@=|vmv#sol99}0G>X)=$GB3L-b<X>Jsxc**lA5r|A~p?A
zdD>H`4UDT1yfVe;-t6LaoKNC=u-oGB@r`!jWRn<4)s3eP9=GcLuue|<t=KeUE)N}#
z6<FDtM;ax+5-7wIeyEVdef^-_OKcTi+2`-Pav@Faub(tPuccmPnpcA3j{_|HS0g;_
zK7C#+`Qnp9?X>&r;~0^+h+{-Y;>xUeMw*?7g0?pZlQNPK0#*t_m~+!<I}|^_;y*QN
z^|jUXYsL)bf7DJZJFY4(I(+@$wq*PEdF>Q=z@?c~d_e2P0&Df7q9$UUGI(p9^7AC(
ziZlB5Pi+{E=sxIN7TJ!HO?kFP59rKu&Tp{z_H4b%c=z?_TY?8a#8A1V+h=^_+oi{r
z1W}g7<=)K&MuWXhbXOzqU)-IiC!Dn-bBkZJpBai>HjEp$9E}J)KI~Q$8-!eyl`FUY
zK&a^)paLx8A8*AI#{a8YTcs;3)M!SYHW$YMz_9!z`6T!5=UMyXJ^NP<Bw0}8_L&bd
z!(ca2OgmyA*crOq0vB*#xqYh51eV(;%Q%qdl92`DA!Qgz9D=wAIshA3MIg6_1cr+f
z`X>T7gc?~Ntak(50ICc&swx2Pk#B=retrG9ps)gM7p-_njai5x-=-H+MvoIrW$0^$
z&A6NaQnsauFhy5WiuHH&T!ww&3N5B27nNiTDHpuf2xcVryrGZk`=7%?v&mAmVa2de
zqWmYfDDEd;b*x;37^s^fA<4<UJVlQFaAAs%QUNajRBI%U05-6~LCWI}0`<2!-ZVPI
z++|4C1rSEI{)up9vdgFt@vWOY7gQC76W%~qGmZ^mg~FN3#IQk&XxRfIHN(NgvY8zM
zFVX}frnkw>BlP@lHX%)|mobwV+X6PKiuz%E&wCicc{Qd-jX&axZ%_;iw+BGpu<^%u
z*yanBiwxPxxTGS-<%=AkJ}P-7;(g;|-7^l*k@-Y~pYbrg2O59>)z!h`YX)w?Jjo$N
zuq|R%j_SVDuTUlbF#Jra>4HTTU5ao^#O%13eOZwu<)|Y3oC`dgW!WKed8rV7xTYk?
zqs;W;!zSTNlp<vy^-V2nOmcy+3)b=cs$5Vd;Us^^5AOlVb%-x&Q8|F5gw57iC*<p&
zuyMW<CGrb<mTSHmrZeuDT%K5)Z#SB+p+%-uGv-$8mJp#gi#FfVcU@-uqgV;{ey#%T
zrd;hghwe>LLM>ZeijBRU5p_7PO4=!3Niv58sY|G)xi3-%W~ucnFPKq>L|Q8zBveh{
z0$w#oLLpqL3n(f}flC0YtoDoDJLm=croIF7sWx+y>}SJ(VwuZNVl)I%t@>6@DGnOi
zi2sDuiko4L9uo12C%UkK3pjO=1TxwRCu159s#&cs*1>8Cch?21!=f+xGjV%f)98RK
zq*<gV+@~FMZG=Nna`O8?<Lfu5Np$5|6hJBaf0RJ{casSSGcmCI3!>Q@{zq!?Kc!EA
zH>)Z~PNkFw8l&Fn!TNK`kt|njIr<zLqh9Pvef^Ek9j1A^3W!l-n`rL$*Fe2l+472N
zAuLmg;ozsH$N6%-Qq_P$aM5D5C9-<!P?frf4G?Dfs!-3R&y^bnJag*GjcS3ek{t7m
zpxmd@r;*!pQJ#3?w(I(ta*IMAM5CPTg3Fz8V?Mb^4^)!C@q$##IY><P-b^BGRFHOr
zD$c?;t?I~u_xKJonN~0L&F_D%)i%@K2x949OKsMt<V&ZwY`7d`(7$fcpb%4Eoi*@!
zL@qO+`?<fB;<xtU`R|?e@#cJ^@<yNyVr+Eyr_#65+xx;!W?a`Rm3$ri=@uj!YefXX
zm5(Do-pw!uVpOa<Y7&5PeHS>5Y4noftNH^QHb8RH;qjLU7=I1QO(b31ScZg~a132U
z-JygAU^%A0O^;}WCN4s|$xD&5&sbGr<v;f2#HkA+<Qi3zxb#4q9vPGD<J}hHHB{eQ
z80ijx2VdD$i69ZGUTWvXS!LCRVl{B&;4tF%h~%f_u3IlMk)sG{e={5U#T@HvC{vJ0
zcyX|oH9Px$E}KK{3rlW-ps00b3Y{%!N}8=@p-ysH&Ot#~B3f4dN1I0#S*G|I01(zN
zCn`e_*Tl9^sM?6rg(pP--5806{b5?~Z0So>?xc&V@xkPry3?w91Qqk(gwi@r=jBqh
zHNR%nkll!7t;XG=9&~cl0xzQG6QERy>2(jgqdI^Jn{54cdSqYxrwXB>4UT`-vGe(6
zctr;~KV-5K^(TI1555WpZzsvOqw_w>*SD1|#K8~S16zr9d^Rjb#g{`kzY03=1?KIp
zMuq1oq!C8Dj#X(JkvMBgeb1W;$7jmeIQwO}i>{j>LeKZ67cPNfD{V7HxzDQgOovl{
zGU)wC|9Z3HR;6j9-A9+_mG9#QZANILzbzZyr=XH7I6t}weRn(>eYf@r{uF2SD!t*S
z$H)55LX3ha>4sZDFQrfkPt2hu5cSzUoBsTUhCA@27l5T3$|KptscrCb7vpk6&Uyk-
zhtn+{RYWOyDgZkA?HLK;n%I1gnt6*C=6URc{BV9fh;`s4w#xO^qD1QtVv9}0&}psl
z50X8Qbu4NiM*ZTBZD!-o{ds?R6x;P0s84yzEXPVBd}R~3Ek76`S5+lQZ;u;N$^wPX
z106`BJidqrKDStaH%nBCz<$V>mBX5i2wLU<$c3+1z_J(t{<44$inY$7oH@b5Mi6hr
zw9!S}Bo%1W07101mh=y$3r<|jJbv^{uB1MU4wjnvhU*{F!|>-#=ttZv{BgwIHd*H|
zc?45})R10g4O~vGW7DWMk3^oZ$`IWeI^ywt911Gu5Gz-D{0$Zv5r>#agPLrzix6o-
z_f0+lZF+L@DPNKbUo<F>git4d2jUbBBG)ZLg7Qe9lW7~>Dxp@%)5Txy8W)=dCtLN)
zl(eA_EJ~K9gb!y3HL0=19|0tqj{)@ff;l_v-L%8o2bbWAW5$Dza#_Zz(a9oJj9mS}
z5XMHoq?I?8@pi0`965g783+|4oMz=m@#-&3Thatn?uiKAKGaVeV~P^7_9kChfiJi0
zE7WKDmXt&|!Mrz55Y4yWV%9sYa$v?HRk~o4Hu@;gU=xEZ>9D?~fFyX`Cj#*37>l|j
zq?p+%!*qkliAUpQxan0q>8`VB0fAD{Rwbe+0FS;FBFDa`((W^p3%t(cZERl;duL$8
z4}4X2tVc)m4#K3cAmL7TB2`FUCsYb4g5H)3@L-e@c>{PIcp>r+>wGYOW7L&neng2P
zU<N6P7OxMrrnVNv-25B<0lm+@xUS9{j3;!q-ObWxm@D$~UCcR9Zos){403{TvG9N}
zQ#9p<*b8&|F1U5wFc61Ah#HKGX+EXtKo7mnlrJv~tu7Z25@S~d-k2c@OeSUNA3ljd
zokx8IY?2PvFcuXbib+4@EJR%U=c(DO1d{deoA&Y6xJyH-z76t2UC!^8m#ul<r7V+`
zbwq@(1U1y@wPQLo)THv9%4|1pp_SWF#-e(-Ra5tU&6jLYGk9<CuJzA4B5npcA<S_H
zx(zzdqOp@|J7fbbTjH#3=6)*uZU-KR#Gg5oAOzPt4_!R#%&Yr;3hw7l9^LN<OeOUQ
z)0z6znp-#?mqU{pAMIR*=KxIag7kR{2t{}dXnIWBdU?LV7k7?K`Q~mTzD*$SBdZN9
z66_a{tg3ahM-REs^k#L-?EpKc6w(Vdm}52-q$J)z8ti$bim{C5Qrs@k>uYFLvJO&V
z$lEj#i9OM2QVe>MpiT#g08WODaUU$#jKcMSa144R%v)aoL~Sioy@BCPF!0Qf*B4p>
zk??}yiNlFvj*CyEYOK>Ws7zclga7@D0{FsQKbPVE;qd!^(Py`d|2us)RanyS(rxcQ
zl}o_k_nC=q(DsjBsP7qCx%3RNJWacrsD;7SupO$;x>ZZC%F4g&DIz5IkDaU6Zamdd
zAU4v8iMN}`z3<{&X{Xyc)p#?1+~49qdxJP~o4wv+jJ`FCPI|oAmyG|Sj6;NBbI6F>
zib@e^o-z+~x6mDJsy&+ZZSui7Nvg4*4t*(bKAG_p9ac!;YyM`vob60(^x|IFWn?Ht
zf%^DCWNUxAI=s~3H@ExAdgHstPhN%bLg)L0^Hk#tq}VVATjWOLR8Dz6FDJvxzx|l{
zaQn-mp8AvXZ{qd;McH3?MH#nk+wjoC&?zZ7Fm#6?-6bL2Eg~f#r6SFc(v8yH-O>$G
z5`su~H-hk<;C0>WS@*Y|Z@ur|Fl)_m{*Ghcx6Ks^A0F?E#-5nrCwLuf;y*HuMq`LS
zAxUF{V+<$oC)aqD8NB98vZ7BJv!xNlc*2(zs;>Yx4KvFHXDbB;&~^XwDnDl)lX}a)
z2-Bd6qX+U^%KU|EBzCyhS<z3udza%hC2g#%WUOERN{D*54RtnUVAx2?iD#ls;Vf#L
zNwzcJ$O}V^Klz#NQ6?KA_jZw&G1P&N3lX!B@X@ObLBb0pncmcUJu;mjmYn2kjGrv{
z2PV}WU<$zk>Oe&WdEri4423ztg?XvAZoXU(``O)+UOQ8~qT|w^MHZQ7JG<rWK`VG=
zjn++Xth<Sab}IFt0EzP=mn@@ftZlvI!<2S&Mh%*E@xIE;Mq>Au-`@T9{$hq&WlGB%
ziLx{w%5Kz~Pq0AcEi~igUt5n?n$;LM1NzIqo%+!nwIcIOAt1owmX5k`<?Q^3Zio4u
zIxzz^`T_da9#>3QgBe#R$$c$ca4dYmaX>FUjoao)^=-ls^AP5f5zbgU9&JG#;?vP*
z=a_Tf#edVgnoB=nn;7?pmY&JOW^QZ7)i+yCrk-%MCQj;d<nS38x~Go~lnq}T{4oEF
z)qy8dYZND1)csLPv^^u;O%nfC*5#s?`+Y@!dDy}}z8smzRP+*X_#N*H7XWaa;fWuV
zV9;<=09s<g-uaN^Y6Q!}r~&#{;$8UYF1rSpjQ0QqgqJ+~agR2xV)2i0O*{KdUJtL?
z&Hj6+IC4U&hB>EA4Xddf$76MP7{{s04jrCRRu@;mHIL?OiFn;-0aIJR>AqA5L8^W$
z6$-<xJ#3ST>sDJpUhnht{u5B+_XPWN=KIFqjAhxoi<xiE2o>CjQ(s?Q36TFG#r=pt
zv4n_m#inS9@Cou914+UH={_?AzZ+o$ExZDQF_}}r0$1W~+foM?0uuT@NJTh{Iso{4
z2ofC5#IjfloFk+rYksfEa36I9TH4PA#evgWf^?<nLQz5#yPpuGgNb40c5p7&EFz^K
z89Ik(t7KeX4E;n95B=L$VI*BBuh$?@HCjym>|fYE`JtqQlGe_yS)vzj<-*4gur&Aj
zp5APgi=m#d_+u)toOJig0?>^i=MWm45P4DW99(2rJ2wA+>Oc!?=<IlqQbHsWmmGRs
z{KhEBJt-=}P;r6}(L{>Wru;l5nb_{0T_nhuyzc<JETIORwB1>%D#z+YRlNxQm$3jQ
z))#05D}xq6@(H=!0|+#+;)wi5GJ(`Gl=@E)Oe`m%^UBHsj8`N60WN9vu~42{WC<Wt
z>Q6{7FIY-?uWCYplzzUpA%augF(|0^HD`(OXwY-C3t2NAsTB-`K$86--SJ15^!y^#
zvdCqJAE^Vs-v0C)*D0!^8h9Q?T{qKu=*jwF;w%iN?4=PWyGl%j5QJC-PF`cf@e;RR
z1Q8065P>JDzD0GNiCcs~lve=lLy=~tzAvc+DuxO;OPsrMGNq_J^2vz!+hMg3=f^tG
zt{zu~&s^FH`{@od^qXQo1=N(^c(zCJVsIwTh83&25M;PI_>yr#>+5m@iw!I)q#ce}
zk%4DNj|VUf7Y{1nT6R_>ySn|_vQ>LAyH*|gxXq(M)k2<jrf8`g<8}Q70mFN*$y4>e
z-%Fy_ENQf}+8`SQB)L`AprGs6r6ws<Xw%1w;937-nx1Pn#jJWvLK|&cuYjsMg2fny
zqSiDD>MiIb3?z_Hh{3CXa;e;FycnTeGmnx36r|lko?+TcOq0dg>%kK1^Qe75<+QQR
z^jVtbrl6tr`!BK@!oVg4$u!XdLL5F46FdSRIx&p{I&a>s1Y(7A;J%D*r@u%H@f9#n
zRlmZkzX1i=69*Z|w-?czNK*S~gQ2b~Za6T>J<DkeEfPGC<TP`2sIm-wzK4-Ac1|oh
z@w(ItJ>y(8zi3sjbw{8|e^44u`N7GLI~Bljvb*4u;o^*ed_JI^{MDvO!618q+!<X?
zD#d}=Z1jxLtuEb&&3*N3eneD{ri-ZND<1~w6hx;sTI8S-@@q@#4eG?#__MMN!!$%)
zGP<m&4m;({ZSB8)xTe%onSvcV+SO#h=$1A8H@bnt@4K=>TvTZGYdjBY6(%PQxT#o`
z;s2|C?$Jc<|0J=(DA~DyYEpJz0Im@0za$nZCGh;6FaeTS7M-{907cBNO{0G)J1Y{P
zi1`*d_2mQ4U%BYldV@7gF9};56w{lI@HwgeRz37{ACg!%e>0_POXeP`N%FWrHK`8L
z|0P|RZ=ayf@pK2^V;`zC1JP>Kp_%gK&xsHkGlJa8)xIb?0b_g#r{%7sXT(|EKoaYF
zhVW-kb3KQR$z&!4rii9<vmYf!Ltil7mv7HC<W7&ie^&39()|14PUVAzQ+-z$i<}3=
z!T$Of20u>fb1zp#-SajNhrfSf-EbZ$V#Wc630sr(doM2W(GZUw9Ec!4S%bin-QNI?
z^Uh#z<cBY;l<*;1Z5x1vheWdS&w&VXTv$=^`DWGGZEB3bH5^E?l7Nm$;dW&Pua3~o
z3K`DWN(p6gLkZxfZb~8z=W^z=h~Os!3b_WJ{T82H|AKS0p9V?hn8-d&jt^#If2I@r
z;({(G?v=V86qm%+$4XCMyHSdU>?4y_(u=3!dC9M0baQo(N(S;&Y@U+7N_LruLq~D!
zWP0_5%51Zf=`o2_F@~FD;Et#`30?Ov9R{LTw%ep5V;MTxk=}qn=&_%h8CTW8lzKN;
zXc7kZw>3^HyB{nnE?i+^F)D5Qqg_%z8vmxW_2QhRqzKhux}q7lnrilQ7wuIE@XZsK
zk10a!b*Hr7OxBuO6|<=<c(3o*KMmZ?FJ1FfVyWEv;}*ht*TdpS69#T}sM=p~Lr0bp
zryc(G=wa#<M?^<1UGgfgz8=+vU{upnA9n*DCaxYNL-o*d4Aq;Gu0z%oi(c|nD+is`
zLG3}|nid6T$*ced9%wSWGt@XJoU3{mI$7&H#Qx@k8n2YJME8U9m>18eBwL5lgq4kN
zLOp;$#YF6K?)wnRe&KoawWS~5kco?kTDnPdt^cfOtWn+AtLEg3&^Mp4&gMn3MFe!;
z)!%;<SVY`zt=IYZJ^p-=G;HPblD~`Am0mF2K?fUPllZY}Ez{<Xl&tCCDVCI&d%ck6
zI=Z>(6&Uf3?rVMwIu}1~;MAT7iq(zkpMtChmPgs(^L8|`&p5MZ>q9JPdzrT<7`zWG
z500o_1fZHEa{d}uy@l_tpl^b<K7ixyY9&m1=Q=YKV0mOs?an}R+l3Er&z@viUXrYT
zioU!pzw~}cVl|=4KT)4j6~i*<r`?%JzF9APplyO5s!7@v$m{adl0s1!C>{XI<96wh
zwh1a=K92oQKldoGO3hFYwhU_3^}|I!1w);vNywe@sgV$6u<nE8yJ>-Et9(fZuCY3t
z)Vd=`5R(w+oZFWQI|nJw2LXgH9>(tV=#U^GXvd<cP!Zr8#t_IV=wjN)4Mp$BT4>`B
zBS{-);GG&GbD52%grG*EMO&<bOyzzRNIXV++=x@S;NqMbSIcZwSB*l8Tx$96m4v^v
z`$Ii|elBJ%W0)ywEBz9RIsz?J{gpzhYX+e9PB*|m3NT04Ncc;=1{HS3RPV-5G|seQ
z7<;E=x--G>4b;owTS#Pv?-D<}C&%&zA7Ua~O*N{yPLb`YY<ps!Ts6!f5$ZWo;u_14
zdBwoq6GCidSDiM|jlgLa^TG)`G977I1`C<)9{f~!|En~v6x&%9`X`Tp)C*;DQ8W#>
z1UQJm*VNL+?HJsuY>tFhI>0s6SRcsEOF@f)f#Rk|q@E+eLDXKL>20PGC~B63&V(#~
z&aKg%M3~DQuLw&yLfy_?&KJjeT+H&eX!>(wG3nawL@O=uaxjf-sR*gTH7JgXuE#UP
zViaG-Fn1R+2HL*Z#c!`Fv!pW|!FVZ*sGX*Gt^`OXOl57ggIzNS%{~q>_1ZG1mmq??
z6naQ1Qobr{@^V-n1!~)OV?4cOV<ocb!eaoU)%polp%v1`$V*}MDNJn7L9EYjXh7<M
zW9rFZw&y7AVUt3Tn$Pi8uZ^0ErtU+D6H9VSOYFktr)}Rnk%aFr9EgXQ*c2lr%lm0e
z@`JE*ob~!qkT{>1hBJ_1giTm&Aj+HmGN4H$SYL2(7bf~O9_p?&OKGn?icz2hqic4o
zlx91Ucyvgd|LC-zuL9wa2&e|mGODCk`aVRf!R$^X-j$#<CW}g#ZGmY^1;$?$OJC1-
z7%W$inPi}egZ{c$SA-?Erp>C90`J%$3u21%m82W2UTL8FoROdzrH4HFt%1!j19?44
zAC~7%=(F(L1_&yuKh%x^J0sBpS5I;3s@S+9BN9^==;w}B#iJc#YHj5b^iWsEc^soG
zd#{_@lqDI9()iMR<i97d(mrI=HSOWZg^sSLxupLNe`US%OxK<NbZJ3+vu&!j?6Y5W
z#^lATCbjqqoj^_r#E2%@?@+=n@vam8ha^_hB!SQCmqhl@BoC9nv^8`s+ELrq#dtX;
zhz@amP*3it)Ss~NJfB%nw`mISoBrC&XU<(201@{m`fn2JYZd{SARnKv`mSkx6I~T7
zSg;OAVgb?WrNufiFE?Tn-pro`1Q&8IIuG2M$)O*UYm1T#4-Ec#EsmGC=eva-zS$90
z9Tu$jx;b{_d1p%g_h~7XXdS&`ob!_Yb(hPWbcmGXbCzgi&8HlTIO3xr`1VU4V%%Ty
z&AKxX#JJ@f2X#hIsAiXdBv#|FJ*O|D^3sOjchAu|aTMl?Wy%>RO&TG&vn=xTEqoOr
zIs)SVZ!pr84o;GHHVgf4vmbI-vY6GGfQkwx00*|{Rvk(Jj5K`vK}7{@(Jl3uV;^9o
zkaIno{PFm4Zu!cN$1Qp;EW>rX;74e3(%JmuXM_QP>wxBY(OhtHi;vNeHtSrq(~~?a
zrOV>^s<)^3X$JL<vy~p_8|%CEhejP<=ugVtlW-aKgl+S?eIRmPtMg&f(SAR7XgMOp
z=5BmLdZsd--N69v7;?24ExZwBCY-HRnyPFi%d)@W-CMA8pE+p77dR^I44E00UKaed
zHfXRo0i_RmK!Ww@9h-5TZLu1t-!n_MwOpSjOLm-$l7Co`dG(@_>fjFc;X3f!%r~!3
zcX!o)*Jl<#X`^f<dLtiLnwo$ak|zD$@og=s;ED<?1>p2<QUwWVkt_thHPRS-&^fMz
zFt{zn1iw-6_yJw701XQN(`-!4_M^7dbkpjx>uU`PSJR6RML#0J<QOvK>9Z=%R&^wv
zYAMp83(kDUQ!C@mb)f$84$7wQFlQxi;-;0WZjtcXI*vMb;75vZ?KVTAlRiD8vssGO
zX8J4qDG8Rx&xlgOst&JfD_Tfa6mgTh$|uB>e6hqRaS%<K+s<~r3$p2;d8?DeV19v@
zq7T>EN6o@qB&&PpPNal?Tl5qwvzn6F-SRroB@`%oE2LO#xN&;{JDG4EoIL0j$XNAF
zM))WBNS$R#m0Xll*xTugz|!impyqfSQLQ%z=Bu_hdrb!R(d;ehwL_E5M_)KOTBGNh
zC+Y@wFxbBtUpK4KNMZ4zBHThs*gNb<!^fbMAI5!f0IK)fUNQQ&a>&%dtS9|6zq!OM
zv84=?y3vd#LLp%&bc(>1|8a}{JctN(SnO=XO1{QT7nbhan}bVqBKaNZp5jcY6xS$e
zTwW}PcM|8`(5Vgs%jj$z&!|;*P=E5ASHf5o%WXpG^S;ZRX}XBoPj7WfxA{Qy5~77S
z>-Sx?lCGCl0`nqBUH(X30OkWwQ33DzD1ieIUOO+LhmpTQM7_zMKXi(t8NuwpyMD$n
zR4Q>YzER42^RIw!VRfySRH@6|pHG$Le8N(-mp`rp8vSc;I#O@EZ@fD`@wG^{&YU;<
zv+oj|{?zWnB_-*baUbA9^jQ6SxmZ)tcePee4Mt{`L=H#C0Pe~NM|~V(x35`!v4Zbv
z{IXa#iD-wm3AV-WQFXtlE#bW6QCL!D&T2=k+wqBP3}9uDm$<_l^C7@PK|lkGV-ooz
zQ<M0C<&x0cl8yrQKnOI%<G#dzii*>9nN~Lnfgo-Pc-JpusjDF>n}JEnw_YGVent@E
zp*Dj9@gEvm%;Us?g6-xoP&iss@Dq6(IWt25xA&-`T75#w71l|Zf!iZ!`T(<TdkY1}
z6_DLc&&sxO`Qq36n3l|f1q27xKf6wmQJfa^`IU_0GoM<};8ca-fqYDDW@Y{mD@4f<
z(t?|_p3qsV5h`L^;>FE&d<P5~s(+B;vZlzGg!SY#PweAMF>}dp5QdNzvv3R3tk}3*
zL+sb8ICynI*AFmKcJVN8bp(Wz_Dsn&8g5P!e^}mwX2T_=DkFdpBR0rD8CVdLNL#ju
z6QeO#Amz$;nTuBXI^q}LF85oSz@l0M3?&J7Sd~$JhTPM53|6zBh4+h`ZYO?hIu*N1
zGZ$eD`rboQ^YvJ>K%Bft)%yi3GY}mnjk=>2CRBh++F(r0-_T+7+&ulM3N9z2n%p-K
z0{UFYYvub4P!iDwXb}^gP+@Qq>kf}5uz!WMQ3DMTla4+xsf${?9YBIT=p1bY#hrY$
zdFcrx({n{HIuygy5DAGmvvm6uwdq8+HPAblxtF!k%7Oy$S+9WRMh|XnRXm|lDcJBA
zh@)u`TFhLGWc+&&v29|g98$^B{WC=;v|XzVS;|fy0fVC#pSTJ)mQ|9lnSID_t<q|8
zPom<d#+&WzxUUf`zop;cP6X}NM5OoYaA62c-;-$|gg5vyKQ^3!`|gim8ZfRwh>u%A
z9Td*0?~B1GblEs+B+XO;iD8iUsjJ>2rfDYbI`Fz|)(!we&p0*9D|~fHvbqTe=i|{c
z+$8~2{QJfgW9%OHHiJS(uk|pKznzKSyb(aeixvL=J|ij^r*KK{g|^xPuYCl2qbeY1
zlE_%zhyDl)PaJUlns73avAOL`uxEO@sNLXjg_hqv8G^Jd#^L@1$Y$SKbX({WDuZ6z
znKvy6c0Xeu4oBBq#r{OnD{(Otb^mg$=>rInu<S?;kqeRd-kl2sMr1T?UuS=RJ!B{g
z!YyeryS=a&xOsh|Hf~78_dUjQ<RDX;co_55QGfENFhdjv_mbb;Msh#(7SH=#idP<B
zuaQrAT+gr6jV0@!jltRJq15}ba`|&(@h@Dxo{R`6@gz^^pYq0XmGUv!kbR1aYR3U!
zq*UVTKU9(*%vV65`{(q3%~wep)FOC_+d(Qq#i+>t7v6{wnS8|qZv^9y!T*T{mkG{P
zB>LH3xhngwFRft_9QJ?)_rxQQ7r`(eOk;BS{4kBZPLcPX3<1+vW4Jr#>-Yn2#K<d7
zndYlxwxU(?0LEmoZfwjlk!{gTIYF^CWtf&mY^>>I9+6UAsRmEr)ZqExbm=eeR)|r`
zkbupvW_zsdeI<`|lXeS~L$={ra|RyxFJ=ejXL}*<7Px`Fbh1GOatxZz)BU3fQs{_A
zvGGU~Cc?|iC$V4l%l%8|8(enlpu3%gvo-$thOR-VPRspF_ySLLT~9V~5~+e;e9S!C
zs4ABF_QI{oZD)Z%`2POO^AFmGox*DR-`jvw_JK?;-)AC`eS@d)fPapSzpeN)I%h^!
zzwN4~aFaDs1trmadsO5MnDED{Of|4X1+{#YDdoumiH+f!LFBS<N@wa&c&5L`+lIK{
z?A(GCI4fj5OM_FJVKrPXnq(?MVO@SM@;TZ1s;W3G)Y3wlcup0CuPSa$U5R@-Csr;L
z@pnR;r86e00~0rDqQPL|biA$*{tR1233YcWP_JUdevZ64{rqizVSXBmywgxJkx=6l
z!wcTyqzvYRDD(^(+R!QVWQvU~BS%&Uaf+WL^LCDd)*vij?zJsZfsd!x>x`UGMccvz
zeNAxk{{B6Fd(qzl#W(q-FI)#`36-OJ%G*&fN|5lBkGhc`0G(C+Zk7H<b&HA#g@i`<
zp%90U)QSuhZ34aEF<GIa8VmK}H?YM9lo8Uf0?mG^We3GFjSWRh`zHI+c?ZSAUg3il
zogd`mtvgk_>@5y57@RK=rKFwOP*2003?LlJj%62F21jkM^VEt4Vzlt%b~35qW0|Kf
zF`fIB_-@C#EVtiRd}FPDUeyKdqj=j#5S#lNmyad>`v}M8^MqmiU~&~fRo?xxNi{h@
zb)~6lFUd>X@!@O~cKMt*=Pqtyf7UYAXi!G~RUq&8<(S~Qaa))Dq8UBkeK(oc7PW3O
z_P_6q*cQBojMN833HAk~JWXmZ7d}$G;BFK8I(*d^`3m!TItJ&3fVP{C@!7g<7=fZ>
z&XW_#)h_~Zf-g(#)Z|$z`T)m9#j7mPP9aClAB`H<&VInL!SUe;8=ldA`~c`=v00B4
zT!N>>hR991TZWzHN^opFEwv05QEYxP(0cj%6=f)MaimF`Vj|pG`p>WO@(E6!VX2}&
zC#S^$f74dJe(JkfoqE1<Ddrt5iMJ?kis9TTo;J4Ti!m#OBda4GUz3GP8!dCr-`^3L
zROq)ymkx*_ad8I^@vG!BA$$!TWdLZI@~nUE1uT*ba~YV%NWyOYQf@w`s6Dy^(EEQw
z8t6;Y;?vMX6-FI}puHsm0|leUzVw;jGActTQiBx%xy@6xsnepWXnS!2fNQZQ>B}ah
zOo-t$MBiycr><rS3hK{(difw%=K3t%k9<v*B|BD=8?i?qL$;uSAcSaz7r51tgO7_S
zp$I6KE0mafal3Y`I>YQkg6VPz71Y!xVsP;S2|!E42nAipkB$veCAW-nwhdSiN$^WW
zjdbTI;7E$2OIqWtj7ZofuEC*mt`uzLhZX@zM$pd8jK4KcuCd)1`a-JWqf(v1tcMJx
zf5u@i8jwnyip=-vB<!vJa2mG6X3G@%3*(s6^mvLj=$hv}i&qsv>Xo$B>nnvK$GaR7
zm4;U%Fg?|7JXejoTXbl<+Hf{K2)!k$pC<%;{2gK-zHPyly7!n`uw->MR0SPML9LOk
zOr6^_6hOj{_c`U~S)SlX;fvK{blD0}9!&4G(#`Qihy4<wyh@QqA`pG1two~33{^AG
zp9*y~#nT-r(ykx;QD*)wk;<yjfc4mSH0d1=m4}Z}k$ziYj1}b}wJ-06;!M-ecV#PA
zo%+5zg7uMs<c%<C7%BkWB6F)qhIbjSZ_bne74cFvbf{Cs>^UDX%jbv^MW$WiI`6|O
zoq-a|XY<70&2eg!@%F7*=CvzhWNIa#Y<kMO&!_I$*O4YN0$`8R*sZ=<(CF2*m*6~e
z5B_pe2TQ`x!iJE0;|(0~jo7Y!)o>Q&W4)@_C~`ER!JFrx(<W8;7%{x1kms;vZ1-6d
zc6@7mwlw}C#$vNk7H$+C(+3vD(OY7dZ}H72&|3o@kj@JcWb9;Lq~}W+Y)KvHqK+R$
zf=v@dW?c{?D{9!omr*~vcQy_k1*^<PVH47#zjX3>gl;wK_K1V5UQ6t?C?!QJS>SfK
zDwGIkD!cVPj~x6QOukl*>DeoDF&O>L0FUigl3g<0_n5va6GfjDY%h>sLjCaLH1;}@
zewMXU$Mg!NElyVkh2aM(Wz=<_uyrrw{p53Wwc6{EA0ek&V@jJ^zpfp;tRbE^%EkO+
z2;aYF2H@_|1_t5((f)Kd%4S^=@Nm;kGWJ8cn~IWC8XAMkMhXtOwZ16t1Q8?EqKja0
zYCVbif$>I)L^55-IIStm9*&$pG!y)+L=Qk7pmMV4fC(^($g;bQX$*eKSL8X&(b`}9
z;e4j~l78Ov8#OYCX;i3#dn&;aP_OD62?1)>3tKPhn_}C6NB#USO>kGmHF=@e{LSLk
zXnosdt0UPb#{c7j{{I8iH0@A&fN#UcGX6*UEaRW02uPo!vkSDJJZL|hEz#cE>hI|d
z#8_cCa$2<@xE1CAvt5dP#kBD2!%O>uS(7IpnC<Q<kU_!%nk@NjMQCA7;g5WoeA{1;
z$|9{i-9~*t4FYICY$mhzsekP1<g4|(XmRx&!<77w^f_E6EUW3`E>DSJNbcfCkM@R#
zg+1kO(q2}k;M{;uWTKdraRI{_A7yPc=C({bQ=bW+DYNiyjkhVAxTWjAlK^Nc0?!go
z&*p#Dp{<Ojd%D8X+P)#;95@QT?d)}A_(qlpL=(RMj$~JP=eD)pQTgirUMR)geK@0I
zo>*+r_AGibwMb{A?c?O7P-}j<gOTaS8)X?>bc5^6#JLY?f6+|U_$^mH!{Q$OSsF0|
ze7p^L{Uk(gf|;<FObtt_jF!$r!Yts-6#%G7f`qf%z|e)kHa)un!C#<_htpleN;4#L
zj;}@u3z86hrn^f*N0GYN3W+8pS}_Z3Mjl(!QRMc7`lxD8`65aOFl{7RoN)Tm2IV{?
zsf#?N85^w{p^0j;fRvZHq4zUevhwya30*gOPJ&D1%(}FDCn*`r3bLCz4Hvk{GIO7j
zSv{+aYo|aaN>LG(+pTB&3Kr^@_gX%^iGi`;dk6$CFO2^_)HbIGd(gJ{U7Mn9UX`fg
z8=K<Aos?pn4qMyuv^$7?MW>%^iBzw(TT%HJeqp<^o&&PoJfd7kN$Ipu7+cNHr$hE}
zgVw!v4JIOQ)M^4$QtfK@@HZSJj@qD(_1pM)mbmBmLA?!!2`p??w-BLWY9QJAa6xB%
zSlF{3BQs!1skfQzhm~cFTr-{Y)4S^`%1{`rA4@N?D>;3l&0Uxp#IG$m7~(Xc=XuF1
zXIcGCa5KEB<CymLZK>q%8W%MYsk2i9F$Vj|3Gp7fA$D==((`G(&oq(_X~=Bn1-aH2
zAWX1R)&ond^n%zpW4sGsi5Ury%JXvZD`;}u&!PuI{TnXjKO!}Vv*=-oYAs(-erZ@y
z|Haf*8Yxvqgj6~#^=u{K4N5p}b%nm?=1VI-sjaxk7fqUZ*`oP7#d1HqGAsHb<F-L9
zqmBEyt5G-cwWr=wdn%|LE$R(VzTF&`+=%8J4{yfZ!r!w}weAVlNVT5N&}qSu<>AzK
zR{&76?MmL~$m3EzUZWq#t8v`l9uIZi{Rh5%`M^TK%mAS!iK&kr`rKCb)8dkdp;Iz`
zqBQj-k`)J7Vq<<#Sl=J|3136l5&++(0h=88k*tZ!U1bL#8CsxA`mE8$wM#hIiHF<*
zqAXTdGkNo*RP-s%Ko(3afqPf56lqg$Fh3@(P0*EO*wGPOtmP}j=oA6R($Dvd+#k`4
zMCL+;ix)?{6IUG2exw|STgLeiHY9Z~&@V+iN}u~>sZsaX<ZD(bOJn4inBRVu*v@|P
z1Js`fu6o~+Bu<m;+`nt&hmWO8uST}ruPm(*^EYGdT*y>G*%n|RvaT_f>x91utqS|I
zY6&|O96X43jz71xy3}lx(;J<LtCY67w@DsCAoj;M>hHsTcxeL-r>-+(noRk2Ip_W4
zv0;7cwq9k#jkS=>%3MB1Kb0{XmsGrMYwI@j(O`Hi=NfCi#At||QPE_G>~Nm&Zv{Lz
zZ)o}%Azb8I@LtsqPMZS4viUkH)AW(7>MJ5s06~UR@IUEufi$^o5Ek#-cc@nMk{EcP
z4}`Xm9^8c;p|Ob5WKCoq>L@7~o{x%;ErbM@X`2|{b0y-GOW8`K%poM6(4?tLz0L&s
zNLH49QImTPu?2;YapwN{oGsRx{qnL;Q@m3%?{Zb<1@sw;P{xsWmu?U-=QaT~ubF=z
zO8|QRPV7rN@!Vf5(t`Ny(~uUTPtLh4di#)>-Sr2s#%~j;SP*Dzr2?)}Vos1s-nR0t
ztZYCITUQ)d*k4q|{g43-FO&5_h^sPvJ4l2i^(O}X@X@yHOy>l2$JE5_(C}o)H0Niw
z+G_cE%CQEZmP+$|J3neGp#2W7$jQD}5!bZ;U~>#>{@FnLq`rf)-|79$+;8h%3}7SU
zRzLLXz;=c>keb~leAjRnp8@R383brQ7B7ktk=JLD-hF<vSYLxg#@k=+eK}<E_e&Pv
za4FlVL$mzJpYui(hXdbT40)t^ek8m7VE<$^OvDeM3dE<J5c2>906+Uat{=EiMTO!w
z?{~kM??l%II{VFn=$w(2;a19loEdyxRk#I_?yPD75RU&f(tJUYAQ1Q-^!LGJ^}j~i
z*-Yj`If%!$#p89BoNtyQ5W$Ygff-P}EaLTe9X*s7Cd8RG#~D77%5M;&zg^)k$j5d8
zrWC3Ptk33N1nu@$zm~Qo-uRKMs0BzPfO61}Q01_ha$~e%*qZASEq216LVyunnl7n4
zG)M_6mYr|*I9>T6pnahC((CZ4uW)^Zm>#|jit%s~hhF|C(sD|QnTnU)q0l#N#g4x%
zzC`oAtYdw0x-n^YzJB$Cw`OfThl5d8rP(A#x%3%`SVhq7<z%hu@6pzqcaFbVe9>l}
zFPId>j42UAq%5kll&iAda1cSRm*<9(SMS;R<@|z9w<e2Uz5V`U11XZM@atD&zZi2S
z4E3MizkRwlLI|jzb4qR(A9}!hQTydXE0+8r+`jYDiLO5Fl!%r9Bbv-yLKYt@00!W_
zLbs5JJC_qeND=EiX2=N?f#Ywj-9{*Dvt`yQ5DF_;C85jNQe_})u*uO!=_VNu=eD~D
z5ezHQl*g3B_soe_@B(bjYKjW$KFq|PR$+QCYI3brWeX?bv_hX*dsq#UD8|~jHEtxX
zU;&`7j-JM~G{d4~sxL8k4UAuFuF=PnV{*5xQsM0RTT<cN8(Zm7vikEmA_)5V8B~?%
zd0$c-iq^8e@Y`-?Bqw;0<)dodH_hgjMB3&Smw!=wU6fEp#+(^W8v3S8|3nBNeuboL
zmUbzkzLBUxmEA4Z@|q~I7TNmAlwRbQ!delAwW)+D90%YrxAKY)n)b?AqzQVQ=ZotJ
zm<+Z8a<2*w+iov*%Ok5k5SAKGdb8xXgB{7Yva=cXj>M5R&(V=H$1E#bJ8W+%9Pw6(
zRM7za7BJEhSx?v@X>NYK<gwGoMxf{BeZxQmn`fj|nz|bzbGCQ-UG%hKkd00Fwkn!!
zZ{_#I-&&2D@!pe0A6UGIJ)eYJv*5cQIwm5kSY-~s&Sw#gXhSK@UaIiVsR(At6q=Wd
z@I%X6C|@r)yBo>>axcD5zg+mBw14^AXwv>N$%DYVcG;1ktl`IdDu<la&tfB2(Q!J)
zu4_p+W!FCf*Qh-`*gWolIxXi)=RYN6sp>dnCjW`iAgWb==EDv8p!vWmO09W;C&>Kv
z@ws|@hW&r>NrZ0R97c}3lpnYf^3MB6AOphdco=D77)M2GljOjDMGTkmR#NypxnkN{
zIz#kxfF$<*?C^8T<8RwsO5Aj?C27fJgeP_kSh+SCXHWZ+z-0k`#8a54d?c;P$jiLQ
zw;5;?S)?wOPVc*;I<@K~rHGWF6jQnbdYEsKv;aJ2QBp8a+7-lsu?D`MJ__z3#3#U)
zwDjyH2qeshg&w$;OOlVv>oM1K2l^a_nQAUTm1Q4C8r|w=qK+*B`fy;R1!RLa9+Z&k
z$nt7FkIz-+B@_<01U4MCS82gdX2v`W3x+2fs)iUHve$=9GS_dQwxZURVo8VM941Lm
zgMkgsg~=%lY6Rhf(F7xa%8+zk<4JrRi9c9VK|z}=2wyNGmyOL|$>^YpvvpyZ`4dy3
zsjYQVw`(XD)PLCW#4<Vjbsmov;z*CYOA1w?wP{(%NQli#j)gsIX&6nwB&$XmOJfga
zLPY>a!)f}_hfRD|ad{rA<1bgP=Ig`=_d~gv^m<$!`QkjZGOpN6s6}f3W3qzON@3H>
z4=cBr62n)J5MZ`L%H0Ur(GxH^@@@4fTgB|!y)C(5=!B8}R8E6)pRAtVgnS)uIA4UN
zm;<COZKsB+KWY2&!=Fj-5B?ygAI3D=`kHk|%S7jsPdO2z+VkqH5bDSBPa)9=#f$3%
z<Xi0*5WGlak9amB@UHHV*K}=;R*9n38-ttU>Dm-6o`oeTHXsz%_UB!Bzc?z0|K&`>
zq82w{zw{H*2?X^V-wIp4J?oZ=FkfRpBIQwH4M`QLdYZr$ViYpR%R)M8{=GUCy;M;a
zL$AS2y9{nMC#Bmw*MHx3Q5~jkuV`bSKmUceE+f8F%43LR(ijI&{`QcJ0X(;ys=Bhj
zYz{~+Xqs_LO%Ko2N^)$in&~o^++xSi7>4C!GhY4nyPm~~i`8X`UWQoZ9@+0(O+3Vn
zHz*GY#`Ci^1aon3bCF*v`i6K8pSPl@2eAuwETIZtb)>;MIHiTLX~nNPF&)}Tm-OLQ
zB(tr5-hrXoPGp?mL}=h_m$eO7FrV91m$nS2M1Nrw0aXqz(yTJ4bEWJj!mRe|+(Rjw
zmgM*l;y$5`w-Vl%t6v8_sHLaFqjkb8NA?=}5Ix_%{K^^yQ?edxF0HaG+rwpe5<hfz
z#BI@j8_l&byE>@I&J*=6)S8bYXyoZzmzYXrTpqcq(RJ3U2=uI1f~Sq&liE4TKt`){
z-#mxk2FcS{i~AxXFHa<m*5nC%e9e=#(!7XS6Ne@eB`F2a3@cGS-S7n&`{>iUVPk$_
zqPOmi^0eqS!puh5-x8^3o$;MJFL-aiWg>j>W0mkcQNgHApJQVhhbJ}b+&mPQ+_F1=
z8M!)M7mi|w3SzrEXM<M+(kI<4Y{?1`b!L1wLk7;qaDWCP;z;FV+PNLxfqXG?=&kC5
zrI~?94hOD9jF|0PN=4F=l{@LYGGc%CROJx=7Z&^fKKF6BTc&`yADT!jo8tjw&%zNo
z*dDTH3Nb(_*l<8YvlyGvA_2MZt!aU_pi5oMTqZ+zkeMHZlG$}BmvfyR_TYvP!?)Mp
zOID1x#c<T!Y;CN~EY!(c?;H!)#p{o#wsD+NSI@UMAd(wAKYKQoOyvF{>h;`EJ;!hM
z?pwUm%ECtq*i7e4`NLE8W_%^P;bd6_3vni3fU#<`mz|n5OE@Yf>ibt!%acSV@D4x$
z>+-JlI?eK|BL9T1qE8K_Xe1ZVO&?G`TJ5KKQc#M=aInxUcX{{mgW#Lhfoe39gGtY$
zt=7Nl_c#u%4Hu`Cjq~2@<hQO%YateLs$x}tHtN5fdYc$||GoeGOHSK+Y+vrDM`OGI
zmCrdkINBXW(VhAO`k%g~PuQZ!X75oa0yFF&#&8-Jq^c*W?+Gs4)8SY#SJb`~id!^+
z)cXA^o}@xG%ORA1&dls+7U9`pWS#xl;i41ZoCryV#B2%S&Y+cW=9C#rH&tT7^*1jW
z^sEqctm~1Yg~*t!KJ)zrr@ot2UQ*HeM**9D7B9eWI+>nqm{k~^Qm(hD3S%XD41;^w
zz+CM^elo5HaF6GJ)$#p9@6?L6^U~aY!oC)eR)C>_ake{!1qnjE7=4Ari^UZ|_nTX<
zK(kyvln=0uvc|<qNxbI|6tK?FOh7})P;3_s;QTt-<D^*t6?9$IUhV9tml;`Bcp%`B
zvPCa~FL;q3G|sVSsV4o63p;53ZM>qyvDbug*gD8x39-=m8Fu)sTmv8UP4W-MQO8r%
z3WZoyx;-apL;_`pdK{hG&2|BPyW?IYqAboZGMC}Xb__?Q%6?el1(!cfz8%*9>(@Q!
z!KaCazn^k{53g!ZZ&>O4{%EiiJEfCn+1P1$%S0~!viIMbTGd6uZ$gm+e{kB+egAyM
zh%V&+FBW^>iD~NMUZr$a)M({$DQ8hc8I|DiXsjv@u4;X!hK(1Y^F<IlYBD{9u`fhT
z-XpXBSllVSKc;40d&9bCvo-KQ(&=@QvHMO{DRvV@`6ltrw*BPO)cw*`?B=}`jw|8a
zoJP^-hjusE<VOP-<-*4<!uMonu1sPgr*8~ClU<0u=9oXICcl4vGN&XadhY!Gp7e?@
zgo^yShYIbR>`9mGr}GVy&)!!%sZ=*B(<!UrOP`JjjGS7y#2fHd(L9#@ks0MBL@RQ!
zsWW6fh$Z|G7Q~4Fj}-HUL?`|z5~O{}cwVR$j$Lp>V>+J#vzC`q=iG6iIEG_yBC>?K
z7SVWNWc>%$0c6jVS7z;^L;j2POqWN0%3MhuNFDIRuRY+u*)#t!AMD$eP+db=#()46
z;|1J^K;0nBvZ-DH2ChgKOafxN0_o>f#a#B!SMmN{$%!|O!vhOspJL3BAW%5N11xha
zC|=98$Y{jGt_4!FG07==1;uy}^l+!F4=5mZg*x8^qD|`#eqZZ)!Xa${2m}<T(#(+x
z0t{$6qkZ(f@(>$J=GotGEA@kT5*^8{xgtoFo0wdZBcJ7QdXlCIw`U_i!a9;iFbik}
zCtMl$Tw+7Ha(2=R2D=g3=Y|_aUh)%CPs&P1qq@;f+8>6iJnwS3NB8>alF}WJ|NPU+
z_l1DT^i@Kb7zT5y{~+7fin&*gfAm!S>rOM#BO;!-Rdz+PXW<grZ^^8pj?Z+T2BU9_
zGf9$>2gmScS6ur*79=Jg*3^9KNT55WQ6I_4+@^rnT)vPlrWfjjmCOO^+43RbaZ`!X
zeEpoPQ2`Hb2wf3h^q}J+lOs^EX=@Q-_qeZ~<SCar+r#9ec!7CFlL+fZ^h5G_7Jx{C
zVAH2Z9;@w_l&9tRPTmj=H_dd-PdyOc#d`5`W+IJ2uq?%f2AoRXwa7^jD)PqS<LT^z
zbONtG+nyO(Oo$k(TXHIq>MN^Ly{3S=s%)seb+FJx@ck`Ol`mia8!L-BKTBHF{8B4h
z$KAPwr<PS&rSxyC=LeU|`1wn*D4flT7uHc{Vn<O}#qx*dXUUMOXW}j0-ZmQzy45!!
zA~-Vj87!PI2+;2I(7)GvW9YZX&)*v8h`EvJ_ZSApcKWoN@%gCDx^1kqT)iR8<WN$Y
z_!5~-%0S;B7&o!)AlJcNXmB~~LtJi!1gBk=LF`Q@!?*h^nCku60v?MXJ*H@-|6#6q
znCxshn|Fk*T4+>NN`1$ch)#rzmqp*xJ~UryisfEY_|kA^85%ivVA$~7>Qo29%l;~0
zO>M=7VGdEs=p=Z+V#g+faWlB<awt|H<ZA_;DvIsMh|%a!C6<I4^HbknCDRlb3VgP*
zNnh0IR#*`9U-{oD12WSP@qAsv9O(#*t8fcdhRktxf&l^ubuTAz27>u<^w%y|n?!Z<
zLbaT3U!aYrjDt5C!}<=_jBP+kxXHc-kXfE4?CKx>acGTvN8~x8ZR3?m;_+gh6LHLk
zO7MXKc7bCj{zw7iPiiM%ooV12qH%G<Kq*SL-E?O0Wc}a4@&69*`+qlPzk7TD;mNt&
z5sXIu;Isf9?Zi^?|I?dh4dhzxkA*3P=nrU2WyJuAuNwINz!!kYy))dHpRXFe2n=ts
zsfCto`OUxW{MAgucwE`^!<rdiA0&{*5rwtI(*nt9`n>C|fiHQ?C$%xN60#8TC4Uaa
z54o{-)vK)j{3Tq?{`-^1tDV0}vsor>zE;@m!wt*Jtsxfd4$9ZREt;dvUIckIR>`Oa
z@+2-8I)_0W046tZW3JtuDPaS=x|wPWiolI|F+w=XFNu-DS&cit;dr$__JOq3h>x8J
zuBY>7`1&Y;JUq6>$OoJj!S`quSp#C9DD4VO9&gM?t6hgnpDSi=bPd7>y1#w9zt5W5
z{O<GUw0LB4BmE4f@_r3>M)ybkBKN@Lo?SA*kpx^4#J0er9i=k|qD;B?WI2E|NPZ=Z
z&3sLX5tcXmBb2(cfG&vS8fh2|T##2IsOlP4qcJYFaG=`Ap5syaz&bfbGoc_yESdM3
zK2BF*AUjO!sh)<fo{$1wq7m_R?yEr3qyZXh#efYhW8;1X3p8%hO~ZHG9*kem5&%7+
z9Rm!O39oxykPyOeJLBhgz%-2*$p9%NVyDk|7~VTf`K_9^g?@p!?U9@Xc||)#C0QxK
zC<LMRid%lAgtSACq^+`gVtmt&RoG<KF&z+LR==K6FT212vgW;@k-KZwn(@VF_O*jg
z!|dzK9EM7h7HRdZ9>q=%k9G&E%nxe^a+JJ)N&1Xfa-s>7NJ<=?;cWNt8;Ja6xN@Rh
zJ9azx#z2w|X|-65fl&Ol3=MZ6Z7_z^Q#E;4?EBadQv8<`u{~v&jqSaZ?=erJ2y{NY
z?S;ADzU^nXu*>eH5Pr@xMB8OqIl{D(b~4Ie_xxl?ps(a~Q0CHb;ydSNIL9~>**?#N
z1j|0BKBwMt90up>H10a{&y@Ca){J3pKRe1s>Ixjb?b|FkGb&z6*G(1I%Uw?2vyK14
z`gIbD2skYOgeQTq|73(8C#qxAZo&XGMq>(nmC(w$GflVFUrIOL>m-2iQ39DWKPFC$
zxU~#0xw|5LIG|QB$eX$&C!V<tJe?h@(YxB<+T`DnH(H>*HXQ`RWl?mD_HG+>1~A3f
zANcL^e_v59xF3GJ{8K;+1jp%I`iRcvJn{IYafviBM0+^CsXixN>F0zmW&xzF!`~gW
zncxhNRCE-ET{{_J=m4#T21IW!!WfV)W()n>L*w9qlL)0b;XrWQ8zWOv-?tbo<tX4O
zO~!9UXgCcf4bI*_(w39uL*gqFTSd+9>7S$E-YxR^du}d7oew+kw5q4tEnH~B19r$b
zYFYT3zUYi)#kgv5S%jOFIJdc&B;^$W#I-iT1~#fjf&J|ywf&)3-NhDxU^&F2mn65E
z?Ga32s}!vhzysqr0(+8<ifJ`oY(qWLD7hbr+0^Gz?DT;i#4tf5)rl9amkB1QqltVJ
zJMGaUcZxG9TKB~GcCTr}RsxM!SK=RT%qDYXyqarq9xZE6OU>~hmXgwmxPfero<y1}
zN>MF)>l}Q9!)EwEQ?~`cJFY01LI~)zLm0^L^kQtePg7>6teeij1di4P$((qvn%2Ms
zB;md~N8LnF?5I&}Z(JJl#(ar1#QQ+4secI1dnN?p{tV7A@Y6N@<v2;0tAM`00-}v?
zcPKF`iNBgZHUHpvq?;xd3kbF2LkD_<*I5pEt3Q|V1ean7NHGmWsk~9^LxW(7&Fo47
z4FKg5^w-dzlC?+qMTezL!(9UAUaNizjn2TXEx6~D5Q`Mb&pC0G7lrE51lZDL1+6?W
zR721jxBQW78(++HQY5A*0TKnHyIb`zzvNh%DkFX;9%sYCzx?M(?%;WeDi(^b;(8<-
zO>MbOt-7{_#!SuPy9%$5)>?RPw0j-+Do~k!2+%8O58nN#ve}Q)=ONd7b{x;)t+i*!
zHlaH%no#4ww{NDNI!k!Z=9ZUOTWpG_Sv2d#Qd?(aFQb2xF-{9BZ|fm;5_UDn*qE+t
zR#9{OWMHrXNu=%W`TREbCX`a#7jp@Cp7$vkA8jDn1<+v0_)W$kv<DQBKUZV9lluK<
z+8r|!Ukl&x+0b1lH(?xn0Ev*B4KeejrU4uknRpm@w0m@{&&ra+^v6|>Eoe|K`g~c4
z!c{bvx~Q=$;S#qAH1gCq-{mVqb#B9-%bOxSV>t?<eAgnp)a&cTB2xmsEg==y@wgxJ
z=l)Qc7jQ<B*0Ne06_O?%#5&X$g6J%nuwcoEgE0t?If)D2V+=7Q9pDw+Pe@Lq4h>*R
z%2htGBa&R_PEEd7>{vijUg;oV<3I)*%4*9LX<`!GE~EHh15OJ{G!~m#i8sdZr&$u#
zEc>Lo=A^igXOb<Av&l5#rf0roab_Z?>l2u-d3>KE(MhW&&}Id>S}2ataH%4Hw`4dE
zQ~sqF*4{J`V0NBAGaE0%A^F3H7SBwX2I++KW_C4IPB@6r*Bs>hqxx>h`>&EcsCh=V
z+Q-()wKegt@zMP67X|O{5sdUOZa73yHnfRW^s`alO9v<j@XU-j?AxYtFVuy#d{;R1
zdf!t#ji_#R5s{g}za|QLk|_=Lrtzn0VL{gslp=XS6D;<e1uwBd5;jU5W^&6+I&&o^
z*hc;NQwtRh?~LF8k>$zfe8UwkE%%h~mhq`g1}mbV4o+FuFcRH>|7-(%UxnT3&{fe&
zITNJ+pJ*^a5D&-~6#lsVzkk^N|C3|IWmTAU@dt9Nr#yT}gjlGF`@4k(^?jxm6D7Us
z%^ZkjbkDfG#9H@<DZ%>zIab~<lyPr%I~S09d}$3eCD;l~_!m}tXrMt@bS_dAYk^9^
zdpDw=Ky+Nk;O>qnb#g2H;h_Csh%Egn>k=v>;#phv3n^E~@aIsyqsb?;zst-r4>oBy
z0gG{opyq5N_P%17m-rO49gusV-a0-s(4@i^F`u2R4a9SN?p^Q%J|xOi?^gUzcx{I&
z47wIagsT-kwJ=Q8eSC8H=2vShmHXDA1_QZk$c#$5LF4)CaH^O9)5oUc*%{zN;tp%}
z*;&x9at#yqwpPcJ_4-7I2JiFRn=33^{;&5-zIPzh*)i)|^sDcmP#J78UZJ4EGyHHj
zF7^EXijXV^=BmI<0!iGGX#B}n`ryIzvV3MVkP3;Oe}+hwDm*DP=rs7Zb)aF+Y9tX+
zXL5u%?b@P;1hL*&)K}8NHF5cvy0sXUw#%Ft^*cdmyt?tVWrDusGt0!6O=u5ttk)aK
z|3QNR>wc$|dN>S_V{N7<#7{%Me3&3rOhYlEl>@Y~4_g39Ck4&K00~egT=tJ5D2EkN
zAfDU~YJdEY0Ko|HwP4Q5C)<UoWE${XA8UMRFKzgJlLpM{!`LrGfE}#Lpxn;PqF8e>
z`3s@Zc(AxUJAtOewY!RJv+`F@%3f7BUolI~go1E!RTuHRZTa|}mqx`eA#z3nO6Fn~
z%PsSQ0|jE^p9g`5Wz7>Uc++nV6|N+K69D#k@zOUC3%!#cGSaLB3#PyxaM0#ykq<y4
zPjd23bP@+M0hRFMK57Em7fiU?tV=ytRwrFZ2{nM+gR}3}NA!hSR>lBA)&~;?#++9=
zD8#dN)T5}roT#6Lt*d;Yum}(Q@1j6{e2gU>w+o{C3OH!%VpImuAW={QHjmi9sGO>o
z6z`10F|eq|QA$OAfLv|XfBXuBo99ZZ4c&j#nn&nViTeGQqTTniHxz)OeIzg@TKbDF
zio1NDBjNY?;@MQgs-{Hb*EK}o$5~GnsCl;e(o>Xb>mKe+jouR8+wijhc*B1zX%_Wj
z%8G_1@3^cRH?Jo#zMeq8{yQp3Q2bu^$?+GhUtcYej?CE=zg&68WAb3SP%$D*^QnG`
zx)#r31^_IIY!YK{MHFd34ehsQ92IC}eJwcFu-i+jK@_tF{6*;whMso=J}C1uP|FT+
zJ;83SRvJ^O2Fa>-Mv@eKBz~yD8MwH^86+)@$QTqFe)y6rRDUd9(uj+PAvcWC825KO
zu+xNkPzErk&VnM?wct)_J@kZ8G<Nqk4WNTF3w)s|EgXWe&#}mFgR<n2jF_XOp9aw(
zz&uxQv*Gy62S>j0&2Z$+m~2k%ZVjE`EL;;QDW)$uh_FT!geKg;2Nt;do*!~nM}Yyg
zZ=?sNCFQq_f<~ZC9Ig<~3N!1vQ!_`|UY2Gc(Sq~3z9M$Hda2pJgpB^!KwD?br$Itd
zmjrJ=>!8<h4w1yn5bo#?WYCH60b=h74Z~1&8rMP1GJI(1hg?_lXG6>VBXI?Lk<3g?
z$}6}o>`fSI9P!sfvB(4oRRMXwqqdc-%}-SsY|LFFlQUi`zDh1}T^IO-hw(Gq#eN|t
zPav2{X$coZdKeDKJ@oEXVhv-z;N~DB=$n%{ll7-{OE7Z&Kvx?E6Mo&Avwjvk@ZD3W
z`b!cMGJ-9hx<3S*S*KpWN9v^x7CQR^31RRN_ack_6Pr^<!w{(!iW~BxCRN>c`?aOe
zOL(3Fc*1`eq=v7wX1S4xUV~=?i$?Ne_#u_aB#ph$$U%inOYj(0OZmZ7f(&xuWR67i
zL1h(R{%45v(&lb3RlKD0H{1lmYNLEqUPm41b?w0RzqVXd5Gg`>5>iHXQK3&M#gVrr
z06JPKf{!pm+3BK~&GI6`&kYd2M4|uaFRM!E*^7nM&y6O$C^^8}kCE2V|L(UTudY!V
zV>t73@xFstp^7i&!1hM}?@~foc5R`!2k?D#I~`F>bl~)CSD)#+PNb17M)6+4a8p#^
zx%6;}9J<D@R#KhkybDN*qIj9x>@zjfe;qu8O#Mi1ms^h_I6hdI25!LmTe_@}yjn46
z+T+H<<JuQKzHyKLv^7($rZVb-ZWoVCk@O9sft>_jUGg@T?}SX`2Juk{&D#;%qaQ^0
zEoLC#CS7&IUL1!&sTZf`dhwlM)&ZP$8K~h1j)EJ5?3i4Qle)CAG#e3qn$M(kupPL+
z@8L$ENUzb5UH7{wa0ew&WH3}852&?;#&MJ^A?wZYb+nin)eW!jV0uQF_Bt=rq^aQV
zGt5ew7^@_`u_fXbtEGPXbR=zCnMnAzC$%T>$d~H{9I^XrDqrl8jBC3sF-9`pusoOS
z!`m$ata#yAZ`)kboQ)t$p~6&#s0IrBa4AOmsT<PTLY==kL?xCOxt_?1Kg~Fd;XXtT
z{SO(0H#W-c_ON9c<cyA8^UV~ZQ<y)BK)dfF3!I??MFW<jWax`LHd<Hx9kk5P_X_VZ
ztQLWR`WzMNvkhYJ9dUT;o~mLb>)x`;dr01Tt#LjY2|sRi^t?=6ysvY2xMH&;K%sbn
z@--~#f15D>XKQdx{@-D5cvYSWq}Nbn(`GCDA5Z;+4M!PWk<?P5yz<dmV&F_gQN!*k
z=n!_|V=|q(FOo`bXCYb5>V>IY)b^=fet~*6^TIJuH!l=MXlLJU8K~ZQ@f8cr4epAz
z`_21-&#mO9%2Y^KsBeTZ!O~$8*zb`}e%wA+V>`Davvpx_*yKZ*WuNL&zU=3M#r}uf
z!=bP@icU$})2VV{fRM@pNT#z(HY5rQOtAtw=uQ-gRECdDe47D9GSzM>2Hbm+*Fx?w
zTFsZ1vu!WrX{B2JAG-efugUm*|HsFu(KR}x8Qm$;IYu`E(yamlBBD~GrCX$1x<SOz
zDN+I=DyfJdAR!>I&$an{)%$z<{t5eG=XE}g^EmDYMm0$Id$#pjelv;{=9*{lru*dQ
z2a=BgQ@0KsqdyP)MPJq%^_-_|o)_Gq5Wl5+deGASmF>oL=(Cfb@81`q0p~il_~U<6
zgMUq4TCifz;!!7zY5>zCOtCYGk7l=78jnIlBX!8A%c=nPT7fab0eCBe6QpXa)Ir$@
zz^O)byuFdE!kePT5sow&=2zwYSjvjrWN_p~r0}>}Sx^$?q~1XAyE5s+A>~;n7S=9|
zmtpb?ICe^m<+)CAk9cx@qLCHplusG?tnSUay5v5b`mvSw@SFT%!Nb#y%BZkmPka~O
zQ{8oCgwzOy9ibw?=gx7f;g6FF+^Md7aj!iVR*seYD+J&i{75E78IDQx+*obv0zg|k
z+U7`t)vIL@fstPFDB6~jcynGpJVBwR;aOyD^90?59h<X}6VQa|=6#pf(MpY;Yl@d-
zFJl1yiG@@zst7psx4-^{=Y^OV21+pX8aSb65{oSxX%n@<S4<&&3`mbxbwOvWg7;7^
znIyibmxCprE2U>Dso#>yUWz^>MbGI<LujHu^fM-JiH+dMx{!}@6xTL&)dj8?4RU0E
zZyw_oTDKi@cw*ZUBAbAZCmKMkvoP|=dgWz?a4c}@cb*|V9&jpOI}X>@yZmZpp?u3>
z!9pz><!OHBIr~xy)tsiVe%oF<ap-h}xs{z@Y>)%)UCQAvp?}bOvbbAjtF%^upKfK5
z+TebB&%-4BluF(aq7=LqouJvWelyTFeAC`~kKH=7r=;Pbf~Ntl-515GamCt}DMBU%
z-zCc*%-b^&O(mQ4ufOE%a}(bm4q9d~d`G8j$$@dE|DKGwyX^E%`>U68xkkffn<sd9
z>U8D)4Fdvz1KN957ibhs%T?9@@VRMx^_*G5ihz&(qB5F9^pZnO-rhOWrMM2T#zq82
zAW&75L9lsT|5R!kkd|8o6*~?YBu5YG1VT3B;fAY*QB31Ul&3lr69=o1e&J^zJ=W%c
zqn>w#8A);W&=3g*_o)?&L2<|MNC>l==LW?LB=HbrXv3U-mS59+qR{7*pa&77q+uek
zGGd-2t2FM@adrhCN7}!xiu0r{@ix2bo|IrMeI7^pB)ttz7!JdIo_9A~2j>~*w&h;(
zM~K`rizUAm%um0ff*(d&#!kpT%9Vq{gXxrU(&vssb5_BTs-tY8LyfGv5!4H&1!iB)
zG@+!cSU$J5F5F0|gr1_xa0CGHv9u?qUsu`ly65&F%mkDqoVP^niS**n(|B27faU7r
zz_V==m&W-C9u0AXE!|vB-Qbw|ua-%-{_n`z09V81jRG&~^aRSWig%s5Z1)vt^4B(p
zL@H(8`AZzV*eHpWyXBO&pL3M=9#JVnq=wENSV_NS5iqKF{_*{r%Llg<U(AXV*%-A8
znGytuYlf}28vR;{AS62o*ODEdc`n0F?6`eH<zt5aFVZr~C0%}=3<5)8M^)&)_mqvz
z0GY7QI@X!)7f%6_;x;gfjn>hZoSVxJV`J9AI@8OdaTp9Qt8?A@RB~;~r5}`)YArCB
zS9|@4wy1-96L->(1bujA0)BNr-ixVuXRwy)+{=71#Jtq4q?SH^G-H05xjk#Rjw}3?
z{aF9v@|n3*7;T&bp<q@&)2RTF_fNa8d5gl)Lruv;6IOi8OXD`}H*)sOoz$DHCZZS2
zOYwC*JA#*u%G<eK)j4^~o-8BLgYDeLQ0Kd}{<q^dEfTRD(4Q%^plF&@YmgmCEQaVD
zjA#9?36md!!|?oYh^|8A^Dj6(iF|sBvae&~Zxc0W>WM+$<f}S;t*ZKh@cqcmn>W|r
zSk}I25slhT$Q+P~eY=5k5P_G-2Id<@(Hx3KQnFCtQ!u<eL>`3l*nWL=X%d{;C8p0A
znt5r@18p@c*sY>>+U%?C0|H-yFAt-%m;Tj3Kc*tz1#3NcxQ$GFc)4!B!a>SKeqdH0
zxrx|iw|eGVU`c13WD1QZV1_hDN>D{P@T-hjIsWD)HV=nAt{z8r`#ZEwx{4|jO+KWS
zbQle-6w&KaR@Ksy$a>Q6VhSCHx<yZmrK}>&&d#w-nE0$=jwlaY!zDFpO!0?o9x=zu
z6d`~M_yb={A)}p~nGgE^WUs?PvH$M_+BSH)a3JPdMEpN&ZDF+l1})o|MBtmsqU-0Z
z;mRjd%|6y#uJ@dmK2`2FCVLImzwkEqf$M2C`w|CMw`3-<#?NEV=%(d&d&HRGnPpR&
z8CZmi;G!D&t9bls$@OyV13KY!ZK;EPV*KT8y86#)0Y_7BCLR`ldCU8kSPRnG__i;W
zgz5T4r{C0&KdW8=qN{mp0(d}w!IWuX9?)$1z&CXcP~w&B#$S2E6C~_I_Sz_S9C@DV
ze0=x1W1q1@Bq(fJvtxh5<Y_JBp2FOVr_-f+g<tMR-AyPiYb%{%RVY=X)^kTY&AxdY
z|C3fdbIr2g0_Wh}SV!U0>ynVuqtdq&h9RL(f1EgWe0es#M}H%H8b9Yt7#@>HUMOC4
z)YoT(wHC(2?1!etNIHWk$C&3&Ae>H|@Zp6xKDdRGa~)LeQ-a9TjHUQk98(Quxo=f~
zeQteQSG;#p&YIVO-HMHJ98aF%d8Dg<M5;D<smmP%@i*=aZ2?KzOm(F=*M~X=o|c(U
z?9O>|bbk*`F^C3b>N4Cg8`RNsD;TrOdC2HbNQq@@KT!Z_(vPx!AMl5M@Z<~Bxp$uR
zQfh@p=S4<X;F1PkN`QM_^71(fk_#eOtZ*`E+g2`&uF1B0=)~@9URi=B21I$2McmLv
z5n{WVM~9lMTqOtY9|L+8c$NY@@m?`DwGc$-1dI_sW^Bn#j6&(pXihM;aq6xSE3ZZi
z{_0%i6{8ARz9(o`!)^x-mvS8x-0wMNN}u3{o}|}z&om{ZDzip$9-#2(S>XKHW=6)%
zMSjfLjtRC!Vw#?@-+VO_G!+kH!FGzq!_*HDlr0$!q<*8BGhh^^9n*iJ6{b-OL9LqS
z3}-z#BqmY(1K8&jZ&Q-XO6YxG9SPG6%_YjsSjVKj_5wKEI~!AGIwb;ryMAX3x}kpI
zdS&8s|BYj6pndiss_SZ(qg~JCb{3&DC9@=ojP#u(1tUra{WlHQ+1k{YFk2<)hek;h
zr@vbCjnf^qr=lWV`U-IpPJ-D1MF7F{Veg|&0$R=s6<%6<bvds1=25JDZl|-AvyY^8
z@!nq&@y#S$>SWabA~Cz^S;H8SDw7e6eJ=EOG>g*^WLo>i8_0Y@N<Tg_+hB}_U8Gx`
zH)E9Z;%qZPMDJ9=E^UnFTYZoKwCA$l%6g||zxO5BkxIGlxZ(adA=VMDg93GPy2ZtP
zP+sLz?oJVT(ws8D;;)Knmj>9{NGYAhm|>W2_}@<xxO()&x4Ac>V2EO3%N)|%&=M!2
z!5gZp^nf|5(eIcBpR|x?fHB&LkD#yE7A;b&PH{RNLl%(b6lK-TIedVCII>eR_iKEW
zPmM83T&MV~mLs4L6?>B<v3^{A;5lqCfvRiW;~OsW8Mm>wIo^in5`%I&k#W)k9}3*P
zB{|OVBF>6YQr29qtUF~+#MYQ^YS*Z26ixuw+Ayzx3YK7+xq=7MT40mVz)chNi%o!;
zS2r$g;^}vW30RJeTh#dD>NBXQE=wlZ!s-Q{zt*J=I_$P@7lCG^Yze)lA-x^XlU->>
z>mXtbaU@Sy80z6MPq9v?fgOoX27Hq&r+Meh^ow^v3L!%S)^}e2{bCI2E}200@?HUr
z#A;84{qWe-)6NHZ+qD&nM`~!ppf3+#^P#$OBy;aeu4oEN`o~nVyQUtnn)#CqxvBI0
zHX7SY7ny9;5#x1FiJhXk#X^QD)0#~yal@xu!_%QNq5{0vQoWE7s2dzOqnlBxRejV9
z4F|orXsrN?X{~5&P}HWRQP;__*lX#I_vd~~fY~JQ?=hIS`KC&pw|;agAU4bipnY}c
zLyco+w|PSrZLK@4x8taSMN2zv-F<U!wY6@Gj)lzn2bqG-OWljlhCY;qNk12oPzBOn
zr;WKO-!x(2OT*OdE|rYKBoPkL7)N-vYXnU+M?TqE7*P({UDw>zNNpKHGOc(V9lqvR
z{~WNY$P#KpBR!7Yl|dKhm8*`oY<LmzXuEv7CgnZR=1*U)Efo8BrhSD?Y{BP2?Zwr5
zcOSe?`F8!i3-waOZ=&z^ceW1Yv8(s~f=-_=9q7B3T}2)~C$XE>vFw~T*Ln1P<MupW
zA15(rj8~w!X%_GQ$r=CmYwmxfTia2iqPH>F8plJ&0gQ2b#j3GnB$-Mc`0`M5ji$5f
z)!0^3mrukAIgd}CHCMdNm3zS1`oje1WmZ(aW+9fU(kQ{?jDgo2mYw|)E8SvR9kA37
z>}#$alSO(F1Q`P0VI9RHaZ!35dnK*7b#a1Rl?`9thRIreVi?9<9e6sC!jPCv9YImg
zsaK$Q9vP>`q&`-So7?Ped86VW?S)Kw<x|WJ`15<>Z;8d7R!;iNClP98Gj2{MuY=+j
z8Ju75yt|;f*Yi5A<@#mrgzr}M^Y2P8SVFwMHNL#9EzG*F%*$x%iw;OSOnq3sDVnF8
zEcImIWH+YU9fDpj|BGo`N><*xM4pI4;T->7b9BLr)@Xick=l~bp^oUkUS=im5J8F9
zHvAETD|k3)u)0Y<##K6JI+DoM9~{SXZw?-RqlSJxLF}}GfE5;B&Z#EEx#^U|^IL8q
znGpZcbc)7~hl`aCQ(2iRLdN=2(k%hnDG{O|U3Q)=tB4sk#+OCZ-c}MP8U*~U80og%
zIs!~sRiefk{H>a=K)?Zq)YL;MHzV^364B?u%3ZTv!n)!<V-oHr4=qO0nG)kBx`m9D
zrqovq<9Cq4x0S6<=b_$KiP6w<aAwG?>8m|7$9RB}ao%!LT@SIh7vbb`W~E|?6m3KA
zb&X9P4@VJ=*PGcI+Qu|5jY+)PL1)Zsjv45iww*U@aZtUPCe0j++lMu76KEkKj2oQd
zCQ_BNg|NNMuVZ1?W(OkHzr6<MIO)$G&)~S?`=sgPF|Sbe6W!1oNt6<|J$UQJKRJz}
zzmb?VOzgKSrcPP7<tfi9bV=REn2CT=x<T2G0OPihB#p;p$+VZ1(R!_^2nGHaLoW30
z@r(}rn*?bQp|WMR5q;WY!?z!~S=47Vg+I(IncK~Mu=+FiavuKZih9W^`Ay(Qq!p{H
zs;R_Kn}OTwD48b~@9uv1gg1nKlkr8)TKtQ3;$X}N@@PH`^`pfFsxzaowY7=Q+scn1
z_<Y={o!zMN0m2!Dp?)NUMS%f!w!#ii#w?Cz?tS|io)S=fMqMjU3La0x4cgbc)HA&x
z`$3*m-TnM)@=NvB$~C*g5!qHnjdz8FPsW)I@4PvA!<c-fww$o8_;?y!d%4kSsW~CE
z+p&NBcmJWD(P3{+p(zQ2>P9-_U%XXp771<NlzjNEL52dR4oh24fUIs{+m^_v2wqA#
zkd|P2nMeCbvp8v@<#g@}r6%B0BOhJru5J1IM<A9qsgVpIH4mCZYEI;%-0|X)H2QS9
zUa@E*M}0E1zFfvg(=<{#yqGkyDv#sKG)(()jXF1$iLZb%UhdG5I()lTVEG_kHEx}*
zva{u>Ra2~0ejMGM5{>&Wn_!NUoYWsjhoXC^o{OH3vDkqJ67fp?h^@J9gyW8?G5t=#
zu(RoPGihBktXag_)dRk<+FPmKz_vPA$G|9^x#mYlc(tp?>_;6{J&Nfo0!CrlM2Ys<
z4z3l!R&*g_CZ@90Rzml?U^Zzy&*{aTY{K|&IW0&e32YGAClV>SB@N{gQMn1EG9o;p
zhw=zhzgagv>dgz*&OK@-dfX$QrYP|n+qU$ElNgRMZYT2b7*(gLjUE;J;^wv~;XsFT
z)?#kJ9x4e%QAVzt)Q&0<%J}2cv``!(bmJW>i9-U0H!6js)*A9fswJjAtB>c2z=_bX
z8Kg%54R;MnJC)0XI@OGePyYv8Z*F$4M~X}Qa}r$DD+@6{uOK_5V^G&(nw8XAM$9M>
z5D%X#?Qdm)efWV0JTl$JJK=<zlbg;_M<v2kxL=?~M;CM#n)6Pu((MON;zTK7zU(56
zSs-Uz%3&_doC9LO8n-_XIHtg~71+r|H%kdIStR-itHCr!BBdAO>YFx}Wyby4+(ep;
z%i*t|a<3BQQVKEjG19#2ENUshuk%>bvB}DzYpW&`Hf!xlTU72pZD|f9zH46ckq{*#
ztz<Op<=6ZvEdT_zYYg|#26D#B4q(Hauz*Uv&qPaM#4M{nOa_T8Ljmf?;ia_-=zp^-
z)PZwg=)c#D-Hr<89LOqig<)5y$3VE4LjN@dN!qub-dE27NK*0hR>ozz>D&OjA}-Ym
zSGWyO2z6;RsxuQ5S&GI?E3$5uLz`LPX3iC|S3ouJcxz#%nxMMw<LOqfS$t#^-RJR4
z#|n0fx{9zGlbTnJ`Zrwn#)E!Zw(5^)Wd_mJo3z<{+R;B>sGo(Z|G3bv32Jc6R5b&;
z>B?@E4x~u)CQTYKZB5wm-Dzj(imbB0zGiIZImh$(A1H;!;e}(WfeWrKCiO?Fxf*2h
z$FyG)q9RFd81%f1_ssBhzV3K@pBFE3hRG^(#rNLmyAwABDmw-LpA#(|=+9q1KR#(+
zq)2er>kVD{@m(?|dF9I+bKI{VD`a~L_TuUh`e`>T|L%SG>d%cY=U|L);-bb|j?K4f
zSwRSYmbHQ+DEJw^8j&d-4+#oo03<0`mWL|AOBMBj1hHXADL?r^f3Z4_Nr!nXIk2TC
z1APo-DJmIUNrb}~LiBL3Z?y9D%92qSlT=?3{FI-Eh^Kj#dOX`9nsJ=d2rj>65`B<H
z?_}ln@x8Lu0X1<3a1N}@b+_jMe*Ixi<qN+l&+kRX>tiV<guA*Kg&+ai@1jw&o*pq*
z+~a(@i86WfrKxmq6M+o#8d$8X2<>-qTb#&9HmcU0omY)oXpqKDex4B5>ZI|mOyxSG
zb$}2}pr^}=^fCFF<d!D@hiL{b|KOxILpfH2<c?2>YREJ5x6X3v+->WUm`H1n^1r!P
zwh;e{x+^m8=Uy4Q>^1f4pzhZz9nsbad)>!sM0?NAzP-u-b@#uvM1k+uAP5P5YSwWy
zgE_GIRzEtBLu&?~i?q-k_@hLQ-BFZVGmbJNf7^%+8%>oJ$Ca9AmR3~L%I`Yv=d>-#
zl5>fR??x-i9!%cyHe;BU^Og#DtLc8sFsu8M;G`>uRjzH|$nH5~zkv0-4?GSr!lz5w
zQO$kua&C>&We3^8K)5~q2f;Be8gC)pH@j-GV;xuMBN<&k3Lv~{y6uRm2Ck36Z7Dm(
zp^VpldImKEJ#bzX+FM6H;s01UA|e|?35cq}&KEy03@G3=)7z~@GAQzxi4fDr&{nyI
zD?{?AMp`Su%qm_83B7-LIFud*D1`L0<NJb5!cRU4=!@PuUUI)*Rdn<3+#mH}v{%dN
zT`FI_KdfO!so-6~gMN}{u|`wnse7p=iWx6c#-_5NPTHF0k5okF+gPM)BbgzHA~3DT
z+tKahXGjK=W{y)F4(I5NY_VvmPE;RxNMq#efl4m<5h~}zFoMPmE+*8;@+|HL(ut|q
z5x&$wQz67J$j$EB&Bssu>wOeenYA+7KUkIR!a!82ESt<zYmknKN<!CVky?6IW0K)8
z_HG<!S4B=Lt^ans(WN6<q)wVcj;H(PYeuHI(P5eH!+-f!9qszdWNwP84drXGG9~aB
zp@wJVjlU4G$*W(~?u}ub^kbu1^=jnDEf4~twJ0qc|I~&h74EU`6z^l#(~C%5VS1_+
zj}B|0B?woTX!wwfQtBPW{0%`<u$KH(8h2abhOl&+p4=}9t~a3@qT<vDS@I*!A*pXn
zBeasYf<$k>n=h5B#E_%_Gtp#)Oh;F~g;c{MQfA`A-Z(|;`6k>39US6?v8kYLQ}Q*$
z7*Br+;lt&Ym%EgsEPo}?4EO<w+zGG|-V)PrvO$`pT$swk%eZuZGj@e^v2CS3YS!o)
zZop!KP^GxgdU`Qb!ruo|<q^<MUdAs2(E?3DJ6h@e_~lGg)mpkt+Sw)e6^yCXcVyt&
zUi@LOhjTg|ox1ZSOea<U*cB;yyL;7r7i^~Vv*G@=VGzC1f9wjkObGQ^N*^MXnqGw$
z>R%N9BI9>BwM)M<>ynB<BM8~Od{Q4Y1Saio94jvRfbVSwzx~xq45lh=CE+u12UpOl
zgYGm((^|+mv;R4D?1|RcO1ul-i;O-4ftJ)vTnG6Hi;;DrR*jEBo_}W+CTysht7-SV
zvQ4ZPHGfgIKh50p;rISHr*$M&;;Lumb<@0_v;!|o@SbtMKj9|<%UFG?um^=CcI6rl
z-Sclo@!BV_WpuDkt)LESp$FGo|0iau0(@DX{rj>Y1vD^U7No)@mWmXe4d=+$F`EDP
zS{XHV7FT;8g=zZXj&Wk;xHoOoyrrW<CsK|vnhYb{sJB<fTHL`<q*rvB)<C84OI+fy
z*0EO45rpc6F7R6MQZ7;}f6_Q^zJpV40CW#P+Pp1mrDD1zyicf>ntWeox!$JTL$n1{
zcR!!#@TAOx<#p$sS2e5+kl}LKPck&E4@+yh=3#ZRbbevv<e~WYq~3K1N)4-%;d4{9
zZ69g9ufN|v`r;vB`9hOu|I`!lIilsZ`$s{YkAu~}qP*$*?*d0C<Y@Zb=cdc9qwnaa
zdW9mPXD8qJhAq(LQ;Me#ch{>;&_jO}Lz*^TzYanx`CR@^K|U|WI#w@ToBMDj+rmBv
z_Y@uH(sKl?VNl204p14$dKeRfTUBwi*qJ}OIrN~}+WC`lrk1=j6wDrmJll95W75Vx
z9-Ek{lS%raHFyk&nFhxti1r7g5(_^DJ140CEdUAok2Ja6wZ3#B67+a=X~5Fty3S81
z^m%Z3%`6yQ;A9}N39Qj1R|<$XYug*hFYvJ8IedQ^{EbnCoUTz~4(EQ5lsTV&^wxXM
z63lBQF}~RrKb(oq-N+!$^G7i~g1WlQWXuR=njPPzQ}M!oIk_@p8S0f;>Sg0~CtU{J
zR+CoO>m`s>t@f>^E_7)8V|~x?mbWv2Mp`sG+N^rj)bVS8&3UMIjGY#s9PhQwYjJ4a
z^o2_!-KKkMzQ%77Fc2t5oVK8D$7)XS7`5<LTfnb6+j#E$S|GgNBQo{E#PQE?=KkZq
zzklA>MpFG1crr|$$TrZYkjOgN1NZq{fom*9#Zx}*qRq=>>Oy4-ePDqg=S(d64d`S(
zNJzzG88NZ&;z~258)juXmg3rsd@lJBqRGpxy(2k&oFx}96Ry=^Hw~w`OY{D@yfEwh
zC*fOdGt0ML1}vCJKBi%K@r6o8|Gf_ratSD%KmFu8@|oc+V*D1%XGD^xtb6cnbk`sE
zC%ESw-cKkBn7{mct;qfguFm4_1?%6I`Y?f5A%9B3F9=x!e8G{u5i}k1n}&ou0c;mL
zYPAPy@;Dt&Jh}wiOCD;A)abl^2LDX{aJBb7Ug*I+-22^!kGYiR4xR}XQXh>GKJ7W4
zp*Ns84!Vg}Jo#`WD7c;+1E7upa>DgFU^D@4PaWuBK@P5{uZTk~mowq+o+1>c8}_Xf
zaWOCs!@y|9#%KIz+Ph0xM20%rI9)rVoa5qgn}g1{IIXvNi4RZ^f0u|CItKV+XB}N2
z!U$=cVu)_1EX^zdQp%XaS1U)gt4mB&EI*FaQ+<G1i$`7_F-DF)npOY9=*RVJZIagw
zT+O9$7-y8|)ClKDFtIv}x0)=WtAiyNX&h23IE3R3>tJK1uH3341q{R#Dv@+pa)OSw
ze2~)(Hh})O*_a74)}#&IG?_G62M_Mf;6JU67syB%S+aG)B|Ffd<OQ03OlE0xAp>B5
zr=TH_mb&Ce#UrK;htEG3eR;fjL)DXIcZesmCV!lhnTXM{A3v)pV_ayz;!V@4MD|rD
zj-a#iL?=|@mPHp%4*BAQPM~Y{<S|=Ifo_<i&J3^J7$Hx6oc=3_!;6*LIP*r(l<#br
zz^0Tfht8v1JKG4A*kZT>S|*V}YPH~O(p~9E$`d@Hl{IYXJdQvZKX=jXtDNs&U^4_i
z*qumsxwjY~ps)b``Fk0@D*hk`9OKnGC{q#s8xety#Cxr!H^_b<8Xe@)!7-(5<;*&o
zdDL0tNyW2%YKU`lVxp>s0-z)Y=%6zzF+kyVpgsw2s^Fj0NtR?5YY>7h2Xg<fesl|%
z$Pxdw>-$z?tbb^JTg<K>MM*&&@Sk1ZX_vAFXa!|gx0}@wFVjs<&;bH~)TJ#qWWSB&
z>!w!-IL=#%{1#I&e^)4RKLtmoxqPOSN%GAPZ1>t#E!2q-zKmOCmHUg|3|hU|Kq84h
zmPb1@pJ{HFioA#wT<W+pQvW30Y;UC^d3ERWgk`Z{=A*yFY=}<RY6QmmH_0GgUXSGZ
z!|H|vCt@!b2o88Ld7AqEJG_lwc6hle3HE!^b3}8M{MByykITK6Doq!^ygZiv)m7zw
z#P;g|&#JO7PH;cL_RsI{_fsdL4L*B6So_eD-c$eP?`Z{uEdec)s+(~R1pi-%YB;?d
z#~*(wv&v%w;RR#$qrw!tCpT)jR>SbfJ>r;-sTR#hN>sF#g!cZiY=Q|1T_=mzqFL_2
zMtH6V7vJNMMV~U86}WKf!P;B5*Av=>)(vA1Q@2+g_|)2Pc_gL)H-K_ltEMA&NQaT>
z&C5Bi6xHSoRJxHC|5myns{^;X&hOE(WWhi&bs}C2%f^K~0!(JfhIHZJf3jr=Lk{wP
z&kvweBa){rtL8Pm*&a8a6?W07BcHzA<*t0Q@rQX)IJr$#v6kx(cfCaL4y-KZ^xVB%
z#XjD%Ec7?bM!t}f$J3)ME3djLwY)~4Dpmk(lk=*fJwU**bzz)3tp^(U>LDSdWEj)d
zE!3nvon~wb?c}klpZ_dL!1He+yP1$HGkI?L+?iH$x6s(6bJ1gb7Wir5xi9i>zI8r0
zm(Icc)=$=+!wWf4-EgvR_4V^tBnJ<`6qAdb%^4*J{iL#!ZUx*YYP$VomOTgY1ZY!)
zh_ucsVEv1^OcJZC+I%O#6jduRDowfm6P3%I3KGV4uYsm#li@_0p-1m!_`<Y!3EZ1C
zlWsnH$VsO$u=^=afJ0b!4)it4d0yV&Ws~0r-LykxThs3+iyxosw=cOrd}EZB8Yr0n
zPjp!sgh28g{(KJp`euj@?-Jc_Lb!g}sQD%8({m8j+iA#w<8x`HYIwHMY_RhQdA?}2
zww;pmGSCJCOyn351wFyq!7<~5R6G<50mV@~8O<QTscZR^G9o5){y>kkaqib&JQ)of
zoS>TCxV^&<@g;J)lFM<IhwL`>^4|pXzn0Z6-0w9xU3M;f@@qx!{;jjGxGdMF-ybV0
zozF4%D3$Lei=Y8Fz<r<<^!vZIZj659fF>628jf0rr3n@}!BWKo23N`OV~g<kV5)|}
zYV@5yX9?0ks>C6Up!+&%3`-}~h@v%F@v3|+0$1XdP6ymU!Az^Cr65{27o!&_eS8Oq
zWEZL;T7h4i9PQXLz>qZ^Q-QM%_pMTAvmlFmXj}r%(b3=o3qguMM#0(L#Ds_s5*$dK
z^VDYIF)SMo#0KN@oVQ||5m0z+Da&^t_&=NqMIQ{I0T6+bB8nR82GG?}Q9@C!>rkTA
zI0)~tlL-cOs_|cp=+G-tr={7Ju?RiVt<vyM8+??Zwa$?P528+s+kA)l^5A#=1~LRZ
z#FwgSWjVhy3ZR5A&$%9ja}$HlkrTpx=g^zm%`z*u*=%KW5oW(kq{g6$B&+L)1&t$k
zPN<s;Fp&*IR_PYzSt=UWi3sA2J@vaH<==l4u5@sGxoc}-`XyJ~T5;bd7czhgk^E*D
zys$&ZV-=x72ses|=fE=+8wAmfPe&^R6h~XBfR}aOha0Prb?Sm}Bn~H%+&DqwI~JNa
zT114a1Ry$?X4fbWiBXgpm({41uAvvsmS;VbDcDoX$*VE9pP*dk4U0jbf<j>)LDd|y
z*HvN&ec2bON<HZxhTeH*Rayi@iZ)SLPF={!D|=TiO_n0+O5zVS$a8fX5!6C^_eq`a
zb3xk)zwp1gPBgTmKwCE^`2V2+x3T0hPoCZb5)=?+m%vXhs9+#>+LX^=yGEQHg}q#q
z_d|YGqNYM*Xs&C`|F6t*6Bzwb|3-hH6?Pd<_#c^vZug+^AM<6>DhV$J82!;w)Nam0
zl3E%ympW?sV?ghS8+SXhuo?plXBiZ9gUQ#}ZnK2UA#v@AT?OpA#Q|L(sNH<IEUL*-
zI4flQnK)3jxC}86@0!C8v8;#H_mlFx`(R!3W<Kd9vkU|Q)w6rEOM8?CoDOhFuJt+^
z*J48NL<4oy|LGkG==5J3WNxCePN~2itwkv*bu+f+9L2pSGj{5JR(WmbXz4Ro>?G#4
z_k8)R6}0!2>Av&in-?ATS4XJ^RwQJ+_CJo5l8lV@$j^VDDHp9I`5S!tbxza*T}X11
z^mxB&;5LgPo7e8qw&1IV(cUL-{~Q{=e`fWyH_yLglkaO#rX~-{5`}C@a3Ph^ij&Lg
zX$6JjpSHxn900(w0%O4TS`2#-BmzQm5S~m2tEl3PKU-0Kr*}oW@E(T&Y`J1V?%<1H
zP(0msPQJ$TG)Y9x<ZyV&-YeIpDF^cA=|)QYn_BtPK`Q>b>sAOs)u12c*}PPes*1E3
z7}s}}ZbDd=>J}>N&hYsx4|BfX5U`9_f5+!$K)JoR>iIZsdu_{^3Y=WU#|p!Ge@s~U
zX<ck_ZV8QhAS2>=epFl=0hX|sF6+rsM?a?O$|9L=*P2=pd~>>v6!h{=E$^F<iK5nT
zd8sd&0O?1wL5u5W!{D{^&&HvPi=CP=>c2JQQ0bf5xc7@3u|}{xawAY9m6?l?e_1R1
zgP0aCmie;%i<&^WEks(ROT66GE8pjb>+I9xdoKHL?7zLXd>aK`;kn&TwJZ3Rm}FE;
zy~KzUBl92tJ<04KjrFzFuJ};-=EZ^XfTHsN4Xm>E_qY$@pil2Cpy~Id;HQ*+vDTzX
zn=GR@gAbI!E@?-4gNM74?_D6bUQKl~+6m6WI~0B^>+=!Ky?2SN^<7XO7!_F5GY#fn
zGD&y``&etB@AA|GefqoC4NY{)EN0y_k1M)ICHulw8+}Ad6-Fp>wyLp7&5p><XaTP!
z;)?VOUz47ns9kGZHjN}`kee1~KeipsU@Gsg0c9{>x*{qHzZ@u6NA^DY`3i$5Z7p5s
z{wDFc_hPU9#o*0fSJz412gEe!*?rWU_vK;FKKW~t?nRNSW1x5B>SW2i;p!BKk6rx%
zj9}Ph{Ha!P2GBdQ+wpbNq@+{y?Zv^#?MasBJ*7Z=?9cnY9ws6H7(V(IG$=v?Ey4%U
zVQM!iiTuTh%6E!X2yG}qtwwzWC7NQD+`2eaE0A&lUoKpqMn~6k2Z*#<wf;&Kn9t0L
z_&#2LPU`_ue7DHjqq9G8rBP07lf4hU`<ohH$dyKPX6ZZ&0EQ2j(U!!PKr3~I1PoFo
zzQ5LB@TUy>PxhN$*eK}&DGFt)LJ2MWlX-mbP&kUy1N&E-xXPc#*|x2E3p?49LpC?g
zE+L~T3x1EIgt*O5gLPJ?S9vNL5uCL0v|1&VxXdb%On7}`1|iMqUMlJgAO<@5%ha?4
zs7pYES?rYg?gJn`Nz!SmYtC7z7dhsdonbzqWkK-hExcTm40qDOf|}-SXZbHDUBQ~&
zFzQ!`m#r24gdPgU{3d-7(hdCSRUVQ-bphpr5^EGa9Mw0z`YefQh~ebDOC+WNsR2Hw
z_aVzi1;+tl9Mnc{Uj+yxQhVu8b13i{#P4wudP@+|IcXCSu0Sx8{U^LQJnEiH@hk6b
zbz%1SIE&WDOv2<EH}e$YZOk5Xe14~MD`a-J{8(C0_=ooE?_t@4^8wH;H+7wOQ?l)2
zOPCz}>uC6VNsaf5l>s$egZ~1C3z&5rL>UKBWHyLvlDEZ}FXA26*xj12WVQ%<g#>QX
z=2q6pK^8TzCP)38;oFSTmJ#QX)Jau84P~jh;c_^nVoN`NPQsQF{_i@k015*k|IPHV
zaqLXbrNc`11JT(qKwxQ{{*S;S?o7ks5flpuEG}WZtjs}jxTR$isUAL3T^Sf75`*O4
z_6U&VDZHw+YGthXBvhpHs2!$3Q#n`3B8jh?2OTncF>7m#zx-2RzQKW!peb&>`c>W=
zpZJndy5hw~-;D@XH_o`v0LN>m?RJ@wcvl$ir%62LS8D}I64JDjoqhv|+vIu%Jxfil
zs1zPUi_or?6=6rJ2d9W`DXp1j`mZd6y9ag_%We-8++~#B`xJ3^;|m$Rc=>ow<i;*P
zGW%e|;L$IB{CvN-XW1osg$B2}>m+V?DXo9rr#hNql!!w!83H8`he)~3s$AaAhwm@w
zMhgw!DqYdtA|C><)6bsKu%4w;gR|Z&=DO*$acQt;K-I<ofn}*k862ch<V?WXVWiwj
zS<HZBkJc&HXYJwahX6BuJ>G)dF+Ql=V~H|`&7O1px%9cS9tSYfH<HQY0qnZO)Y6)V
z!{@59*n|v8qEt-@4X!jJVb5}9eWhHJXya>1*9UTT)h_8Wejm58jq@ITOLh2N@hwk!
z{ERo>tef6Bo4)wbN`CN;Ctm^Mc^7kG7;y-5F_P`v-TlV2!+2?mmcWlvsm>G?Z59#7
zm7<6C(Hh)rQ35+vWziwSf*&2bL8kd3ZeX6`K}@-0>##tAxclAn1)tbq*UTK*=rmfJ
z1hChx@*6hqInM9WdiETwq`7IV85!%fEyVnfX8?`oV7vn`B8lM8shG~ONyfga@5IrW
z`__~z1wsh{1<Lzxj!#WZ!DpwB_nC7&{u=S-vu~T~6a2x`M1hs*totu2@cfir#8$-A
zi-@#`hyEpbFeMP&**?wsH<w(Hrk`6M{2G}u5=UV;UPmA%(1SV7;cdU8_mYyu4@R!J
zaW`jf5d^0zXR|+Vg>m^$1_YYv(FZ1(TIvTPHE;z>Ozof9(U6XOKJ=pzhZJGZlo)}f
z;rS32O-TiN)MIfQWA5#^%^o9swrW}6gO%?8s{}$@<a{&3@*Ys`=#HsUet2y}*cL7F
z^ELAtXUKMEXy_Q@Z0j!|60G+C=Lh2>%D;Pcj}QEK9juzCFxcr!piZlG6#p@#A@o4l
zXO(FrH`u8WJmfuJh68!J9y(&8f9Hvo{=EnX{7>r2v=Q_Bwn=Assc6NK@7@(C(_KB@
zx)JBVc3u5HkAFQIrAkc!5z3(q%<FNtR#hR`nSKyX1|{GTp(mDCbZ}BxBOn%%=_2k1
zMXC@DbI38sQ$$e0elD?ZA%go0t-$y+87w5Xx6`3%(|-PE>}1cJ)R#~tyi&fCA?T2e
zbows`60DtJY^SI}49_D3qFxveQJ*uaqFq!l6s))4rmsnng3j7}=v>kiU`rK`B1vuP
zk!zhOqtY0;7-MzXX6z@L<O3Huvkn9`6*#CSqX*2Cug}B@sf^Te4@PiBBz07XYk_Fg
zAQU68SeQ^KZ}-z+%N_mG?Nm_ZCK1SF;}S9g^+5)5U6eQ_2qev4J_3|q;o+dbM$ESS
zQYs0<GqYKp+$$oF$2#wLeaq^Cu82Lco^U2G&F%@v$MuRpIC`<Clt9X4I>z2TD{{!J
zC9RZWK9=JZ;vmLWDFf1d`vZK(BG$2>U<Rg)`+mn#iGP{0Yv0%Hru$u$jVsHaMsFPN
zJM}`e>$|(Co*8lCl4#}&DX7fE+Z>lbGx1?QoMF$5wu`B5eH4Vv#HZyQm%)TRIV!}*
zlLDX`8AjV{)V`5)V*fGsdc`uZtKwj~q#`fCWO$GYiCc^i<>_z&`FGkzM=%73mmH~o
zByIx3ikg~6oMK9yi}G1G*)SY92Y(=-3GT<s61!P<k5+?#g;8}_UWJ+H*Ny+nbdUoE
zc+9^6e)SqVz_alHrbA<~N)#oL!hf8k^zkKw0FWs;L&3!*xSDb_orUB%ro~6yK?6@e
z7f{Ic>3Xe1IKzi34D%vTXYlRjD&zRvpyS&ZKhIMOvwG4tpM|+sdbf3Mjko=L%Pwf#
znYiWU(vVpqfdw(%Zp(-bd3jTU&Mvway7{xO1LNm8I$v$uu3w7}qCijJ;lA2<r3(9O
zg0Oa6AINQ2{IVkDzcwB(dgIG%V72>njAp5bm(6dl?wUItK3CSKGfVB3vr~7Wvipgz
zpS2tdUpgJEGsJN<1c%CNZcXv!iEzt?sBbSYi|A|K`Wv|4{U-xmL(X>d44FLKAfoD-
z`uESl#%s~7wSiIGFE_^8OKS5m>5T0{WjI3$3Ik$X1qu53+Z$J|wv0sqejW~Fddivx
z8#`txXN_)wi(k8B;0c4U>5PiARpoqntpqY>sME%Cxi2ty90TpZ&`lvc{>>B(o1#8`
z(dLC@id@_E_kbRAzNvF9WHO#<<yP&=j}(&7O@qr!Z`zswQB2M)22e#BB7QS7*H<a7
zBG0?K)$GO4jP-XPJvWm?-;iHpvoCWyb8i<#>?~9kH*@4|>qMo+<dr6aJF4zxSi~Eb
zJ@*=~C~R=usrGvU56P)2wb6i;#uw)aJkT3P<LABVzgrTogatBnekoD|zc}T>7j01*
zWyAf~8xY^GY5hWEn$@-Sdf1+D2`J`mUyA1>Y-M<9zWWFWc=F{J=TxS2W||9Db&DX=
zHhSbuX2;<{E^7O|GG7FldxQYG12GTO=b#Vr!U3O*>s>ldKP6Yb8t7Rs!2vvX=nPuM
zB&(^#i#7qGA*`}Peq&cU;O3!B&*<h7Si0k<A;DCFf=Q0I#Jukm-mg4JQ$+XJOshp|
z1<YiyJ`eEHb8j7hTXdRz&=I~QC8eNRDLw&!Om|gj6#Ndf7F`~E1}!Q4H6@0_g!{QN
zvm2kJb=|KF5y=<%eD@n%EFb+aMkPeg(`?l^Ns5#>9}8r{w)iMtkBHrRb+v#U;9K7;
z49>n6eZ6`BwDa0OoCEwk7ym$v*xmq)lXS21dp!ok_;g;&|Ct%H9xwja8H)zGf&Lq!
zm@>erkwa|}+T;LT1`9EYt5eZSs<!H6x8GW0qU_03d4&PC?+I$X@^mSA1Rbt5J?_o=
z;qU&ue0q6w+YEhmKF4^ePyx!$7<kI`Dr_3noTs0t5#IYLJrpPdJPX?oqNI$$_<6`f
zQX=aZ*nX)wCf*8N|K}u)Rg(qb;9ig0!8RR;GUVNehho?E+_u5YU&LZ0GSn&1PhvBL
zKz=c5-0Kv9RyXN`hxp}OobU|Wp<Hmk_&%q2st5f5lVdP0B4VBD&RjUgo9KZkWm;Sc
z6SJjMG-xXEDbR>}SBIoFC3ZG#ri>e_9S*3xoo)(KiCY9Uo9F|Lmfs=W#^U%S2~sXx
ztRE?Kt`X47nniq}@I1JdggI*ph+0Es+$66#gX=7k)kQ4Xq8rd-d|dg?8mWaY6RAzN
z8HDYPA+~3~vr(iKq9o#EHi?5-w@NkW6bL{h(1_d9^A;Q`j+0A3k^N*VDoMqXn9PhO
zXmRqJjPl~U`@JIhOy1w*h%Bc*$~$oHklNjB(!nm}XOrIxjKn?@Y@AC5w=#!;I8~-2
zn2w7e`W|Yzt6CrVn_NU7?7M8lsMDsT5~2)`8bv=g$mt}>h3%MdO=|SwJ16qjXYSfT
zsgX|;xxwfILQx%~*@YQSBIBY6gNNgD1v{-I$~kfDn5CTBoQwuEoDNr=Ti`#$WgQ(<
zUbK#_s5gkKlv9UsMx^koR@X@Dvs%cnw!g>urRz{<MpqTvY?>07CjMj=G0<Jf-`M7I
zPgrn`4qV<vOw6DY4D$NzWf2{kiFa0=t}H=iH8gHct_vE-+x7t8kXyJ>ObNAlPxF7W
z1OIE{$CY3we#U>V?8N_PW#15X)a%8r>>amRIkIR>nt8^kV5S(ijdKO-mH!TK6D_1o
zkW?QEnQrlz!dJN&Eij06aOTF><VuVppk~fbQa<XrH8Jw`19`l5pCwD(Y9M?c<W?c9
zwQ(Ad$!Ur~?}|)Dsnp+jnYFXSiU|Ie_4-PPwZyEm$$2D>;^PxUm&B*hbYUPnAl~FK
zRirLEDAX<GF<W73d75wC=G|Yw__m-<_7LLG`he@H*>>8muU-@xV1xW`rR$^578%m3
zfm7)8i~Zm3x^4-%VrdieG@H-=02H6c=sy|zQ$(Twde_jfc%mUgzcyG`^KI|dUk3-^
zza}fv%Mz}^=fH7YwrR)@=FJ%s$uKMWjJV3-B;~m_^H@XDjYk0ryogB>4#g~YvCktv
z4<{sB1j9O_!bN>Oo+A%Dnjq#S>-1dkOYBCZ!mphCM5zmiZL%7*woB^UHU{prR-Cc2
zR2n7u%|sJkq6ks*@j(Jbo`4@)*$zRu;o!f4QY!bYgP>C)#%*Iz9?Ju+IULW5C~!ER
zKWyGP`}oKA!mv}uaeS$<S=FN0YkpV4I;oxQ(v<euPuvn8RdxAO-FB+f5DGLAvclMv
z{Z}6ZB+=GFSY4a8qmMf!hR)R$xH{oBty3hLwt3kT9h7s=<yc@BqrmSrVJH5i%*{{C
zlI2Afxh%p5+&mC~g4ezh^mC8BXP$e6>@wK<S9`r2rAS(~3VRIU!7z{=U_O&EMGp7e
z-0x)@?d#*g55gP14;BI-#1Ot(z<IQ!m#&;3CM4dUAEYr!V>4fJi0Na;DDb;YborD6
zE=b4CYTzd7oa2wuym+8Xh*jX_zSka2Dd1kZOsEjPtZdPs$2d6o>W*g-vj5!_WBG2n
zuhRtx-`|$4wHUOGc^L?!rGKO=Kb(SH+3iHl-CKoaKe;RFP7+CN*8TYsI)`=`>Xs1p
z@8fzxU+@QqIUvl1w_tVoJ&9-F<{DpTbK2Rus$9LwCd;EvqIz1}q%v~}{-On533-nb
zpSbp43UkFC0*@=kpe1s%2`RoBd;og)?>_2}NF-lL&%*$iKjl`itqasCbY}E*V~_1S
z<$a&yIn(`~8GoI^C${H4cUnmv?Lm7_UMaiup8dGfYI@|_p`2&%A%@^NqH_LB>2D?w
z24oNH3<nYFpl}vc$sDI|TxIyZ9yc2ejIBulKk$#>p{-C;oXExFW56My*7BfVHa2Kn
z?IR(m)45__OZPF3$Mm*|3gO``I5G+;{-DMKFnSM1)!7WVSdQfIh5psQ`o&JO7b1K{
zxdCJ(j!_~Y!z?8|Ji`TJZlWErLr$dObmKrZmoI)82<k+Io%pfCYK@@8v63j<Q4btr
z2yiP5<7(d2(Y{GQmK>syh3f(iQ}|+xJIS<(xP(Y4j_;?YB$jdW>5f&EJCH)h%6R$v
z<(<QE2sQtM-UTMUqLB&%OHl2;@OytUpK?J}J_VO|X<1EWWji@|b<Xc1pg#VlW<gY8
zPe*|X3nCz{k`}VjP{k3Ct-!c#JOsiZgjQj|%C3K}ot<dvfRLvaHEG{9i%$<5++}Nn
zkhn(V5Bc+uO-+kIE`F%(3%TdnK1v`aZ>8}-H%`l)So1u+IEuolGg9&{BbYcoDirdL
zy}8E7X@9_;k|gh;!75=KaXow^*9xqqTr;g6EF~*J@<S(Z&UjDJsC>-R(<5Vvio_0F
zF-qk@ghI^~TpVNTU!Ua>GuO_lh|+o@1i4A@<$>O|a>_|LCsTMVick-~*h1bcog~mi
z>i_RX{$G;H^}h=#9K!YA7gBp4>Qa>yj7%<c;FY5l%{t}#8`kWa0yd1cQ}`I4hV9jC
zwcaj!kMwv-Y}e_NWvHce6Cv1Kf_2!_F=}{LeR#!a=lCXv-~4R@#$o@L78M_L8-Szy
zq*Psg3W_gs)$6FYd+xh6)dL_>)jPb7rcU%aMOIOMg!J}3Ct^--61naKURpJ6PB8FW
z4o}J-*>$@A31WL=bY#<4W{Q@4qEIjSq13w2-Uu$`GuFJw1`B-g;9gsD$X~kNw!yc0
z7|L4G3SBmZQsmz#RhFMccF1P$uT!^f^7x5_il7hVNoVn7fcbpq>lV@R&QS<!j^W$h
zCl@5YIjE@Hl;g>-JvNhJH)$cp9JFQ~A8?;tI<p(7opY@L8#!zZ*p`b{Em~t!<L)v?
z2OG!Si1%2JWs3-2k4L9eaVGF~LpA{UWYp=oOhK%366decjcBE7E7mx*;cds%TNSa~
zDcU0P89eo&>{}UT7V<o@MEM#d6b<s{G}M-(92htXe+3mzPvuOo{k0250>NBJhxrr4
zZC-MJ*3A}L2j(+DcPz~Da$b+47*exc$SU_}jKDpX>jzNJ9fCu2cou+?p)}j!FL$>+
zD0!ZNK#g-_DQoErDO<WAGc;<awz?UNE3W4TCa~^_-ZE`KIXN;WzxC6K&K_!yvu++=
zU#Rt+RC;aII!mo}x9y2t!k*poJ@1^3vOtnwHtQno1BMn>ZHSvndxxf7QI1E0TyN$9
zN#&0cCytn!u+t>;cwNv}G#QH8*PW;0Ln&Xk&VC+P#*v%np;WhphcU^k58@;TVCOSN
zQi%x-qi8rESQ#I4R1}{O`nzceYc|95YFY~E!9?hZjxdPS)@(XD?0nW=>-^vI`R>UF
zEF8u5q5fh~Nfh9QbdmKk7j&t-6(pGC@2Cp$9TDzWp^KFi(8BAv_2&zY6<Q@MJvSH!
zB?M5`I@dt4({qLlH4<lQDeu83GUgm%U|fT4W`Ps_Mmgf=#ki_$=>SlfZAU*PGx--q
z*X9uh1c&Kh%e(6|yP?H(r@wkcOHOzkd;0$z4BiHX!>nW0`?x{adTwp>CD=B=J`m;~
zx*D=AZ1zn0RK(}~8<qt<vfi_m$M*w+E1!ILa&C{_>Ag54!M7mUTvVRFI{%5LK_47_
z)dU6Snw~`wD1u42G7d<F0~~PE#0IG__1q@YltwVKBveFnjgXd_{HLTS>Lm)C;6^cO
z>O6m~92KGbgGl&oo76_%T!!%jZe$8XEyyp9P$)WDFP?xJ&8q^`bI-&YHmc&Wq#&_~
zRG$)D(!-hxK;&2lM2-O9A`6HdhCp{nJ0XZ9wm+Ii07>9MH7wp;pXjbpsyshBT-ikx
z=$o;@B26hxcsZCDVpa+w)cqfay*w8*aZNQPaZ|q}EBS`hY8uvIKc;J-#X<V;72So_
zIjw2RlxG=>E55<lX!I(%F22XIkbje=2<KqJ)d3MDbUm(u2Sn`V8z-jRAH|-tmNSZ|
zkce!I;FVGZ7dqGo{Ouz%-tEuA=Z}hl^+k9@c;{8FqBxJYDei?lxV;LkWMQ<Jy7$|I
zIDzQ9+}+NUyUi#v`B`<v54yqcL)wq>1w(jMXkFfi$5-VSiNXAc$4l<=&TEj~nu(eu
znt4|5QSwXC<EA8%5pUe5gyMq-2MZOFG6#@U^sC{P<0ctej`&5FRkseSjlsIVD`Y>o
zy_Znqi1*6KSCO`f600#<!#k;>=_W=JuSHqNxTxWA>i^%H<^Nii|5x0}qfs4Zi;X*p
zn-NB1;!dN+rEUJhI+$g-OxHPEBM^{B$|s&>l;xDDwqQz*^~*VcB5I&|i7?{P$Nk~n
z0#zXHRMWU^TwzoyAY6l2J^#w;rb$~KK&pzmGP`vJZ{K~}==`o`h^c*NxdSLmL+a7P
zmb(Iv+DY{sa=yG3`AZ}aK!hPxH7LO+I}dL&ByrK>ow|k<W9%wQPLQz8wre$7CQQ&)
zEyG6tg7hNoCtyv#Lmb!#`iZGk{DKMEe*I@n|1aca4`x{|)qBVvpN2tRnvR=QMGWIO
zw<e%RM1XGqzRPqKfV{j)Vxy3n4Q?rY^W@Ye_-yATk=9!byuu-jiOgd)?4ip#GdL_&
z{4=0$!!W}bSe5|;A+Rh5ol)?GsUChJYQ<X9G5WSpeP`tTA)V5`|CAhKg0^yADsb^$
zVUzI`4LZ+FOv$lJ8tQxlxLE>r6<`>9md60{$X1qZ5N279#@JQ9@qEf{=!*K5i!zrj
z2u^5>T7L0y4aqE~QN=M@00eC-#ZbQUeE{^`)1%NM%6REs?ym1@__L+zY0j<bgYB>i
zA785bs<sM6V4=I~o?%~9+rCx%I6*ZmUU-=8m@H(VIVU_@7ZjFjRp6bmRHiJe7;C!V
zZi6SvNGG2vnsWrVROXW*P6qqmqGl1fPeQG;27KCW3rWO#!c^T3i_ZWzn?sjN0drl~
zrV037_nsSbMfdNBM<QZfZYKij?P~-MxEaCbgu)<<JVG#65^)c$NhxNLeMS>TP-Nx<
zMB%+D!_vD>B8LVn<@v|cwBq~y?pcMpZe=hdImZD~70UyTb>B$yar-)<a;<C_Fi?SE
z955}fQxqYHU6yr^XeJ+ItN`=W%<^vAhZV?xDkGLxZTr9hEIef_foyB-G0}lx^=%*e
zX5x?UjMu~3KvoXTQ$|_n5}eQP<co~IJU-eh`x=&A{lE2Xqqvl~NvyuzuF|0)jfagp
zW#0?=Ax{bZEJT6Tw=p-%mmWK|9i4;>$$Rnpub><&AK~7-ILD>Nc++v={g6pnKpvSa
zHPYa#S#bbvmUkK`z&)2o>;7H1!Q+f0MZ_<Z2Pyk(&(JgM27;`EK=sm*b|?{#QrP=z
zeik98v-IpyjcbWPWi+D!`}KAh=s{`p;2BpK?j@<H8X$ZNh()9x67p0TsSYaohNqpg
z6S7*7QYsAV;;<AGaxkb-1s#ap7-V-g$|0idKZtNER@L_KP#@qH<9)M@WOa+y0fsS#
zSItTF*e^zGcN$6F6LnCbqq&y3?!vsbM)KrL<>=92LPMVuUGa7wI@j1;WM<t^h=T)a
z;)D-9h``!amW`939xC!OCq;a;oHYNjtEifAI^9*|Vv?o)|9PiJ|5IlF_vjHbE5;@*
z&l+j}oz`-i7^+Fv)PSUA^CmkODF-;^nz!B}_%49xIcD?_*=7`NHUp<MT=|nt3r?D8
zpwU%=+sh2t19jqlN5R{6;MEo_UUuCNUM)7@Dns%0EClD8J*u7bCuFLZs_$-GT!w*j
zR$hxdUi<v|HwbH&0Gx6MeY{)|Mpl!+J6+U`jX^|EARUwOcV9NI>fda>Rs%Br%U?_U
z3;)0NuKXS9wGWSdjj``b49zgch_ukbpfWRdA?38#Mr2Ep>e$8@TiXm$)Y$iut*B!s
zL^0w>*_Tl2MBAa^eZHgKtFG(4-ap{I-kBfgw|PF-{oK#z^SST)hubcsim`rJyYvh6
zq@OQl`{u;gSJ*qp&-7hx{rx$f4ndF1A{LdagwL-8&@*<j-|vLQ=e$FZ+pd8S%=1Ff
z1c09N7vLZX0tR(vkzi9!nl!=g%*H^zIr!p<xb|}rvUbfspl5!PLd&Z>>bFh~Zsui=
z*3h+JQx5$*oMLj<z48Fxrp6x{tr=rNx?+Do&&)NV;R1jj2dPmy+FEWjG>4u8LC=e3
z{Gl+^Tw2Z}O3IexY6eJstL&l*g!w*i=84FAF_)!-oidd@TA9|Rz~a`LXOKUy?8nPz
z@e;C=dGW2h7u9%X@{B~f?BMdK3Z|yqxjD&XMoG9CYEIw*RnONy2MGIX7Z*#U_&4Aw
zx||fXc#V{~8`|)0tOTPRGq2^J{fH^g5HjI$^QU)fdAz0dt_pfpJ=<fYQ^kVm_2>;R
zYw1+KV2Tyju$o{l2YEd|3iz>J1!J6K(0?}r-yFa9%H`IigQSodwcbV;pKuT+gj{>0
z;b1?NfMlEGWs?wsmXh`kmo%zV3qFwK&NRhHA<2LTs->&q<hAm^x&*rP2w!2N{Zvy$
z4Ck?Eq%&@t5VE>0lczVD6W$a?Uv%Xc+Ph(>-)ERq`C%ZR1kdD>+rj$SVZXl^>dXSG
ze6}ja^Rxk{k7QxFp=Cbz&S+lMHk~hEw07$3=;Q&oq7B<O$GXOJRiTf(b0o{53VBaR
zgPpIQ{C*j4B4_z`dZAVSRI7|dD6}bewxNytl;ZK#g`(U5s$}qI=Uv%%j^MgR;JaDR
zMD8?V=21T6YgNJ7AJi<Ef*}>1gL$lJQ4I@t<OHfi{n<T}bk9oi3PoU9=F^aei7ZyP
zr}E;bUfbGlDpM=%tWT7<G%MkS_caY)qUuC9zK+Uhx@iWtUH<FaYSrzHcP)P|i+M-R
zx2mi?ia}p`dpB}Ams>Ona@&P8{tR9{Su)lYug<T?ID&KJ?*;klK;!R)JdWk7*NtAJ
z-4gb>Zk%RpN7kC8IFLHc7wRkw=*VUX#CPbi{MN$rTc=9DBxeW^_D^HXa$%o>DBSf^
zgNDBXM<f{O?EQ5nkNYmCqr>rt0}I(~!>w0T`;1fxD+oB22X|fCq8pcu1EL45<Ctt9
zdYEe`8m%rsqK8J4xRV$ypKc&}z!(nCgrla~3dLgsgmI3|%*dPG&JRlN#XjK0vKxG5
zuDZcmA&|RfyPemFQr3C8^kw4q(Z$ij`gBE^P_8d|8oavWtyKN`zL%GS3fiuys{|Zz
z1?C_wD20xmI{l80vnvtGd*wfRFpG@*Y<gEKef!HjR(9w-{Os?B%X~35T6>hc=25I}
z`;^>Bk7J9k_~SBhzN-*tkr9`e%?H5YcYike=yFXQGGRjn%;cTuNu4zy3VQDvZr^Vg
zUN7DS4Zg2$p3Tg*E9L^=ke%Q(2Eo2;;D}ZWHG6U)!9Is_%(%CLu$9eOWWATWW8p(-
z<J2#yIcC&^-KI32oGbG=3CIrQbh5z^35;~u<{%Jo0685P=}7x}UK-H=aynv57{Xl5
zb83vuS#Y*{@+^hM*bP1k%KQ49r`SHegg>Dxw-!jW{iU~CbLtCJNXCUTEzLc5&^>y<
z15#`Lw#%y(7>ue}Qj}9Yvoh+O@M)S8UFZZEZaL#)cV8h6bQUrwf+gH}k~9tTbE|Zx
zt@)6g?k?rU)H9R7%<e&OJ5HVWLrCMewoBc+h;f`!U-14*Cojk(>WWS9x1L=`pZ8Bu
zLUQp`KZfZqCHF6foC;aT4z$&7UtLMM--mgLPMOOQx>LR5#^KKUE&rSbWb+mwFlha2
zjPAq6o}2F)b1&kKHmxm7FJU<^OaOOHc3dRk(POtI%||yuzfb)!Xz;OT^2U{VtL~}y
zet)GJCXk7Jj9%&S$1v0Cnj|Ys<=N&SrYn!4xTYBYys=ylwWA^{43|O&be={SFs+@l
zJi8qaBi;^u9sJb_2dZ}C&1z5mrJZda9|x-4b^b@Si^*O^9fGPogdclpi;;gg*R{MS
zXvZ-|X4l`$wwpV(nXl?-9Yjat-C?_?t)kdovU?*6h4KkzV5@MCzEegRYtstH1(m^Y
z0QPcaiZY&6F;a&iLjr|CN*v)n#=XveX>nA+DL}6witBWnHt>?AkVUmcGQ;nAJp4n2
z(D2f>d!Xz3OYf8x?W))JSZa2wL^rLp7AbFeWN$<^i0}m0WN*B8yd_}hL+**>(jj}+
zg1kd6xF$Q|i7T%~XL<NRwWlk4i==RaY9DV<dVoAM(VDcOqI*(P*Px79dbDvYMOqAv
zfHqJXzWM5rI0^|?SN_@%fM4kf=N3O;1zQ`OZ6d;4RRvE2hQ5`YPXbm%-x)fzRY-x7
z<kBGVD4U@}*CaLofzvF1zFF<Lm$KW2;iAe{)Y#QNb9MjR2^SGMbqZqW3kZ!;1a?5l
ztj42@>pMf2E7+~@+^b!fgB^}qU=<}*ctI7kOPF2O9OdnfE+$pg(@?u)^)<Q%ZnqBu
zs-2XB54s|gykS|Aikj^d?*{gAiN!ie2Cs9S3WNF<$axX<t%cEI5|-4H72b~Gs)md{
zH@=Lfkx7lXCahn%(&_+*Mt$YJ(sG4W!MAtXPR{#jHm4c-->o(zj8rLNw3mFIORv4D
zx#d;rU)`xSM{^o_icb*r&4ZHUYTvwjxWp;e;nWeLkg5?l>DCD)$pKS(zHfmj54o33
zk|GGu&KBNThLwkhPNbQnLkwNkr|d(AJk3(iMpZpDp|Hr!X|W4QJF;wvy05s^_U9g7
zB+#VohVA)@+cgp5pd^Kgt>*T;>iFdFg%*CE&1dCwDNe#1FRbC?-bh0N#d8KTg&VKt
zAx>|#Eg-t;o?3h*C%%n%%QW^@w_J6R&Fy`(4vUg%-?nU%EW8x|nUcX0=lt!xBOjl`
zj~>Yqq{<H!MOBgpmeKTLP_%((&yWhkj?pll%L}7V&IXDa6xRmH6G727Zwo_ASQT%1
z@|ZQ398JhrzAgug+S4b{6oZU}6wh1g>6H3^Cn@~Q?VQ~guR+hswX}n0rL&15v~4|-
zjN4E7O(i}$gysQH#Nl!y{(EF9n87s0$6$knkTWZ+-xQx%6#u#Q<vrma!o|c^HRe~d
z_sYAxc1n*X9ji1ASUHDP4Oo{vp&A`0dwSxO00y`qi;ko*Vuera%BH{#U5`6ph_jc`
z%EQOI_G}hyK~cAyTJ6*`#oo=Lb)8l`GQTa=L<u4B{aI-)xO?2@zaGnkDL#XJER!ub
z=van1T12@wk40S^pRSomcl93Xq;YbTb&@M*O=K|pOFZQO<&M@51Y5zU3vDyBBL!23
zPZ#ymwat}xxP=z?71&%XN$!^9!<OLGk4YtZmG%>$)~nwWE|a@Fv{bhzwWnU<rXFM~
z@eA)u+6%VX2G1W$h>-;w%F4pB0t#-1gKdcFq-!9ZO5JEImFvT+|7@$(@U5gT2NI(H
z;ZC*WOy~6HB+b}nvX5oV(9<~v3b@$jQKhnFXBo83=DtTA&OngHpJuHkpSbQ$c0tY5
z8o#tF9oTTpyn$O3X%ER2;UTUs*yX&v*>ShgfVG~-N|%o;R-%nZecBQ}VHct#m8fg<
zR%4PZA*g1<xBm<PZ^bYOOCpAW5I+@Q3BLVj+=hV<2l&GHxnUbTKRL|&|A+szzr^TY
DX`DTy

literal 0
HcmV?d00001

diff --git a/jetbrains/plugin/src/main/resources/roo-cline-shell-integrations/vscode-bash/bashrc b/jetbrains/plugin/src/main/resources/roo-cline-shell-integrations/vscode-bash/bashrc
new file mode 100644
index 000000000..4b5bf4cfd
--- /dev/null
+++ b/jetbrains/plugin/src/main/resources/roo-cline-shell-integrations/vscode-bash/bashrc
@@ -0,0 +1,235 @@
+# ---------------------------------------------------------------------------------------------
+#   Copyright (c) Microsoft Corporation. All rights reserved.
+#   Licensed under the MIT License. See License.txt in the project root for license information.
+# ---------------------------------------------------------------------------------------------
+
+# Prevent the script recursing when setting up
+if [[ -n "${VSCODE_SHELL_INTEGRATION:-}" ]]; then
+	builtin return
+fi
+
+VSCODE_SHELL_INTEGRATION=1
+
+__vscode_shell_env_reporting="$VSCODE_SHELL_ENV_REPORTING"
+unset VSCODE_SHELL_ENV_REPORTING
+
+# Run relevant rc/profile only if shell integration has been injected, not when run manually
+if [ "$VSCODE_INJECTION" == "1" ]; then
+	# First check if there is an original rcfile to load (from IDEA terminal integration)
+	if [ -n "$ORIGINAL_BASH_RCFILE" ] && [ -r "$ORIGINAL_BASH_RCFILE" ]; then
+		# Source the original rcfile that was specified by IDEA
+		source "$ORIGINAL_BASH_RCFILE"
+	elif [ -r ~/.bashrc ]; then
+		# Source the user's original bashrc as fallback
+		source ~/.bashrc
+	fi
+	builtin unset VSCODE_INJECTION
+fi
+
+if [ -z "$VSCODE_SHELL_INTEGRATION" ]; then
+	builtin return
+fi
+
+__vsc_get_trap() {
+	# 'trap -p DEBUG' outputs a shell command like `trap -- '…shellcode…' DEBUG`.
+	builtin local -a terms
+	builtin eval "terms=( $(trap -p "${1:-DEBUG}") )"
+	builtin printf '%s' "${terms[2]:-}"
+}
+
+__vsc_escape_value_fast() {
+	builtin local LC_ALL=C out
+	out=${1//\\/\\\\}
+	out=${out//;/\\x3b}
+	builtin printf '%s\n' "${out}"
+}
+
+# The property (P) and command (E) codes embed values which require escaping.
+# Backslashes are doubled. Non-alphanumeric characters are converted to escaped hex.
+__vsc_escape_value() {
+	# If the input being too large, switch to the faster function
+	if [ "${#1}" -ge 2000 ]; then
+		__vsc_escape_value_fast "$1"
+		builtin return
+	fi
+
+	# Process text byte by byte, not by codepoint.
+	builtin local -r LC_ALL=C
+	builtin local -r str="${1}"
+	builtin local -ir len="${#str}"
+
+	builtin local -i i
+	builtin local -i val
+	builtin local byte
+	builtin local token
+	builtin local out=''
+
+	for (( i=0; i < "${#str}"; ++i )); do
+		# Escape backslashes, semi-colons specially, then special ASCII chars below space (0x20).
+		byte="${str:$i:1}"
+		builtin printf -v val '%d' "'$byte"
+		if  (( val < 31 )); then
+			builtin printf -v token '\\x%02x' "'$byte"
+		elif (( val == 92 )); then # \
+			token="\\\\"
+		elif (( val == 59 )); then # ;
+			token="\\x3b"
+		else
+			token="$byte"
+		fi
+
+		out+="$token"
+	done
+
+	builtin printf '%s\n' "$out"
+}
+
+__vsc_initialized=0
+__vsc_original_PS1="$PS1"
+__vsc_original_PS2="$PS2"
+__vsc_custom_PS1=""
+__vsc_custom_PS2=""
+__vsc_in_command_execution="1"
+__vsc_current_command=""
+
+# It's fine this is in the global scope as it getting at it requires access to the shell environment
+__vsc_nonce="$VSCODE_NONCE"
+unset VSCODE_NONCE
+
+__vsc_update_cwd() {
+	builtin printf '\e]633;P;Cwd=%s\a' "$(__vsc_escape_value "${PWD}")"
+}
+
+__vsc_prompt_start() {
+	builtin printf '\e]633;A\a'
+}
+
+__vsc_prompt_end() {
+	builtin printf '\e]633;B\a'
+}
+
+__vsc_continuation_start() {
+	builtin printf '\e]633;F\a'
+}
+
+__vsc_continuation_end() {
+	builtin printf '\e]633;G\a'
+}
+
+__vsc_command_output_start() {
+	if [[ -z "${__vsc_first_prompt-}" ]]; then
+		builtin return
+	fi
+	builtin printf '\e]633;E;%s;%s\a' "$(__vsc_escape_value "${__vsc_current_command}")" $__vsc_nonce
+	builtin printf '\e]633;C\a'
+}
+
+__vsc_command_complete() {
+	if [[ -z "${__vsc_first_prompt-}" ]]; then
+		__vsc_update_cwd
+		builtin return
+	fi
+	if [ "$__vsc_current_command" = "" ]; then
+		builtin printf '\e]633;D\a'
+	else
+		builtin printf '\e]633;D;%s\a' "$__vsc_status"
+	fi
+	__vsc_update_cwd
+}
+
+__vsc_update_prompt() {
+	# in command execution
+	if [ "$__vsc_in_command_execution" = "1" ]; then
+		# Wrap the prompt if it is not yet wrapped, if the PS1 changed this this was last set it
+		# means the user re-exported the PS1 so we should re-wrap it
+		if [[ "$__vsc_custom_PS1" == "" || "$__vsc_custom_PS1" != "$PS1" ]]; then
+			__vsc_original_PS1=$PS1
+			__vsc_custom_PS1="\[$(__vsc_prompt_start)\]$__vsc_original_PS1\[$(__vsc_prompt_end)\]"
+			PS1="$__vsc_custom_PS1"
+		fi
+		if [[ "$__vsc_custom_PS2" == "" || "$__vsc_custom_PS2" != "$PS2" ]]; then
+			__vsc_original_PS2=$PS2
+			__vsc_custom_PS2="\[$(__vsc_continuation_start)\]$__vsc_original_PS2\[$(__vsc_continuation_end)\]"
+			PS2="$__vsc_custom_PS2"
+		fi
+		__vsc_in_command_execution="0"
+	fi
+}
+
+__vsc_precmd() {
+	__vsc_command_complete "$__vsc_status"
+	__vsc_current_command=""
+	__vsc_first_prompt=1
+	__vsc_update_prompt
+}
+
+__vsc_preexec() {
+	__vsc_initialized=1
+	if [[ ! $BASH_COMMAND == __vsc_prompt* ]]; then
+		# Use history if it's available to verify the command as BASH_COMMAND comes in with aliases
+		# resolved
+		__vsc_current_command="$(builtin history 1 | sed 's/ *[0-9]* *//')"
+	else
+		__vsc_current_command=""
+	fi
+	__vsc_command_output_start
+}
+
+# Debug trapping/preexec inspired by starship (ISC)
+__vsc_dbg_trap="$(__vsc_get_trap DEBUG)"
+
+if [[ -z "$__vsc_dbg_trap" ]]; then
+	__vsc_preexec_only() {
+		if [ "$__vsc_in_command_execution" = "0" ]; then
+			__vsc_in_command_execution="1"
+			__vsc_preexec
+		fi
+	}
+	trap '__vsc_preexec_only "$_"' DEBUG
+elif [[ "$__vsc_dbg_trap" != '__vsc_preexec "$_"' && "$__vsc_dbg_trap" != '__vsc_preexec_all "$_"' ]]; then
+	__vsc_preexec_all() {
+		if [ "$__vsc_in_command_execution" = "0" ]; then
+			__vsc_in_command_execution="1"
+			__vsc_preexec
+			builtin eval "${__vsc_dbg_trap}"
+		fi
+	}
+	trap '__vsc_preexec_all "$_"' DEBUG
+fi
+
+__vsc_update_prompt
+
+__vsc_restore_exit_code() {
+	return "$1"
+}
+
+__vsc_prompt_cmd_original() {
+	__vsc_status="$?"
+	builtin local cmd
+	__vsc_restore_exit_code "${__vsc_status}"
+	# Evaluate the original PROMPT_COMMAND similarly to how bash would normally
+	# See https://unix.stackexchange.com/a/672843 for technique
+	for cmd in "${__vsc_original_prompt_command[@]}"; do
+		eval "${cmd:-}"
+	done
+	__vsc_precmd
+}
+
+__vsc_prompt_cmd() {
+	__vsc_status="$?"
+	__vsc_precmd
+}
+
+# PROMPT_COMMAND arrays and strings seem to be handled the same (handling only the first entry of
+# the array?)
+__vsc_original_prompt_command=${PROMPT_COMMAND:-}
+
+if [[ -n "${__vsc_original_prompt_command:-}" && "${__vsc_original_prompt_command:-}" != "__vsc_prompt_cmd" ]]; then
+	PROMPT_COMMAND=__vsc_prompt_cmd_original
+else
+	PROMPT_COMMAND=__vsc_prompt_cmd
+fi
+
+# Report shell information
+builtin printf '\e]633;P;Shell=bash\a'
+__vsc_update_cwd 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/resources/roo-cline-shell-integrations/vscode-powershell/diagnose.ps1 b/jetbrains/plugin/src/main/resources/roo-cline-shell-integrations/vscode-powershell/diagnose.ps1
new file mode 100644
index 000000000..38221515a
--- /dev/null
+++ b/jetbrains/plugin/src/main/resources/roo-cline-shell-integrations/vscode-powershell/diagnose.ps1
@@ -0,0 +1,58 @@
+# SPDX-FileCopyrightText: 2025 Weibo, Inc.
+#
+# SPDX-License-Identifier: Apache-2.0
+
+# WeCoder PowerShell Shell Integration Diagnostic Script
+# This script is used to diagnose shell integration issues
+
+Write-Host "WeCoder PowerShell Shell Integration Diagnostic Tool" -ForegroundColor Blue
+Write-Host "================================================" -ForegroundColor Blue
+
+# Check PowerShell version
+Write-Host "PowerShell Version: $($PSVersionTable.PSVersion)" -ForegroundColor Green
+
+# Check execution policy
+Write-Host "Execution Policy: $(Get-ExecutionPolicy)" -ForegroundColor Yellow
+
+# Check language mode
+Write-Host "Language Mode: $($ExecutionContext.SessionState.LanguageMode)" -ForegroundColor Green
+
+# Check PSReadLine module
+$psReadLineModule = Get-Module -Name PSReadLine
+if ($psReadLineModule) {
+    Write-Host "PSReadLine Module: Loaded (Version: $($psReadLineModule.Version))" -ForegroundColor Green
+} else {
+    Write-Host "PSReadLine Module: Not loaded" -ForegroundColor Red
+}
+
+# Check environment variables
+Write-Host "Related Environment Variables:" -ForegroundColor Cyan
+$envVars = @('VSCODE_NONCE', 'VSCODE_INJECTION', 'VSCODE_SHELL_ENV_REPORTING', 'WECODER_SHELL_INTEGRATION', 'WECODER_SCRIPT_PATH')
+foreach ($var in $envVars) {
+    $value = [Environment]::GetEnvironmentVariable($var)
+    if ($value) {
+        Write-Host "  $var = $value" -ForegroundColor White
+    } else {
+        Write-Host "  $var = (Not set)" -ForegroundColor Gray
+    }
+}
+
+# Check shell integration status
+if (Test-Path variable:global:__VSCodeOriginalPrompt) {
+    Write-Host "Shell Integration: Initialized" -ForegroundColor Green
+} else {
+    Write-Host "Shell Integration: Not initialized" -ForegroundColor Red
+}
+
+# Test shell integration sequences
+Write-Host "Testing shell integration initialization sequence..." -ForegroundColor Yellow
+$esc = [char]27
+$bell = [char]7
+$seq1 = $esc + ']633;P;Shell=powershell' + $bell
+$seq2 = $esc + ']633;A' + $bell
+[Console]::Write($seq1)
+[Console]::Write($seq2)
+Write-Host "Initialization sequence sent" -ForegroundColor Green
+
+Write-Host "================================================" -ForegroundColor Blue
+Write-Host "Diagnosis complete. If issues persist, check if terminal supports VSCode shell integration sequences." -ForegroundColor Blue 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/resources/roo-cline-shell-integrations/vscode-powershell/profile.ps1 b/jetbrains/plugin/src/main/resources/roo-cline-shell-integrations/vscode-powershell/profile.ps1
new file mode 100644
index 000000000..6dbc948e5
--- /dev/null
+++ b/jetbrains/plugin/src/main/resources/roo-cline-shell-integrations/vscode-powershell/profile.ps1
@@ -0,0 +1,190 @@
+# ---------------------------------------------------------------------------------------------
+#   Copyright (c) Microsoft Corporation. All rights reserved.
+#   Licensed under the MIT License. See License.txt in the project root for license information.
+# ---------------------------------------------------------------------------------------------
+
+# Add debug output
+if ($env:WECODER_SHELL_INTEGRATION -eq "1") {
+	Write-Host "🚀 WeCoder PowerShell Shell Integration Loading..." -ForegroundColor Green
+	Write-Host "📁 Script Path: $($env:WECODER_SCRIPT_PATH)" -ForegroundColor Yellow
+	Write-Host "🔑 Nonce: $($env:VSCODE_NONCE)" -ForegroundColor Yellow
+}
+
+# Prevent installing more than once per session
+if (Test-Path variable:global:__VSCodeOriginalPrompt) {
+	if ($env:WECODER_SHELL_INTEGRATION -eq "1") {
+		Write-Host "⚠️ Shell integration already loaded, skipping..." -ForegroundColor Yellow
+	}
+	return;
+}
+
+# Disable shell integration when the language mode is restricted
+if ($ExecutionContext.SessionState.LanguageMode -ne "FullLanguage") {
+	if ($env:WECODER_SHELL_INTEGRATION -eq "1") {
+		Write-Host "❌ Shell integration disabled due to restricted language mode" -ForegroundColor Red
+		# Automatically run diagnostic script
+		$diagnosePath = Join-Path (Split-Path $env:WECODER_SCRIPT_PATH -Parent) "diagnose.ps1"
+		if (Test-Path $diagnosePath) {
+			Write-Host "🔍 Running diagnostic script..." -ForegroundColor Yellow
+			& $diagnosePath
+		}
+	}
+	return;
+}
+
+# Load user's original PowerShell profile if shell integration was injected
+if ($env:VSCODE_INJECTION -eq "1") {
+	# Source user's original profile if it exists
+	$UserProfile = $PROFILE.CurrentUserCurrentHost
+	if (Test-Path $UserProfile) {
+		. $UserProfile
+	}
+	$env:VSCODE_INJECTION = $null
+}
+
+$Global:__VSCodeOriginalPrompt = $function:Prompt
+$Global:__LastHistoryId = -1
+$Global:__VSCodeIsInExecution = $false
+
+# Store the nonce in script scope and unset the global
+$Nonce = $env:VSCODE_NONCE
+$env:VSCODE_NONCE = $null
+
+$__vscode_shell_env_reporting = $env:VSCODE_SHELL_ENV_REPORTING
+$env:VSCODE_SHELL_ENV_REPORTING = $null
+
+function Global:__VSCode-Escape-Value([string]$value) {
+	# Replace any non-alphanumeric characters.
+	[regex]::Replace($value, "[$([char]0x00)-$([char]0x1f)\\\n;]", { param($match)
+		# Encode the (ascii) matches as `\x<hex>`
+		-Join (
+			[System.Text.Encoding]::UTF8.GetBytes($match.Value) | ForEach-Object { '\x{0:x2}' -f $_ }
+		)
+	})
+}
+
+function Global:Prompt() {
+	$FakeCode = [int]!$global:?
+	Set-StrictMode -Off
+	$LastHistoryEntry = Get-History -Count 1
+	$Result = ""
+	
+	# Define escape sequences
+	$esc = [char]0x1b
+	$bell = [char]0x07
+	
+	# Skip finishing the command if the first command has not yet started or an execution has not yet begun
+	if ($Global:__LastHistoryId -ne -1 -and $Global:__VSCodeIsInExecution -eq $true) {
+		$Global:__VSCodeIsInExecution = $false
+		if ($LastHistoryEntry.Id -eq $Global:__LastHistoryId) {
+			# Don't provide a command line or exit code if there was no history entry (eg. ctrl+c, enter on no command)
+			$Result += $esc + "]633;D" + $bell
+		} else {
+			# Command finished exit code
+			$Result += $esc + "]633;D;" + $FakeCode + $bell
+		}
+	}
+
+	# Prompt started
+	$Result += $esc + "]633;A" + $bell
+
+	# Current working directory
+	if ($pwd.Provider.Name -eq 'FileSystem') {
+		$cwdEscaped = __VSCode-Escape-Value $pwd.ProviderPath
+		$Result += $esc + "]633;P;Cwd=" + $cwdEscaped + $bell
+	}
+
+	# Before running the original prompt, put $? back to what it was:
+	if ($FakeCode -ne 0) {
+		Write-Error "failure" -ea ignore
+	}
+
+	# Run the original prompt
+	$OriginalPrompt = $Global:__VSCodeOriginalPrompt.Invoke()
+	$Result += $OriginalPrompt
+
+	# Write command started
+	$Result += "${esc}]633;B${bell}"
+	$Global:__LastHistoryId = $LastHistoryEntry.Id
+	return $Result
+}
+
+# Define escape sequences for console output
+$esc = [char]0x1b
+$bell = [char]0x07
+
+# Report shell information
+$shellSeq = "${esc}]633;P;Shell=powershell${bell}"
+[Console]::Write($shellSeq)
+
+# Set IsWindows property
+if ($PSVersionTable.PSVersion -lt "6.0") {
+	# Windows PowerShell is only available on Windows
+	$winSeq = "${esc}]633;P;IsWindows=`$true${bell}"
+	[Console]::Write($winSeq)
+} else {
+	$winSeq = "${esc}]633;P;IsWindows=`$IsWindows${bell}"
+	[Console]::Write($winSeq)
+}
+
+# Only send the command executed sequence when PSReadLine is loaded
+if (Get-Module -Name PSReadLine) {
+	$richSeq = "${esc}]633;P;HasRichCommandDetection=True${bell}"
+	[Console]::Write($richSeq)
+
+	$__VSCodeOriginalPSConsoleHostReadLine = $function:PSConsoleHostReadLine
+	function Global:PSConsoleHostReadLine {
+		$CommandLine = $__VSCodeOriginalPSConsoleHostReadLine.Invoke()
+		$Global:__VSCodeIsInExecution = $true
+
+		# Command line
+		$Result = $esc + "]633;E;" + $(__VSCode-Escape-Value $CommandLine) + ";" + $Nonce + $bell
+
+		# Command executed
+		$Result += $esc + "]633;C" + $bell
+
+		# Write command executed sequence directly to Console
+		[Console]::Write($Result)
+
+		$CommandLine
+	}
+}
+
+# Add confirmation message for successful loading
+if ($env:WECODER_SHELL_INTEGRATION -eq "1") {
+	# Check if shell integration is correctly initialized
+	$shellIntegrationOk = $true
+	
+	# Check if required variables exist
+	if (-not $Nonce) {
+		Write-Host "⚠️ Warning: VSCODE_NONCE is not set correctly" -ForegroundColor Yellow
+		$shellIntegrationOk = $false
+	}
+	
+	# Check if Prompt function is correctly defined
+	if (-not (Test-Path function:Global:Prompt)) {
+		Write-Host "⚠️ Warning: Global:Prompt function is not correctly defined" -ForegroundColor Yellow
+		$shellIntegrationOk = $false
+	}
+	
+	# Check PSReadLine
+	if (-not (Get-Module -Name PSReadLine)) {
+		Write-Host "⚠️ Warning: PSReadLine module is not loaded, some features may be unavailable" -ForegroundColor Yellow
+	}
+	
+	if ($shellIntegrationOk) {
+		Write-Host "✅ WeCoder PowerShell Shell Integration loaded successfully!" -ForegroundColor Green
+	} else {
+		Write-Host "❌ WeCoder PowerShell Shell Integration encountered issues during loading" -ForegroundColor Red
+		# Automatically run diagnostic script
+		$diagnosePath = Join-Path (Split-Path $env:WECODER_SCRIPT_PATH -Parent) "diagnose.ps1"
+		if (Test-Path $diagnosePath) {
+			Write-Host "🔍 Automatically running diagnostic script..." -ForegroundColor Yellow
+			& $diagnosePath
+		}
+	}
+	
+	# Clean up debug environment variables
+	$env:WECODER_SHELL_INTEGRATION = $null
+	$env:WECODER_SCRIPT_PATH = $null
+} 
\ No newline at end of file
diff --git a/jetbrains/plugin/src/main/resources/roo-cline-shell-integrations/vscode-zsh/.zshenv b/jetbrains/plugin/src/main/resources/roo-cline-shell-integrations/vscode-zsh/.zshenv
new file mode 100644
index 000000000..9329352fa
--- /dev/null
+++ b/jetbrains/plugin/src/main/resources/roo-cline-shell-integrations/vscode-zsh/.zshenv
@@ -0,0 +1,24 @@
+# ---------------------------------------------------------------------------------------------
+#   Copyright (c) Microsoft Corporation. All rights reserved.
+#   Licensed under the MIT License. See License.txt in the project root for license information.
+# ---------------------------------------------------------------------------------------------
+
+# Ensure USER_ZDOTDIR exists and is valid
+if [[ -z "$USER_ZDOTDIR" ]]; then
+    USER_ZDOTDIR=${ZDOTDIR:-$HOME}
+fi
+
+# Only process when the user config file exists
+if [[ -f "$USER_ZDOTDIR/.zshenv" ]]; then
+    VSCODE_ZDOTDIR=$ZDOTDIR
+    ZDOTDIR=$USER_ZDOTDIR
+
+    # Prevent recursive calls
+    if [[ "$USER_ZDOTDIR" != "$VSCODE_ZDOTDIR" ]]; then
+        source "$USER_ZDOTDIR/.zshenv"
+    fi
+
+    # Restore settings
+    USER_ZDOTDIR=$ZDOTDIR
+    ZDOTDIR=$VSCODE_ZDOTDIR
+fi
diff --git a/jetbrains/plugin/src/main/resources/roo-cline-shell-integrations/vscode-zsh/.zshrc b/jetbrains/plugin/src/main/resources/roo-cline-shell-integrations/vscode-zsh/.zshrc
new file mode 100644
index 000000000..8098c418d
--- /dev/null
+++ b/jetbrains/plugin/src/main/resources/roo-cline-shell-integrations/vscode-zsh/.zshrc
@@ -0,0 +1,158 @@
+# ---------------------------------------------------------------------------------------------
+#   Copyright (c) Microsoft Corporation. All rights reserved.
+#   Licensed under the MIT License. See License.txt in the project root for license information.
+# ---------------------------------------------------------------------------------------------
+builtin autoload -Uz add-zsh-hook
+
+# Prevent the script recursing when setting up
+if [ -n "$VSCODE_SHELL_INTEGRATION" ]; then
+	ZDOTDIR=$USER_ZDOTDIR
+	builtin return
+fi
+
+# This variable allows the shell to both detect that VS Code's shell integration is enabled as well
+# as disable it by unsetting the variable.
+VSCODE_SHELL_INTEGRATION=1
+
+# By default, zsh will set the $HISTFILE to the $ZDOTDIR location automatically. In the case of the
+# shell integration being injected, this means that the terminal will use a different history file
+# to other terminals. To fix this issue, set $HISTFILE back to the default location before ~/.zshrc
+# is called as that may depend upon the value.
+if [[ "$VSCODE_INJECTION" == "1" ]]; then
+	# Ensure USER_ZDOTDIR exists and is valid
+	if [[ -z "$USER_ZDOTDIR" ]]; then
+		USER_ZDOTDIR=${HOME}
+	fi
+	HISTFILE="$USER_ZDOTDIR/.zsh_history"
+fi
+
+# Only fix up ZDOTDIR if shell integration was injected (not manually installed) and has not been called yet
+if [[ "$VSCODE_INJECTION" == "1" ]]; then
+	if [[ $options[norcs] = off && -f "$USER_ZDOTDIR/.zshrc" ]]; then
+		VSCODE_ZDOTDIR=$ZDOTDIR
+		ZDOTDIR=$USER_ZDOTDIR
+		# A user's custom HISTFILE location might be set when their .zshrc file is sourced below
+		source "$USER_ZDOTDIR/.zshrc"
+	fi
+fi
+
+# Shell integration was disabled by the shell, exit without warning assuming either the shell has
+# explicitly disabled shell integration as it's incompatible or it implements the protocol.
+if [ -z "$VSCODE_SHELL_INTEGRATION" ]; then
+	builtin return
+fi
+
+# The property (P) and command (E) codes embed values which require escaping.
+# Backslashes are doubled. Non-alphanumeric characters are converted to escaped hex.
+__vsc_escape_value() {
+	builtin emulate -L zsh
+
+	# Process text byte by byte, not by codepoint.
+	builtin local LC_ALL=C str="$1" i byte token out='' val
+
+	for (( i = 0; i < ${#str}; ++i )); do
+	# Escape backslashes, semi-colons specially, then special ASCII chars below space (0x20).
+		byte="${str:$i:1}"
+		val=$(printf "%d" "'$byte")
+		if (( val < 31 )); then
+			# For control characters, use hex encoding
+			token=$(printf "\\\\x%02x" "'$byte")
+		elif [ "$byte" = "\\" ]; then
+			token="\\\\"
+		elif [ "$byte" = ";" ]; then
+			token="\\x3b"
+		else
+			token="$byte"
+		fi
+
+		out+="$token"
+	done
+
+	builtin print -r -- "$out"
+}
+
+__vsc_in_command_execution="1"
+__vsc_current_command=""
+
+# It's fine this is in the global scope as it getting at it requires access to the shell environment
+__vsc_nonce="$VSCODE_NONCE"
+unset VSCODE_NONCE
+
+__vscode_shell_env_reporting="$VSCODE_SHELL_ENV_REPORTING"
+unset VSCODE_SHELL_ENV_REPORTING
+
+__vsc_update_cwd() {
+	builtin printf '\e]633;P;Cwd=%s\a' "$(__vsc_escape_value "${PWD}")"
+}
+
+__vsc_command_output_start() {
+	builtin printf '\e]633;E;%s;%s\a' "$(__vsc_escape_value "${__vsc_current_command}")" $__vsc_nonce
+	builtin printf '\e]633;C\a'
+}
+
+__vsc_command_complete() {
+	if [[ "$__vsc_current_command" == "" ]]; then
+		builtin printf '\e]633;D\a'
+	else
+		builtin printf '\e]633;D;%s\a' "$__vsc_status"
+	fi
+	__vsc_update_cwd
+}
+
+__vsc_update_prompt() {
+	__vsc_in_command_execution=""
+}
+
+__vsc_precmd() {
+	builtin local __vsc_status="$?"
+	if [ -z "${__vsc_in_command_execution-}" ]; then
+		# not in command execution
+		__vsc_command_output_start
+	fi
+
+	__vsc_command_complete "$__vsc_status"
+	__vsc_current_command=""
+
+	# in command execution
+	if [ -n "$__vsc_in_command_execution" ]; then
+		# non null
+		__vsc_update_prompt
+	fi
+}
+
+__vsc_preexec() {
+	__vsc_in_command_execution="1"
+	__vsc_current_command=$1
+	__vsc_command_output_start
+}
+add-zsh-hook precmd __vsc_precmd
+add-zsh-hook preexec __vsc_preexec
+
+if [[ $options[login] = off && $USER_ZDOTDIR != $VSCODE_ZDOTDIR ]]; then
+	ZDOTDIR=$USER_ZDOTDIR
+fi
+
+# Only clear the prompt when explicitly needed to avoid affecting user custom configuration
+# Commenting out will affect the user's environment settings
+# PS1=''
+# PS2=''
+# PROMPT_EOL_MARK=''
+
+# Ensure to restore the user's environment configuration after shell integration is complete
+if [[ "$VSCODE_INJECTION" == "1" && -n "$USER_ZDOTDIR" ]]; then
+	# Restore ZDOTDIR after shell is fully initialized
+	if [[ "$USER_ZDOTDIR" != "$VSCODE_ZDOTDIR" ]]; then
+		export ZDOTDIR="$USER_ZDOTDIR"
+	fi
+
+	# Load .zshrc configuration from user's home directory
+	if [[ -f "${HOME}/.zshrc" ]]; then
+		source "${HOME}/.zshrc"
+	fi
+
+	# Load .zprofile configuration from user's home directory
+	if [[ -f "${HOME}/.zprofile" ]]; then
+		source "${HOME}/.zprofile"
+	fi
+
+fi
diff --git a/jetbrains/plugin/src/main/resources/themes/vscode-theme-dark.css b/jetbrains/plugin/src/main/resources/themes/vscode-theme-dark.css
new file mode 100644
index 000000000..2c92fca21
--- /dev/null
+++ b/jetbrains/plugin/src/main/resources/themes/vscode-theme-dark.css
@@ -0,0 +1,748 @@
+--text-link-decoration: none;
+--vscode-font-family: -apple-system, BlinkMacSystemFont, sans-serif;
+--vscode-font-weight: normal;
+--vscode-font-size: 13px;
+--vscode-editor-font-family: Menlo, Monaco, "Courier New", monospace;
+--vscode-editor-font-weight: normal;
+--vscode-editor-font-size: 16px;
+--vscode-foreground: #cccccc;
+--vscode-disabledForeground: rgba(204, 204, 204, 0.5);
+--vscode-errorForeground: #f48771;
+--vscode-descriptionForeground: rgba(204, 204, 204, 0.7);
+--vscode-icon-foreground: #c5c5c5;
+--vscode-focusBorder: #007fd4;
+--vscode-textLink-foreground: #3794ff;
+--vscode-textLink-activeForeground: #3794ff;
+--vscode-textSeparator-foreground: rgba(255, 255, 255, 0.18);
+--vscode-textPreformat-foreground: #d7ba7d;
+--vscode-textPreformat-background: rgba(255, 255, 255, 0.1);
+--vscode-textBlockQuote-background: #222222;
+--vscode-textBlockQuote-border: rgba(0, 122, 204, 0.5);
+--vscode-textCodeBlock-background: rgba(10, 10, 10, 0.4);
+--vscode-sash-hoverBorder: #007fd4;
+--vscode-badge-background: #4d4d4d;
+--vscode-badge-foreground: #ffffff;
+--vscode-activityWarningBadge-foreground: #000000;
+--vscode-activityWarningBadge-background: #cca700;
+--vscode-activityErrorBadge-foreground: #000000;
+--vscode-activityErrorBadge-background: #f14c4c;
+--vscode-scrollbar-shadow: #000000;
+--vscode-scrollbarSlider-background: rgba(121, 121, 121, 0.4);
+--vscode-scrollbarSlider-hoverBackground: rgba(100, 100, 100, 0.7);
+--vscode-scrollbarSlider-activeBackground: rgba(191, 191, 191, 0.4);
+--vscode-progressBar-background: #0e70c0;
+--vscode-chart-line: #236b8e;
+--vscode-chart-axis: rgba(191, 191, 191, 0.4);
+--vscode-chart-guide: rgba(191, 191, 191, 0.2);
+--vscode-editor-background: #1e1e1e;
+--vscode-editor-foreground: #d4d4d4;
+--vscode-editorStickyScroll-background: #1e1e1e;
+--vscode-editorStickyScrollHover-background: #2a2d2e;
+--vscode-editorStickyScroll-shadow: #000000;
+--vscode-editorWidget-background: #252526;
+--vscode-editorWidget-foreground: #cccccc;
+--vscode-editorWidget-border: #454545;
+--vscode-editorError-foreground: #f14c4c;
+--vscode-editorWarning-foreground: #cca700;
+--vscode-editorInfo-foreground: #3794ff;
+--vscode-editorHint-foreground: rgba(238, 238, 238, 0.7);
+--vscode-editorLink-activeForeground: #4e94ce;
+--vscode-editor-selectionBackground: #264f78;
+--vscode-editor-inactiveSelectionBackground: #3a3d41;
+--vscode-editor-selectionHighlightBackground: rgba(173, 214, 255, 0.15);
+--vscode-editor-compositionBorder: #ffffff;
+--vscode-editor-findMatchBackground: #515c6a;
+--vscode-editor-findMatchHighlightBackground: rgba(234, 92, 0, 0.33);
+--vscode-editor-findRangeHighlightBackground: rgba(58, 61, 65, 0.4);
+--vscode-editor-hoverHighlightBackground: rgba(38, 79, 120, 0.25);
+--vscode-editorHoverWidget-background: #252526;
+--vscode-editorHoverWidget-foreground: #cccccc;
+--vscode-editorHoverWidget-border: #454545;
+--vscode-editorHoverWidget-statusBarBackground: #2c2c2d;
+--vscode-editorInlayHint-foreground: #969696;
+--vscode-editorInlayHint-background: rgba(77, 77, 77, 0.1);
+--vscode-editorInlayHint-typeForeground: #969696;
+--vscode-editorInlayHint-typeBackground: rgba(77, 77, 77, 0.1);
+--vscode-editorInlayHint-parameterForeground: #969696;
+--vscode-editorInlayHint-parameterBackground: rgba(77, 77, 77, 0.1);
+--vscode-editorLightBulb-foreground: #ffcc00;
+--vscode-editorLightBulbAutoFix-foreground: #75beff;
+--vscode-editorLightBulbAi-foreground: #ffcc00;
+--vscode-editor-snippetTabstopHighlightBackground: rgba(124, 124, 124, 0.3);
+--vscode-editor-snippetFinalTabstopHighlightBorder: #525252;
+--vscode-diffEditor-insertedTextBackground: rgba(156, 204, 44, 0.2);
+--vscode-diffEditor-removedTextBackground: rgba(255, 0, 0, 0.2);
+--vscode-diffEditor-insertedLineBackground: rgba(155, 185, 85, 0.2);
+--vscode-diffEditor-removedLineBackground: rgba(255, 0, 0, 0.2);
+--vscode-diffEditor-diagonalFill: rgba(204, 204, 204, 0.2);
+--vscode-diffEditor-unchangedRegionBackground: #252526;
+--vscode-diffEditor-unchangedRegionForeground: #cccccc;
+--vscode-diffEditor-unchangedCodeBackground: rgba(116, 116, 116, 0.16);
+--vscode-widget-shadow: rgba(0, 0, 0, 0.36);
+--vscode-toolbar-hoverBackground: rgba(90, 93, 94, 0.31);
+--vscode-toolbar-activeBackground: rgba(99, 102, 103, 0.31);
+--vscode-breadcrumb-foreground: rgba(204, 204, 204, 0.8);
+--vscode-breadcrumb-background: #1e1e1e;
+--vscode-breadcrumb-focusForeground: #e0e0e0;
+--vscode-breadcrumb-activeSelectionForeground: #e0e0e0;
+--vscode-breadcrumbPicker-background: #252526;
+--vscode-merge-currentHeaderBackground: rgba(64, 200, 174, 0.5);
+--vscode-merge-currentContentBackground: rgba(64, 200, 174, 0.2);
+--vscode-merge-incomingHeaderBackground: rgba(64, 166, 255, 0.5);
+--vscode-merge-incomingContentBackground: rgba(64, 166, 255, 0.2);
+--vscode-merge-commonHeaderBackground: rgba(96, 96, 96, 0.4);
+--vscode-merge-commonContentBackground: rgba(96, 96, 96, 0.16);
+--vscode-editorOverviewRuler-currentContentForeground: rgba(64, 200, 174, 0.5);
+--vscode-editorOverviewRuler-incomingContentForeground: rgba(64, 166, 255, 0.5);
+--vscode-editorOverviewRuler-commonContentForeground: rgba(96, 96, 96, 0.4);
+--vscode-editorOverviewRuler-findMatchForeground: rgba(209, 134, 22, 0.49);
+--vscode-editorOverviewRuler-selectionHighlightForeground: rgba(160, 160, 160, 0.8);
+--vscode-problemsErrorIcon-foreground: #f14c4c;
+--vscode-problemsWarningIcon-foreground: #cca700;
+--vscode-problemsInfoIcon-foreground: #3794ff;
+--vscode-minimap-findMatchHighlight: #d18616;
+--vscode-minimap-selectionOccurrenceHighlight: #676767;
+--vscode-minimap-selectionHighlight: #264f78;
+--vscode-minimap-infoHighlight: #3794ff;
+--vscode-minimap-warningHighlight: #cca700;
+--vscode-minimap-errorHighlight: rgba(255, 18, 18, 0.7);
+--vscode-minimap-foregroundOpacity: #000000;
+--vscode-minimapSlider-background: rgba(121, 121, 121, 0.2);
+--vscode-minimapSlider-hoverBackground: rgba(100, 100, 100, 0.35);
+--vscode-minimapSlider-activeBackground: rgba(191, 191, 191, 0.2);
+--vscode-charts-foreground: #cccccc;
+--vscode-charts-lines: rgba(204, 204, 204, 0.5);
+--vscode-charts-red: #f14c4c;
+--vscode-charts-blue: #3794ff;
+--vscode-charts-yellow: #cca700;
+--vscode-charts-orange: #d18616;
+--vscode-charts-green: #89d185;
+--vscode-charts-purple: #b180d7;
+--vscode-input-background: #3c3c3c;
+--vscode-input-foreground: #cccccc;
+--vscode-inputOption-activeBorder: #007acc;
+--vscode-inputOption-hoverBackground: rgba(90, 93, 94, 0.5);
+--vscode-inputOption-activeBackground: rgba(0, 127, 212, 0.4);
+--vscode-inputOption-activeForeground: #ffffff;
+--vscode-input-placeholderForeground: #a6a6a6;
+--vscode-inputValidation-infoBackground: #063b49;
+--vscode-inputValidation-infoBorder: #007acc;
+--vscode-inputValidation-warningBackground: #352a05;
+--vscode-inputValidation-warningBorder: #b89500;
+--vscode-inputValidation-errorBackground: #5a1d1d;
+--vscode-inputValidation-errorBorder: #be1100;
+--vscode-dropdown-background: #3c3c3c;
+--vscode-dropdown-foreground: #f0f0f0;
+--vscode-dropdown-border: #3c3c3c;
+--vscode-button-foreground: #ffffff;
+--vscode-button-separator: rgba(255, 255, 255, 0.4);
+--vscode-button-background: #0e639c;
+--vscode-button-hoverBackground: #1177bb;
+--vscode-button-secondaryForeground: #ffffff;
+--vscode-button-secondaryBackground: #3a3d41;
+--vscode-button-secondaryHoverBackground: #45494e;
+--vscode-radio-activeForeground: #ffffff;
+--vscode-radio-activeBackground: rgba(0, 127, 212, 0.4);
+--vscode-radio-activeBorder: #007acc;
+--vscode-radio-inactiveBorder: rgba(255, 255, 255, 0.2);
+--vscode-radio-inactiveHoverBackground: rgba(90, 93, 94, 0.5);
+--vscode-checkbox-background: #3c3c3c;
+--vscode-checkbox-selectBackground: #252526;
+--vscode-checkbox-foreground: #f0f0f0;
+--vscode-checkbox-border: #3c3c3c;
+--vscode-checkbox-selectBorder: #c5c5c5;
+--vscode-checkbox-disabled\.background: #777777;
+--vscode-checkbox-disabled\.foreground: #b4b4b4;
+--vscode-keybindingLabel-background: rgba(128, 128, 128, 0.17);
+--vscode-keybindingLabel-foreground: #cccccc;
+--vscode-keybindingLabel-border: rgba(51, 51, 51, 0.6);
+--vscode-keybindingLabel-bottomBorder: rgba(68, 68, 68, 0.6);
+--vscode-list-focusOutline: #007fd4;
+--vscode-list-activeSelectionBackground: #04395e;
+--vscode-list-activeSelectionForeground: #ffffff;
+--vscode-list-activeSelectionIconForeground: #ffffff;
+--vscode-list-inactiveSelectionBackground: #37373d;
+--vscode-list-hoverBackground: #2a2d2e;
+--vscode-list-dropBackground: #383b3d;
+--vscode-list-dropBetweenBackground: #c5c5c5;
+--vscode-list-highlightForeground: #2aaaff;
+--vscode-list-focusHighlightForeground: #2aaaff;
+--vscode-list-invalidItemForeground: #b89500;
+--vscode-list-errorForeground: #f88070;
+--vscode-list-warningForeground: #cca700;
+--vscode-listFilterWidget-background: #252526;
+--vscode-listFilterWidget-outline: rgba(0, 0, 0, 0);
+--vscode-listFilterWidget-noMatchesOutline: #be1100;
+--vscode-listFilterWidget-shadow: rgba(0, 0, 0, 0.36);
+--vscode-list-filterMatchBackground: rgba(234, 92, 0, 0.33);
+--vscode-list-deemphasizedForeground: #8c8c8c;
+--vscode-tree-indentGuidesStroke: #585858;
+--vscode-tree-inactiveIndentGuidesStroke: rgba(88, 88, 88, 0.4);
+--vscode-tree-tableColumnsBorder: rgba(204, 204, 204, 0.13);
+--vscode-tree-tableOddRowsBackground: rgba(204, 204, 204, 0.04);
+--vscode-editorActionList-background: #252526;
+--vscode-editorActionList-foreground: #cccccc;
+--vscode-editorActionList-focusForeground: #ffffff;
+--vscode-editorActionList-focusBackground: #04395e;
+--vscode-menu-foreground: #cccccc;
+--vscode-menu-background: #303031;
+--vscode-menu-selectionForeground: #ffffff;
+--vscode-menu-selectionBackground: #04395e;
+--vscode-menu-separatorBackground: #606060;
+--vscode-quickInput-background: #252526;
+--vscode-quickInput-foreground: #cccccc;
+--vscode-quickInputTitle-background: rgba(255, 255, 255, 0.1);
+--vscode-pickerGroup-foreground: #3794ff;
+--vscode-pickerGroup-border: #3f3f46;
+--vscode-quickInputList-focusForeground: #ffffff;
+--vscode-quickInputList-focusIconForeground: #ffffff;
+--vscode-quickInputList-focusBackground: #04395e;
+--vscode-search-resultsInfoForeground: rgba(204, 204, 204, 0.65);
+--vscode-searchEditor-findMatchBackground: rgba(234, 92, 0, 0.22);
+--vscode-editor-lineHighlightBorder: #282828;
+--vscode-editor-rangeHighlightBackground: rgba(255, 255, 255, 0.04);
+--vscode-editor-symbolHighlightBackground: rgba(234, 92, 0, 0.33);
+--vscode-editorCursor-foreground: #aeafad;
+--vscode-editorMultiCursor-primary\.foreground: #aeafad;
+--vscode-editorMultiCursor-secondary\.foreground: #aeafad;
+--vscode-editorWhitespace-foreground: #204852;
+--vscode-editorLineNumber-foreground: #2b91af;
+--vscode-editorIndentGuide-background: #404040;
+--vscode-editorIndentGuide-activeBackground: #707070;
+--vscode-editorIndentGuide-background1: #404040;
+--vscode-editorIndentGuide-background2: rgba(0, 0, 0, 0);
+--vscode-editorIndentGuide-background3: rgba(0, 0, 0, 0);
+--vscode-editorIndentGuide-background4: rgba(0, 0, 0, 0);
+--vscode-editorIndentGuide-background5: rgba(0, 0, 0, 0);
+--vscode-editorIndentGuide-background6: rgba(0, 0, 0, 0);
+--vscode-editorIndentGuide-activeBackground1: #707070;
+--vscode-editorIndentGuide-activeBackground2: rgba(0, 0, 0, 0);
+--vscode-editorIndentGuide-activeBackground3: rgba(0, 0, 0, 0);
+--vscode-editorIndentGuide-activeBackground4: rgba(0, 0, 0, 0);
+--vscode-editorIndentGuide-activeBackground5: rgba(0, 0, 0, 0);
+--vscode-editorIndentGuide-activeBackground6: rgba(0, 0, 0, 0);
+--vscode-editorActiveLineNumber-foreground: #c6c6c6;
+--vscode-editorLineNumber-activeForeground: #2b91af;
+--vscode-editorRuler-foreground: #5a5a5a;
+--vscode-editorCodeLens-foreground: #999999;
+--vscode-editorBracketMatch-background: rgba(0, 100, 0, 0.1);
+--vscode-editorBracketMatch-border: #888888;
+--vscode-editorOverviewRuler-border: rgba(127, 127, 127, 0.3);
+--vscode-editorGutter-background: #1e1e1e;
+--vscode-editorUnnecessaryCode-opacity: rgba(0, 0, 0, 0.67);
+--vscode-editorGhostText-foreground: rgba(255, 255, 255, 0.34);
+--vscode-editorOverviewRuler-rangeHighlightForeground: rgba(0, 122, 204, 0.6);
+--vscode-editorOverviewRuler-errorForeground: rgba(255, 18, 18, 0.7);
+--vscode-editorOverviewRuler-warningForeground: #cca700;
+--vscode-editorOverviewRuler-infoForeground: #3794ff;
+--vscode-editorBracketHighlight-foreground1: #ffd700;
+--vscode-editorBracketHighlight-foreground2: #da70d6;
+--vscode-editorBracketHighlight-foreground3: #179fff;
+--vscode-editorBracketHighlight-foreground4: rgba(0, 0, 0, 0);
+--vscode-editorBracketHighlight-foreground5: rgba(0, 0, 0, 0);
+--vscode-editorBracketHighlight-foreground6: rgba(0, 0, 0, 0);
+--vscode-editorBracketHighlight-unexpectedBracket\.foreground: rgba(255, 18, 18, 0.8);
+--vscode-editorBracketPairGuide-background1: rgba(0, 0, 0, 0);
+--vscode-editorBracketPairGuide-background2: rgba(0, 0, 0, 0);
+--vscode-editorBracketPairGuide-background3: rgba(0, 0, 0, 0);
+--vscode-editorBracketPairGuide-background4: rgba(0, 0, 0, 0);
+--vscode-editorBracketPairGuide-background5: rgba(0, 0, 0, 0);
+--vscode-editorBracketPairGuide-background6: rgba(0, 0, 0, 0);
+--vscode-editorBracketPairGuide-activeBackground1: rgba(0, 0, 0, 0);
+--vscode-editorBracketPairGuide-activeBackground2: rgba(0, 0, 0, 0);
+--vscode-editorBracketPairGuide-activeBackground3: rgba(0, 0, 0, 0);
+--vscode-editorBracketPairGuide-activeBackground4: rgba(0, 0, 0, 0);
+--vscode-editorBracketPairGuide-activeBackground5: rgba(0, 0, 0, 0);
+--vscode-editorBracketPairGuide-activeBackground6: rgba(0, 0, 0, 0);
+--vscode-editorUnicodeHighlight-border: #cca700;
+--vscode-diffEditor-move\.border: rgba(139, 139, 139, 0.61);
+--vscode-diffEditor-moveActive\.border: #ffa500;
+--vscode-diffEditor-unchangedRegionShadow: #000000;
+--vscode-editorOverviewRuler-bracketMatchForeground: #a0a0a0;
+--vscode-actionBar-toggledBackground: rgba(0, 127, 212, 0.4);
+--vscode-symbolIcon-arrayForeground: #cccccc;
+--vscode-symbolIcon-booleanForeground: #cccccc;
+--vscode-symbolIcon-classForeground: #ee9d28;
+--vscode-symbolIcon-colorForeground: #cccccc;
+--vscode-symbolIcon-constantForeground: #cccccc;
+--vscode-symbolIcon-constructorForeground: #b180d7;
+--vscode-symbolIcon-enumeratorForeground: #ee9d28;
+--vscode-symbolIcon-enumeratorMemberForeground: #75beff;
+--vscode-symbolIcon-eventForeground: #ee9d28;
+--vscode-symbolIcon-fieldForeground: #75beff;
+--vscode-symbolIcon-fileForeground: #cccccc;
+--vscode-symbolIcon-folderForeground: #cccccc;
+--vscode-symbolIcon-functionForeground: #b180d7;
+--vscode-symbolIcon-interfaceForeground: #75beff;
+--vscode-symbolIcon-keyForeground: #cccccc;
+--vscode-symbolIcon-keywordForeground: #cccccc;
+--vscode-symbolIcon-methodForeground: #b180d7;
+--vscode-symbolIcon-moduleForeground: #cccccc;
+--vscode-symbolIcon-namespaceForeground: #cccccc;
+--vscode-symbolIcon-nullForeground: #cccccc;
+--vscode-symbolIcon-numberForeground: #cccccc;
+--vscode-symbolIcon-objectForeground: #cccccc;
+--vscode-symbolIcon-operatorForeground: #cccccc;
+--vscode-symbolIcon-packageForeground: #cccccc;
+--vscode-symbolIcon-propertyForeground: #cccccc;
+--vscode-symbolIcon-referenceForeground: #cccccc;
+--vscode-symbolIcon-snippetForeground: #cccccc;
+--vscode-symbolIcon-stringForeground: #cccccc;
+--vscode-symbolIcon-structForeground: #cccccc;
+--vscode-symbolIcon-textForeground: #cccccc;
+--vscode-symbolIcon-typeParameterForeground: #cccccc;
+--vscode-symbolIcon-unitForeground: #cccccc;
+--vscode-symbolIcon-variableForeground: #75beff;
+--vscode-peekViewTitle-background: #252526;
+--vscode-peekViewTitleLabel-foreground: #ffffff;
+--vscode-peekViewTitleDescription-foreground: rgba(204, 204, 204, 0.7);
+--vscode-peekView-border: #3794ff;
+--vscode-peekViewResult-background: #252526;
+--vscode-peekViewResult-lineForeground: #bbbbbb;
+--vscode-peekViewResult-fileForeground: #ffffff;
+--vscode-peekViewResult-selectionBackground: rgba(51, 153, 255, 0.2);
+--vscode-peekViewResult-selectionForeground: #ffffff;
+--vscode-peekViewEditor-background: #001f33;
+--vscode-peekViewEditorGutter-background: #001f33;
+--vscode-peekViewEditorStickyScroll-background: #001f33;
+--vscode-peekViewResult-matchHighlightBackground: rgba(234, 92, 0, 0.3);
+--vscode-peekViewEditor-matchHighlightBackground: rgba(255, 143, 0, 0.6);
+--vscode-editor-foldBackground: rgba(38, 79, 120, 0.3);
+--vscode-editor-foldPlaceholderForeground: #808080;
+--vscode-editorGutter-foldingControlForeground: #c5c5c5;
+--vscode-editorSuggestWidget-background: #252526;
+--vscode-editorSuggestWidget-border: #454545;
+--vscode-editorSuggestWidget-foreground: #d4d4d4;
+--vscode-editorSuggestWidget-selectedForeground: #ffffff;
+--vscode-editorSuggestWidget-selectedIconForeground: #ffffff;
+--vscode-editorSuggestWidget-selectedBackground: #04395e;
+--vscode-editorSuggestWidget-highlightForeground: #2aaaff;
+--vscode-editorSuggestWidget-focusHighlightForeground: #2aaaff;
+--vscode-editorSuggestWidgetStatus-foreground: rgba(212, 212, 212, 0.5);
+--vscode-inlineEdit-originalBackground: rgba(255, 0, 0, 0.04);
+--vscode-inlineEdit-modifiedBackground: rgba(156, 204, 44, 0.06);
+--vscode-inlineEdit-originalChangedLineBackground: rgba(255, 0, 0, 0.16);
+--vscode-inlineEdit-originalChangedTextBackground: rgba(255, 0, 0, 0.16);
+--vscode-inlineEdit-modifiedChangedLineBackground: rgba(155, 185, 85, 0.14);
+--vscode-inlineEdit-modifiedChangedTextBackground: rgba(156, 204, 44, 0.14);
+--vscode-inlineEdit-gutterIndicator\.primaryForeground: #ffffff;
+--vscode-inlineEdit-gutterIndicator\.primaryBorder: #0e639c;
+--vscode-inlineEdit-gutterIndicator\.primaryBackground: rgba(14, 99, 156, 0.4);
+--vscode-inlineEdit-gutterIndicator\.secondaryForeground: #ffffff;
+--vscode-inlineEdit-gutterIndicator\.secondaryBorder: #3a3d41;
+--vscode-inlineEdit-gutterIndicator\.secondaryBackground: #3a3d41;
+--vscode-inlineEdit-gutterIndicator\.successfulForeground: #ffffff;
+--vscode-inlineEdit-gutterIndicator\.successfulBorder: #0e639c;
+--vscode-inlineEdit-gutterIndicator\.successfulBackground: #0e639c;
+--vscode-inlineEdit-gutterIndicator\.background: rgba(45, 45, 45, 0.5);
+--vscode-inlineEdit-originalBorder: rgba(255, 0, 0, 0.2);
+--vscode-inlineEdit-modifiedBorder: rgba(156, 204, 44, 0.2);
+--vscode-inlineEdit-tabWillAcceptModifiedBorder: rgba(156, 204, 44, 0.2);
+--vscode-inlineEdit-tabWillAcceptOriginalBorder: rgba(255, 0, 0, 0.2);
+--vscode-editorMarkerNavigationError-background: #f14c4c;
+--vscode-editorMarkerNavigationError-headerBackground: rgba(241, 76, 76, 0.1);
+--vscode-editorMarkerNavigationWarning-background: #cca700;
+--vscode-editorMarkerNavigationWarning-headerBackground: rgba(204, 167, 0, 0.1);
+--vscode-editorMarkerNavigationInfo-background: #3794ff;
+--vscode-editorMarkerNavigationInfo-headerBackground: rgba(55, 148, 255, 0.1);
+--vscode-editorMarkerNavigation-background: #1e1e1e;
+--vscode-editor-linkedEditingBackground: rgba(255, 0, 0, 0.3);
+--vscode-editor-wordHighlightBackground: rgba(87, 87, 87, 0.72);
+--vscode-editor-wordHighlightStrongBackground: rgba(0, 73, 114, 0.72);
+--vscode-editor-wordHighlightTextBackground: rgba(87, 87, 87, 0.72);
+--vscode-editorOverviewRuler-wordHighlightForeground: rgba(160, 160, 160, 0.8);
+--vscode-editorOverviewRuler-wordHighlightStrongForeground: rgba(192, 160, 192, 0.8);
+--vscode-editorOverviewRuler-wordHighlightTextForeground: rgba(160, 160, 160, 0.8);
+--vscode-editorHoverWidget-highlightForeground: #2aaaff;
+--vscode-editor-placeholder\.foreground: rgba(255, 255, 255, 0.34);
+--vscode-tab-activeBackground: #1e1e1e;
+--vscode-tab-unfocusedActiveBackground: #1e1e1e;
+--vscode-tab-inactiveBackground: #2d2d2d;
+--vscode-tab-unfocusedInactiveBackground: #2d2d2d;
+--vscode-tab-activeForeground: #ffffff;
+--vscode-tab-inactiveForeground: rgba(255, 255, 255, 0.5);
+--vscode-tab-unfocusedActiveForeground: rgba(255, 255, 255, 0.5);
+--vscode-tab-unfocusedInactiveForeground: rgba(255, 255, 255, 0.25);
+--vscode-tab-border: #252526;
+--vscode-tab-lastPinnedBorder: rgba(204, 204, 204, 0.2);
+--vscode-tab-selectedBackground: #1e1e1e;
+--vscode-tab-selectedForeground: #ffffff;
+--vscode-tab-dragAndDropBorder: #ffffff;
+--vscode-tab-activeModifiedBorder: #3399cc;
+--vscode-tab-inactiveModifiedBorder: rgba(51, 153, 204, 0.5);
+--vscode-tab-unfocusedActiveModifiedBorder: rgba(51, 153, 204, 0.5);
+--vscode-tab-unfocusedInactiveModifiedBorder: rgba(51, 153, 204, 0.25);
+--vscode-editorPane-background: #1e1e1e;
+--vscode-editorGroupHeader-tabsBackground: #252526;
+--vscode-editorGroupHeader-noTabsBackground: #1e1e1e;
+--vscode-editorGroup-border: #444444;
+--vscode-editorGroup-dropBackground: rgba(83, 89, 93, 0.5);
+--vscode-editorGroup-dropIntoPromptForeground: #cccccc;
+--vscode-editorGroup-dropIntoPromptBackground: #252526;
+--vscode-sideBySideEditor-horizontalBorder: #444444;
+--vscode-sideBySideEditor-verticalBorder: #444444;
+--vscode-banner-background: #04395e;
+--vscode-banner-foreground: #ffffff;
+--vscode-banner-iconForeground: #3794ff;
+--vscode-statusBar-foreground: #ffffff;
+--vscode-statusBar-noFolderForeground: #ffffff;
+--vscode-statusBar-background: #007acc;
+--vscode-statusBar-noFolderBackground: #68217a;
+--vscode-statusBar-focusBorder: #ffffff;
+--vscode-statusBarItem-activeBackground: rgba(255, 255, 255, 0.18);
+--vscode-statusBarItem-focusBorder: #ffffff;
+--vscode-statusBarItem-hoverBackground: rgba(255, 255, 255, 0.12);
+--vscode-statusBarItem-hoverForeground: #ffffff;
+--vscode-statusBarItem-compactHoverBackground: rgba(255, 255, 255, 0.2);
+--vscode-statusBarItem-prominentForeground: #ffffff;
+--vscode-statusBarItem-prominentBackground: rgba(0, 0, 0, 0.5);
+--vscode-statusBarItem-prominentHoverForeground: #ffffff;
+--vscode-statusBarItem-prominentHoverBackground: rgba(255, 255, 255, 0.12);
+--vscode-statusBarItem-errorBackground: #c72e0f;
+--vscode-statusBarItem-errorForeground: #ffffff;
+--vscode-statusBarItem-errorHoverForeground: #ffffff;
+--vscode-statusBarItem-errorHoverBackground: rgba(255, 255, 255, 0.12);
+--vscode-statusBarItem-warningBackground: #7a6400;
+--vscode-statusBarItem-warningForeground: #ffffff;
+--vscode-statusBarItem-warningHoverForeground: #ffffff;
+--vscode-statusBarItem-warningHoverBackground: rgba(255, 255, 255, 0.12);
+--vscode-activityBar-background: #333333;
+--vscode-activityBar-foreground: #ffffff;
+--vscode-activityBar-inactiveForeground: rgba(255, 255, 255, 0.4);
+--vscode-activityBar-activeBorder: #ffffff;
+--vscode-activityBar-dropBorder: #ffffff;
+--vscode-activityBarBadge-background: #007acc;
+--vscode-activityBarBadge-foreground: #ffffff;
+--vscode-activityBarTop-foreground: #e7e7e7;
+--vscode-activityBarTop-activeBorder: #e7e7e7;
+--vscode-activityBarTop-inactiveForeground: rgba(231, 231, 231, 0.6);
+--vscode-activityBarTop-dropBorder: #e7e7e7;
+--vscode-panel-background: #1e1e1e;
+--vscode-panel-border: rgba(128, 128, 128, 0.35);
+--vscode-panelTitle-activeForeground: #e7e7e7;
+--vscode-panelTitle-inactiveForeground: rgba(231, 231, 231, 0.6);
+--vscode-panelTitle-activeBorder: #e7e7e7;
+--vscode-panelTitleBadge-background: #007acc;
+--vscode-panelTitleBadge-foreground: #ffffff;
+--vscode-panel-dropBorder: #e7e7e7;
+--vscode-panelSection-dropBackground: rgba(83, 89, 93, 0.5);
+--vscode-panelSectionHeader-background: rgba(128, 128, 128, 0.2);
+--vscode-panelSection-border: rgba(128, 128, 128, 0.35);
+--vscode-panelStickyScroll-background: #1e1e1e;
+--vscode-panelStickyScroll-shadow: #000000;
+--vscode-profileBadge-background: #4d4d4d;
+--vscode-profileBadge-foreground: #ffffff;
+--vscode-statusBarItem-remoteBackground: #16825d;
+--vscode-statusBarItem-remoteForeground: #ffffff;
+--vscode-statusBarItem-remoteHoverForeground: #ffffff;
+--vscode-statusBarItem-remoteHoverBackground: rgba(255, 255, 255, 0.12);
+--vscode-statusBarItem-offlineBackground: #6c1717;
+--vscode-statusBarItem-offlineForeground: #ffffff;
+--vscode-statusBarItem-offlineHoverForeground: #ffffff;
+--vscode-statusBarItem-offlineHoverBackground: rgba(255, 255, 255, 0.12);
+--vscode-extensionBadge-remoteBackground: #007acc;
+--vscode-extensionBadge-remoteForeground: #ffffff;
+--vscode-sideBar-background: #252526;
+--vscode-sideBarTitle-background: #252526;
+--vscode-sideBarTitle-foreground: #bbbbbb;
+--vscode-sideBar-dropBackground: rgba(83, 89, 93, 0.5);
+--vscode-sideBarSectionHeader-background: rgba(0, 0, 0, 0);
+--vscode-sideBarSectionHeader-border: rgba(204, 204, 204, 0.2);
+--vscode-sideBarActivityBarTop-border: rgba(204, 204, 204, 0.2);
+--vscode-sideBarStickyScroll-background: #252526;
+--vscode-sideBarStickyScroll-shadow: #000000;
+--vscode-titleBar-activeForeground: #cccccc;
+--vscode-titleBar-inactiveForeground: rgba(204, 204, 204, 0.6);
+--vscode-titleBar-activeBackground: #3c3c3c;
+--vscode-titleBar-inactiveBackground: rgba(60, 60, 60, 0.6);
+--vscode-menubar-selectionForeground: #cccccc;
+--vscode-menubar-selectionBackground: rgba(90, 93, 94, 0.31);
+--vscode-commandCenter-foreground: #cccccc;
+--vscode-commandCenter-activeForeground: #cccccc;
+--vscode-commandCenter-inactiveForeground: rgba(204, 204, 204, 0.6);
+--vscode-commandCenter-background: rgba(255, 255, 255, 0.05);
+--vscode-commandCenter-activeBackground: rgba(255, 255, 255, 0.08);
+--vscode-commandCenter-border: rgba(204, 204, 204, 0.2);
+--vscode-commandCenter-activeBorder: rgba(204, 204, 204, 0.3);
+--vscode-commandCenter-inactiveBorder: rgba(204, 204, 204, 0.15);
+--vscode-notifications-foreground: #cccccc;
+--vscode-notifications-background: #252526;
+--vscode-notificationLink-foreground: #3794ff;
+--vscode-notificationCenterHeader-background: #303031;
+--vscode-notifications-border: #303031;
+--vscode-notificationsErrorIcon-foreground: #f14c4c;
+--vscode-notificationsWarningIcon-foreground: #cca700;
+--vscode-notificationsInfoIcon-foreground: #3794ff;
+--vscode-debugToolBar-background: #333333;
+--vscode-debugIcon-startForeground: #89d185;
+--vscode-inlineChat-foreground: #cccccc;
+--vscode-inlineChat-background: #252526;
+--vscode-inlineChat-border: #454545;
+--vscode-inlineChat-shadow: rgba(0, 0, 0, 0.36);
+--vscode-inlineChatInput-border: #454545;
+--vscode-inlineChatInput-focusBorder: #007fd4;
+--vscode-inlineChatInput-placeholderForeground: #a6a6a6;
+--vscode-inlineChatInput-background: #3c3c3c;
+--vscode-inlineChatDiff-inserted: rgba(156, 204, 44, 0.1);
+--vscode-editorOverviewRuler-inlineChatInserted: rgba(156, 204, 44, 0.12);
+--vscode-editorMinimap-inlineChatInserted: rgba(156, 204, 44, 0.12);
+--vscode-inlineChatDiff-removed: rgba(255, 0, 0, 0.1);
+--vscode-editorOverviewRuler-inlineChatRemoved: rgba(255, 0, 0, 0.12);
+--vscode-extensionButton-background: #0e639c;
+--vscode-extensionButton-foreground: #ffffff;
+--vscode-extensionButton-hoverBackground: #1177bb;
+--vscode-extensionButton-separator: rgba(255, 255, 255, 0.4);
+--vscode-extensionButton-prominentBackground: #0e639c;
+--vscode-extensionButton-prominentForeground: #ffffff;
+--vscode-extensionButton-prominentHoverBackground: #1177bb;
+--vscode-extensionIcon-verifiedForeground: #3794ff;
+--vscode-editorWatermark-foreground: rgba(212, 212, 212, 0.6);
+--vscode-extensionIcon-starForeground: #ff8e00;
+--vscode-extensionIcon-preReleaseForeground: #1d9271;
+--vscode-extensionIcon-sponsorForeground: #d758b3;
+--vscode-extensionIcon-privateForeground: rgba(255, 255, 255, 0.38);
+--vscode-chat-requestBorder: rgba(255, 255, 255, 0.1);
+--vscode-chat-requestBackground: rgba(30, 30, 30, 0.62);
+--vscode-chat-slashCommandBackground: rgba(52, 65, 75, 0.56);
+--vscode-chat-slashCommandForeground: #40a6ff;
+--vscode-chat-avatarBackground: #1f1f1f;
+--vscode-chat-avatarForeground: #cccccc;
+--vscode-chat-editedFileForeground: #e2c08d;
+--vscode-commentsView-resolvedIcon: rgba(204, 204, 204, 0.5);
+--vscode-commentsView-unresolvedIcon: #007fd4;
+--vscode-editorCommentsWidget-replyInputBackground: #252526;
+--vscode-editorCommentsWidget-resolvedBorder: rgba(204, 204, 204, 0.5);
+--vscode-editorCommentsWidget-unresolvedBorder: #007fd4;
+--vscode-editorCommentsWidget-rangeBackground: rgba(0, 127, 212, 0.1);
+--vscode-editorCommentsWidget-rangeActiveBackground: rgba(0, 127, 212, 0.1);
+--vscode-notebook-cellBorderColor: #37373d;
+--vscode-notebook-focusedEditorBorder: #007fd4;
+--vscode-notebookStatusSuccessIcon-foreground: #89d185;
+--vscode-notebookEditorOverviewRuler-runningCellForeground: #89d185;
+--vscode-notebookStatusErrorIcon-foreground: #f48771;
+--vscode-notebookStatusRunningIcon-foreground: #cccccc;
+--vscode-notebook-cellToolbarSeparator: rgba(128, 128, 128, 0.35);
+--vscode-notebook-selectedCellBackground: #37373d;
+--vscode-notebook-selectedCellBorder: #37373d;
+--vscode-notebook-focusedCellBorder: #007fd4;
+--vscode-notebook-inactiveFocusedCellBorder: #37373d;
+--vscode-notebook-cellStatusBarItemHoverBackground: rgba(255, 255, 255, 0.15);
+--vscode-notebook-cellInsertionIndicator: #007fd4;
+--vscode-notebookScrollbarSlider-background: rgba(121, 121, 121, 0.4);
+--vscode-notebookScrollbarSlider-hoverBackground: rgba(100, 100, 100, 0.7);
+--vscode-notebookScrollbarSlider-activeBackground: rgba(191, 191, 191, 0.4);
+--vscode-notebook-symbolHighlightBackground: rgba(255, 255, 255, 0.04);
+--vscode-notebook-cellEditorBackground: #252526;
+--vscode-notebook-editorBackground: #1e1e1e;
+--vscode-editorGutter-modifiedBackground: #1b81a8;
+--vscode-editorGutter-modifiedSecondaryBackground: #0d4054;
+--vscode-editorGutter-addedBackground: #487e02;
+--vscode-editorGutter-addedSecondaryBackground: #243f01;
+--vscode-editorGutter-deletedBackground: #f14c4c;
+--vscode-editorGutter-deletedSecondaryBackground: #b00e0e;
+--vscode-minimapGutter-modifiedBackground: #1b81a8;
+--vscode-minimapGutter-addedBackground: #487e02;
+--vscode-minimapGutter-deletedBackground: #f14c4c;
+--vscode-editorOverviewRuler-modifiedForeground: rgba(27, 129, 168, 0.6);
+--vscode-editorOverviewRuler-addedForeground: rgba(72, 126, 2, 0.6);
+--vscode-editorOverviewRuler-deletedForeground: rgba(241, 76, 76, 0.6);
+--vscode-editorGutter-itemGlyphForeground: #d4d4d4;
+--vscode-editorGutter-itemBackground: #37373d;
+--vscode-terminal-foreground: #cccccc;
+--vscode-terminal-selectionBackground: #264f78;
+--vscode-terminal-inactiveSelectionBackground: #3a3d41;
+--vscode-terminalCommandDecoration-defaultBackground: rgba(255, 255, 255, 0.25);
+--vscode-terminalCommandDecoration-successBackground: #1b81a8;
+--vscode-terminalCommandDecoration-errorBackground: #f14c4c;
+--vscode-terminalOverviewRuler-cursorForeground: rgba(160, 160, 160, 0.8);
+--vscode-terminal-border: rgba(128, 128, 128, 0.35);
+--vscode-terminalOverviewRuler-border: rgba(127, 127, 127, 0.3);
+--vscode-terminal-findMatchBackground: #515c6a;
+--vscode-terminal-hoverHighlightBackground: rgba(38, 79, 120, 0.13);
+--vscode-terminal-findMatchHighlightBackground: rgba(234, 92, 0, 0.33);
+--vscode-terminalOverviewRuler-findMatchForeground: rgba(209, 134, 22, 0.49);
+--vscode-terminal-dropBackground: rgba(83, 89, 93, 0.5);
+--vscode-terminal-initialHintForeground: rgba(255, 255, 255, 0.34);
+--vscode-scmGraph-historyItemRefColor: #3794ff;
+--vscode-scmGraph-historyItemRemoteRefColor: #b180d7;
+--vscode-scmGraph-historyItemBaseRefColor: #ea5c00;
+--vscode-scmGraph-historyItemHoverDefaultLabelForeground: #cccccc;
+--vscode-scmGraph-historyItemHoverDefaultLabelBackground: #4d4d4d;
+--vscode-scmGraph-historyItemHoverLabelForeground: #ffffff;
+--vscode-scmGraph-historyItemHoverAdditionsForeground: #81b88b;
+--vscode-scmGraph-historyItemHoverDeletionsForeground: #c74e39;
+--vscode-scmGraph-foreground1: #ffb000;
+--vscode-scmGraph-foreground2: #dc267f;
+--vscode-scmGraph-foreground3: #994f00;
+--vscode-scmGraph-foreground4: #40b0a6;
+--vscode-scmGraph-foreground5: #b66dff;
+--vscode-editorGutter-commentRangeForeground: #37373d;
+--vscode-editorOverviewRuler-commentForeground: #37373d;
+--vscode-editorOverviewRuler-commentUnresolvedForeground: #37373d;
+--vscode-editorGutter-commentGlyphForeground: #d4d4d4;
+--vscode-editorGutter-commentUnresolvedGlyphForeground: #d4d4d4;
+--vscode-ports-iconRunningProcessForeground: #369432;
+--vscode-settings-headerForeground: #e7e7e7;
+--vscode-settings-settingsHeaderHoverForeground: rgba(231, 231, 231, 0.7);
+--vscode-settings-modifiedItemIndicator: #0c7d9d;
+--vscode-settings-headerBorder: rgba(128, 128, 128, 0.35);
+--vscode-settings-sashBorder: rgba(128, 128, 128, 0.35);
+--vscode-settings-dropdownBackground: #3c3c3c;
+--vscode-settings-dropdownForeground: #f0f0f0;
+--vscode-settings-dropdownBorder: #3c3c3c;
+--vscode-settings-dropdownListBorder: #454545;
+--vscode-settings-checkboxBackground: #3c3c3c;
+--vscode-settings-checkboxForeground: #f0f0f0;
+--vscode-settings-checkboxBorder: #3c3c3c;
+--vscode-settings-textInputBackground: #3c3c3c;
+--vscode-settings-textInputForeground: #cccccc;
+--vscode-settings-numberInputBackground: #3c3c3c;
+--vscode-settings-numberInputForeground: #cccccc;
+--vscode-settings-focusedRowBackground: rgba(42, 45, 46, 0.6);
+--vscode-settings-rowHoverBackground: rgba(42, 45, 46, 0.3);
+--vscode-settings-focusedRowBorder: #007fd4;
+--vscode-keybindingTable-headerBackground: rgba(204, 204, 204, 0.04);
+--vscode-keybindingTable-rowsBackground: rgba(204, 204, 204, 0.04);
+--vscode-debugExceptionWidget-border: #a31515;
+--vscode-debugExceptionWidget-background: #420b0d;
+--vscode-editor-inlineValuesForeground: rgba(255, 255, 255, 0.5);
+--vscode-editor-inlineValuesBackground: rgba(255, 200, 0, 0.2);
+--vscode-debugIcon-breakpointForeground: #e51400;
+--vscode-debugIcon-breakpointDisabledForeground: #848484;
+--vscode-debugIcon-breakpointUnverifiedForeground: #848484;
+--vscode-debugIcon-breakpointCurrentStackframeForeground: #ffcc00;
+--vscode-debugIcon-breakpointStackframeForeground: #89d185;
+--vscode-editor-stackFrameHighlightBackground: rgba(255, 255, 0, 0.2);
+--vscode-editor-focusedStackFrameHighlightBackground: rgba(122, 189, 122, 0.3);
+--vscode-multiDiffEditor-headerBackground: #262626;
+--vscode-multiDiffEditor-background: #1e1e1e;
+--vscode-multiDiffEditor-border: rgba(204, 204, 204, 0.2);
+--vscode-prompt-frontMatter\.background: #181818;
+--vscode-prompt-frontMatter\.inactiveBackground: #1b1b1b;
+--vscode-minimap-chatEditHighlight: rgba(30, 30, 30, 0.6);
+--vscode-gauge-background: #007acc;
+--vscode-gauge-foreground: rgba(0, 122, 204, 0.3);
+--vscode-gauge-warningBackground: #b89500;
+--vscode-gauge-warningForeground: rgba(184, 149, 0, 0.3);
+--vscode-gauge-errorBackground: #be1100;
+--vscode-gauge-errorForeground: rgba(190, 17, 0, 0.3);
+--vscode-interactive-activeCodeBorder: #007acc;
+--vscode-interactive-inactiveCodeBorder: #37373d;
+--vscode-testing-iconFailed: #f14c4c;
+--vscode-testing-iconErrored: #f14c4c;
+--vscode-testing-iconPassed: #73c991;
+--vscode-testing-runAction: #73c991;
+--vscode-testing-iconQueued: #cca700;
+--vscode-testing-iconUnset: #848484;
+--vscode-testing-iconSkipped: #848484;
+--vscode-testing-peekBorder: #f14c4c;
+--vscode-testing-messagePeekBorder: #3794ff;
+--vscode-testing-peekHeaderBackground: rgba(241, 76, 76, 0.1);
+--vscode-testing-messagePeekHeaderBackground: rgba(55, 148, 255, 0.1);
+--vscode-testing-coveredBackground: rgba(156, 204, 44, 0.2);
+--vscode-testing-coveredBorder: rgba(156, 204, 44, 0.15);
+--vscode-testing-coveredGutterBackground: rgba(156, 204, 44, 0.12);
+--vscode-testing-uncoveredBranchBackground: #781212;
+--vscode-testing-uncoveredBackground: rgba(255, 0, 0, 0.2);
+--vscode-testing-uncoveredBorder: rgba(255, 0, 0, 0.15);
+--vscode-testing-uncoveredGutterBackground: rgba(255, 0, 0, 0.3);
+--vscode-testing-coverCountBadgeBackground: #4d4d4d;
+--vscode-testing-coverCountBadgeForeground: #ffffff;
+--vscode-testing-message\.error\.badgeBackground: #f14c4c;
+--vscode-testing-message\.error\.badgeBorder: #f14c4c;
+--vscode-testing-message\.error\.badgeForeground: #000000;
+--vscode-testing-message\.info\.decorationForeground: rgba(212, 212, 212, 0.5);
+--vscode-testing-iconErrored\.retired: rgba(241, 76, 76, 0.7);
+--vscode-testing-iconFailed\.retired: rgba(241, 76, 76, 0.7);
+--vscode-testing-iconPassed\.retired: rgba(115, 201, 145, 0.7);
+--vscode-testing-iconQueued\.retired: rgba(204, 167, 0, 0.7);
+--vscode-testing-iconUnset\.retired: rgba(132, 132, 132, 0.7);
+--vscode-testing-iconSkipped\.retired: rgba(132, 132, 132, 0.7);
+--vscode-statusBar-debuggingBackground: #cc6633;
+--vscode-statusBar-debuggingForeground: #ffffff;
+--vscode-commandCenter-debuggingBackground: rgba(204, 102, 51, 0.26);
+--vscode-debugTokenExpression-name: #c586c0;
+--vscode-debugTokenExpression-type: #4a90e2;
+--vscode-debugTokenExpression-value: rgba(204, 204, 204, 0.6);
+--vscode-debugTokenExpression-string: #ce9178;
+--vscode-debugTokenExpression-boolean: #4e94ce;
+--vscode-debugTokenExpression-number: #b5cea8;
+--vscode-debugTokenExpression-error: #f48771;
+--vscode-debugView-exceptionLabelForeground: #cccccc;
+--vscode-debugView-exceptionLabelBackground: #6c2022;
+--vscode-debugView-stateLabelForeground: #cccccc;
+--vscode-debugView-stateLabelBackground: rgba(136, 136, 136, 0.27);
+--vscode-debugView-valueChangedHighlight: #569cd6;
+--vscode-debugConsole-infoForeground: #3794ff;
+--vscode-debugConsole-warningForeground: #cca700;
+--vscode-debugConsole-errorForeground: #f48771;
+--vscode-debugConsole-sourceForeground: #cccccc;
+--vscode-debugConsoleInputIcon-foreground: #cccccc;
+--vscode-debugIcon-pauseForeground: #75beff;
+--vscode-debugIcon-stopForeground: #f48771;
+--vscode-debugIcon-disconnectForeground: #f48771;
+--vscode-debugIcon-restartForeground: #89d185;
+--vscode-debugIcon-stepOverForeground: #75beff;
+--vscode-debugIcon-stepIntoForeground: #75beff;
+--vscode-debugIcon-stepOutForeground: #75beff;
+--vscode-debugIcon-continueForeground: #75beff;
+--vscode-debugIcon-stepBackForeground: #75beff;
+--vscode-mergeEditor-change\.background: rgba(155, 185, 85, 0.2);
+--vscode-mergeEditor-change\.word\.background: rgba(156, 204, 44, 0.2);
+--vscode-mergeEditor-changeBase\.background: #4b1818;
+--vscode-mergeEditor-changeBase\.word\.background: #6f1313;
+--vscode-mergeEditor-conflict\.unhandledUnfocused\.border: rgba(255, 166, 0, 0.48);
+--vscode-mergeEditor-conflict\.unhandledFocused\.border: #ffa600;
+--vscode-mergeEditor-conflict\.handledUnfocused\.border: rgba(134, 134, 134, 0.29);
+--vscode-mergeEditor-conflict\.handledFocused\.border: rgba(193, 193, 193, 0.8);
+--vscode-mergeEditor-conflict\.handled\.minimapOverViewRuler: rgba(173, 172, 168, 0.93);
+--vscode-mergeEditor-conflict\.unhandled\.minimapOverViewRuler: #fcba03;
+--vscode-mergeEditor-conflictingLines\.background: rgba(255, 234, 0, 0.28);
+--vscode-mergeEditor-conflict\.input1\.background: rgba(64, 200, 174, 0.2);
+--vscode-mergeEditor-conflict\.input2\.background: rgba(64, 166, 255, 0.2);
+--vscode-terminal-ansiBlack: #000000;
+--vscode-terminal-ansiRed: #cd3131;
+--vscode-terminal-ansiGreen: #0dbc79;
+--vscode-terminal-ansiYellow: #e5e510;
+--vscode-terminal-ansiBlue: #2472c8;
+--vscode-terminal-ansiMagenta: #bc3fbc;
+--vscode-terminal-ansiCyan: #11a8cd;
+--vscode-terminal-ansiWhite: #e5e5e5;
+--vscode-terminal-ansiBrightBlack: #666666;
+--vscode-terminal-ansiBrightRed: #f14c4c;
+--vscode-terminal-ansiBrightGreen: #23d18b;
+--vscode-terminal-ansiBrightYellow: #f5f543;
+--vscode-terminal-ansiBrightBlue: #3b8eea;
+--vscode-terminal-ansiBrightMagenta: #d670d6;
+--vscode-terminal-ansiBrightCyan: #29b8db;
+--vscode-terminal-ansiBrightWhite: #e5e5e5;
+--vscode-simpleFindWidget-sashBorder: #454545;
+--vscode-terminalStickyScrollHover-background: #2a2d2e;
+--vscode-terminalCommandGuide-foreground: #37373d;
+--vscode-terminalSymbolIcon-flagForeground: #ee9d28;
+--vscode-terminalSymbolIcon-aliasForeground: #b180d7;
+--vscode-terminalSymbolIcon-optionValueForeground: #75beff;
+--vscode-terminalSymbolIcon-methodForeground: #b180d7;
+--vscode-terminalSymbolIcon-argumentForeground: #75beff;
+--vscode-terminalSymbolIcon-optionForeground: #ee9d28;
+--vscode-terminalSymbolIcon-fileForeground: #cccccc;
+--vscode-terminalSymbolIcon-folderForeground: #cccccc;
+--vscode-welcomePage-tileBackground: #252526;
+--vscode-welcomePage-tileHoverBackground: #2c2c2d;
+--vscode-welcomePage-tileBorder: rgba(255, 255, 255, 0.1);
+--vscode-welcomePage-progress\.background: #3c3c3c;
+--vscode-welcomePage-progress\.foreground: #3794ff;
+--vscode-walkthrough-stepTitle\.foreground: #ffffff;
+--vscode-walkThrough-embeddedEditorBackground: rgba(0, 0, 0, 0.4);
+--vscode-profiles-sashBorder: rgba(128, 128, 128, 0.35);
+--vscode-gitDecoration-addedResourceForeground: #81b88b;
+--vscode-gitDecoration-modifiedResourceForeground: #e2c08d;
+--vscode-gitDecoration-deletedResourceForeground: #c74e39;
+--vscode-gitDecoration-renamedResourceForeground: #73c991;
+--vscode-gitDecoration-untrackedResourceForeground: #73c991;
+--vscode-gitDecoration-ignoredResourceForeground: #8c8c8c;
+--vscode-gitDecoration-stageModifiedResourceForeground: #e2c08d;
+--vscode-gitDecoration-stageDeletedResourceForeground: #c74e39;
+--vscode-gitDecoration-conflictingResourceForeground: #e4676b;
+--vscode-gitDecoration-submoduleResourceForeground: #8db9e2;
+--vscode-git-blame\.editorDecorationForeground: #969696;
diff --git a/jetbrains/plugin/src/main/resources/themes/vscode-theme-light.css b/jetbrains/plugin/src/main/resources/themes/vscode-theme-light.css
new file mode 100644
index 000000000..d666b6998
--- /dev/null
+++ b/jetbrains/plugin/src/main/resources/themes/vscode-theme-light.css
@@ -0,0 +1,753 @@
+--vscode-font-family: -apple-system, BlinkMacSystemFont, sans-serif;
+--vscode-font-weight: normal;
+--vscode-font-size: 13px;
+--vscode-editor-font-family: Menlo, Monaco, "Courier New", monospace;
+--vscode-editor-font-weight: normal;
+--vscode-editor-font-size: 16px;
+--text-link-decoration: none;
+--vscode-foreground: #616161;
+--vscode-disabledForeground: rgba(97, 97, 97, 0.5);
+--vscode-errorForeground: #a1260d;
+--vscode-descriptionForeground: #717171;
+--vscode-icon-foreground: #424242;
+--vscode-focusBorder: #0090f1;
+--vscode-textLink-foreground: #006ab1;
+--vscode-textLink-activeForeground: #006ab1;
+--vscode-textSeparator-foreground: rgba(0, 0, 0, 0.18);
+--vscode-textPreformat-foreground: #a31515;
+--vscode-textPreformat-background: rgba(0, 0, 0, 0.1);
+--vscode-textBlockQuote-background: #f2f2f2;
+--vscode-textBlockQuote-border: rgba(0, 122, 204, 0.5);
+--vscode-textCodeBlock-background: rgba(220, 220, 220, 0.4);
+--vscode-sash-hoverBorder: #0090f1;
+--vscode-badge-background: #c4c4c4;
+--vscode-badge-foreground: #333333;
+--vscode-activityWarningBadge-foreground: #ffffff;
+--vscode-activityWarningBadge-background: #bf8803;
+--vscode-activityErrorBadge-foreground: #ffffff;
+--vscode-activityErrorBadge-background: #e51400;
+--vscode-scrollbar-shadow: #dddddd;
+--vscode-scrollbarSlider-background: rgba(100, 100, 100, 0.4);
+--vscode-scrollbarSlider-hoverBackground: rgba(100, 100, 100, 0.7);
+--vscode-scrollbarSlider-activeBackground: rgba(0, 0, 0, 0.6);
+--vscode-progressBar-background: #0e70c0;
+--vscode-chart-line: #236b8e;
+--vscode-chart-axis: rgba(0, 0, 0, 0.6);
+--vscode-chart-guide: rgba(0, 0, 0, 0.2);
+--vscode-editor-background: #ffffff;
+--vscode-editor-foreground: #000000;
+--vscode-editorStickyScroll-background: #ffffff;
+--vscode-editorStickyScrollHover-background: #f0f0f0;
+--vscode-editorStickyScroll-shadow: #dddddd;
+--vscode-editorWidget-background: #f3f3f3;
+--vscode-editorWidget-foreground: #616161;
+--vscode-editorWidget-border: #c8c8c8;
+--vscode-editorError-foreground: #e51400;
+--vscode-editorWarning-foreground: #bf8803;
+--vscode-editorInfo-foreground: #1a85ff;
+--vscode-editorHint-foreground: #6c6c6c;
+--vscode-editorLink-activeForeground: #0000ff;
+--vscode-editor-selectionBackground: #add6ff;
+--vscode-editor-inactiveSelectionBackground: #e5ebf1;
+--vscode-editor-selectionHighlightBackground: rgba(173, 214, 255, 0.5);
+--vscode-editor-compositionBorder: #000000;
+--vscode-editor-findMatchBackground: #a8ac94;
+--vscode-editor-findMatchHighlightBackground: rgba(234, 92, 0, 0.33);
+--vscode-editor-findRangeHighlightBackground: rgba(180, 180, 180, 0.3);
+--vscode-editor-hoverHighlightBackground: rgba(173, 214, 255, 0.15);
+--vscode-editorHoverWidget-background: #f3f3f3;
+--vscode-editorHoverWidget-foreground: #616161;
+--vscode-editorHoverWidget-border: #c8c8c8;
+--vscode-editorHoverWidget-statusBarBackground: #e7e7e7;
+--vscode-editorInlayHint-foreground: #969696;
+--vscode-editorInlayHint-background: rgba(196, 196, 196, 0.1);
+--vscode-editorInlayHint-typeForeground: #969696;
+--vscode-editorInlayHint-typeBackground: rgba(196, 196, 196, 0.1);
+--vscode-editorInlayHint-parameterForeground: #969696;
+--vscode-editorInlayHint-parameterBackground: rgba(196, 196, 196, 0.1);
+--vscode-editorLightBulb-foreground: #ddb100;
+--vscode-editorLightBulbAutoFix-foreground: #007acc;
+--vscode-editorLightBulbAi-foreground: #ddb100;
+--vscode-editor-snippetTabstopHighlightBackground: rgba(10, 50, 100, 0.2);
+--vscode-editor-snippetFinalTabstopHighlightBorder: rgba(10, 50, 100, 0.5);
+--vscode-diffEditor-insertedTextBackground: rgba(156, 204, 44, 0.25);
+--vscode-diffEditor-removedTextBackground: rgba(255, 0, 0, 0.2);
+--vscode-diffEditor-insertedLineBackground: rgba(155, 185, 85, 0.2);
+--vscode-diffEditor-removedLineBackground: rgba(255, 0, 0, 0.2);
+--vscode-diffEditor-diagonalFill: rgba(34, 34, 34, 0.2);
+--vscode-diffEditor-unchangedRegionBackground: #f3f3f3;
+--vscode-diffEditor-unchangedRegionForeground: #616161;
+--vscode-diffEditor-unchangedCodeBackground: rgba(184, 184, 184, 0.16);
+--vscode-widget-shadow: rgba(0, 0, 0, 0.16);
+--vscode-toolbar-hoverBackground: rgba(184, 184, 184, 0.31);
+--vscode-toolbar-activeBackground: rgba(166, 166, 166, 0.31);
+--vscode-breadcrumb-foreground: rgba(97, 97, 97, 0.8);
+--vscode-breadcrumb-background: #ffffff;
+--vscode-breadcrumb-focusForeground: #4e4e4e;
+--vscode-breadcrumb-activeSelectionForeground: #4e4e4e;
+--vscode-breadcrumbPicker-background: #f3f3f3;
+--vscode-merge-currentHeaderBackground: rgba(64, 200, 174, 0.5);
+--vscode-merge-currentContentBackground: rgba(64, 200, 174, 0.2);
+--vscode-merge-incomingHeaderBackground: rgba(64, 166, 255, 0.5);
+--vscode-merge-incomingContentBackground: rgba(64, 166, 255, 0.2);
+--vscode-merge-commonHeaderBackground: rgba(96, 96, 96, 0.4);
+--vscode-merge-commonContentBackground: rgba(96, 96, 96, 0.16);
+--vscode-editorOverviewRuler-currentContentForeground: rgba(64, 200, 174, 0.5);
+--vscode-editorOverviewRuler-incomingContentForeground: rgba(64, 166, 255, 0.5);
+--vscode-editorOverviewRuler-commonContentForeground: rgba(96, 96, 96, 0.4);
+--vscode-editorOverviewRuler-findMatchForeground: rgba(209, 134, 22, 0.49);
+--vscode-editorOverviewRuler-selectionHighlightForeground: rgba(160, 160, 160, 0.8);
+--vscode-problemsErrorIcon-foreground: #e51400;
+--vscode-problemsWarningIcon-foreground: #bf8803;
+--vscode-problemsInfoIcon-foreground: #1a85ff;
+--vscode-minimap-findMatchHighlight: #d18616;
+--vscode-minimap-selectionOccurrenceHighlight: #c9c9c9;
+--vscode-minimap-selectionHighlight: #add6ff;
+--vscode-minimap-infoHighlight: #1a85ff;
+--vscode-minimap-warningHighlight: #bf8803;
+--vscode-minimap-errorHighlight: rgba(255, 18, 18, 0.7);
+--vscode-minimap-foregroundOpacity: #000000;
+--vscode-minimapSlider-background: rgba(100, 100, 100, 0.2);
+--vscode-minimapSlider-hoverBackground: rgba(100, 100, 100, 0.35);
+--vscode-minimapSlider-activeBackground: rgba(0, 0, 0, 0.3);
+--vscode-charts-foreground: #616161;
+--vscode-charts-lines: rgba(97, 97, 97, 0.5);
+--vscode-charts-red: #e51400;
+--vscode-charts-blue: #1a85ff;
+--vscode-charts-yellow: #bf8803;
+--vscode-charts-orange: #d18616;
+--vscode-charts-green: #388a34;
+--vscode-charts-purple: #652d90;
+--vscode-input-background: #ffffff;
+--vscode-input-foreground: #616161;
+--vscode-inputOption-activeBorder: #007acc;
+--vscode-inputOption-hoverBackground: rgba(184, 184, 184, 0.31);
+--vscode-inputOption-activeBackground: rgba(0, 144, 241, 0.2);
+--vscode-inputOption-activeForeground: #000000;
+--vscode-input-placeholderForeground: #767676;
+--vscode-inputValidation-infoBackground: #d6ecf2;
+--vscode-inputValidation-infoBorder: #007acc;
+--vscode-inputValidation-warningBackground: #f6f5d2;
+--vscode-inputValidation-warningBorder: #b89500;
+--vscode-inputValidation-errorBackground: #f2dede;
+--vscode-inputValidation-errorBorder: #be1100;
+--vscode-dropdown-background: #ffffff;
+--vscode-dropdown-foreground: #616161;
+--vscode-dropdown-border: #cecece;
+--vscode-button-foreground: #ffffff;
+--vscode-button-separator: rgba(255, 255, 255, 0.4);
+--vscode-button-background: #007acc;
+--vscode-button-hoverBackground: #0062a3;
+--vscode-button-secondaryForeground: #ffffff;
+--vscode-button-secondaryBackground: #5f6a79;
+--vscode-button-secondaryHoverBackground: #4c5561;
+--vscode-radio-activeForeground: #000000;
+--vscode-radio-activeBackground: rgba(0, 144, 241, 0.2);
+--vscode-radio-activeBorder: #007acc;
+--vscode-radio-inactiveBorder: rgba(0, 0, 0, 0.2);
+--vscode-radio-inactiveHoverBackground: rgba(184, 184, 184, 0.31);
+--vscode-checkbox-background: #ffffff;
+--vscode-checkbox-selectBackground: #f3f3f3;
+--vscode-checkbox-foreground: #616161;
+--vscode-checkbox-border: #cecece;
+--vscode-checkbox-selectBorder: #424242;
+--vscode-checkbox-disabled\.background: #cacaca;
+--vscode-checkbox-disabled\.foreground: #959595;
+--vscode-keybindingLabel-background: rgba(221, 221, 221, 0.4);
+--vscode-keybindingLabel-foreground: #555555;
+--vscode-keybindingLabel-border: rgba(204, 204, 204, 0.4);
+--vscode-keybindingLabel-bottomBorder: rgba(187, 187, 187, 0.4);
+--vscode-list-focusOutline: #0090f1;
+--vscode-list-focusAndSelectionOutline: #90c2f9;
+--vscode-list-activeSelectionBackground: #0060c0;
+--vscode-list-activeSelectionForeground: #ffffff;
+--vscode-list-activeSelectionIconForeground: #ffffff;
+--vscode-list-inactiveSelectionBackground: #e4e6f1;
+--vscode-list-hoverBackground: #e8e8e8;
+--vscode-list-dropBackground: #d6ebff;
+--vscode-list-dropBetweenBackground: #424242;
+--vscode-list-highlightForeground: #0066bf;
+--vscode-list-focusHighlightForeground: #bbe7ff;
+--vscode-list-invalidItemForeground: #b89500;
+--vscode-list-errorForeground: #b01011;
+--vscode-list-warningForeground: #855f00;
+--vscode-listFilterWidget-background: #f3f3f3;
+--vscode-listFilterWidget-outline: rgba(0, 0, 0, 0);
+--vscode-listFilterWidget-noMatchesOutline: #be1100;
+--vscode-listFilterWidget-shadow: rgba(0, 0, 0, 0.16);
+--vscode-list-filterMatchBackground: rgba(234, 92, 0, 0.33);
+--vscode-list-deemphasizedForeground: #8e8e90;
+--vscode-tree-indentGuidesStroke: #a9a9a9;
+--vscode-tree-inactiveIndentGuidesStroke: rgba(169, 169, 169, 0.4);
+--vscode-tree-tableColumnsBorder: rgba(97, 97, 97, 0.13);
+--vscode-tree-tableOddRowsBackground: rgba(97, 97, 97, 0.04);
+--vscode-editorActionList-background: #f3f3f3;
+--vscode-editorActionList-foreground: #616161;
+--vscode-editorActionList-focusForeground: #ffffff;
+--vscode-editorActionList-focusBackground: #0060c0;
+--vscode-menu-foreground: #616161;
+--vscode-menu-background: #ffffff;
+--vscode-menu-selectionForeground: #ffffff;
+--vscode-menu-selectionBackground: #0060c0;
+--vscode-menu-separatorBackground: #d4d4d4;
+--vscode-quickInput-background: #f3f3f3;
+--vscode-quickInput-foreground: #616161;
+--vscode-quickInputTitle-background: rgba(0, 0, 0, 0.06);
+--vscode-pickerGroup-foreground: #0066bf;
+--vscode-pickerGroup-border: #cccedb;
+--vscode-quickInputList-focusForeground: #ffffff;
+--vscode-quickInputList-focusIconForeground: #ffffff;
+--vscode-quickInputList-focusBackground: #0060c0;
+--vscode-search-resultsInfoForeground: #616161;
+--vscode-searchEditor-findMatchBackground: rgba(234, 92, 0, 0.22);
+--vscode-editor-lineHighlightBorder: #eeeeee;
+--vscode-editor-rangeHighlightBackground: rgba(253, 255, 0, 0.2);
+--vscode-editor-symbolHighlightBackground: rgba(234, 92, 0, 0.33);
+--vscode-editorCursor-foreground: #000000;
+--vscode-editorMultiCursor-primary\.foreground: #000000;
+--vscode-editorMultiCursor-secondary\.foreground: #000000;
+--vscode-editorWhitespace-foreground: #2b91af;
+--vscode-editorLineNumber-foreground: #2b91af;
+--vscode-editorIndentGuide-background: #d3d3d3;
+--vscode-editorIndentGuide-activeBackground: #939393;
+--vscode-editorIndentGuide-background1: #d3d3d3;
+--vscode-editorIndentGuide-background2: rgba(0, 0, 0, 0);
+--vscode-editorIndentGuide-background3: rgba(0, 0, 0, 0);
+--vscode-editorIndentGuide-background4: rgba(0, 0, 0, 0);
+--vscode-editorIndentGuide-background5: rgba(0, 0, 0, 0);
+--vscode-editorIndentGuide-background6: rgba(0, 0, 0, 0);
+--vscode-editorIndentGuide-activeBackground1: #939393;
+--vscode-editorIndentGuide-activeBackground2: rgba(0, 0, 0, 0);
+--vscode-editorIndentGuide-activeBackground3: rgba(0, 0, 0, 0);
+--vscode-editorIndentGuide-activeBackground4: rgba(0, 0, 0, 0);
+--vscode-editorIndentGuide-activeBackground5: rgba(0, 0, 0, 0);
+--vscode-editorIndentGuide-activeBackground6: rgba(0, 0, 0, 0);
+--vscode-editorActiveLineNumber-foreground: #0b216f;
+--vscode-editorLineNumber-activeForeground: #2b91af;
+--vscode-editorRuler-foreground: #d3d3d3;
+--vscode-editorCodeLens-foreground: #919191;
+--vscode-editorBracketMatch-background: rgba(0, 100, 0, 0.1);
+--vscode-editorBracketMatch-border: #b9b9b9;
+--vscode-editorOverviewRuler-border: rgba(127, 127, 127, 0.3);
+--vscode-editorGutter-background: #ffffff;
+--vscode-editorUnnecessaryCode-opacity: rgba(0, 0, 0, 0.47);
+--vscode-editorGhostText-foreground: rgba(0, 0, 0, 0.47);
+--vscode-editorOverviewRuler-rangeHighlightForeground: rgba(0, 122, 204, 0.6);
+--vscode-editorOverviewRuler-errorForeground: rgba(255, 18, 18, 0.7);
+--vscode-editorOverviewRuler-warningForeground: #bf8803;
+--vscode-editorOverviewRuler-infoForeground: #1a85ff;
+--vscode-editorBracketHighlight-foreground1: #0431fa;
+--vscode-editorBracketHighlight-foreground2: #319331;
+--vscode-editorBracketHighlight-foreground3: #7b3814;
+--vscode-editorBracketHighlight-foreground4: rgba(0, 0, 0, 0);
+--vscode-editorBracketHighlight-foreground5: rgba(0, 0, 0, 0);
+--vscode-editorBracketHighlight-foreground6: rgba(0, 0, 0, 0);
+--vscode-editorBracketHighlight-unexpectedBracket\.foreground: rgba(255, 18, 18, 0.8);
+--vscode-editorBracketPairGuide-background1: rgba(0, 0, 0, 0);
+--vscode-editorBracketPairGuide-background2: rgba(0, 0, 0, 0);
+--vscode-editorBracketPairGuide-background3: rgba(0, 0, 0, 0);
+--vscode-editorBracketPairGuide-background4: rgba(0, 0, 0, 0);
+--vscode-editorBracketPairGuide-background5: rgba(0, 0, 0, 0);
+--vscode-editorBracketPairGuide-background6: rgba(0, 0, 0, 0);
+--vscode-editorBracketPairGuide-activeBackground1: rgba(0, 0, 0, 0);
+--vscode-editorBracketPairGuide-activeBackground2: rgba(0, 0, 0, 0);
+--vscode-editorBracketPairGuide-activeBackground3: rgba(0, 0, 0, 0);
+--vscode-editorBracketPairGuide-activeBackground4: rgba(0, 0, 0, 0);
+--vscode-editorBracketPairGuide-activeBackground5: rgba(0, 0, 0, 0);
+--vscode-editorBracketPairGuide-activeBackground6: rgba(0, 0, 0, 0);
+--vscode-editorUnicodeHighlight-border: #bf8803;
+--vscode-diffEditor-move\.border: rgba(139, 139, 139, 0.61);
+--vscode-diffEditor-moveActive\.border: #ffa500;
+--vscode-diffEditor-unchangedRegionShadow: rgba(115, 115, 115, 0.75);
+--vscode-editorOverviewRuler-bracketMatchForeground: #a0a0a0;
+--vscode-actionBar-toggledBackground: rgba(0, 144, 241, 0.2);
+--vscode-symbolIcon-arrayForeground: #616161;
+--vscode-symbolIcon-booleanForeground: #616161;
+--vscode-symbolIcon-classForeground: #d67e00;
+--vscode-symbolIcon-colorForeground: #616161;
+--vscode-symbolIcon-constantForeground: #616161;
+--vscode-symbolIcon-constructorForeground: #652d90;
+--vscode-symbolIcon-enumeratorForeground: #d67e00;
+--vscode-symbolIcon-enumeratorMemberForeground: #007acc;
+--vscode-symbolIcon-eventForeground: #d67e00;
+--vscode-symbolIcon-fieldForeground: #007acc;
+--vscode-symbolIcon-fileForeground: #616161;
+--vscode-symbolIcon-folderForeground: #616161;
+--vscode-symbolIcon-functionForeground: #652d90;
+--vscode-symbolIcon-interfaceForeground: #007acc;
+--vscode-symbolIcon-keyForeground: #616161;
+--vscode-symbolIcon-keywordForeground: #616161;
+--vscode-symbolIcon-methodForeground: #652d90;
+--vscode-symbolIcon-moduleForeground: #616161;
+--vscode-symbolIcon-namespaceForeground: #616161;
+--vscode-symbolIcon-nullForeground: #616161;
+--vscode-symbolIcon-numberForeground: #616161;
+--vscode-symbolIcon-objectForeground: #616161;
+--vscode-symbolIcon-operatorForeground: #616161;
+--vscode-symbolIcon-packageForeground: #616161;
+--vscode-symbolIcon-propertyForeground: #616161;
+--vscode-symbolIcon-referenceForeground: #616161;
+--vscode-symbolIcon-snippetForeground: #616161;
+--vscode-symbolIcon-stringForeground: #616161;
+--vscode-symbolIcon-structForeground: #616161;
+--vscode-symbolIcon-textForeground: #616161;
+--vscode-symbolIcon-typeParameterForeground: #616161;
+--vscode-symbolIcon-unitForeground: #616161;
+--vscode-symbolIcon-variableForeground: #007acc;
+--vscode-peekViewTitle-background: #f3f3f3;
+--vscode-peekViewTitleLabel-foreground: #000000;
+--vscode-peekViewTitleDescription-foreground: #616161;
+--vscode-peekView-border: #1a85ff;
+--vscode-peekViewResult-background: #f3f3f3;
+--vscode-peekViewResult-lineForeground: #646465;
+--vscode-peekViewResult-fileForeground: #1e1e1e;
+--vscode-peekViewResult-selectionBackground: rgba(51, 153, 255, 0.2);
+--vscode-peekViewResult-selectionForeground: #6c6c6c;
+--vscode-peekViewEditor-background: #f2f8fc;
+--vscode-peekViewEditorGutter-background: #f2f8fc;
+--vscode-peekViewEditorStickyScroll-background: #f2f8fc;
+--vscode-peekViewResult-matchHighlightBackground: rgba(234, 92, 0, 0.3);
+--vscode-peekViewEditor-matchHighlightBackground: rgba(245, 216, 2, 0.87);
+--vscode-editor-foldBackground: rgba(173, 214, 255, 0.3);
+--vscode-editor-foldPlaceholderForeground: #808080;
+--vscode-editorGutter-foldingControlForeground: #424242;
+--vscode-editorSuggestWidget-background: #f3f3f3;
+--vscode-editorSuggestWidget-border: #c8c8c8;
+--vscode-editorSuggestWidget-foreground: #000000;
+--vscode-editorSuggestWidget-selectedForeground: #ffffff;
+--vscode-editorSuggestWidget-selectedIconForeground: #ffffff;
+--vscode-editorSuggestWidget-selectedBackground: #0060c0;
+--vscode-editorSuggestWidget-highlightForeground: #0066bf;
+--vscode-editorSuggestWidget-focusHighlightForeground: #bbe7ff;
+--vscode-editorSuggestWidgetStatus-foreground: rgba(0, 0, 0, 0.5);
+--vscode-inlineEdit-originalBackground: rgba(255, 0, 0, 0.04);
+--vscode-inlineEdit-modifiedBackground: rgba(156, 204, 44, 0.07);
+--vscode-inlineEdit-originalChangedLineBackground: rgba(255, 0, 0, 0.16);
+--vscode-inlineEdit-originalChangedTextBackground: rgba(255, 0, 0, 0.16);
+--vscode-inlineEdit-modifiedChangedLineBackground: rgba(155, 185, 85, 0.14);
+--vscode-inlineEdit-modifiedChangedTextBackground: rgba(156, 204, 44, 0.18);
+--vscode-inlineEdit-gutterIndicator\.primaryForeground: #ffffff;
+--vscode-inlineEdit-gutterIndicator\.primaryBorder: #007acc;
+--vscode-inlineEdit-gutterIndicator\.primaryBackground: rgba(0, 122, 204, 0.5);
+--vscode-inlineEdit-gutterIndicator\.secondaryForeground: #ffffff;
+--vscode-inlineEdit-gutterIndicator\.secondaryBorder: #5f6a79;
+--vscode-inlineEdit-gutterIndicator\.secondaryBackground: #5f6a79;
+--vscode-inlineEdit-gutterIndicator\.successfulForeground: #ffffff;
+--vscode-inlineEdit-gutterIndicator\.successfulBorder: #007acc;
+--vscode-inlineEdit-gutterIndicator\.successfulBackground: #007acc;
+--vscode-inlineEdit-gutterIndicator\.background: rgba(95, 95, 95, 0.09);
+--vscode-inlineEdit-originalBorder: rgba(255, 0, 0, 0.2);
+--vscode-inlineEdit-modifiedBorder: rgba(62, 81, 18, 0.25);
+--vscode-inlineEdit-tabWillAcceptModifiedBorder: rgba(62, 81, 18, 0.25);
+--vscode-inlineEdit-tabWillAcceptOriginalBorder: rgba(255, 0, 0, 0.2);
+--vscode-editorMarkerNavigationError-background: #e51400;
+--vscode-editorMarkerNavigationError-headerBackground: rgba(229, 20, 0, 0.1);
+--vscode-editorMarkerNavigationWarning-background: #bf8803;
+--vscode-editorMarkerNavigationWarning-headerBackground: rgba(191, 136, 3, 0.1);
+--vscode-editorMarkerNavigationInfo-background: #1a85ff;
+--vscode-editorMarkerNavigationInfo-headerBackground: rgba(26, 133, 255, 0.1);
+--vscode-editorMarkerNavigation-background: #ffffff;
+--vscode-editor-linkedEditingBackground: rgba(255, 0, 0, 0.3);
+--vscode-editor-wordHighlightBackground: rgba(87, 87, 87, 0.25);
+--vscode-editor-wordHighlightStrongBackground: rgba(14, 99, 156, 0.25);
+--vscode-editor-wordHighlightTextBackground: rgba(87, 87, 87, 0.25);
+--vscode-editorOverviewRuler-wordHighlightForeground: rgba(160, 160, 160, 0.8);
+--vscode-editorOverviewRuler-wordHighlightStrongForeground: rgba(192, 160, 192, 0.8);
+--vscode-editorOverviewRuler-wordHighlightTextForeground: rgba(160, 160, 160, 0.8);
+--vscode-editorHoverWidget-highlightForeground: #0066bf;
+--vscode-editor-placeholder\.foreground: rgba(0, 0, 0, 0.47);
+--vscode-tab-activeBackground: #ffffff;
+--vscode-tab-unfocusedActiveBackground: #ffffff;
+--vscode-tab-inactiveBackground: #ececec;
+--vscode-tab-unfocusedInactiveBackground: #ececec;
+--vscode-tab-activeForeground: #333333;
+--vscode-tab-inactiveForeground: rgba(51, 51, 51, 0.7);
+--vscode-tab-unfocusedActiveForeground: rgba(51, 51, 51, 0.7);
+--vscode-tab-unfocusedInactiveForeground: rgba(51, 51, 51, 0.35);
+--vscode-tab-border: #f3f3f3;
+--vscode-tab-lastPinnedBorder: rgba(97, 97, 97, 0.19);
+--vscode-tab-selectedBackground: #ffffff;
+--vscode-tab-selectedForeground: #333333;
+--vscode-tab-dragAndDropBorder: #333333;
+--vscode-tab-activeModifiedBorder: #33aaee;
+--vscode-tab-inactiveModifiedBorder: rgba(51, 170, 238, 0.5);
+--vscode-tab-unfocusedActiveModifiedBorder: rgba(51, 170, 238, 0.7);
+--vscode-tab-unfocusedInactiveModifiedBorder: rgba(51, 170, 238, 0.25);
+--vscode-editorPane-background: #ffffff;
+--vscode-editorGroupHeader-tabsBackground: #f3f3f3;
+--vscode-editorGroupHeader-noTabsBackground: #ffffff;
+--vscode-editorGroup-border: #e7e7e7;
+--vscode-editorGroup-dropBackground: rgba(38, 119, 203, 0.18);
+--vscode-editorGroup-dropIntoPromptForeground: #616161;
+--vscode-editorGroup-dropIntoPromptBackground: #f3f3f3;
+--vscode-sideBySideEditor-horizontalBorder: #e7e7e7;
+--vscode-sideBySideEditor-verticalBorder: #e7e7e7;
+--vscode-banner-background: #004386;
+--vscode-banner-foreground: #ffffff;
+--vscode-banner-iconForeground: #1a85ff;
+--vscode-statusBar-foreground: #ffffff;
+--vscode-statusBar-noFolderForeground: #ffffff;
+--vscode-statusBar-background: #007acc;
+--vscode-statusBar-noFolderBackground: #68217a;
+--vscode-statusBar-focusBorder: #ffffff;
+--vscode-statusBarItem-activeBackground: rgba(255, 255, 255, 0.18);
+--vscode-statusBarItem-focusBorder: #ffffff;
+--vscode-statusBarItem-hoverBackground: rgba(255, 255, 255, 0.12);
+--vscode-statusBarItem-hoverForeground: #ffffff;
+--vscode-statusBarItem-compactHoverBackground: rgba(255, 255, 255, 0.2);
+--vscode-statusBarItem-prominentForeground: #ffffff;
+--vscode-statusBarItem-prominentBackground: rgba(0, 0, 0, 0.5);
+--vscode-statusBarItem-prominentHoverForeground: #ffffff;
+--vscode-statusBarItem-prominentHoverBackground: rgba(255, 255, 255, 0.12);
+--vscode-statusBarItem-errorBackground: #c72e0f;
+--vscode-statusBarItem-errorForeground: #ffffff;
+--vscode-statusBarItem-errorHoverForeground: #ffffff;
+--vscode-statusBarItem-errorHoverBackground: rgba(255, 255, 255, 0.12);
+--vscode-statusBarItem-warningBackground: #725102;
+--vscode-statusBarItem-warningForeground: #ffffff;
+--vscode-statusBarItem-warningHoverForeground: #ffffff;
+--vscode-statusBarItem-warningHoverBackground: rgba(255, 255, 255, 0.12);
+--vscode-activityBar-background: #2c2c2c;
+--vscode-activityBar-foreground: #ffffff;
+--vscode-activityBar-inactiveForeground: rgba(255, 255, 255, 0.4);
+--vscode-activityBar-activeBorder: #ffffff;
+--vscode-activityBar-dropBorder: #ffffff;
+--vscode-activityBarBadge-background: #007acc;
+--vscode-activityBarBadge-foreground: #ffffff;
+--vscode-activityBarTop-foreground: #424242;
+--vscode-activityBarTop-activeBorder: #424242;
+--vscode-activityBarTop-inactiveForeground: rgba(66, 66, 66, 0.75);
+--vscode-activityBarTop-dropBorder: #424242;
+--vscode-panel-background: #ffffff;
+--vscode-panel-border: rgba(128, 128, 128, 0.35);
+--vscode-panelTitle-activeForeground: #424242;
+--vscode-panelTitle-inactiveForeground: rgba(66, 66, 66, 0.75);
+--vscode-panelTitle-activeBorder: #424242;
+--vscode-panelTitleBadge-background: #007acc;
+--vscode-panelTitleBadge-foreground: #ffffff;
+--vscode-panelInput-border: #dddddd;
+--vscode-panel-dropBorder: #424242;
+--vscode-panelSection-dropBackground: rgba(38, 119, 203, 0.18);
+--vscode-panelSectionHeader-background: rgba(128, 128, 128, 0.2);
+--vscode-panelSection-border: rgba(128, 128, 128, 0.35);
+--vscode-panelStickyScroll-background: #ffffff;
+--vscode-panelStickyScroll-shadow: #dddddd;
+--vscode-profileBadge-background: #c4c4c4;
+--vscode-profileBadge-foreground: #333333;
+--vscode-statusBarItem-remoteBackground: #16825d;
+--vscode-statusBarItem-remoteForeground: #ffffff;
+--vscode-statusBarItem-remoteHoverForeground: #ffffff;
+--vscode-statusBarItem-remoteHoverBackground: rgba(255, 255, 255, 0.12);
+--vscode-statusBarItem-offlineBackground: #6c1717;
+--vscode-statusBarItem-offlineForeground: #ffffff;
+--vscode-statusBarItem-offlineHoverForeground: #ffffff;
+--vscode-statusBarItem-offlineHoverBackground: rgba(255, 255, 255, 0.12);
+--vscode-extensionBadge-remoteBackground: #007acc;
+--vscode-extensionBadge-remoteForeground: #ffffff;
+--vscode-sideBar-background: #f3f3f3;
+--vscode-sideBarTitle-background: #f3f3f3;
+--vscode-sideBarTitle-foreground: #6f6f6f;
+--vscode-sideBar-dropBackground: rgba(38, 119, 203, 0.18);
+--vscode-sideBarSectionHeader-background: rgba(0, 0, 0, 0);
+--vscode-sideBarSectionHeader-border: rgba(97, 97, 97, 0.19);
+--vscode-sideBarActivityBarTop-border: rgba(97, 97, 97, 0.19);
+--vscode-sideBarStickyScroll-background: #f3f3f3;
+--vscode-sideBarStickyScroll-shadow: #dddddd;
+--vscode-titleBar-activeForeground: #333333;
+--vscode-titleBar-inactiveForeground: rgba(51, 51, 51, 0.6);
+--vscode-titleBar-activeBackground: #dddddd;
+--vscode-titleBar-inactiveBackground: rgba(221, 221, 221, 0.6);
+--vscode-menubar-selectionForeground: #333333;
+--vscode-menubar-selectionBackground: rgba(184, 184, 184, 0.31);
+--vscode-commandCenter-foreground: #333333;
+--vscode-commandCenter-activeForeground: #333333;
+--vscode-commandCenter-inactiveForeground: rgba(51, 51, 51, 0.6);
+--vscode-commandCenter-background: rgba(0, 0, 0, 0.05);
+--vscode-commandCenter-activeBackground: rgba(0, 0, 0, 0.08);
+--vscode-commandCenter-border: rgba(51, 51, 51, 0.2);
+--vscode-commandCenter-activeBorder: rgba(51, 51, 51, 0.3);
+--vscode-commandCenter-inactiveBorder: rgba(51, 51, 51, 0.15);
+--vscode-notifications-foreground: #616161;
+--vscode-notifications-background: #f3f3f3;
+--vscode-notificationLink-foreground: #006ab1;
+--vscode-notificationCenterHeader-background: #e7e7e7;
+--vscode-notifications-border: #e7e7e7;
+--vscode-notificationsErrorIcon-foreground: #e51400;
+--vscode-notificationsWarningIcon-foreground: #bf8803;
+--vscode-notificationsInfoIcon-foreground: #1a85ff;
+--vscode-debugToolBar-background: #f3f3f3;
+--vscode-debugIcon-startForeground: #388a34;
+--vscode-inlineChat-foreground: #616161;
+--vscode-inlineChat-background: #f3f3f3;
+--vscode-inlineChat-border: #c8c8c8;
+--vscode-inlineChat-shadow: rgba(0, 0, 0, 0.16);
+--vscode-inlineChatInput-border: #c8c8c8;
+--vscode-inlineChatInput-focusBorder: #0090f1;
+--vscode-inlineChatInput-placeholderForeground: #767676;
+--vscode-inlineChatInput-background: #ffffff;
+--vscode-inlineChatDiff-inserted: rgba(156, 204, 44, 0.13);
+--vscode-editorOverviewRuler-inlineChatInserted: rgba(156, 204, 44, 0.2);
+--vscode-editorMinimap-inlineChatInserted: rgba(156, 204, 44, 0.2);
+--vscode-inlineChatDiff-removed: rgba(255, 0, 0, 0.1);
+--vscode-editorOverviewRuler-inlineChatRemoved: rgba(255, 0, 0, 0.16);
+--vscode-extensionButton-background: #007acc;
+--vscode-extensionButton-foreground: #ffffff;
+--vscode-extensionButton-hoverBackground: #0062a3;
+--vscode-extensionButton-separator: rgba(255, 255, 255, 0.4);
+--vscode-extensionButton-prominentBackground: #007acc;
+--vscode-extensionButton-prominentForeground: #ffffff;
+--vscode-extensionButton-prominentHoverBackground: #0062a3;
+--vscode-extensionIcon-verifiedForeground: #006ab1;
+--vscode-editorWatermark-foreground: rgba(0, 0, 0, 0.68);
+--vscode-extensionIcon-starForeground: #df6100;
+--vscode-extensionIcon-preReleaseForeground: #1d9271;
+--vscode-extensionIcon-sponsorForeground: #b51e78;
+--vscode-extensionIcon-privateForeground: rgba(0, 0, 0, 0.38);
+--vscode-chat-requestBorder: rgba(0, 0, 0, 0.1);
+--vscode-chat-requestBackground: rgba(255, 255, 255, 0.62);
+--vscode-chat-slashCommandBackground: rgba(210, 236, 255, 0.6);
+--vscode-chat-slashCommandForeground: #306ca2;
+--vscode-chat-avatarBackground: #f2f2f2;
+--vscode-chat-avatarForeground: #616161;
+--vscode-chat-editedFileForeground: #895503;
+--vscode-commentsView-resolvedIcon: rgba(97, 97, 97, 0.5);
+--vscode-commentsView-unresolvedIcon: #0090f1;
+--vscode-editorCommentsWidget-replyInputBackground: #f3f3f3;
+--vscode-editorCommentsWidget-resolvedBorder: rgba(97, 97, 97, 0.5);
+--vscode-editorCommentsWidget-unresolvedBorder: #0090f1;
+--vscode-editorCommentsWidget-rangeBackground: rgba(0, 144, 241, 0.1);
+--vscode-editorCommentsWidget-rangeActiveBackground: rgba(0, 144, 241, 0.1);
+--vscode-notebook-cellBorderColor: #e8e8e8;
+--vscode-notebook-focusedEditorBorder: #0090f1;
+--vscode-notebookStatusSuccessIcon-foreground: #388a34;
+--vscode-notebookEditorOverviewRuler-runningCellForeground: #388a34;
+--vscode-notebookStatusErrorIcon-foreground: #a1260d;
+--vscode-notebookStatusRunningIcon-foreground: #616161;
+--vscode-notebook-cellToolbarSeparator: rgba(128, 128, 128, 0.35);
+--vscode-notebook-selectedCellBackground: rgba(200, 221, 241, 0.31);
+--vscode-notebook-selectedCellBorder: #e8e8e8;
+--vscode-notebook-focusedCellBorder: #0090f1;
+--vscode-notebook-inactiveFocusedCellBorder: #e8e8e8;
+--vscode-notebook-cellStatusBarItemHoverBackground: rgba(0, 0, 0, 0.08);
+--vscode-notebook-cellInsertionIndicator: #0090f1;
+--vscode-notebookScrollbarSlider-background: rgba(100, 100, 100, 0.4);
+--vscode-notebookScrollbarSlider-hoverBackground: rgba(100, 100, 100, 0.7);
+--vscode-notebookScrollbarSlider-activeBackground: rgba(0, 0, 0, 0.6);
+--vscode-notebook-symbolHighlightBackground: rgba(253, 255, 0, 0.2);
+--vscode-notebook-cellEditorBackground: #f3f3f3;
+--vscode-notebook-editorBackground: #ffffff;
+--vscode-editorGutter-modifiedBackground: #2090d3;
+--vscode-editorGutter-modifiedSecondaryBackground: #aad8f2;
+--vscode-editorGutter-addedBackground: #48985d;
+--vscode-editorGutter-addedSecondaryBackground: #a7d5b3;
+--vscode-editorGutter-deletedBackground: #e51400;
+--vscode-editorGutter-deletedSecondaryBackground: #ff3d2b;
+--vscode-minimapGutter-modifiedBackground: #2090d3;
+--vscode-minimapGutter-addedBackground: #48985d;
+--vscode-minimapGutter-deletedBackground: #e51400;
+--vscode-editorOverviewRuler-modifiedForeground: rgba(32, 144, 211, 0.6);
+--vscode-editorOverviewRuler-addedForeground: rgba(72, 152, 93, 0.6);
+--vscode-editorOverviewRuler-deletedForeground: rgba(229, 20, 0, 0.6);
+--vscode-editorGutter-itemGlyphForeground: #000000;
+--vscode-editorGutter-itemBackground: #d5d8e9;
+--vscode-terminal-foreground: #333333;
+--vscode-terminal-selectionBackground: #add6ff;
+--vscode-terminal-inactiveSelectionBackground: #e5ebf1;
+--vscode-terminalCommandDecoration-defaultBackground: rgba(0, 0, 0, 0.25);
+--vscode-terminalCommandDecoration-successBackground: #2090d3;
+--vscode-terminalCommandDecoration-errorBackground: #e51400;
+--vscode-terminalOverviewRuler-cursorForeground: rgba(160, 160, 160, 0.8);
+--vscode-terminal-border: rgba(128, 128, 128, 0.35);
+--vscode-terminalOverviewRuler-border: rgba(127, 127, 127, 0.3);
+--vscode-terminal-findMatchBackground: #a8ac94;
+--vscode-terminal-hoverHighlightBackground: rgba(173, 214, 255, 0.07);
+--vscode-terminal-findMatchHighlightBackground: rgba(234, 92, 0, 0.33);
+--vscode-terminalOverviewRuler-findMatchForeground: rgba(209, 134, 22, 0.49);
+--vscode-terminal-dropBackground: rgba(38, 119, 203, 0.18);
+--vscode-terminal-initialHintForeground: rgba(0, 0, 0, 0.47);
+--vscode-scmGraph-historyItemRefColor: #1a85ff;
+--vscode-scmGraph-historyItemRemoteRefColor: #652d90;
+--vscode-scmGraph-historyItemBaseRefColor: #ea5c00;
+--vscode-scmGraph-historyItemHoverDefaultLabelForeground: #616161;
+--vscode-scmGraph-historyItemHoverDefaultLabelBackground: #c4c4c4;
+--vscode-scmGraph-historyItemHoverLabelForeground: #ffffff;
+--vscode-scmGraph-historyItemHoverAdditionsForeground: #587c0c;
+--vscode-scmGraph-historyItemHoverDeletionsForeground: #ad0707;
+--vscode-scmGraph-foreground1: #ffb000;
+--vscode-scmGraph-foreground2: #dc267f;
+--vscode-scmGraph-foreground3: #994f00;
+--vscode-scmGraph-foreground4: #40b0a6;
+--vscode-scmGraph-foreground5: #b66dff;
+--vscode-editorGutter-commentRangeForeground: #d5d8e9;
+--vscode-editorOverviewRuler-commentForeground: #d5d8e9;
+--vscode-editorOverviewRuler-commentUnresolvedForeground: #d5d8e9;
+--vscode-editorGutter-commentGlyphForeground: #000000;
+--vscode-editorGutter-commentUnresolvedGlyphForeground: #000000;
+--vscode-ports-iconRunningProcessForeground: #369432;
+--vscode-settings-headerForeground: #444444;
+--vscode-settings-settingsHeaderHoverForeground: rgba(68, 68, 68, 0.7);
+--vscode-settings-modifiedItemIndicator: #66afe0;
+--vscode-settings-headerBorder: rgba(128, 128, 128, 0.35);
+--vscode-settings-sashBorder: rgba(128, 128, 128, 0.35);
+--vscode-settings-dropdownBackground: #ffffff;
+--vscode-settings-dropdownForeground: #616161;
+--vscode-settings-dropdownBorder: #cecece;
+--vscode-settings-dropdownListBorder: #c8c8c8;
+--vscode-settings-checkboxBackground: #ffffff;
+--vscode-settings-checkboxForeground: #616161;
+--vscode-settings-checkboxBorder: #cecece;
+--vscode-settings-textInputBackground: #ffffff;
+--vscode-settings-textInputForeground: #616161;
+--vscode-settings-textInputBorder: #cecece;
+--vscode-settings-numberInputBackground: #ffffff;
+--vscode-settings-numberInputForeground: #616161;
+--vscode-settings-numberInputBorder: #cecece;
+--vscode-settings-focusedRowBackground: rgba(232, 232, 232, 0.6);
+--vscode-settings-rowHoverBackground: rgba(232, 232, 232, 0.3);
+--vscode-settings-focusedRowBorder: #0090f1;
+--vscode-keybindingTable-headerBackground: rgba(97, 97, 97, 0.04);
+--vscode-keybindingTable-rowsBackground: rgba(97, 97, 97, 0.04);
+--vscode-debugExceptionWidget-border: #a31515;
+--vscode-debugExceptionWidget-background: #f1dfde;
+--vscode-editor-inlineValuesForeground: rgba(0, 0, 0, 0.5);
+--vscode-editor-inlineValuesBackground: rgba(255, 200, 0, 0.2);
+--vscode-debugIcon-breakpointForeground: #e51400;
+--vscode-debugIcon-breakpointDisabledForeground: #848484;
+--vscode-debugIcon-breakpointUnverifiedForeground: #848484;
+--vscode-debugIcon-breakpointCurrentStackframeForeground: #be8700;
+--vscode-debugIcon-breakpointStackframeForeground: #89d185;
+--vscode-editor-stackFrameHighlightBackground: rgba(255, 255, 102, 0.45);
+--vscode-editor-focusedStackFrameHighlightBackground: rgba(206, 231, 206, 0.45);
+--vscode-multiDiffEditor-headerBackground: #ececec;
+--vscode-multiDiffEditor-background: #ffffff;
+--vscode-multiDiffEditor-border: #cccccc;
+--vscode-prompt-frontMatter\.background: #f2f2f2;
+--vscode-prompt-frontMatter\.inactiveBackground: #f9f9f9;
+--vscode-minimap-chatEditHighlight: rgba(255, 255, 255, 0.6);
+--vscode-gauge-background: #007acc;
+--vscode-gauge-foreground: rgba(0, 122, 204, 0.3);
+--vscode-gauge-warningBackground: #b89500;
+--vscode-gauge-warningForeground: rgba(184, 149, 0, 0.3);
+--vscode-gauge-errorBackground: #be1100;
+--vscode-gauge-errorForeground: rgba(190, 17, 0, 0.3);
+--vscode-interactive-activeCodeBorder: #007acc;
+--vscode-interactive-inactiveCodeBorder: #e4e6f1;
+--vscode-testing-iconFailed: #f14c4c;
+--vscode-testing-iconErrored: #f14c4c;
+--vscode-testing-iconPassed: #73c991;
+--vscode-testing-runAction: #73c991;
+--vscode-testing-iconQueued: #cca700;
+--vscode-testing-iconUnset: #848484;
+--vscode-testing-iconSkipped: #848484;
+--vscode-testing-peekBorder: #e51400;
+--vscode-testing-messagePeekBorder: #1a85ff;
+--vscode-testing-peekHeaderBackground: rgba(229, 20, 0, 0.1);
+--vscode-testing-messagePeekHeaderBackground: rgba(26, 133, 255, 0.1);
+--vscode-testing-coveredBackground: rgba(156, 204, 44, 0.25);
+--vscode-testing-coveredBorder: rgba(156, 204, 44, 0.19);
+--vscode-testing-coveredGutterBackground: rgba(156, 204, 44, 0.15);
+--vscode-testing-uncoveredBranchBackground: #ff9999;
+--vscode-testing-uncoveredBackground: rgba(255, 0, 0, 0.2);
+--vscode-testing-uncoveredBorder: rgba(255, 0, 0, 0.15);
+--vscode-testing-uncoveredGutterBackground: rgba(255, 0, 0, 0.3);
+--vscode-testing-coverCountBadgeBackground: #c4c4c4;
+--vscode-testing-coverCountBadgeForeground: #333333;
+--vscode-testing-message\.error\.badgeBackground: #e51400;
+--vscode-testing-message\.error\.badgeBorder: #e51400;
+--vscode-testing-message\.error\.badgeForeground: #ffffff;
+--vscode-testing-message\.info\.decorationForeground: rgba(0, 0, 0, 0.5);
+--vscode-testing-iconErrored\.retired: rgba(241, 76, 76, 0.7);
+--vscode-testing-iconFailed\.retired: rgba(241, 76, 76, 0.7);
+--vscode-testing-iconPassed\.retired: rgba(115, 201, 145, 0.7);
+--vscode-testing-iconQueued\.retired: rgba(204, 167, 0, 0.7);
+--vscode-testing-iconUnset\.retired: rgba(132, 132, 132, 0.7);
+--vscode-testing-iconSkipped\.retired: rgba(132, 132, 132, 0.7);
+--vscode-searchEditor-textInputBorder: #cecece;
+--vscode-statusBar-debuggingBackground: #cc6633;
+--vscode-statusBar-debuggingForeground: #ffffff;
+--vscode-commandCenter-debuggingBackground: rgba(204, 102, 51, 0.26);
+--vscode-debugTokenExpression-name: #9b46b0;
+--vscode-debugTokenExpression-type: #4a90e2;
+--vscode-debugTokenExpression-value: rgba(108, 108, 108, 0.8);
+--vscode-debugTokenExpression-string: #a31515;
+--vscode-debugTokenExpression-boolean: #0000ff;
+--vscode-debugTokenExpression-number: #098658;
+--vscode-debugTokenExpression-error: #e51400;
+--vscode-debugView-exceptionLabelForeground: #ffffff;
+--vscode-debugView-exceptionLabelBackground: #a31515;
+--vscode-debugView-stateLabelForeground: #616161;
+--vscode-debugView-stateLabelBackground: rgba(136, 136, 136, 0.27);
+--vscode-debugView-valueChangedHighlight: #569cd6;
+--vscode-debugConsole-infoForeground: #1a85ff;
+--vscode-debugConsole-warningForeground: #bf8803;
+--vscode-debugConsole-errorForeground: #a1260d;
+--vscode-debugConsole-sourceForeground: #616161;
+--vscode-debugConsoleInputIcon-foreground: #616161;
+--vscode-debugIcon-pauseForeground: #007acc;
+--vscode-debugIcon-stopForeground: #a1260d;
+--vscode-debugIcon-disconnectForeground: #a1260d;
+--vscode-debugIcon-restartForeground: #388a34;
+--vscode-debugIcon-stepOverForeground: #007acc;
+--vscode-debugIcon-stepIntoForeground: #007acc;
+--vscode-debugIcon-stepOutForeground: #007acc;
+--vscode-debugIcon-continueForeground: #007acc;
+--vscode-debugIcon-stepBackForeground: #007acc;
+--vscode-mergeEditor-change\.background: rgba(155, 185, 85, 0.2);
+--vscode-mergeEditor-change\.word\.background: rgba(156, 204, 44, 0.4);
+--vscode-mergeEditor-changeBase\.background: #ffcccc;
+--vscode-mergeEditor-changeBase\.word\.background: #ffa3a3;
+--vscode-mergeEditor-conflict\.unhandledUnfocused\.border: #ffa600;
+--vscode-mergeEditor-conflict\.unhandledFocused\.border: #ffa600;
+--vscode-mergeEditor-conflict\.handledUnfocused\.border: rgba(134, 134, 134, 0.29);
+--vscode-mergeEditor-conflict\.handledFocused\.border: rgba(193, 193, 193, 0.8);
+--vscode-mergeEditor-conflict\.handled\.minimapOverViewRuler: rgba(173, 172, 168, 0.93);
+--vscode-mergeEditor-conflict\.unhandled\.minimapOverViewRuler: #fcba03;
+--vscode-mergeEditor-conflictingLines\.background: rgba(255, 234, 0, 0.28);
+--vscode-mergeEditor-conflict\.input1\.background: rgba(64, 200, 174, 0.2);
+--vscode-mergeEditor-conflict\.input2\.background: rgba(64, 166, 255, 0.2);
+--vscode-terminal-ansiBlack: #000000;
+--vscode-terminal-ansiRed: #cd3131;
+--vscode-terminal-ansiGreen: #107c10;
+--vscode-terminal-ansiYellow: #949800;
+--vscode-terminal-ansiBlue: #0451a5;
+--vscode-terminal-ansiMagenta: #bc05bc;
+--vscode-terminal-ansiCyan: #0598bc;
+--vscode-terminal-ansiWhite: #555555;
+--vscode-terminal-ansiBrightBlack: #666666;
+--vscode-terminal-ansiBrightRed: #cd3131;
+--vscode-terminal-ansiBrightGreen: #14ce14;
+--vscode-terminal-ansiBrightYellow: #b5ba00;
+--vscode-terminal-ansiBrightBlue: #0451a5;
+--vscode-terminal-ansiBrightMagenta: #bc05bc;
+--vscode-terminal-ansiBrightCyan: #0598bc;
+--vscode-terminal-ansiBrightWhite: #a5a5a5;
+--vscode-simpleFindWidget-sashBorder: #c8c8c8;
+--vscode-terminalStickyScrollHover-background: #f0f0f0;
+--vscode-terminalCommandGuide-foreground: #e4e6f1;
+--vscode-terminalSymbolIcon-flagForeground: #d67e00;
+--vscode-terminalSymbolIcon-aliasForeground: #652d90;
+--vscode-terminalSymbolIcon-optionValueForeground: #007acc;
+--vscode-terminalSymbolIcon-methodForeground: #652d90;
+--vscode-terminalSymbolIcon-argumentForeground: #007acc;
+--vscode-terminalSymbolIcon-optionForeground: #d67e00;
+--vscode-terminalSymbolIcon-fileForeground: #616161;
+--vscode-terminalSymbolIcon-folderForeground: #616161;
+--vscode-welcomePage-tileBackground: #f3f3f3;
+--vscode-welcomePage-tileHoverBackground: #dbdbdb;
+--vscode-welcomePage-tileBorder: rgba(0, 0, 0, 0.1);
+--vscode-welcomePage-progress\.background: #ffffff;
+--vscode-welcomePage-progress\.foreground: #006ab1;
+--vscode-walkthrough-stepTitle\.foreground: #000000;
+--vscode-walkThrough-embeddedEditorBackground: #f4f4f4;
+--vscode-profiles-sashBorder: rgba(128, 128, 128, 0.35);
+--vscode-gitDecoration-addedResourceForeground: #587c0c;
+--vscode-gitDecoration-modifiedResourceForeground: #895503;
+--vscode-gitDecoration-deletedResourceForeground: #ad0707;
+--vscode-gitDecoration-renamedResourceForeground: #007100;
+--vscode-gitDecoration-untrackedResourceForeground: #007100;
+--vscode-gitDecoration-ignoredResourceForeground: #8e8e90;
+--vscode-gitDecoration-stageModifiedResourceForeground: #895503;
+--vscode-gitDecoration-stageDeletedResourceForeground: #ad0707;
+--vscode-gitDecoration-conflictingResourceForeground: #ad0707;
+--vscode-gitDecoration-submoduleResourceForeground: #1258a7;
+--vscode-git-blame\.editorDecorationForeground: #969696;
diff --git a/jetbrains/plugin/turbo.json b/jetbrains/plugin/turbo.json
new file mode 100644
index 000000000..03cd29abb
--- /dev/null
+++ b/jetbrains/plugin/turbo.json
@@ -0,0 +1,106 @@
+{
+	"$schema": "https://turbo.build/schema.json",
+	"extends": ["//"],
+	"tasks": {
+		"clean": {
+			"cache": false
+		},
+		"clean:resource-kilocode": {
+			"cache": false
+		},
+		"clean:resource-host": {
+			"cache": false
+		},
+		"clean:resource-logs": {
+			"cache": false
+		},
+		"clean:resource-nodemodules": {
+			"cache": false
+		},
+		"clean:kilocode": {
+			"cache": false
+		},
+		"copy:kilocode": {
+			"cache": false,
+			"dependsOn": ["clean:kilocode", "kilo-code#vsix:unpacked"]
+		},
+		"copy:resource-kilocode": {
+			"cache": false,
+			"dependsOn": ["clean:resource-kilocode", "kilo-code#vsix:unpacked"]
+		},
+		"copy:resource-host": {
+			"cache": false,
+			"dependsOn": [
+				"clean:resource-host",
+				"@kilo-code/jetbrains-host#bundle",
+				"@kilo-code/jetbrains-host#prop:deps"
+			]
+		},
+		"copy:resource-logs": {
+			"cache": false,
+			"dependsOn": ["clean:resource-logs"]
+		},
+		"copy:resource-nodemodules": {
+			"cache": false,
+			"inputs": ["../host/package.json", "../host/package-lock.json"],
+			"outputs": ["../resources/node_modules/**", "../resources/package.json", "../resources/package-lock.json"],
+			"dependsOn": ["clean:resource-nodemodules", "copy:resource-host"],
+			"env": ["PKG_CONFIG_PATH"]
+		},
+		"propDep": {
+			"inputs": ["../host/package.json", "../host/package-lock.json"],
+			"outputs": ["./prodDep.txt"],
+			"dependsOn": ["copy:resource-nodemodules"]
+		},
+		"sync:version": {
+			"cache": false,
+			"outputs": ["./gradle.properties"],
+			"inputs": ["../src/package.json"]
+		},
+		"sync:changelog": {
+			"cache": false,
+			"outputs": ["./src/main/resources/META-INF/plugin.xml"],
+			"inputs": ["./gradle.properties", "../../CHANGELOG.md"],
+			"dependsOn": ["sync:version"]
+		},
+		"build": {
+			"outputs": ["build/**"],
+			"inputs": ["src/**", "plugin/**"],
+			"dependsOn": [
+				"sync:version",
+				"sync:changelog",
+				"copy:kilocode",
+				"copy:resource-kilocode",
+				"copy:resource-host",
+				"copy:resource-logs",
+				"copy:resource-nodemodules",
+				"propDep"
+			]
+		},
+		"bundle": {
+			"cache": false,
+			"outputs": ["build/**"],
+			"inputs": ["src/**", "plugin/**"],
+			"dependsOn": [
+				"sync:version",
+				"sync:changelog",
+				"copy:kilocode",
+				"copy:resource-kilocode",
+				"copy:resource-host",
+				"copy:resource-logs",
+				"copy:resource-nodemodules",
+				"propDep"
+			]
+		},
+		"run": {
+			"cache": false,
+			"dependsOn": ["build"],
+			"env": ["DISPLAY", "XAUTHORITY", "XDG_RUNTIME_DIR", "WAYLAND_DISPLAY"]
+		},
+		"run:bundle": {
+			"cache": false,
+			"dependsOn": ["bundle"],
+			"env": ["DISPLAY", "XAUTHORITY", "XDG_RUNTIME_DIR", "WAYLAND_DISPLAY"]
+		}
+	}
+}
diff --git a/jetbrains/scripts/check-dependencies.js b/jetbrains/scripts/check-dependencies.js
new file mode 100755
index 000000000..2b6eaf8b2
--- /dev/null
+++ b/jetbrains/scripts/check-dependencies.js
@@ -0,0 +1,373 @@
+#!/usr/bin/env node
+
+/**
+ * JetBrains Plugin Dependency Check Script
+ * Cross-platform Node.js version that works on Windows, macOS, and Linux
+ */
+
+const fs = require("fs")
+const path = require("path")
+const { execSync, spawn } = require("child_process")
+
+// Colors for output (Windows compatible)
+const colors = {
+	red: "\x1b[31m",
+	green: "\x1b[32m",
+	yellow: "\x1b[33m",
+	blue: "\x1b[34m",
+	reset: "\x1b[0m",
+}
+
+// Paths
+const scriptDir = __dirname
+const projectRoot = path.resolve(scriptDir, "../..")
+const jetbrainsDir = path.resolve(scriptDir, "..")
+
+console.log(`${colors.blue}🔍 JetBrains Plugin Dependency Check${colors.reset}`)
+console.log(`Project root: ${projectRoot}`)
+console.log(`JetBrains dir: ${jetbrainsDir}`)
+console.log("")
+
+// Track issues
+let issuesFound = 0
+let fixesApplied = 0
+
+// Helper functions
+function printStatus(message) {
+	console.log(`${colors.blue}[CHECK]${colors.reset} ${message}`)
+}
+
+function printSuccess(message) {
+	console.log(`${colors.green}[✓]${colors.reset} ${message}`)
+}
+
+function printWarning(message) {
+	console.log(`${colors.yellow}[⚠]${colors.reset} ${message}`)
+}
+
+function printError(message) {
+	console.log(`${colors.red}[✗]${colors.reset} ${message}`)
+	issuesFound++
+}
+
+function printFix(message) {
+	console.log(`${colors.green}[FIX]${colors.reset} ${message}`)
+	fixesApplied++
+}
+
+function commandExists(command) {
+	try {
+		execSync(`${process.platform === "win32" ? "where" : "which"} ${command}`, {
+			stdio: "ignore",
+		})
+		return true
+	} catch {
+		return false
+	}
+}
+
+function runCommand(command, options = {}) {
+	try {
+		return execSync(command, {
+			encoding: "utf8",
+			stdio: "pipe",
+			...options,
+		}).trim()
+	} catch (error) {
+		return null
+	}
+}
+
+// Check functions
+function checkJava() {
+	printStatus("Checking Java installation...")
+
+	if (process.env.DEVENV === "nix") {
+		printSuccess("Nix environment detected, assuming Java is managed by Nix")
+		return true
+	}
+
+	if (!commandExists("java")) {
+		printError("Java is not installed or not in PATH")
+		console.log("  Install Java 17 (recommended):")
+		console.log("  - Windows: Download from https://openjdk.org/projects/jdk/17/")
+		console.log("  - macOS: brew install openjdk@17")
+		console.log("  - Linux: sudo apt install openjdk-17-jdk")
+		return false
+	}
+
+	const javaVersion = runCommand("java -version 2>&1")
+	if (!javaVersion) {
+		printError("Could not determine Java version")
+		return false
+	}
+
+	// Parse Java version - handle both old format (1.8.0_xxx) and new format (17.0.x)
+	let majorVersion = null
+	const newFormatMatch = javaVersion.match(/version "(\d+)\.(\d+)/)
+	const oldFormatMatch = javaVersion.match(/version "1\.(\d+)/)
+
+	if (newFormatMatch) {
+		majorVersion = newFormatMatch[1]
+	} else if (oldFormatMatch) {
+		majorVersion = oldFormatMatch[1]
+	}
+
+	// Check if we're in CI environment
+	const isCI = process.env.CI === "true" || process.env.GITHUB_ACTIONS === "true" || process.env.JENKINS_URL
+	const isWindows = process.platform === "win32"
+
+	if (majorVersion !== "17") {
+		if (isCI && isWindows) {
+			printWarning(`Java version is ${majorVersion}, but Java 17 is required for JetBrains plugin development`)
+			console.log(`  Current Java: ${javaVersion.split("\n")[0]}`)
+			console.log("  Windows CI Environment detected - JetBrains plugin build will be skipped")
+			console.log("  Note: JetBrains plugin requires Java 17, which is not available in this environment")
+			console.log("  This is expected behavior - JetBrains plugin builds are primarily tested on Linux/macOS CI")
+			return true // Allow CI to continue, but JetBrains build will be skipped
+		} else if (isCI) {
+			printWarning(`Java version is ${majorVersion}, but Java 17 is recommended for JetBrains plugin development`)
+			console.log(`  Current Java: ${javaVersion.split("\n")[0]}`)
+			console.log("  CI Environment detected - continuing with available Java version")
+			console.log(`  Note: Some features may not work correctly with Java ${majorVersion}`)
+			return true // Allow CI to continue with warning
+		} else {
+			printError(`Java version is ${majorVersion}, but Java 17 is required`)
+			console.log(`  Current Java: ${javaVersion.split("\n")[0]}`)
+			console.log("  Recommended fix:")
+			console.log("  - Windows: Download Java 17 from https://openjdk.org/projects/jdk/17/")
+			console.log("  - macOS: brew install openjdk@17 && export JAVA_HOME=$(/usr/libexec/java_home -v 17)")
+			console.log(
+				"  - Linux: sudo apt install openjdk-17-jdk && export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64",
+			)
+			return false
+		}
+	}
+
+	printSuccess("Java 17 is installed and active")
+	console.log(`  ${javaVersion.split("\n")[0]}`)
+	return true
+}
+
+function checkNode() {
+	printStatus("Checking Node.js installation...")
+
+	if (!commandExists("node")) {
+		printError("Node.js is not installed")
+		console.log("  Install Node.js 20.x:")
+		console.log("  - Use nvm: nvm install 20 && nvm use 20")
+		console.log("  - Or download from: https://nodejs.org/")
+		return false
+	}
+
+	const nodeVersion = runCommand("node -v")
+	if (!nodeVersion) {
+		printError("Could not determine Node.js version")
+		return false
+	}
+
+	const majorVersion = nodeVersion.replace("v", "").split(".")[0]
+	if (majorVersion !== "20") {
+		printWarning(`Node.js version is ${majorVersion}, recommended version is 20.x`)
+		console.log(`  Current Node.js: ${nodeVersion}`)
+	} else {
+		printSuccess("Node.js 20.x is installed")
+		console.log(`  Version: ${nodeVersion}`)
+	}
+	return true
+}
+
+function checkPnpm() {
+	printStatus("Checking pnpm installation...")
+
+	if (!commandExists("pnpm")) {
+		printError("pnpm is not installed")
+		console.log("  Install pnpm: npm install -g pnpm")
+		return false
+	}
+
+	const pnpmVersion = runCommand("pnpm -v")
+	printSuccess("pnpm is installed")
+	console.log(`  Version: ${pnpmVersion}`)
+	return true
+}
+
+function checkVscodeSubmodule() {
+	printStatus("Checking VSCode submodule...")
+
+	const vscodeDir = path.join(projectRoot, "deps", "vscode")
+
+	if (!fs.existsSync(vscodeDir)) {
+		printError(`VSCode submodule directory not found: ${vscodeDir}`)
+		return false
+	}
+
+	const srcDir = path.join(vscodeDir, "src")
+	if (!fs.existsSync(srcDir) || fs.readdirSync(srcDir).length === 0) {
+		printWarning("VSCode submodule is not initialized")
+		console.log("  Initializing VSCode submodule...")
+
+		process.chdir(projectRoot)
+		const result = runCommand("git submodule update --init --recursive")
+		if (result !== null) {
+			printFix("VSCode submodule initialized successfully")
+		} else {
+			printError("Failed to initialize VSCode submodule")
+			return false
+		}
+	} else {
+		printSuccess("VSCode submodule is initialized")
+	}
+
+	// Check if submodule has expected content
+	const expectedFile = path.join(vscodeDir, "src", "vs", "code", "electron-main", "main.ts")
+	if (fs.existsSync(expectedFile)) {
+		printSuccess("VSCode submodule contains expected files")
+	} else {
+		printError("VSCode submodule appears to be incomplete")
+		console.log(`  Expected file: ${expectedFile}`)
+		console.log("  Try: git submodule update --init --recursive --force")
+		return false
+	}
+
+	return true
+}
+
+function checkGradle() {
+	printStatus("Checking Gradle wrapper...")
+
+	const gradleWrapper = path.join(jetbrainsDir, "plugin", process.platform === "win32" ? "gradlew.bat" : "gradlew")
+
+	if (!fs.existsSync(gradleWrapper)) {
+		printError(`Gradle wrapper not found: ${gradleWrapper}`)
+		return false
+	}
+
+	// On Unix systems, check if executable
+	if (process.platform !== "win32") {
+		try {
+			const stats = fs.statSync(gradleWrapper)
+			if (!(stats.mode & parseInt("111", 8))) {
+				printWarning("Gradle wrapper is not executable, fixing...")
+				fs.chmodSync(gradleWrapper, "755")
+				printFix("Made Gradle wrapper executable")
+			}
+		} catch (error) {
+			printWarning("Could not check Gradle wrapper permissions")
+		}
+	}
+
+	printSuccess("Gradle wrapper is available")
+	return true
+}
+
+function checkProjectDependencies() {
+	printStatus("Checking project dependencies...")
+
+	process.chdir(projectRoot)
+
+	if (!fs.existsSync("node_modules") || !fs.existsSync("pnpm-lock.yaml")) {
+		printWarning("Project dependencies not installed")
+		console.log("  Installing dependencies with pnpm...")
+
+		const result = runCommand("pnpm install")
+		if (result !== null) {
+			printFix("Project dependencies installed successfully")
+		} else {
+			printError("Failed to install project dependencies")
+			return false
+		}
+	} else {
+		printSuccess("Project dependencies are installed")
+	}
+
+	return true
+}
+
+function checkJetbrainsHostDeps() {
+	printStatus("Checking JetBrains host dependencies...")
+
+	const hostDir = path.join(jetbrainsDir, "host")
+	const packageJson = path.join(hostDir, "package.json")
+	const tsconfig = path.join(hostDir, "tsconfig.json")
+
+	if (fs.existsSync(packageJson) && fs.existsSync(tsconfig)) {
+		printSuccess("JetBrains host is configured")
+	} else {
+		printError("JetBrains host configuration files are missing")
+		console.log("  Missing files: package.json or tsconfig.json")
+		return false
+	}
+
+	return true
+}
+
+function checkBuildSystem() {
+	printStatus("Checking build system...")
+
+	const pluginDir = path.join(jetbrainsDir, "plugin")
+	const gradlew = path.join(pluginDir, process.platform === "win32" ? "gradlew.bat" : "gradlew")
+	const buildGradle = path.join(pluginDir, "build.gradle.kts")
+	const gradleProps = path.join(pluginDir, "gradle.properties")
+
+	if (fs.existsSync(gradlew) && fs.existsSync(buildGradle) && fs.existsSync(gradleProps)) {
+		printSuccess("Gradle build system is configured")
+	} else {
+		printError("Gradle build system files are missing")
+		console.log("  Missing files: gradlew, build.gradle.kts, or gradle.properties")
+		return false
+	}
+
+	return true
+}
+
+// Main execution
+function main() {
+	console.log("Starting dependency checks...")
+	console.log("")
+
+	// Run all checks with error handling
+	const checks = [
+		checkJava,
+		checkNode,
+		checkPnpm,
+		checkVscodeSubmodule,
+		checkGradle,
+		checkProjectDependencies,
+		checkJetbrainsHostDeps,
+		checkBuildSystem,
+	]
+
+	checks.forEach((check) => {
+		try {
+			check()
+		} catch (error) {
+			console.log(`Warning: ${check.name} had issues: ${error.message}`)
+		}
+	})
+
+	console.log("")
+	console.log("==================================")
+
+	if (issuesFound === 0) {
+		printSuccess("All dependencies are properly configured!")
+		console.log("")
+		console.log("You can now build the JetBrains plugin:")
+		console.log("  Development: pnpm jetbrains:run")
+		console.log("  Production:  cd jetbrains/plugin && ./gradlew buildPlugin -PdebugMode=release")
+	} else {
+		printError(`Found ${issuesFound} issue(s) that need to be resolved`)
+		if (fixesApplied > 0) {
+			console.log(`${colors.green}Applied ${fixesApplied} automatic fix(es)${colors.reset}`)
+		}
+		console.log("")
+		console.log("Please resolve the issues above and run this script again.")
+		process.exit(1)
+	}
+
+	console.log("")
+	console.log("For more information, see jetbrains/README.md")
+}
+
+// Run main function
+main()
diff --git a/jetbrains/scripts/check-dependencies.sh b/jetbrains/scripts/check-dependencies.sh
new file mode 100755
index 000000000..fecd43934
--- /dev/null
+++ b/jetbrains/scripts/check-dependencies.sh
@@ -0,0 +1,313 @@
+#!/bin/bash
+
+# JetBrains Plugin Dependency Check Script
+# This script verifies and sets up all required dependencies for building the JetBrains plugin
+
+# Note: Removed 'set -e' to prevent silent failures in CI
+# We'll handle errors explicitly in each function
+
+# Colors for output
+RED='\033[0;31m'
+GREEN='\033[0;32m'
+YELLOW='\033[1;33m'
+BLUE='\033[0;34m'
+NC='\033[0m' # No Color
+
+# Script directory and project root
+SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
+PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"
+JETBRAINS_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"
+
+echo -e "${BLUE}🔍 JetBrains Plugin Dependency Check${NC}"
+echo "Project root: $PROJECT_ROOT"
+echo "JetBrains dir: $JETBRAINS_DIR"
+echo ""
+
+# Track issues found
+ISSUES_FOUND=0
+FIXES_APPLIED=0
+
+# Function to print status messages
+print_status() {
+    echo -e "${BLUE}[CHECK]${NC} $1"
+}
+
+print_success() {
+    echo -e "${GREEN}[✓]${NC} $1"
+}
+
+print_warning() {
+    echo -e "${YELLOW}[⚠]${NC} $1"
+}
+
+print_error() {
+    echo -e "${RED}[✗]${NC} $1"
+    ((ISSUES_FOUND++))
+}
+
+print_fix() {
+    echo -e "${GREEN}[FIX]${NC} $1"
+    ((FIXES_APPLIED++))
+}
+
+# Check if command exists
+command_exists() {
+    command -v "$1" >/dev/null 2>&1
+}
+
+# Check Java version
+check_java() {
+    print_status "Checking Java installation..."
+    
+    if ! command_exists java; then
+        print_error "Java is not installed or not in PATH"
+        echo "  Install Java 17 (recommended - SDKMAN):"
+        echo "  - curl -s \"https://get.sdkman.io\" | bash"
+        echo "  - source ~/.sdkman/bin/sdkman-init.sh"
+        echo "  - sdk install java 17.0.12-tem"
+        echo "  - sdk use java 17.0.12-tem"
+        echo ""
+        echo "  Alternative installations:"
+        echo "  - macOS: brew install openjdk@17"
+        echo "  - Linux: sudo apt install openjdk-17-jdk"
+        echo "  - Windows: Download from https://openjdk.org/projects/jdk/17/"
+        return 1
+    fi
+    
+    JAVA_VERSION=$(java -version 2>&1 | head -n1 | cut -d'"' -f2 | cut -d'.' -f1)
+    if [[ "$JAVA_VERSION" != "17" ]]; then
+        print_error "Java version is $JAVA_VERSION, but Java 17 is required"
+        echo "  Current Java: $(java -version 2>&1 | head -n1)"
+        echo "  Recommended fix (SDKMAN):"
+        echo "  - sdk install java 17.0.12-tem"
+        echo "  - sdk use java 17.0.12-tem"
+        echo ""
+        echo "  Alternative: Set JAVA_HOME to Java 17 installation"
+        return 1
+    fi
+    
+    print_success "Java 17 is installed and active"
+    java -version 2>&1 | head -n1 | sed 's/^/  /'
+    return 0
+}
+
+# Check Node.js version
+check_node() {
+    print_status "Checking Node.js installation..."
+    
+    if ! command_exists node; then
+        print_error "Node.js is not installed"
+        echo "  Install Node.js 20.x:"
+        echo "  - Use nvm: nvm install 20 && nvm use 20"
+        echo "  - Or download from: https://nodejs.org/"
+        return 1
+    fi
+    
+    NODE_VERSION=$(node -v | cut -d'v' -f2 | cut -d'.' -f1)
+    if [[ "$NODE_VERSION" != "20" ]]; then
+        print_warning "Node.js version is $NODE_VERSION, recommended version is 20.x"
+        echo "  Current Node.js: $(node -v)"
+    else
+        print_success "Node.js 20.x is installed"
+        echo "  Version: $(node -v)"
+    fi
+    return 0
+}
+
+# Check pnpm installation
+check_pnpm() {
+    print_status "Checking pnpm installation..."
+    
+    if ! command_exists pnpm; then
+        print_error "pnpm is not installed"
+        echo "  Install pnpm: npm install -g pnpm"
+        return 1
+    fi
+    
+    print_success "pnpm is installed"
+    echo "  Version: $(pnpm -v)"
+    return 0
+}
+
+# Check and initialize VSCode submodule
+check_vscode_submodule() {
+    print_status "Checking VSCode submodule..."
+    
+    VSCODE_DIR="$PROJECT_ROOT/deps/vscode"
+    
+    if [[ ! -d "$VSCODE_DIR" ]]; then
+        print_error "VSCode submodule directory not found: $VSCODE_DIR"
+        return 1
+    fi
+    
+    if [[ ! -d "$VSCODE_DIR/src" ]] || [[ -z "$(ls -A "$VSCODE_DIR/src" 2>/dev/null)" ]]; then
+        print_warning "VSCode submodule is not initialized"
+        echo "  Initializing VSCode submodule..."
+        
+        cd "$PROJECT_ROOT"
+        if git submodule update --init --recursive; then
+            print_fix "VSCode submodule initialized successfully"
+            # Ensure filesystem sync in CI environments
+            sleep 2
+            # Force filesystem sync
+            sync 2>/dev/null || true
+        else
+            print_error "Failed to initialize VSCode submodule"
+            return 1
+        fi
+    else
+        print_success "VSCode submodule is initialized"
+    fi
+    
+    # Check if submodule has content - with retry for CI environments
+    EXPECTED_FILE="$VSCODE_DIR/src/vs/code/electron-main/main.ts"
+    RETRY_COUNT=0
+    MAX_RETRIES=3
+    
+    while [[ $RETRY_COUNT -lt $MAX_RETRIES ]]; do
+        if [[ -f "$EXPECTED_FILE" ]]; then
+            print_success "VSCode submodule contains expected files"
+            break
+        else
+            if [[ $RETRY_COUNT -eq 0 ]]; then
+                print_warning "VSCode submodule file check failed, retrying..."
+            fi
+            ((RETRY_COUNT++))
+            if [[ $RETRY_COUNT -lt $MAX_RETRIES ]]; then
+                echo "  Waiting 2 seconds before retry $RETRY_COUNT/$MAX_RETRIES..."
+                sleep 2
+            else
+                print_error "VSCode submodule appears to be incomplete after $MAX_RETRIES attempts"
+                echo "  Expected file: $EXPECTED_FILE"
+                echo "  Directory contents:"
+                ls -la "$VSCODE_DIR/src/vs/code/electron-main/" 2>/dev/null || echo "    Directory does not exist"
+                echo "  Try: git submodule update --init --recursive --force"
+                return 1
+            fi
+        fi
+    done
+    return 0
+}
+
+# Check Gradle wrapper
+check_gradle() {
+    print_status "Checking Gradle wrapper..."
+    
+    GRADLE_WRAPPER="$JETBRAINS_DIR/plugin/gradlew"
+    
+    if [[ ! -f "$GRADLE_WRAPPER" ]]; then
+        print_error "Gradle wrapper not found: $GRADLE_WRAPPER"
+        return 1
+    fi
+    
+    if [[ ! -x "$GRADLE_WRAPPER" ]]; then
+        print_warning "Gradle wrapper is not executable, fixing..."
+        chmod +x "$GRADLE_WRAPPER"
+        print_fix "Made Gradle wrapper executable"
+    fi
+    
+    print_success "Gradle wrapper is available"
+    return 0
+}
+
+# Check project dependencies
+check_project_dependencies() {
+    print_status "Checking project dependencies..."
+    
+    cd "$PROJECT_ROOT"
+    
+    if [[ ! -d "node_modules" ]] || [[ ! -f "pnpm-lock.yaml" ]]; then
+        print_warning "Project dependencies not installed"
+        echo "  Installing dependencies with pnpm..."
+        
+        if pnpm install; then
+            print_fix "Project dependencies installed successfully"
+        else
+            print_error "Failed to install project dependencies"
+            return 1
+        fi
+    else
+        print_success "Project dependencies are installed"
+    fi
+    
+    return 0
+}
+
+# Check JetBrains host dependencies
+check_jetbrains_host_deps() {
+    print_status "Checking JetBrains host dependencies..."
+    
+    HOST_DIR="$JETBRAINS_DIR/host"
+    cd "$HOST_DIR"
+    
+    # Quick check - verify package.json and dist directory exist or can be built
+    if [[ -f "package.json" ]] && [[ -f "tsconfig.json" ]]; then
+        print_success "JetBrains host is configured"
+    else
+        print_error "JetBrains host configuration files are missing"
+        echo "  Missing files: package.json or tsconfig.json"
+        return 1
+    fi
+    
+    return 0
+}
+
+# Check build system
+check_build_system() {
+    print_status "Checking build system..."
+    
+    cd "$JETBRAINS_DIR/plugin"
+    
+    # Quick check - just verify Gradle wrapper and build files exist
+    if [[ -f "./gradlew" ]] && [[ -f "build.gradle.kts" ]] && [[ -f "gradle.properties" ]]; then
+        print_success "Gradle build system is configured"
+    else
+        print_error "Gradle build system files are missing"
+        echo "  Missing files: gradlew, build.gradle.kts, or gradle.properties"
+        return 1
+    fi
+    
+    return 0
+}
+
+
+# Main execution
+main() {
+    echo "Starting dependency checks..."
+    echo ""
+    
+    # Run all checks with error handling
+    check_java || echo "Warning: Java check had issues"
+    check_node || echo "Warning: Node check had issues"
+    check_pnpm || echo "Warning: pnpm check had issues"
+    check_vscode_submodule || echo "Warning: VSCode submodule check had issues"
+    check_gradle || echo "Warning: Gradle check had issues"
+    check_project_dependencies || echo "Warning: Project dependencies check had issues"
+    check_jetbrains_host_deps || echo "Warning: JetBrains host deps check had issues"
+    check_build_system || echo "Warning: Build system check had issues"
+    
+    echo ""
+    echo "=================================="
+    
+    if [[ $ISSUES_FOUND -eq 0 ]]; then
+        print_success "All dependencies are properly configured!"
+        echo ""
+        echo "You can now build the JetBrains plugin:"
+        echo "  Development: pnpm jetbrains:run"
+        echo "  Production:  cd jetbrains/plugin && ./gradlew buildPlugin -PdebugMode=release"
+    else
+        print_error "Found $ISSUES_FOUND issue(s) that need to be resolved"
+        if [[ $FIXES_APPLIED -gt 0 ]]; then
+            echo -e "${GREEN}Applied $FIXES_APPLIED automatic fix(es)${NC}"
+        fi
+        echo ""
+        echo "Please resolve the issues above and run this script again."
+        exit 1
+    fi
+    
+    echo ""
+    echo "For more information, see jetbrains/README.md"
+}
+
+# Run main function
+main "$@"
\ No newline at end of file
