
var Xye = x((fQt, Zye) => {
	"use strict"
	var o4 = My(),
		zye = Nx(),
		xht = Ws(),
		jye = GW(),
		_ht = jp(),
		wht = x0e(),
		Iht = w0e(),
		Sht = B0e(),
		Bht = R0e(),
		Dht = M0e(),
		Tht = Q0e(),
		Rht = P0e(),
		kht = U0e(),
		Mht = El(),
		Fht = H0e(),
		Qht = G0e(),
		Nht = Pk(),
		Pht = J0e(),
		Lht = j0e(),
		Uht = Lx(),
		Oht = Lk(),
		qht = YW(),
		Vht = KW(),
		Hht = Uk(),
		Wht = Ok(),
		Ght = JW(),
		$ht = oye(),
		Yht = Ux(),
		Kht = bl(),
		Jht = qx(),
		zht = Eye(),
		jht = xye(),
		Zht = wye(),
		Xht = Bye(),
		egt = Tye(),
		tgt = Hk(),
		rgt = Nye(),
		ngt = Lye(),
		igt = qye(),
		sgt = Hye(),
		ogt = Jye()
	Zye.exports = {
		parse: _ht,
		valid: wht,
		clean: Iht,
		inc: Sht,
		diff: Bht,
		major: Dht,
		minor: Tht,
		patch: Rht,
		prerelease: kht,
		compare: Mht,
		rcompare: Fht,
		compareLoose: Qht,
		compareBuild: Nht,
		sort: Pht,
		rsort: Lht,
		gt: Uht,
		lt: Oht,
		eq: qht,
		neq: Vht,
		gte: Hht,
		lte: Wht,
		cmp: Ght,
		coerce: $ht,
		Comparator: Yht,
		Range: Kht,
		satisfies: Jht,
		toComparators: zht,
		maxSatisfying: jht,
		minSatisfying: Zht,
		minVersion: Xht,
		validRange: egt,
		outside: tgt,
		gtr: rgt,
		ltr: ngt,
		intersects: igt,
		simplifyRange: sgt,
		subset: ogt,
		SemVer: xht,
		re: o4.re,
		src: o4.src,
		tokens: o4.t,
		SEMVER_SPEC_VERSION: zye.SEMVER_SPEC_VERSION,
		RELEASE_TYPES: zye.RELEASE_TYPES,
		compareIdentifiers: jye.compareIdentifiers,
		rcompareIdentifiers: jye.rcompareIdentifiers,
	}
})