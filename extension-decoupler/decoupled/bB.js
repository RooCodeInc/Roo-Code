
var Bb = x(($St, vle) => {
	"use strict"
	var Nn = Yt()
	rT()
	f5()
	Sr()
	vle.exports = Nn.des = Nn.des || {}
	Nn.des.startEncrypting = function (e, t, r, n) {
		var i = fT({
			key: e,
			output: r,
			decrypt: !1,
			mode: n || (t === null ? "ECB" : "CBC"),
		})
		return i.start(t), i
	}
	Nn.des.createEncryptionCipher = function (e, t) {
		return fT({ key: e, output: null, decrypt: !1, mode: t })
	}
	Nn.des.startDecrypting = function (e, t, r, n) {
		var i = fT({
			key: e,
			output: r,
			decrypt: !0,
			mode: n || (t === null ? "ECB" : "CBC"),
		})
		return i.start(t), i
	}
	Nn.des.createDecryptionCipher = function (e, t) {
		return fT({ key: e, output: null, decrypt: !0, mode: t })
	}
	Nn.des.Algorithm = function (e, t) {
		var r = this
		;(r.name = e),
			(r.mode = new t({
				blockSize: 8,
				cipher: {
					encrypt: function (n, i) {
						return Cle(r._keys, n, i, !1)
					},
					decrypt: function (n, i) {
						return Cle(r._keys, n, i, !0)
					},
				},
			})),
			(r._init = !1)
	}
	Nn.des.Algorithm.prototype.initialize = function (e) {
		if (!this._init) {
			var t = Nn.util.createBuffer(e.key)
			if (this.name.indexOf("3DES") === 0 && t.length() !== 24)
				throw new Error("Invalid Triple-DES key size: " + t.length() * 8)
			;(this._keys = Kje(t)), (this._init = !0)
		}
	}
	hu("DES-ECB", Nn.cipher.modes.ecb)
	hu("DES-CBC", Nn.cipher.modes.cbc)
	hu("DES-CFB", Nn.cipher.modes.cfb)
	hu("DES-OFB", Nn.cipher.modes.ofb)
	hu("DES-CTR", Nn.cipher.modes.ctr)
	hu("3DES-ECB", Nn.cipher.modes.ecb)
	hu("3DES-CBC", Nn.cipher.modes.cbc)
	hu("3DES-CFB", Nn.cipher.modes.cfb)
	hu("3DES-OFB", Nn.cipher.modes.ofb)
	hu("3DES-CTR", Nn.cipher.modes.ctr)
	function hu(e, t) {
		var r = function () {
			return new Nn.des.Algorithm(e, t)
		}
		Nn.cipher.registerAlgorithm(e, r)
	}
	var Oje = [
			16843776, 0, 65536, 16843780, 16842756, 66564, 4, 65536, 1024, 16843776, 16843780, 1024, 16778244, 16842756,
			16777216, 4, 1028, 16778240, 16778240, 66560, 66560, 16842752, 16842752, 16778244, 65540, 16777220,
			16777220, 65540, 0, 1028, 66564, 16777216, 65536, 16843780, 4, 16842752, 16843776, 16777216, 16777216, 1024,
			16842756, 65536, 66560, 16777220, 1024, 4, 16778244, 66564, 16843780, 65540, 16842752, 16778244, 16777220,
			1028, 66564, 16843776, 1028, 16778240, 16778240, 0, 65540, 66560, 0, 16842756,
		],
		qje = [
			-2146402272, -2147450880, 32768, 1081376, 1048576, 32, -2146435040, -2147450848, -2147483616, -2146402272,
			-2146402304, -2147483648, -2147450880, 1048576, 32, -2146435040, 1081344, 1048608, -2147450848, 0,
			-2147483648, 32768, 1081376, -2146435072, 1048608, -2147483616, 0, 1081344, 32800, -2146402304, -2146435072,
			32800, 0, 1081376, -2146435040, 1048576, -2147450848, -2146435072, -2146402304, 32768, -2146435072,
			-2147450880, 32, -2146402272, 1081376, 32, 32768, -2147483648, 32800, -2146402304, 1048576, -2147483616,
			1048608, -2147450848, -2147483616, 1048608, 1081344, 0, -2147450880, 32800, -2147483648, -2146435040,
			-2146402272, 1081344,
		],
		Vje = [
			520, 134349312, 0, 134348808, 134218240, 0, 131592, 134218240, 131080, 134217736, 134217736, 131072,
			134349320, 131080, 134348800, 520, 134217728, 8, 134349312, 512, 131584, 134348800, 134348808, 131592,
			134218248, 131584, 131072, 134218248, 8, 134349320, 512, 134217728, 134349312, 134217728, 131080, 520,
			131072, 134349312, 134218240, 0, 512, 131080, 134349320, 134218240, 134217736, 512, 0, 134348808, 134218248,
			131072, 134217728, 134349320, 8, 131592, 131584, 134217736, 134348800, 134218248, 520, 134348800, 131592, 8,
			134348808, 131584,
		],
		Hje = [
			8396801, 8321, 8321, 128, 8396928, 8388737, 8388609, 8193, 0, 8396800, 8396800, 8396929, 129, 0, 8388736,
			8388609, 1, 8192, 8388608, 8396801, 128, 8388608, 8193, 8320, 8388737, 1, 8320, 8388736, 8192, 8396928,
			8396929, 129, 8388736, 8388609, 8396800, 8396929, 129, 0, 0, 8396800, 8320, 8388736, 8388737, 1, 8396801,
			8321, 8321, 128, 8396929, 129, 1, 8192, 8388609, 8193, 8396928, 8388737, 8193, 8320, 8388608, 8396801, 128,
			8388608, 8192, 8396928,
		],
		Wje = [
			256, 34078976, 34078720, 1107296512, 524288, 256, 1073741824, 34078720, 1074266368, 524288, 33554688,
			1074266368, 1107296512, 1107820544, 524544, 1073741824, 33554432, 1074266112, 1074266112, 0, 1073742080,
			1107820800, 1107820800, 33554688, 1107820544, 1073742080, 0, 1107296256, 34078976, 33554432, 1107296256,
			524544, 524288, 1107296512, 256, 33554432, 1073741824, 34078720, 1107296512, 1074266368, 33554688,
			1073741824, 1107820544, 34078976, 1074266368, 256, 33554432, 1107820544, 1107820800, 524544, 1107296256,
			1107820800, 34078720, 0, 1074266112, 1107296256, 524544, 33554688, 1073742080, 524288, 0, 1074266112,
			34078976, 1073742080,
		],
		Gje = [
			536870928, 541065216, 16384, 541081616, 541065216, 16, 541081616, 4194304, 536887296, 4210704, 4194304,
			536870928, 4194320, 536887296, 536870912, 16400, 0, 4194320, 536887312, 16384, 4210688, 536887312, 16,
			541065232, 541065232, 0, 4210704, 541081600, 16400, 4210688, 541081600, 536870912, 536887296, 16, 541065232,
			4210688, 541081616, 4194304, 16400, 536870928, 4194304, 536887296, 536870912, 16400, 536870928, 541081616,
			4210688, 541065216, 4210704, 541081600, 0, 541065232, 16, 16384, 541065216, 4210704, 16384, 4194320,
			536887312, 0, 541081600, 536870912, 4194320, 536887312,
		],
		$je = [
			2097152, 69206018, 67110914, 0, 2048, 67110914, 2099202, 69208064, 69208066, 2097152, 0, 67108866, 2,
			67108864, 69206018, 2050, 67110912, 2099202, 2097154, 67110912, 67108866, 69206016, 69208064, 2097154,
			69206016, 2048, 2050, 69208066, 2099200, 2, 67108864, 2099200, 67108864, 2099200, 2097152, 67110914,
			67110914, 69206018, 69206018, 2, 2097154, 67108864, 67110912, 2097152, 69208064, 2050, 2099202, 69208064,
			2050, 67108866, 69208066, 69206016, 2099200, 0, 2, 69208066, 0, 2099202, 69206016, 2048, 67108866, 67110912,
			2048, 2097154,
		],
		Yje = [
			268439616, 4096, 262144, 268701760, 268435456, 268439616, 64, 268435456, 262208, 268697600, 268701760,
			266240, 268701696, 266304, 4096, 64, 268697600, 268435520, 268439552, 4160, 266240, 262208, 268697664,
			268701696, 4160, 0, 0, 268697664, 268435520, 268439552, 266304, 262144, 266304, 262144, 268701696, 4096, 64,
			268697664, 4096, 266304, 268439552, 64, 268435520, 268697600, 268697664, 268435456, 262144, 268439616, 0,
			268701760, 262208, 268435520, 268697600, 268439552, 268439616, 0, 268701760, 266240, 266240, 4160, 4160,
			262208, 268435456, 268701696,
		]
	function Kje(e) {
		for (
			var t = [
					0, 4, 536870912, 536870916, 65536, 65540, 536936448, 536936452, 512, 516, 536871424, 536871428,
					66048, 66052, 536936960, 536936964,
				],
				r = [
					0, 1, 1048576, 1048577, 67108864, 67108865, 68157440, 68157441, 256, 257, 1048832, 1048833,
					67109120, 67109121, 68157696, 68157697,
				],
				n = [
					0, 8, 2048, 2056, 16777216, 16777224, 16779264, 16779272, 0, 8, 2048, 2056, 16777216, 16777224,
					16779264, 16779272,
				],
				i = [
					0, 2097152, 134217728, 136314880, 8192, 2105344, 134225920, 136323072, 131072, 2228224, 134348800,
					136445952, 139264, 2236416, 134356992, 136454144,
				],
				s = [
					0, 262144, 16, 262160, 0, 262144, 16, 262160, 4096, 266240, 4112, 266256, 4096, 266240, 4112,
					266256,
				],
				o = [
					0, 1024, 32, 1056, 0, 1024, 32, 1056, 33554432, 33555456, 33554464, 33555488, 33554432, 33555456,
					33554464, 33555488,
				],
				a = [
					0, 268435456, 524288, 268959744, 2, 268435458, 524290, 268959746, 0, 268435456, 524288, 268959744,
					2, 268435458, 524290, 268959746,
				],
				l = [
					0, 65536, 2048, 67584, 536870912, 536936448, 536872960, 536938496, 131072, 196608, 133120, 198656,
					537001984, 537067520, 537004032, 537069568,
				],
				c = [
					0, 262144, 0, 262144, 2, 262146, 2, 262146, 33554432, 33816576, 33554432, 33816576, 33554434,
					33816578, 33554434, 33816578,
				],
				u = [
					0, 268435456, 8, 268435464, 0, 268435456, 8, 268435464, 1024, 268436480, 1032, 268436488, 1024,
					268436480, 1032, 268436488,
				],
				f = [
					0, 32, 0, 32, 1048576, 1048608, 1048576, 1048608, 8192, 8224, 8192, 8224, 1056768, 1056800, 1056768,
					1056800,
				],
				p = [
					0, 16777216, 512, 16777728, 2097152, 18874368, 2097664, 18874880, 67108864, 83886080, 67109376,
					83886592, 69206016, 85983232, 69206528, 85983744,
				],
				g = [
					0, 4096, 134217728, 134221824, 524288, 528384, 134742016, 134746112, 16, 4112, 134217744, 134221840,
					524304, 528400, 134742032, 134746128,
				],
				m = [0, 4, 256, 260, 0, 4, 256, 260, 1, 5, 257, 261, 1, 5, 257, 261],
				y = e.length() > 8 ? 3 : 1,
				C = [],
				v = [0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0],
				b = 0,
				w,
				B = 0;
			B < y;
			B++
		) {
			var M = e.getInt32(),
				Q = e.getInt32()
			;(w = ((M >>> 4) ^ Q) & 252645135),
				(Q ^= w),
				(M ^= w << 4),
				(w = ((Q >>> -16) ^ M) & 65535),
				(M ^= w),
				(Q ^= w << -16),
				(w = ((M >>> 2) ^ Q) & 858993459),
				(Q ^= w),
				(M ^= w << 2),
				(w = ((Q >>> -16) ^ M) & 65535),
				(M ^= w),
				(Q ^= w << -16),
				(w = ((M >>> 1) ^ Q) & 1431655765),
				(Q ^= w),
				(M ^= w << 1),
				(w = ((Q >>> 8) ^ M) & 16711935),
				(M ^= w),
				(Q ^= w << 8),
				(w = ((M >>> 1) ^ Q) & 1431655765),
				(Q ^= w),
				(M ^= w << 1),
				(w = (M << 8) | ((Q >>> 20) & 240)),
				(M = (Q << 24) | ((Q << 8) & 16711680) | ((Q >>> 8) & 65280) | ((Q >>> 24) & 240)),
				(Q = w)
			for (var O = 0; O < v.length; ++O) {
				v[O]
					? ((M = (M << 2) | (M >>> 26)), (Q = (Q << 2) | (Q >>> 26)))
					: ((M = (M << 1) | (M >>> 27)), (Q = (Q << 1) | (Q >>> 27))),
					(M &= -15),
					(Q &= -15)
				var Y =
						t[M >>> 28] |
						r[(M >>> 24) & 15] |
						n[(M >>> 20) & 15] |
						i[(M >>> 16) & 15] |
						s[(M >>> 12) & 15] |
						o[(M >>> 8) & 15] |
						a[(M >>> 4) & 15],
					j =
						l[Q >>> 28] |
						c[(Q >>> 24) & 15] |
						u[(Q >>> 20) & 15] |
						f[(Q >>> 16) & 15] |
						p[(Q >>> 12) & 15] |
						g[(Q >>> 8) & 15] |
						m[(Q >>> 4) & 15]
				;(w = ((j >>> 16) ^ Y) & 65535), (C[b++] = Y ^ w), (C[b++] = j ^ (w << 16))
			}
		}
		return C
	}
	function Cle(e, t, r, n) {
		var i = e.length === 32 ? 3 : 9,
			s
		i === 3
			? (s = n ? [30, -2, -2] : [0, 32, 2])
			: (s = n ? [94, 62, -2, 32, 64, 2, 30, -2, -2] : [0, 32, 2, 62, 30, -2, 64, 96, 2])
		var o,
			a = t[0],
			l = t[1]
		;(o = ((a >>> 4) ^ l) & 252645135),
			(l ^= o),
			(a ^= o << 4),
			(o = ((a >>> 16) ^ l) & 65535),
			(l ^= o),
			(a ^= o << 16),
			(o = ((l >>> 2) ^ a) & 858993459),
			(a ^= o),
			(l ^= o << 2),
			(o = ((l >>> 8) ^ a) & 16711935),
			(a ^= o),
			(l ^= o << 8),
			(o = ((a >>> 1) ^ l) & 1431655765),
			(l ^= o),
			(a ^= o << 1),
			(a = (a << 1) | (a >>> 31)),
			(l = (l << 1) | (l >>> 31))
		for (var c = 0; c < i; c += 3) {
			for (var u = s[c + 1], f = s[c + 2], p = s[c]; p != u; p += f) {
				var g = l ^ e[p],
					m = ((l >>> 4) | (l << 28)) ^ e[p + 1]
				;(o = a),
					(a = l),
					(l =
						o ^
						(qje[(g >>> 24) & 63] |
							Hje[(g >>> 16) & 63] |
							Gje[(g >>> 8) & 63] |
							Yje[g & 63] |
							Oje[(m >>> 24) & 63] |
							Vje[(m >>> 16) & 63] |
							Wje[(m >>> 8) & 63] |
							$je[m & 63]))
			}
			;(o = a), (a = l), (l = o)
		}
		;(a = (a >>> 1) | (a << 31)),
			(l = (l >>> 1) | (l << 31)),
			(o = ((a >>> 1) ^ l) & 1431655765),
			(l ^= o),
			(a ^= o << 1),
			(o = ((l >>> 8) ^ a) & 16711935),
			(a ^= o),
			(l ^= o << 8),
			(o = ((l >>> 2) ^ a) & 858993459),
			(a ^= o),
			(l ^= o << 2),
			(o = ((a >>> 16) ^ l) & 65535),
			(l ^= o),
			(a ^= o << 16),
			(o = ((a >>> 4) ^ l) & 252645135),
			(l ^= o),
			(a ^= o << 4),
			(r[0] = a),
			(r[1] = l)
	}
	function fT(e) {
		e = e || {}
		var t = (e.mode || "CBC").toUpperCase(),
			r = "DES-" + t,
			n
		e.decrypt ? (n = Nn.cipher.createDecipher(r, e.key)) : (n = Nn.cipher.createCipher(r, e.key))
		var i = n.start
		return (
			(n.start = function (s, o) {
				var a = null
				o instanceof Nn.util.ByteBuffer && ((a = o), (o = {})),
					(o = o || {}),
					(o.output = a),
					(o.iv = s),
					i.call(n, o)
			}),
			n
		)
	}
})