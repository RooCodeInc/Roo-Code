
var JMe = (e, t = { message: `Input not instance of ${e.name}` }) => bY((r) => r instanceof e, t),
	xY = kf.create,
	_Y = Ig.create,
	zMe = am.create,
	jMe = Sg.create,
	wY = Bg.create,
	ZMe = Dg.create,
	XMe = nm.create,
	eFe = Tg.create,
	tFe = Rg.create,
	rFe = Mf.create,
	nFe = yd.create,
	iFe = zl.create,
	sFe = im.create,
	oFe = Cd.create,
	aFe = To.create,
	lFe = To.strictCreate,
	cFe = kg.create,
	uFe = BI.create,
	dFe = Mg.create,
	fFe = Yc.create,
	hFe = DI.create,
	gFe = sm.create,
	pFe = om.create,
	AFe = TI.create,
	mFe = Fg.create,
	yFe = Qg.create,
	CFe = Ng.create,
	vFe = Pg.create,
	EFe = Ff.create,
	pY = da.create,
	bFe = Ja.create,
	xFe = Kc.create,
	_Fe = da.createWithPreprocess,
	wFe = Nv.create,
	IFe = () => xY().optional(),
	SFe = () => _Y().optional(),
	BFe = () => wY().optional(),
	DFe = {
		string: (e) => kf.create({ ...e, coerce: !0 }),
		number: (e) => Ig.create({ ...e, coerce: !0 }),
		boolean: (e) => Bg.create({ ...e, coerce: !0 }),
		bigint: (e) => Sg.create({ ...e, coerce: !0 }),
		date: (e) => Dg.create({ ...e, coerce: !0 }),
	},
	TFe = vt,
	R = Object.freeze({
		__proto__: null,
		defaultErrorMap: rm,
		setErrorMap: _Me,
		getErrorMap: wI,
		makeIssue: II,
		EMPTY_PATH: wMe,
		addIssueToContext: Re,
		ParseStatus: Ms,
		INVALID: vt,
		DIRTY: tm,
		OK: ro,
		isAborted: pP,
		isDirty: AP,
		isValid: wg,
		isAsync: Fv,
		get util() {
			return vr
		},
		get objectUtil() {
			return gP
		},
		ZodParsedType: Pe,
		getParsedType: md,
		ZodType: Pt,
		datetimeRegex: vY,
		ZodString: kf,
		ZodNumber: Ig,
		ZodBigInt: Sg,
		ZodBoolean: Bg,
		ZodDate: Dg,
		ZodSymbol: nm,
		ZodUndefined: Tg,
		ZodNull: Rg,
		ZodAny: Mf,
		ZodUnknown: yd,
		ZodNever: zl,
		ZodVoid: im,
		ZodArray: Cd,
		ZodObject: To,
		ZodUnion: kg,
		ZodDiscriminatedUnion: BI,
		ZodIntersection: Mg,
		ZodTuple: Yc,
		ZodRecord: DI,
		ZodMap: sm,
		ZodSet: om,
		ZodFunction: TI,
		ZodLazy: Fg,
		ZodLiteral: Qg,
		ZodEnum: Ng,
		ZodNativeEnum: Pg,
		ZodPromise: Ff,
		ZodEffects: da,
		ZodTransformer: da,
		ZodOptional: Ja,
		ZodNullable: Kc,
		ZodDefault: Lg,
		ZodCatch: Ug,
		ZodNaN: am,
		BRAND: YMe,
		ZodBranded: Qv,
		ZodPipeline: Nv,
		ZodReadonly: Og,
		custom: bY,
		Schema: Pt,
		ZodSchema: Pt,
		late: KMe,
		get ZodFirstPartyTypeKind() {
			return At
		},
		coerce: DFe,
		any: rFe,
		array: oFe,
		bigint: jMe,
		boolean: wY,
		date: ZMe,
		discriminatedUnion: uFe,
		effect: pY,
		enum: CFe,
		function: AFe,
		instanceof: JMe,
		intersection: dFe,
		lazy: mFe,
		literal: yFe,
		map: gFe,
		nan: zMe,
		nativeEnum: vFe,
		never: iFe,
		null: tFe,
		nullable: xFe,
		number: _Y,
		object: aFe,
		oboolean: BFe,
		onumber: SFe,
		optional: bFe,
		ostring: IFe,
		pipeline: wFe,
		preprocess: _Fe,
		promise: EFe,
		record: hFe,
		set: pFe,
		strictObject: lFe,
		string: xY,
		symbol: XMe,
		transformer: pY,
		tuple: fFe,
		undefined: eFe,
		union: cFe,
		unknown: nFe,
		void: sFe,
		NEVER: TFe,
		ZodIssueCode: ve,
		quotelessJson: xMe,
		ZodError: ua,
	})