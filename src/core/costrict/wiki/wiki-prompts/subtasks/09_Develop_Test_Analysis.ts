import { WIKI_OUTPUT_DIR, SUBTASK_OUTPUT_FILENAMES } from "./constants"

export const DEVELOP_TEST_ANALYSIS_TEMPLATE = `# 开发测试深度分析

## 使用场景
从代码仓库中分析项目的开发环境和测试环境，生成详细的开发测试技术文档，包括项目启动机制、环境搭建、配置管理、调试机制、测试框架、测试运行等，为AI编程提供精准的开发测试上下文信息。

## 输入要求
- **完整代码仓库**: 项目的完整源代码
- **配置文件**: 所有开发和测试相关的配置文件
- **脚本文件**: 启动脚本、构建脚本、测试脚本等
- **文档文件**: 开发环境搭建、测试环境配置等相关文档

# 开发测试深度分析任务

## 任务描述
请深度分析项目中的开发环境和测试环境，从项目启动机制、环境搭建、配置管理、调试机制、测试框架、测试运行等维度生成完整的开发测试技术文档，重点分析开发机制（60%）和测试机制（40%）。

## 分析维度

### 1. 开发环境分析 (60%)

#### 1.1 项目启动机制分析
**目标**: 分析项目启动流程，提供可执行的启动指导

**执行步骤**:
1. **启动脚本扫描**: 查找包管理文件和启动脚本
2. **启动流程解析**: 分析主应用、子模块启动机制和依赖关系
3. **启动机制输出**:
   \`\`\`markdown
   ## 项目启动机制
   ### 启动命令清单
   | 应用类型 | 启动命令 | 配置文件 | 端口 | 依赖关系 | 启动顺序 |
   |---------|---------|---------|------|---------|---------|
   | 主应用 | npm run dev | package.json | 3000 | 无 | 1 |
   | API服务 | npm run start:api | package.json | 3001 | 主应用 | 2 |
   
   ### 启动流程图
   \`\`\`mermaid
   graph TD
       A[环境检查] --> B[依赖安装]
       B --> C[配置加载]
       C --> D[主应用启动]
       D --> E[启动完成]
   \`\`\`
   \`\`\`

#### 1.2 环境搭建分析
**目标**: 分析环境搭建流程，提供环境配置指导

**执行步骤**:
1. **环境依赖扫描**: 数据库、中间件、系统依赖分析
2. **环境配置分析**: 环境变量、配置文件、多环境支持
3. **环境搭建输出**:
   \`\`\`markdown
   ## 环境搭建指南
   ### 环境依赖清单
   | 依赖类型 | 依赖名称 | 版本要求 | 安装方式 | 配置文件 |
   |---------|----------|----------|----------|----------|
   | 数据库 | PostgreSQL | 14+ | Docker | docker-compose.yml |
   | 缓存 | Redis | 6+ | Docker | docker-compose.yml |
   
   ### 环境变量配置
   \`\`\`bash
   # 必需环境变量
   export DATABASE_URL="postgresql://user:pass@localhost:5432/db"
   export REDIS_URL="redis://localhost:6379"
   export NODE_ENV="development"
   \`\`\`
   \`\`\`

#### 1.3 配置管理分析
**目标**: 分析配置管理机制，提供配置优化建议

**执行步骤**:
1. **配置文件扫描**: 开发、测试、生产环境配置文件
2. **配置机制分析**: 配置加载、验证、热更新机制
3. **配置管理输出**:
   \`\`\`markdown
   ## 配置管理机制
   ### 配置文件清单
   | 配置文件 | 环境类型 | 主要配置项 | 配置格式 | 加载优先级 |
   |---------|----------|-----------|----------|-----------|
   | config.dev.json | 开发环境 | 数据库、API端口 | JSON | 1 |
   | config.test.json | 测试环境 | 测试数据库、Mock | JSON | 2 |
   
   ### 配置加载机制
   \`\`\`mermaid
   graph TD
       A[应用启动] --> B[基础配置加载]
       B --> C[环境变量覆盖]
       C --> D[配置文件加载]
       D --> E[配置验证]
       E --> F[配置生效]
   \`\`\`
   \`\`\`

#### 1.4 调试机制分析
**目标**: 分析调试配置，提供调试指导

**执行步骤**:
1. **调试配置扫描**: IDE调试、浏览器调试、远程调试配置
2. **调试环境分析**: 调试器配置、源码映射、断点设置
3. **调试机制输出**:
   \`\`\`markdown
   ## 调试机制配置
   ### 调试配置清单
   | 调试类型 | 配置文件 | 调试端口 | 源码映射 | 支持功能 |
   |---------|----------|----------|----------|----------|
   | VSCode调试 | .vscode/launch.json | 9229 | 启用 | 断点、变量查看 |
   | Chrome调试 | devtools | 9229 | 启用 | 元素检查、网络分析 |
   
   ### 调试操作指南
   - **VSCode调试**: 设置断点(F9) → 启动调试(F5) → 单步执行(F10/F11)
   - **浏览器调试**: 启动开发服务器 → 打开开发者工具(F12) → Sources面板调试
   - **调试技巧**: 条件断点、日志断点、异常断点、远程调试
   \`\`\`

#### 1.5 代码组织结构分析
**目标**: 分析项目结构，提供开发指导

**执行步骤**:
1. **项目结构扫描**: 目录结构、模块划分、文件组织分析
2. **设计模式分析**: 架构模式识别、设计模式应用、最佳实践
3. **代码组织输出**:
   \`\`\`markdown
   ## 代码组织结构
   ### 目录结构分析
   | 目录路径 | 主要职责 | 文件类型 | 设计模式 | 开发建议 |
   |----------|----------|----------|----------|----------|
   | src/components | UI组件 | .tsx/.vue | 组件模式 | 单一职责 |
   | src/services | 业务逻辑 | .ts | 服务模式 | 依赖注入 |
   | src/utils | 工具函数 | .ts | 工具模式 | 纯函数 |
   
   ### 设计模式应用
   | 设计模式 | 应用位置 | 使用场景 | 注意事项 |
   |----------|----------|----------|----------|
   | MVC | 整体架构 | 分层架构 | 避免过度设计 |
   | 单例模式 | 配置管理 | 全局配置 | 避免滥用 |
   \`\`\`

### 2. 测试环境分析 (40%)

#### 2.1 测试框架配置
**目标**: 分析测试框架配置，提供测试环境指导

**执行步骤**:
1. **测试框架扫描**: 单元测试、集成测试、E2E测试框架
2. **测试环境分析**: 测试数据库、Mock配置、环境变量
3. **测试框架输出**:
   \`\`\`markdown
   ## 测试框架配置
   ### 测试框架清单
   | 测试类型 | 框架名称 | 配置文件 | 测试环境 | 覆盖率要求 | 主要特性 |
   |----------|----------|----------|----------|------------|----------|
   | 单元测试 | Jest | jest.config.js | Node.js | >80% | Mock、快照 |
   | 集成测试 | Vitest | vitest.config.ts | Node.js | >70% | 快速执行 |
   | E2E测试 | Cypress | cypress.config.js | 浏览器 | >60% | 真实环境 |
   
   ### 测试环境配置
   | 环境类型 | 数据库配置 | Mock配置 | 环境变量 | 清理策略 |
   |----------|-----------|----------|----------|----------|
   | 单元测试 | 内存数据库 | 全量Mock | TEST=true | 自动清理 |
   | 集成测试 | 测试数据库 | 部分Mock | TEST_ENV=integration | 事务回滚 |
   | E2E测试 | 专用数据库 | 最小Mock | TEST_ENV=e2e | 数据重置 |
   \`\`\`

#### 2.2 测试运行机制分析
**目标**: 分析测试运行机制，提供执行指导

**执行步骤**:
1. **测试脚本分析**: 测试命令、运行参数、过滤机制
2. **测试执行分析**: 执行顺序、并行执行、超时处理
3. **测试运行输出**:
   \`\`\`markdown
   ## 测试运行机制
   ### 测试命令清单
   | 测试类型 | 执行命令 | 执行目录 | 监听模式 | 并行执行 | 超时设置 |
   |----------|----------|----------|----------|----------|----------|
   | 单元测试 | npm run test:unit | src/ | --watch | 是 | 5000ms |
   | 集成测试 | npm run test:integration | tests/ | 否 | 是 | 10000ms |
   | E2E测试 | npm run test:e2e | tests/e2e/ | 否 | 否 | 30000ms |
   
   ### 测试执行流程
   \`\`\`mermaid
   graph TD
       A[测试启动] --> B[环境初始化]
       B --> C[测试文件发现]
       C --> D[测试用例执行]
       D --> E[结果收集]
       E --> F[报告生成]
   \`\`\`
   
   ### 常用测试命令
   \`\`\`bash
   # 运行所有测试
   npm test
   
   # 运行特定类型测试
   npm run test:unit
   npm run test:integration
   npm run test:e2e
   
   # 运行带覆盖率的测试
   npm run test:coverage
   
   # 监听模式运行测试
   npm run test:watch
   \`\`\`
   \`\`\`

#### 2.3 测试组织结构分析
**目标**: 分析测试组织结构，提供测试编写指导

**执行步骤**:
1. **测试结构扫描**: 测试目录结构、文件命名、用例组织
2. **测试分类分析**: 单元测试、集成测试、组件测试、E2E测试结构
3. **测试组织输出**:
   \`\`\`markdown
   ## 测试组织结构
   ### 测试目录结构
   | 测试类型 | 目录路径 | 文件命名规范 | 测试重点 | 测试数据管理 |
   |----------|----------|-------------|----------|--------------|
   | 单元测试 | tests/unit/ | *.unit.test.ts | 核心逻辑 | Mock数据 |
   | 集成测试 | tests/integration/ | *.integration.test.ts | 模块交互 | 测试数据库 |
   | 组件测试 | tests/components/ | *.component.test.ts | UI组件 | 测试工厂 |
   | E2E测试 | tests/e2e/ | *.e2e.test.ts | 完整流程 | 真实数据 |
   
   ### 测试编写模板
   #### 单元测试模板
   \`\`\`typescript
   import { UserService } from '../services/UserService'
   
   describe('UserService', () => {
     let userService: UserService
     let mockUserRepository: jest.Mocked<UserRepository>
     
     beforeEach(() => {
       mockUserRepository = { findById: jest.fn(), create: jest.fn() } as any
       userService = new UserService(mockUserRepository)
     })
     
     afterEach(() => {
       jest.clearAllMocks()
     })
     
     describe('findById', () => {
       it('应该返回找到的用户', async () => {
         const userId = '123'
         const expectedUser = { id: userId, name: 'Test User' }
         mockUserRepository.findById.mockResolvedValue(expectedUser)
         
         const result = await userService.findById(userId)
         
         expect(result).toEqual(expectedUser)
         expect(mockUserRepository.findById).toHaveBeenCalledWith(userId)
       })
     })
   })
   \`\`\`
   
   ### 测试命名规范
   | 命名类型 | 规范要求 | 示例 | 注意事项 |
   |----------|----------|------|----------|
   | 文件命名 | *.test.ts | user.service.test.ts | 与被测文件同名 |
   | 测试套件 | describe('模块名', () => {}) | describe('UserService', () => {}) | 描述模块功能 |
   | 测试用例 | it('应该xxx', () => {}) | it('应该返回用户信息', () => {}) | 描述预期行为 |
   | 测试分组 | context('场景', () => {}) | context('当用户不存在时', () => {}) | 按场景分组 |

   ### 测试数据管理
   | 数据类型 | 管理方式 | 存储位置 | 使用场景 | 生命周期 |
   |----------|----------|----------|----------|----------|
   | 单元测试数据 | Mock对象 | 测试文件内 | 隔离测试 | 测试用例级别 |
   | 集成测试数据 | 测试工厂 | tests/factories/ | 可复用数据 | 测试套件级别 |
   | E2E测试数据 | 固定数据 | tests/fixtures/ | 真实数据 | 测试会话级别 |
   | 环境配置 | 配置文件 | tests/config/ | 环境变量 | 测试运行级别 |

#### 2.4 测试覆盖率分析
**目标**: 分析测试覆盖率，提供质量评估指导

**执行步骤**:
1. **覆盖率配置扫描**: 覆盖率工具配置、阈值设置
2. **覆盖率数据分析**: 语句覆盖率、分支覆盖率、行覆盖率
3. **覆盖率输出**:
   \`\`\`markdown
   ## 测试覆盖率分析
   ### 覆盖率配置
   | 覆盖率类型 | 工具配置 | 目标阈值 | 当前状态 | 提升策略 |
   |-----------|----------|----------|----------|----------|
   | 语句覆盖率 | nyc --check-coverage | >80% | 85% | 维持现状 |
   | 分支覆盖率 | nyc --branches | >75% | 70% | 需要提升 |
   | 函数覆盖率 | nyc --functions | >90% | 92% | 维持现状 |
   | 行覆盖率 | nyc --lines | >80% | 78% | 需要提升 |

   ### 覆盖率报告
   | 模块名称 | 语句覆盖率 | 分支覆盖率 | 函数覆盖率 | 行覆盖率 | 综合评估 |
   |----------|-----------|-----------|-----------|----------|----------|
   | services/ | 85% | 70% | 92% | 78% | ⚠️ 需要改进 |
   | controllers/ | 90% | 85% | 95% | 88% | ✅ 良好 |
   | utils/ | 95% | 90% | 98% | 93% | ✅ 优秀 |
   | models/ | 75% | 65% | 80% | 72% | ❌ 需要重点改进 |

   \`\`\`

#### 2.5 测试工具链分析
**目标**: 分析测试工具链，提供工具使用指导

**执行步骤**:
1. **测试工具扫描**: 单元测试、集成测试、E2E测试工具
2. **工具配置分析**: 工具配置文件、插件配置、集成配置
3. **工具链输出**:
   \`\`\`markdown
   ## 测试工具链分析
   ### 测试工具清单
   | 工具类型 | 工具名称 | 版本 | 主要功能 | 配置文件 | 集成方式 |
   |----------|----------|------|----------|----------|----------|
   | 单元测试 | Jest | 29.5+ | 断言、Mock、覆盖率 | jest.config.js | npm scripts |
   | 集成测试 | Vitest | 0.34+ | 快速执行、HMR | vitest.config.ts | npm scripts |
   | E2E测试 | Cypress | 12.17+ | 端到端测试 | cypress.config.js | npm scripts |
   | 覆盖率 | nyc | 15.1+ | 代码覆盖率 | .nycrc | Jest集成 |
   | Mock工具 | MSW | 1.3+ | API Mock | mocks/handlers.js | 测试文件引入 |

   ### 工具配置示例
   #### Jest配置
   \`\`\`javascript
   // jest.config.js
   module.exports = {
     preset: 'ts-jest',
     testEnvironment: 'node',
     roots: ['<rootDir>/src', '<rootDir>/tests'],
     testMatch: ['**/__tests__/**/*.ts', '**/?(*.)+(spec|test).ts'],
     transform: {
       '^.+\\.ts$': 'ts-jest',
     },
     collectCoverageFrom: [
       'src/**/*.ts',
       '!src/**/*.d.ts',
       '!src/**/__tests__/**',
     ],
     coverageDirectory: 'coverage',
     coverageReporters: ['text', 'lcov', 'html'],
     setupFilesAfterEnv: ['<rootDir>/tests/setup.ts'],
   }
   \`\`\`

   #### Vitest配置
   \`\`\`typescript
   // vitest.config.ts
   import { defineConfig } from 'vitest/config'
   import tsconfigPaths from 'vite-tsconfig-paths'

   export default defineConfig({
     test: {
       globals: true,
       environment: 'node',
       include: ['src/**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}'],
       coverage: {
         reporter: ['text', 'json', 'html'],
         exclude: [
           'node_modules/',
           'test-setup.ts',
         ],
       },
     },
     plugins: [tsconfigPaths()],
   })
   \`\`\`

   ### 工具集成流程
   \`\`\`mermaid
   graph TD
       A[代码提交] --> B[单元测试Jest]
       B --> C[覆盖率检查nyc]
       C --> D[集成测试Vitest]
       D --> E[E2E测试Cypress]
       E --> F[测试报告生成]
       F --> G[质量门禁检查]
       G --> H[部署/发布]
   \`\`\`
   \`\`\`

## 输出格式要求

生成完整的开发测试分析文档，包含以下结构：

### 文档结构
\`\`\`\`markdown
# {项目名称} 开发测试分析

## 开发环境分析

### 项目启动机制
#### 启动命令清单
| 应用类型 | 启动命令 | 配置文件 | 端口 | 依赖关系 | 启动顺序 |
|---------|---------|---------|------|---------|---------|
| {应用类型} | {启动命令} | {配置文件} | {端口} | {依赖关系} | {启动顺序} |

#### 启动流程图
[使用mermaid图表展示启动流程]

### 环境搭建指南
#### 环境依赖清单
| 依赖类型 | 依赖名称 | 版本要求 | 安装方式 | 配置文件 |
|---------|----------|----------|----------|----------|
| {依赖类型} | {依赖名称} | {版本要求} | {安装方式} | {配置文件} |

#### 环境变量配置
[必需的环境变量配置示例]

### 配置管理机制
#### 配置文件清单
| 配置文件 | 环境类型 | 主要配置项 | 配置格式 | 加载优先级 |
|---------|----------|-----------|----------|-----------|
| {配置文件} | {环境类型} | {主要配置项} | {配置格式} | {加载优先级} |

#### 配置加载机制
[使用mermaid图表展示配置加载流程]

### 调试机制配置
#### 调试配置清单
| 调试类型 | 配置文件 | 调试端口 | 源码映射 | 支持功能 |
|---------|----------|----------|----------|----------|
| {调试类型} | {配置文件} | {调试端口} | {源码映射} | {支持功能} |

#### 调试操作指南
[详细的调试操作步骤和技巧]

### 代码组织结构
#### 目录结构分析
| 目录路径 | 主要职责 | 文件类型 | 设计模式 | 开发建议 |
|----------|----------|----------|----------|----------|
| {目录路径} | {主要职责} | {文件类型} | {设计模式} | {开发建议} |

#### 设计模式应用
| 设计模式 | 应用位置 | 使用场景 | 优势 | 注意事项 |
|----------|----------|----------|------|----------|
| {设计模式} | {应用位置} | {使用场景} | {优势} | {注意事项} |

## 测试环境分析

### 测试框架配置
#### 测试框架清单
| 测试类型 | 框架名称 | 配置文件 | 测试环境 | 覆盖率要求 | 主要特性 |
|----------|----------|----------|----------|------------|----------|
| {测试类型} | {框架名称} | {配置文件} | {测试环境} | {覆盖率要求} | {主要特性} |

#### 测试环境配置
| 环境类型 | 数据库配置 | Mock配置 | 环境变量 | 清理策略 |
|----------|-----------|----------|----------|----------|
| {环境类型} | {数据库配置} | {Mock配置} | {环境变量} | {清理策略} |

### 测试运行机制
#### 测试命令清单
| 测试类型 | 执行命令 | 执行目录 | 监听模式 | 并行执行 | 超时设置 |
|----------|----------|----------|----------|----------|----------|
| {测试类型} | {执行命令} | {执行目录} | {监听模式} | {并行执行} | {超时设置} |

#### 测试执行流程
[使用mermaid图表展示测试执行流程]

#### 常用测试命令
[常用测试命令的示例和说明]

### 测试组织结构
#### 测试目录结构
| 测试类型 | 目录路径 | 文件命名规范 | 测试重点 | 测试数据管理 |
|----------|----------|-------------|----------|--------------|
| {测试类型} | {目录路径} | {文件命名规范} | {测试重点} | {测试数据管理} |

#### 测试编写模板
[各种测试类型的编写模板示例]

#### 测试命名规范
| 命名类型 | 规范要求 | 示例 | 注意事项 |
|----------|----------|------|----------|
| {命名类型} | {规范要求} | {示例} | {注意事项} |

#### 测试数据管理
| 数据类型 | 管理方式 | 存储位置 | 使用场景 | 生命周期 |
|----------|----------|----------|----------|----------|
| {数据类型} | {管理方式} | {存储位置} | {使用场景} | {生命周期} |

### 测试覆盖率分析
#### 覆盖率配置
| 覆盖率类型 | 工具配置 | 目标阈值 | 当前状态 | 提升策略 |
|-----------|----------|----------|----------|----------|
| {覆盖率类型} | {工具配置} | {目标阈值} | {当前状态} | {提升策略} |

#### 覆盖率报告
| 模块名称 | 语句覆盖率 | 分支覆盖率 | 函数覆盖率 | 行覆盖率 | 综合评估 |
|----------|-----------|-----------|-----------|----------|----------|
| {模块名称} | {语句覆盖率} | {分支覆盖率} | {函数覆盖率} | {行覆盖率} | {综合评估} |

#### 覆盖率提升策略
[覆盖率提升的具体策略和方法]

### 测试工具链分析
#### 测试工具清单
| 工具类型 | 工具名称 | 版本 | 主要功能 | 配置文件 | 集成方式 |
|----------|----------|------|----------|----------|----------|
| {工具类型} | {工具名称} | {版本} | {主要功能} | {配置文件} | {集成方式} |

#### 工具配置示例
[主要测试工具的配置示例]

#### 工具集成流程
[使用mermaid图表展示工具集成流程]


## 开发测试检查清单

### 开发环境检查
- [ ] 项目启动命令正常工作
- [ ] 环境变量配置正确
- [ ] 依赖服务正常启动
- [ ] 调试配置可用
- [ ] 代码热重载功能正常

### 测试环境检查
- [ ] 单元测试全部通过
- [ ] 集成测试全部通过
- [ ] E2E测试全部通过
- [ ] 测试覆盖率达标
- [ ] 测试报告生成正常

### 工具链检查
- [ ] 测试框架配置正确
- [ ] 覆盖率工具正常工作
- [ ] Mock工具配置正确
- [ ] CI/CD集成正常
- [ ] 测试报告生成正常
\`\`\`

## 配置示例模板

### 开发环境配置示例
\`\`\`json
// package.json 开发脚本
{
 "scripts": {
   "dev": "next dev",
   "dev:debug": "NODE_OPTIONS='--inspect' next dev",
   "build": "next build",
   "start": "next start",
   "lint": "next lint",
   "type-check": "tsc --noEmit"
 }
}
\`\`\`

### 测试配置示例
\`\`\`javascript
// jest.config.js
module.exports = {
 preset: 'ts-jest',
 testEnvironment: 'node',
 roots: ['<rootDir>/src', '<rootDir>/tests'],
 testMatch: ['**/__tests__/**/*.ts', '**/?(*.)+(spec|test).ts'],
 transform: {
   '^.+\\.ts$': 'ts-jest',
 },
 collectCoverageFrom: [
   'src/**/*.ts',
   '!src/**/*.d.ts',
   '!src/**/__tests__/**',
 ],
 coverageDirectory: 'coverage',
 coverageReporters: ['text', 'lcov', 'html'],
 setupFilesAfterEnv: ['<rootDir>/tests/setup.ts'],
}
\`\`\`

### 调试配置示例
\`\`\`json
// .vscode/launch.json
{
 "version": "0.2.0",
 "configurations": [
   {
     "name": "Next.js: debug server-side",
     "type": "node-terminal",
     "request": "launch",
     "command": "npm run dev:debug",
     "serverReadyAction": {
       "pattern": "started server on .+, url: (https?://.+)",
       "uriFormat": "%s",
       "action": "debugWithChrome"
     }
   },
   {
     "name": "Next.js: debug client-side",
     "type": "chrome",
     "request": "launch",
     "url": "http://localhost:3000"
   }
 ]
}
\`\`\`\`

## 特别注意事项
1. 必须基于实际的代码和配置进行分析，不能虚构开发测试环境
2. 重点分析开发环境和测试环境的配置
3. 关注测试框架和工具链的配置

## 输出文件命名
\`${WIKI_OUTPUT_DIR}${SUBTASK_OUTPUT_FILENAMES.DEVELOPMENT_TEST_ANALYSIS_TASK_FILE}\`
注意：如果${WIKI_OUTPUT_DIR} 目录不存在，则创建。

## 示例输出特征
基于项目的开发测试分析特征：
- 详细的开发环境搭建和配置指导
- 完整的测试框架和工具链配置说明
- 清晰的测试组织结构和编写规范
- 实用的调试和测试操作指南
- 全面的开发测试最佳实践建议
- 具体的检查清单和配置示例
`
