import { GENERAL_RULES_OUTPUT_DIR, WIKI_OUTPUT_DIR, SUBTASK_OUTPUT_FILENAMES } from "./constants"

export const PROJECT_RULES_GENERATION_TEMPLATE = (workspace: string) => `# 项目开发规则文档生成任务

## 任务指令
你需要基于代码仓库分析，提取项目特有、强制、具体的开发测试规则，生成规则文档，用于提升AI Coding Agent的代码生成精准性。请严格遵循以下要求执行。

## 核心目标（必须全部满足）
生成的规则需同时符合以下5点，缺一不可：
1. **项目特有**：仅针对当前项目的特殊约束，排除通用规范（如"使用ES6语法"不纳入）；
2. **强制约束**：不遵守会直接导致问题（bug/崩溃/部署失败）或破坏架构一致性；
3. **具体明确**：包含确切信息（版本号、路径、数值、格式等），禁止模糊表述；
4. **易于执行**：表述无歧义，逻辑清晰，AI可直接明确操作方式；
5. **内容简洁充实**：单条规则不超过100字，单行，禁止包含任何代码示例，整体文档规则条数按项目规模控制，不超过200条。

## 深度分析指导

### 架构分析
1. **技术栈深度分析**：系统识别项目使用的主要技术栈、框架版本和配置要求
   - 分析package.json中的依赖版本、scripts配置和peerDependencies
   - 检查tsconfig.json、webpack.config.js、vite.config.js等构建配置文件的编译选项和插件配置
   - 识别框架特定的配置要求和约束，包括React/Vue/Angular等框架的版本特定规则
   - 分析项目使用的构建工具链和打包策略，提取关键配置约束

2. **项目结构深度分析**：全面理解项目的目录结构和组织方式
   - 分析src/、components/、utils/、services/等目录的用途和规范
   - 识别模块间的依赖关系和调用规则，包括循环依赖检测和模块耦合度分析
   - 理解项目的分层架构（如MVC、MVVM、Clean Architecture等）和各层职责边界
   - 提取项目特有的目录命名约定和文件组织规则

### 依赖关系分析
1. **包依赖深度分析**：全面分析项目的包管理策略
   - 检查package.json中的dependencies、devDependencies和optionalDependencies
   - 识别版本锁定策略（如^、~、exact版本）和版本冲突解决机制
   - 分析包之间的依赖冲突和兼容性要求，包括peerDependencies的约束
   - 提取包更新策略和安全补丁应用规则

2. **模块依赖深度分析**：深入分析代码模块间的依赖关系
   - 识别核心模块和工具模块的调用规则，包括公共API的使用约束
   - 分析循环依赖和模块耦合度，提取模块解耦和重构规则
   - 理解模块的导入导出规范，包括ESM/CommonJS混用规则
   - 提取模块间通信和数据流转的约束规则

### 业务逻辑分析
1. **核心业务流程深度分析**：系统识别项目的主要业务流程和约束
   - 分析用户操作流程和数据流转，包括状态管理和数据同步规则
   - 识别业务规则和验证逻辑，包括数据校验、权限控制和业务约束
   - 理解异常处理和错误恢复机制，包括错误码规范和异常传播规则
   - 提取业务逻辑复用和抽象的约束规则

2. **数据模型深度分析**：全面理解项目的数据结构和处理方式
   - 分析数据库表结构和关系，包括索引策略和查询优化规则
   - 识别数据验证和转换规则，包括数据类型约束和格式化要求
   - 理解缓存策略和数据一致性要求，包括缓存失效和更新机制
   - 提取数据安全和隐私保护的约束规则

### 代码模式分析
1. **设计模式深度识别**：系统识别项目中使用的设计模式
   - 分析单例、工厂、观察者、策略等模式的应用场景和实现约束
   - 识别项目特有的代码模式和最佳实践，包括代码复用和抽象策略
   - 理解设计模式的选择原则和使用限制，避免过度设计
   - 提取模式实现的约束规则和最佳实践

2. **编码规范深度分析**：全面理解项目的编码风格和规范
   - 分析ESLint、Prettier、Stylelint等配置文件的规则设置
   - 识别命名约定和代码组织规则，包括变量、函数、类的命名规范
   - 理解注释和文档要求，包括JSDoc规范和API文档生成规则
   - 提取代码质量和可维护性的约束规则

### 测试策略分析
1. **测试框架深度分析**：系统识别项目使用的测试框架和工具
   - 分析Jest、Vitest、Mocha等测试框架的配置和使用规则
   - 识别测试报告生成规则
   - 理解测试环境配置和Mock数据管理策略
   - 提取测试用例编写和组织的约束规则

2. **测试用例设计深度分析**：全面理解项目的测试策略
   - 分析单元测试、集成测试、端到端测试的分工和要求
   - 识别测试数据准备和清理的规则，包括测试数据库管理
   - 理解测试断言和验证的规范，包括边界值测试和异常测试
   - 提取测试自动化和CI/CD集成的约束规则

## 分析资源优先级
请优先分析以下文件提取规则，按重要性排序：
1. 架构配置文件（如package.json、tsconfig.json、go.mod、pom.xml、Cargo.toml等）；
2. 构建和部署配置（如webpack.config.js、vite.config.js、Dockerfile、CI/CD配置等）；
3. 代码质量配置（如ESLint配置、Prettier配置、TypeScript配置等）；
4. 公共复用组件/工具类（如src/utils/、src/common/、src/lib/等）；
5. 核心业务模块（项目主要功能模块的代码及文档）；
6. 测试配置和示例（如jest.config.js、vitest.config.ts、测试用例等）；
7. 文档和规范文件（如README.md、CONTRIBUTING.md、API文档等）。

## 规则编写规范

### 表述要求
- 必须使用"必须""禁止""仅允许"等强制词汇，明确"AI应如何做"；
- 每条规则必须包含具体信息（如"axios 0.27.2"而非"指定axios版本"）；
- 严格遵守字数限制（单条≤100字）；
- 禁止包含任何代码示例、简短的代码片段和语法示例；

### 正确示例（符合核心目标）
- 控制器必须继承src/controllers/BaseController.ts，实现validate方法，确保请求参数统一验证和错误处理；
- 单元测试必须使用Jest，测试文件必须与源文件同名添加.spec.ts后缀，确保测试文件组织规范；
- API响应必须包含timestamp字段，格式为ISO 8601，便于客户端处理时间相关逻辑和数据同步；
- 状态管理必须使用Zustand，store文件必须位于src/stores/目录，禁止使用Redux或Context API；
- 数据库操作必须使用参数化查询，禁止字符串拼接，防止SQL注入攻击并确保查询安全；

### 错误示例及原因
- 应复用现有工具函数（错误：未说明具体工具函数，不满足"具体明确"）；
- 保持依赖版本稳定（错误：通用建议，不满足"项目特有"）；
- 接口返回格式统一（错误：未说明具体格式，不满足"具体明确"）；
- 尽量使用现有组件（错误："尽量"非强制，不满足"强制约束"）；
- 使用TypeScript编写代码（错误：通用规范，不满足"项目特有"）。

### 允许出现的内容
- 具体的版本号、路径、配置参数等技术细节；
- 必要的上下文说明和背景信息；
- 项目特有的技术约束和业务规则；
- 架构设计和模块组织的具体要求；

### 禁止出现的内容
- 抽象原则（如"保持代码简洁"，无验证标准）；
- 通用规范（如"使用设计模式"，适用于所有项目）；
- 模糊描述（如"减少代码冗余"，无判断标准）；
- 任何形式的代码示例、代码片段；
- 冲突内容（与项目主流实践冲突的规则）；
- 装饰性元素（emoji图标、百分比符号、特殊符号等）；
- 多级标题（仅允许一级和二级标题，禁止三级及以上标题）。

## 规则分类方法

### 分类原则
请按以下原则对规则分类：
1. 只保留与项目相关的分类（如项目无微前端，删除"微前端"分类）；
2. 可新增项目特有分类（如"小程序开发""区块链合约"等）；
3. 分类名称必须具体，禁止使用"其他""通用"等占位符；
4. 分类应该反映项目的技术架构和业务特点；
5. 每个分类下的规则应该具有逻辑关联性；
6. 分类之间应该有清晰的边界，避免规则重复或交叉。

### 可选基础分类（按需选择/删减）
- **依赖管理**：包管理器（如pnpm/npm）、版本锁定、更新限制、冲突处理；
- **代码组织**：目录结构要求、文件命名规范、跨模块调用规则；
- **构建部署**：构建工具配置、CI/CD流程要求、环境隔离规则；
- **API开发**：接口路径格式、返回数据结构、错误处理规范；
- **数据处理**：数据库操作工具、数据验证方法、脱敏规则；
- **前端组件**：组件复用要求、状态管理方式、样式引入规范；
- **测试机制**：单元测试框架、覆盖率要求、Mock数据使用规则；
- **类型系统**：TypeScript配置、类型定义规范、接口设计规则；
- **性能优化**：代码分割策略、缓存机制、资源加载优化；
- **错误处理**：异常捕获机制、错误码规范、日志记录要求；
- **安全规范**：输入验证、权限控制、数据加密规则。

### 可选扩展分类（有特殊需求时添加）
- **微前端**：子应用通信、路由管理、样式隔离规则；
- **Serverless**：函数配置限制、资源使用上限、冷启动优化；
- **实时通信**：WebSocket连接管理、消息重试机制、事件处理规则；
- **国际化**：多语言支持、文本提取规则、本地化配置；
- **监控日志**：错误上报、性能监控、日志格式规范；
- **数据迁移**：数据库迁移策略、数据版本管理、回滚机制；
- **缓存策略**：缓存配置、失效机制、一致性保证；
- **异步处理**：异步任务管理、队列配置、重试策略；
- （可自定义其他项目特有分类）

## 规则完整性要求

### 规则完整性检查
- 检查是否覆盖了项目的所有关键约束和要求
- 验证规则间是否存在逻辑矛盾或冲突
- 确保规则体系能够指导完整的开发流程
- 验证规则是否考虑了各种边界情况和异常场景

### 规则一致性保证
- 确保同类规则在表述风格和约束强度上保持一致
- 验证技术术语和概念在所有规则中保持一致
- 检查规则是否与项目的实际开发实践保持一致
- 确保规则与项目的架构设计和业务目标保持一致

## 输出格式（强制遵守，否则无效）

### 标准格式示例
最终输出必须严格符合以下格式：

\`\`\`\`markdown
# 项目开发规范

## 代码组织
- 控制器必须继承src/controllers/BaseController.ts，实现validate方法，确保请求参数统一验证
- 服务层必须位于src/services/目录，文件名必须以Service.ts结尾，禁止在控制器中直接实现业务逻辑
- 组件必须使用函数式组件，禁止使用类组件，确保与React 18特性兼容
- 状态管理必须使用Zustand，store文件必须位于src/stores/目录，禁止使用Redux或Context API
- 自定义Hook必须以use开头，位于src/hooks/目录，禁止在组件内部定义Hook

## 测试机制
- 单元测试必须使用Jest，测试文件必须与源文件同名，添加.spec.ts后缀，确保测试文件组织规范
- 集成测试必须位于src/tests/integration/目录，必须使用真实数据库，禁止使用内存数据库
- 测试数据必须使用Factory模式，位于src/tests/factories/目录，确保测试数据一致性
- 异步测试必须设置超时时间为5000毫秒，避免测试长时间阻塞CI/CD流程
- Mock服务必须使用msw库，配置文件必须位于src/tests/mocks/目录，确保Mock数据管理规范

## API开发
- RESTful API必须使用HTTP状态码，200表示成功，400表示客户端错误，500表示服务器错误
- 接口路径必须使用kebab-case格式，版本号必须包含在路径中，如/api/v1/user-profile
- 请求体必须使用JSON格式，Content-Type必须设为application/json，确保数据传输格式统一
- 响应数据必须包含timestamp字段，格式为ISO 8601，便于客户端处理时间相关逻辑
- 分页参数必须使用page和pageSize，默认值分别为1和20，确保分页逻辑一致

## 数据处理
- 数据库迁移文件必须位于src/migrations/目录，文件名必须包含时间戳，确保版本控制
- 查询语句必须使用参数化查询，禁止字符串拼接，防止SQL注入攻击
- 事务操作必须使用src/database/Transaction.ts的beginTransaction方法，确保数据一致性
- 索引创建必须遵循src/database/indexes.sql规范，禁止随意创建索引，影响性能
- 数据库连接必须配置最大连接数为20，超时时间为30秒，确保资源合理利用

## 错误处理
- 所有异步操作必须使用try-catch包裹，错误必须通过logger.error记录，确保错误可追踪
- 禁止在生产环境中输出console.log，使用logger.info替代，避免敏感信息泄露
- API错误码必须使用src/constants/errorCodes.js中定义的错误码，确保错误码统一管理
- 错误处理必须统一使用项目定义的ApiError类，确保错误信息格式一致，便于前端统一处理
- 日志文件必须位于logs/目录，文件名必须包含日期，日志级别必须可配置

## 依赖管理
- 必须使用pnpm 8.6.0+版本管理依赖，禁止使用npm/yarn，版本锁定在package.json的packageManager字段中，确保团队开发环境一致性
- 禁止在src/utils/目录外定义工具函数，所有工具类必须集中管理，便于维护和复用，避免代码分散
- 第三方包升级必须经过完整测试流程，包括单元测试、集成测试和端到端测试，确保升级后功能正常
\`\`\`\`

### 格式强制要求（逐条遵守，违反任何一条都将导致输出无效）
1. 一级标题固定为"# 项目开发规范"，不允许任何修改；
2. 分类标题必须以"## "开头（如"## 依赖管理"），禁止使用三级标题（###）；
3. 每条规则必须以"- "开头，独立成行，单行不超过100字；
4. 禁止包含任何形式的代码示例、代码片段；
5. 禁止装饰性元素：emoji图标、特殊符号、颜色标记等；
6. 禁止添加任何冗余的说明性文字、注释；

## 输出验证机制

### 自检清单
在完成输出前，请逐项检查：
- [ ] 所有规则都以"- "开头
- [ ] 没有使用任何emoji图标或特殊符号
- [ ] 没有三级标题（###）
- [ ] 没有包含任何形式的代码示例
- [ ] 每条规则都包含具体信息
- [ ] 每条规则都使用强制词汇
- [ ] 一级标题正确
- [ ] 分类标题格式正确
- [ ] 单条规则不超过100字
- [ ] 总规则数符合项目规模要求
- [ ] 规则分类合理，反映项目特点
- [ ] 格式清晰，易于阅读
- [ ] 规则间逻辑一致，无冲突
- [ ] 规则覆盖了关键开发和测试环节
- [ ] 规则具有实际指导价值

### 错误处理流程
如果发现任何不符合要求的内容，必须：
1. 立即停止生成
2. 重新分析问题所在
3. 修正后重新生成完整文档
4. 再次进行完整验证
5. 进行多维度质量评估

## 输出文件路径
\`${GENERAL_RULES_OUTPUT_DIR}${SUBTASK_OUTPUT_FILENAMES.PROJECT_RULES_TASK_FILE}\`
`
