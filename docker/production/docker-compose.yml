version: '3.8'

services:
  postgres:
    build: 
      context: ./postgres
      dockerfile: Dockerfile
    container_name: roo_postgres_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-roo_cloud_prod}
      POSTGRES_USER: ${POSTGRES_USER:-roo_prod}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ../shared/database/migrations:/migrations:ro
      - ./postgres/backups:/backups
      - ./postgres/logs:/var/log/postgresql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-roo_prod} -d ${POSTGRES_DB:-roo_cloud_prod}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - roo_network
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql
    
  redis:
    build: 
      context: ./redis
      dockerfile: Dockerfile
    container_name: roo_redis_prod
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis_prod_data:/data
      - ./redis/logs:/var/log/redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - roo_network
    ports:
      - "${REDIS_PORT:-6379}:6379"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    
  roo-cloud-service:
    build: 
      context: ../../production-ccs
      dockerfile: Dockerfile.prod
    container_name: roo_cloud_service_prod
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - API_PORT=${API_PORT:-3001}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - CORS_ORIGIN=${CORS_ORIGIN:-*}
      - RATE_LIMIT_WINDOW=${RATE_LIMIT_WINDOW:-900000}
      - RATE_LIMIT_MAX=${RATE_LIMIT_MAX:-100}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - roo_network
    ports:
      - "${API_PORT:-3001}:3001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /app/logs
    user: "1001:1001"

  # Nginx reverse proxy for production
  nginx:
    build: 
      context: ./nginx
      dockerfile: Dockerfile
    container_name: roo_nginx_prod
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      roo-cloud-service:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - roo_network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: roo_prometheus_prod
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - roo_network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/postgres
  redis_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/redis
  prometheus_data:
    driver: local

networks:
  roo_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
