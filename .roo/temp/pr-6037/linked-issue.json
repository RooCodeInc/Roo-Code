{
	"author": { "id": "MDQ6VXNlcjQ5MTAzMjQ3", "is_bot": false, "login": "hannesrudolph", "name": "Hannes Rudolph" },
	"body": "## App Version\nLatest (based on current codebase analysis)\n\n## API Provider\nNot Applicable / Other\n\n## Model Used\nN/A\n\n## üîÅ Steps to Reproduce\n\n1. Open VSCode with Roo Code extension\n2. Navigate to the MCP Servers view (click MCP icon in sidebar)\n3. Toggle any MCP server to disabled state using the toggle switch\n4. Observe the server row - note the status indicator color\n5. Check system processes (Activity Monitor on macOS, Task Manager on Windows)\n6. Look for the MCP server process still running\n7. Restart VSCode\n8. Check processes again - disabled MCP servers are still launched\n\nInclude:\n- The disabled server still shows a green status indicator (connected state)\n- The server process continues running in the background\n- After VSCode restart, disabled servers are started again despite being disabled\n\n## üí• Outcome Summary\n\nExpected: Disabled MCP servers should not start processes, should show appropriate disabled status (grey/red indicator), and should not consume system resources\nActual: Disabled servers start processes, show green \"connected\" status, and continue consuming resources even when disabled\n\n## üìÑ Relevant Logs or Errors\n\nNo specific error messages - the issue is silent resource consumption and incorrect UI state.\n\n---\n\n## üõ†Ô∏è Contributing & Technical Analysis\n\n‚úÖ **I'm interested in providing technical analysis**\n‚úÖ **I understand this needs approval before implementation begins**\n\n### Root Cause / Implementation Target\n\nThe issue stems from incomplete handling of disabled MCP servers in multiple areas:\n\n1. **Process Management**: In `src/services/mcp/McpHub.ts` (lines 975-992), the `updateServerConnections()` method doesn't check if a server is disabled before calling `connectToServer()`\n2. **UI Status Display**: In `webview-ui/src/components/mcp/McpView.tsx` (lines 220-229), the `getStatusColor()` function only considers connection status, not disabled state\n3. **Server Filtering**: While `getServers()` filters out disabled servers (line 410), the UI still receives all servers including disabled ones\n\n### Affected Components\n\n- **Primary Files:**\n  - `src/services/mcp/McpHub.ts` (lines 975-992): Server connection logic\n  - `webview-ui/src/components/mcp/McpView.tsx` (lines 220-229, 275): Status display logic\n\n- **Secondary Impact:**\n  - All components that display MCP server status\n  - System resource management\n  - User experience when managing multiple MCP servers\n\n### Current Implementation Analysis\n\nThe current code properly stores the disabled state but fails to act on it in several critical places:\n\n1. PR #5922 added checks in `updateServerConnections()` but these checks were incomplete\n2. The UI receives disabled servers but doesn't differentiate their visual state\n3. Disabled servers are filtered from the agent's view but still consume resources\n\n### Proposed Implementation\n\n#### Step 1: Fix process spawning for disabled servers\n- File: `src/services/mcp/McpHub.ts`\n- Changes: Add disabled check before `connectToServer()` calls in `updateServerConnections()`\n- Rationale: Prevents disabled servers from starting processes\n\n#### Step 2: Update UI status indicators\n- File: `webview-ui/src/components/mcp/McpView.tsx`\n- Changes: Modify `getStatusColor()` to check disabled state first\n- Rationale: Provides clear visual feedback about server state\n\n#### Step 3: Handle server state transitions\n- File: `src/services/mcp/McpHub.ts`\n- Changes: When toggling disabled state, properly disconnect running servers\n- Rationale: Ensures immediate resource cleanup\n\n### Code Architecture Considerations\n- Follow existing patterns for server state management\n- Maintain backward compatibility with existing configurations\n- Ensure consistent state between backend and UI\n\n### Testing Requirements\n- Unit Tests:\n  - [ ] Test case 1: Disabled servers don't start processes during initialization\n  - [ ] Test case 2: Toggling disabled state properly disconnects servers\n  - [ ] Test case 3: UI correctly displays disabled state\n- Integration Tests:\n  - [ ] Test scenario 1: Multiple servers with mixed enabled/disabled states\n  - [ ] Test scenario 2: State persistence across VSCode restarts\n- Edge Cases:\n  - [ ] Edge case 1: Server disabled while actively processing a request\n  - [ ] Edge case 2: Rapid toggling of disabled state\n\n### Performance Impact\n- Expected performance change: Positive - reduced resource consumption\n- Benchmarking needed: No\n- Optimization opportunities: Lazy loading of disabled server configurations\n\n### Security Considerations\n- No security implications - this is a resource management fix\n\n### Migration Strategy\nNot applicable - this is a bug fix that maintains existing configuration format\n\n### Rollback Plan\nIf issues arise, the fix can be reverted without data loss as it doesn't change configuration schema\n\n### Dependencies and Breaking Changes\n- External dependencies affected: None\n- API contract changes: None\n- Breaking changes for users: None\n\n### Implementation Complexity\n- Estimated effort: Small\n- Risk level: Low\n- Prerequisites: None\n\n## Acceptance Criteria\n\nGiven I have MCP servers configured in my settings\nWhen I disable a server using the toggle switch\nThen the server process should immediately stop\nAnd the status indicator should show grey/disabled state\nAnd no system resources should be consumed by that server\nBut the server configuration should remain in settings\n\nGiven I have disabled MCP servers\nWhen I restart VSCode\nThen disabled servers should not start processes\nAnd they should show as disabled in the UI\nAnd they should not appear in the agent's available servers list\nBut I should be able to re-enable them at any time\n\nGiven I toggle a server from enabled to disabled\nWhen the server is currently processing a request\nThen the current request should complete or timeout gracefully\nAnd the server should then disconnect\nAnd no new requests should be accepted\nBut no data corruption should occur\n\n---\n\n**Note:** This issue supersedes and expands upon #2797, which focused only on the process starting aspect. This comprehensive issue addresses all aspects of disabled MCP server behavior including UI state and resource management.",
	"number": 6036,
	"state": "OPEN",
	"title": "Disabled MCP servers still start processes and show incorrect status indicators"
}
